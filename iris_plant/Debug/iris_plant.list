
iris_plant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047c0  0800f020  0800f020  0001f020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137e0  080137e0  000306c8  2**0
                  CONTENTS
  4 .ARM          00000008  080137e0  080137e0  000237e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137e8  080137e8  000306c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080137e8  080137e8  000237e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080137f4  080137f4  000237f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c8  20000000  080137fc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  200006c8  08013ec4  000306c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08013ec4  00030b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000306c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000306f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0016d254  00000000  00000000  0003073b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000f7ab  00000000  00000000  0019d98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004860  00000000  00000000  001ad140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003820  00000000  00000000  001b19a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038908  00000000  00000000  001b51c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005255a  00000000  00000000  001edac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001e98d2  00000000  00000000  00240022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0001653c  00000000  00000000  004298f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0043fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200006c8 	.word	0x200006c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f004 	.word	0x0800f004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200006cc 	.word	0x200006cc
 800020c:	0800f004 	.word	0x0800f004

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f1 	b.w	80010cc <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a6 	b.w	80010cc <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9e08      	ldr	r6, [sp, #32]
 8000e0a:	460d      	mov	r5, r1
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	460f      	mov	r7, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14a      	bne.n	8000eaa <__udivmoddi4+0xa6>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4694      	mov	ip, r2
 8000e18:	d965      	bls.n	8000ee6 <__udivmoddi4+0xe2>
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	b143      	cbz	r3, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	f1c3 0220 	rsb	r2, r3, #32
 8000e28:	409f      	lsls	r7, r3
 8000e2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	409c      	lsls	r4, r3
 8000e32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e36:	fa1f f58c 	uxth.w	r5, ip
 8000e3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e3e:	0c22      	lsrs	r2, r4, #16
 8000e40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e48:	fb01 f005 	mul.w	r0, r1, r5
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x62>
 8000e50:	eb1c 0202 	adds.w	r2, ip, r2
 8000e54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e58:	f080 811c 	bcs.w	8001094 <__udivmoddi4+0x290>
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	f240 8119 	bls.w	8001094 <__udivmoddi4+0x290>
 8000e62:	3902      	subs	r1, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a12      	subs	r2, r2, r0
 8000e68:	b2a4      	uxth	r4, r4
 8000e6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e76:	fb00 f505 	mul.w	r5, r0, r5
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d90a      	bls.n	8000e94 <__udivmoddi4+0x90>
 8000e7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e86:	f080 8107 	bcs.w	8001098 <__udivmoddi4+0x294>
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	f240 8104 	bls.w	8001098 <__udivmoddi4+0x294>
 8000e90:	4464      	add	r4, ip
 8000e92:	3802      	subs	r0, #2
 8000e94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	b11e      	cbz	r6, 8000ea6 <__udivmoddi4+0xa2>
 8000e9e:	40dc      	lsrs	r4, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0xbc>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	f000 80ed 	beq.w	800108e <__udivmoddi4+0x28a>
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	fab3 f183 	clz	r1, r3
 8000ec4:	2900      	cmp	r1, #0
 8000ec6:	d149      	bne.n	8000f5c <__udivmoddi4+0x158>
 8000ec8:	42ab      	cmp	r3, r5
 8000eca:	d302      	bcc.n	8000ed2 <__udivmoddi4+0xce>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	f200 80f8 	bhi.w	80010c2 <__udivmoddi4+0x2be>
 8000ed2:	1a84      	subs	r4, r0, r2
 8000ed4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4617      	mov	r7, r2
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d0e2      	beq.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ee4:	e7df      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee6:	b902      	cbnz	r2, 8000eea <__udivmoddi4+0xe6>
 8000ee8:	deff      	udf	#255	; 0xff
 8000eea:	fab2 f382 	clz	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8090 	bne.w	8001014 <__udivmoddi4+0x210>
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efa:	fa1f fe8c 	uxth.w	lr, ip
 8000efe:	2101      	movs	r1, #1
 8000f00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f04:	fb07 2015 	mls	r0, r7, r5, r2
 8000f08:	0c22      	lsrs	r2, r4, #16
 8000f0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f0e:	fb0e f005 	mul.w	r0, lr, r5
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x124>
 8000f16:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x122>
 8000f20:	4290      	cmp	r0, r2
 8000f22:	f200 80cb 	bhi.w	80010bc <__udivmoddi4+0x2b8>
 8000f26:	4645      	mov	r5, r8
 8000f28:	1a12      	subs	r2, r2, r0
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f30:	fb07 2210 	mls	r2, r7, r0, r2
 8000f34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f38:	fb0e fe00 	mul.w	lr, lr, r0
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x14e>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f48:	d202      	bcs.n	8000f50 <__udivmoddi4+0x14c>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	f200 80bb 	bhi.w	80010c6 <__udivmoddi4+0x2c2>
 8000f50:	4610      	mov	r0, r2
 8000f52:	eba4 040e 	sub.w	r4, r4, lr
 8000f56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f5a:	e79f      	b.n	8000e9c <__udivmoddi4+0x98>
 8000f5c:	f1c1 0720 	rsb	r7, r1, #32
 8000f60:	408b      	lsls	r3, r1
 8000f62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f72:	40fd      	lsrs	r5, r7
 8000f74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f78:	4323      	orrs	r3, r4
 8000f7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f7e:	fa1f fe8c 	uxth.w	lr, ip
 8000f82:	fb09 5518 	mls	r5, r9, r8, r5
 8000f86:	0c1c      	lsrs	r4, r3, #16
 8000f88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f90:	42a5      	cmp	r5, r4
 8000f92:	fa02 f201 	lsl.w	r2, r2, r1
 8000f96:	fa00 f001 	lsl.w	r0, r0, r1
 8000f9a:	d90b      	bls.n	8000fb4 <__udivmoddi4+0x1b0>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fa4:	f080 8088 	bcs.w	80010b8 <__udivmoddi4+0x2b4>
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	f240 8085 	bls.w	80010b8 <__udivmoddi4+0x2b4>
 8000fae:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb2:	4464      	add	r4, ip
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	b29d      	uxth	r5, r3
 8000fb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fc8:	45a6      	cmp	lr, r4
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x1da>
 8000fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fd4:	d26c      	bcs.n	80010b0 <__udivmoddi4+0x2ac>
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d96a      	bls.n	80010b0 <__udivmoddi4+0x2ac>
 8000fda:	3b02      	subs	r3, #2
 8000fdc:	4464      	add	r4, ip
 8000fde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fe2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fe6:	eba4 040e 	sub.w	r4, r4, lr
 8000fea:	42ac      	cmp	r4, r5
 8000fec:	46c8      	mov	r8, r9
 8000fee:	46ae      	mov	lr, r5
 8000ff0:	d356      	bcc.n	80010a0 <__udivmoddi4+0x29c>
 8000ff2:	d053      	beq.n	800109c <__udivmoddi4+0x298>
 8000ff4:	b156      	cbz	r6, 800100c <__udivmoddi4+0x208>
 8000ff6:	ebb0 0208 	subs.w	r2, r0, r8
 8000ffa:	eb64 040e 	sbc.w	r4, r4, lr
 8000ffe:	fa04 f707 	lsl.w	r7, r4, r7
 8001002:	40ca      	lsrs	r2, r1
 8001004:	40cc      	lsrs	r4, r1
 8001006:	4317      	orrs	r7, r2
 8001008:	e9c6 7400 	strd	r7, r4, [r6]
 800100c:	4618      	mov	r0, r3
 800100e:	2100      	movs	r1, #0
 8001010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001014:	f1c3 0120 	rsb	r1, r3, #32
 8001018:	fa02 fc03 	lsl.w	ip, r2, r3
 800101c:	fa20 f201 	lsr.w	r2, r0, r1
 8001020:	fa25 f101 	lsr.w	r1, r5, r1
 8001024:	409d      	lsls	r5, r3
 8001026:	432a      	orrs	r2, r5
 8001028:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102c:	fa1f fe8c 	uxth.w	lr, ip
 8001030:	fbb1 f0f7 	udiv	r0, r1, r7
 8001034:	fb07 1510 	mls	r5, r7, r0, r1
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800103e:	fb00 f50e 	mul.w	r5, r0, lr
 8001042:	428d      	cmp	r5, r1
 8001044:	fa04 f403 	lsl.w	r4, r4, r3
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x258>
 800104a:	eb1c 0101 	adds.w	r1, ip, r1
 800104e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001052:	d22f      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001054:	428d      	cmp	r5, r1
 8001056:	d92d      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 8001058:	3802      	subs	r0, #2
 800105a:	4461      	add	r1, ip
 800105c:	1b49      	subs	r1, r1, r5
 800105e:	b292      	uxth	r2, r2
 8001060:	fbb1 f5f7 	udiv	r5, r1, r7
 8001064:	fb07 1115 	mls	r1, r7, r5, r1
 8001068:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800106c:	fb05 f10e 	mul.w	r1, r5, lr
 8001070:	4291      	cmp	r1, r2
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x282>
 8001074:	eb1c 0202 	adds.w	r2, ip, r2
 8001078:	f105 38ff 	add.w	r8, r5, #4294967295
 800107c:	d216      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800107e:	4291      	cmp	r1, r2
 8001080:	d914      	bls.n	80010ac <__udivmoddi4+0x2a8>
 8001082:	3d02      	subs	r5, #2
 8001084:	4462      	add	r2, ip
 8001086:	1a52      	subs	r2, r2, r1
 8001088:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800108c:	e738      	b.n	8000f00 <__udivmoddi4+0xfc>
 800108e:	4631      	mov	r1, r6
 8001090:	4630      	mov	r0, r6
 8001092:	e708      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8001094:	4639      	mov	r1, r7
 8001096:	e6e6      	b.n	8000e66 <__udivmoddi4+0x62>
 8001098:	4610      	mov	r0, r2
 800109a:	e6fb      	b.n	8000e94 <__udivmoddi4+0x90>
 800109c:	4548      	cmp	r0, r9
 800109e:	d2a9      	bcs.n	8000ff4 <__udivmoddi4+0x1f0>
 80010a0:	ebb9 0802 	subs.w	r8, r9, r2
 80010a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010a8:	3b01      	subs	r3, #1
 80010aa:	e7a3      	b.n	8000ff4 <__udivmoddi4+0x1f0>
 80010ac:	4645      	mov	r5, r8
 80010ae:	e7ea      	b.n	8001086 <__udivmoddi4+0x282>
 80010b0:	462b      	mov	r3, r5
 80010b2:	e794      	b.n	8000fde <__udivmoddi4+0x1da>
 80010b4:	4640      	mov	r0, r8
 80010b6:	e7d1      	b.n	800105c <__udivmoddi4+0x258>
 80010b8:	46d0      	mov	r8, sl
 80010ba:	e77b      	b.n	8000fb4 <__udivmoddi4+0x1b0>
 80010bc:	3d02      	subs	r5, #2
 80010be:	4462      	add	r2, ip
 80010c0:	e732      	b.n	8000f28 <__udivmoddi4+0x124>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e70a      	b.n	8000edc <__udivmoddi4+0xd8>
 80010c6:	4464      	add	r4, ip
 80010c8:	3802      	subs	r0, #2
 80010ca:	e742      	b.n	8000f52 <__udivmoddi4+0x14e>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	4798      	blx	r3
    }
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800117a:	2137      	movs	r1, #55	; 0x37
 800117c:	4817      	ldr	r0, [pc, #92]	; (80011dc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 800117e:	f00a fef5 	bl	800bf6c <__assert_func>

	if(align && size)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01f      	beq.n	80011c8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d01c      	beq.n	80011c8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4413      	add	r3, r2
 800119a:	2101      	movs	r1, #1
 800119c:	4618      	mov	r0, r3
 800119e:	f006 fd0f 	bl	8007bc0 <_Z9ei_callocjj>
 80011a2:	60f8      	str	r0, [r7, #12]

		if(p)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00e      	beq.n	80011c8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	425b      	negs	r3, r3
 80011b6:	4013      	ands	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad2      	subs	r2, r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3b02      	subs	r3, #2
 80011c4:	b292      	uxth	r2, r2
 80011c6:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 80011c8:	697b      	ldr	r3, [r7, #20]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	0800f020 	.word	0x0800f020
 80011d8:	0800f03c 	.word	0x0800f03c
 80011dc:	0800f074 	.word	0x0800f074

080011e0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	assert(ptr);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 80011f0:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 80011f2:	215a      	movs	r1, #90	; 0x5a
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 80011f6:	f00a feb9 	bl	800bf6c <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001200:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	425b      	negs	r3, r3
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 800120c:	68b8      	ldr	r0, [r7, #8]
 800120e:	f006 fce5 	bl	8007bdc <_Z7ei_freePv>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800f0f4 	.word	0x0800f0f4
 8001220:	0800f0f8 	.word	0x0800f0f8
 8001224:	0800f074 	.word	0x0800f074

08001228 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	731a      	strb	r2, [r3, #12]
 8001248:	e00e      	b.n	8001268 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	2101      	movs	r1, #1
 8001256:	4618      	mov	r0, r3
 8001258:	f006 fcb2 	bl	8007bc0 <_Z9ei_callocjj>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2201      	movs	r2, #1
 8001266:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d008      	beq.n	80012a0 <_ZN2ei9ei_matrixD1Ev+0x22>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7b1b      	ldrb	r3, [r3, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f006 fc9e 	bl	8007bdc <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	ed87 0a01 	vstr	s0, [r7, #4]
 80012b4:	ed97 0a01 	vldr	s0, [r7, #4]
 80012b8:	f009 fbe4 	bl	800aa84 <expf>
 80012bc:	eef0 7a40 	vmov.f32	s15, s0
 80012c0:	eeb0 0a67 	vmov.f32	s0, s15
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	ed87 0a01 	vstr	s0, [r7, #4]
 80012d4:	ed97 0a01 	vldr	s0, [r7, #4]
 80012d8:	f009 fc38 	bl	800ab4c <sqrtf>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	ed87 0a01 	vstr	s0, [r7, #4]
 80012f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f8:	fef8 7a67 	vrinta.f32	s15, s15
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001318:	edd7 7a00 	vldr	s15, [r7]
 800131c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001320:	eef4 7a47 	vcmp.f32	s15, s14
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	d101      	bne.n	800132e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 800132a:	2300      	movs	r3, #0
 800132c:	e033      	b.n	8001396 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001336:	d204      	bcs.n	8001342 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d301      	bcc.n	8001346 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001344:	e027      	b.n	8001396 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	b29b      	uxth	r3, r3
 800134c:	82bb      	strh	r3, [r7, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	b29b      	uxth	r3, r3
 8001354:	82fb      	strh	r3, [r7, #22]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	b29b      	uxth	r3, r3
 8001362:	81bb      	strh	r3, [r7, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	b29b      	uxth	r3, r3
 800136a:	81fb      	strh	r3, [r7, #14]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001372:	f107 020c 	add.w	r2, r7, #12
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4611      	mov	r1, r2
 800137c:	ed97 0a00 	vldr	s0, [r7]
 8001380:	4618      	mov	r0, r3
 8001382:	f006 fa70 	bl	8007866 <arm_mat_scale_f32>
 8001386:	4603      	mov	r3, r0
 8001388:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	e000      	b.n	8001396 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001394:	2300      	movs	r3, #0
    }
 8001396:	4618      	mov	r0, r3
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	fffffc0c 	.word	0xfffffc0c

080013a4 <_ZN18ei_impulse_state_tC1EPK10ei_impulse>:
typedef DspHandle* _dsp_handle_ptr_t;
public:
    const ei_impulse_t *impulse; // keep a pointer to the impulse
    _dsp_handle_ptr_t *dsp_handles;
    bool is_temp_handle = false; // to know if we're using the old (stateless) API
    ei_impulse_state_t(const ei_impulse_t *impulse)
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
        : impulse(impulse)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	721a      	strb	r2, [r3, #8]
    {
        const auto num_dsp_blocks = impulse->dsp_blocks_size;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	60bb      	str	r3, [r7, #8]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f006 fbef 	bl	8007ba8 <_Z9ei_mallocj>
 80013ca:	4602      	mov	r2, r0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	605a      	str	r2, [r3, #4]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e009      	b.n	80013ea <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x46>
            dsp_handles[ix] = nullptr;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d3f1      	bcc.n	80013d6 <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x32>
        }
    }
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_ZN18ei_impulse_state_t14get_dsp_handleEj>:

    DspHandle* get_dsp_handle(size_t ix) {
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
        if (dsp_handles[ix] == nullptr) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d115      	bne.n	8001442 <_ZN18ei_impulse_state_t14get_dsp_handleEj+0x46>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	015b      	lsls	r3, r3, #5
 8001420:	4413      	add	r3, r2
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	0152      	lsls	r2, r2, #5
 800142e:	440a      	add	r2, r1
 8001430:	68d0      	ldr	r0, [r2, #12]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6851      	ldr	r1, [r2, #4]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	188c      	adds	r4, r1, r2
 800143c:	4798      	blx	r3
 800143e:	4603      	mov	r3, r0
 8001440:	6023      	str	r3, [r4, #0]
        }
        return dsp_handles[ix];
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	681b      	ldr	r3, [r3, #0]
    }
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}

08001456 <_ZN18ei_impulse_state_t5resetEv>:

    void reset()
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
    {
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e01e      	b.n	80014a2 <_ZN18ei_impulse_state_t5resetEv+0x4c>
            if (dsp_handles[ix] != nullptr) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <_ZN18ei_impulse_state_t5resetEv+0x46>
                delete dsp_handles[ix];
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <_ZN18ei_impulse_state_t5resetEv+0x38>
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	320c      	adds	r2, #12
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	4790      	blx	r2
                dsp_handles[ix] = nullptr;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3301      	adds	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d3da      	bcc.n	8001464 <_ZN18ei_impulse_state_t5resetEv+0xe>
            }
        }
    }
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZN18ei_impulse_state_tD1Ev>:

    void operator delete[](void* ptr) {
        ei_free(ptr);
    }

    ~ei_impulse_state_t()
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    {
        reset();
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ffc8 	bl	8001456 <_ZN18ei_impulse_state_t5resetEv>
        ei_free(dsp_handles);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f006 fb86 	bl	8007bdc <_Z7ei_freePv>
    }
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>:
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
        : state(impulse), impulse(impulse) {};
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5b 	bl	80013a4 <_ZN18ei_impulse_state_tC1EPK10ei_impulse>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_ZNSt8functionIFijjPfEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fe03 	bl	8001114 <_ZNSt14_Function_baseD1Ev>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_ZN2ei11ei_signal_tC1Ev>:
} DCT_NORMALIZATION_MODE;

/**
 * Sensor signal structure
 */
typedef struct ei_signal_t {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fc0b 	bl	8003d3e <_ZNSt8functionIFijjPfEEC1Ev>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_ZN2ei11ei_signal_tD1Ev>:
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ffde 	bl	80014fe <_ZNSt8functionIFijjPfEED1Ev>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    }
#endif
    return EIDSP_NOT_SUPPORTED;
}

__attribute__((unused)) int extract_raw_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b08b      	sub	sp, #44	; 0x2c
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_raw_t config = *((ei_dsp_config_raw_t*)config_ptr);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f107 0410 	add.w	r4, r7, #16
 8001562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Because of rounding errors during re-sampling the output size of the block might be
    // smaller than the input of the block. Make sure we don't write outside of the bounds
    // of the array:
    // https://forum.edgeimpulse.com/t/using-custom-sensors-on-raspberry-pi-4/3506/7
    size_t els_to_copy = signal->total_length;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    if (els_to_copy > output_matrix->rows * output_matrix->cols) {
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	6892      	ldr	r2, [r2, #8]
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157c:	429a      	cmp	r2, r3
 800157e:	d906      	bls.n	800158e <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x42>
        els_to_copy = output_matrix->rows * output_matrix->cols;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	6892      	ldr	r2, [r2, #8]
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    signal->get_data(0, els_to_copy, output_matrix->buffer);
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001596:	2100      	movs	r1, #0
 8001598:	f002 fb90 	bl	8003cbc <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    int ret = numpy::scale(output_matrix, config.scale_axes);
 800159c:	edd7 7a07 	vldr	s15, [r7, #28]
 80015a0:	eeb0 0a67 	vmov.f32	s0, s15
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	f7ff feb1 	bl	800130c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80015aa:	6238      	str	r0, [r7, #32]
    if (ret != EIDSP_OK) {
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
        EIDSP_ERR(ret);
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	e000      	b.n	80015b8 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6c>
    }

    return EIDSP_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	372c      	adds	r7, #44	; 0x2c
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd90      	pop	{r4, r7, pc}

080015c0 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3310      	adds	r3, #16
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff94 	bl	8001518 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	f000 f832 	bl	800167a <_ZN14SignalWithAxes8get_dataEjjPf>
 8001616:	4603      	mov	r3, r0
        };
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	429a      	cmp	r2, r3
 8001634:	d102      	bne.n	800163c <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	e01a      	b.n	8001672 <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6892      	ldr	r2, [r2, #8]
 8001650:	fb03 f202 	mul.w	r2, r3, r2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	621a      	str	r2, [r3, #32]
        };
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f103 0210 	add.w	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f002 fb9d 	bl	8003da8 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>
#endif
        return &wrapped_signal;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3310      	adds	r3, #16
    }
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 800167a:	b580      	push	{r7, lr}
 800167c:	b08a      	sub	sp, #40	; 0x28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	68d2      	ldr	r2, [r2, #12]
 8001696:	6992      	ldr	r2, [r2, #24]
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	68d2      	ldr	r2, [r2, #12]
 80016ac:	6992      	ldr	r2, [r2, #24]
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	e02a      	b.n	8001714 <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e01c      	b.n	80016fe <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	18d1      	adds	r1, r2, r3
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	627a      	str	r2, [r7, #36]	; 0x24
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	2201      	movs	r2, #1
 80016e8:	f002 fae8 	bl	8003cbc <_ZNKSt8functionIFijjPfEEclEjjS0_>
 80016ec:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <_ZN14SignalWithAxes8get_dataEjjPf+0x7e>
                    return r;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	e014      	b.n	8001722 <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	3301      	adds	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	429a      	cmp	r2, r3
 8001706:	d3dd      	bcc.n	80016c4 <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	6a3a      	ldr	r2, [r7, #32]
 8001710:	4413      	add	r3, r2
 8001712:	623b      	str	r3, [r7, #32]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	4413      	add	r3, r2
 800171a:	6a3a      	ldr	r2, [r7, #32]
 800171c:	429a      	cmp	r2, r3
 800171e:	d3ce      	bcc.n	80016be <_ZN14SignalWithAxes8get_dataEjjPf+0x44>
                }
            }
        }

        return 0;
 8001720:	2300      	movs	r3, #0
    }
 8001722:	4618      	mov	r0, r3
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_ZN19ei_impulse_handle_tD1Ev>:
class ei_impulse_handle_t {
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff febf 	bl	80014b8 <_ZN18ei_impulse_state_tD1Ev>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001752:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8001762:	b480      	push	{r7}
 8001764:	b087      	sub	sp, #28
 8001766:	af00      	add	r7, sp, #0
 8001768:	6178      	str	r0, [r7, #20]
 800176a:	6139      	str	r1, [r7, #16]
 800176c:	60fa      	str	r2, [r7, #12]
 800176e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001772:	edc7 0a01 	vstr	s1, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001778:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800177c:	4618      	mov	r0, r3
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6178      	str	r0, [r7, #20]
 8001790:	6139      	str	r1, [r7, #16]
 8001792:	60fa      	str	r2, [r7, #12]
 8001794:	ed87 0a02 	vstr	s0, [r7, #8]
 8001798:	edc7 0a01 	vstr	s1, [r7, #4]
 800179c:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e03e      	b.n	8001822 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x9a>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f993 3000 	ldrsb.w	r3, [r3]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017be:	ed97 7a01 	vldr	s14, [r7, #4]
 80017c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c6:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d011      	beq.n	80017f4 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x6c>
            ei_printf("%s:\t", impulse->categories[ix]);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	4816      	ldr	r0, [pc, #88]	; (800183c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 80017e2:	f001 fbe7 	bl	8002fb4 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80017e6:	ed97 0a06 	vldr	s0, [r7, #24]
 80017ea:	f006 f8d9 	bl	80079a0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80017ee:	4814      	ldr	r0, [pc, #80]	; (8001840 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb8>)
 80017f0:	f001 fbe0 	bl	8002fb4 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	6819      	ldr	r1, [r3, #0]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	3201      	adds	r2, #1
 8001808:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	3304      	adds	r3, #4
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	3301      	adds	r3, #1
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001828:	461a      	mov	r2, r3
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4293      	cmp	r3, r2
 800182e:	d3b9      	bcc.n	80017a4 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1c>
    }

    return EI_IMPULSE_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	0800f5cc 	.word	0x0800f5cc
 8001840:	0800f318 	.word	0x0800f318

08001844 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e031      	b.n	80018bc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x78>
        float value = data[ix];
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]

        if (debug) {
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d011      	beq.n	800188e <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x4a>
            ei_printf("%s:\t", impulse->categories[ix]);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4816      	ldr	r0, [pc, #88]	; (80018d4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 800187c:	f001 fb9a 	bl	8002fb4 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8001880:	ed97 0a04 	vldr	s0, [r7, #16]
 8001884:	f006 f88c 	bl	80079a0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8001888:	4813      	ldr	r0, [pc, #76]	; (80018d8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 800188a:	f001 fb93 	bl	8002fb4 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	3201      	adds	r2, #1
 80018a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	3304      	adds	r3, #4
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80018c2:	461a      	mov	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d3c6      	bcc.n	8001858 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x14>
    }

    return EI_IMPULSE_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	0800f5cc 	.word	0x0800f5cc
 80018d8:	0800f318 	.word	0x0800f318

080018dc <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the visual anomaly result structures from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_visual_ad_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	70fb      	strb	r3, [r7, #3]
    }

    result->visual_ad_grid_cells = results.data();
    result->visual_ad_count = results.size();
#endif // EI_CLASSIFIER_HAS_VISUAL_ANOMALY
    return EI_IMPULSE_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov5(const ei_impulse_t *impulse,
                                                                              ei_impulse_result_t *result,
                                                                              int version,
                                                                              float *data,
                                                                              size_t output_features_count,
                                                                              bool debug = false) {
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001906:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>:
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolox(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                             float *data,
                                                                             size_t output_features_count,
                                                                             bool debug = false) {
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001924:	f06f 0314 	mvn.w	r3, #20
#endif // EI_HAS_YOLOX
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov7(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                              float *data,
                                                                              size_t output_features_count) {
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001942:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_YOLOV7
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_decode_detections(const ei_impulse_t *impulse,
                                                                                     ei_impulse_result_t *result,
                                                                                     float *data,
                                                                                     size_t output_features_count,
                                                                                     bool debug = false) {
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_DECODE_DETECTIONS
    return fill_result_struct_tao_decode_detections_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001960:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_DETECT_DETECTIONS
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov3(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV3
    return fill_result_struct_tao_yolov3_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800197e:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV3
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov4(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800199c:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e01e      	b.n	80019fe <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x52>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	ed93 7a00 	vldr	s14, [r3]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	4413      	add	r3, r2
 80019e4:	ed93 7a00 	vldr	s14, [r3]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d3dc      	bcc.n	80019c0 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x14>
    }
}
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 8001a14:	b5b0      	push	{r4, r5, r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	e029      	b.n	8001a80 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x6c>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	ed93 7a00 	vldr	s14, [r3]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a50:	f002 f8b3 	bl	8003bba <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a54:	ec55 4b10 	vmov	r4, r5, d0
 8001a58:	6978      	ldr	r0, [r7, #20]
 8001a5a:	f7fe fd95 	bl	8000588 <__aeabi_f2d>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4620      	mov	r0, r4
 8001a64:	4629      	mov	r1, r5
 8001a66:	f7fe fc31 	bl	80002cc <__adddf3>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f8d9 	bl	8000c28 <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3d1      	bcc.n	8001a2c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x18>
    }
    return sqrt(dist) - cluster->max_error;
 8001a88:	ed97 0a05 	vldr	s0, [r7, #20]
 8001a8c:	f7ff fc1d 	bl	80012ca <_ZSt4sqrtf>
 8001a90:	eeb0 7a40 	vmov.f32	s14, s0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bdb0      	pop	{r4, r5, r7, pc}

08001aa8 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x64>)
 8001ab8:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	e018      	b.n	8001af2 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4a>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7ff ffa1 	bl	8001a14 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 8001ad2:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 8001ad6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ada:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	d501      	bpl.n	8001aec <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x44>
            min = dist;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	3301      	adds	r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d3e2      	bcc.n	8001ac0 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x18>
        }
    }
    return min;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	ee07 3a90 	vmov	s15, r3
}
 8001b00:	eeb0 0a67 	vmov.f32	s0, s15
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	447a0000 	.word	0x447a0000

08001b10 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    uint32_t anom_axes_size,
    const uint16_t *anom_axis,
    float *input)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b08d      	sub	sp, #52	; 0x34
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
    if (input_block_ids_size == 1) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d11a      	bne.n	8001b5a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x4a>
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b28:	e012      	b.n	8001b50 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x40>
            input[ix] = fmatrix[0].matrix->buffer[anom_axis[ix]];
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b36:	440b      	add	r3, r1
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	441a      	add	r2, r3
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001b44:	440b      	add	r3, r1
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3e8      	bcc.n	8001b2a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x1a>
 8001b58:	e053      	b.n	8001c02 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
    else {
#if EI_CLASSIFIER_SINGLE_FEATURE_INPUT == 0
        ei::matrix_t* matrix = NULL;
#endif
        // tracks where we are now in the combined feature matrix
        uint32_t global_buf_pos = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
        // we add the size of passed matrix to it
        uint32_t buf_offset = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
        // current index of input feature
        uint32_t input_pos = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t i = 0; i < input_block_ids_size; i++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	e044      	b.n	8001bf6 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xe6>
            if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, anom_axes_size)) {
                ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
                return EI_IMPULSE_INVALID_SIZE;
            }
#else
            ei::matrix_t* matrix = fmatrix[0].matrix;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	617b      	str	r3, [r7, #20]
#endif
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e02c      	b.n	8001bd2 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xc2>
                global_buf_pos = anom_axis[input_pos];
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b7e:	4413      	add	r3, r2
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	61bb      	str	r3, [r7, #24]
                if (global_buf_pos <= buf_offset + (matrix->rows * matrix->cols)) {
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	6892      	ldr	r2, [r2, #8]
 8001b8c:	fb03 f202 	mul.w	r2, r3, r2
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	4413      	add	r3, r2
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d820      	bhi.n	8001bdc <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xcc>
                    input[input_pos] = matrix->buffer[anom_axis[input_pos] - buf_offset];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ba4:	440b      	add	r3, r1
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bac:	1acb      	subs	r3, r1, r3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	441a      	add	r2, r3
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bb8:	440b      	add	r3, r1
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
                    input_pos++;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
                if (input_pos >= anom_axes_size) { goto end; }
 8001bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d219      	bcs.n	8001c00 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf0>
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d3ce      	bcc.n	8001b78 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x68>
 8001bda:	e000      	b.n	8001bde <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xce>
                }
                else {
                    break;
 8001bdc:	bf00      	nop
                }
            }
            buf_offset += matrix->rows * matrix->cols;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	6892      	ldr	r2, [r2, #8]
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bec:	4413      	add	r3, r2
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < input_block_ids_size; i++) {
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	6a3a      	ldr	r2, [r7, #32]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d3b6      	bcc.n	8001b6c <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x5c>
        }
        end:;
 8001bfe:	e000      	b.n	8001c02 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
                if (input_pos >= anom_axes_size) { goto end; }
 8001c00:	bf00      	nop
    }
    return EI_IMPULSE_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3734      	adds	r7, #52	; 0x34
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08e      	sub	sp, #56	; 0x38
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
    ei_learning_block_config_anomaly_kmeans_t *block_config = (ei_learning_block_config_anomaly_kmeans_t*)config_ptr;
 8001c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint64_t anomaly_start_ms = ei_read_timer_ms();
 8001c22:	f005 fe9f 	bl	8007964 <_Z16ei_read_timer_msv>
 8001c26:	e9c7 0108 	strd	r0, r1, [r7, #32]

    float *input = (float*)ei_malloc(block_config->anom_axes_size * sizeof(float));
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	891b      	ldrh	r3, [r3, #8]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 ffb9 	bl	8007ba8 <_Z9ei_mallocj>
 8001c36:	61f8      	str	r0, [r7, #28]
    if (!input) {
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x3a>
        ei_printf("Failed to allocate memory for anomaly input buffer");
 8001c3e:	4829      	ldr	r0, [pc, #164]	; (8001ce4 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd4>)
 8001c40:	f001 f9b8 	bl	8002fb4 <_Z9ei_printfPKcz>
        return EI_IMPULSE_OUT_OF_MEMORY;
 8001c44:	f06f 030a 	mvn.w	r3, #10
 8001c48:	e047      	b.n	8001cda <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xca>
    }

    extract_anomaly_input_values(fmatrix, input_block_ids, input_block_ids_size, block_config->anom_axes_size, block_config->anom_axis, input);
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4c:	891b      	ldrh	r3, [r3, #8]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	9201      	str	r2, [sp, #4]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	68b8      	ldr	r0, [r7, #8]
 8001c62:	f7ff ff55 	bl	8001b10 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>

    standard_scaler(input, block_config->anom_scale, block_config->anom_mean, block_config->anom_axes_size);
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	6959      	ldr	r1, [r3, #20]
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	891b      	ldrh	r3, [r3, #8]
 8001c72:	69f8      	ldr	r0, [r7, #28]
 8001c74:	f7ff fe9a 	bl	80019ac <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
    float anomaly = get_min_distance_to_cluster(
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	891b      	ldrh	r3, [r3, #8]
    float anomaly = get_min_distance_to_cluster(
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	68da      	ldr	r2, [r3, #12]
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	8a1b      	ldrh	r3, [r3, #16]
    float anomaly = get_min_distance_to_cluster(
 8001c86:	69f8      	ldr	r0, [r7, #28]
 8001c88:	f7ff ff0e 	bl	8001aa8 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 8001c8c:	ed87 0a06 	vstr	s0, [r7, #24]

    uint64_t anomaly_end_ms = ei_read_timer_ms();
 8001c90:	f005 fe68 	bl	8007964 <_Z16ei_read_timer_msv>
 8001c94:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (debug) {
 8001c98:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00d      	beq.n	8001cbc <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xac>
        ei_printf("Anomaly score (time: %d ms.): ", static_cast<int>(anomaly_end_ms - anomaly_start_ms));
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd8>)
 8001caa:	f001 f983 	bl	8002fb4 <_Z9ei_printfPKcz>
        ei_printf_float(anomaly);
 8001cae:	ed97 0a06 	vldr	s0, [r7, #24]
 8001cb2:	f005 fe75 	bl	80079a0 <_Z15ei_printf_floatf>
        ei_printf("\n");
 8001cb6:	480d      	ldr	r0, [pc, #52]	; (8001cec <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xdc>)
 8001cb8:	f001 f97c 	bl	8002fb4 <_Z9ei_printfPKcz>
    }

    result->timing.anomaly = anomaly_end_ms - anomaly_start_ms;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    result->anomaly = anomaly;
 8001cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ei_free(input);
 8001cd2:	69f8      	ldr	r0, [r7, #28]
 8001cd4:	f005 ff82 	bl	8007bdc <_Z7ei_freePv>

    return EI_IMPULSE_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3730      	adds	r7, #48	; 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	0800f5d4 	.word	0x0800f5d4
 8001ce8:	0800f608 	.word	0x0800f608
 8001cec:	0800f318 	.word	0x0800f318

08001cf0 <_ZL17pre_cast_quantizefflb>:
#define __EI_QUANTIZE__H__

#include <algorithm>
#include <cmath>

static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]

    int32_t max_value = is_signed ? 127 : 255;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <_ZL17pre_cast_quantizefflb+0x1e>
 8001d0a:	237f      	movs	r3, #127	; 0x7f
 8001d0c:	e000      	b.n	8001d10 <_ZL17pre_cast_quantizefflb+0x20>
 8001d0e:	23ff      	movs	r3, #255	; 0xff
 8001d10:	61bb      	str	r3, [r7, #24]
    int32_t min_value = is_signed ? -128 : 0;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <_ZL17pre_cast_quantizefflb+0x2e>
 8001d18:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001d1c:	e000      	b.n	8001d20 <_ZL17pre_cast_quantizefflb+0x30>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 8001d22:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d2e:	eeb0 0a66 	vmov.f32	s0, s13
 8001d32:	f7ff fada 	bl	80012ea <_ZSt5roundf>
 8001d36:	eef0 7a40 	vmov.f32	s15, s0
 8001d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3e:	ee17 2a90 	vmov	r2, s15
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	f107 0214 	add.w	r2, r7, #20
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 f8f4 	bl	8003f40 <_ZSt3maxIlERKT_S2_S2_>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f107 0318 	add.w	r3, r7, #24
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4610      	mov	r0, r2
 8001d62:	f002 f8d9 	bl	8003f18 <_ZSt3minIlERKT_S2_S2_>
 8001d66:	4603      	mov	r3, r0
 8001d68:	681b      	ldr	r3, [r3, #0]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08e      	sub	sp, #56	; 0x38
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
    size_t matrix_els = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t input_idx = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30

    for (size_t i = 0; i < input_block_ids_size; i++) {
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8e:	e098      	b.n	8001ec2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14e>
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61fb      	str	r3, [r7, #28]
#endif

        matrix_els += matrix->rows * matrix->cols;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	6892      	ldr	r2, [r2, #8]
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001da4:	4413      	add	r3, r2
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34

        switch (input->type) {
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d024      	beq.n	8001dfa <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x86>
 8001db0:	2b09      	cmp	r3, #9
 8001db2:	dc7a      	bgt.n	8001eaa <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d002      	beq.n	8001dbe <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d04a      	beq.n	8001e52 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xde>
 8001dbc:	e075      	b.n	8001eaa <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
            case kTfLiteFloat32: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc2:	e010      	b.n	8001de6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x72>
                    input->data.f[input_idx++] = matrix->buffer[ix];
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	441a      	add	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd4:	1c58      	adds	r0, r3, #1
 8001dd6:	6338      	str	r0, [r7, #48]	; 0x30
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	601a      	str	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de2:	3301      	adds	r3, #1
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	6892      	ldr	r2, [r2, #8]
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d3e5      	bcc.n	8001dc4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x50>
                }
                break;
 8001df8:	e060      	b.n	8001ebc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	e01e      	b.n	8001e3e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xca>
                    float val = (float)matrix->buffer[ix];
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	eef0 0a67 	vmov.f32	s1, s15
 8001e20:	ed97 0a06 	vldr	s0, [r7, #24]
 8001e24:	f7ff ff64 	bl	8001cf0 <_ZL17pre_cast_quantizefflb>
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	1c59      	adds	r1, r3, #1
 8001e30:	6339      	str	r1, [r7, #48]	; 0x30
 8001e32:	4413      	add	r3, r2
 8001e34:	b242      	sxtb	r2, r0
 8001e36:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	6892      	ldr	r2, [r2, #8]
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d3d7      	bcc.n	8001e00 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8c>
                }
                break;
 8001e50:	e034      	b.n	8001ebc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
 8001e56:	e01e      	b.n	8001e96 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x122>
                    float val = (float)matrix->buffer[ix];
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	617b      	str	r3, [r7, #20]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	eef0 0a67 	vmov.f32	s1, s15
 8001e78:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e7c:	f7ff ff38 	bl	8001cf0 <_ZL17pre_cast_quantizefflb>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	1c59      	adds	r1, r3, #1
 8001e88:	6339      	str	r1, [r7, #48]	; 0x30
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b2c2      	uxtb	r2, r0
 8001e8e:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	3301      	adds	r3, #1
 8001e94:	623b      	str	r3, [r7, #32]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	6892      	ldr	r2, [r2, #8]
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	6a3a      	ldr	r2, [r7, #32]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3d7      	bcc.n	8001e58 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe4>
                break;
 8001ea8:	e008      	b.n	8001ebc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4814      	ldr	r0, [pc, #80]	; (8001f04 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x190>)
 8001eb2:	f001 f87f 	bl	8002fb4 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8001eb6:	f06f 030c 	mvn.w	r3, #12
 8001eba:	e01e      	b.n	8001efa <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    for (size_t i = 0; i < input_block_ids_size; i++) {
 8001ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	f4ff af62 	bcc.w	8001d90 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1c>
            }
        }
    }

    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d00f      	beq.n	8001ef8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d00a      	beq.n	8001ef8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
            (int)input->bytes, (int)matrix_els);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	699b      	ldr	r3, [r3, #24]
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	461a      	mov	r2, r3
 8001eec:	4806      	ldr	r0, [pc, #24]	; (8001f08 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x194>)
 8001eee:	f001 f861 	bl	8002fb4 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
 8001ef2:	f06f 0317 	mvn.w	r3, #23
 8001ef6:	e000      	b.n	8001efa <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    }

    return EI_IMPULSE_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3738      	adds	r7, #56	; 0x38
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	0800f628 	.word	0x0800f628
 8001f08:	0800f64c 	.word	0x0800f64c

08001f0c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6892      	ldr	r2, [r2, #8]
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]

    switch (output->type) {
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d026      	beq.n	8001f7a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x6e>
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	f300 8093 	bgt.w	8002058 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d002      	beq.n	8001f3c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x30>
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d057      	beq.n	8001fea <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xde>
 8001f3a:	e08d      	b.n	8002058 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d00e      	beq.n	8001f66 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x5a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da00      	bge.n	8001f52 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
 8001f50:	3303      	adds	r3, #3
 8001f52:	109b      	asrs	r3, r3, #2
 8001f54:	4619      	mov	r1, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4846      	ldr	r0, [pc, #280]	; (8002074 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8001f5c:	f001 f82a 	bl	8002fb4 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8001f60:	f06f 0317 	mvn.w	r3, #23
 8001f64:	e082      	b.n	800206c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6859      	ldr	r1, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f00b f9cb 	bl	800d30e <memcpy>
            break;
 8001f78:	e077      	b.n	800206a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteInt8: {
            if (output->bytes != matrix_els) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d00a      	beq.n	8001f9a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8e>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8001f88:	4619      	mov	r1, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4839      	ldr	r0, [pc, #228]	; (8002074 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8001f90:	f001 f810 	bl	8002fb4 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8001f94:	f06f 0317 	mvn.w	r3, #23
 8001f98:	e068      	b.n	800206c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e01e      	b.n	8001fde <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd2>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	ee07 3a90 	vmov	s15, r3
 8001fb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc6:	edc7 7a04 	vstr	s15, [r7, #16]
                output_matrix->buffer[ix] = value;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3db      	bcc.n	8001fa0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x94>
            }
            break;
 8001fe8:	e03f      	b.n	800206a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d00a      	beq.n	800200a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xfe>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	481d      	ldr	r0, [pc, #116]	; (8002074 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8002000:	f000 ffd8 	bl	8002fb4 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8002004:	f06f 0317 	mvn.w	r3, #23
 8002008:	e030      	b.n	800206c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	e01d      	b.n	800204c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x140>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	4413      	add	r3, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002034:	edc7 7a03 	vstr	s15, [r7, #12]
                output_matrix->buffer[ix] = value;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	3301      	adds	r3, #1
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	429a      	cmp	r2, r3
 8002054:	d3dc      	bcc.n	8002010 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x104>
            }
            break;
 8002056:	e008      	b.n	800206a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        default: {
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	4806      	ldr	r0, [pc, #24]	; (8002078 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x16c>)
 8002060:	f000 ffa8 	bl	8002fb4 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
 8002064:	f06f 030d 	mvn.w	r3, #13
 8002068:	e000      	b.n	800206c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
        }
    }

    return EI_IMPULSE_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	0800f6d4 	.word	0x0800f6d4
 8002078:	0800f718 	.word	0x0800f718

0800207c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	789b      	ldrb	r3, [r3, #2]
 8002094:	2b03      	cmp	r3, #3
 8002096:	f040 822d 	bne.w	80024f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x478>
        switch (block_config->object_detection_last_layer) {
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	f200 821c 	bhi.w	80024e0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x464>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	0800214b 	.word	0x0800214b
 80020b4:	080020d9 	.word	0x080020d9
 80020b8:	08002157 	.word	0x08002157
 80020bc:	08002233 	.word	0x08002233
 80020c0:	08002157 	.word	0x08002157
 80020c4:	08002253 	.word	0x08002253
 80020c8:	0800229b 	.word	0x0800229b
 80020cc:	0800229b 	.word	0x0800229b
 80020d0:	08002359 	.word	0x08002359
 80020d4:	08002423 	.word	0x08002423
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b09      	cmp	r3, #9
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	74fb      	strb	r3, [r7, #19]
                if (int8_output) {
 80020e6:	7cfb      	ldrb	r3, [r7, #19]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01d      	beq.n	8002128 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xac>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8002106:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	460b      	mov	r3, r1
 8002110:	eef0 0a47 	vmov.f32	s1, s14
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fb21 	bl	8001762 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8002120:	4603      	mov	r3, r0
 8002122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
                        impulse->fomo_output_size, impulse->fomo_output_size);
                }
                break;
 8002126:	e233      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8002130:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	460b      	mov	r3, r1
 800213a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff fb01 	bl	8001744 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 8002142:	4603      	mov	r3, r0
 8002144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8002148:	e222      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 800214a:	48a4      	ldr	r0, [pc, #656]	; (80023dc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x360>)
 800214c:	f000 ff32 	bl	8002fb4 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8002150:	f06f 0309 	mvn.w	r3, #9
 8002154:	e21e      	b.n	8002594 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                int version = impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI ?
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 800215c:	2b05      	cmp	r3, #5
 800215e:	d101      	bne.n	8002164 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xe8>
 8002160:	2305      	movs	r3, #5
 8002162:	e000      	b.n	8002166 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xea>
 8002164:	2306      	movs	r3, #6
 8002166:	617b      	str	r3, [r7, #20]
                    5 : 6;

                if (output->type == kTfLiteInt8) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b09      	cmp	r3, #9
 800216e:	d11e      	bne.n	80021ae <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x132>
                    fill_res = fill_result_struct_quantized_yolov5(
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        result,
                        version,
                        output->data.int8,
                        output->params.zero_point,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 8002178:	ee07 3a90 	vmov	s15, r3
 800217c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 800218a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800218e:	9201      	str	r2, [sp, #4]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	eef0 0a47 	vmov.f32	s1, s14
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	460b      	mov	r3, r1
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f001 feec 	bl	8003f7e <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80021ac:	e1f0      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d11e      	bne.n	80021f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x178>
                    fill_res = fill_result_struct_quantized_yolov5(
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6859      	ldr	r1, [r3, #4]
                        output->params.zero_point,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 80021d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80021d4:	9201      	str	r2, [sp, #4]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	eef0 0a47 	vmov.f32	s1, s14
 80021dc:	eeb0 0a67 	vmov.f32	s0, s15
 80021e0:	460b      	mov	r3, r1
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f001 fedc 	bl	8003fa4 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80021f2:	e1cd      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d111      	bne.n	8002220 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1a4>
                    fill_res = fill_result_struct_f32_yolov5(
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6859      	ldr	r1, [r3, #4]
                        impulse->tflite_output_features_count,
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolov5(
 8002204:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	460b      	mov	r3, r1
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff fb70 	bl	80018f8 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>
 8002218:	4603      	mov	r3, r0
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800221e:	e1b7      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	486e      	ldr	r0, [pc, #440]	; (80023e0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
 8002228:	f000 fec4 	bl	8002fb4 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800222c:	f06f 0309 	mvn.w	r3, #9
 8002230:	e1b0      	b.n	8002594 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    fill_res = fill_result_struct_f32_yolox(
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.f,
                        impulse->tflite_output_features_count,
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolox(
 800223a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	460b      	mov	r3, r1
 8002242:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff fb66 	bl	8001916 <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>
 800224a:	4603      	mov	r3, r0
 800224c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        debug);
                #endif
                break;
 8002250:	e19e      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            case EI_CLASSIFIER_LAST_LAYER_YOLOV7: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    size_t output_feature_count = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e00d      	b.n	8002278 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1fc>
                        output_feature_count *= output->dims->data[ix];
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	461a      	mov	r2, r3
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	429a      	cmp	r2, r3
 8002282:	dbeb      	blt.n	800225c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1e0>
                    }
                    fill_res = fill_result_struct_f32_yolov7(
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff fb51 	bl	8001934 <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>
 8002292:	4603      	mov	r3, r0
 8002294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        impulse,
                        result,
                        output->data.f,
                        output_feature_count);
                #endif
                break;
 8002298:	e17a      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_SSD:
            case EI_CLASSIFIER_LAST_LAYER_TAO_RETINANET: {

                if (output->type == kTfLiteInt8) {
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b09      	cmp	r3, #9
 80022a0:	d11c      	bne.n	80022dc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x260>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	460b      	mov	r3, r1
 80022c4:	eef0 0a47 	vmov.f32	s1, s14
 80022c8:	eeb0 0a67 	vmov.f32	s0, s15
 80022cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f001 fe7b 	bl	8003fca <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80022da:	e159      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d11c      	bne.n	800231e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2a2>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	460b      	mov	r3, r1
 8002306:	eef0 0a47 	vmov.f32	s1, s14
 800230a:	eeb0 0a67 	vmov.f32	s0, s15
 800230e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f001 fe6d 	bl	8003ff0 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800231c:	e138      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10f      	bne.n	8002346 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2ca>
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 800232e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	460b      	mov	r3, r1
 8002336:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff fb0a 	bl	8001952 <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8002344:	e124      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	4619      	mov	r1, r3
 800234c:	4825      	ldr	r0, [pc, #148]	; (80023e4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
 800234e:	f000 fe31 	bl	8002fb4 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8002352:	f06f 0309 	mvn.w	r3, #9
 8002356:	e11d      	b.n	8002594 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV3: {

                if (output->type == kTfLiteInt8) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b09      	cmp	r3, #9
 800235e:	d11c      	bne.n	800239a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x31e>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800237a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	460b      	mov	r3, r1
 8002382:	eef0 0a47 	vmov.f32	s1, s14
 8002386:	eeb0 0a67 	vmov.f32	s0, s15
 800238a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f001 fe42 	bl	8004016 <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8002392:	4603      	mov	r3, r0
 8002394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8002398:	e0fa      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d122      	bne.n	80023e8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80023bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	460b      	mov	r3, r1
 80023c4:	eef0 0a47 	vmov.f32	s1, s14
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f001 fe34 	bl	800403c <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80023da:	e0d9      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
 80023dc:	0800f740 	.word	0x0800f740
 80023e0:	0800f788 	.word	0x0800f788
 80023e4:	0800f7c0 	.word	0x0800f7c0
                else if (output->type == kTfLiteFloat32) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d10f      	bne.n	8002410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x394>
                    fill_res = fill_result_struct_f32_tao_yolov3(
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov3(
 80023f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	460b      	mov	r3, r1
 8002400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f7ff fab4 	bl	8001970 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>
 8002408:	4603      	mov	r3, r0
 800240a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800240e:	e0bf      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	4861      	ldr	r0, [pc, #388]	; (800259c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x520>)
 8002418:	f000 fdcc 	bl	8002fb4 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800241c:	f06f 0309 	mvn.w	r3, #9
 8002420:	e0b8      	b.n	8002594 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV4: {

                if (output->type == kTfLiteInt8) {
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b09      	cmp	r3, #9
 8002428:	d11c      	bne.n	8002464 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3e8>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8002444:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	460b      	mov	r3, r1
 800244c:	eef0 0a47 	vmov.f32	s1, s14
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f001 fe03 	bl	8004062 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8002462:	e095      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d11c      	bne.n	80024a6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x42a>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8002486:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	460b      	mov	r3, r1
 800248e:	eef0 0a47 	vmov.f32	s1, s14
 8002492:	eeb0 0a67 	vmov.f32	s0, s15
 8002496:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f001 fdf5 	bl	8004088 <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 800249e:	4603      	mov	r3, r0
 80024a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80024a4:	e074      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10f      	bne.n	80024ce <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x452>
                    fill_res = fill_result_struct_f32_tao_yolov4(
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov4(
 80024b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	460b      	mov	r3, r1
 80024be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff fa64 	bl	800198e <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80024cc:	e060      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4619      	mov	r1, r3
 80024d4:	4832      	ldr	r0, [pc, #200]	; (80025a0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x524>)
 80024d6:	f000 fd6d 	bl	8002fb4 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80024da:	f06f 0309 	mvn.w	r3, #9
 80024de:	e059      	b.n	8002594 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 80024e6:	4619      	mov	r1, r3
 80024e8:	482e      	ldr	r0, [pc, #184]	; (80025a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x528>)
 80024ea:	f000 fd63 	bl	8002fb4 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80024ee:	f06f 0309 	mvn.w	r3, #9
 80024f2:	e04f      	b.n	8002594 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	789b      	ldrb	r3, [r3, #2]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d113      	bne.n	8002524 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4a8>
    {
        if (!result->copy_output) {
 80024fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fe:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d041      	beq.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            fill_res = fill_result_visual_ad_struct_f32(impulse, result, output->data.f, debug);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002514:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff f9e0 	bl	80018dc <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800251c:	4603      	mov	r3, r0
 800251e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002522:	e035      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
 8002524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002526:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800252a:	f083 0301 	eor.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d02d      	beq.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b09      	cmp	r3, #9
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	76fb      	strb	r3, [r7, #27]
            if (int8_output) {
 8002542:	7efb      	ldrb	r3, [r7, #27]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d018      	beq.n	800257a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4fe>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	ed93 7a03 	vldr	s14, [r3, #12]
 800255e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002562:	eef0 0a47 	vmov.f32	s1, s14
 8002566:	eeb0 0a67 	vmov.f32	s0, s15
 800256a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff f90b 	bl	8001788 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8002572:	4603      	mov	r3, r0
 8002574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002578:	e00a      	b.n	8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            else {
                fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff f95d 	bl	8001844 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800258a:	4603      	mov	r3, r0
 800258c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    return fill_res;
 8002590:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002594:	4618      	mov	r0, r3
 8002596:	3728      	adds	r7, #40	; 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	0800f7f4 	.word	0x0800f7f4
 80025a0:	0800f828 	.word	0x0800f828
 80025a4:	0800f85c 	.word	0x0800f85c

080025a8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>:
    uint64_t *ctx_start_us,
    TfLiteTensor* input,
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	617b      	str	r3, [r7, #20]

    *ctx_start_us = ei_read_timer_us();
 80025bc:	f005 f9df 	bl	800797e <_Z16ei_read_timer_usv>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4829      	ldr	r0, [pc, #164]	; (8002674 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xcc>)
 80025d0:	4798      	blx	r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	74fb      	strb	r3, [r7, #19]
    if (init_status != kTfLiteOk) {
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x44>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	4619      	mov	r1, r3
 80025e0:	4825      	ldr	r0, [pc, #148]	; (8002678 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xd0>)
 80025e2:	f000 fce7 	bl	8002fb4 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80025e6:	f06f 0305 	mvn.w	r3, #5
 80025ea:	e03f      	b.n	800266c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	2000      	movs	r0, #0
 80025f4:	4798      	blx	r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 80025fa:	7cbb      	ldrb	r3, [r7, #18]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x5e>
        return EI_IMPULSE_TFLITE_ERROR;
 8002600:	f06f 0302 	mvn.w	r3, #2
 8002604:	e032      	b.n	800266c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	7a92      	ldrb	r2, [r2, #10]
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	4610      	mov	r0, r2
 8002612:	4798      	blx	r3
 8002614:	4603      	mov	r3, r0
 8002616:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 8002618:	7cbb      	ldrb	r3, [r7, #18]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x7c>
        return EI_IMPULSE_TFLITE_ERROR;
 800261e:	f06f 0302 	mvn.w	r3, #2
 8002622:	e023      	b.n	800266c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d11d      	bne.n	800266a <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	7b12      	ldrb	r2, [r2, #12]
 8002636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002638:	4610      	mov	r0, r2
 800263a:	4798      	blx	r3
 800263c:	4603      	mov	r3, r0
 800263e:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 8002640:	7cbb      	ldrb	r3, [r7, #18]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xa4>
            return EI_IMPULSE_TFLITE_ERROR;
 8002646:	f06f 0302 	mvn.w	r3, #2
 800264a:	e00f      	b.n	800266c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	7ad2      	ldrb	r2, [r2, #11]
 8002654:	6a39      	ldr	r1, [r7, #32]
 8002656:	4610      	mov	r0, r2
 8002658:	4798      	blx	r3
 800265a:	4603      	mov	r3, r0
 800265c:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 800265e:	7cbb      	ldrb	r3, [r7, #18]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
            return EI_IMPULSE_TFLITE_ERROR;
 8002664:	f06f 0302 	mvn.w	r3, #2
 8002668:	e000      	b.n	800266c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
    }

    return EI_IMPULSE_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	0800115d 	.word	0x0800115d
 8002678:	0800f890 	.word	0x0800f890

0800267c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	b08e      	sub	sp, #56	; 0x38
 8002680:	af04      	add	r7, sp, #16
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	e9c7 2300 	strd	r2, r3, [r7]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	627b      	str	r3, [r7, #36]	; 0x24

    if (graph_config->model_invoke() != kTfLiteOk) {
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4798      	blx	r3
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x30>
        return EI_IMPULSE_TFLITE_ERROR;
 80026a6:	f06f 0302 	mvn.w	r3, #2
 80026aa:	e04d      	b.n	8002748 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80026ac:	f005 f967 	bl	800797e <_Z16ei_read_timer_usv>
 80026b0:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80026b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026bc:	1a84      	subs	r4, r0, r2
 80026be:	eb61 0503 	sbc.w	r5, r1, r3
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80026c8:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 80026cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ce:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80026d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	f7fe faf5 	bl	8000cc8 <__aeabi_ldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 80026e8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x82>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 80026f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4815      	ldr	r0, [pc, #84]	; (8002750 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xd4>)
 80026fa:	f000 fc5b 	bl	8002fb4 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 80026fe:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002702:	9302      	str	r3, [sp, #8]
 8002704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff fcb2 	bl	800207c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
 8002718:	4603      	mov	r3, r0
 800271a:	75fb      	strb	r3, [r7, #23]
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
 800271c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xae>
        return fill_res;
 8002724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002728:	e00e      	b.n	8002748 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800272a:	f005 f913 	bl	8007954 <_Z29ei_run_impulse_check_canceledv>
 800272e:	4603      	mov	r3, r0
 8002730:	f113 0f02 	cmn.w	r3, #2
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xca>
        return EI_IMPULSE_CANCELED;
 8002740:	f06f 0301 	mvn.w	r3, #1
 8002744:	e000      	b.n	8002748 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    return EI_IMPULSE_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bdb0      	pop	{r4, r5, r7, pc}
 8002750:	0800f8c0 	.word	0x0800f8c0

08002754 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 8002754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002756:	b0d7      	sub	sp, #348	; 0x15c
 8002758:	af06      	add	r7, sp, #24
 800275a:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 800275e:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
 8002762:	6030      	str	r0, [r6, #0]
 8002764:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8002768:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800276c:	6001      	str	r1, [r0, #0]
 800276e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002772:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8002776:	600a      	str	r2, [r1, #0]
 8002778:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800277c:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8002780:	6013      	str	r3, [r2, #0]
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
 8002782:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002786:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800278a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 8002794:	f005 f8f3 	bl	800797e <_Z16ei_read_timer_usv>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 80027a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027a6:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 fa34 	bl	8003c1e <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 80027b6:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 80027ba:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80027be:	f107 0118 	add.w	r1, r7, #24
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4603      	mov	r3, r0
 80027d6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80027da:	f7ff fee5 	bl	80025a8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>
 80027de:	4603      	mov	r3, r0
 80027e0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 80027e4:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9e>
        return init_res;
 80027ec:	f997 4137 	ldrsb.w	r4, [r7, #311]	; 0x137
 80027f0:	e096      	b.n	8002920 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 fc59 	bl	80040ae <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 80027fc:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 8002800:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002804:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800280c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002810:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002818:	4413      	add	r3, r2
 800281a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 800281e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002822:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8002826:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 800282a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800282e:	f5a3 709c 	sub.w	r0, r3, #312	; 0x138
 8002832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	6800      	ldr	r0, [r0, #0]
 8002840:	f7ff fa98 	bl	8001d74 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
 8002844:	4603      	mov	r3, r0
 8002846:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    if (input_res != EI_IMPULSE_OK) {
 800284a:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x104>
        return input_res;
 8002852:	f997 412b 	ldrsb.w	r4, [r7, #299]	; 0x12b
 8002856:	e063      	b.n	8002920 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 8002858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800285c:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002860:	f5a1 709a 	sub.w	r0, r1, #308	; 0x134
 8002864:	f897 1164 	ldrb.w	r1, [r7, #356]	; 0x164
 8002868:	9105      	str	r1, [sp, #20]
 800286a:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800286e:	9104      	str	r1, [sp, #16]
 8002870:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002874:	9103      	str	r1, [sp, #12]
 8002876:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800287a:	9102      	str	r1, [sp, #8]
 800287c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002880:	9101      	str	r1, [sp, #4]
 8002882:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002886:	9100      	str	r1, [sp, #0]
 8002888:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800288c:	6800      	ldr	r0, [r0, #0]
 800288e:	f7ff fef5 	bl	800267c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>
 8002892:	4603      	mov	r3, r0
 8002894:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
 8002898:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800289c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d023      	beq.n	80028ec <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
 80028a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80028a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80028b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80028c2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fb1a 	bl	8001f0c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
 80028d8:	4603      	mov	r3, r0
 80028da:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        if (output_res != EI_IMPULSE_OK) {
 80028de:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
            return output_res;
 80028e6:	f997 4129 	ldrsb.w	r4, [r7, #297]	; 0x129
 80028ea:	e019      	b.n	8002920 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
        }
    }

    graph_config->model_reset(ei_aligned_free);
 80028ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4811      	ldr	r0, [pc, #68]	; (8002938 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 80028f4:	4798      	blx	r3

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80028f6:	f005 f842 	bl	800797e <_Z16ei_read_timer_usv>
 80028fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028fe:	1a84      	subs	r4, r0, r2
 8002900:	eb61 0503 	sbc.w	r5, r1, r3
 8002904:	4622      	mov	r2, r4
 8002906:	462b      	mov	r3, r5
 8002908:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800290c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 8002910:	f997 312a 	ldrsb.w	r3, [r7, #298]	; 0x12a
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1ca>
        return run_res;
 8002918:	f997 412a 	ldrsb.w	r4, [r7, #298]	; 0x12a
 800291c:	e000      	b.n	8002920 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    return EI_IMPULSE_OK;
 800291e:	2400      	movs	r4, #0
}
 8002920:	f107 0310 	add.w	r3, r7, #16
 8002924:	4618      	mov	r0, r3
 8002926:	f001 f98f 	bl	8003c48 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 800292a:	4623      	mov	r3, r4
 800292c:	4618      	mov	r0, r3
 800292e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8002932:	46bd      	mov	sp, r7
 8002934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002936:	bf00      	nop
 8002938:	080011e1 	.word	0x080011e1

0800293c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800293c:	b5b0      	push	{r4, r5, r7, lr}
 800293e:	b094      	sub	sp, #80	; 0x50
 8002940:	af04      	add	r7, sp, #16
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	70fb      	strb	r3, [r7, #3]
    auto& impulse = handle->impulse;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	330c      	adds	r3, #12
 800294e:	63bb      	str	r3, [r7, #56]	; 0x38
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8002950:	2300      	movs	r3, #0
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002954:	e02f      	b.n	80029b6 <run_inference+0x7a>

        ei_learning_block_t block = impulse->learning_blocks[ix];
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	015b      	lsls	r3, r3, #5
 8002960:	4413      	add	r3, r2
 8002962:	f107 0414 	add.w	r4, r7, #20
 8002966:	461d      	mov	r5, r3
 8002968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        result->copy_output = block.keep_output;
 8002974:	7e3a      	ldrb	r2, [r7, #24]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 800297c:	69fc      	ldr	r4, [r7, #28]
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	6a3a      	ldr	r2, [r7, #32]
 8002988:	78f9      	ldrb	r1, [r7, #3]
 800298a:	9103      	str	r1, [sp, #12]
 800298c:	9202      	str	r2, [sp, #8]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	9201      	str	r2, [sp, #4]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	462b      	mov	r3, r5
 8002996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	47a0      	blx	r4
 800299c:	4603      	mov	r3, r0
 800299e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (res != EI_IMPULSE_OK) {
 80029a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <run_inference+0x74>
            return res;
 80029aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80029ae:	e017      	b.n	80029e0 <run_inference+0xa4>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 80029b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b2:	3301      	adds	r3, #1
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029be:	429a      	cmp	r2, r3
 80029c0:	d3c9      	bcc.n	8002956 <run_inference+0x1a>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80029c2:	f004 ffc7 	bl	8007954 <_Z29ei_run_impulse_check_canceledv>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f113 0f02 	cmn.w	r3, #2
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <run_inference+0xa2>
        return EI_IMPULSE_CANCELED;
 80029d8:	f06f 0301 	mvn.w	r3, #1
 80029dc:	e000      	b.n	80029e0 <run_inference+0xa4>
    }

    return EI_IMPULSE_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3740      	adds	r7, #64	; 0x40
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdb0      	pop	{r4, r5, r7, pc}

080029e8 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fb9c 	bl	8004136 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ffe5 	bl	80029e8 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3310      	adds	r3, #16
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fd7c 	bl	8001532 <_ZN2ei11ei_signal_tD1Ev>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8002a44:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8002a48:	b0a6      	sub	sp, #152	; 0x98
 8002a4a:	af02      	add	r7, sp, #8
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	70fb      	strb	r3, [r7, #3]
 8002a54:	2600      	movs	r6, #0
    if(!handle) {
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <process_impulse+0x1e>
        return EI_IMPULSE_INFERENCE_ERROR;
 8002a5c:	f06f 0615 	mvn.w	r6, #21
 8002a60:	e24c      	b.n	8002efc <process_impulse+0x4b8>
    if (can_run_classifier_image_quantized(handle->impulse, block) == EI_IMPULSE_OK) {
        return run_classifier_image_quantized(handle->impulse, signal, result, debug);
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8002a62:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002a66:	2100      	movs	r1, #0
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f00a fb13 	bl	800d094 <memset>
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	4413      	add	r3, r2
 8002a7c:	67bb      	str	r3, [r7, #120]	; 0x78

    // smart pointer to features array
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 8002a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a84:	d201      	bcs.n	8002a8a <process_impulse+0x46>
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	e001      	b.n	8002a8e <process_impulse+0x4a>
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f007 ff41 	bl	800a916 <_Znaj>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461a      	mov	r2, r3
 8002a98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 f9b1 	bl	8003e06 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>
    ei_feature_t* features = features_ptr.get();
 8002aa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 f9da 	bl	8003e62 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>
 8002aae:	6778      	str	r0, [r7, #116]	; 0x74
    memset(features, 0, sizeof(ei_feature_t) * block_num);
 8002ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002aba:	f00a faeb 	bl	800d094 <memset>

    // have it outside of the loop to avoid going out of scope
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
 8002abe:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8002ac0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002ac4:	429c      	cmp	r4, r3
 8002ac6:	d202      	bcs.n	8002ace <process_impulse+0x8a>
 8002ac8:	1ca3      	adds	r3, r4, #2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	e001      	b.n	8002ad2 <process_impulse+0x8e>
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f007 ff1f 	bl	800a916 <_Znaj>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461d      	mov	r5, r3
 8002adc:	2304      	movs	r3, #4
 8002ade:	602b      	str	r3, [r5, #0]
 8002ae0:	1d2b      	adds	r3, r5, #4
 8002ae2:	601c      	str	r4, [r3, #0]
 8002ae4:	f105 0308 	add.w	r3, r5, #8
 8002ae8:	1e62      	subs	r2, r4, #1
 8002aea:	4614      	mov	r4, r2
 8002aec:	4698      	mov	r8, r3
 8002aee:	e005      	b.n	8002afc <process_impulse+0xb8>
 8002af0:	4640      	mov	r0, r8
 8002af2:	f001 fb10 	bl	8004116 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>
 8002af6:	f108 0804 	add.w	r8, r8, #4
 8002afa:	3c01      	subs	r4, #1
 8002afc:	2c00      	cmp	r4, #0
 8002afe:	daf7      	bge.n	8002af0 <process_impulse+0xac>
 8002b00:	f105 0308 	add.w	r3, r5, #8
 8002b04:	673b      	str	r3, [r7, #112]	; 0x70

    uint64_t dsp_start_us = ei_read_timer_us();
 8002b06:	f004 ff3a 	bl	800797e <_Z16ei_read_timer_usv>
 8002b0a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b1a:	e13c      	b.n	8002d96 <process_impulse+0x352>
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b26:	015b      	lsls	r3, r3, #5
 8002b28:	4413      	add	r3, r2
 8002b2a:	f107 0410 	add.w	r4, r7, #16
 8002b2e:	461d      	mov	r5, r3
 8002b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 8002b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b44:	18d4      	adds	r4, r2, r3
 8002b46:	2010      	movs	r0, #16
 8002b48:	f007 fed4 	bl	800a8f4 <_Znwj>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461d      	mov	r5, r3
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	2300      	movs	r3, #0
 8002b54:	2101      	movs	r1, #1
 8002b56:	4628      	mov	r0, r5
 8002b58:	f7fe fb66 	bl	8001228 <_ZN2ei9ei_matrixC1EmmPf>
 8002b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b60:	4629      	mov	r1, r5
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 f99a 	bl	8003e9c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8002b68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f7ff ff4a 	bl	8002a08 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 8002b74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f001 f99e 	bl	8003eba <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
        features[ix].matrix = matrix_ptrs[ix].get();
 8002b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b86:	18d1      	adds	r1, r2, r3
 8002b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b90:	18d4      	adds	r4, r2, r3
 8002b92:	4608      	mov	r0, r1
 8002b94:	f001 f9b3 	bl	8003efe <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	6023      	str	r3, [r4, #0]
        features[ix].blockId = block.blockId;
 8002b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ba4:	4413      	add	r3, r2
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]

        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb0:	441a      	add	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d922      	bls.n	8002c02 <process_impulse+0x1be>
            ei_printf("ERR: Would write outside feature buffer\n");
 8002bbc:	48a6      	ldr	r0, [pc, #664]	; (8002e58 <process_impulse+0x414>)
 8002bbe:	f000 f9f9 	bl	8002fb4 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8002bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d019      	beq.n	8002bfc <process_impulse+0x1b8>
 8002bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002bd2:	18d4      	adds	r4, r2, r3
 8002bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd6:	429c      	cmp	r4, r3
 8002bd8:	d004      	beq.n	8002be4 <process_impulse+0x1a0>
 8002bda:	3c04      	subs	r4, #4
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f001 f96c 	bl	8003eba <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8002be2:	e7f7      	b.n	8002bd4 <process_impulse+0x190>
 8002be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be6:	f1a3 0208 	sub.w	r2, r3, #8
 8002bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bec:	3b04      	subs	r3, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f007 fe7a 	bl	800a8f0 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8002bfc:	f06f 0604 	mvn.w	r6, #4
 8002c00:	e176      	b.n	8002ef0 <process_impulse+0x4ac>
            delete[] matrix_ptrs;
            return EI_IMPULSE_DSP_ERROR;
        }
        auto internal_signal = signal;
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, handle->impulse);
 8002c02:	6a3a      	ldr	r2, [r7, #32]
 8002c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	460b      	mov	r3, r1
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	f7fe fcd4 	bl	80015c0 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        auto internal_signal = swa.get_signal();
 8002c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe fcff 	bl	8001620 <_ZN14SignalWithAxes10get_signalEv>
 8002c22:	6638      	str	r0, [r7, #96]	; 0x60
#endif

        int ret;
        if (block.factory) { // ie, if we're using state
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d038      	beq.n	8002c9c <process_impulse+0x258>
            // Msg user
            static bool has_printed = false;
            if (!has_printed) {
 8002c2a:	4b8c      	ldr	r3, [pc, #560]	; (8002e5c <process_impulse+0x418>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	f083 0301 	eor.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <process_impulse+0x20c>
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
 8002c38:	4b89      	ldr	r3, [pc, #548]	; (8002e60 <process_impulse+0x41c>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4889      	ldr	r0, [pc, #548]	; (8002e64 <process_impulse+0x420>)
 8002c40:	f000 f9b8 	bl	8002fb4 <_Z9ei_printfPKcz>
 8002c44:	4888      	ldr	r0, [pc, #544]	; (8002e68 <process_impulse+0x424>)
 8002c46:	f000 f9b5 	bl	8002fb4 <_Z9ei_printfPKcz>
                has_printed = true;
 8002c4a:	4b84      	ldr	r3, [pc, #528]	; (8002e5c <process_impulse+0x418>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
            }

            // getter has a lazy init, so we can just call it
            auto dsp_handle = handle->state.get_dsp_handle(ix);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fbd0 	bl	80013fc <_ZN18ei_impulse_state_t14get_dsp_handleEj>
 8002c5c:	65f8      	str	r0, [r7, #92]	; 0x5c
            if(dsp_handle) {
 8002c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d017      	beq.n	8002c94 <process_impulse+0x250>
                ret = dsp_handle->extract(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8002c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	681c      	ldr	r4, [r3, #0]
 8002c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c74:	4413      	add	r3, r2
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	69f9      	ldr	r1, [r7, #28]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002c82:	eeb0 0a67 	vmov.f32	s0, s15
 8002c86:	460b      	mov	r3, r1
 8002c88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c8a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002c8c:	47a0      	blx	r4
 8002c8e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8002c92:	e016      	b.n	8002cc2 <process_impulse+0x27e>
            } else {
                return EI_IMPULSE_OUT_OF_MEMORY;
 8002c94:	f06f 060a 	mvn.w	r6, #10
 8002c98:	2400      	movs	r4, #0
 8002c9a:	e06f      	b.n	8002d7c <process_impulse+0x338>
            }
        } else {
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002ca2:	00d2      	lsls	r2, r2, #3
 8002ca4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002ca6:	440a      	add	r2, r1
 8002ca8:	6811      	ldr	r1, [r2, #0]
 8002caa:	69f8      	ldr	r0, [r7, #28]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	68d2      	ldr	r2, [r2, #12]
 8002cb0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8002cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002cbc:	4798      	blx	r3
 8002cbe:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        }

        if (ret != EIDSP_OK) {
 8002cc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d025      	beq.n	8002d16 <process_impulse+0x2d2>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002cca:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002cce:	4867      	ldr	r0, [pc, #412]	; (8002e6c <process_impulse+0x428>)
 8002cd0:	f000 f970 	bl	8002fb4 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8002cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d019      	beq.n	8002d0e <process_impulse+0x2ca>
 8002cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cdc:	3b04      	subs	r3, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ce4:	18d4      	adds	r4, r2, r3
 8002ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ce8:	429c      	cmp	r4, r3
 8002cea:	d004      	beq.n	8002cf6 <process_impulse+0x2b2>
 8002cec:	3c04      	subs	r4, #4
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f001 f8e3 	bl	8003eba <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8002cf4:	e7f7      	b.n	8002ce6 <process_impulse+0x2a2>
 8002cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf8:	f1a3 0208 	sub.w	r2, r3, #8
 8002cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3302      	adds	r3, #2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f007 fdf1 	bl	800a8f0 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8002d0e:	f06f 0604 	mvn.w	r6, #4
 8002d12:	2400      	movs	r4, #0
 8002d14:	e032      	b.n	8002d7c <process_impulse+0x338>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002d16:	f004 fe1d 	bl	8007954 <_Z29ei_run_impulse_check_canceledv>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f113 0f02 	cmn.w	r3, #2
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <process_impulse+0x32a>
            delete[] matrix_ptrs;
 8002d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d019      	beq.n	8002d66 <process_impulse+0x322>
 8002d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d34:	3b04      	subs	r3, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d3c:	18d4      	adds	r4, r2, r3
 8002d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d40:	429c      	cmp	r4, r3
 8002d42:	d004      	beq.n	8002d4e <process_impulse+0x30a>
 8002d44:	3c04      	subs	r4, #4
 8002d46:	4620      	mov	r0, r4
 8002d48:	f001 f8b7 	bl	8003eba <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8002d4c:	e7f7      	b.n	8002d3e <process_impulse+0x2fa>
 8002d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d50:	f1a3 0208 	sub.w	r2, r3, #8
 8002d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d56:	3b04      	subs	r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f007 fdc5 	bl	800a8f0 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
 8002d66:	f06f 0601 	mvn.w	r6, #1
 8002d6a:	2400      	movs	r4, #0
 8002d6c:	e006      	b.n	8002d7c <process_impulse+0x338>
        }

        out_features_index += block.n_output_features;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002d74:	4413      	add	r3, r2
 8002d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }
 8002d7a:	2401      	movs	r4, #1
 8002d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fe51 	bl	8002a28 <_ZN14SignalWithAxesD1Ev>
 8002d86:	2c01      	cmp	r4, #1
 8002d88:	f040 80b2 	bne.w	8002ef0 <process_impulse+0x4ac>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8002d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d90:	3301      	adds	r3, #1
 8002d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002da0:	429a      	cmp	r2, r3
 8002da2:	f4ff aebb 	bcc.w	8002b1c <process_impulse+0xd8>
            features[handle->impulse->dsp_blocks_size + ix].blockId = block.blockId;
        }
    }
#endif // EI_CLASSIFIER_SINGLE_FEATURE_INPUT

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002da6:	f004 fdea 	bl	800797e <_Z16ei_read_timer_usv>
 8002daa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002dae:	ebb0 0a02 	subs.w	sl, r0, r2
 8002db2:	eb61 0b03 	sbc.w	fp, r1, r3
 8002db6:	4652      	mov	r2, sl
 8002db8:	465b      	mov	r3, fp
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	f7fd ff7b 	bl	8000cc8 <__aeabi_ldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d057      	beq.n	8002e92 <process_impulse+0x44e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002de8:	4619      	mov	r1, r3
 8002dea:	4821      	ldr	r0, [pc, #132]	; (8002e70 <process_impulse+0x42c>)
 8002dec:	f000 f8e2 	bl	8002fb4 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002df6:	e047      	b.n	8002e88 <process_impulse+0x444>
            if (features[ix].matrix == nullptr) {
 8002df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e00:	4413      	add	r3, r2
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d039      	beq.n	8002e7c <process_impulse+0x438>
                continue;
            }
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8002e08:	2300      	movs	r3, #0
 8002e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e0c:	e015      	b.n	8002e3a <process_impulse+0x3f6>
                ei_printf_float(features[ix].matrix->buffer[jx]);
 8002e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e16:	4413      	add	r3, r2
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2a:	f004 fdb9 	bl	80079a0 <_Z15ei_printf_floatf>
                ei_printf(" ");
 8002e2e:	4811      	ldr	r0, [pc, #68]	; (8002e74 <process_impulse+0x430>)
 8002e30:	f000 f8c0 	bl	8002fb4 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8002e34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e36:	3301      	adds	r3, #1
 8002e38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e42:	4413      	add	r3, r2
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3df      	bcc.n	8002e0e <process_impulse+0x3ca>
            }
            ei_printf("\n");
 8002e4e:	480a      	ldr	r0, [pc, #40]	; (8002e78 <process_impulse+0x434>)
 8002e50:	f000 f8b0 	bl	8002fb4 <_Z9ei_printfPKcz>
 8002e54:	e013      	b.n	8002e7e <process_impulse+0x43a>
 8002e56:	bf00      	nop
 8002e58:	0800f96c 	.word	0x0800f96c
 8002e5c:	200006f4 	.word	0x200006f4
 8002e60:	20000000 	.word	0x20000000
 8002e64:	0800f998 	.word	0x0800f998
 8002e68:	0800f9a0 	.word	0x0800f9a0
 8002e6c:	0800fa0c 	.word	0x0800fa0c
 8002e70:	0800fa34 	.word	0x0800fa34
 8002e74:	0800fa48 	.word	0x0800fa48
 8002e78:	0800f318 	.word	0x0800f318
                continue;
 8002e7c:	bf00      	nop
        for (size_t ix = 0; ix < block_num; ix++) {
 8002e7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e82:	3301      	adds	r3, #1
 8002e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3b2      	bcc.n	8002df8 <process_impulse+0x3b4>
        }
    }

    if (debug) {
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <process_impulse+0x45a>
        ei_printf("Running impulse...\n");
 8002e98:	481b      	ldr	r0, [pc, #108]	; (8002f08 <process_impulse+0x4c4>)
 8002e9a:	f000 f88b 	bl	8002fb4 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f7ff fd49 	bl	800293c <run_inference>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    delete[] matrix_ptrs;
 8002eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d019      	beq.n	8002eea <process_impulse+0x4a6>
 8002eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb8:	3b04      	subs	r3, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ec0:	18d4      	adds	r4, r2, r3
 8002ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec4:	429c      	cmp	r4, r3
 8002ec6:	d004      	beq.n	8002ed2 <process_impulse+0x48e>
 8002ec8:	3c04      	subs	r4, #4
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f000 fff5 	bl	8003eba <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8002ed0:	e7f7      	b.n	8002ec2 <process_impulse+0x47e>
 8002ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ed4:	f1a3 0208 	sub.w	r2, r3, #8
 8002ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eda:	3b04      	subs	r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3302      	adds	r3, #2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f007 fd03 	bl	800a8f0 <_ZdaPvj>
    return res;
 8002eea:	f997 6067 	ldrsb.w	r6, [r7, #103]	; 0x67
 8002eee:	e000      	b.n	8002ef2 <process_impulse+0x4ae>
            return EI_IMPULSE_DSP_ERROR;
 8002ef0:	bf00      	nop
}
 8002ef2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 ff94 	bl	8003e24 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
 8002efc:	4633      	mov	r3, r6
 8002efe:	4618      	mov	r0, r3
 8002f00:	3790      	adds	r7, #144	; 0x90
 8002f02:	46bd      	mov	sp, r7
 8002f04:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8002f08:	0800fa4c 	.word	0x0800fa4c

08002f0c <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	4613      	mov	r3, r2
 8002f18:	71fb      	strb	r3, [r7, #7]
    return process_impulse(&ei_default_impulse, signal, result, debug);
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <run_classifier+0x24>)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	68f9      	ldr	r1, [r7, #12]
 8002f22:	f7ff fd8f 	bl	8002a44 <process_impulse>
 8002f26:	4603      	mov	r3, r0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200006e4 	.word	0x200006e4

08002f34 <_Z16get_feature_datajjPf>:
using namespace ei;

// paste the raw features here
static float features[] = {6.7, 3.3, 5.7, 2.5};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <_Z16get_feature_datajjPf+0x2c>)
 8002f46:	1899      	adds	r1, r3, r2
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f00a f9dd 	bl	800d30e <memcpy>
    return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000054 	.word	0x20000054

08002f64 <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b0b4      	sub	sp, #208	; 0xd0
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00a f868 	bl	800d04c <vsiprintf>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bfcc      	ite	gt
 8002f82:	2301      	movgt	r3, #1
 8002f84:	2300      	movle	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00c      	beq.n	8002fa6 <_Z6vprintPKcSt9__va_list+0x42>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 180); // send message via UART
 8002f8c:	f107 0308 	add.w	r3, r7, #8
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd f98d 	bl	80002b0 <strlen>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	f107 0108 	add.w	r1, r7, #8
 8002f9e:	23b4      	movs	r3, #180	; 0xb4
 8002fa0:	4803      	ldr	r0, [pc, #12]	; (8002fb0 <_Z6vprintPKcSt9__va_list+0x4c>)
 8002fa2:	f003 ff15 	bl	8006dd0 <HAL_UART_Transmit>
    }
}
 8002fa6:	bf00      	nop
 8002fa8:	37d0      	adds	r7, #208	; 0xd0
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200006f8 	.word	0x200006f8

08002fb4 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8002fb4:	b40f      	push	{r0, r1, r2, r3}
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	6938      	ldr	r0, [r7, #16]
 8002fc6:	f7ff ffcd 	bl	8002f64 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fd4:	b004      	add	sp, #16
 8002fd6:	4770      	bx	lr

08002fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b0cb      	sub	sp, #300	; 0x12c
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fde:	f002 fb26 	bl	800562e <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8002fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fa96 	bl	8001518 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 8002fec:	2304      	movs	r3, #4
 8002fee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  signal.get_data = &get_feature_data;
 8002ff2:	4b56      	ldr	r3, [pc, #344]	; (800314c <main+0x174>)
 8002ff4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ff8:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f000 feb1 	bl	8003d6a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003008:	f000 f8b6 	bl	8003178 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800300c:	f000 f95a 	bl	80032c4 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8003010:	f000 f924 	bl	800325c <_ZL19MX_USART1_UART_Initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ei_impulse_result_t result = { 0 };
 8003014:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003018:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800301c:	4618      	mov	r0, r3
 800301e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003022:	461a      	mov	r2, r3
 8003024:	2100      	movs	r1, #0
 8003026:	f00a f835 	bl	800d094 <memset>
			EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 800302a:	4639      	mov	r1, r7
 800302c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003030:	2201      	movs	r2, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ff6a 	bl	8002f0c <run_classifier>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			ei_printf("run_classifier returned: %d\n", res);
 800303e:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 8003042:	4619      	mov	r1, r3
 8003044:	4842      	ldr	r0, [pc, #264]	; (8003150 <main+0x178>)
 8003046:	f7ff ffb5 	bl	8002fb4 <_Z9ei_printfPKcz>

			ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 800304a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800304e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003052:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003056:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800305a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800305e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003062:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003066:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800306a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800306e:	4839      	ldr	r0, [pc, #228]	; (8003154 <main+0x17c>)
 8003070:	f7ff ffa0 	bl	8002fb4 <_Z9ei_printfPKcz>
				result.timing.dsp, result.timing.classification, result.timing.anomaly);

			// print the predictions
			ei_printf("[");
 8003074:	4838      	ldr	r0, [pc, #224]	; (8003158 <main+0x180>)
 8003076:	f7ff ff9d 	bl	8002fb4 <_Z9ei_printfPKcz>
			for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800307a:	2300      	movs	r3, #0
 800307c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003080:	e017      	b.n	80030b2 <main+0xda>
			  ei_printf_float(result.classification[ix].value);
 8003082:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003086:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 800308a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800308e:	3301      	adds	r3, #1
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	f004 fc7f 	bl	80079a0 <_Z15ei_printf_floatf>
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
				ei_printf(", ");
 80030a2:	482e      	ldr	r0, [pc, #184]	; (800315c <main+0x184>)
 80030a4:	f7ff ff86 	bl	8002fb4 <_Z9ei_printfPKcz>
			for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80030a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80030ac:	3301      	adds	r3, #1
 80030ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d9e3      	bls.n	8003082 <main+0xaa>
					ei_printf(", ");
				}
		#endif
			}
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
			ei_printf_float(result.anomaly);
 80030ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80030be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030c2:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80030c6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ca:	f004 fc69 	bl	80079a0 <_Z15ei_printf_floatf>
		#endif
			ei_printf("]\n\n\n");
 80030ce:	4824      	ldr	r0, [pc, #144]	; (8003160 <main+0x188>)
 80030d0:	f7ff ff70 	bl	8002fb4 <_Z9ei_printfPKcz>

	//parceamos los features
	if(HAL_OK == HAL_UART_Receive(&huart1,atributos,18,2000)){
 80030d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80030d8:	2212      	movs	r2, #18
 80030da:	4922      	ldr	r1, [pc, #136]	; (8003164 <main+0x18c>)
 80030dc:	4822      	ldr	r0, [pc, #136]	; (8003168 <main+0x190>)
 80030de:	f003 fefa 	bl	8006ed6 <HAL_UART_Receive>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d090      	beq.n	8003014 <main+0x3c>
		ptr = strtok((char *)atributos, ", "); //dividimos en sub cadenas
 80030f2:	491a      	ldr	r1, [pc, #104]	; (800315c <main+0x184>)
 80030f4:	481b      	ldr	r0, [pc, #108]	; (8003164 <main+0x18c>)
 80030f6:	f009 ffe7 	bl	800d0c8 <strtok>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a1b      	ldr	r2, [pc, #108]	; (800316c <main+0x194>)
 80030fe:	6013      	str	r3, [r2, #0]
		cont = 0;
 8003100:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <main+0x198>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
		while (ptr != NULL){
 8003106:	e01c      	b.n	8003142 <main+0x16a>
			features[cont] = strtod(ptr, NULL);
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <main+0x194>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f009 fe62 	bl	800cdd8 <strtod>
 8003114:	ec51 0b10 	vmov	r0, r1, d0
 8003118:	4b15      	ldr	r3, [pc, #84]	; (8003170 <main+0x198>)
 800311a:	681c      	ldr	r4, [r3, #0]
 800311c:	f7fd fd84 	bl	8000c28 <__aeabi_d2f>
 8003120:	4602      	mov	r2, r0
 8003122:	4914      	ldr	r1, [pc, #80]	; (8003174 <main+0x19c>)
 8003124:	00a3      	lsls	r3, r4, #2
 8003126:	440b      	add	r3, r1
 8003128:	601a      	str	r2, [r3, #0]
			ptr = strtok(NULL, ", "); // Pasamos a la siguiente subcadena
 800312a:	490c      	ldr	r1, [pc, #48]	; (800315c <main+0x184>)
 800312c:	2000      	movs	r0, #0
 800312e:	f009 ffcb 	bl	800d0c8 <strtok>
 8003132:	4603      	mov	r3, r0
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <main+0x194>)
 8003136:	6013      	str	r3, [r2, #0]
			cont++;
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <main+0x198>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <main+0x198>)
 8003140:	6013      	str	r3, [r2, #0]
		while (ptr != NULL){
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <main+0x194>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1de      	bne.n	8003108 <main+0x130>
		}
	}


  }
 800314a:	e763      	b.n	8003014 <main+0x3c>
 800314c:	08002f35 	.word	0x08002f35
 8003150:	0800faec 	.word	0x0800faec
 8003154:	0800f8e0 	.word	0x0800f8e0
 8003158:	0800fb0c 	.word	0x0800fb0c
 800315c:	0800fb10 	.word	0x0800fb10
 8003160:	0800fb14 	.word	0x0800fb14
 8003164:	20000780 	.word	0x20000780
 8003168:	200006f8 	.word	0x200006f8
 800316c:	20000794 	.word	0x20000794
 8003170:	20000798 	.word	0x20000798
 8003174:	20000054 	.word	0x20000054

08003178 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b094      	sub	sp, #80	; 0x50
 800317c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800317e:	f107 0320 	add.w	r3, r7, #32
 8003182:	2230      	movs	r2, #48	; 0x30
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f009 ff84 	bl	800d094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <_Z18SystemClock_Configv+0xdc>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <_Z18SystemClock_Configv+0xdc>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6413      	str	r3, [r2, #64]	; 0x40
 80031a8:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <_Z18SystemClock_Configv+0xdc>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <_Z18SystemClock_Configv+0xe0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80031bc:	4a26      	ldr	r2, [pc, #152]	; (8003258 <_Z18SystemClock_Configv+0xe0>)
 80031be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <_Z18SystemClock_Configv+0xe0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031d0:	2302      	movs	r3, #2
 80031d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031d4:	2301      	movs	r3, #1
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031d8:	2310      	movs	r3, #16
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031dc:	2302      	movs	r3, #2
 80031de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031e0:	2300      	movs	r3, #0
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80031e4:	230a      	movs	r3, #10
 80031e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80031e8:	23d2      	movs	r3, #210	; 0xd2
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031ec:	2302      	movs	r3, #2
 80031ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80031f0:	2302      	movs	r3, #2
 80031f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031f4:	f107 0320 	add.w	r3, r7, #32
 80031f8:	4618      	mov	r0, r3
 80031fa:	f002 fd21 	bl	8005c40 <HAL_RCC_OscConfig>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 800320e:	f000 fccf 	bl	8003bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003212:	230f      	movs	r3, #15
 8003214:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003216:	2302      	movs	r3, #2
 8003218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800321e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003228:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800322a:	f107 030c 	add.w	r3, r7, #12
 800322e:	2105      	movs	r1, #5
 8003230:	4618      	mov	r0, r3
 8003232:	f002 ffa9 	bl	8006188 <HAL_RCC_ClockConfig>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8003246:	f000 fcb3 	bl	8003bb0 <Error_Handler>
  }
}
 800324a:	bf00      	nop
 800324c:	3750      	adds	r7, #80	; 0x50
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	40007000 	.word	0x40007000

0800325c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003262:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8003264:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800326c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003276:	2200      	movs	r2, #0
 8003278:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003282:	220c      	movs	r2, #12
 8003284:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003288:	2200      	movs	r2, #0
 800328a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003294:	2200      	movs	r2, #0
 8003296:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 800329a:	2200      	movs	r2, #0
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800329e:	4807      	ldr	r0, [pc, #28]	; (80032bc <_ZL19MX_USART1_UART_Initv+0x60>)
 80032a0:	f003 fd48 	bl	8006d34 <HAL_UART_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80032b4:	f000 fc7c 	bl	8003bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200006f8 	.word	0x200006f8
 80032c0:	40011000 	.word	0x40011000

080032c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b090      	sub	sp, #64	; 0x40
 80032c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	60da      	str	r2, [r3, #12]
 80032d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032da:	4bad      	ldr	r3, [pc, #692]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4aac      	ldr	r2, [pc, #688]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032e0:	f043 0310 	orr.w	r3, r3, #16
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4baa      	ldr	r3, [pc, #680]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032f2:	4ba7      	ldr	r3, [pc, #668]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4aa6      	ldr	r2, [pc, #664]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4ba4      	ldr	r3, [pc, #656]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800330a:	4ba1      	ldr	r3, [pc, #644]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4aa0      	ldr	r2, [pc, #640]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003310:	f043 0302 	orr.w	r3, r3, #2
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4b9e      	ldr	r3, [pc, #632]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	623b      	str	r3, [r7, #32]
 8003320:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003322:	4b9b      	ldr	r3, [pc, #620]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a9a      	ldr	r2, [pc, #616]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b98      	ldr	r3, [pc, #608]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800333a:	4b95      	ldr	r3, [pc, #596]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a94      	ldr	r2, [pc, #592]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b92      	ldr	r3, [pc, #584]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003352:	4b8f      	ldr	r3, [pc, #572]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4a8e      	ldr	r2, [pc, #568]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6313      	str	r3, [r2, #48]	; 0x30
 800335e:	4b8c      	ldr	r3, [pc, #560]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800336a:	4b89      	ldr	r3, [pc, #548]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a88      	ldr	r2, [pc, #544]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b86      	ldr	r3, [pc, #536]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003382:	4b83      	ldr	r3, [pc, #524]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a82      	ldr	r2, [pc, #520]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b80      	ldr	r3, [pc, #512]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800339a:	4b7d      	ldr	r3, [pc, #500]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a7c      	ldr	r2, [pc, #496]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b7a      	ldr	r3, [pc, #488]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033b2:	4b77      	ldr	r3, [pc, #476]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a76      	ldr	r2, [pc, #472]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033b8:	f043 0320 	orr.w	r3, r3, #32
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b74      	ldr	r3, [pc, #464]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033ca:	4b71      	ldr	r3, [pc, #452]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a70      	ldr	r2, [pc, #448]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b6e      	ldr	r3, [pc, #440]	; (8003590 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80033e2:	2201      	movs	r2, #1
 80033e4:	2120      	movs	r1, #32
 80033e6:	486b      	ldr	r0, [pc, #428]	; (8003594 <_ZL12MX_GPIO_Initv+0x2d0>)
 80033e8:	f002 fc10 	bl	8005c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80033ec:	2200      	movs	r2, #0
 80033ee:	f241 010c 	movw	r1, #4108	; 0x100c
 80033f2:	4869      	ldr	r0, [pc, #420]	; (8003598 <_ZL12MX_GPIO_Initv+0x2d4>)
 80033f4:	f002 fc0a 	bl	8005c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80033f8:	2200      	movs	r2, #0
 80033fa:	2108      	movs	r1, #8
 80033fc:	4867      	ldr	r0, [pc, #412]	; (800359c <_ZL12MX_GPIO_Initv+0x2d8>)
 80033fe:	f002 fc05 	bl	8005c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003402:	2200      	movs	r2, #0
 8003404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003408:	4865      	ldr	r0, [pc, #404]	; (80035a0 <_ZL12MX_GPIO_Initv+0x2dc>)
 800340a:	f002 fbff 	bl	8005c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800340e:	2200      	movs	r2, #0
 8003410:	21c8      	movs	r1, #200	; 0xc8
 8003412:	4864      	ldr	r0, [pc, #400]	; (80035a4 <_ZL12MX_GPIO_Initv+0x2e0>)
 8003414:	f002 fbfa 	bl	8005c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003418:	2310      	movs	r3, #16
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003428:	230e      	movs	r3, #14
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800342c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003430:	4619      	mov	r1, r3
 8003432:	485d      	ldr	r0, [pc, #372]	; (80035a8 <_ZL12MX_GPIO_Initv+0x2e4>)
 8003434:	f002 fa3e 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8003438:	2308      	movs	r3, #8
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343c:	2300      	movs	r3, #0
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003448:	4619      	mov	r1, r3
 800344a:	4857      	ldr	r0, [pc, #348]	; (80035a8 <_ZL12MX_GPIO_Initv+0x2e4>)
 800344c:	f002 fa32 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003450:	2304      	movs	r3, #4
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003460:	2309      	movs	r3, #9
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003468:	4619      	mov	r1, r3
 800346a:	484f      	ldr	r0, [pc, #316]	; (80035a8 <_ZL12MX_GPIO_Initv+0x2e4>)
 800346c:	f002 fa22 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003470:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003476:	2302      	movs	r3, #2
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347e:	2303      	movs	r3, #3
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003482:	230b      	movs	r3, #11
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800348a:	4619      	mov	r1, r3
 800348c:	4845      	ldr	r0, [pc, #276]	; (80035a4 <_ZL12MX_GPIO_Initv+0x2e0>)
 800348e:	f002 fa11 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003492:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a0:	2303      	movs	r3, #3
 80034a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034a4:	230c      	movs	r3, #12
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ac:	4619      	mov	r1, r3
 80034ae:	483e      	ldr	r0, [pc, #248]	; (80035a8 <_ZL12MX_GPIO_Initv+0x2e4>)
 80034b0:	f002 fa00 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80034b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ba:	2312      	movs	r3, #18
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c2:	2300      	movs	r3, #0
 80034c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034c6:	2304      	movs	r3, #4
 80034c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ce:	4619      	mov	r1, r3
 80034d0:	4836      	ldr	r0, [pc, #216]	; (80035ac <_ZL12MX_GPIO_Initv+0x2e8>)
 80034d2:	f002 f9ef 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80034d6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e4:	2303      	movs	r3, #3
 80034e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80034e8:	230a      	movs	r3, #10
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f0:	4619      	mov	r1, r3
 80034f2:	482e      	ldr	r0, [pc, #184]	; (80035ac <_ZL12MX_GPIO_Initv+0x2e8>)
 80034f4:	f002 f9de 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80034f8:	2310      	movs	r3, #16
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003508:	2302      	movs	r3, #2
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800350c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003510:	4619      	mov	r1, r3
 8003512:	4826      	ldr	r0, [pc, #152]	; (80035ac <_ZL12MX_GPIO_Initv+0x2e8>)
 8003514:	f002 f9ce 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003524:	2300      	movs	r3, #0
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003528:	2308      	movs	r3, #8
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800352c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003530:	4619      	mov	r1, r3
 8003532:	4818      	ldr	r0, [pc, #96]	; (8003594 <_ZL12MX_GPIO_Initv+0x2d0>)
 8003534:	f002 f9be 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003538:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353e:	2302      	movs	r3, #2
 8003540:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003546:	2303      	movs	r3, #3
 8003548:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800354a:	230c      	movs	r3, #12
 800354c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003552:	4619      	mov	r1, r3
 8003554:	4816      	ldr	r0, [pc, #88]	; (80035b0 <_ZL12MX_GPIO_Initv+0x2ec>)
 8003556:	f002 f9ad 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800355a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	2300      	movs	r3, #0
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800356c:	2301      	movs	r3, #1
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003574:	4619      	mov	r1, r3
 8003576:	480f      	ldr	r0, [pc, #60]	; (80035b4 <_ZL12MX_GPIO_Initv+0x2f0>)
 8003578:	f002 f99c 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800357c:	2360      	movs	r3, #96	; 0x60
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003580:	2302      	movs	r3, #2
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	2300      	movs	r3, #0
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003588:	2300      	movs	r3, #0
 800358a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800358c:	230d      	movs	r3, #13
 800358e:	e013      	b.n	80035b8 <_ZL12MX_GPIO_Initv+0x2f4>
 8003590:	40023800 	.word	0x40023800
 8003594:	40020c00 	.word	0x40020c00
 8003598:	40022000 	.word	0x40022000
 800359c:	40022800 	.word	0x40022800
 80035a0:	40021c00 	.word	0x40021c00
 80035a4:	40021800 	.word	0x40021800
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40020400 	.word	0x40020400
 80035b0:	40020800 	.word	0x40020800
 80035b4:	40020000 	.word	0x40020000
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035be:	4619      	mov	r1, r3
 80035c0:	48bc      	ldr	r0, [pc, #752]	; (80038b4 <_ZL12MX_GPIO_Initv+0x5f0>)
 80035c2:	f002 f977 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d2:	2303      	movs	r3, #3
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80035d6:	230a      	movs	r3, #10
 80035d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035de:	4619      	mov	r1, r3
 80035e0:	48b5      	ldr	r0, [pc, #724]	; (80038b8 <_ZL12MX_GPIO_Initv+0x5f4>)
 80035e2:	f002 f967 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80035e6:	f248 1333 	movw	r3, #33075	; 0x8133
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ec:	2302      	movs	r3, #2
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f4:	2303      	movs	r3, #3
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035f8:	230c      	movs	r3, #12
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003600:	4619      	mov	r1, r3
 8003602:	48ae      	ldr	r0, [pc, #696]	; (80038bc <_ZL12MX_GPIO_Initv+0x5f8>)
 8003604:	f002 f956 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003608:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800361a:	230e      	movs	r3, #14
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800361e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003622:	4619      	mov	r1, r3
 8003624:	48a6      	ldr	r0, [pc, #664]	; (80038c0 <_ZL12MX_GPIO_Initv+0x5fc>)
 8003626:	f002 f945 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800362a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003630:	2300      	movs	r3, #0
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800363c:	4619      	mov	r1, r3
 800363e:	48a0      	ldr	r0, [pc, #640]	; (80038c0 <_ZL12MX_GPIO_Initv+0x5fc>)
 8003640:	f002 f938 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8003644:	2340      	movs	r3, #64	; 0x40
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003648:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800364c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	2300      	movs	r3, #0
 8003650:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003656:	4619      	mov	r1, r3
 8003658:	489a      	ldr	r0, [pc, #616]	; (80038c4 <_ZL12MX_GPIO_Initv+0x600>)
 800365a:	f002 f92b 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800365e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003670:	230c      	movs	r3, #12
 8003672:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003678:	4619      	mov	r1, r3
 800367a:	4892      	ldr	r0, [pc, #584]	; (80038c4 <_ZL12MX_GPIO_Initv+0x600>)
 800367c:	f002 f91a 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8003680:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368e:	2303      	movs	r3, #3
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003692:	230a      	movs	r3, #10
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800369a:	4619      	mov	r1, r3
 800369c:	488a      	ldr	r0, [pc, #552]	; (80038c8 <_ZL12MX_GPIO_Initv+0x604>)
 800369e:	f002 f909 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80036a2:	23f0      	movs	r3, #240	; 0xf0
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036b2:	230a      	movs	r3, #10
 80036b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80036b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ba:	4619      	mov	r1, r3
 80036bc:	4883      	ldr	r0, [pc, #524]	; (80038cc <_ZL12MX_GPIO_Initv+0x608>)
 80036be:	f002 f8f9 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80036c2:	23f7      	movs	r3, #247	; 0xf7
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2300      	movs	r3, #0
 80036d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036d2:	230e      	movs	r3, #14
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80036d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036da:	4619      	mov	r1, r3
 80036dc:	487c      	ldr	r0, [pc, #496]	; (80038d0 <_ZL12MX_GPIO_Initv+0x60c>)
 80036de:	f002 f8e9 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80036e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e8:	2302      	movs	r3, #2
 80036ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f0:	2300      	movs	r3, #0
 80036f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80036f4:	2309      	movs	r3, #9
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80036f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036fc:	4619      	mov	r1, r3
 80036fe:	486f      	ldr	r0, [pc, #444]	; (80038bc <_ZL12MX_GPIO_Initv+0x5f8>)
 8003700:	f002 f8d8 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370a:	2302      	movs	r3, #2
 800370c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003712:	2300      	movs	r3, #0
 8003714:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003716:	230a      	movs	r3, #10
 8003718:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800371a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800371e:	4619      	mov	r1, r3
 8003720:	4866      	ldr	r0, [pc, #408]	; (80038bc <_ZL12MX_GPIO_Initv+0x5f8>)
 8003722:	f002 f8c7 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003726:	2320      	movs	r3, #32
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372a:	2301      	movs	r3, #1
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003732:	2300      	movs	r3, #0
 8003734:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800373a:	4619      	mov	r1, r3
 800373c:	4861      	ldr	r0, [pc, #388]	; (80038c4 <_ZL12MX_GPIO_Initv+0x600>)
 800373e:	f002 f8b9 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003742:	2308      	movs	r3, #8
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003752:	230d      	movs	r3, #13
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800375a:	4619      	mov	r1, r3
 800375c:	4859      	ldr	r0, [pc, #356]	; (80038c4 <_ZL12MX_GPIO_Initv+0x600>)
 800375e:	f002 f8a9 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8003762:	f241 030c 	movw	r3, #4108	; 0x100c
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003768:	2301      	movs	r3, #1
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003770:	2300      	movs	r3, #0
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003778:	4619      	mov	r1, r3
 800377a:	4854      	ldr	r0, [pc, #336]	; (80038cc <_ZL12MX_GPIO_Initv+0x608>)
 800377c:	f002 f89a 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003786:	2300      	movs	r3, #0
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800378e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003792:	4619      	mov	r1, r3
 8003794:	484f      	ldr	r0, [pc, #316]	; (80038d4 <_ZL12MX_GPIO_Initv+0x610>)
 8003796:	f002 f88d 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800379a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037ac:	230c      	movs	r3, #12
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037b4:	4619      	mov	r1, r3
 80037b6:	4848      	ldr	r0, [pc, #288]	; (80038d8 <_ZL12MX_GPIO_Initv+0x614>)
 80037b8:	f002 f87c 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80037bc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c2:	2302      	movs	r3, #2
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ca:	2300      	movs	r3, #0
 80037cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037ce:	230e      	movs	r3, #14
 80037d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80037d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d6:	4619      	mov	r1, r3
 80037d8:	483c      	ldr	r0, [pc, #240]	; (80038cc <_ZL12MX_GPIO_Initv+0x608>)
 80037da:	f002 f86b 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80037de:	2308      	movs	r3, #8
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e2:	2301      	movs	r3, #1
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80037ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037f2:	4619      	mov	r1, r3
 80037f4:	4836      	ldr	r0, [pc, #216]	; (80038d0 <_ZL12MX_GPIO_Initv+0x60c>)
 80037f6:	f002 f85d 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80037fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2300      	movs	r3, #0
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800380c:	230d      	movs	r3, #13
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003814:	4619      	mov	r1, r3
 8003816:	4829      	ldr	r0, [pc, #164]	; (80038bc <_ZL12MX_GPIO_Initv+0x5f8>)
 8003818:	f002 f84c 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800381c:	2310      	movs	r3, #16
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003820:	2300      	movs	r3, #0
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800382c:	4619      	mov	r1, r3
 800382e:	4825      	ldr	r0, [pc, #148]	; (80038c4 <_ZL12MX_GPIO_Initv+0x600>)
 8003830:	f002 f840 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8003834:	2304      	movs	r3, #4
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003840:	2303      	movs	r3, #3
 8003842:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003844:	230c      	movs	r3, #12
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8003848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800384c:	4619      	mov	r1, r3
 800384e:	481d      	ldr	r0, [pc, #116]	; (80038c4 <_ZL12MX_GPIO_Initv+0x600>)
 8003850:	f002 f830 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003854:	f248 0304 	movw	r3, #32772	; 0x8004
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800385a:	2300      	movs	r3, #0
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003866:	4619      	mov	r1, r3
 8003868:	481c      	ldr	r0, [pc, #112]	; (80038dc <_ZL12MX_GPIO_Initv+0x618>)
 800386a:	f002 f823 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800386e:	2302      	movs	r3, #2
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003872:	2302      	movs	r3, #2
 8003874:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	2300      	movs	r3, #0
 800387c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800387e:	2305      	movs	r3, #5
 8003880:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003886:	4619      	mov	r1, r3
 8003888:	4810      	ldr	r0, [pc, #64]	; (80038cc <_ZL12MX_GPIO_Initv+0x608>)
 800388a:	f002 f813 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800388e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003894:	2301      	movs	r3, #1
 8003896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389c:	2300      	movs	r3, #0
 800389e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80038a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a4:	4619      	mov	r1, r3
 80038a6:	480d      	ldr	r0, [pc, #52]	; (80038dc <_ZL12MX_GPIO_Initv+0x618>)
 80038a8:	f002 f804 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80038ac:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80038b0:	e016      	b.n	80038e0 <_ZL12MX_GPIO_Initv+0x61c>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40020400 	.word	0x40020400
 80038bc:	40021800 	.word	0x40021800
 80038c0:	40022400 	.word	0x40022400
 80038c4:	40020c00 	.word	0x40020c00
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40022800 	.word	0x40022800
 80038d4:	40020800 	.word	0x40020800
 80038d8:	40021400 	.word	0x40021400
 80038dc:	40021c00 	.word	0x40021c00
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ea:	2300      	movs	r3, #0
 80038ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038ee:	230d      	movs	r3, #13
 80038f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f6:	4619      	mov	r1, r3
 80038f8:	48a5      	ldr	r0, [pc, #660]	; (8003b90 <_ZL12MX_GPIO_Initv+0x8cc>)
 80038fa:	f001 ffdb 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80038fe:	2301      	movs	r3, #1
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800390e:	2302      	movs	r3, #2
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003916:	4619      	mov	r1, r3
 8003918:	489e      	ldr	r0, [pc, #632]	; (8003b94 <_ZL12MX_GPIO_Initv+0x8d0>)
 800391a:	f001 ffcb 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800391e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392c:	2300      	movs	r3, #0
 800392e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003930:	2301      	movs	r3, #1
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003938:	4619      	mov	r1, r3
 800393a:	4897      	ldr	r0, [pc, #604]	; (8003b98 <_ZL12MX_GPIO_Initv+0x8d4>)
 800393c:	f001 ffba 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003946:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800394a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003954:	4619      	mov	r1, r3
 8003956:	488f      	ldr	r0, [pc, #572]	; (8003b94 <_ZL12MX_GPIO_Initv+0x8d0>)
 8003958:	f001 ffac 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800395c:	23c0      	movs	r3, #192	; 0xc0
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	2302      	movs	r3, #2
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003968:	2303      	movs	r3, #3
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800396c:	2308      	movs	r3, #8
 800396e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003974:	4619      	mov	r1, r3
 8003976:	4889      	ldr	r0, [pc, #548]	; (8003b9c <_ZL12MX_GPIO_Initv+0x8d8>)
 8003978:	f001 ff9c 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800397c:	2310      	movs	r3, #16
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003980:	2302      	movs	r3, #2
 8003982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003984:	2300      	movs	r3, #0
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003988:	2303      	movs	r3, #3
 800398a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800398c:	230a      	movs	r3, #10
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003994:	4619      	mov	r1, r3
 8003996:	487e      	ldr	r0, [pc, #504]	; (8003b90 <_ZL12MX_GPIO_Initv+0x8cc>)
 8003998:	f001 ff8c 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800399c:	2328      	movs	r3, #40	; 0x28
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039ac:	230c      	movs	r3, #12
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b4:	4619      	mov	r1, r3
 80039b6:	4876      	ldr	r0, [pc, #472]	; (8003b90 <_ZL12MX_GPIO_Initv+0x8cc>)
 80039b8:	f001 ff7c 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80039bc:	23c8      	movs	r3, #200	; 0xc8
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c0:	2301      	movs	r3, #1
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c8:	2300      	movs	r3, #0
 80039ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039d0:	4619      	mov	r1, r3
 80039d2:	4873      	ldr	r0, [pc, #460]	; (8003ba0 <_ZL12MX_GPIO_Initv+0x8dc>)
 80039d4:	f001 ff6e 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80039d8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039de:	2303      	movs	r3, #3
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ea:	4619      	mov	r1, r3
 80039ec:	486d      	ldr	r0, [pc, #436]	; (8003ba4 <_ZL12MX_GPIO_Initv+0x8e0>)
 80039ee:	f001 ff61 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80039f2:	2308      	movs	r3, #8
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fe:	2303      	movs	r3, #3
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a02:	230c      	movs	r3, #12
 8003a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4863      	ldr	r0, [pc, #396]	; (8003b9c <_ZL12MX_GPIO_Initv+0x8d8>)
 8003a0e:	f001 ff51 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003a12:	2305      	movs	r3, #5
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	2302      	movs	r3, #2
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003a22:	230a      	movs	r3, #10
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	485b      	ldr	r0, [pc, #364]	; (8003b9c <_ZL12MX_GPIO_Initv+0x8d8>)
 8003a2e:	f001 ff41 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003a32:	2332      	movs	r3, #50	; 0x32
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a42:	230b      	movs	r3, #11
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4853      	ldr	r0, [pc, #332]	; (8003b9c <_ZL12MX_GPIO_Initv+0x8d8>)
 8003a4e:	f001 ff31 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a52:	2304      	movs	r3, #4
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a56:	2302      	movs	r3, #2
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a62:	2309      	movs	r3, #9
 8003a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	484e      	ldr	r0, [pc, #312]	; (8003ba8 <_ZL12MX_GPIO_Initv+0x8e4>)
 8003a6e:	f001 ff21 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003a72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a80:	2303      	movs	r3, #3
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a84:	2309      	movs	r3, #9
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4847      	ldr	r0, [pc, #284]	; (8003bac <_ZL12MX_GPIO_Initv+0x8e8>)
 8003a90:	f001 ff10 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003a94:	2304      	movs	r3, #4
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	483e      	ldr	r0, [pc, #248]	; (8003ba0 <_ZL12MX_GPIO_Initv+0x8dc>)
 8003aa8:	f001 ff04 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003aac:	2386      	movs	r3, #134	; 0x86
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003abc:	230b      	movs	r3, #11
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4834      	ldr	r0, [pc, #208]	; (8003b98 <_ZL12MX_GPIO_Initv+0x8d4>)
 8003ac8:	f001 fef4 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003acc:	2301      	movs	r3, #1
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003adc:	4619      	mov	r1, r3
 8003ade:	482e      	ldr	r0, [pc, #184]	; (8003b98 <_ZL12MX_GPIO_Initv+0x8d4>)
 8003ae0:	f001 fee8 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003ae4:	2350      	movs	r3, #80	; 0x50
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af0:	2300      	movs	r3, #0
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003af4:	230d      	movs	r3, #13
 8003af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003afc:	4619      	mov	r1, r3
 8003afe:	4826      	ldr	r0, [pc, #152]	; (8003b98 <_ZL12MX_GPIO_Initv+0x8d4>)
 8003b00:	f001 fed8 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003b04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b0a:	2312      	movs	r3, #18
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b12:	2303      	movs	r3, #3
 8003b14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b16:	2304      	movs	r3, #4
 8003b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b1e:	4619      	mov	r1, r3
 8003b20:	481b      	ldr	r0, [pc, #108]	; (8003b90 <_ZL12MX_GPIO_Initv+0x8cc>)
 8003b22:	f001 fec7 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003b26:	2328      	movs	r3, #40	; 0x28
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b32:	2303      	movs	r3, #3
 8003b34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003b36:	230a      	movs	r3, #10
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4815      	ldr	r0, [pc, #84]	; (8003b98 <_ZL12MX_GPIO_Initv+0x8d4>)
 8003b42:	f001 feb7 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b52:	2300      	movs	r3, #0
 8003b54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003b56:	2309      	movs	r3, #9
 8003b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b5e:	4619      	mov	r1, r3
 8003b60:	480b      	ldr	r0, [pc, #44]	; (8003b90 <_ZL12MX_GPIO_Initv+0x8cc>)
 8003b62:	f001 fea7 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003b66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b74:	2300      	movs	r3, #0
 8003b76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b78:	2305      	movs	r3, #5
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b80:	4619      	mov	r1, r3
 8003b82:	4809      	ldr	r0, [pc, #36]	; (8003ba8 <_ZL12MX_GPIO_Initv+0x8e4>)
 8003b84:	f001 fe96 	bl	80058b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b88:	bf00      	nop
 8003b8a:	3740      	adds	r7, #64	; 0x40
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021c00 	.word	0x40021c00
 8003b94:	40022000 	.word	0x40022000
 8003b98:	40020000 	.word	0x40020000
 8003b9c:	40020800 	.word	0x40020800
 8003ba0:	40021800 	.word	0x40021800
 8003ba4:	40021400 	.word	0x40021400
 8003ba8:	40020400 	.word	0x40020400
 8003bac:	40020c00 	.word	0x40020c00

08003bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb4:	b672      	cpsid	i
}
 8003bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <Error_Handler+0x8>

08003bba <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8003bba:	b5b0      	push	{r4, r5, r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	ed87 0a01 	vstr	s0, [r7, #4]
 8003bc4:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fc fcde 	bl	8000588 <__aeabi_f2d>
 8003bcc:	4604      	mov	r4, r0
 8003bce:	460d      	mov	r5, r1
 8003bd0:	6838      	ldr	r0, [r7, #0]
 8003bd2:	f7fc fcc7 	bl	8000564 <__aeabi_i2d>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	ec43 2b11 	vmov	d1, r2, r3
 8003bde:	ec45 4b10 	vmov	d0, r4, r5
 8003be2:	f006 fea7 	bl	800a934 <pow>
 8003be6:	eeb0 7a40 	vmov.f32	s14, s0
 8003bea:	eef0 7a60 	vmov.f32	s15, s1
    }
 8003bee:	eeb0 0a47 	vmov.f32	s0, s14
 8003bf2:	eef0 0a67 	vmov.f32	s1, s15
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bdb0      	pop	{r4, r5, r7, pc}

08003bfc <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fad9 	bl	80041c6 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
	unique_ptr(pointer __p,
 8003c1e:	b590      	push	{r4, r7, lr}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8003c2a:	68fc      	ldr	r4, [r7, #12]
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fabf 	bl	80041b0 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8003c32:	4603      	mov	r3, r0
 8003c34:	461a      	mov	r2, r3
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f7ff ffdf 	bl	8003bfc <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}

08003c48 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
      ~unique_ptr() noexcept
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 facd 	bl	80041f2 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8003c58:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fad2 	bl	800420c <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	681c      	ldr	r4, [r3, #0]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f97b 	bl	8003f68 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8003c72:	4603      	mov	r3, r0
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	47a0      	blx	r4
	__ptr = pointer();
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
      }
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd90      	pop	{r4, r7, pc}

08003c8a <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	ed93 7a00 	vldr	s14, [r3]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	edd3 7a00 	vldr	s15, [r3]
 8003ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca8:	d501      	bpl.n	8003cae <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	e000      	b.n	8003cb0 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8003cae:	687b      	ldr	r3, [r7, #4]
    }
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_ZNKSt8functionIFijjPfEEclEjjS0_>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8003cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
      {
	if (_M_empty())
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd fa33 	bl	800113a <_ZNKSt14_Function_base8_M_emptyEv>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	  __throw_bad_function_call();
 8003cda:	f006 fe1e 	bl	800a91a <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68dc      	ldr	r4, [r3, #12]
 8003ce2:	68fd      	ldr	r5, [r7, #12]
 8003ce4:	f107 0308 	add.w	r3, r7, #8
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fa9c 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003cee:	4606      	mov	r6, r0
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fa97 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003cf8:	4680      	mov	r8, r0
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fa9d 	bl	800423c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4642      	mov	r2, r8
 8003d06:	4631      	mov	r1, r6
 8003d08:	4628      	mov	r0, r5
 8003d0a:	47a0      	blx	r4
 8003d0c:	4603      	mov	r3, r0
      }
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d18 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	461a      	mov	r2, r3
 8003d24:	2300      	movs	r3, #0
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	6053      	str	r3, [r2, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	6053      	str	r3, [r2, #4]
 8003d50:	6093      	str	r3, [r2, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ffdf 	bl	8003d18 <_ZNSt14_Function_baseC1Ev>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	60da      	str	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b086      	sub	sp, #24
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003d74:	6838      	ldr	r0, [r7, #0]
 8003d76:	f000 fa6c 	bl	8004252 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	f107 0308 	add.w	r3, r7, #8
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fa70 	bl	8004268 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>
 8003d88:	f107 0308 	add.w	r3, r7, #8
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f9ed 	bl	800416e <_ZNSt8functionIFijjPfEE4swapERS2_>
 8003d94:	f107 0308 	add.w	r3, r7, #8
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fd fbb0 	bl	80014fe <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8003d9e:	687b      	ldr	r3, [r7, #4]
	}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	f000 fa8a 	bl	80042cc <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8003db8:	4602      	mov	r2, r0
 8003dba:	f107 0308 	add.w	r3, r7, #8
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fa8f 	bl	80042e4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f9ce 	bl	800416e <_ZNSt8functionIFijjPfEE4swapERS2_>
 8003dd2:	f107 0308 	add.w	r3, r7, #8
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fd fb91 	bl	80014fe <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8003ddc:	687b      	ldr	r3, [r7, #4]
	}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 faa4 	bl	8004344 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6839      	ldr	r1, [r7, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ffe6 	bl	8003de6 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>
        { }
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fa9c 	bl	800436c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 8003e34:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 faa1 	bl	8004386 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f000 faa7 	bl	80043a0 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>
	__ptr = pointer();
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
      }
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>:
	return get()[__i];
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 faa6 	bl	80043be <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 faa4 	bl	80043da <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6839      	ldr	r1, [r7, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ffe6 	bl	8003e7c <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003eba:	b590      	push	{r4, r7, lr}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fa9c 	bl	8004402 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 8003eca:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00c      	beq.n	8003eee <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 faa1 	bl	800441c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>
 8003eda:	4604      	mov	r4, r0
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 faaa 	bl	8004436 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f000 faaf 	bl	800444c <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
	__ptr = pointer();
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
      }
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}

08003efe <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fab2 	bl	8004472 <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	da01      	bge.n	8003f32 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	e000      	b.n	8003f34 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8003f32:	687b      	ldr	r3, [r7, #4]
    }
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	da01      	bge.n	8003f5a <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	e000      	b.n	8003f5c <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8003f5a:	687b      	ldr	r3, [r7, #4]
    }
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 8003f7e:	b480      	push	{r7}
 8003f80:	b087      	sub	sp, #28
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6178      	str	r0, [r7, #20]
 8003f86:	6139      	str	r1, [r7, #16]
 8003f88:	60fa      	str	r2, [r7, #12]
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f90:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003f94:	f06f 0314 	mvn.w	r3, #20
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6178      	str	r0, [r7, #20]
 8003fac:	6139      	str	r1, [r7, #16]
 8003fae:	60fa      	str	r2, [r7, #12]
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003fb6:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003fba:	f06f 0314 	mvn.w	r3, #20
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 8003fca:	b480      	push	{r7}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6178      	str	r0, [r7, #20]
 8003fd2:	6139      	str	r1, [r7, #16]
 8003fd4:	60fa      	str	r2, [r7, #12]
 8003fd6:	ed87 0a02 	vstr	s0, [r7, #8]
 8003fda:	edc7 0a01 	vstr	s1, [r7, #4]
 8003fde:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003fe0:	f06f 0314 	mvn.w	r3, #20
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6178      	str	r0, [r7, #20]
 8003ff8:	6139      	str	r1, [r7, #16]
 8003ffa:	60fa      	str	r2, [r7, #12]
 8003ffc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004000:	edc7 0a01 	vstr	s1, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004006:	f06f 0314 	mvn.w	r3, #20
}
 800400a:	4618      	mov	r0, r3
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 8004016:	b480      	push	{r7}
 8004018:	b087      	sub	sp, #28
 800401a:	af00      	add	r7, sp, #0
 800401c:	6178      	str	r0, [r7, #20]
 800401e:	6139      	str	r1, [r7, #16]
 8004020:	60fa      	str	r2, [r7, #12]
 8004022:	ed87 0a02 	vstr	s0, [r7, #8]
 8004026:	edc7 0a01 	vstr	s1, [r7, #4]
 800402a:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800402c:	f06f 0314 	mvn.w	r3, #20
}
 8004030:	4618      	mov	r0, r3
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6178      	str	r0, [r7, #20]
 8004044:	6139      	str	r1, [r7, #16]
 8004046:	60fa      	str	r2, [r7, #12]
 8004048:	ed87 0a02 	vstr	s0, [r7, #8]
 800404c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004052:	f06f 0314 	mvn.w	r3, #20
}
 8004056:	4618      	mov	r0, r3
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:

/**
 * Fill the result structure from a quantized output tensor
*/
template<typename T>
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 8004062:	b480      	push	{r7}
 8004064:	b087      	sub	sp, #28
 8004066:	af00      	add	r7, sp, #0
 8004068:	6178      	str	r0, [r7, #20]
 800406a:	6139      	str	r1, [r7, #16]
 800406c:	60fa      	str	r2, [r7, #12]
 800406e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004072:	edc7 0a01 	vstr	s1, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
                                                                                      size_t output_features_count,
                                                                                      bool debug = false) {
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, zero_point, scale, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004078:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 800407c:	4618      	mov	r0, r3
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6178      	str	r0, [r7, #20]
 8004090:	6139      	str	r1, [r7, #16]
 8004092:	60fa      	str	r2, [r7, #12]
 8004094:	ed87 0a02 	vstr	s0, [r7, #8]
 8004098:	edc7 0a01 	vstr	s1, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800409e:	f06f 0314 	mvn.w	r3, #20
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f9e8 	bl	800448e <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80040be:	4603      	mov	r3, r0
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f9e9 	bl	80044aa <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ffeb 	bl	80040c8 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff ffeb 	bl	80040e2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
	: _M_t()
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff ffe8 	bl	80040fc <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>
	{ }
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8004140:	6838      	ldr	r0, [r7, #0]
 8004142:	f000 f9e2 	bl	800450a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>
 8004146:	4603      	mov	r3, r0
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f9bd 	bl	80044ca <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8004150:	6838      	ldr	r0, [r7, #0]
 8004152:	f000 f9ef 	bl	8004534 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 8004156:	4603      	mov	r3, r0
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f9f8 	bl	800454e <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9e8 	bl	8004534 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
	return *this;
 8004164:	687b      	ldr	r3, [r7, #4]
      }
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f9fb 	bl	800457a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f103 0208 	add.w	r2, r3, #8
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f000 fa24 	bl	80045de <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f103 020c 	add.w	r2, r3, #12
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f000 fa45 	bl	8004632 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80041c6:	b590      	push	{r4, r7, lr}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80041d2:	68fc      	ldr	r4, [r7, #12]
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fa4b 	bl	8004670 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80041da:	4602      	mov	r2, r0
 80041dc:	f107 0308 	add.w	r3, r7, #8
 80041e0:	4619      	mov	r1, r3
 80041e2:	4620      	mov	r0, r4
 80041e4:	f000 fa4f 	bl	8004686 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd90      	pop	{r4, r7, pc}

080041f2 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fa5b 	bl	80046b8 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8004202:	4603      	mov	r3, r0
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fa5b 	bl	80046d2 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800421c:	4603      	mov	r3, r0
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>:
	function(_Functor&& __f)
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	461a      	mov	r2, r3
 8004276:	2300      	movs	r3, #0
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	6053      	str	r3, [r2, #4]
 800427c:	6093      	str	r3, [r2, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fd49 	bl	8003d18 <_ZNSt14_Function_baseC1Ev>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fa2b 	bl	80046ec <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00e      	beq.n	80042ba <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 800429c:	687c      	ldr	r4, [r7, #4]
 800429e:	6838      	ldr	r0, [r7, #0]
 80042a0:	f7ff ffd7 	bl	8004252 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 80042a4:	4603      	mov	r3, r0
 80042a6:	4619      	mov	r1, r3
 80042a8:	4620      	mov	r0, r4
 80042aa:	f000 fa2f 	bl	800470c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x5c>)
 80042b2:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x60>)
 80042b8:	609a      	str	r2, [r3, #8]
	}
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}
 80042c4:	08004731 	.word	0x08004731
 80042c8:	08004773 	.word	0x08004773

080042cc <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	461a      	mov	r2, r3
 80042f2:	2300      	movs	r3, #0
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	6053      	str	r3, [r2, #4]
 80042f8:	6093      	str	r3, [r2, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fd0b 	bl	8003d18 <_ZNSt14_Function_baseC1Ev>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8004308:	6838      	ldr	r0, [r7, #0]
 800430a:	f000 fa51 	bl	80047b0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00e      	beq.n	8004332 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8004314:	687c      	ldr	r4, [r7, #4]
 8004316:	6838      	ldr	r0, [r7, #0]
 8004318:	f7ff ffd8 	bl	80042cc <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800431c:	4603      	mov	r3, r0
 800431e:	4619      	mov	r1, r3
 8004320:	4620      	mov	r0, r4
 8004322:	f000 fa50 	bl	80047c6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x58>)
 800432a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a04      	ldr	r2, [pc, #16]	; (8004340 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x5c>)
 8004330:	609a      	str	r2, [r3, #8]
	}
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	bd90      	pop	{r4, r7, pc}
 800433c:	080047eb 	.word	0x080047eb
 8004340:	0800482d 	.word	0x0800482d

08004344 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fa8a 	bl	800486a <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f808 	bl	800436c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800435c:	4602      	mov	r2, r0
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fa84 	bl	8004884 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800437c:	4603      	mov	r3, r0
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fa84 	bl	800489e <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>
 8004396:	4603      	mov	r3, r0
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>:
	operator()(_Up* __ptr) const
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_+0x16>
 80043b0:	6838      	ldr	r0, [r7, #0]
 80043b2:	f006 fa9b 	bl	800a8ec <_ZdaPv>
	}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fa75 	bl	80048b8 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80043ce:	4603      	mov	r3, r0
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fe6e 	bl	80040c8 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f808 	bl	8004402 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80043f2:	4602      	mov	r2, r0
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fa60 	bl	80048d2 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8004412:	4603      	mov	r3, r0
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f884 	bl	8004534 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800442c:	4603      	mov	r3, r0
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004456:	683c      	ldr	r4, [r7, #0]
 8004458:	2c00      	cmp	r4, #0
 800445a:	d006      	beq.n	800446a <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_+0x1e>
 800445c:	4620      	mov	r0, r4
 800445e:	f7fc ff0e 	bl	800127e <_ZN2ei9ei_matrixD1Ev>
 8004462:	2110      	movs	r1, #16
 8004464:	4620      	mov	r0, r4
 8004466:	f006 fa3f 	bl	800a8e8 <_ZdlPvj>
      }
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bd90      	pop	{r4, r7, pc}

08004472 <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fa35 	bl	80048ec <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8004482:	4603      	mov	r3, r0
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fa34 	bl	8004906 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 800449e:	4603      	mov	r3, r0
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa34 	bl	8004920 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fa3c 	bl	8004938 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>:
      void reset(pointer __p) noexcept
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ff94 	bl	8004402 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80044da:	4603      	mov	r3, r0
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ff8e 	bl	8004402 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80044e6:	4602      	mov	r2, r0
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_+0x38>
	  _M_deleter()(__old_p);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f81e 	bl	8004534 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 80044f8:	4603      	mov	r3, r0
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ffa5 	bl	800444c <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
      }
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>:
      pointer release() noexcept
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ff75 	bl	8004402 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 8004518:	4603      	mov	r3, r0
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ff6f 	bl	8004402 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 8004524:	4603      	mov	r3, r0
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
	return __p;
 800452a:	68fb      	ldr	r3, [r7, #12]
      }
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fa08 	bl	8004954 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8004544:	4603      	mov	r3, r0
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ffed 	bl	8004564 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800458a:	4602      	mov	r2, r0
 800458c:	f107 0308 	add.w	r3, r7, #8
 8004590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004594:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8004598:	6838      	ldr	r0, [r7, #0]
 800459a:	f7ff ffe3 	bl	8004564 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800459e:	4602      	mov	r2, r0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045a6:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80045aa:	f107 0308 	add.w	r3, r7, #8
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ffd8 	bl	8004564 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80045b4:	4602      	mov	r2, r0
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045bc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff ffed 	bl	80045c8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80045ee:	4603      	mov	r3, r0
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80045f4:	6838      	ldr	r0, [r7, #0]
 80045f6:	f7ff ffe7 	bl	80045c8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80045fa:	4603      	mov	r3, r0
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004602:	f107 030c 	add.w	r3, r7, #12
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff ffde 	bl	80045c8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800460c:	4603      	mov	r3, r0
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	601a      	str	r2, [r3, #0]
    }
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ffed 	bl	800461c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8004642:	4603      	mov	r3, r0
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	f7ff ffe7 	bl	800461c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800464e:	4603      	mov	r3, r0
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff ffde 	bl	800461c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8004660:	4603      	mov	r3, r0
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	601a      	str	r2, [r3, #0]
    }
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8004686:	b5b0      	push	{r4, r5, r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004692:	68fc      	ldr	r4, [r7, #12]
 8004694:	68b8      	ldr	r0, [r7, #8]
 8004696:	f000 f969 	bl	800496c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800469a:	4605      	mov	r5, r0
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ffe7 	bl	8004670 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80046a2:	4603      	mov	r3, r0
 80046a4:	461a      	mov	r2, r3
 80046a6:	4629      	mov	r1, r5
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 f96a 	bl	8004982 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bdb0      	pop	{r4, r5, r7, pc}

080046b8 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f97b 	bl	80049be <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f97a 	bl	80049d6 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bf14      	ite	ne
 80046fa:	2301      	movne	r3, #1
 80046fc:	2300      	moveq	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004716:	6838      	ldr	r0, [r7, #0]
 8004718:	f7ff fd9b 	bl	8004252 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800471c:	4603      	mov	r3, r0
 800471e:	4622      	mov	r2, r4
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f964 	bl	80049f0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bd90      	pop	{r4, r7, pc}

08004730 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f96f 	bl	8004a22 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004744:	4604      	mov	r4, r0
 8004746:	68b8      	ldr	r0, [r7, #8]
 8004748:	f7ff fd6d 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800474c:	4605      	mov	r5, r0
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fd69 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004754:	4606      	mov	r6, r0
 8004756:	6838      	ldr	r0, [r7, #0]
 8004758:	f7ff fd70 	bl	800423c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800475c:	4603      	mov	r3, r0
 800475e:	4632      	mov	r2, r6
 8004760:	4629      	mov	r1, r5
 8004762:	4620      	mov	r0, r4
 8004764:	f000 f96e 	bl	8004a44 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8004768:	4603      	mov	r3, r0
      }
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004772 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8004772:	b590      	push	{r4, r7, lr}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d109      	bne.n	800479a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f981 	bl	8004a8e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800478c:	4604      	mov	r4, r0
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f000 f947 	bl	8004a22 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004794:	4603      	mov	r3, r0
 8004796:	6023      	str	r3, [r4, #0]
	    break;
 8004798:	e005      	b.n	80047a6 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	461a      	mov	r2, r3
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f981 	bl	8004aa8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80047a6:	2300      	movs	r3, #0
      }
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}

080047b0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	  { return true; }
 80047b8:	2301      	movs	r3, #1
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80047c6:	b590      	push	{r4, r7, lr}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80047d0:	6838      	ldr	r0, [r7, #0]
 80047d2:	f7ff fd7b 	bl	80042cc <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 80047d6:	4603      	mov	r3, r0
 80047d8:	4622      	mov	r2, r4
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f99d 	bl	8004b1c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd90      	pop	{r4, r7, pc}

080047ea <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80047ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f9a8 	bl	8004b4e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80047fe:	4604      	mov	r4, r0
 8004800:	68b8      	ldr	r0, [r7, #8]
 8004802:	f7ff fd10 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004806:	4605      	mov	r5, r0
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff fd0c 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800480e:	4606      	mov	r6, r0
 8004810:	6838      	ldr	r0, [r7, #0]
 8004812:	f7ff fd13 	bl	800423c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004816:	4603      	mov	r3, r0
 8004818:	4632      	mov	r2, r6
 800481a:	4629      	mov	r1, r5
 800481c:	4620      	mov	r0, r4
 800481e:	f000 f9a7 	bl	8004b70 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8004822:	4603      	mov	r3, r0
      }
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800482c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d109      	bne.n	8004854 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f9ba 	bl	8004bba <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8004846:	4604      	mov	r4, r0
 8004848:	68b8      	ldr	r0, [r7, #8]
 800484a:	f000 f980 	bl	8004b4e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800484e:	4603      	mov	r3, r0
 8004850:	6023      	str	r3, [r4, #0]
	    break;
 8004852:	e005      	b.n	8004860 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	461a      	mov	r2, r3
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f9ba 	bl	8004bd4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8004860:	2300      	movs	r3, #0
      }
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bd90      	pop	{r4, r7, pc}

0800486a <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f9e7 	bl	8004c48 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f9ea 	bl	8004c68 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8004894:	4603      	mov	r3, r0
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>:
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 f9e9 	bl	8004c80 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f9e8 	bl	8004c98 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80048c8:	4603      	mov	r3, r0
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f9e7 	bl	8004cb0 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f9e6 	bl	8004cc8 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f9e5 	bl	8004ce0 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004916:	4603      	mov	r3, r0
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>:
      _Tuple_impl()
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f9e5 	bl	8004cf8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>:
      constexpr _Head_base()
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f9d6 	bl	8004d0e <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004962:	4603      	mov	r3, r0
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004982:	b590      	push	{r4, r7, lr}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800498e:	68fc      	ldr	r4, [r7, #12]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff fe6d 	bl	8004670 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004996:	4603      	mov	r3, r0
 8004998:	4619      	mov	r1, r3
 800499a:	4620      	mov	r0, r4
 800499c:	f000 f9cf 	bl	8004d3e <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1d1c      	adds	r4, r3, #4
 80049a4:	68b8      	ldr	r0, [r7, #8]
 80049a6:	f7ff ffe1 	bl	800496c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4619      	mov	r1, r3
 80049ae:	4620      	mov	r0, r4
 80049b0:	f000 f9d8 	bl	8004d64 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
	{ }
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd90      	pop	{r4, r7, pc}

080049be <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9dd 	bl	8004d86 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 80049cc:	4603      	mov	r3, r0
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f9de 	bl	8004da2 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80049fc:	68b8      	ldr	r0, [r7, #8]
 80049fe:	f7ff fc28 	bl	8004252 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004a02:	4603      	mov	r3, r0
 8004a04:	681c      	ldr	r4, [r3, #0]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7fc fb6e 	bl	80010e8 <_ZNSt9_Any_data9_M_accessEv>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4619      	mov	r1, r3
 8004a10:	2004      	movs	r0, #4
 8004a12:	f7fc fb5d 	bl	80010d0 <_ZnwjPv>
 8004a16:	4603      	mov	r3, r0
 8004a18:	601c      	str	r4, [r3, #0]
	  }
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd90      	pop	{r4, r7, pc}

08004a22 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9c5 	bl	8004dba <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004a30:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f9cd 	bl	8004dd2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	bf00      	nop
	}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a48:	b086      	sub	sp, #24
 8004a4a:	af02      	add	r7, sp, #8
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f9c7 	bl	8004de8 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	68b8      	ldr	r0, [r7, #8]
 8004a5e:	f7ff fbe2 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a62:	4605      	mov	r5, r0
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fbde 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	6838      	ldr	r0, [r7, #0]
 8004a6e:	f7ff fbe5 	bl	800423c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004a72:	4603      	mov	r3, r0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	4633      	mov	r3, r6
 8004a78:	462a      	mov	r2, r5
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	f000 f9be 	bl	8004dfe <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8004a82:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a8e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc fb26 	bl	80010e8 <_ZNSt9_Any_data9_M_accessEv>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d82a      	bhi.n	8004b12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 8004abc:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 8004abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac2:	bf00      	nop
 8004ac4:	08004ad5 	.word	0x08004ad5
 8004ac8:	08004ae3 	.word	0x08004ae3
 8004acc:	08004af7 	.word	0x08004af7
 8004ad0:	08004b09 	.word	0x08004b09
	      __dest._M_access<const type_info*>() = nullptr;
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f926 	bl	8004d26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
	      break;
 8004ae0:	e017      	b.n	8004b12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff ffd3 	bl	8004a8e <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8004ae8:	4604      	mov	r4, r0
 8004aea:	68b8      	ldr	r0, [r7, #8]
 8004aec:	f7ff ff99 	bl	8004a22 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004af0:	4603      	mov	r3, r0
 8004af2:	6023      	str	r3, [r4, #0]
	      break;
 8004af4:	e00d      	b.n	8004b12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8004af6:	68b8      	ldr	r0, [r7, #8]
 8004af8:	f7ff ff93 	bl	8004a22 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004afc:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8004afe:	4619      	mov	r1, r3
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f9a0 	bl	8004e46 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 8004b06:	e004      	b.n	8004b12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8004b08:	4621      	mov	r1, r4
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f9ad 	bl	8004e6a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004b10:	bf00      	nop
	  return false;
 8004b12:	2300      	movs	r3, #0
	}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd90      	pop	{r4, r7, pc}

08004b1c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8004b28:	68b8      	ldr	r0, [r7, #8]
 8004b2a:	f7ff fbcf 	bl	80042cc <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8004b2e:	4604      	mov	r4, r0
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7fc fad9 	bl	80010e8 <_ZNSt9_Any_data9_M_accessEv>
 8004b36:	4603      	mov	r3, r0
 8004b38:	4619      	mov	r1, r3
 8004b3a:	2004      	movs	r0, #4
 8004b3c:	f7fc fac8 	bl	80010d0 <_ZnwjPv>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	6013      	str	r3, [r2, #0]
	  }
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd90      	pop	{r4, r7, pc}

08004b4e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f993 	bl	8004e82 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004b5c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f99b 	bl	8004e9a <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8004b64:	4603      	mov	r3, r0
 8004b66:	bf00      	nop
	}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af02      	add	r7, sp, #8
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f995 	bl	8004eb0 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004b86:	4604      	mov	r4, r0
 8004b88:	68b8      	ldr	r0, [r7, #8]
 8004b8a:	f7ff fb4c 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004b8e:	4605      	mov	r5, r0
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fb48 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004b96:	4606      	mov	r6, r0
 8004b98:	6838      	ldr	r0, [r7, #0]
 8004b9a:	f7ff fb4f 	bl	800423c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	4633      	mov	r3, r6
 8004ba4:	462a      	mov	r2, r5
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	4640      	mov	r0, r8
 8004baa:	f000 f98c 	bl	8004ec6 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8004bae:	4603      	mov	r3, r0
    }
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bba <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fa90 	bl	80010e8 <_ZNSt9_Any_data9_M_accessEv>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d82a      	bhi.n	8004c3e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 8004be8:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 8004bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	08004c0f 	.word	0x08004c0f
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c35 	.word	0x08004c35
	      __dest._M_access<const type_info*>() = nullptr;
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f890 	bl	8004d26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
	      break;
 8004c0c:	e017      	b.n	8004c3e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff ffd3 	bl	8004bba <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8004c14:	4604      	mov	r4, r0
 8004c16:	68b8      	ldr	r0, [r7, #8]
 8004c18:	f7ff ff99 	bl	8004b4e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	6023      	str	r3, [r4, #0]
	      break;
 8004c20:	e00d      	b.n	8004c3e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8004c22:	68b8      	ldr	r0, [r7, #8]
 8004c24:	f7ff ff93 	bl	8004b4e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004c28:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f96e 	bl	8004f0e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 8004c32:	e004      	b.n	8004c3e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8004c34:	4621      	mov	r1, r4
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f97b 	bl	8004f32 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004c3c:	bf00      	nop
	  return false;
 8004c3e:	2300      	movs	r3, #0
	}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd90      	pop	{r4, r7, pc}

08004c48 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f97a 	bl	8004f4a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f982 	bl	8004f62 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f984 	bl	8004f7e <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f985 	bl	8004f98 <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f985 	bl	8004fb0 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f986 	bl	8004fca <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f987 	bl	8004fe4 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f988 	bl	8004ffe <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>:
      constexpr _Head_base()
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f97f 	bl	800501a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc f9da 	bl	80010e8 <_ZNSt9_Any_data9_M_accessEv>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8004d3e:	b590      	push	{r4, r7, lr}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8004d48:	687c      	ldr	r4, [r7, #4]
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f7ff fc90 	bl	8004670 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d50:	4603      	mov	r3, r0
 8004d52:	4619      	mov	r1, r3
 8004d54:	4620      	mov	r0, r4
 8004d56:	f000 f96c 	bl	8005032 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
	{ }
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}

08004d64 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004d6e:	6838      	ldr	r0, [r7, #0]
 8004d70:	f7ff fdfc 	bl	800496c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004d74:	4603      	mov	r3, r0
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f95e 	bl	8005054 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f95d 	bl	800506a <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8004db0:	4603      	mov	r3, r0
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fc f99b 	bl	80010fe <_ZNKSt9_Any_data9_M_accessEv>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	7338      	strb	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004e0c:	68b8      	ldr	r0, [r7, #8]
 8004e0e:	f7ff ffeb 	bl	8004de8 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e12:	4603      	mov	r3, r0
 8004e14:	681c      	ldr	r4, [r3, #0]
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff fa05 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	681d      	ldr	r5, [r3, #0]
 8004e20:	6838      	ldr	r0, [r7, #0]
 8004e22:	f7ff fa00 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e26:	4603      	mov	r3, r0
 8004e28:	681e      	ldr	r6, [r3, #0]
 8004e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e2c:	f7ff fa06 	bl	800423c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004e30:	4603      	mov	r3, r0
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47a0      	blx	r4
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e46 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004e46:	b590      	push	{r4, r7, lr}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004e50:	6838      	ldr	r0, [r7, #0]
 8004e52:	f000 f917 	bl	8005084 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4622      	mov	r2, r4
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f91c 	bl	800509a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}

08004e6a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f929 	bl	80050cc <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fc f937 	bl	80010fe <_ZNKSt9_Any_data9_M_accessEv>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	7338      	strb	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004ed4:	68b8      	ldr	r0, [r7, #8]
 8004ed6:	f7ff ffeb 	bl	8004eb0 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004eda:	4606      	mov	r6, r0
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff f9a2 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	681c      	ldr	r4, [r3, #0]
 8004ee6:	6838      	ldr	r0, [r7, #0]
 8004ee8:	f7ff f99d 	bl	8004226 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004eec:	4603      	mov	r3, r0
 8004eee:	681d      	ldr	r5, [r3, #0]
 8004ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef2:	f7ff f9a3 	bl	800423c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	462a      	mov	r2, r5
 8004efc:	4621      	mov	r1, r4
 8004efe:	4630      	mov	r0, r6
 8004f00:	f7fc fb7b 	bl	80015fa <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f0e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004f0e:	b590      	push	{r4, r7, lr}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004f18:	6838      	ldr	r0, [r7, #0]
 8004f1a:	f000 f8e3 	bl	80050e4 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4622      	mov	r2, r4
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8e8 	bl	80050fa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd90      	pop	{r4, r7, pc}

08004f32 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f8f5 	bl	800512c <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>:
      _Tuple_impl()
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f8f6 	bl	8005144 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>:
      constexpr _Head_base()
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f8e6 	bl	800515a <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8e5 	bl	8005170 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f8e4 	bl	8005188 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f8e2 	bl	800519e <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f8e0 	bl	80051b4 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f8dd 	bl	80051ca <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8005010:	4603      	mov	r3, r0
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f8dc 	bl	80051e0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>
 8005028:	4603      	mov	r3, r0
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800503c:	6838      	ldr	r0, [r7, #0]
 800503e:	f7ff fb17 	bl	8004670 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005042:	4603      	mov	r3, r0
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 f8be 	bl	80051f6 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800507a:	4603      	mov	r3, r0
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800509a:	b590      	push	{r4, r7, lr}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80050a6:	68b8      	ldr	r0, [r7, #8]
 80050a8:	f7ff ffec 	bl	8005084 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 80050ac:	4603      	mov	r3, r0
 80050ae:	681c      	ldr	r4, [r3, #0]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7fc f819 	bl	80010e8 <_ZNSt9_Any_data9_M_accessEv>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4619      	mov	r1, r3
 80050ba:	2004      	movs	r0, #4
 80050bc:	f7fc f808 	bl	80010d0 <_ZnwjPv>
 80050c0:	4603      	mov	r3, r0
 80050c2:	601c      	str	r4, [r3, #0]
	  }
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd90      	pop	{r4, r7, pc}

080050cc <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fc f807 	bl	80010e8 <_ZNSt9_Any_data9_M_accessEv>
 80050da:	4603      	mov	r3, r0
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80050fa:	b590      	push	{r4, r7, lr}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f7ff ffec 	bl	80050e4 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800510c:	4604      	mov	r4, r0
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7fb ffea 	bl	80010e8 <_ZNSt9_Any_data9_M_accessEv>
 8005114:	4603      	mov	r3, r0
 8005116:	4619      	mov	r1, r3
 8005118:	2004      	movs	r0, #4
 800511a:	f7fb ffd9 	bl	80010d0 <_ZnwjPv>
 800511e:	4602      	mov	r2, r0
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	6013      	str	r3, [r2, #0]
	  }
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	bd90      	pop	{r4, r7, pc}

0800512c <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fb ffd7 	bl	80010e8 <_ZNSt9_Any_data9_M_accessEv>
 800513a:	4603      	mov	r3, r0
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>:
      constexpr _Head_base()
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f847 	bl	800520c <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>
 800517e:	4603      	mov	r3, r0
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d108      	bne.n	8005246 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800523a:	4293      	cmp	r3, r2
 800523c:	d103      	bne.n	8005246 <_Z41__static_initialization_and_destruction_0ii+0x22>
    .calibration = ei_calibration,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};

ei_impulse_handle_t impulse_handle_365745_0 = ei_impulse_handle_t( &impulse_365745_0 );
 800523e:	4909      	ldr	r1, [pc, #36]	; (8005264 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005240:	4809      	ldr	r0, [pc, #36]	; (8005268 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005242:	f7fc f94a 	bl	80014da <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d107      	bne.n	800525c <_Z41__static_initialization_and_destruction_0ii+0x38>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005252:	4293      	cmp	r3, r2
 8005254:	d102      	bne.n	800525c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005256:	4804      	ldr	r0, [pc, #16]	; (8005268 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005258:	f7fc fa67 	bl	800172a <_ZN19ei_impulse_handle_tD1Ev>
 800525c:	bf00      	nop
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	0801140c 	.word	0x0801140c
 8005268:	200006e4 	.word	0x200006e4

0800526c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
 8005270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005274:	2001      	movs	r0, #1
 8005276:	f7ff ffd5 	bl	8005224 <_Z41__static_initialization_and_destruction_0ii>
 800527a:	bd80      	pop	{r7, pc}

0800527c <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
 8005280:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005284:	2000      	movs	r0, #0
 8005286:	f7ff ffcd 	bl	8005224 <_Z41__static_initialization_and_destruction_0ii>
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005292:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <HAL_MspInit+0x44>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <HAL_MspInit+0x44>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	; 0x40
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <HAL_MspInit+0x44>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	607b      	str	r3, [r7, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052aa:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <HAL_MspInit+0x44>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	4a08      	ldr	r2, [pc, #32]	; (80052d0 <HAL_MspInit+0x44>)
 80052b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b4:	6453      	str	r3, [r2, #68]	; 0x44
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_MspInit+0x44>)
 80052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800

080052d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b0ac      	sub	sp, #176	; 0xb0
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	605a      	str	r2, [r3, #4]
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	60da      	str	r2, [r3, #12]
 80052ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052ec:	f107 0318 	add.w	r3, r7, #24
 80052f0:	2284      	movs	r2, #132	; 0x84
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f007 fecd 	bl	800d094 <memset>
  if(huart->Instance==USART1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a32      	ldr	r2, [pc, #200]	; (80053c8 <HAL_UART_MspInit+0xf4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d15c      	bne.n	80053be <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005304:	2340      	movs	r3, #64	; 0x40
 8005306:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005308:	2300      	movs	r3, #0
 800530a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800530c:	f107 0318 	add.w	r3, r7, #24
 8005310:	4618      	mov	r0, r3
 8005312:	f001 f91f 	bl	8006554 <HAL_RCCEx_PeriphCLKConfig>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800531c:	f7fe fc48 	bl	8003bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005320:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <HAL_UART_MspInit+0xf8>)
 8005322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005324:	4a29      	ldr	r2, [pc, #164]	; (80053cc <HAL_UART_MspInit+0xf8>)
 8005326:	f043 0310 	orr.w	r3, r3, #16
 800532a:	6453      	str	r3, [r2, #68]	; 0x44
 800532c:	4b27      	ldr	r3, [pc, #156]	; (80053cc <HAL_UART_MspInit+0xf8>)
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005338:	4b24      	ldr	r3, [pc, #144]	; (80053cc <HAL_UART_MspInit+0xf8>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	4a23      	ldr	r2, [pc, #140]	; (80053cc <HAL_UART_MspInit+0xf8>)
 800533e:	f043 0302 	orr.w	r3, r3, #2
 8005342:	6313      	str	r3, [r2, #48]	; 0x30
 8005344:	4b21      	ldr	r3, [pc, #132]	; (80053cc <HAL_UART_MspInit+0xf8>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005350:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <HAL_UART_MspInit+0xf8>)
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <HAL_UART_MspInit+0xf8>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	6313      	str	r3, [r2, #48]	; 0x30
 800535c:	4b1b      	ldr	r3, [pc, #108]	; (80053cc <HAL_UART_MspInit+0xf8>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536e:	2302      	movs	r3, #2
 8005370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005374:	2300      	movs	r3, #0
 8005376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800537a:	2300      	movs	r3, #0
 800537c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005380:	2307      	movs	r3, #7
 8005382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005386:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800538a:	4619      	mov	r1, r3
 800538c:	4810      	ldr	r0, [pc, #64]	; (80053d0 <HAL_UART_MspInit+0xfc>)
 800538e:	f000 fa91 	bl	80058b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539a:	2302      	movs	r3, #2
 800539c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a6:	2300      	movs	r3, #0
 80053a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053ac:	2307      	movs	r3, #7
 80053ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80053b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053b6:	4619      	mov	r1, r3
 80053b8:	4806      	ldr	r0, [pc, #24]	; (80053d4 <HAL_UART_MspInit+0x100>)
 80053ba:	f000 fa7b 	bl	80058b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053be:	bf00      	nop
 80053c0:	37b0      	adds	r7, #176	; 0xb0
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40011000 	.word	0x40011000
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40020400 	.word	0x40020400
 80053d4:	40020000 	.word	0x40020000

080053d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053dc:	e7fe      	b.n	80053dc <NMI_Handler+0x4>

080053de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053de:	b480      	push	{r7}
 80053e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053e2:	e7fe      	b.n	80053e2 <HardFault_Handler+0x4>

080053e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053e8:	e7fe      	b.n	80053e8 <MemManage_Handler+0x4>

080053ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053ee:	e7fe      	b.n	80053ee <BusFault_Handler+0x4>

080053f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053f4:	e7fe      	b.n	80053f4 <UsageFault_Handler+0x4>

080053f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053f6:	b480      	push	{r7}
 80053f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053fa:	bf00      	nop
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005408:	bf00      	nop
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005412:	b480      	push	{r7}
 8005414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005416:	bf00      	nop
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005424:	f000 f940 	bl	80056a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005428:	bf00      	nop
 800542a:	bd80      	pop	{r7, pc}

0800542c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return 1;
 8005430:	2301      	movs	r3, #1
}
 8005432:	4618      	mov	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <_kill>:

int _kill(int pid, int sig)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005446:	f007 ff35 	bl	800d2b4 <__errno>
 800544a:	4603      	mov	r3, r0
 800544c:	2216      	movs	r2, #22
 800544e:	601a      	str	r2, [r3, #0]
  return -1;
 8005450:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <_exit>:

void _exit (int status)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005464:	f04f 31ff 	mov.w	r1, #4294967295
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff ffe7 	bl	800543c <_kill>
  while (1) {}    /* Make sure we hang here */
 800546e:	e7fe      	b.n	800546e <_exit+0x12>

08005470 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e00a      	b.n	8005498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005482:	f3af 8000 	nop.w
 8005486:	4601      	mov	r1, r0
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	60ba      	str	r2, [r7, #8]
 800548e:	b2ca      	uxtb	r2, r1
 8005490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	3301      	adds	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	dbf0      	blt.n	8005482 <_read+0x12>
  }

  return len;
 80054a0:	687b      	ldr	r3, [r7, #4]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b086      	sub	sp, #24
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e009      	b.n	80054d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	60ba      	str	r2, [r7, #8]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	3301      	adds	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	dbf1      	blt.n	80054bc <_write+0x12>
  }
  return len;
 80054d8:	687b      	ldr	r3, [r7, #4]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <_close>:

int _close(int file)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800550a:	605a      	str	r2, [r3, #4]
  return 0;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <_isatty>:

int _isatty(int file)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005522:	2301      	movs	r3, #1
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005554:	4a14      	ldr	r2, [pc, #80]	; (80055a8 <_sbrk+0x5c>)
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <_sbrk+0x60>)
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005560:	4b13      	ldr	r3, [pc, #76]	; (80055b0 <_sbrk+0x64>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d102      	bne.n	800556e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005568:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <_sbrk+0x64>)
 800556a:	4a12      	ldr	r2, [pc, #72]	; (80055b4 <_sbrk+0x68>)
 800556c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800556e:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <_sbrk+0x64>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d207      	bcs.n	800558c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800557c:	f007 fe9a 	bl	800d2b4 <__errno>
 8005580:	4603      	mov	r3, r0
 8005582:	220c      	movs	r2, #12
 8005584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005586:	f04f 33ff 	mov.w	r3, #4294967295
 800558a:	e009      	b.n	80055a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800558c:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <_sbrk+0x64>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <_sbrk+0x64>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	4a05      	ldr	r2, [pc, #20]	; (80055b0 <_sbrk+0x64>)
 800559c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20050000 	.word	0x20050000
 80055ac:	00000400 	.word	0x00000400
 80055b0:	2000079c 	.word	0x2000079c
 80055b4:	20000b48 	.word	0x20000b48

080055b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055bc:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <SystemInit+0x20>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <SystemInit+0x20>)
 80055c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	e000ed00 	.word	0xe000ed00

080055dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80055dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055e0:	480d      	ldr	r0, [pc, #52]	; (8005618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055e2:	490e      	ldr	r1, [pc, #56]	; (800561c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055e4:	4a0e      	ldr	r2, [pc, #56]	; (8005620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055e8:	e002      	b.n	80055f0 <LoopCopyDataInit>

080055ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ee:	3304      	adds	r3, #4

080055f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055f4:	d3f9      	bcc.n	80055ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055f6:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055f8:	4c0b      	ldr	r4, [pc, #44]	; (8005628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055fc:	e001      	b.n	8005602 <LoopFillZerobss>

080055fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005600:	3204      	adds	r2, #4

08005602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005604:	d3fb      	bcc.n	80055fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005606:	f7ff ffd7 	bl	80055b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800560a:	f007 fe59 	bl	800d2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800560e:	f7fd fce3 	bl	8002fd8 <main>
  bx  lr    
 8005612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005614:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800561c:	200006c8 	.word	0x200006c8
  ldr r2, =_sidata
 8005620:	080137fc 	.word	0x080137fc
  ldr r2, =_sbss
 8005624:	200006c8 	.word	0x200006c8
  ldr r4, =_ebss
 8005628:	20000b44 	.word	0x20000b44

0800562c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800562c:	e7fe      	b.n	800562c <ADC_IRQHandler>

0800562e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005632:	2003      	movs	r0, #3
 8005634:	f000 f90a 	bl	800584c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005638:	2000      	movs	r0, #0
 800563a:	f000 f805 	bl	8005648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800563e:	f7ff fe25 	bl	800528c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005650:	4b12      	ldr	r3, [pc, #72]	; (800569c <HAL_InitTick+0x54>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <HAL_InitTick+0x58>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	4619      	mov	r1, r3
 800565a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800565e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005662:	fbb2 f3f3 	udiv	r3, r2, r3
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f917 	bl	800589a <HAL_SYSTICK_Config>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e00e      	b.n	8005694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b0f      	cmp	r3, #15
 800567a:	d80a      	bhi.n	8005692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800567c:	2200      	movs	r2, #0
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	f04f 30ff 	mov.w	r0, #4294967295
 8005684:	f000 f8ed 	bl	8005862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005688:	4a06      	ldr	r2, [pc, #24]	; (80056a4 <HAL_InitTick+0x5c>)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	e000      	b.n	8005694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000384 	.word	0x20000384
 80056a0:	2000038c 	.word	0x2000038c
 80056a4:	20000388 	.word	0x20000388

080056a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_IncTick+0x20>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_IncTick+0x24>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4413      	add	r3, r2
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <HAL_IncTick+0x24>)
 80056ba:	6013      	str	r3, [r2, #0]
}
 80056bc:	bf00      	nop
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	2000038c 	.word	0x2000038c
 80056cc:	200007a0 	.word	0x200007a0

080056d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return uwTick;
 80056d4:	4b03      	ldr	r3, [pc, #12]	; (80056e4 <HAL_GetTick+0x14>)
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	200007a0 	.word	0x200007a0

080056e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <__NVIC_SetPriorityGrouping+0x40>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005704:	4013      	ands	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005710:	4b06      	ldr	r3, [pc, #24]	; (800572c <__NVIC_SetPriorityGrouping+0x44>)
 8005712:	4313      	orrs	r3, r2
 8005714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005716:	4a04      	ldr	r2, [pc, #16]	; (8005728 <__NVIC_SetPriorityGrouping+0x40>)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	60d3      	str	r3, [r2, #12]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	e000ed00 	.word	0xe000ed00
 800572c:	05fa0000 	.word	0x05fa0000

08005730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005734:	4b04      	ldr	r3, [pc, #16]	; (8005748 <__NVIC_GetPriorityGrouping+0x18>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	0a1b      	lsrs	r3, r3, #8
 800573a:	f003 0307 	and.w	r3, r3, #7
}
 800573e:	4618      	mov	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	e000ed00 	.word	0xe000ed00

0800574c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	6039      	str	r1, [r7, #0]
 8005756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575c:	2b00      	cmp	r3, #0
 800575e:	db0a      	blt.n	8005776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	b2da      	uxtb	r2, r3
 8005764:	490c      	ldr	r1, [pc, #48]	; (8005798 <__NVIC_SetPriority+0x4c>)
 8005766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576a:	0112      	lsls	r2, r2, #4
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	440b      	add	r3, r1
 8005770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005774:	e00a      	b.n	800578c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	4908      	ldr	r1, [pc, #32]	; (800579c <__NVIC_SetPriority+0x50>)
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	3b04      	subs	r3, #4
 8005784:	0112      	lsls	r2, r2, #4
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	440b      	add	r3, r1
 800578a:	761a      	strb	r2, [r3, #24]
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	e000e100 	.word	0xe000e100
 800579c:	e000ed00 	.word	0xe000ed00

080057a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b089      	sub	sp, #36	; 0x24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f1c3 0307 	rsb	r3, r3, #7
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	bf28      	it	cs
 80057be:	2304      	movcs	r3, #4
 80057c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3304      	adds	r3, #4
 80057c6:	2b06      	cmp	r3, #6
 80057c8:	d902      	bls.n	80057d0 <NVIC_EncodePriority+0x30>
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	3b03      	subs	r3, #3
 80057ce:	e000      	b.n	80057d2 <NVIC_EncodePriority+0x32>
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d4:	f04f 32ff 	mov.w	r2, #4294967295
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	43da      	mvns	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	401a      	ands	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e8:	f04f 31ff 	mov.w	r1, #4294967295
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	43d9      	mvns	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f8:	4313      	orrs	r3, r2
         );
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3724      	adds	r7, #36	; 0x24
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3b01      	subs	r3, #1
 8005814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005818:	d301      	bcc.n	800581e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800581a:	2301      	movs	r3, #1
 800581c:	e00f      	b.n	800583e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800581e:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <SysTick_Config+0x40>)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3b01      	subs	r3, #1
 8005824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005826:	210f      	movs	r1, #15
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	f7ff ff8e 	bl	800574c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <SysTick_Config+0x40>)
 8005832:	2200      	movs	r2, #0
 8005834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005836:	4b04      	ldr	r3, [pc, #16]	; (8005848 <SysTick_Config+0x40>)
 8005838:	2207      	movs	r2, #7
 800583a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	e000e010 	.word	0xe000e010

0800584c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff ff47 	bl	80056e8 <__NVIC_SetPriorityGrouping>
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	4603      	mov	r3, r0
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005874:	f7ff ff5c 	bl	8005730 <__NVIC_GetPriorityGrouping>
 8005878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	6978      	ldr	r0, [r7, #20]
 8005880:	f7ff ff8e 	bl	80057a0 <NVIC_EncodePriority>
 8005884:	4602      	mov	r2, r0
 8005886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800588a:	4611      	mov	r1, r2
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ff5d 	bl	800574c <__NVIC_SetPriority>
}
 8005892:	bf00      	nop
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff ffb0 	bl	8005808 <SysTick_Config>
 80058a8:	4603      	mov	r3, r0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	; 0x24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80058c6:	2300      	movs	r3, #0
 80058c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e175      	b.n	8005bc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80058d4:	2201      	movs	r2, #1
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4013      	ands	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	f040 8164 	bne.w	8005bba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d005      	beq.n	800590a <HAL_GPIO_Init+0x56>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d130      	bne.n	800596c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	2203      	movs	r2, #3
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4313      	orrs	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005940:	2201      	movs	r2, #1
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 0201 	and.w	r2, r3, #1
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	2b03      	cmp	r3, #3
 8005976:	d017      	beq.n	80059a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	2203      	movs	r2, #3
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	4013      	ands	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d123      	bne.n	80059fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	08da      	lsrs	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3208      	adds	r2, #8
 80059bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	220f      	movs	r2, #15
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	08da      	lsrs	r2, r3, #3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3208      	adds	r2, #8
 80059f6:	69b9      	ldr	r1, [r7, #24]
 80059f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	2203      	movs	r2, #3
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f003 0203 	and.w	r2, r3, #3
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80be 	beq.w	8005bba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a3e:	4b66      	ldr	r3, [pc, #408]	; (8005bd8 <HAL_GPIO_Init+0x324>)
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	4a65      	ldr	r2, [pc, #404]	; (8005bd8 <HAL_GPIO_Init+0x324>)
 8005a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a48:	6453      	str	r3, [r2, #68]	; 0x44
 8005a4a:	4b63      	ldr	r3, [pc, #396]	; (8005bd8 <HAL_GPIO_Init+0x324>)
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a56:	4a61      	ldr	r2, [pc, #388]	; (8005bdc <HAL_GPIO_Init+0x328>)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	220f      	movs	r2, #15
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a58      	ldr	r2, [pc, #352]	; (8005be0 <HAL_GPIO_Init+0x32c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d037      	beq.n	8005af2 <HAL_GPIO_Init+0x23e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a57      	ldr	r2, [pc, #348]	; (8005be4 <HAL_GPIO_Init+0x330>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d031      	beq.n	8005aee <HAL_GPIO_Init+0x23a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a56      	ldr	r2, [pc, #344]	; (8005be8 <HAL_GPIO_Init+0x334>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d02b      	beq.n	8005aea <HAL_GPIO_Init+0x236>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a55      	ldr	r2, [pc, #340]	; (8005bec <HAL_GPIO_Init+0x338>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d025      	beq.n	8005ae6 <HAL_GPIO_Init+0x232>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a54      	ldr	r2, [pc, #336]	; (8005bf0 <HAL_GPIO_Init+0x33c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01f      	beq.n	8005ae2 <HAL_GPIO_Init+0x22e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a53      	ldr	r2, [pc, #332]	; (8005bf4 <HAL_GPIO_Init+0x340>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d019      	beq.n	8005ade <HAL_GPIO_Init+0x22a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a52      	ldr	r2, [pc, #328]	; (8005bf8 <HAL_GPIO_Init+0x344>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <HAL_GPIO_Init+0x226>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a51      	ldr	r2, [pc, #324]	; (8005bfc <HAL_GPIO_Init+0x348>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00d      	beq.n	8005ad6 <HAL_GPIO_Init+0x222>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a50      	ldr	r2, [pc, #320]	; (8005c00 <HAL_GPIO_Init+0x34c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <HAL_GPIO_Init+0x21e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a4f      	ldr	r2, [pc, #316]	; (8005c04 <HAL_GPIO_Init+0x350>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <HAL_GPIO_Init+0x21a>
 8005aca:	2309      	movs	r3, #9
 8005acc:	e012      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005ace:	230a      	movs	r3, #10
 8005ad0:	e010      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005ad2:	2308      	movs	r3, #8
 8005ad4:	e00e      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005ad6:	2307      	movs	r3, #7
 8005ad8:	e00c      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005ada:	2306      	movs	r3, #6
 8005adc:	e00a      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005ade:	2305      	movs	r3, #5
 8005ae0:	e008      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005ae2:	2304      	movs	r3, #4
 8005ae4:	e006      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e004      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e002      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <HAL_GPIO_Init+0x240>
 8005af2:	2300      	movs	r3, #0
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	f002 0203 	and.w	r2, r2, #3
 8005afa:	0092      	lsls	r2, r2, #2
 8005afc:	4093      	lsls	r3, r2
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b04:	4935      	ldr	r1, [pc, #212]	; (8005bdc <HAL_GPIO_Init+0x328>)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	089b      	lsrs	r3, r3, #2
 8005b0a:	3302      	adds	r3, #2
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b12:	4b3d      	ldr	r3, [pc, #244]	; (8005c08 <HAL_GPIO_Init+0x354>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b36:	4a34      	ldr	r2, [pc, #208]	; (8005c08 <HAL_GPIO_Init+0x354>)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b3c:	4b32      	ldr	r3, [pc, #200]	; (8005c08 <HAL_GPIO_Init+0x354>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b60:	4a29      	ldr	r2, [pc, #164]	; (8005c08 <HAL_GPIO_Init+0x354>)
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b66:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <HAL_GPIO_Init+0x354>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4013      	ands	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b8a:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <HAL_GPIO_Init+0x354>)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b90:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <HAL_GPIO_Init+0x354>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <HAL_GPIO_Init+0x354>)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	2b0f      	cmp	r3, #15
 8005bc4:	f67f ae86 	bls.w	80058d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	3724      	adds	r7, #36	; 0x24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	40013800 	.word	0x40013800
 8005be0:	40020000 	.word	0x40020000
 8005be4:	40020400 	.word	0x40020400
 8005be8:	40020800 	.word	0x40020800
 8005bec:	40020c00 	.word	0x40020c00
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	40021400 	.word	0x40021400
 8005bf8:	40021800 	.word	0x40021800
 8005bfc:	40021c00 	.word	0x40021c00
 8005c00:	40022000 	.word	0x40022000
 8005c04:	40022400 	.word	0x40022400
 8005c08:	40013c00 	.word	0x40013c00

08005c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c1c:	787b      	ldrb	r3, [r7, #1]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c22:	887a      	ldrh	r2, [r7, #2]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c28:	e003      	b.n	8005c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c2a:	887b      	ldrh	r3, [r7, #2]
 8005c2c:	041a      	lsls	r2, r3, #16
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	619a      	str	r2, [r3, #24]
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e291      	b.n	800617a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8087 	beq.w	8005d72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c64:	4b96      	ldr	r3, [pc, #600]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d00c      	beq.n	8005c8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c70:	4b93      	ldr	r3, [pc, #588]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d112      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x62>
 8005c7c:	4b90      	ldr	r3, [pc, #576]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c88:	d10b      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c8a:	4b8d      	ldr	r3, [pc, #564]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d06c      	beq.n	8005d70 <HAL_RCC_OscConfig+0x130>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d168      	bne.n	8005d70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e26b      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_OscConfig+0x7a>
 8005cac:	4b84      	ldr	r3, [pc, #528]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a83      	ldr	r2, [pc, #524]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	e02e      	b.n	8005d18 <HAL_RCC_OscConfig+0xd8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x9c>
 8005cc2:	4b7f      	ldr	r3, [pc, #508]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a7e      	ldr	r2, [pc, #504]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	4b7c      	ldr	r3, [pc, #496]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7b      	ldr	r2, [pc, #492]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e01d      	b.n	8005d18 <HAL_RCC_OscConfig+0xd8>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce4:	d10c      	bne.n	8005d00 <HAL_RCC_OscConfig+0xc0>
 8005ce6:	4b76      	ldr	r3, [pc, #472]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a75      	ldr	r2, [pc, #468]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	4b73      	ldr	r3, [pc, #460]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a72      	ldr	r2, [pc, #456]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e00b      	b.n	8005d18 <HAL_RCC_OscConfig+0xd8>
 8005d00:	4b6f      	ldr	r3, [pc, #444]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a6e      	ldr	r2, [pc, #440]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	4b6c      	ldr	r3, [pc, #432]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6b      	ldr	r2, [pc, #428]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d013      	beq.n	8005d48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d20:	f7ff fcd6 	bl	80056d0 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d28:	f7ff fcd2 	bl	80056d0 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b64      	cmp	r3, #100	; 0x64
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e21f      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3a:	4b61      	ldr	r3, [pc, #388]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCC_OscConfig+0xe8>
 8005d46:	e014      	b.n	8005d72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7ff fcc2 	bl	80056d0 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d50:	f7ff fcbe 	bl	80056d0 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b64      	cmp	r3, #100	; 0x64
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e20b      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d62:	4b57      	ldr	r3, [pc, #348]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1f0      	bne.n	8005d50 <HAL_RCC_OscConfig+0x110>
 8005d6e:	e000      	b.n	8005d72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d069      	beq.n	8005e52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d7e:	4b50      	ldr	r3, [pc, #320]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 030c 	and.w	r3, r3, #12
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d8a:	4b4d      	ldr	r3, [pc, #308]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d11c      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x190>
 8005d96:	4b4a      	ldr	r3, [pc, #296]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d116      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da2:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_RCC_OscConfig+0x17a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d001      	beq.n	8005dba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e1df      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dba:	4b41      	ldr	r3, [pc, #260]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	493d      	ldr	r1, [pc, #244]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dce:	e040      	b.n	8005e52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d023      	beq.n	8005e20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd8:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a38      	ldr	r2, [pc, #224]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de4:	f7ff fc74 	bl	80056d0 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dec:	f7ff fc70 	bl	80056d0 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e1bd      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dfe:	4b30      	ldr	r3, [pc, #192]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0f0      	beq.n	8005dec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0a:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4929      	ldr	r1, [pc, #164]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]
 8005e1e:	e018      	b.n	8005e52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e20:	4b27      	ldr	r3, [pc, #156]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a26      	ldr	r2, [pc, #152]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7ff fc50 	bl	80056d0 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e34:	f7ff fc4c 	bl	80056d0 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e199      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e46:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d038      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d019      	beq.n	8005e9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e66:	4b16      	ldr	r3, [pc, #88]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6a:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e72:	f7ff fc2d 	bl	80056d0 <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e7a:	f7ff fc29 	bl	80056d0 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e176      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCC_OscConfig+0x23a>
 8005e98:	e01a      	b.n	8005ed0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e9a:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9e:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <HAL_RCC_OscConfig+0x280>)
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea6:	f7ff fc13 	bl	80056d0 <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eac:	e00a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eae:	f7ff fc0f 	bl	80056d0 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d903      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e15c      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
 8005ec0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec4:	4b91      	ldr	r3, [pc, #580]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1ee      	bne.n	8005eae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 80a4 	beq.w	8006026 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ede:	4b8b      	ldr	r3, [pc, #556]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10d      	bne.n	8005f06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eea:	4b88      	ldr	r3, [pc, #544]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	4a87      	ldr	r2, [pc, #540]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ef6:	4b85      	ldr	r3, [pc, #532]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efe:	60bb      	str	r3, [r7, #8]
 8005f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f06:	4b82      	ldr	r3, [pc, #520]	; (8006110 <HAL_RCC_OscConfig+0x4d0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d118      	bne.n	8005f44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f12:	4b7f      	ldr	r3, [pc, #508]	; (8006110 <HAL_RCC_OscConfig+0x4d0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a7e      	ldr	r2, [pc, #504]	; (8006110 <HAL_RCC_OscConfig+0x4d0>)
 8005f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f1e:	f7ff fbd7 	bl	80056d0 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f26:	f7ff fbd3 	bl	80056d0 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b64      	cmp	r3, #100	; 0x64
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e120      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f38:	4b75      	ldr	r3, [pc, #468]	; (8006110 <HAL_RCC_OscConfig+0x4d0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f0      	beq.n	8005f26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d106      	bne.n	8005f5a <HAL_RCC_OscConfig+0x31a>
 8005f4c:	4b6f      	ldr	r3, [pc, #444]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f50:	4a6e      	ldr	r2, [pc, #440]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6713      	str	r3, [r2, #112]	; 0x70
 8005f58:	e02d      	b.n	8005fb6 <HAL_RCC_OscConfig+0x376>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10c      	bne.n	8005f7c <HAL_RCC_OscConfig+0x33c>
 8005f62:	4b6a      	ldr	r3, [pc, #424]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	4a69      	ldr	r2, [pc, #420]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6e:	4b67      	ldr	r3, [pc, #412]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	4a66      	ldr	r2, [pc, #408]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f74:	f023 0304 	bic.w	r3, r3, #4
 8005f78:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7a:	e01c      	b.n	8005fb6 <HAL_RCC_OscConfig+0x376>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	2b05      	cmp	r3, #5
 8005f82:	d10c      	bne.n	8005f9e <HAL_RCC_OscConfig+0x35e>
 8005f84:	4b61      	ldr	r3, [pc, #388]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	4a60      	ldr	r2, [pc, #384]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f8a:	f043 0304 	orr.w	r3, r3, #4
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f90:	4b5e      	ldr	r3, [pc, #376]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a5d      	ldr	r2, [pc, #372]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9c:	e00b      	b.n	8005fb6 <HAL_RCC_OscConfig+0x376>
 8005f9e:	4b5b      	ldr	r3, [pc, #364]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	4a5a      	ldr	r2, [pc, #360]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8005faa:	4b58      	ldr	r3, [pc, #352]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	4a57      	ldr	r2, [pc, #348]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005fb0:	f023 0304 	bic.w	r3, r3, #4
 8005fb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d015      	beq.n	8005fea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbe:	f7ff fb87 	bl	80056d0 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc4:	e00a      	b.n	8005fdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc6:	f7ff fb83 	bl	80056d0 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e0ce      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fdc:	4b4b      	ldr	r3, [pc, #300]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0ee      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x386>
 8005fe8:	e014      	b.n	8006014 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fea:	f7ff fb71 	bl	80056d0 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff0:	e00a      	b.n	8006008 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff2:	f7ff fb6d 	bl	80056d0 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006000:	4293      	cmp	r3, r2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e0b8      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006008:	4b40      	ldr	r3, [pc, #256]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 800600a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1ee      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d105      	bne.n	8006026 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800601a:	4b3c      	ldr	r3, [pc, #240]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	4a3b      	ldr	r2, [pc, #236]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8006020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006024:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80a4 	beq.w	8006178 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006030:	4b36      	ldr	r3, [pc, #216]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 030c 	and.w	r3, r3, #12
 8006038:	2b08      	cmp	r3, #8
 800603a:	d06b      	beq.n	8006114 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d149      	bne.n	80060d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006044:	4b31      	ldr	r3, [pc, #196]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a30      	ldr	r2, [pc, #192]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 800604a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7ff fb3e 	bl	80056d0 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006058:	f7ff fb3a 	bl	80056d0 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e087      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606a:	4b28      	ldr	r3, [pc, #160]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	3b01      	subs	r3, #1
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	4313      	orrs	r3, r2
 800609c:	4a1b      	ldr	r2, [pc, #108]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 800609e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a4:	4b19      	ldr	r3, [pc, #100]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a18      	ldr	r2, [pc, #96]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 80060aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7ff fb0e 	bl	80056d0 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7ff fb0a 	bl	80056d0 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e057      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ca:	4b10      	ldr	r3, [pc, #64]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x478>
 80060d6:	e04f      	b.n	8006178 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0b      	ldr	r2, [pc, #44]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 80060de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e4:	f7ff faf4 	bl	80056d0 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ec:	f7ff faf0 	bl	80056d0 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e03d      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fe:	4b03      	ldr	r3, [pc, #12]	; (800610c <HAL_RCC_OscConfig+0x4cc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <HAL_RCC_OscConfig+0x4ac>
 800610a:	e035      	b.n	8006178 <HAL_RCC_OscConfig+0x538>
 800610c:	40023800 	.word	0x40023800
 8006110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006114:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <HAL_RCC_OscConfig+0x544>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d028      	beq.n	8006174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d121      	bne.n	8006174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613a:	429a      	cmp	r2, r3
 800613c:	d11a      	bne.n	8006174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006144:	4013      	ands	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800614a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800614c:	4293      	cmp	r3, r2
 800614e:	d111      	bne.n	8006174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	3b01      	subs	r3, #1
 800615e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d107      	bne.n	8006174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40023800 	.word	0x40023800

08006188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e0d0      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061a0:	4b6a      	ldr	r3, [pc, #424]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d910      	bls.n	80061d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ae:	4b67      	ldr	r3, [pc, #412]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f023 020f 	bic.w	r2, r3, #15
 80061b6:	4965      	ldr	r1, [pc, #404]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061be:	4b63      	ldr	r3, [pc, #396]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0b8      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d020      	beq.n	800621e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061e8:	4b59      	ldr	r3, [pc, #356]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4a58      	ldr	r2, [pc, #352]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 80061ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006200:	4b53      	ldr	r3, [pc, #332]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	4a52      	ldr	r2, [pc, #328]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 8006206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800620a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800620c:	4b50      	ldr	r3, [pc, #320]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	494d      	ldr	r1, [pc, #308]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d040      	beq.n	80062ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d107      	bne.n	8006242 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006232:	4b47      	ldr	r3, [pc, #284]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d115      	bne.n	800626a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e07f      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d107      	bne.n	800625a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624a:	4b41      	ldr	r3, [pc, #260]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e073      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800625a:	4b3d      	ldr	r3, [pc, #244]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e06b      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800626a:	4b39      	ldr	r3, [pc, #228]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f023 0203 	bic.w	r2, r3, #3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4936      	ldr	r1, [pc, #216]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 8006278:	4313      	orrs	r3, r2
 800627a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800627c:	f7ff fa28 	bl	80056d0 <HAL_GetTick>
 8006280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006282:	e00a      	b.n	800629a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006284:	f7ff fa24 	bl	80056d0 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006292:	4293      	cmp	r3, r2
 8006294:	d901      	bls.n	800629a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e053      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629a:	4b2d      	ldr	r3, [pc, #180]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 020c 	and.w	r2, r3, #12
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d1eb      	bne.n	8006284 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062ac:	4b27      	ldr	r3, [pc, #156]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d210      	bcs.n	80062dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f023 020f 	bic.w	r2, r3, #15
 80062c2:	4922      	ldr	r1, [pc, #136]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ca:	4b20      	ldr	r3, [pc, #128]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d001      	beq.n	80062dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e032      	b.n	8006342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d008      	beq.n	80062fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062e8:	4b19      	ldr	r3, [pc, #100]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	4916      	ldr	r1, [pc, #88]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006306:	4b12      	ldr	r3, [pc, #72]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	490e      	ldr	r1, [pc, #56]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 8006316:	4313      	orrs	r3, r2
 8006318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800631a:	f000 f821 	bl	8006360 <HAL_RCC_GetSysClockFreq>
 800631e:	4602      	mov	r2, r0
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	490a      	ldr	r1, [pc, #40]	; (8006354 <HAL_RCC_ClockConfig+0x1cc>)
 800632c:	5ccb      	ldrb	r3, [r1, r3]
 800632e:	fa22 f303 	lsr.w	r3, r2, r3
 8006332:	4a09      	ldr	r2, [pc, #36]	; (8006358 <HAL_RCC_ClockConfig+0x1d0>)
 8006334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006336:	4b09      	ldr	r3, [pc, #36]	; (800635c <HAL_RCC_ClockConfig+0x1d4>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff f984 	bl	8005648 <HAL_InitTick>

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40023c00 	.word	0x40023c00
 8006350:	40023800 	.word	0x40023800
 8006354:	0801149c 	.word	0x0801149c
 8006358:	20000384 	.word	0x20000384
 800635c:	20000388 	.word	0x20000388

08006360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006364:	b090      	sub	sp, #64	; 0x40
 8006366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	637b      	str	r3, [r7, #52]	; 0x34
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006370:	2300      	movs	r3, #0
 8006372:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006378:	4b59      	ldr	r3, [pc, #356]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 030c 	and.w	r3, r3, #12
 8006380:	2b08      	cmp	r3, #8
 8006382:	d00d      	beq.n	80063a0 <HAL_RCC_GetSysClockFreq+0x40>
 8006384:	2b08      	cmp	r3, #8
 8006386:	f200 80a1 	bhi.w	80064cc <HAL_RCC_GetSysClockFreq+0x16c>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0x34>
 800638e:	2b04      	cmp	r3, #4
 8006390:	d003      	beq.n	800639a <HAL_RCC_GetSysClockFreq+0x3a>
 8006392:	e09b      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006394:	4b53      	ldr	r3, [pc, #332]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006396:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006398:	e09b      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800639a:	4b53      	ldr	r3, [pc, #332]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800639e:	e098      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063a0:	4b4f      	ldr	r3, [pc, #316]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80063aa:	4b4d      	ldr	r3, [pc, #308]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d028      	beq.n	8006408 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063b6:	4b4a      	ldr	r3, [pc, #296]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	2200      	movs	r2, #0
 80063be:	623b      	str	r3, [r7, #32]
 80063c0:	627a      	str	r2, [r7, #36]	; 0x24
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063c8:	2100      	movs	r1, #0
 80063ca:	4b47      	ldr	r3, [pc, #284]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80063cc:	fb03 f201 	mul.w	r2, r3, r1
 80063d0:	2300      	movs	r3, #0
 80063d2:	fb00 f303 	mul.w	r3, r0, r3
 80063d6:	4413      	add	r3, r2
 80063d8:	4a43      	ldr	r2, [pc, #268]	; (80064e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80063da:	fba0 1202 	umull	r1, r2, r0, r2
 80063de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063e0:	460a      	mov	r2, r1
 80063e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80063e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e6:	4413      	add	r3, r2
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ec:	2200      	movs	r2, #0
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	61fa      	str	r2, [r7, #28]
 80063f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063fa:	f7fa fcb5 	bl	8000d68 <__aeabi_uldivmod>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4613      	mov	r3, r2
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006406:	e053      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006408:	4b35      	ldr	r3, [pc, #212]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	099b      	lsrs	r3, r3, #6
 800640e:	2200      	movs	r2, #0
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	617a      	str	r2, [r7, #20]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800641a:	f04f 0b00 	mov.w	fp, #0
 800641e:	4652      	mov	r2, sl
 8006420:	465b      	mov	r3, fp
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f04f 0100 	mov.w	r1, #0
 800642a:	0159      	lsls	r1, r3, #5
 800642c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006430:	0150      	lsls	r0, r2, #5
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	ebb2 080a 	subs.w	r8, r2, sl
 800643a:	eb63 090b 	sbc.w	r9, r3, fp
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800644a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800644e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006452:	ebb2 0408 	subs.w	r4, r2, r8
 8006456:	eb63 0509 	sbc.w	r5, r3, r9
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	00eb      	lsls	r3, r5, #3
 8006464:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006468:	00e2      	lsls	r2, r4, #3
 800646a:	4614      	mov	r4, r2
 800646c:	461d      	mov	r5, r3
 800646e:	eb14 030a 	adds.w	r3, r4, sl
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	eb45 030b 	adc.w	r3, r5, fp
 8006478:	607b      	str	r3, [r7, #4]
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006486:	4629      	mov	r1, r5
 8006488:	028b      	lsls	r3, r1, #10
 800648a:	4621      	mov	r1, r4
 800648c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006490:	4621      	mov	r1, r4
 8006492:	028a      	lsls	r2, r1, #10
 8006494:	4610      	mov	r0, r2
 8006496:	4619      	mov	r1, r3
 8006498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649a:	2200      	movs	r2, #0
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	60fa      	str	r2, [r7, #12]
 80064a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a4:	f7fa fc60 	bl	8000d68 <__aeabi_uldivmod>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4613      	mov	r3, r2
 80064ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	3301      	adds	r3, #1
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80064c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064ca:	e002      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064cc:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80064ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3740      	adds	r7, #64	; 0x40
 80064d8:	46bd      	mov	sp, r7
 80064da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064de:	bf00      	nop
 80064e0:	40023800 	.word	0x40023800
 80064e4:	00f42400 	.word	0x00f42400
 80064e8:	017d7840 	.word	0x017d7840

080064ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f0:	4b03      	ldr	r3, [pc, #12]	; (8006500 <HAL_RCC_GetHCLKFreq+0x14>)
 80064f2:	681b      	ldr	r3, [r3, #0]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000384 	.word	0x20000384

08006504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006508:	f7ff fff0 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 800650c:	4602      	mov	r2, r0
 800650e:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	0a9b      	lsrs	r3, r3, #10
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	4903      	ldr	r1, [pc, #12]	; (8006528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800651a:	5ccb      	ldrb	r3, [r1, r3]
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006520:	4618      	mov	r0, r3
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40023800 	.word	0x40023800
 8006528:	080114ac 	.word	0x080114ac

0800652c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006530:	f7ff ffdc 	bl	80064ec <HAL_RCC_GetHCLKFreq>
 8006534:	4602      	mov	r2, r0
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	0b5b      	lsrs	r3, r3, #13
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	4903      	ldr	r1, [pc, #12]	; (8006550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006542:	5ccb      	ldrb	r3, [r1, r3]
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40023800 	.word	0x40023800
 8006550:	080114ac 	.word	0x080114ac

08006554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d012      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800657c:	4b69      	ldr	r3, [pc, #420]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	4a68      	ldr	r2, [pc, #416]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006582:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006586:	6093      	str	r3, [r2, #8]
 8006588:	4b66      	ldr	r3, [pc, #408]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006590:	4964      	ldr	r1, [pc, #400]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800659e:	2301      	movs	r3, #1
 80065a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d017      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065ae:	4b5d      	ldr	r3, [pc, #372]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065bc:	4959      	ldr	r1, [pc, #356]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065cc:	d101      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80065ce:	2301      	movs	r3, #1
 80065d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80065da:	2301      	movs	r3, #1
 80065dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d017      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065ea:	4b4e      	ldr	r3, [pc, #312]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	494a      	ldr	r1, [pc, #296]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006608:	d101      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800660a:	2301      	movs	r3, #1
 800660c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006616:	2301      	movs	r3, #1
 8006618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006626:	2301      	movs	r3, #1
 8006628:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 808b 	beq.w	800674e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006638:	4b3a      	ldr	r3, [pc, #232]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	4a39      	ldr	r2, [pc, #228]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006642:	6413      	str	r3, [r2, #64]	; 0x40
 8006644:	4b37      	ldr	r3, [pc, #220]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006650:	4b35      	ldr	r3, [pc, #212]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a34      	ldr	r2, [pc, #208]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665c:	f7ff f838 	bl	80056d0 <HAL_GetTick>
 8006660:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006662:	e008      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006664:	f7ff f834 	bl	80056d0 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b64      	cmp	r3, #100	; 0x64
 8006670:	d901      	bls.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e357      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006676:	4b2c      	ldr	r3, [pc, #176]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0f0      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006682:	4b28      	ldr	r3, [pc, #160]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d035      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	429a      	cmp	r2, r3
 800669e:	d02e      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066a0:	4b20      	ldr	r3, [pc, #128]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066aa:	4b1e      	ldr	r3, [pc, #120]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066b6:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80066c2:	4a18      	ldr	r2, [pc, #96]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066c8:	4b16      	ldr	r3, [pc, #88]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d114      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7fe fffc 	bl	80056d0 <HAL_GetTick>
 80066d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066da:	e00a      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066dc:	f7fe fff8 	bl	80056d0 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e319      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f2:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0ee      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800670a:	d111      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800671a:	400b      	ands	r3, r1
 800671c:	4901      	ldr	r1, [pc, #4]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800671e:	4313      	orrs	r3, r2
 8006720:	608b      	str	r3, [r1, #8]
 8006722:	e00b      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006724:	40023800 	.word	0x40023800
 8006728:	40007000 	.word	0x40007000
 800672c:	0ffffcff 	.word	0x0ffffcff
 8006730:	4baa      	ldr	r3, [pc, #680]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	4aa9      	ldr	r2, [pc, #676]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006736:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800673a:	6093      	str	r3, [r2, #8]
 800673c:	4ba7      	ldr	r3, [pc, #668]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800673e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006748:	49a4      	ldr	r1, [pc, #656]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800674a:	4313      	orrs	r3, r2
 800674c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b00      	cmp	r3, #0
 8006758:	d010      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800675a:	4ba0      	ldr	r3, [pc, #640]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800675c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006760:	4a9e      	ldr	r2, [pc, #632]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800676a:	4b9c      	ldr	r3, [pc, #624]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800676c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006774:	4999      	ldr	r1, [pc, #612]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006788:	4b94      	ldr	r3, [pc, #592]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800678a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006796:	4991      	ldr	r1, [pc, #580]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006798:	4313      	orrs	r3, r2
 800679a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067aa:	4b8c      	ldr	r3, [pc, #560]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b8:	4988      	ldr	r1, [pc, #544]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067cc:	4b83      	ldr	r3, [pc, #524]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067da:	4980      	ldr	r1, [pc, #512]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067ee:	4b7b      	ldr	r3, [pc, #492]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fc:	4977      	ldr	r1, [pc, #476]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006810:	4b72      	ldr	r3, [pc, #456]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006816:	f023 0203 	bic.w	r2, r3, #3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	496f      	ldr	r1, [pc, #444]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006832:	4b6a      	ldr	r3, [pc, #424]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006838:	f023 020c 	bic.w	r2, r3, #12
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006840:	4966      	ldr	r1, [pc, #408]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006854:	4b61      	ldr	r3, [pc, #388]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006862:	495e      	ldr	r1, [pc, #376]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006864:	4313      	orrs	r3, r2
 8006866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006876:	4b59      	ldr	r3, [pc, #356]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	4955      	ldr	r1, [pc, #340]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006898:	4b50      	ldr	r3, [pc, #320]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	494d      	ldr	r1, [pc, #308]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80068ba:	4b48      	ldr	r3, [pc, #288]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	4944      	ldr	r1, [pc, #272]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80068dc:	4b3f      	ldr	r3, [pc, #252]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ea:	493c      	ldr	r1, [pc, #240]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80068fe:	4b37      	ldr	r3, [pc, #220]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006904:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800690c:	4933      	ldr	r1, [pc, #204]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006920:	4b2e      	ldr	r3, [pc, #184]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800692e:	492b      	ldr	r1, [pc, #172]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006930:	4313      	orrs	r3, r2
 8006932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d011      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006942:	4b26      	ldr	r3, [pc, #152]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006950:	4922      	ldr	r1, [pc, #136]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800695c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006960:	d101      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006962:	2301      	movs	r3, #1
 8006964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006972:	2301      	movs	r3, #1
 8006974:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006982:	4b16      	ldr	r3, [pc, #88]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006988:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006990:	4912      	ldr	r1, [pc, #72]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069a4:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b4:	4909      	ldr	r1, [pc, #36]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d006      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80d9 	beq.w	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069d0:	4b02      	ldr	r3, [pc, #8]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a01      	ldr	r2, [pc, #4]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069da:	e001      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80069dc:	40023800 	.word	0x40023800
 80069e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e2:	f7fe fe75 	bl	80056d0 <HAL_GetTick>
 80069e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069e8:	e008      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069ea:	f7fe fe71 	bl	80056d0 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b64      	cmp	r3, #100	; 0x64
 80069f6:	d901      	bls.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e194      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069fc:	4b6c      	ldr	r3, [pc, #432]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1f0      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d021      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d11d      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a1c:	4b64      	ldr	r3, [pc, #400]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a22:	0c1b      	lsrs	r3, r3, #16
 8006a24:	f003 0303 	and.w	r3, r3, #3
 8006a28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a2a:	4b61      	ldr	r3, [pc, #388]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a30:	0e1b      	lsrs	r3, r3, #24
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	019a      	lsls	r2, r3, #6
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	041b      	lsls	r3, r3, #16
 8006a42:	431a      	orrs	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	061b      	lsls	r3, r3, #24
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	071b      	lsls	r3, r3, #28
 8006a50:	4957      	ldr	r1, [pc, #348]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6c:	d00a      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d02e      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a82:	d129      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a84:	4b4a      	ldr	r3, [pc, #296]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a8a:	0c1b      	lsrs	r3, r3, #16
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a92:	4b47      	ldr	r3, [pc, #284]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a98:	0f1b      	lsrs	r3, r3, #28
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	019a      	lsls	r2, r3, #6
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	061b      	lsls	r3, r3, #24
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	071b      	lsls	r3, r3, #28
 8006ab8:	493d      	ldr	r1, [pc, #244]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ac0:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac6:	f023 021f 	bic.w	r2, r3, #31
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	4937      	ldr	r1, [pc, #220]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01d      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ae4:	4b32      	ldr	r3, [pc, #200]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aea:	0e1b      	lsrs	r3, r3, #24
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006af2:	4b2f      	ldr	r3, [pc, #188]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af8:	0f1b      	lsrs	r3, r3, #28
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	019a      	lsls	r2, r3, #6
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	041b      	lsls	r3, r3, #16
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	061b      	lsls	r3, r3, #24
 8006b12:	431a      	orrs	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	071b      	lsls	r3, r3, #28
 8006b18:	4925      	ldr	r1, [pc, #148]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d011      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	019a      	lsls	r2, r3, #6
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	061b      	lsls	r3, r3, #24
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	071b      	lsls	r3, r3, #28
 8006b48:	4919      	ldr	r1, [pc, #100]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b50:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a16      	ldr	r2, [pc, #88]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b5c:	f7fe fdb8 	bl	80056d0 <HAL_GetTick>
 8006b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b64:	f7fe fdb4 	bl	80056d0 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b64      	cmp	r3, #100	; 0x64
 8006b70:	d901      	bls.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e0d7      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b76:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	f040 80cd 	bne.w	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b8a:	4b09      	ldr	r3, [pc, #36]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a08      	ldr	r2, [pc, #32]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b96:	f7fe fd9b 	bl	80056d0 <HAL_GetTick>
 8006b9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b9c:	e00a      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b9e:	f7fe fd97 	bl	80056d0 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b64      	cmp	r3, #100	; 0x64
 8006baa:	d903      	bls.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e0ba      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006bb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bb4:	4b5e      	ldr	r3, [pc, #376]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bc0:	d0ed      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d02e      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d12a      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006bea:	4b51      	ldr	r3, [pc, #324]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bf8:	4b4d      	ldr	r3, [pc, #308]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfe:	0f1b      	lsrs	r3, r3, #28
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	019a      	lsls	r2, r3, #6
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	061b      	lsls	r3, r3, #24
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	071b      	lsls	r3, r3, #28
 8006c1e:	4944      	ldr	r1, [pc, #272]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c26:	4b42      	ldr	r3, [pc, #264]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	3b01      	subs	r3, #1
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	493d      	ldr	r1, [pc, #244]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d022      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c54:	d11d      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c56:	4b36      	ldr	r3, [pc, #216]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5c:	0e1b      	lsrs	r3, r3, #24
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c64:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6a:	0f1b      	lsrs	r3, r3, #28
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	019a      	lsls	r2, r3, #6
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	041b      	lsls	r3, r3, #16
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	061b      	lsls	r3, r3, #24
 8006c84:	431a      	orrs	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	071b      	lsls	r3, r3, #28
 8006c8a:	4929      	ldr	r1, [pc, #164]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d028      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c9e:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca4:	0e1b      	lsrs	r3, r3, #24
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006cac:	4b20      	ldr	r3, [pc, #128]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	0c1b      	lsrs	r3, r3, #16
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	019a      	lsls	r2, r3, #6
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	061b      	lsls	r3, r3, #24
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	071b      	lsls	r3, r3, #28
 8006cd2:	4917      	ldr	r1, [pc, #92]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006cda:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	4911      	ldr	r1, [pc, #68]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a0e      	ldr	r2, [pc, #56]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cfc:	f7fe fce8 	bl	80056d0 <HAL_GetTick>
 8006d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d04:	f7fe fce4 	bl	80056d0 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b64      	cmp	r3, #100	; 0x64
 8006d10:	d901      	bls.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e007      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d22:	d1ef      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40023800 	.word	0x40023800

08006d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e040      	b.n	8006dc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fe fabc 	bl	80052d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2224      	movs	r2, #36	; 0x24
 8006d60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f974 	bl	8007060 <UART_SetConfig>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e022      	b.n	8006dc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fbcc 	bl	8007528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fc53 	bl	800766c <UART_CheckIdleState>
 8006dc6:	4603      	mov	r3, r0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d171      	bne.n	8006ecc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_UART_Transmit+0x24>
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e06a      	b.n	8006ece <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2221      	movs	r2, #33	; 0x21
 8006e04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e06:	f7fe fc63 	bl	80056d0 <HAL_GetTick>
 8006e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	88fa      	ldrh	r2, [r7, #6]
 8006e10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	88fa      	ldrh	r2, [r7, #6]
 8006e18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e24:	d108      	bne.n	8006e38 <HAL_UART_Transmit+0x68>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d104      	bne.n	8006e38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	e003      	b.n	8006e40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e40:	e02c      	b.n	8006e9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2180      	movs	r1, #128	; 0x80
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 fc44 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e038      	b.n	8006ece <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10b      	bne.n	8006e7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	3302      	adds	r3, #2
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	e007      	b.n	8006e8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	781a      	ldrb	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	3301      	adds	r3, #1
 8006e88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1cc      	bne.n	8006e42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2140      	movs	r1, #64	; 0x40
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fc11 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e005      	b.n	8006ece <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e000      	b.n	8006ece <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006ecc:	2302      	movs	r3, #2
  }
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3720      	adds	r7, #32
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b08a      	sub	sp, #40	; 0x28
 8006eda:	af02      	add	r7, sp, #8
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	f040 80b1 	bne.w	8007054 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <HAL_UART_Receive+0x28>
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e0a9      	b.n	8007056 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2222      	movs	r2, #34	; 0x22
 8006f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f18:	f7fe fbda 	bl	80056d0 <HAL_GetTick>
 8006f1c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	88fa      	ldrh	r2, [r7, #6]
 8006f22:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	88fa      	ldrh	r2, [r7, #6]
 8006f2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f36:	d10e      	bne.n	8006f56 <HAL_UART_Receive+0x80>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d105      	bne.n	8006f4c <HAL_UART_Receive+0x76>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f4a:	e02d      	b.n	8006fa8 <HAL_UART_Receive+0xd2>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	22ff      	movs	r2, #255	; 0xff
 8006f50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f54:	e028      	b.n	8006fa8 <HAL_UART_Receive+0xd2>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10d      	bne.n	8006f7a <HAL_UART_Receive+0xa4>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d104      	bne.n	8006f70 <HAL_UART_Receive+0x9a>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	22ff      	movs	r2, #255	; 0xff
 8006f6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f6e:	e01b      	b.n	8006fa8 <HAL_UART_Receive+0xd2>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	227f      	movs	r2, #127	; 0x7f
 8006f74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f78:	e016      	b.n	8006fa8 <HAL_UART_Receive+0xd2>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f82:	d10d      	bne.n	8006fa0 <HAL_UART_Receive+0xca>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d104      	bne.n	8006f96 <HAL_UART_Receive+0xc0>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	227f      	movs	r2, #127	; 0x7f
 8006f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f94:	e008      	b.n	8006fa8 <HAL_UART_Receive+0xd2>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	223f      	movs	r2, #63	; 0x3f
 8006f9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f9e:	e003      	b.n	8006fa8 <HAL_UART_Receive+0xd2>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb8:	d108      	bne.n	8006fcc <HAL_UART_Receive+0xf6>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	e003      	b.n	8006fd4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006fd4:	e032      	b.n	800703c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2120      	movs	r1, #32
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 fb7a 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e032      	b.n	8007056 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10c      	bne.n	8007010 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	8a7b      	ldrh	r3, [r7, #18]
 8007000:	4013      	ands	r3, r2
 8007002:	b29a      	uxth	r2, r3
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	3302      	adds	r3, #2
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	e00c      	b.n	800702a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	b2da      	uxtb	r2, r3
 8007018:	8a7b      	ldrh	r3, [r7, #18]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	4013      	ands	r3, r2
 800701e:	b2da      	uxtb	r2, r3
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	3301      	adds	r3, #1
 8007028:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1c6      	bne.n	8006fd6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	e000      	b.n	8007056 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007054:	2302      	movs	r3, #2
  }
}
 8007056:	4618      	mov	r0, r3
 8007058:	3720      	adds	r7, #32
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	4ba6      	ldr	r3, [pc, #664]	; (8007324 <UART_SetConfig+0x2c4>)
 800708c:	4013      	ands	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	6979      	ldr	r1, [r7, #20]
 8007094:	430b      	orrs	r3, r1
 8007096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a94      	ldr	r2, [pc, #592]	; (8007328 <UART_SetConfig+0x2c8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d120      	bne.n	800711e <UART_SetConfig+0xbe>
 80070dc:	4b93      	ldr	r3, [pc, #588]	; (800732c <UART_SetConfig+0x2cc>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d816      	bhi.n	8007118 <UART_SetConfig+0xb8>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <UART_SetConfig+0x90>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007101 	.word	0x08007101
 80070f4:	0800710d 	.word	0x0800710d
 80070f8:	08007107 	.word	0x08007107
 80070fc:	08007113 	.word	0x08007113
 8007100:	2301      	movs	r3, #1
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e150      	b.n	80073a8 <UART_SetConfig+0x348>
 8007106:	2302      	movs	r3, #2
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	e14d      	b.n	80073a8 <UART_SetConfig+0x348>
 800710c:	2304      	movs	r3, #4
 800710e:	77fb      	strb	r3, [r7, #31]
 8007110:	e14a      	b.n	80073a8 <UART_SetConfig+0x348>
 8007112:	2308      	movs	r3, #8
 8007114:	77fb      	strb	r3, [r7, #31]
 8007116:	e147      	b.n	80073a8 <UART_SetConfig+0x348>
 8007118:	2310      	movs	r3, #16
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e144      	b.n	80073a8 <UART_SetConfig+0x348>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a83      	ldr	r2, [pc, #524]	; (8007330 <UART_SetConfig+0x2d0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d132      	bne.n	800718e <UART_SetConfig+0x12e>
 8007128:	4b80      	ldr	r3, [pc, #512]	; (800732c <UART_SetConfig+0x2cc>)
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712e:	f003 030c 	and.w	r3, r3, #12
 8007132:	2b0c      	cmp	r3, #12
 8007134:	d828      	bhi.n	8007188 <UART_SetConfig+0x128>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0xdc>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007171 	.word	0x08007171
 8007140:	08007189 	.word	0x08007189
 8007144:	08007189 	.word	0x08007189
 8007148:	08007189 	.word	0x08007189
 800714c:	0800717d 	.word	0x0800717d
 8007150:	08007189 	.word	0x08007189
 8007154:	08007189 	.word	0x08007189
 8007158:	08007189 	.word	0x08007189
 800715c:	08007177 	.word	0x08007177
 8007160:	08007189 	.word	0x08007189
 8007164:	08007189 	.word	0x08007189
 8007168:	08007189 	.word	0x08007189
 800716c:	08007183 	.word	0x08007183
 8007170:	2300      	movs	r3, #0
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e118      	b.n	80073a8 <UART_SetConfig+0x348>
 8007176:	2302      	movs	r3, #2
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e115      	b.n	80073a8 <UART_SetConfig+0x348>
 800717c:	2304      	movs	r3, #4
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e112      	b.n	80073a8 <UART_SetConfig+0x348>
 8007182:	2308      	movs	r3, #8
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	e10f      	b.n	80073a8 <UART_SetConfig+0x348>
 8007188:	2310      	movs	r3, #16
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e10c      	b.n	80073a8 <UART_SetConfig+0x348>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a68      	ldr	r2, [pc, #416]	; (8007334 <UART_SetConfig+0x2d4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d120      	bne.n	80071da <UART_SetConfig+0x17a>
 8007198:	4b64      	ldr	r3, [pc, #400]	; (800732c <UART_SetConfig+0x2cc>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071a2:	2b30      	cmp	r3, #48	; 0x30
 80071a4:	d013      	beq.n	80071ce <UART_SetConfig+0x16e>
 80071a6:	2b30      	cmp	r3, #48	; 0x30
 80071a8:	d814      	bhi.n	80071d4 <UART_SetConfig+0x174>
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d009      	beq.n	80071c2 <UART_SetConfig+0x162>
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d810      	bhi.n	80071d4 <UART_SetConfig+0x174>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <UART_SetConfig+0x15c>
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d006      	beq.n	80071c8 <UART_SetConfig+0x168>
 80071ba:	e00b      	b.n	80071d4 <UART_SetConfig+0x174>
 80071bc:	2300      	movs	r3, #0
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e0f2      	b.n	80073a8 <UART_SetConfig+0x348>
 80071c2:	2302      	movs	r3, #2
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e0ef      	b.n	80073a8 <UART_SetConfig+0x348>
 80071c8:	2304      	movs	r3, #4
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e0ec      	b.n	80073a8 <UART_SetConfig+0x348>
 80071ce:	2308      	movs	r3, #8
 80071d0:	77fb      	strb	r3, [r7, #31]
 80071d2:	e0e9      	b.n	80073a8 <UART_SetConfig+0x348>
 80071d4:	2310      	movs	r3, #16
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e0e6      	b.n	80073a8 <UART_SetConfig+0x348>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a56      	ldr	r2, [pc, #344]	; (8007338 <UART_SetConfig+0x2d8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d120      	bne.n	8007226 <UART_SetConfig+0x1c6>
 80071e4:	4b51      	ldr	r3, [pc, #324]	; (800732c <UART_SetConfig+0x2cc>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071ee:	2bc0      	cmp	r3, #192	; 0xc0
 80071f0:	d013      	beq.n	800721a <UART_SetConfig+0x1ba>
 80071f2:	2bc0      	cmp	r3, #192	; 0xc0
 80071f4:	d814      	bhi.n	8007220 <UART_SetConfig+0x1c0>
 80071f6:	2b80      	cmp	r3, #128	; 0x80
 80071f8:	d009      	beq.n	800720e <UART_SetConfig+0x1ae>
 80071fa:	2b80      	cmp	r3, #128	; 0x80
 80071fc:	d810      	bhi.n	8007220 <UART_SetConfig+0x1c0>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <UART_SetConfig+0x1a8>
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d006      	beq.n	8007214 <UART_SetConfig+0x1b4>
 8007206:	e00b      	b.n	8007220 <UART_SetConfig+0x1c0>
 8007208:	2300      	movs	r3, #0
 800720a:	77fb      	strb	r3, [r7, #31]
 800720c:	e0cc      	b.n	80073a8 <UART_SetConfig+0x348>
 800720e:	2302      	movs	r3, #2
 8007210:	77fb      	strb	r3, [r7, #31]
 8007212:	e0c9      	b.n	80073a8 <UART_SetConfig+0x348>
 8007214:	2304      	movs	r3, #4
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	e0c6      	b.n	80073a8 <UART_SetConfig+0x348>
 800721a:	2308      	movs	r3, #8
 800721c:	77fb      	strb	r3, [r7, #31]
 800721e:	e0c3      	b.n	80073a8 <UART_SetConfig+0x348>
 8007220:	2310      	movs	r3, #16
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e0c0      	b.n	80073a8 <UART_SetConfig+0x348>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a44      	ldr	r2, [pc, #272]	; (800733c <UART_SetConfig+0x2dc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d125      	bne.n	800727c <UART_SetConfig+0x21c>
 8007230:	4b3e      	ldr	r3, [pc, #248]	; (800732c <UART_SetConfig+0x2cc>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800723a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800723e:	d017      	beq.n	8007270 <UART_SetConfig+0x210>
 8007240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007244:	d817      	bhi.n	8007276 <UART_SetConfig+0x216>
 8007246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800724a:	d00b      	beq.n	8007264 <UART_SetConfig+0x204>
 800724c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007250:	d811      	bhi.n	8007276 <UART_SetConfig+0x216>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <UART_SetConfig+0x1fe>
 8007256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725a:	d006      	beq.n	800726a <UART_SetConfig+0x20a>
 800725c:	e00b      	b.n	8007276 <UART_SetConfig+0x216>
 800725e:	2300      	movs	r3, #0
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	e0a1      	b.n	80073a8 <UART_SetConfig+0x348>
 8007264:	2302      	movs	r3, #2
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e09e      	b.n	80073a8 <UART_SetConfig+0x348>
 800726a:	2304      	movs	r3, #4
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e09b      	b.n	80073a8 <UART_SetConfig+0x348>
 8007270:	2308      	movs	r3, #8
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e098      	b.n	80073a8 <UART_SetConfig+0x348>
 8007276:	2310      	movs	r3, #16
 8007278:	77fb      	strb	r3, [r7, #31]
 800727a:	e095      	b.n	80073a8 <UART_SetConfig+0x348>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a2f      	ldr	r2, [pc, #188]	; (8007340 <UART_SetConfig+0x2e0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d125      	bne.n	80072d2 <UART_SetConfig+0x272>
 8007286:	4b29      	ldr	r3, [pc, #164]	; (800732c <UART_SetConfig+0x2cc>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007290:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007294:	d017      	beq.n	80072c6 <UART_SetConfig+0x266>
 8007296:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800729a:	d817      	bhi.n	80072cc <UART_SetConfig+0x26c>
 800729c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a0:	d00b      	beq.n	80072ba <UART_SetConfig+0x25a>
 80072a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a6:	d811      	bhi.n	80072cc <UART_SetConfig+0x26c>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <UART_SetConfig+0x254>
 80072ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b0:	d006      	beq.n	80072c0 <UART_SetConfig+0x260>
 80072b2:	e00b      	b.n	80072cc <UART_SetConfig+0x26c>
 80072b4:	2301      	movs	r3, #1
 80072b6:	77fb      	strb	r3, [r7, #31]
 80072b8:	e076      	b.n	80073a8 <UART_SetConfig+0x348>
 80072ba:	2302      	movs	r3, #2
 80072bc:	77fb      	strb	r3, [r7, #31]
 80072be:	e073      	b.n	80073a8 <UART_SetConfig+0x348>
 80072c0:	2304      	movs	r3, #4
 80072c2:	77fb      	strb	r3, [r7, #31]
 80072c4:	e070      	b.n	80073a8 <UART_SetConfig+0x348>
 80072c6:	2308      	movs	r3, #8
 80072c8:	77fb      	strb	r3, [r7, #31]
 80072ca:	e06d      	b.n	80073a8 <UART_SetConfig+0x348>
 80072cc:	2310      	movs	r3, #16
 80072ce:	77fb      	strb	r3, [r7, #31]
 80072d0:	e06a      	b.n	80073a8 <UART_SetConfig+0x348>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1b      	ldr	r2, [pc, #108]	; (8007344 <UART_SetConfig+0x2e4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d138      	bne.n	800734e <UART_SetConfig+0x2ee>
 80072dc:	4b13      	ldr	r3, [pc, #76]	; (800732c <UART_SetConfig+0x2cc>)
 80072de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80072e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072ea:	d017      	beq.n	800731c <UART_SetConfig+0x2bc>
 80072ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072f0:	d82a      	bhi.n	8007348 <UART_SetConfig+0x2e8>
 80072f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f6:	d00b      	beq.n	8007310 <UART_SetConfig+0x2b0>
 80072f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fc:	d824      	bhi.n	8007348 <UART_SetConfig+0x2e8>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <UART_SetConfig+0x2aa>
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007306:	d006      	beq.n	8007316 <UART_SetConfig+0x2b6>
 8007308:	e01e      	b.n	8007348 <UART_SetConfig+0x2e8>
 800730a:	2300      	movs	r3, #0
 800730c:	77fb      	strb	r3, [r7, #31]
 800730e:	e04b      	b.n	80073a8 <UART_SetConfig+0x348>
 8007310:	2302      	movs	r3, #2
 8007312:	77fb      	strb	r3, [r7, #31]
 8007314:	e048      	b.n	80073a8 <UART_SetConfig+0x348>
 8007316:	2304      	movs	r3, #4
 8007318:	77fb      	strb	r3, [r7, #31]
 800731a:	e045      	b.n	80073a8 <UART_SetConfig+0x348>
 800731c:	2308      	movs	r3, #8
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e042      	b.n	80073a8 <UART_SetConfig+0x348>
 8007322:	bf00      	nop
 8007324:	efff69f3 	.word	0xefff69f3
 8007328:	40011000 	.word	0x40011000
 800732c:	40023800 	.word	0x40023800
 8007330:	40004400 	.word	0x40004400
 8007334:	40004800 	.word	0x40004800
 8007338:	40004c00 	.word	0x40004c00
 800733c:	40005000 	.word	0x40005000
 8007340:	40011400 	.word	0x40011400
 8007344:	40007800 	.word	0x40007800
 8007348:	2310      	movs	r3, #16
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e02c      	b.n	80073a8 <UART_SetConfig+0x348>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a72      	ldr	r2, [pc, #456]	; (800751c <UART_SetConfig+0x4bc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d125      	bne.n	80073a4 <UART_SetConfig+0x344>
 8007358:	4b71      	ldr	r3, [pc, #452]	; (8007520 <UART_SetConfig+0x4c0>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007362:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007366:	d017      	beq.n	8007398 <UART_SetConfig+0x338>
 8007368:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800736c:	d817      	bhi.n	800739e <UART_SetConfig+0x33e>
 800736e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007372:	d00b      	beq.n	800738c <UART_SetConfig+0x32c>
 8007374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007378:	d811      	bhi.n	800739e <UART_SetConfig+0x33e>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <UART_SetConfig+0x326>
 800737e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007382:	d006      	beq.n	8007392 <UART_SetConfig+0x332>
 8007384:	e00b      	b.n	800739e <UART_SetConfig+0x33e>
 8007386:	2300      	movs	r3, #0
 8007388:	77fb      	strb	r3, [r7, #31]
 800738a:	e00d      	b.n	80073a8 <UART_SetConfig+0x348>
 800738c:	2302      	movs	r3, #2
 800738e:	77fb      	strb	r3, [r7, #31]
 8007390:	e00a      	b.n	80073a8 <UART_SetConfig+0x348>
 8007392:	2304      	movs	r3, #4
 8007394:	77fb      	strb	r3, [r7, #31]
 8007396:	e007      	b.n	80073a8 <UART_SetConfig+0x348>
 8007398:	2308      	movs	r3, #8
 800739a:	77fb      	strb	r3, [r7, #31]
 800739c:	e004      	b.n	80073a8 <UART_SetConfig+0x348>
 800739e:	2310      	movs	r3, #16
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e001      	b.n	80073a8 <UART_SetConfig+0x348>
 80073a4:	2310      	movs	r3, #16
 80073a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b0:	d15b      	bne.n	800746a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d828      	bhi.n	800740a <UART_SetConfig+0x3aa>
 80073b8:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <UART_SetConfig+0x360>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073ed 	.word	0x080073ed
 80073c8:	080073f5 	.word	0x080073f5
 80073cc:	0800740b 	.word	0x0800740b
 80073d0:	080073fb 	.word	0x080073fb
 80073d4:	0800740b 	.word	0x0800740b
 80073d8:	0800740b 	.word	0x0800740b
 80073dc:	0800740b 	.word	0x0800740b
 80073e0:	08007403 	.word	0x08007403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e4:	f7ff f88e 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 80073e8:	61b8      	str	r0, [r7, #24]
        break;
 80073ea:	e013      	b.n	8007414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ec:	f7ff f89e 	bl	800652c <HAL_RCC_GetPCLK2Freq>
 80073f0:	61b8      	str	r0, [r7, #24]
        break;
 80073f2:	e00f      	b.n	8007414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073f4:	4b4b      	ldr	r3, [pc, #300]	; (8007524 <UART_SetConfig+0x4c4>)
 80073f6:	61bb      	str	r3, [r7, #24]
        break;
 80073f8:	e00c      	b.n	8007414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fa:	f7fe ffb1 	bl	8006360 <HAL_RCC_GetSysClockFreq>
 80073fe:	61b8      	str	r0, [r7, #24]
        break;
 8007400:	e008      	b.n	8007414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007406:	61bb      	str	r3, [r7, #24]
        break;
 8007408:	e004      	b.n	8007414 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	77bb      	strb	r3, [r7, #30]
        break;
 8007412:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d074      	beq.n	8007504 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	005a      	lsls	r2, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	fbb2 f3f3 	udiv	r3, r2, r3
 800742e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b0f      	cmp	r3, #15
 8007434:	d916      	bls.n	8007464 <UART_SetConfig+0x404>
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800743c:	d212      	bcs.n	8007464 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f023 030f 	bic.w	r3, r3, #15
 8007446:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	b29b      	uxth	r3, r3
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	b29a      	uxth	r2, r3
 8007454:	89fb      	ldrh	r3, [r7, #14]
 8007456:	4313      	orrs	r3, r2
 8007458:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	89fa      	ldrh	r2, [r7, #14]
 8007460:	60da      	str	r2, [r3, #12]
 8007462:	e04f      	b.n	8007504 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	77bb      	strb	r3, [r7, #30]
 8007468:	e04c      	b.n	8007504 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800746a:	7ffb      	ldrb	r3, [r7, #31]
 800746c:	2b08      	cmp	r3, #8
 800746e:	d828      	bhi.n	80074c2 <UART_SetConfig+0x462>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <UART_SetConfig+0x418>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	0800749d 	.word	0x0800749d
 800747c:	080074a5 	.word	0x080074a5
 8007480:	080074ad 	.word	0x080074ad
 8007484:	080074c3 	.word	0x080074c3
 8007488:	080074b3 	.word	0x080074b3
 800748c:	080074c3 	.word	0x080074c3
 8007490:	080074c3 	.word	0x080074c3
 8007494:	080074c3 	.word	0x080074c3
 8007498:	080074bb 	.word	0x080074bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800749c:	f7ff f832 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 80074a0:	61b8      	str	r0, [r7, #24]
        break;
 80074a2:	e013      	b.n	80074cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074a4:	f7ff f842 	bl	800652c <HAL_RCC_GetPCLK2Freq>
 80074a8:	61b8      	str	r0, [r7, #24]
        break;
 80074aa:	e00f      	b.n	80074cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074ac:	4b1d      	ldr	r3, [pc, #116]	; (8007524 <UART_SetConfig+0x4c4>)
 80074ae:	61bb      	str	r3, [r7, #24]
        break;
 80074b0:	e00c      	b.n	80074cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074b2:	f7fe ff55 	bl	8006360 <HAL_RCC_GetSysClockFreq>
 80074b6:	61b8      	str	r0, [r7, #24]
        break;
 80074b8:	e008      	b.n	80074cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074be:	61bb      	str	r3, [r7, #24]
        break;
 80074c0:	e004      	b.n	80074cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	77bb      	strb	r3, [r7, #30]
        break;
 80074ca:	bf00      	nop
    }

    if (pclk != 0U)
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d018      	beq.n	8007504 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	085a      	lsrs	r2, r3, #1
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	441a      	add	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	2b0f      	cmp	r3, #15
 80074ea:	d909      	bls.n	8007500 <UART_SetConfig+0x4a0>
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f2:	d205      	bcs.n	8007500 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	e001      	b.n	8007504 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007510:	7fbb      	ldrb	r3, [r7, #30]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3720      	adds	r7, #32
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40007c00 	.word	0x40007c00
 8007520:	40023800 	.word	0x40023800
 8007524:	00f42400 	.word	0x00f42400

08007528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00a      	beq.n	8007596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01a      	beq.n	800763e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007626:	d10a      	bne.n	800763e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	605a      	str	r2, [r3, #4]
  }
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af02      	add	r7, sp, #8
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800767c:	f7fe f828 	bl	80056d0 <HAL_GetTick>
 8007680:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0308 	and.w	r3, r3, #8
 800768c:	2b08      	cmp	r3, #8
 800768e:	d10e      	bne.n	80076ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f81b 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e011      	b.n	80076d2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2220      	movs	r2, #32
 80076b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b09c      	sub	sp, #112	; 0x70
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ea:	e0a7      	b.n	800783c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f2:	f000 80a3 	beq.w	800783c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f6:	f7fd ffeb 	bl	80056d0 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007702:	429a      	cmp	r2, r3
 8007704:	d302      	bcc.n	800770c <UART_WaitOnFlagUntilTimeout+0x32>
 8007706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007708:	2b00      	cmp	r3, #0
 800770a:	d13f      	bne.n	800778c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800771a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800771c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007720:	667b      	str	r3, [r7, #100]	; 0x64
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800772a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800772c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e6      	bne.n	800770c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3308      	adds	r3, #8
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	f023 0301 	bic.w	r3, r3, #1
 8007754:	663b      	str	r3, [r7, #96]	; 0x60
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3308      	adds	r3, #8
 800775c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800775e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007760:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800776c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e5      	bne.n	800773e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2220      	movs	r2, #32
 8007776:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e068      	b.n	800785e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d050      	beq.n	800783c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a8:	d148      	bne.n	800783c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
 80077d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e6      	bne.n	80077b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	613b      	str	r3, [r7, #16]
   return(result);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f023 0301 	bic.w	r3, r3, #1
 80077fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007806:	623a      	str	r2, [r7, #32]
 8007808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	69f9      	ldr	r1, [r7, #28]
 800780c:	6a3a      	ldr	r2, [r7, #32]
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	61bb      	str	r3, [r7, #24]
   return(result);
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e5      	bne.n	80077e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2220      	movs	r2, #32
 800781e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2220      	movs	r2, #32
 8007824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2220      	movs	r2, #32
 800782c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e010      	b.n	800785e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69da      	ldr	r2, [r3, #28]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4013      	ands	r3, r2
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	429a      	cmp	r2, r3
 800784a:	bf0c      	ite	eq
 800784c:	2301      	moveq	r3, #1
 800784e:	2300      	movne	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	429a      	cmp	r2, r3
 8007858:	f43f af48 	beq.w	80076ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3770      	adds	r7, #112	; 0x70
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8007866:	b480      	push	{r7}
 8007868:	b08b      	sub	sp, #44	; 0x2c
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	ed87 0a02 	vstr	s0, [r7, #8]
 8007872:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	885b      	ldrh	r3, [r3, #2]
 800788a:	fb02 f303 	mul.w	r3, r2, r3
 800788e:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8007894:	e010      	b.n	80078b8 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	1d1a      	adds	r2, r3, #4
 800789a:	627a      	str	r2, [r7, #36]	; 0x24
 800789c:	ed93 7a00 	vldr	s14, [r3]
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	1d1a      	adds	r2, r3, #4
 80078a4:	623a      	str	r2, [r7, #32]
 80078a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1eb      	bne.n	8007896 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80078be:	2300      	movs	r3, #0
 80078c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80078c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	372c      	adds	r7, #44	; 0x2c
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	ed87 0a01 	vstr	s0, [r7, #4]
 80078dc:	ed97 0a01 	vldr	s0, [r7, #4]
 80078e0:	f003 f906 	bl	800aaf0 <log10f>
 80078e4:	eef0 7a40 	vmov.f32	s15, s0
 80078e8:	eeb0 0a67 	vmov.f32	s0, s15
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 80078f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	ed87 0b00 	vstr	d0, [r7]
 80078fe:	683c      	ldr	r4, [r7, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007906:	2301      	movs	r3, #1
 8007908:	461e      	mov	r6, r3
 800790a:	f04f 32ff 	mov.w	r2, #4294967295
 800790e:	4b10      	ldr	r3, [pc, #64]	; (8007950 <_ZSt5isinfd+0x5c>)
 8007910:	4620      	mov	r0, r4
 8007912:	4629      	mov	r1, r5
 8007914:	f7f9 f92a 	bl	8000b6c <__aeabi_dcmpun>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10b      	bne.n	8007936 <_ZSt5isinfd+0x42>
 800791e:	f04f 32ff 	mov.w	r2, #4294967295
 8007922:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <_ZSt5isinfd+0x5c>)
 8007924:	4620      	mov	r0, r4
 8007926:	4629      	mov	r1, r5
 8007928:	f7f9 f902 	bl	8000b30 <__aeabi_dcmple>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <_ZSt5isinfd+0x42>
 8007932:	2300      	movs	r3, #0
 8007934:	461e      	mov	r6, r3
 8007936:	b2f3      	uxtb	r3, r6
 8007938:	f083 0301 	eor.w	r3, r3, #1
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	bf14      	ite	ne
 8007942:	2301      	movne	r3, #1
 8007944:	2300      	moveq	r3, #0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007950:	7fefffff 	.word	0x7fefffff

08007954 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 8007964:	b5b0      	push	{r4, r5, r7, lr}
 8007966:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8007968:	f7fd feb2 	bl	80056d0 <HAL_GetTick>
 800796c:	4603      	mov	r3, r0
 800796e:	2200      	movs	r2, #0
 8007970:	461c      	mov	r4, r3
 8007972:	4615      	mov	r5, r2
 8007974:	4622      	mov	r2, r4
 8007976:	462b      	mov	r3, r5
}
 8007978:	4610      	mov	r0, r2
 800797a:	4619      	mov	r1, r3
 800797c:	bdb0      	pop	{r4, r5, r7, pc}

0800797e <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_us() {
 800797e:	b5b0      	push	{r4, r5, r7, lr}
 8007980:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8007982:	f7fd fea5 	bl	80056d0 <HAL_GetTick>
 8007986:	4603      	mov	r3, r0
 8007988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800798c:	fb02 f303 	mul.w	r3, r2, r3
 8007990:	2200      	movs	r2, #0
 8007992:	461c      	mov	r4, r3
 8007994:	4615      	mov	r5, r2
 8007996:	4622      	mov	r2, r4
 8007998:	462b      	mov	r3, r5
}
 800799a:	4610      	mov	r0, r2
 800799c:	4619      	mov	r1, r3
 800799e:	bdb0      	pop	{r4, r5, r7, pc}

080079a0 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 80079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	b08c      	sub	sp, #48	; 0x30
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	ed87 0a01 	vstr	s0, [r7, #4]
        *(c) = '\0';
    }


    ei_printf("%s", s);
}
 80079ac:	466b      	mov	r3, sp
 80079ae:	4698      	mov	r8, r3
    float n = f;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    char s[MAX_NUMBER_STRING_SIZE];
 80079b4:	4b78      	ldr	r3, [pc, #480]	; (8007b98 <_Z15ei_printf_floatf+0x1f8>)
 80079b6:	681e      	ldr	r6, [r3, #0]
 80079b8:	1e73      	subs	r3, r6, #1
 80079ba:	623b      	str	r3, [r7, #32]
 80079bc:	4632      	mov	r2, r6
 80079be:	2300      	movs	r3, #0
 80079c0:	4614      	mov	r4, r2
 80079c2:	461d      	mov	r5, r3
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	00eb      	lsls	r3, r5, #3
 80079ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079d2:	00e2      	lsls	r2, r4, #3
 80079d4:	4632      	mov	r2, r6
 80079d6:	2300      	movs	r3, #0
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	00cb      	lsls	r3, r1, #3
 80079e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80079ea:	00c2      	lsls	r2, r0, #3
 80079ec:	4633      	mov	r3, r6
 80079ee:	3307      	adds	r3, #7
 80079f0:	08db      	lsrs	r3, r3, #3
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	ebad 0d03 	sub.w	sp, sp, r3
 80079f8:	466b      	mov	r3, sp
 80079fa:	3300      	adds	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 80079fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007a02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a0a:	d106      	bne.n	8007a1a <_Z15ei_printf_floatf+0x7a>
        strcpy(s, "0");
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4963      	ldr	r1, [pc, #396]	; (8007b9c <_Z15ei_printf_floatf+0x1fc>)
 8007a10:	461a      	mov	r2, r3
 8007a12:	460b      	mov	r3, r1
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	8013      	strh	r3, [r2, #0]
 8007a18:	e0ad      	b.n	8007b76 <_Z15ei_printf_floatf+0x1d6>
        char *c = s;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
        int neg = (n < 0);
 8007a1e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007a22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2a:	bf4c      	ite	mi
 8007a2c:	2301      	movmi	r3, #1
 8007a2e:	2300      	movpl	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <_Z15ei_printf_floatf+0xa6>
            n = -n;
 8007a3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007a3e:	eef1 7a67 	vneg.f32	s15, s15
 8007a42:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        m = log10(n);
 8007a46:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8007a4a:	f7ff ff42 	bl	80078d2 <_ZSt5log10f>
 8007a4e:	eef0 7a40 	vmov.f32	s15, s0
 8007a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a56:	ee17 3a90 	vmov	r3, s15
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <_Z15ei_printf_floatf+0xcc>
            *(c++) = '-';
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	627a      	str	r2, [r7, #36]	; 0x24
 8007a68:	222d      	movs	r2, #45	; 0x2d
 8007a6a:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dc70      	bgt.n	8007b54 <_Z15ei_printf_floatf+0x1b4>
            m = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8007a76:	e06d      	b.n	8007b54 <_Z15ei_printf_floatf+0x1b4>
            double weight = pow(10.0, m);
 8007a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a7a:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8007b90 <_Z15ei_printf_floatf+0x1f0>
 8007a7e:	f000 f8b8 	bl	8007bf2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8007a82:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a92:	f7f9 f861 	bl	8000b58 <__aeabi_dcmpgt>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <_Z15ei_printf_floatf+0x114>
 8007a9c:	ed97 0b04 	vldr	d0, [r7, #16]
 8007aa0:	f7ff ff28 	bl	80078f4 <_ZSt5isinfd>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f083 0301 	eor.w	r3, r3, #1
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <_Z15ei_printf_floatf+0x114>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <_Z15ei_printf_floatf+0x116>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d03a      	beq.n	8007b30 <_Z15ei_printf_floatf+0x190>
                digit = floor(n / weight);
 8007aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007abc:	f7f8 fd64 	bl	8000588 <__aeabi_f2d>
 8007ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ac4:	f7f8 fee2 	bl	800088c <__aeabi_ddiv>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	ec43 2b17 	vmov	d7, r2, r3
 8007ad0:	eeb0 0a47 	vmov.f32	s0, s14
 8007ad4:	eef0 0a67 	vmov.f32	s1, s15
 8007ad8:	f003 f97e 	bl	800add8 <floor>
 8007adc:	ec53 2b10 	vmov	r2, r3, d0
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	f7f9 f858 	bl	8000b98 <__aeabi_d2iz>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8007aec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aee:	f7f8 fd4b 	bl	8000588 <__aeabi_f2d>
 8007af2:	4604      	mov	r4, r0
 8007af4:	460d      	mov	r5, r1
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f7f8 fd34 	bl	8000564 <__aeabi_i2d>
 8007afc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b00:	f7f8 fd9a 	bl	8000638 <__aeabi_dmul>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4620      	mov	r0, r4
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	f7f8 fbdc 	bl	80002c8 <__aeabi_dsub>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4610      	mov	r0, r2
 8007b16:	4619      	mov	r1, r3
 8007b18:	f7f9 f886 	bl	8000c28 <__aeabi_d2f>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                *(c++) = '0' + digit;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	1c59      	adds	r1, r3, #1
 8007b28:	6279      	str	r1, [r7, #36]	; 0x24
 8007b2a:	3230      	adds	r2, #48	; 0x30
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <_Z15ei_printf_floatf+0x1ae>
 8007b36:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b42:	dd04      	ble.n	8007b4e <_Z15ei_printf_floatf+0x1ae>
                *(c++) = '.';
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	627a      	str	r2, [r7, #36]	; 0x24
 8007b4a:	222e      	movs	r2, #46	; 0x2e
 8007b4c:	701a      	strb	r2, [r3, #0]
            m--;
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	3b01      	subs	r3, #1
 8007b52:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8007b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b56:	f7f8 fd17 	bl	8000588 <__aeabi_f2d>
 8007b5a:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <_Z15ei_printf_floatf+0x200>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fffa 	bl	8000b58 <__aeabi_dcmpgt>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d186      	bne.n	8007a78 <_Z15ei_printf_floatf+0xd8>
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	da83      	bge.n	8007a78 <_Z15ei_printf_floatf+0xd8>
        *(c) = '\0';
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	2200      	movs	r2, #0
 8007b74:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8007b76:	69f9      	ldr	r1, [r7, #28]
 8007b78:	480a      	ldr	r0, [pc, #40]	; (8007ba4 <_Z15ei_printf_floatf+0x204>)
 8007b7a:	f7fb fa1b 	bl	8002fb4 <_Z9ei_printfPKcz>
 8007b7e:	46c5      	mov	sp, r8
}
 8007b80:	bf00      	nop
 8007b82:	3730      	adds	r7, #48	; 0x30
 8007b84:	46bd      	mov	sp, r7
 8007b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b8a:	bf00      	nop
 8007b8c:	f3af 8000 	nop.w
 8007b90:	00000000 	.word	0x00000000
 8007b94:	40240000 	.word	0x40240000
 8007b98:	20000398 	.word	0x20000398
 8007b9c:	0800fbb8 	.word	0x0800fbb8
 8007ba0:	20000390 	.word	0x20000390
 8007ba4:	0800fbbc 	.word	0x0800fbbc

08007ba8 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f004 fa17 	bl	800bfe4 <malloc>
 8007bb6:	4603      	mov	r3, r0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f004 f9eb 	bl	800bfa8 <calloc>
 8007bd2:	4603      	mov	r3, r0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
    free(ptr);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f004 fa05 	bl	800bff4 <free>
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	ed87 0b02 	vstr	d0, [r7, #8]
 8007bfc:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7f8 fcb0 	bl	8000564 <__aeabi_i2d>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	ec43 2b11 	vmov	d1, r2, r3
 8007c0c:	ed97 0b02 	vldr	d0, [r7, #8]
 8007c10:	f002 fe90 	bl	800a934 <pow>
 8007c14:	eeb0 7a40 	vmov.f32	s14, s0
 8007c18:	eef0 7a60 	vmov.f32	s15, s1
    }
 8007c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8007c20:	eef0 0a67 	vmov.f32	s1, s15
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	2b12      	cmp	r3, #18
 8007c3a:	d84f      	bhi.n	8007cdc <TfLiteTypeGetName+0xb0>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <TfLiteTypeGetName+0x18>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c91 	.word	0x08007c91
 8007c48:	08007c95 	.word	0x08007c95
 8007c4c:	08007ca1 	.word	0x08007ca1
 8007c50:	08007ca9 	.word	0x08007ca9
 8007c54:	08007cb1 	.word	0x08007cb1
 8007c58:	08007cc5 	.word	0x08007cc5
 8007c5c:	08007cb9 	.word	0x08007cb9
 8007c60:	08007c9d 	.word	0x08007c9d
 8007c64:	08007cbd 	.word	0x08007cbd
 8007c68:	08007cad 	.word	0x08007cad
 8007c6c:	08007cc9 	.word	0x08007cc9
 8007c70:	08007ccd 	.word	0x08007ccd
 8007c74:	08007cc1 	.word	0x08007cc1
 8007c78:	08007cb5 	.word	0x08007cb5
 8007c7c:	08007cd1 	.word	0x08007cd1
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007ca5 	.word	0x08007ca5
 8007c88:	08007c99 	.word	0x08007c99
 8007c8c:	08007cd9 	.word	0x08007cd9
    case kTfLiteNoType:
      return "NOTYPE";
 8007c90:	4b16      	ldr	r3, [pc, #88]	; (8007cec <TfLiteTypeGetName+0xc0>)
 8007c92:	e024      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8007c94:	4b16      	ldr	r3, [pc, #88]	; (8007cf0 <TfLiteTypeGetName+0xc4>)
 8007c96:	e022      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt16:
      return "UINT16";
 8007c98:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <TfLiteTypeGetName+0xc8>)
 8007c9a:	e020      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteInt16:
      return "INT16";
 8007c9c:	4b16      	ldr	r3, [pc, #88]	; (8007cf8 <TfLiteTypeGetName+0xcc>)
 8007c9e:	e01e      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteInt32:
      return "INT32";
 8007ca0:	4b16      	ldr	r3, [pc, #88]	; (8007cfc <TfLiteTypeGetName+0xd0>)
 8007ca2:	e01c      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt32:
      return "UINT32";
 8007ca4:	4b16      	ldr	r3, [pc, #88]	; (8007d00 <TfLiteTypeGetName+0xd4>)
 8007ca6:	e01a      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt8:
      return "UINT8";
 8007ca8:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <TfLiteTypeGetName+0xd8>)
 8007caa:	e018      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteInt8:
      return "INT8";
 8007cac:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <TfLiteTypeGetName+0xdc>)
 8007cae:	e016      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteInt64:
      return "INT64";
 8007cb0:	4b16      	ldr	r3, [pc, #88]	; (8007d0c <TfLiteTypeGetName+0xe0>)
 8007cb2:	e014      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt64:
      return "UINT64";
 8007cb4:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <TfLiteTypeGetName+0xe4>)
 8007cb6:	e012      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteBool:
      return "BOOL";
 8007cb8:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <TfLiteTypeGetName+0xe8>)
 8007cba:	e010      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8007cbc:	4b16      	ldr	r3, [pc, #88]	; (8007d18 <TfLiteTypeGetName+0xec>)
 8007cbe:	e00e      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8007cc0:	4b16      	ldr	r3, [pc, #88]	; (8007d1c <TfLiteTypeGetName+0xf0>)
 8007cc2:	e00c      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteString:
      return "STRING";
 8007cc4:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <TfLiteTypeGetName+0xf4>)
 8007cc6:	e00a      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8007cc8:	4b16      	ldr	r3, [pc, #88]	; (8007d24 <TfLiteTypeGetName+0xf8>)
 8007cca:	e008      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8007ccc:	4b16      	ldr	r3, [pc, #88]	; (8007d28 <TfLiteTypeGetName+0xfc>)
 8007cce:	e006      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteResource:
      return "RESOURCE";
 8007cd0:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <TfLiteTypeGetName+0x100>)
 8007cd2:	e004      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteVariant:
      return "VARIANT";
 8007cd4:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <TfLiteTypeGetName+0x104>)
 8007cd6:	e002      	b.n	8007cde <TfLiteTypeGetName+0xb2>
    case kTfLiteInt4:
      return "INT4";
 8007cd8:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <TfLiteTypeGetName+0x108>)
 8007cda:	e000      	b.n	8007cde <TfLiteTypeGetName+0xb2>
  }
  return "Unknown type";
 8007cdc:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <TfLiteTypeGetName+0x10c>)
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	0800fbc0 	.word	0x0800fbc0
 8007cf0:	0800fbc8 	.word	0x0800fbc8
 8007cf4:	0800fbd0 	.word	0x0800fbd0
 8007cf8:	0800fbd8 	.word	0x0800fbd8
 8007cfc:	0800fbe0 	.word	0x0800fbe0
 8007d00:	0800fbe8 	.word	0x0800fbe8
 8007d04:	0800fbf0 	.word	0x0800fbf0
 8007d08:	0800fbf8 	.word	0x0800fbf8
 8007d0c:	0800fc00 	.word	0x0800fc00
 8007d10:	0800fc08 	.word	0x0800fc08
 8007d14:	0800fc10 	.word	0x0800fc10
 8007d18:	0800fc18 	.word	0x0800fc18
 8007d1c:	0800fc24 	.word	0x0800fc24
 8007d20:	0800fc30 	.word	0x0800fc30
 8007d24:	0800fc38 	.word	0x0800fc38
 8007d28:	0800fc40 	.word	0x0800fc40
 8007d2c:	0800fc48 	.word	0x0800fc48
 8007d30:	0800fc54 	.word	0x0800fc54
 8007d34:	0800fc5c 	.word	0x0800fc5c
 8007d38:	0800fc64 	.word	0x0800fc64

08007d3c <_ZN6tflite12RuntimeShapeC1Ev>:
  // RuntimeShape in TFLM supports up to 5 dimensions.
  // The name kMaxSmallSize comes from the same file of the upstream
  // tensorflow lite repo and need to be kept the same for max reuse.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape() : size_(0) {}
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 f828 	bl	8007dc4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff ffdc 	bl	8007d94 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8007ddc:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	461a      	mov	r2, r3
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	6978      	ldr	r0, [r7, #20]
 8007de8:	f005 fa91 	bl	800d30e <memcpy>
  }
 8007dec:	bf00      	nop
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff ffd3 	bl	8007dac <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8007e06:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	e00b      	b.n	8007e26 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4413      	add	r3, r2
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
 8007e1e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3301      	adds	r3, #1
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	dbee      	blt.n	8007e0e <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 8007e30:	697b      	ldr	r3, [r7, #20]
  }
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b086      	sub	sp, #24
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d103      	bne.n	8007e52 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff ff76 	bl	8007d3c <_ZN6tflite12RuntimeShapeC1Ev>
 8007e50:	e00d      	b.n	8007e6e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	3304      	adds	r3, #4
 8007e62:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	6939      	ldr	r1, [r7, #16]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff ff75 	bl	8007d58 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x18>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	e000      	b.n	8007eaa <_ZN6tflite9NumInputsEPK10TfLiteNode+0x1a>
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) {
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x18>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	e000      	b.n	8007ed0 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x1a>
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_elements; i += 2) {
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	e02a      	b.n	8007f44 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x68>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	da00      	bge.n	8007ef6 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x1a>
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	105b      	asrs	r3, r3, #1
 8007ef8:	461a      	mov	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4413      	add	r3, r2
 8007efe:	f993 3000 	ldrsb.w	r3, [r3]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	b25a      	sxtb	r2, r3
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	440b      	add	r3, r1
 8007f0c:	1112      	asrs	r2, r2, #4
 8007f0e:	b252      	sxtb	r2, r2
 8007f10:	701a      	strb	r2, [r3, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	3301      	adds	r3, #1
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d018      	beq.n	8007f4e <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x72>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da00      	bge.n	8007f24 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x48>
 8007f22:	3301      	adds	r3, #1
 8007f24:	105b      	asrs	r3, r3, #1
 8007f26:	461a      	mov	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f993 2000 	ldrsb.w	r2, [r3]
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	3301      	adds	r3, #1
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	440b      	add	r3, r1
 8007f38:	1112      	asrs	r2, r2, #4
 8007f3a:	b252      	sxtb	r2, r2
 8007f3c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements; i += 2) {
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	3302      	adds	r3, #2
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	dbd0      	blt.n	8007eee <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }
}
 8007f4c:	e000      	b.n	8007f50 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x74>
    if (i + 1 == num_elements) break;
 8007f4e:	bf00      	nop
}
 8007f50:	bf00      	nop
 8007f52:	371c      	adds	r7, #28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	ed93 7a00 	vldr	s14, [r3]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	edd3 7a00 	vldr	s15, [r3]
 8007f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7a:	d501      	bpl.n	8007f80 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	e000      	b.n	8007f82 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8007f80:	687b      	ldr	r3, [r7, #4]
    }
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8007f8e:	b480      	push	{r7}
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007f96:	4618      	mov	r0, r3
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8007fa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007fa4:	b088      	sub	sp, #32
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	ed87 0b02 	vstr	d0, [r7, #8]
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 8007fb0:	f04f 0200 	mov.w	r2, #0
 8007fb4:	f04f 0300 	mov.w	r3, #0
 8007fb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fbc:	f7f8 fda4 	bl	8000b08 <__aeabi_dcmpeq>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d006      	beq.n	8007fd4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
    return;
 8007fd2:	e068      	b.n	80080a6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8007fd4:	6838      	ldr	r0, [r7, #0]
 8007fd6:	ed97 0b02 	vldr	d0, [r7, #8]
 8007fda:	f002 fd1b 	bl	800aa14 <frexp>
 8007fde:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8007fe2:	f04f 0200 	mov.w	r2, #0
 8007fe6:	4b32      	ldr	r3, [pc, #200]	; (80080b0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8007fe8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fec:	f7f8 fb24 	bl	8000638 <__aeabi_dmul>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	ec43 2b17 	vmov	d7, r2, r3
 8007ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8007ffc:	eef0 0a67 	vmov.f32	s1, s15
 8008000:	f000 f85a 	bl	80080b8 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8008004:	ec53 2b10 	vmov	r2, r3, d0
 8008008:	4610      	mov	r0, r2
 800800a:	4619      	mov	r1, r3
 800800c:	f7f8 fec4 	bl	8000d98 <__aeabi_d2lz>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8008018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800801c:	4925      	ldr	r1, [pc, #148]	; (80080b4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 800801e:	428a      	cmp	r2, r1
 8008020:	f173 0300 	sbcs.w	r3, r3, #0
 8008024:	db01      	blt.n	800802a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8008026:	f003 ff99 	bl	800bf5c <abort>
  if (q_fixed == (1LL << 31)) {
 800802a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800802e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8008032:	430b      	orrs	r3, r1
 8008034:	d118      	bne.n	8008068 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8008036:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	da05      	bge.n	800804a <_ZN6tflite18QuantizeMultiplierEdPlPi+0xaa>
 800803e:	f112 0801 	adds.w	r8, r2, #1
 8008042:	f143 0900 	adc.w	r9, r3, #0
 8008046:	4642      	mov	r2, r8
 8008048:	464b      	mov	r3, r9
 800804a:	f04f 0000 	mov.w	r0, #0
 800804e:	f04f 0100 	mov.w	r1, #0
 8008052:	0850      	lsrs	r0, r2, #1
 8008054:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008058:	1059      	asrs	r1, r3, #1
 800805a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    ++*shift;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8008068:	f7ff ff91 	bl	8007f8e <_ZNSt14numeric_limitsIlE3maxEv>
 800806c:	4603      	mov	r3, r0
 800806e:	17da      	asrs	r2, r3, #31
 8008070:	461c      	mov	r4, r3
 8008072:	4615      	mov	r5, r2
 8008074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008078:	4294      	cmp	r4, r2
 800807a:	eb75 0303 	sbcs.w	r3, r5, r3
 800807e:	da01      	bge.n	8008084 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8008080:	f003 ff6c 	bl	800bf5c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f113 0f1f 	cmn.w	r3, #31
 800808c:	da08      	bge.n	80080a0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]
}
 80080a6:	3720      	adds	r7, #32
 80080a8:	46bd      	mov	sp, r7
 80080aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80080ae:	bf00      	nop
 80080b0:	41e00000 	.word	0x41e00000
 80080b4:	80000001 	.word	0x80000001

080080b8 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	ed87 0b00 	vstr	d0, [r7]
 80080c2:	ed97 0b00 	vldr	d0, [r7]
 80080c6:	f002 ff07 	bl	800aed8 <round>
 80080ca:	eeb0 7a40 	vmov.f32	s14, s0
 80080ce:	eef0 7a60 	vmov.f32	s15, s1
 80080d2:	eeb0 0a47 	vmov.f32	s0, s14
 80080d6:	eef0 0a67 	vmov.f32	s1, s15
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80080ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80080ee:	f7f9 f8fc 	bl	80012ea <_ZSt5roundf>
 80080f2:	eef0 7a40 	vmov.f32	s15, s0
 80080f6:	eeb0 0a67 	vmov.f32	s0, s15
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	ed87 0b00 	vstr	d0, [r7]
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008112:	ec43 2b17 	vmov	d7, r2, r3
 8008116:	eeb0 0a47 	vmov.f32	s0, s14
 800811a:	eef0 0a67 	vmov.f32	s1, s15
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800812e:	4618      	mov	r0, r3
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	ffff8000 	.word	0xffff8000

0800813c <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
 8008140:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008144:	4618      	mov	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800814e:	b480      	push	{r7}
 8008150:	af00      	add	r7, sp, #0
 8008152:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008156:	4618      	mov	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
 8008164:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8008168:	4618      	mov	r0, r3
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8008172:	b480      	push	{r7}
 8008174:	af00      	add	r7, sp, #0
 8008176:	237f      	movs	r3, #127	; 0x7f
 8008178:	4618      	mov	r0, r3
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8008182:	b480      	push	{r7}
 8008184:	af00      	add	r7, sp, #0
 8008186:	2300      	movs	r3, #0
 8008188:	4618      	mov	r0, r3
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8008192:	b480      	push	{r7}
 8008194:	af00      	add	r7, sp, #0
 8008196:	23ff      	movs	r3, #255	; 0xff
 8008198:	4618      	mov	r0, r3
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	0000      	movs	r0, r0
 80081a4:	0000      	movs	r0, r0
	...

080081a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80081a8:	b5b0      	push	{r4, r5, r7, lr}
 80081aa:	b08e      	sub	sp, #56	; 0x38
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7f8 f9e4 	bl	8000588 <__aeabi_f2d>
 80081c0:	4604      	mov	r4, r0
 80081c2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7f8 f9dd 	bl	8000588 <__aeabi_f2d>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80081d2:	4620      	mov	r0, r4
 80081d4:	4629      	mov	r1, r5
 80081d6:	f7f8 fa2f 	bl	8000638 <__aeabi_dmul>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d04b      	beq.n	8008280 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7f8 f9cb 	bl	8000588 <__aeabi_f2d>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80081fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008202:	f7f8 f861 	bl	80002c8 <__aeabi_dsub>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	ec43 2b17 	vmov	d7, r2, r3
 800820e:	eeb0 0a47 	vmov.f32	s0, s14
 8008212:	eef0 0a67 	vmov.f32	s1, s15
 8008216:	f7ff ff73 	bl	8008100 <_ZSt3absd>
 800821a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800821e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	4618      	mov	r0, r3
 8008224:	f7f8 f9b0 	bl	8000588 <__aeabi_f2d>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8008230:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008234:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008238:	f7f8 fb28 	bl	800088c <__aeabi_ddiv>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4610      	mov	r0, r2
 8008242:	4619      	mov	r1, r3
 8008244:	2301      	movs	r3, #1
 8008246:	461c      	mov	r4, r3
 8008248:	a318      	add	r3, pc, #96	; (adr r3, 80082ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f7f8 fc6f 	bl	8000b30 <__aeabi_dcmple>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8008258:	2300      	movs	r3, #0
 800825a:	461c      	mov	r4, r3
 800825c:	b2e3      	uxtb	r3, r4
 800825e:	f083 0301 	eor.w	r3, r3, #1
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	691c      	ldr	r4, [r3, #16]
 800826c:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8008274:	4a0b      	ldr	r2, [pc, #44]	; (80082a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8008276:	490c      	ldr	r1, [pc, #48]	; (80082a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	47a0      	blx	r4
 800827c:	2301      	movs	r3, #1
 800827e:	e009      	b.n	8008294 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8008280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f812 	bl	80082b4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8008290:	4603      	mov	r3, r0
                                          multiplier);
 8008292:	bf00      	nop
}
 8008294:	4618      	mov	r0, r3
 8008296:	3730      	adds	r7, #48	; 0x30
 8008298:	46bd      	mov	sp, r7
 800829a:	bdb0      	pop	{r4, r5, r7, pc}
 800829c:	f3af 8000 	nop.w
 80082a0:	0800ff04 	.word	0x0800ff04
 80082a4:	0800fcd4 	.word	0x0800fcd4
 80082a8:	0800fdd0 	.word	0x0800fdd0
 80082ac:	47ae147b 	.word	0x47ae147b
 80082b0:	3f947ae1 	.word	0x3f947ae1

080082b4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b089      	sub	sp, #36	; 0x24
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80082ce:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80082d2:	ee17 0a90 	vmov	r0, s15
 80082d6:	f7f8 f957 	bl	8000588 <__aeabi_f2d>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80082e2:	2301      	movs	r3, #1
 80082e4:	461c      	mov	r4, r3
 80082e6:	f04f 0200 	mov.w	r2, #0
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082f2:	f7f8 fc27 	bl	8000b44 <__aeabi_dcmpge>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80082fc:	2300      	movs	r3, #0
 80082fe:	461c      	mov	r4, r3
 8008300:	b2e3      	uxtb	r3, r4
 8008302:	f083 0301 	eor.w	r3, r3, #1
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	691c      	ldr	r4, [r3, #16]
 8008310:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	f240 1349 	movw	r3, #329	; 0x149
 8008318:	4a0e      	ldr	r2, [pc, #56]	; (8008354 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800831a:	490f      	ldr	r1, [pc, #60]	; (8008358 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	47a0      	blx	r4
 8008320:	2301      	movs	r3, #1
 8008322:	e010      	b.n	8008346 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	4618      	mov	r0, r3
 800832a:	f7f8 f92d 	bl	8000588 <__aeabi_f2d>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008336:	f7f8 faa9 	bl	800088c <__aeabi_ddiv>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008340:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	bd90      	pop	{r4, r7, pc}
 800834e:	bf00      	nop
 8008350:	0800ff28 	.word	0x0800ff28
 8008354:	0800fcd4 	.word	0x0800fcd4
 8008358:	0800fdd0 	.word	0x0800fdd0

0800835c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 800835c:	b590      	push	{r4, r7, lr}
 800835e:	b08b      	sub	sp, #44	; 0x2c
 8008360:	af02      	add	r7, sp, #8
 8008362:	6178      	str	r0, [r7, #20]
 8008364:	ed87 0a04 	vstr	s0, [r7, #16]
 8008368:	60f9      	str	r1, [r7, #12]
 800836a:	edc7 0a02 	vstr	s1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8008370:	ed97 7a02 	vldr	s14, [r7, #8]
 8008374:	edd7 7a04 	vldr	s15, [r7, #16]
 8008378:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800837c:	eeb0 0a66 	vmov.f32	s0, s13
 8008380:	f7ff feae 	bl	80080e0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8008384:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8008388:	f7ff fee1 	bl	800814e <_ZNSt14numeric_limitsIlE3minEv>
 800838c:	ee07 0a90 	vmov	s15, r0
 8008390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008394:	ed97 7a07 	vldr	s14, [r7, #28]
 8008398:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a0:	db0e      	blt.n	80083c0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80083a2:	f7ff fdf4 	bl	8007f8e <_ZNSt14numeric_limitsIlE3maxEv>
 80083a6:	ee07 0a90 	vmov	s15, r0
 80083aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80083ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80083b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ba:	d801      	bhi.n	80083c0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 80083bc:	2301      	movs	r3, #1
 80083be:	e000      	b.n	80083c2 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 80083c0:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80083c2:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 80083c4:	7efb      	ldrb	r3, [r7, #27]
 80083c6:	f083 0301 	eor.w	r3, r3, #1
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	691c      	ldr	r4, [r3, #16]
 80083d4:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	f240 1357 	movw	r3, #343	; 0x157
 80083dc:	4a0b      	ldr	r2, [pc, #44]	; (800840c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 80083de:	490c      	ldr	r1, [pc, #48]	; (8008410 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 80083e0:	6978      	ldr	r0, [r7, #20]
 80083e2:	47a0      	blx	r4
 80083e4:	2301      	movs	r3, #1
 80083e6:	e00a      	b.n	80083fe <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 80083e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80083ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083f0:	ee17 2a90 	vmov	r2, s15
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	441a      	add	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3724      	adds	r7, #36	; 0x24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd90      	pop	{r4, r7, pc}
 8008406:	bf00      	nop
 8008408:	0800ff44 	.word	0x0800ff44
 800840c:	0800fcd4 	.word	0x0800fcd4
 8008410:	0800fdd0 	.word	0x0800fdd0

08008414 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8008414:	b580      	push	{r7, lr}
 8008416:	b08a      	sub	sp, #40	; 0x28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	460b      	mov	r3, r1
 8008422:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8008430:	7afb      	ldrb	r3, [r7, #11]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d120      	bne.n	8008478 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8008436:	f107 0314 	add.w	r3, r7, #20
 800843a:	461a      	mov	r2, r3
 800843c:	eddf 0a52 	vldr	s1, [pc, #328]	; 8008588 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8008440:	6a39      	ldr	r1, [r7, #32]
 8008442:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff ff88 	bl	800835c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800844c:	4603      	mov	r3, r0
 800844e:	76fb      	strb	r3, [r7, #27]
 8008450:	7efb      	ldrb	r3, [r7, #27]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 8008456:	7efb      	ldrb	r3, [r7, #27]
 8008458:	e091      	b.n	800857e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800845a:	f107 0214 	add.w	r2, r7, #20
 800845e:	1d3b      	adds	r3, r7, #4
 8008460:	4611      	mov	r1, r2
 8008462:	4618      	mov	r0, r3
 8008464:	f7fb fd6c 	bl	8003f40 <_ZSt3maxIlERKT_S2_S2_>
 8008468:	4603      	mov	r3, r0
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	e081      	b.n	800857c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	2b03      	cmp	r3, #3
 800847c:	d13a      	bne.n	80084f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 800847e:	f107 0314 	add.w	r3, r7, #20
 8008482:	461a      	mov	r2, r3
 8008484:	eddf 0a40 	vldr	s1, [pc, #256]	; 8008588 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8008488:	6a39      	ldr	r1, [r7, #32]
 800848a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7ff ff64 	bl	800835c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8008494:	4603      	mov	r3, r0
 8008496:	777b      	strb	r3, [r7, #29]
 8008498:	7f7b      	ldrb	r3, [r7, #29]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 800849e:	7f7b      	ldrb	r3, [r7, #29]
 80084a0:	e06d      	b.n	800857e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80084a2:	f107 0214 	add.w	r2, r7, #20
 80084a6:	1d3b      	adds	r3, r7, #4
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fb fd48 	bl	8003f40 <_ZSt3maxIlERKT_S2_S2_>
 80084b0:	4603      	mov	r3, r0
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b6:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 80084b8:	f107 0314 	add.w	r3, r7, #20
 80084bc:	461a      	mov	r2, r3
 80084be:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80084c2:	6a39      	ldr	r1, [r7, #32]
 80084c4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f7ff ff47 	bl	800835c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80084ce:	4603      	mov	r3, r0
 80084d0:	773b      	strb	r3, [r7, #28]
 80084d2:	7f3b      	ldrb	r3, [r7, #28]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 80084d8:	7f3b      	ldrb	r3, [r7, #28]
 80084da:	e050      	b.n	800857e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 80084dc:	f107 0214 	add.w	r2, r7, #20
 80084e0:	463b      	mov	r3, r7
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fb fd17 	bl	8003f18 <_ZSt3minIlERKT_S2_S2_>
 80084ea:	4603      	mov	r3, r0
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	e043      	b.n	800857c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d13a      	bne.n	8008570 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 80084fa:	f107 0314 	add.w	r3, r7, #20
 80084fe:	461a      	mov	r2, r3
 8008500:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8008504:	6a39      	ldr	r1, [r7, #32]
 8008506:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7ff ff26 	bl	800835c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8008510:	4603      	mov	r3, r0
 8008512:	77fb      	strb	r3, [r7, #31]
 8008514:	7ffb      	ldrb	r3, [r7, #31]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 800851a:	7ffb      	ldrb	r3, [r7, #31]
 800851c:	e02f      	b.n	800857e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 800851e:	f107 0214 	add.w	r2, r7, #20
 8008522:	1d3b      	adds	r3, r7, #4
 8008524:	4611      	mov	r1, r2
 8008526:	4618      	mov	r0, r3
 8008528:	f7fb fd0a 	bl	8003f40 <_ZSt3maxIlERKT_S2_S2_>
 800852c:	4603      	mov	r3, r0
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008532:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8008534:	f107 0314 	add.w	r3, r7, #20
 8008538:	461a      	mov	r2, r3
 800853a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800853e:	6a39      	ldr	r1, [r7, #32]
 8008540:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff ff09 	bl	800835c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800854a:	4603      	mov	r3, r0
 800854c:	77bb      	strb	r3, [r7, #30]
 800854e:	7fbb      	ldrb	r3, [r7, #30]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 8008554:	7fbb      	ldrb	r3, [r7, #30]
 8008556:	e012      	b.n	800857e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8008558:	f107 0214 	add.w	r2, r7, #20
 800855c:	463b      	mov	r3, r7
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7fb fcd9 	bl	8003f18 <_ZSt3minIlERKT_S2_S2_>
 8008566:	4603      	mov	r3, r0
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	e005      	b.n	800857c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008574:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3728      	adds	r7, #40	; 0x28
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	00000000 	.word	0x00000000

0800858c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800858c:	b590      	push	{r4, r7, lr}
 800858e:	b08b      	sub	sp, #44	; 0x2c
 8008590:	af04      	add	r7, sp, #16
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	460b      	mov	r3, r1
 800859a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d108      	bne.n	80085be <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 80085ac:	f7ff fde9 	bl	8008182 <_ZNSt14numeric_limitsIhE3minEv>
 80085b0:	4603      	mov	r3, r0
 80085b2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 80085b4:	f7ff fded 	bl	8008192 <_ZNSt14numeric_limitsIhE3maxEv>
 80085b8:	4603      	mov	r3, r0
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	e025      	b.n	800860a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	d108      	bne.n	80085d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80085c6:	f7ff fdcb 	bl	8008160 <_ZNSt14numeric_limitsIaE3minEv>
 80085ca:	4603      	mov	r3, r0
 80085cc:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80085ce:	f7ff fdd0 	bl	8008172 <_ZNSt14numeric_limitsIaE3maxEv>
 80085d2:	4603      	mov	r3, r0
 80085d4:	613b      	str	r3, [r7, #16]
 80085d6:	e018      	b.n	800860a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b07      	cmp	r3, #7
 80085de:	d108      	bne.n	80085f2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80085e0:	f7ff fda2 	bl	8008128 <_ZNSt14numeric_limitsIsE3minEv>
 80085e4:	4603      	mov	r3, r0
 80085e6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80085e8:	f7ff fda8 	bl	800813c <_ZNSt14numeric_limitsIsE3maxEv>
 80085ec:	4603      	mov	r3, r0
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	e00b      	b.n	800860a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	691c      	ldr	r4, [r3, #16]
 80085f6:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	f240 138f 	movw	r3, #399	; 0x18f
 80085fe:	4a0d      	ldr	r2, [pc, #52]	; (8008634 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8008600:	490d      	ldr	r1, [pc, #52]	; (8008638 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	47a0      	blx	r4
 8008606:	2301      	movs	r3, #1
 8008608:	e00d      	b.n	8008626 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 800860a:	7af9      	ldrb	r1, [r7, #11]
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	9302      	str	r3, [sp, #8]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7ff fef9 	bl	8008414 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 8008622:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 8008624:	bf00      	nop
}
 8008626:	4618      	mov	r0, r3
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	bd90      	pop	{r4, r7, pc}
 800862e:	bf00      	nop
 8008630:	0800ff6c 	.word	0x0800ff6c
 8008634:	0800fcd4 	.word	0x0800fcd4
 8008638:	0800fdd0 	.word	0x0800fdd0

0800863c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:
  int32_t DimensionsCount() const { return size_; }
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <_ZN6tflite14AlignPointerUpEPhj>:
#include "edge-impulse-sdk/tensorflow/lite/micro/flatbuffer_conversions_bridge.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	1e5a      	subs	r2, r3, #1
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8008676:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8008678:	68bb      	ldr	r3, [r7, #8]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
	...

08008688 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 f854 	bl	8008744 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 800869c:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80086a2:	2300      	movs	r3, #0
 80086a4:	61bb      	str	r3, [r7, #24]
 80086a6:	e011      	b.n	80086cc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	4613      	mov	r3, r2
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	461a      	mov	r2, r3
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	4413      	add	r3, r2
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d102      	bne.n	80086c6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	3301      	adds	r3, #1
 80086c4:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	3301      	adds	r3, #1
 80086ca:	61bb      	str	r3, [r7, #24]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d3e8      	bcc.n	80086a8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	2b0b      	cmp	r3, #11
 80086da:	d905      	bls.n	80086e8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 80086dc:	4917      	ldr	r1, [pc, #92]	; (800873c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 80086de:	4818      	ldr	r0, [pc, #96]	; (8008740 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb8>)
 80086e0:	f000 f83f 	bl	8008762 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e024      	b.n	8008732 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	4613      	mov	r3, r2
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	4413      	add	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	4413      	add	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
  *current_request = {};
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	461a      	mov	r2, r3
 8008700:	2300      	movs	r3, #0
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	6053      	str	r3, [r2, #4]
 8008706:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f04f 32ff 	mov.w	r2, #4294967295
 8008714:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	461a      	mov	r2, r3
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	1c5a      	adds	r2, r3, #1
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3720      	adds	r7, #32
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	080114b4 	.word	0x080114b4
 8008740:	08010150 	.word	0x08010150

08008744 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
  }

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	2104      	movs	r1, #4
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff ff7e 	bl	8008654 <_ZN6tflite14AlignPointerUpEPhj>
 8008758:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>:
namespace tflite {

// From
// https://stackoverflow.com/questions/23235910/variadic-unused-function-macro
template <typename... Args>
void Unused(Args&&... args) {
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
  (void)(sizeof...(args));
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <_ZN6tflite10MicroGraph14GetAllocationsEv>:
    current_subgraph_index_ = subgraph_idx;
  }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
#include <cstdint>

#include "edge-impulse-sdk/tensorflow/lite/micro/micro_log.h"

namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 80087b6:	4a0c      	ldr	r2, [pc, #48]	; (80087e8 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x40>)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	605a      	str	r2, [r3, #4]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	609a      	str	r2, [r3, #8]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	60da      	str	r2, [r3, #12]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	611a      	str	r2, [r3, #16]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	615a      	str	r2, [r3, #20]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	080114c0 	.word	0x080114c0

080087ec <_ZN6tflite12MicroContextD1Ev>:

MicroContext::~MicroContext() {}
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	4a04      	ldr	r2, [pc, #16]	; (8008808 <_ZN6tflite12MicroContextD1Ev+0x1c>)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	080114c0 	.word	0x080114c0

0800880c <_ZN6tflite12MicroContextD0Ev>:
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff ffe9 	bl	80087ec <_ZN6tflite12MicroContextD1Ev>
 800881a:	2118      	movs	r1, #24
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f002 f863 	bl	800a8e8 <_ZdlPvj>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  return allocator_.AllocatePersistentBuffer(bytes);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3314      	adds	r3, #20
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	4610      	mov	r0, r2
 8008848:	4798      	blx	r3
 800884a:	4603      	mov	r3, r0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroContext::RequestScratchBufferInArena(size_t bytes,
                                                       int* buffer_idx) {
 8008854:	b590      	push	{r4, r7, lr}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  return allocator_.RequestScratchBufferInArena(
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff ff85 	bl	8008778 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 800886e:	4602      	mov	r2, r0
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	4620      	mov	r0, r4
 8008876:	f7ff ff07 	bl	8008688 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 800887a:	4603      	mov	r3, r0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	bd90      	pop	{r4, r7, pc}

08008884 <_ZN6tflite12MicroContext16GetScratchBufferEi>:

void* MicroContext::GetScratchBuffer(int buffer_idx) {
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691a      	ldr	r2, [r3, #16]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]
  return handle->data;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 80088aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685d      	ldr	r5, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3304      	adds	r3, #4
 80088c2:	681c      	ldr	r4, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68de      	ldr	r6, [r3, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff ff5f 	bl	8008790 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80088d2:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff ff4d 	bl	8008778 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80088de:	4603      	mov	r3, r0
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	4642      	mov	r2, r8
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	47a0      	blx	r4
 80088ec:	4603      	mov	r3, r0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080088f8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:

int MicroContext::GetTensorIndex(int index, int max_size,
                                 const int* tensor_indices) {
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	db0f      	blt.n	800892c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	da0b      	bge.n	800892c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	4413      	add	r3, r2
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008926:	d001      	beq.n	800892c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
      return tensor_index;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	e001      	b.n	8008930 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x38>
    }
  }
  return -1;
 800892c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008930:	4618      	mov	r0, r3
 8008932:	371c      	adds	r7, #28
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3304      	adds	r3, #4
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f7ff ffce 	bl	80088f8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 800895c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	da01      	bge.n	8008968 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8008964:	2300      	movs	r3, #0
 8008966:	e008      	b.n	800897a <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3314      	adds	r3, #20
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6979      	ldr	r1, [r7, #20]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	4798      	blx	r3
 8008976:	4603      	mov	r3, r0
 8008978:	bf00      	nop
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 8008982:	b580      	push	{r7, lr}
 8008984:	b086      	sub	sp, #24
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	3304      	adds	r3, #4
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f7ff ffab 	bl	80088f8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 80089a2:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da01      	bge.n	80089ae <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 80089aa:	2300      	movs	r3, #0
 80089ac:	e008      	b.n	80089c0 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3314      	adds	r3, #20
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6979      	ldr	r1, [r7, #20]
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	4798      	blx	r3
 80089bc:	4603      	mov	r3, r0
 80089be:	bf00      	nop
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempIntermediateTensor(
    const TfLiteNode* node, int index) {
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	681a      	ldr	r2, [r3, #0]
                                          node->intermediates->data);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	3304      	adds	r3, #4
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff ff88 	bl	80088f8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 80089e8:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da01      	bge.n	80089f4 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 80089f0:	2300      	movs	r3, #0
 80089f2:	e008      	b.n	8008a06 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3314      	adds	r3, #20
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6979      	ldr	r1, [r7, #20]
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	4798      	blx	r3
 8008a02:	4603      	mov	r3, r0
 8008a04:	bf00      	nop
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3308      	adds	r3, #8
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4798      	blx	r3
 8008a2c:	bf00      	nop
}
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <_ZN6tflite12MicroContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
 8008a34:	b590      	push	{r4, r7, lr}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff fea4 	bl	8008790 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008a48:	4604      	mov	r4, r0
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff fe92 	bl	8008778 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8008a54:	4603      	mov	r3, r0
 8008a56:	00db      	lsls	r3, r3, #3
 8008a58:	4423      	add	r3, r4
              .tensors[tensor_idx];
 8008a5a:	6859      	ldr	r1, [r3, #4]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd90      	pop	{r4, r7, pc}

08008a70 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 8008a70:	b40e      	push	{r1, r2, r3}
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b085      	sub	sp, #20
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8008a7a:	f107 0320 	add.w	r3, r7, #32
 8008a7e:	60fb      	str	r3, [r7, #12]
  Log(format, args);
 8008a80:	68f9      	ldr	r1, [r7, #12]
 8008a82:	69f8      	ldr	r0, [r7, #28]
 8008a84:	f000 f81e 	bl	8008ac4 <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 8008a88:	bf00      	nop
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a92:	b003      	add	sp, #12
 8008a94:	4770      	bx	lr

08008a96 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>:
void Unused(Args&&... args) {
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <_Z3LogPKcSt9__va_list>:
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
#include "edge-impulse-sdk/tensorflow/lite/micro/debug_log.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_string.h"
#endif

void Log(const char* format, va_list args) {
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 8008ace:	bf00      	nop
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8008ae8:	f003 fa38 	bl	800bf5c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x12>
 8008b06:	f003 fa29 	bl	800bf5c <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8008b24:	f003 fa1a 	bl	800bf5c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 8008b42:	f003 fa0b 	bl	800bf5c <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	da01      	bge.n	8008b66 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8008b62:	f003 f9fb 	bl	800bf5c <abort>
    TFLITE_DCHECK_LT(i, size_);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	db01      	blt.n	8008b74 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8008b70:	f003 f9f4 	bl	800bf5c <abort>
    return dims_[i];
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	685b      	ldr	r3, [r3, #4]
  }
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	4b04      	ldr	r3, [pc, #16]	; (8008ba0 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eeb0 0a67 	vmov.f32	s0, s15
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	7f7fffff 	.word	0x7f7fffff

08008ba4 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
      break;
  }
}

template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	ed87 0a03 	vstr	s0, [r7, #12]
 8008bc6:	edc7 0a02 	vstr	s1, [r7, #8]
 8008bca:	ed87 1a01 	vstr	s2, [r7, #4]
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
 8008bce:	f107 0208 	add.w	r2, r7, #8
 8008bd2:	f107 030c 	add.w	r3, r7, #12
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fb f856 	bl	8003c8a <_ZSt3maxIfERKT_S2_S2_>
 8008bde:	4602      	mov	r2, r0
 8008be0:	1d3b      	adds	r3, r7, #4
 8008be2:	4619      	mov	r1, r3
 8008be4:	4610      	mov	r0, r2
 8008be6:	f7ff f9b9 	bl	8007f5c <_ZSt3minIfERKT_S2_S2_>
 8008bea:	4603      	mov	r3, r0
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	ee07 3a90 	vmov	s15, r3
}
 8008bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d10b      	bne.n	8008c28 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8008c18:	f7ff ffb6 	bl	8008b88 <_ZNSt14numeric_limitsIfE3maxEv>
 8008c1c:	eef0 7a40 	vmov.f32	s15, s0
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8008c26:	e023      	b.n	8008c70 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d107      	bne.n	8008c3e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a0f      	ldr	r2, [pc, #60]	; (8008c78 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8008c3a:	601a      	str	r2, [r3, #0]
}
 8008c3c:	e018      	b.n	8008c70 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d107      	bne.n	8008c54 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	4a0d      	ldr	r2, [pc, #52]	; (8008c7c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8008c48:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008c50:	601a      	str	r2, [r3, #0]
}
 8008c52:	e00d      	b.n	8008c70 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8008c54:	f7ff ffa6 	bl	8008ba4 <_ZNSt14numeric_limitsIfE6lowestEv>
 8008c58:	eef0 7a40 	vmov.f32	s15, s0
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8008c62:	f7ff ff91 	bl	8008b88 <_ZNSt14numeric_limitsIfE3maxEv>
 8008c66:	eef0 7a40 	vmov.f32	s15, s0
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	edc3 7a00 	vstr	s15, [r3]
}
 8008c70:	bf00      	nop
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	40c00000 	.word	0x40c00000
 8008c7c:	bf800000 	.word	0xbf800000

08008c80 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
}
 8008c8c:	bf00      	nop
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8008c98:	b590      	push	{r4, r7, lr}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8008ca6:	68b9      	ldr	r1, [r7, #8]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f7ff ff52 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 8008cae:	4604      	mov	r4, r0
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff ff4d 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	429c      	cmp	r4, r3
 8008cbc:	d001      	beq.n	8008cc2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8008cbe:	f003 f94d 	bl	800bf5c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7ff ff44 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	613b      	str	r3, [r7, #16]
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff ff3e 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	f107 0214 	add.w	r2, r7, #20
 8008cde:	f107 0310 	add.w	r3, r7, #16
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fb f917 	bl	8003f18 <_ZSt3minIlERKT_S2_S2_>
 8008cea:	4603      	mov	r3, r0
 8008cec:	681b      	ldr	r3, [r3, #0]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	371c      	adds	r7, #28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd90      	pop	{r4, r7, pc}

08008cf6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b086      	sub	sp, #24
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fc9b 	bl	800863c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8008d06:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	db03      	blt.n	8008d16 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	db01      	blt.n	8008d1a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8008d16:	f003 f921 	bl	800bf5c <abort>
  const auto* dims_data = shape.DimsData();
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff f846 	bl	8007dac <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8008d20:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8008d22:	2301      	movs	r3, #1
 8008d24:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8008d26:	2300      	movs	r3, #0
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	e011      	b.n	8008d50 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d005      	beq.n	8008d40 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	e000      	b.n	8008d42 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 8008d40:	2301      	movs	r3, #1
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	fb02 f303 	mul.w	r3, r2, r3
 8008d48:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	613b      	str	r3, [r7, #16]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	dbe9      	blt.n	8008d2c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 8008d58:	697b      	ldr	r3, [r7, #20]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8008d62:	b590      	push	{r4, r7, lr}
 8008d64:	b091      	sub	sp, #68	; 0x44
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8008d7c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008d7e:	f7ff fc5d 	bl	800863c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8008d82:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8008d84:	6838      	ldr	r0, [r7, #0]
 8008d86:	f7ff fc59 	bl	800863c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8008d8a:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	4619      	mov	r1, r3
 8008d92:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008d94:	f7ff ffaf 	bl	8008cf6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8008d98:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	1e99      	subs	r1, r3, #2
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008da4:	6838      	ldr	r0, [r7, #0]
 8008da6:	f7ff ff77 	bl	8008c98 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8008daa:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	4619      	mov	r1, r3
 8008db2:	6838      	ldr	r0, [r7, #0]
 8008db4:	f7ff fecd 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 8008db8:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8008dba:	2300      	movs	r3, #0
 8008dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dbe:	e05e      	b.n	8008e7e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dc4:	e054      	b.n	8008e70 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8008dcc:	2300      	movs	r3, #0
 8008dce:	633b      	str	r3, [r7, #48]	; 0x30
 8008dd0:	e020      	b.n	8008e14 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 8008dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	fb03 f202 	mul.w	r2, r3, r2
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	4413      	add	r3, r2
 8008de4:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	fb03 f202 	mul.w	r2, r3, r2
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008df8:	4413      	add	r3, r2
 8008dfa:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8008dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e02:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e0a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	3301      	adds	r3, #1
 8008e12:	633b      	str	r3, [r7, #48]	; 0x30
 8008e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	dbda      	blt.n	8008dd2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 8008e1c:	f04f 0300 	mov.w	r3, #0
 8008e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8008e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e2e:	4413      	add	r3, r2
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8008e34:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008e38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e44:	fb03 f202 	mul.w	r2, r3, r2
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e50:	18d4      	adds	r4, r2, r3
 8008e52:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8008e56:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8008e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e5e:	f7ff fead 	bl	8008bbc <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8008e62:	eef0 7a40 	vmov.f32	s15, s0
 8008e66:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	dba6      	blt.n	8008dc6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 8008e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	db9c      	blt.n	8008dc0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	3744      	adds	r7, #68	; 0x44
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd90      	pop	{r4, r7, pc}

08008e90 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8008ea4:	f003 f85a 	bl	800bf5c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eac:	213c      	movs	r1, #60	; 0x3c
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	4798      	blx	r3
 8008eb2:	4603      	mov	r3, r0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8008ebc:	b5b0      	push	{r4, r5, r7, lr}
 8008ebe:	b0b2      	sub	sp, #200	; 0xc8
 8008ec0:	af04      	add	r7, sp, #16
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8008ece:	f003 f845 	bl	800bf5c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8008eda:	f003 f83f 	bl	800bf5c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto params =
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff fdd1 	bl	8008a96 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8008ef4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 8008ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3318      	adds	r3, #24
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4ab7      	ldr	r2, [pc, #732]	; (80091e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8008f04:	6812      	ldr	r2, [r2, #0]
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008f0c:	4798      	blx	r3
 8008f0e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8008f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10a      	bne.n	8008f30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x74>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691c      	ldr	r4, [r3, #16]
 8008f1e:	4bb1      	ldr	r3, [pc, #708]	; (80091e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	2347      	movs	r3, #71	; 0x47
 8008f24:	4ab0      	ldr	r2, [pc, #704]	; (80091e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8008f26:	49b1      	ldr	r1, [pc, #708]	; (80091ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	47a0      	blx	r4
 8008f2c:	2401      	movs	r4, #1
 8008f2e:	e1a8      	b.n	8009282 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 8008f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3318      	adds	r3, #24
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4aad      	ldr	r2, [pc, #692]	; (80091f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
 8008f3c:	6812      	ldr	r2, [r2, #0]
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008f44:	4798      	blx	r3
 8008f46:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 8008f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10a      	bne.n	8008f68 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691c      	ldr	r4, [r3, #16]
 8008f56:	4ba7      	ldr	r3, [pc, #668]	; (80091f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	234a      	movs	r3, #74	; 0x4a
 8008f5c:	4aa2      	ldr	r2, [pc, #648]	; (80091e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8008f5e:	49a3      	ldr	r1, [pc, #652]	; (80091ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	47a0      	blx	r4
 8008f64:	2401      	movs	r4, #1
 8008f66:	e18c      	b.n	8009282 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 8008f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3318      	adds	r3, #24
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4aa1      	ldr	r2, [pc, #644]	; (80091f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
 8008f74:	6812      	ldr	r2, [r2, #0]
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008f7c:	4798      	blx	r3
 8008f7e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 8008f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	331c      	adds	r3, #28
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a9b      	ldr	r2, [pc, #620]	; (80091fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
 8008f8e:	6812      	ldr	r2, [r2, #0]
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008f96:	4798      	blx	r3
 8008f98:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 8008f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691c      	ldr	r4, [r3, #16]
 8008fa8:	4b95      	ldr	r3, [pc, #596]	; (8009200 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	234f      	movs	r3, #79	; 0x4f
 8008fae:	4a8e      	ldr	r2, [pc, #568]	; (80091e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8008fb0:	498e      	ldr	r1, [pc, #568]	; (80091ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	47a0      	blx	r4
 8008fb6:	2401      	movs	r4, #1
 8008fb8:	e163      	b.n	8009282 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8008fba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008fbe:	781a      	ldrb	r2, [r3, #0]
 8008fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d01c      	beq.n	8009004 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691c      	ldr	r4, [r3, #16]
 8008fce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe fe29 	bl	8007c2c <TfLiteTypeGetName>
 8008fda:	4605      	mov	r5, r0
 8008fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fe22 	bl	8007c2c <TfLiteTypeGetName>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	9303      	str	r3, [sp, #12]
 8008fec:	9502      	str	r5, [sp, #8]
 8008fee:	4b85      	ldr	r3, [pc, #532]	; (8009204 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	4b85      	ldr	r3, [pc, #532]	; (8009208 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	2351      	movs	r3, #81	; 0x51
 8008ff8:	4a7b      	ldr	r2, [pc, #492]	; (80091e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8008ffa:	4984      	ldr	r1, [pc, #528]	; (800920c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	47a0      	blx	r4
 8009000:	2401      	movs	r4, #1
 8009002:	e13e      	b.n	8009282 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  const RuntimeShape filter_shape = GetTensorShape(filter);
 8009004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009008:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe ff14 	bl	8007e3a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8009012:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009016:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe ff0d 	bl	8007e3a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8009020:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff fb09 	bl	800863c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800902a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  const int output_dim_count = output_shape.DimensionsCount();
 800902e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff fb02 	bl	800863c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009038:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  cmsis_nn_dims filter_dims;
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 800903c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009040:	1e5a      	subs	r2, r3, #1
 8009042:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff fd82 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 800904e:	4603      	mov	r3, r0
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.h = 1;
 8009052:	2301      	movs	r3, #1
 8009054:	62bb      	str	r3, [r7, #40]	; 0x28
  filter_dims.w = 1;
 8009056:	2301      	movs	r3, #1
 8009058:	62fb      	str	r3, [r7, #44]	; 0x2c
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 800905a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800905e:	1e5a      	subs	r2, r3, #1
 8009060:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff fd73 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 800906c:	4603      	mov	r3, r0
 800906e:	633b      	str	r3, [r7, #48]	; 0x30

  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8009070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009074:	1e5a      	subs	r2, r3, #1
 8009076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f7ff fd68 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009082:	4602      	mov	r2, r0
 8009084:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009088:	635a      	str	r2, [r3, #52]	; 0x34
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800908a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800908e:	1e5a      	subs	r2, r3, #1
 8009090:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009094:	4611      	mov	r1, r2
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff fe2d 	bl	8008cf6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800909c:	4602      	mov	r2, r0
 800909e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 80090a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090a8:	1e5a      	subs	r2, r3, #1
 80090aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090ae:	4611      	mov	r1, r2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7ff fd4e 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 80090b6:	4602      	mov	r2, r0
 80090b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090bc:	639a      	str	r2, [r3, #56]	; 0x38

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 80090be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090c2:	f04f 32ff 	mov.w	r2, #4294967295
 80090c6:	62da      	str	r2, [r3, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 80090c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090cc:	7819      	ldrb	r1, [r3, #0]
 80090ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090d2:	781a      	ldrb	r2, [r3, #0]
 80090d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090d8:	9303      	str	r3, [sp, #12]
 80090da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090de:	9302      	str	r3, [sp, #8]
 80090e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090e4:	9301      	str	r3, [sp, #4]
 80090e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fa31 	bl	8009558 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80090fc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24e>
 8009104:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 8009108:	e0b1      	b.n	800926e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  int32_t buf_size = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  if (input->type == kTfLiteInt16) {
 8009110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b07      	cmp	r3, #7
 8009118:	d10f      	bne.n	800913a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27e>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I16
        MicroPrintf("Filter data type %s currently not supported.",
 800911a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	4618      	mov	r0, r3
 8009122:	f7fe fd83 	bl	8007c2c <TfLiteTypeGetName>
 8009126:	4603      	mov	r3, r0
 8009128:	667b      	str	r3, [r7, #100]	; 0x64
 800912a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800912e:	4619      	mov	r1, r3
 8009130:	4837      	ldr	r0, [pc, #220]	; (8009210 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 8009132:	f7ff fcbc 	bl	8008aae <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8009136:	2401      	movs	r4, #1
 8009138:	e099      	b.n	800926e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
#endif
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
  } else if (input->type == kTfLiteInt8) {
 800913a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b09      	cmp	r3, #9
 8009142:	d10f      	bne.n	8009164 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
 8009144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe fd6e 	bl	8007c2c <TfLiteTypeGetName>
 8009150:	4603      	mov	r3, r0
 8009152:	66bb      	str	r3, [r7, #104]	; 0x68
 8009154:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009158:	4619      	mov	r1, r3
 800915a:	482d      	ldr	r0, [pc, #180]	; (8009210 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 800915c:	f7ff fca7 	bl	8008aae <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8009160:	2401      	movs	r4, #1
 8009162:	e084      	b.n	800926e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
    }
#endif
  }

  if (filter->type == kTfLiteInt4) {
 8009164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b12      	cmp	r3, #18
 800916c:	d121      	bne.n	80091b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f6>
    int filter_size =
        RuntimeShape(filter->dims->size,
 800916e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 8009176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 800917e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe fde8 	bl	8007d58 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 8009188:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe fe31 	bl	8007df4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8009192:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        RuntimeShape(filter->dims->size,
 8009196:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fdef 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80091a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091ac:	3220      	adds	r2, #32
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	4798      	blx	r3
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (buf_size > 0) {
 80091b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dd2c      	ble.n	8009214 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091be:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80091c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091c6:	322c      	adds	r2, #44	; 0x2c
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	4798      	blx	r3
 80091cc:	4603      	mov	r3, r0
 80091ce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80091d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01c      	beq.n	8009214 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
 80091da:	f897 4087 	ldrb.w	r4, [r7, #135]	; 0x87
 80091de:	e046      	b.n	800926e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
 80091e0:	080114ec 	.word	0x080114ec
 80091e4:	080108c4 	.word	0x080108c4
 80091e8:	08010818 	.word	0x08010818
 80091ec:	080108ac 	.word	0x080108ac
 80091f0:	080114f0 	.word	0x080114f0
 80091f4:	080108d8 	.word	0x080108d8
 80091f8:	080114f4 	.word	0x080114f4
 80091fc:	080114f8 	.word	0x080114f8
 8009200:	080108ec 	.word	0x080108ec
 8009204:	0801091c 	.word	0x0801091c
 8009208:	0801092c 	.word	0x0801092c
 800920c:	08010900 	.word	0x08010900
 8009210:	08010938 	.word	0x08010938
        context, buf_size, &data->buffer_idx));
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 8009214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009222:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009226:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 8009228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3324      	adds	r3, #36	; 0x24
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8009236:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800923a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800923c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3324      	adds	r3, #36	; 0x24
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800924a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800924e:	4798      	blx	r3
  if (bias != nullptr) {
 8009250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d009      	beq.n	800926c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b0>
    micro_context->DeallocateTempTfLiteTensor(bias);
 8009258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3324      	adds	r3, #36	; 0x24
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009266:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800926a:	4798      	blx	r3
  }

  return kTfLiteOk;
 800926c:	2400      	movs	r4, #0
}
 800926e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fd83 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
 8009278:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fd7e 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
 8009282:	4623      	mov	r3, r4
 8009284:	4618      	mov	r0, r3
 8009286:	37b8      	adds	r7, #184	; 0xb8
 8009288:	46bd      	mov	sp, r7
 800928a:	bdb0      	pop	{r4, r5, r7, pc}

0800928c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800928c:	b5b0      	push	{r4, r5, r7, lr}
 800928e:	b0b8      	sub	sp, #224	; 0xe0
 8009290:	af06      	add	r7, sp, #24
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800929e:	f002 fe5d 	bl	800bf5c <abort>
  const auto* params =
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 80092aa:	4b7f      	ldr	r3, [pc, #508]	; (80094a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fa21 	bl	80096fa <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80092b8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 80092bc:	4b7b      	ldr	r3, [pc, #492]	; (80094ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fa18 	bl	80096fa <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80092ca:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 80092ce:	4b78      	ldr	r3, [pc, #480]	; (80094b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa0f 	bl	80096fa <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80092dc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 80092e0:	4b74      	ldr	r3, [pc, #464]	; (80094b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fa16 	bl	800971a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80092ee:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

  TFLITE_DCHECK(node->user_data != nullptr);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 80092fa:	f002 fe2f 	bl	800bf5c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 8009306:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800930a:	6a1a      	ldr	r2, [r3, #32]
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
 800930c:	f107 0008 	add.w	r0, r7, #8
 8009310:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	f000 fa42 	bl	800979e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800931a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800931e:	7a1b      	ldrb	r3, [r3, #8]
 8009320:	2b09      	cmp	r3, #9
 8009322:	d06e      	beq.n	8009402 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
 8009324:	2b09      	cmp	r3, #9
 8009326:	f300 80a6 	bgt.w	8009476 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
 800932a:	2b01      	cmp	r3, #1
 800932c:	d003      	beq.n	8009336 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 800932e:	2b07      	cmp	r3, #7
 8009330:	f000 8090 	beq.w	8009454 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 8009334:	e09f      	b.n	8009476 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      MicroPrintf("Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      const float* bias_data =
          tflite::micro::GetOptionalTensorData<float>(bias);
 8009336:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800933a:	f000 f8db 	bl	80094f4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800933e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 8009342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009346:	781a      	ldrb	r2, [r3, #0]
 8009348:	f107 0314 	add.w	r3, r7, #20
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f000 f8ed 	bl	800952e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8009354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009358:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800935c:	4618      	mov	r0, r3
 800935e:	f000 f9fc 	bl	800975a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8009362:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8009366:	f7ff fbb8 	bl	8008ada <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800936a:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800936c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009370:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8009374:	4618      	mov	r0, r3
 8009376:	f000 f9f0 	bl	800975a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800937a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800937e:	f7ff fbac 	bl	8008ada <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8009382:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias), bias_data,
 8009384:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009388:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800938c:	4618      	mov	r0, r3
 800938e:	f000 f9e4 	bl	800975a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 8009392:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009396:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f9dd 	bl	800975a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80093a0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80093a4:	f7ff fba8 	bl	8008af8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80093ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80093b2:	f107 0014 	add.w	r0, r7, #20
 80093b6:	9304      	str	r3, [sp, #16]
 80093b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80093bc:	9303      	str	r3, [sp, #12]
 80093be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093c2:	9302      	str	r3, [sp, #8]
 80093c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	9400      	str	r4, [sp, #0]
 80093cc:	4613      	mov	r3, r2
 80093ce:	462a      	mov	r2, r5
 80093d0:	f7ff fcc7 	bl	8008d62 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 80093d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fcd0 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias), bias_data,
 80093de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fccb 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80093e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe fcc6 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80093f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fcc1 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 80093fc:	bf00      	nop
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
 80093fe:	2300      	movs	r3, #0
 8009400:	e04d      	b.n	800949e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      switch (filter_int8.type) {
 8009402:	7c3b      	ldrb	r3, [r7, #16]
 8009404:	2b09      	cmp	r3, #9
 8009406:	d110      	bne.n	800942a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19e>
        MicroPrintf("Filter data type %s currently not supported.",
 8009408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800940c:	7a1b      	ldrb	r3, [r3, #8]
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe fc0c 	bl	8007c2c <TfLiteTypeGetName>
 8009414:	4603      	mov	r3, r0
 8009416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800941a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800941e:	4619      	mov	r1, r3
 8009420:	4825      	ldr	r0, [pc, #148]	; (80094b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8009422:	f7ff fb44 	bl	8008aae <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8009426:	2301      	movs	r3, #1
 8009428:	e039      	b.n	800949e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
          MicroPrintf("Filter Type %s (%d) not supported.",
 800942a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800942e:	7a1b      	ldrb	r3, [r3, #8]
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe fbfb 	bl	8007c2c <TfLiteTypeGetName>
 8009436:	4603      	mov	r3, r0
 8009438:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800943c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009440:	f103 0208 	add.w	r2, r3, #8
 8009444:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009448:	4619      	mov	r1, r3
 800944a:	481c      	ldr	r0, [pc, #112]	; (80094bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>)
 800944c:	f000 f863 	bl	8009516 <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>
          return kTfLiteError;
 8009450:	2301      	movs	r3, #1
 8009452:	e024      	b.n	800949e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
        MicroPrintf("Filter data type %s currently not supported.",
 8009454:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009458:	7a1b      	ldrb	r3, [r3, #8]
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe fbe6 	bl	8007c2c <TfLiteTypeGetName>
 8009460:	4603      	mov	r3, r0
 8009462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009466:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800946a:	4619      	mov	r1, r3
 800946c:	4812      	ldr	r0, [pc, #72]	; (80094b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 800946e:	f7ff fb1e 	bl	8008aae <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8009472:	2301      	movs	r3, #1
 8009474:	e013      	b.n	800949e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8009476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800947a:	7a1b      	ldrb	r3, [r3, #8]
 800947c:	4618      	mov	r0, r3
 800947e:	f7fe fbd5 	bl	8007c2c <TfLiteTypeGetName>
 8009482:	4603      	mov	r3, r0
 8009484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009488:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800948c:	f103 0208 	add.w	r2, r3, #8
 8009490:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009494:	4619      	mov	r1, r3
 8009496:	480a      	ldr	r0, [pc, #40]	; (80094c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x234>)
 8009498:	f7ff fbf2 	bl	8008c80 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
      return kTfLiteError;
 800949c:	2301      	movs	r3, #1
}
 800949e:	4618      	mov	r0, r3
 80094a0:	37c8      	adds	r7, #200	; 0xc8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bdb0      	pop	{r4, r5, r7, pc}
 80094a6:	bf00      	nop
 80094a8:	080114ec 	.word	0x080114ec
 80094ac:	080114f0 	.word	0x080114f0
 80094b0:	080114f4 	.word	0x080114f4
 80094b4:	080114f8 	.word	0x080114f8
 80094b8:	08010938 	.word	0x08010938
 80094bc:	08010ba8 	.word	0x08010ba8
 80094c0:	08010bcc 	.word	0x08010bcc

080094c4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	2300      	movs	r3, #0
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x24>)
 80094d4:	4a05      	ldr	r2, [pc, #20]	; (80094ec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 80094d6:	4906      	ldr	r1, [pc, #24]	; (80094f0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 80094d8:	f000 f8b6 	bl	8009648 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 80094dc:	bf00      	nop
}
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	0800928d 	.word	0x0800928d
 80094ec:	08008ebd 	.word	0x08008ebd
 80094f0:	08008e91 	.word	0x08008e91

080094f4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x14>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 8009506:	e000      	b.n	800950a <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8009516:	b480      	push	{r7}
 8009518:	b085      	sub	sp, #20
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	607a      	str	r2, [r7, #4]
}
 8009522:	bf00      	nop
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  op_params.quantized_activation_max = op_data.output_activation_max;
  return op_params;
}

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	460b      	mov	r3, r1
 8009538:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f103 0220 	add.w	r2, r3, #32
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f103 011c 	add.w	r1, r3, #28
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff fb57 	bl	8008bfc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 800954e:	bf00      	nop
}
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	; 0x28
 800955c:	af02      	add	r7, sp, #8
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	607b      	str	r3, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	72fb      	strb	r3, [r7, #11]
 8009566:	4613      	mov	r3, r2
 8009568:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 800956a:	7abb      	ldrb	r3, [r7, #10]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d044      	beq.n	80095fa <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	f04f 0300 	mov.w	r3, #0
 8009578:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800957c:	f107 0310 	add.w	r3, r7, #16
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f7fe fe0b 	bl	80081a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8009592:	4603      	mov	r3, r0
 8009594:	77fb      	strb	r3, [r7, #31]
 8009596:	7ffb      	ldrb	r3, [r7, #31]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 800959c:	7ffb      	ldrb	r3, [r7, #31]
 800959e:	e02d      	b.n	80095fc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 80095a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80095a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a8:	3304      	adds	r3, #4
 80095aa:	4619      	mov	r1, r3
 80095ac:	4610      	mov	r0, r2
 80095ae:	eeb0 0a47 	vmov.f32	s0, s14
 80095b2:	eef0 0a67 	vmov.f32	s1, s15
 80095b6:	f7fe fcf3 	bl	8007fa0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691a      	ldr	r2, [r3, #16]
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 80095ca:	f002 fcc7 	bl	800bf5c <abort>
    data->filter_zero_point = filter->params.zero_point;
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d4:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095dc:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 80095de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e0:	f103 0208 	add.w	r2, r3, #8
 80095e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e6:	330c      	adds	r3, #12
 80095e8:	7af9      	ldrb	r1, [r7, #11]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	4613      	mov	r3, r2
 80095ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f7fe ffcb 	bl	800858c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80095f6:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 80095f8:	e000      	b.n	80095fc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3720      	adds	r7, #32
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	db0f      	blt.n	8009638 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	429a      	cmp	r2, r3
 800961e:	da0b      	bge.n	8009638 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	4413      	add	r3, r2
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d001      	beq.n	8009638 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	e001      	b.n	800963c <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8009638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800963c:	4618      	mov	r0, r3
 800963e:	371c      	adds	r7, #28
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	69ba      	ldr	r2, [r7, #24]
 8009660:	605a      	str	r2, [r3, #4]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	609a      	str	r2, [r3, #8]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	60da      	str	r2, [r3, #12]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	611a      	str	r2, [r3, #16]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	615a      	str	r2, [r3, #20]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	619a      	str	r2, [r3, #24]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	61da      	str	r2, [r3, #28]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	621a      	str	r2, [r3, #32]
}
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	3714      	adds	r7, #20
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80096aa:	f002 fc57 	bl	800bf5c <abort>
  TFLITE_DCHECK(node != nullptr);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80096b4:	f002 fc52 	bl	800bf5c <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 80096bc:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7ff ff9c 	bl	8009604 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80096cc:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	da01      	bge.n	80096d8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 80096d4:	2300      	movs	r3, #0
 80096d6:	e00c      	b.n	80096f2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6819      	ldr	r1, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	440b      	add	r3, r1
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	4619      	mov	r1, r3
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	4790      	blx	r2
 80096ee:	4603      	mov	r3, r0
 80096f0:	bf00      	nop
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7ff ffc4 	bl	8009698 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009710:	4603      	mov	r3, r0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800972c:	f002 fc16 	bl	800bf5c <abort>
  TFLITE_DCHECK(node != nullptr);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8009736:	f002 fc11 	bl	800bf5c <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	6859      	ldr	r1, [r3, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	440b      	add	r3, r1
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	4619      	mov	r1, r3
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	4790      	blx	r2
 8009750:	4603      	mov	r3, r0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d103      	bne.n	800977a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7fe fae2 	bl	8007d3c <_ZN6tflite12RuntimeShapeC1Ev>
 8009778:	e00d      	b.n	8009796 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	3304      	adds	r3, #4
 800978a:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	6939      	ldr	r1, [r7, #16]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7fe fae1 	bl	8007d58 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 800979e:	b5b0      	push	{r4, r5, r7, lr}
 80097a0:	b08e      	sub	sp, #56	; 0x38
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	603b      	str	r3, [r7, #0]
  if (tensor->type != kTfLiteInt4) {
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	7a1b      	ldrb	r3, [r3, #8]
 80097b0:	2b12      	cmp	r3, #18
 80097b2:	d005      	beq.n	80097c0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x22>
    return *tensor;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80097ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80097be:	e033      	b.n	8009828 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x8a>
  }

  TfLiteEvalTensor new_tensor;
  new_tensor.data.data = static_cast<int8_t*>(
      context->GetScratchBuffer(context, scratch_buffer_index));
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	68b8      	ldr	r0, [r7, #8]
 80097c8:	4798      	blx	r3
 80097ca:	4603      	mov	r3, r0
  new_tensor.data.data = static_cast<int8_t*>(
 80097cc:	617b      	str	r3, [r7, #20]
  new_tensor.dims = tensor->dims;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	61bb      	str	r3, [r7, #24]
  new_tensor.type = kTfLiteInt8;
 80097d4:	2309      	movs	r3, #9
 80097d6:	773b      	strb	r3, [r7, #28]
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 80097d8:	6838      	ldr	r0, [r7, #0]
 80097da:	f7ff f99c 	bl	8008b16 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80097de:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 80097e0:	f107 0320 	add.w	r3, r7, #32
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7ff ffb7 	bl	800975a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 80097ec:	f107 0320 	add.w	r3, r7, #32
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe faff 	bl	8007df4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80097f6:	4605      	mov	r5, r0
 80097f8:	f107 0314 	add.w	r3, r7, #20
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff f999 	bl	8008b34 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8009802:	4603      	mov	r3, r0
 8009804:	461a      	mov	r2, r3
 8009806:	4629      	mov	r1, r5
 8009808:	4620      	mov	r0, r4
 800980a:	f7fe fb67 	bl	8007edc <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 800980e:	f107 0320 	add.w	r3, r7, #32
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fab3 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	461c      	mov	r4, r3
 800981c:	f107 0314 	add.w	r3, r7, #20
 8009820:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009824:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	3738      	adds	r7, #56	; 0x38
 800982c:	46bd      	mov	sp, r7
 800982e:	bdb0      	pop	{r4, r5, r7, pc}

08009830 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7fe fefd 	bl	800863c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009842:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8009844:	2300      	movs	r3, #0
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	e014      	b.n	8009874 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	429a      	cmp	r2, r3
 8009850:	d00d      	beq.n	800986e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009852:	6979      	ldr	r1, [r7, #20]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff f97c 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 800985a:	4604      	mov	r4, r0
 800985c:	6979      	ldr	r1, [r7, #20]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7ff f977 	bl	8008b52 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009864:	4603      	mov	r3, r0
 8009866:	429c      	cmp	r4, r3
 8009868:	d001      	beq.n	800986e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 800986a:	f002 fb77 	bl	800bf5c <abort>
  for (int i = 0; i < dims_count; ++i) {
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	3301      	adds	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	429a      	cmp	r2, r3
 800987a:	dbe6      	blt.n	800984a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff fa39 	bl	8008cf6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8009884:	4603      	mov	r3, r0
}
 8009886:	4618      	mov	r0, r3
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	bd90      	pop	{r4, r7, pc}

0800988e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800988e:	b580      	push	{r7, lr}
 8009890:	ed2d 8b02 	vpush	{d8}
 8009894:	b08e      	sub	sp, #56	; 0x38
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80098a0:	68b8      	ldr	r0, [r7, #8]
 80098a2:	f7fe fecb 	bl	800863c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80098a6:	4603      	mov	r3, r0
 80098a8:	3b01      	subs	r3, #1
 80098aa:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	6a39      	ldr	r1, [r7, #32]
 80098b0:	68b8      	ldr	r0, [r7, #8]
 80098b2:	f7ff ffbd 	bl	8009830 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80098b6:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	6a39      	ldr	r1, [r7, #32]
 80098be:	68b8      	ldr	r0, [r7, #8]
 80098c0:	f7ff f9ea 	bl	8008c98 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80098c4:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 80098c6:	2300      	movs	r3, #0
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34
 80098ca:	e085      	b.n	80099d8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14a>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 80098cc:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80098d0:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80098d2:	2300      	movs	r3, #0
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
 80098d6:	e014      	b.n	8009902 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
      max = std::max(max, input_data[i * depth + c]);
 80098d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	fb03 f202 	mul.w	r2, r3, r2
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	4413      	add	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	441a      	add	r2, r3
 80098ea:	f107 0310 	add.w	r3, r7, #16
 80098ee:	4611      	mov	r1, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fa f9ca 	bl	8003c8a <_ZSt3maxIfERKT_S2_S2_>
 80098f6:	4603      	mov	r3, r0
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	3301      	adds	r3, #1
 8009900:	633b      	str	r3, [r7, #48]	; 0x30
 8009902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	429a      	cmp	r2, r3
 8009908:	dbe6      	blt.n	80098d8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    }

    // Compute sum.
    float sum = 0.f;
 800990a:	f04f 0300 	mov.w	r3, #0
 800990e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8009910:	2300      	movs	r3, #0
 8009912:	62bb      	str	r3, [r7, #40]	; 0x28
 8009914:	e035      	b.n	8009982 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf4>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8009916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009918:	69ba      	ldr	r2, [r7, #24]
 800991a:	fb03 f202 	mul.w	r2, r3, r2
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	4413      	add	r3, r2
 8009928:	ed93 7a00 	vldr	s14, [r3]
 800992c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009930:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	4610      	mov	r0, r2
 800993c:	4619      	mov	r1, r3
 800993e:	f7f7 f973 	bl	8000c28 <__aeabi_d2f>
 8009942:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8009946:	ee68 7a27 	vmul.f32	s15, s16, s15
 800994a:	eeb0 0a67 	vmov.f32	s0, s15
 800994e:	f7f7 fcac 	bl	80012aa <_ZSt3expf>
 8009952:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 8009956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	fb03 f202 	mul.w	r2, r3, r2
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009966:	4413      	add	r3, r2
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 800996c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009970:	edd7 7a05 	vldr	s15, [r7, #20]
 8009974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009978:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	3301      	adds	r3, #1
 8009980:	62bb      	str	r3, [r7, #40]	; 0x28
 8009982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	429a      	cmp	r2, r3
 8009988:	dbc5      	blt.n	8009916 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800998a:	2300      	movs	r3, #0
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
 800998e:	e01c      	b.n	80099ca <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 8009990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	fb03 f202 	mul.w	r2, r3, r2
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a0:	4413      	add	r3, r2
 80099a2:	edd3 6a00 	vldr	s13, [r3]
 80099a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	fb03 f202 	mul.w	r2, r3, r2
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	4413      	add	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099b6:	4413      	add	r3, r2
 80099b8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80099bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c0:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	3301      	adds	r3, #1
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24
 80099ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	dbde      	blt.n	8009990 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x102>
  for (int i = 0; i < outer_size; ++i) {
 80099d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d4:	3301      	adds	r3, #1
 80099d6:	637b      	str	r3, [r7, #52]	; 0x34
 80099d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	429a      	cmp	r2, r3
 80099de:	f6ff af75 	blt.w	80098cc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
    }
  }
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	3738      	adds	r7, #56	; 0x38
 80099e8:	46bd      	mov	sp, r7
 80099ea:	ecbd 8b02 	vpop	{d8}
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8009a04:	f002 faaa 	bl	800bf5c <abort>
  return context->AllocatePersistentBuffer(context,
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	2140      	movs	r1, #64	; 0x40
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	4798      	blx	r3
 8009a12:	4603      	mov	r3, r0
                                           sizeof(CMSISNNSoftmaxParams));
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8009a1c:	b590      	push	{r4, r7, lr}
 8009a1e:	b09d      	sub	sp, #116	; 0x74
 8009a20:	af04      	add	r7, sp, #16
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff f835 	bl	8008a96 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8009a2c:	65f8      	str	r0, [r7, #92]	; 0x5c

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8009a2e:	6838      	ldr	r0, [r7, #0]
 8009a30:	f7fe fa2e 	bl	8007e90 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	bf14      	ite	ne
 8009a3a:	2301      	movne	r3, #1
 8009a3c:	2300      	moveq	r3, #0
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d013      	beq.n	8009a6c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x50>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	691c      	ldr	r4, [r3, #16]
 8009a48:	6838      	ldr	r0, [r7, #0]
 8009a4a:	f7fe fa21 	bl	8007e90 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2201      	movs	r2, #1
 8009a52:	9203      	str	r2, [sp, #12]
 8009a54:	9302      	str	r3, [sp, #8]
 8009a56:	4b6c      	ldr	r3, [pc, #432]	; (8009c08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	4b6c      	ldr	r3, [pc, #432]	; (8009c0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	2334      	movs	r3, #52	; 0x34
 8009a60:	4a6b      	ldr	r2, [pc, #428]	; (8009c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009a62:	496c      	ldr	r1, [pc, #432]	; (8009c14 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	47a0      	blx	r4
 8009a68:	2401      	movs	r4, #1
 8009a6a:	e0c8      	b.n	8009bfe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8009a6c:	6838      	ldr	r0, [r7, #0]
 8009a6e:	f7fe fa22 	bl	8007eb6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	bf14      	ite	ne
 8009a78:	2301      	movne	r3, #1
 8009a7a:	2300      	moveq	r3, #0
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d013      	beq.n	8009aaa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691c      	ldr	r4, [r3, #16]
 8009a86:	6838      	ldr	r0, [r7, #0]
 8009a88:	f7fe fa15 	bl	8007eb6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2201      	movs	r2, #1
 8009a90:	9203      	str	r2, [sp, #12]
 8009a92:	9302      	str	r3, [sp, #8]
 8009a94:	4b5c      	ldr	r3, [pc, #368]	; (8009c08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8009a96:	9301      	str	r3, [sp, #4]
 8009a98:	4b5f      	ldr	r3, [pc, #380]	; (8009c18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	2335      	movs	r3, #53	; 0x35
 8009a9e:	4a5c      	ldr	r2, [pc, #368]	; (8009c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009aa0:	495c      	ldr	r1, [pc, #368]	; (8009c14 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	47a0      	blx	r4
 8009aa6:	2401      	movs	r4, #1
 8009aa8:	e0a9      	b.n	8009bfe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8009aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3318      	adds	r3, #24
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009ab8:	4798      	blx	r3
 8009aba:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, input != nullptr);
 8009abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691c      	ldr	r4, [r3, #16]
 8009ac6:	4b55      	ldr	r3, [pc, #340]	; (8009c1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	2337      	movs	r3, #55	; 0x37
 8009acc:	4a50      	ldr	r2, [pc, #320]	; (8009c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009ace:	4954      	ldr	r1, [pc, #336]	; (8009c20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	47a0      	blx	r4
 8009ad4:	2401      	movs	r4, #1
 8009ad6:	e092      	b.n	8009bfe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8009ad8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009ada:	f7fe f9cc 	bl	8007e76 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bfd4      	ite	le
 8009ae4:	2301      	movle	r3, #1
 8009ae6:	2300      	movgt	r3, #0
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00a      	beq.n	8009b04 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691c      	ldr	r4, [r3, #16]
 8009af2:	4b4c      	ldr	r3, [pc, #304]	; (8009c24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	2338      	movs	r3, #56	; 0x38
 8009af8:	4a45      	ldr	r2, [pc, #276]	; (8009c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009afa:	4949      	ldr	r1, [pc, #292]	; (8009c20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	47a0      	blx	r4
 8009b00:	2401      	movs	r4, #1
 8009b02:	e07c      	b.n	8009bfe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 8009b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	331c      	adds	r3, #28
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009b12:	4798      	blx	r3
 8009b14:	6578      	str	r0, [r7, #84]	; 0x54
  TF_LITE_ENSURE(context, output != nullptr);
 8009b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x116>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691c      	ldr	r4, [r3, #16]
 8009b20:	4b41      	ldr	r3, [pc, #260]	; (8009c28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	233a      	movs	r3, #58	; 0x3a
 8009b26:	4a3a      	ldr	r2, [pc, #232]	; (8009c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009b28:	493d      	ldr	r1, [pc, #244]	; (8009c20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	47a0      	blx	r4
 8009b2e:	2401      	movs	r4, #1
 8009b30:	e065      	b.n	8009bfe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>

  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10a      	bne.n	8009b50 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691c      	ldr	r4, [r3, #16]
 8009b3e:	4b3b      	ldr	r3, [pc, #236]	; (8009c2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	233c      	movs	r3, #60	; 0x3c
 8009b44:	4a32      	ldr	r2, [pc, #200]	; (8009c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009b46:	4936      	ldr	r1, [pc, #216]	; (8009c20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	47a0      	blx	r4
 8009b4c:	2401      	movs	r4, #1
 8009b4e:	e056      	b.n	8009bfe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  CMSISNNSoftmaxParams* op_data =
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	653b      	str	r3, [r7, #80]	; 0x50
      static_cast<CMSISNNSoftmaxParams*>(node->user_data);

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
 8009b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f920 	bl	8009dac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                                        &op_data->softmax_params);

  const auto input_shape = GetTensorShape(input);
 8009b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe f95e 	bl	8007e3a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 8009b7e:	f107 030c 	add.w	r3, r7, #12
 8009b82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fe f958 	bl	8007e3a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8009b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fd54 	bl	800863c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009b94:	4603      	mov	r3, r0
 8009b96:	3b01      	subs	r3, #1
 8009b98:	647b      	str	r3, [r7, #68]	; 0x44
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8009b9a:	f107 020c 	add.w	r2, r7, #12
 8009b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff fe43 	bl	8009830 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8009baa:	6438      	str	r0, [r7, #64]	; 0x40
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8009bac:	f107 020c 	add.w	r2, r7, #12
 8009bb0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bb8:	f7ff f86e 	bl	8008c98 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8009bbc:	63f8      	str	r0, [r7, #60]	; 0x3c
  op_data->num_rows = outer_size;
 8009bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bc2:	639a      	str	r2, [r3, #56]	; 0x38
  op_data->row_size = depth;
 8009bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  micro_context->DeallocateTempTfLiteTensor(input);
 8009bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3324      	adds	r3, #36	; 0x24
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bd4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009bd6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8009bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3324      	adds	r3, #36	; 0x24
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009be2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009be4:	4798      	blx	r3
  return ret_val;
 8009be6:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
}
 8009bea:	f107 030c 	add.w	r3, r7, #12
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe f8c5 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
 8009bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe f8c0 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
 8009bfe:	4623      	mov	r3, r4
 8009c00:	4618      	mov	r0, r3
 8009c02:	3764      	adds	r7, #100	; 0x64
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd90      	pop	{r4, r7, pc}
 8009c08:	08010c90 	.word	0x08010c90
 8009c0c:	08010c94 	.word	0x08010c94
 8009c10:	08010be8 	.word	0x08010be8
 8009c14:	08010c74 	.word	0x08010c74
 8009c18:	08010ca4 	.word	0x08010ca4
 8009c1c:	08010cd0 	.word	0x08010cd0
 8009c20:	08010cb8 	.word	0x08010cb8
 8009c24:	08010ce4 	.word	0x08010ce4
 8009c28:	08010d00 	.word	0x08010d00
 8009c2c:	08010d14 	.word	0x08010d14

08009c30 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8009c30:	b5b0      	push	{r4, r5, r7, lr}
 8009c32:	b0aa      	sub	sp, #168	; 0xa8
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff fd5b 	bl	80096fa <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009c44:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8009c48:	2200      	movs	r2, #0
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff fd64 	bl	800971a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8009c52:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  TFLITE_DCHECK(node->user_data != nullptr);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 8009c5e:	f002 f97d 	bl	800bf5c <abort>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
  const CMSISNNSoftmaxParams op_data =
 8009c66:	f107 0410 	add.w	r4, r7, #16
 8009c6a:	461d      	mov	r5, r3
 8009c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  switch (input->type) {
 8009c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c84:	7a1b      	ldrb	r3, [r3, #8]
 8009c86:	2b09      	cmp	r3, #9
 8009c88:	d034      	beq.n	8009cf4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
 8009c8a:	2b09      	cmp	r3, #9
 8009c8c:	dc5c      	bgt.n	8009d48 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d002      	beq.n	8009c98 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x68>
 8009c92:	2b07      	cmp	r3, #7
 8009c94:	d043      	beq.n	8009d1e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
 8009c96:	e057      	b.n	8009d48 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      tflite::reference_ops::Softmax(
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 8009c98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009c9c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7ff fd5a 	bl	800975a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8009ca6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8009caa:	f7fe ff16 	bl	8008ada <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8009cae:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8009cb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009cb4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7ff fd4e 	bl	800975a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8009cbe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8009cc2:	f7fe ff19 	bl	8008af8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009ccc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8009cd0:	f107 0010 	add.w	r0, r7, #16
 8009cd4:	9200      	str	r2, [sp, #0]
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	f7ff fdd9 	bl	800988e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8009cdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe f84c 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 8009ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe f847 	bl	8007d7e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	e03d      	b.n	8009d70 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    }
    case kTfLiteInt8: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8009cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cf8:	7a1b      	ldrb	r3, [r3, #8]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fd ff96 	bl	8007c2c <TfLiteTypeGetName>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d0a:	f103 0208 	add.w	r2, r3, #8
 8009d0e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009d12:	4619      	mov	r1, r3
 8009d14:	4818      	ldr	r0, [pc, #96]	; (8009d78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8009d16:	f7fe ffb3 	bl	8008c80 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e028      	b.n	8009d70 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
      }
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8009d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d22:	7a1b      	ldrb	r3, [r3, #8]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fd ff81 	bl	8007c2c <TfLiteTypeGetName>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d34:	f103 0208 	add.w	r2, r3, #8
 8009d38:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	480e      	ldr	r0, [pc, #56]	; (8009d78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8009d40:	f7fe ff9e 	bl	8008c80 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e013      	b.n	8009d70 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
              tflite::micro::GetTensorData<int16_t>(output)),
          ARM_CMSIS_NN_SUCCESS);
      return kTfLiteOk;
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8009d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d4c:	7a1b      	ldrb	r3, [r3, #8]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fd ff6c 	bl	8007c2c <TfLiteTypeGetName>
 8009d54:	4603      	mov	r3, r0
 8009d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d5e:	f103 0208 	add.w	r2, r3, #8
 8009d62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009d66:	4619      	mov	r1, r3
 8009d68:	4803      	ldr	r0, [pc, #12]	; (8009d78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8009d6a:	f7fe ff89 	bl	8008c80 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8009d6e:	2301      	movs	r3, #1
  }
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	37a0      	adds	r7, #160	; 0xa0
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bdb0      	pop	{r4, r5, r7, pc}
 8009d78:	08010d30 	.word	0x08010d30

08009d7c <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af02      	add	r7, sp, #8
 8009d82:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	2300      	movs	r3, #0
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
 8009d8c:	4a05      	ldr	r2, [pc, #20]	; (8009da4 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8009d8e:	4906      	ldr	r1, [pc, #24]	; (8009da8 <_ZN6tflite16Register_SOFTMAXEv+0x2c>)
 8009d90:	f7ff fc5a 	bl	8009648 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8009d94:	bf00      	nop
}
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	08009c31 	.word	0x08009c31
 8009da4:	08009a1d 	.word	0x08009a1d
 8009da8:	080099f1 	.word	0x080099f1

08009dac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8009dac:	b5b0      	push	{r4, r5, r7, lr}
 8009dae:	b08a      	sub	sp, #40	; 0x28
 8009db0:	af04      	add	r7, sp, #16
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b09      	cmp	r3, #9
 8009dc0:	d003      	beq.n	8009dca <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b07      	cmp	r3, #7
 8009dc8:	d121      	bne.n	8009e0e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x62>
    if (input->type == kTfLiteInt16) {
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b07      	cmp	r3, #7
 8009dd0:	d10e      	bne.n	8009df0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x44>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	691c      	ldr	r4, [r3, #16]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fd ff26 	bl	8007c2c <TfLiteTypeGetName>
 8009de0:	4602      	mov	r2, r0
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	492e      	ldr	r1, [pc, #184]	; (8009ea0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e053      	b.n	8009e98 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	691c      	ldr	r4, [r3, #16]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fd ff17 	bl	8007c2c <TfLiteTypeGetName>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	4926      	ldr	r1, [pc, #152]	; (8009ea0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e044      	b.n	8009e98 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                    TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
#endif
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d018      	beq.n	8009e48 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	691c      	ldr	r4, [r3, #16]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fd ff04 	bl	8007c2c <TfLiteTypeGetName>
 8009e24:	4605      	mov	r5, r0
 8009e26:	2001      	movs	r0, #1
 8009e28:	f7fd ff00 	bl	8007c2c <TfLiteTypeGetName>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	9303      	str	r3, [sp, #12]
 8009e30:	9502      	str	r5, [sp, #8]
 8009e32:	4b1c      	ldr	r3, [pc, #112]	; (8009ea4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	4b1c      	ldr	r3, [pc, #112]	; (8009ea8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfc>)
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	23a0      	movs	r3, #160	; 0xa0
 8009e3c:	4a1b      	ldr	r2, [pc, #108]	; (8009eac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8009e3e:	491c      	ldr	r1, [pc, #112]	; (8009eb0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	47a0      	blx	r4
 8009e44:	2301      	movs	r3, #1
 8009e46:	e027      	b.n	8009e98 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d018      	beq.n	8009e82 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd6>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	691c      	ldr	r4, [r3, #16]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fd fee7 	bl	8007c2c <TfLiteTypeGetName>
 8009e5e:	4605      	mov	r5, r0
 8009e60:	2001      	movs	r0, #1
 8009e62:	f7fd fee3 	bl	8007c2c <TfLiteTypeGetName>
 8009e66:	4603      	mov	r3, r0
 8009e68:	9303      	str	r3, [sp, #12]
 8009e6a:	9502      	str	r5, [sp, #8]
 8009e6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	4b10      	ldr	r3, [pc, #64]	; (8009eb4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x108>)
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	23a1      	movs	r3, #161	; 0xa1
 8009e76:	4a0d      	ldr	r2, [pc, #52]	; (8009eac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8009e78:	490d      	ldr	r1, [pc, #52]	; (8009eb0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	47a0      	blx	r4
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e00a      	b.n	8009e98 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    op_data->beta = static_cast<double>(params->beta);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f6 fb7e 	bl	8000588 <__aeabi_f2d>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e92:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8009ea0:	08010ec4 	.word	0x08010ec4
 8009ea4:	08010efc 	.word	0x08010efc
 8009ea8:	08010e98 	.word	0x08010e98
 8009eac:	08010d4c 	.word	0x08010d4c
 8009eb0:	08010ee0 	.word	0x08010ee0
 8009eb4:	08010e88 	.word	0x08010e88

08009eb8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  tensor->type = kTfLiteFloat32;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	701a      	strb	r2, [r3, #0]
  tensor->is_variable = false;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 8009ed0:	4a1d      	ldr	r2, [pc, #116]	; (8009f48 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	4413      	add	r3, r2
 8009ed8:	781a      	ldrb	r2, [r3, #0]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	751a      	strb	r2, [r3, #20]
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
 8009ede:	4a1a      	ldr	r2, [pc, #104]	; (8009f48 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	4413      	add	r3, r2
 8009ee6:	330c      	adds	r3, #12
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	619a      	str	r2, [r3, #24]
  tensor->dims = tensorData[i].dims;
 8009eee:	4a16      	ldr	r2, [pc, #88]	; (8009f48 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	011b      	lsls	r3, r3, #4
 8009ef4:	4413      	add	r3, r2
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	609a      	str	r2, [r3, #8]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	7d1b      	ldrb	r3, [r3, #20]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d10e      	bne.n	8009f24 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x6c>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8009f06:	4a10      	ldr	r2, [pc, #64]	; (8009f48 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	4413      	add	r3, r2
 8009f0e:	3304      	adds	r3, #4
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	4b0d      	ldr	r3, [pc, #52]	; (8009f4c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x94>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4413      	add	r3, r2
 8009f1a:	60fb      	str	r3, [r7, #12]

    tensor->data.data =  start;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	e007      	b.n	8009f34 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x7c>
  }
  else {
      tensor->data.data = tensorData[i].data;
 8009f24:	4a08      	ldr	r2, [pc, #32]	; (8009f48 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	605a      	str	r2, [r3, #4]
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 8009f3c:	bf00      	nop
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	2000039c 	.word	0x2000039c
 8009f4c:	200007a4 	.word	0x200007a4

08009f50 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>:

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]

  tensor->type = kTfLiteFloat32;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	721a      	strb	r2, [r3, #8]

  tensor->dims = tensorData[i].dims;
 8009f60:	4a16      	ldr	r2, [pc, #88]	; (8009fbc <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	4413      	add	r3, r2
 8009f68:	3308      	adds	r3, #8
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	605a      	str	r2, [r3, #4]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
 8009f70:	4a12      	ldr	r2, [pc, #72]	; (8009fbc <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	011b      	lsls	r3, r3, #4
 8009f76:	4413      	add	r3, r2
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	73fb      	strb	r3, [r7, #15]
  if(allocation_type == kTfLiteArenaRw) {
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d10e      	bne.n	8009fa0 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x50>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8009f82:	4a0e      	ldr	r2, [pc, #56]	; (8009fbc <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	4413      	add	r3, r2
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	4b0b      	ldr	r3, [pc, #44]	; (8009fc0 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x70>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4413      	add	r3, r2
 8009f96:	60bb      	str	r3, [r7, #8]

    tensor->data.data =  start;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	601a      	str	r2, [r3, #0]
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}
 8009f9e:	e007      	b.n	8009fb0 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x60>
    tensor->data.data = tensorData[i].data;
 8009fa0:	4a06      	ldr	r2, [pc, #24]	; (8009fbc <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	011b      	lsls	r3, r3, #4
 8009fa6:	4413      	add	r3, r2
 8009fa8:	3304      	adds	r3, #4
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	601a      	str	r2, [r3, #0]
}
 8009fb0:	bf00      	nop
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	2000039c 	.word	0x2000039c
 8009fc0:	200007a4 	.word	0x200007a4

08009fc4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	f003 030f 	and.w	r3, r3, #15
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x20>
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	f003 030f 	and.w	r3, r3, #15
 8009fde:	f1c3 0310 	rsb	r3, r3, #16
 8009fe2:	e000      	b.n	8009fe6 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x22>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 8009fe8:	4b29      	ldr	r3, [pc, #164]	; (800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	440b      	add	r3, r1
 8009ff2:	425b      	negs	r3, r3
 8009ff4:	441a      	add	r2, r3
 8009ff6:	4b27      	ldr	r3, [pc, #156]	; (800a094 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd0>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d224      	bcs.n	800a048 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 8009ffe:	4b26      	ldr	r3, [pc, #152]	; (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b09      	cmp	r3, #9
 800a004:	d906      	bls.n	800a014 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	4619      	mov	r1, r3
 800a00a:	4824      	ldr	r0, [pc, #144]	; (800a09c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd8>)
 800a00c:	f7f8 ffd2 	bl	8002fb4 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 800a010:	2300      	movs	r3, #0
 800a012:	e039      	b.n	800a088 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 800a014:	2101      	movs	r1, #1
 800a016:	6838      	ldr	r0, [r7, #0]
 800a018:	f7fd fdd2 	bl	8007bc0 <_Z9ei_callocjj>
 800a01c:	60b8      	str	r0, [r7, #8]
    if (ptr == NULL) {
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d106      	bne.n	800a032 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	4619      	mov	r1, r3
 800a028:	481d      	ldr	r0, [pc, #116]	; (800a0a0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xdc>)
 800a02a:	f7f8 ffc3 	bl	8002fb4 <_Z9ei_printfPKcz>
      return NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	e02a      	b.n	800a088 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 800a032:	4b19      	ldr	r3, [pc, #100]	; (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	4917      	ldr	r1, [pc, #92]	; (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 800a03a:	600a      	str	r2, [r1, #0]
 800a03c:	4919      	ldr	r1, [pc, #100]	; (800a0a4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xe0>)
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	e01f      	b.n	800a088 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
  }

  current_location -= bytes;
 800a048:	4b11      	ldr	r3, [pc, #68]	; (800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	425b      	negs	r3, r3
 800a050:	4413      	add	r3, r2
 800a052:	4a0f      	ldr	r2, [pc, #60]	; (800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a054:	6013      	str	r3, [r2, #0]

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
 800a056:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3b0f      	subs	r3, #15
 800a05c:	4a0c      	ldr	r2, [pc, #48]	; (800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a05e:	6013      	str	r3, [r2, #0]
  current_location += 16 - ((uintptr_t)(current_location) & 15);
 800a060:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 030f 	and.w	r3, r3, #15
 800a06c:	f1c3 0310 	rsb	r3, r3, #16
 800a070:	4413      	add	r3, r2
 800a072:	4a07      	ldr	r2, [pc, #28]	; (800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a074:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 800a076:	4b06      	ldr	r3, [pc, #24]	; (800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60bb      	str	r3, [r7, #8]
  memset(ptr, 0, bytes);
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	2100      	movs	r1, #0
 800a080:	68b8      	ldr	r0, [r7, #8]
 800a082:	f003 f807 	bl	800d094 <memset>

  return ptr;
 800a086:	68bb      	ldr	r3, [r7, #8]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	200007ac 	.word	0x200007ac
 800a094:	200007a8 	.word	0x200007a8
 800a098:	200009cc 	.word	0x200009cc
 800a09c:	08010f94 	.word	0x08010f94
 800a0a0:	08011014 	.word	0x08011014
 800a0a4:	200009a4 	.word	0x200009a4

0800a0a8 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 800a0b4:	4b1b      	ldr	r3, [pc, #108]	; (800a124 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d906      	bls.n	800a0ca <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4819      	ldr	r0, [pc, #100]	; (800a128 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x80>)
 800a0c2:	f7f8 ff77 	bl	8002fb4 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e028      	b.n	800a11c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f7ff ff76 	bl	8009fc4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d106      	bne.n	800a0f0 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4811      	ldr	r0, [pc, #68]	; (800a12c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x84>)
 800a0e8:	f7f8 ff64 	bl	8002fb4 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e015      	b.n	800a11c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a0e      	ldr	r2, [pc, #56]	; (800a130 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x88>)
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f107 0210 	add.w	r2, r7, #16
 800a0fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a102:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 800a106:	4b07      	ldr	r3, [pc, #28]	; (800a124 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	4a03      	ldr	r2, [pc, #12]	; (800a124 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a118:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	200009f0 	.word	0x200009f0
 800a128:	0801104c 	.word	0x0801104c
 800a12c:	080110a4 	.word	0x080110a4
 800a130:	200009d0 	.word	0x200009d0

0800a134 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 800a13e:	4b09      	ldr	r3, [pc, #36]	; (800a164 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x30>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	4293      	cmp	r3, r2
 800a148:	dd01      	ble.n	800a14e <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x1a>
    return NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	e004      	b.n	800a158 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 800a14e:	4a06      	ldr	r2, [pc, #24]	; (800a168 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x34>)
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	4413      	add	r3, r2
 800a156:	685b      	ldr	r3, [r3, #4]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	200009f0 	.word	0x200009f0
 800a168:	200009d0 	.word	0x200009d0

0800a16c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 800a172:	2300      	movs	r3, #0
 800a174:	607b      	str	r3, [r7, #4]
 800a176:	e00d      	b.n	800a194 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 800a178:	4914      	ldr	r1, [pc, #80]	; (800a1cc <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x60>)
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	4613      	mov	r3, r2
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	4413      	add	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	440b      	add	r3, r1
 800a186:	3340      	adds	r3, #64	; 0x40
 800a188:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a18c:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3301      	adds	r3, #1
 800a192:	607b      	str	r3, [r7, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b03      	cmp	r3, #3
 800a198:	d9ee      	bls.n	800a178 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0xc>
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 800a19a:	2300      	movs	r3, #0
 800a19c:	603b      	str	r3, [r7, #0]
 800a19e:	e00a      	b.n	800a1b6 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x4a>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 800a1a0:	4a0b      	ldr	r2, [pc, #44]	; (800a1d0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x64>)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	011b      	lsls	r3, r3, #4
 800a1a6:	4413      	add	r3, r2
 800a1a8:	330c      	adds	r3, #12
 800a1aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a1ae:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	603b      	str	r3, [r7, #0]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d9f1      	bls.n	800a1a0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x34>
  }
}
 800a1bc:	bf00      	nop
 800a1be:	bf00      	nop
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	20000808 	.word	0x20000808
 800a1d0:	20000918 	.word	0x20000918

0800a1d4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 800a1de:	4b2e      	ldr	r3, [pc, #184]	; (800a298 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc4>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a2e      	ldr	r2, [pc, #184]	; (800a29c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc8>)
 800a1e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	e045      	b.n	800a280 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xac>
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
 800a1f4:	492a      	ldr	r1, [pc, #168]	; (800a2a0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	440b      	add	r3, r1
 800a202:	3340      	adds	r3, #64	; 0x40
 800a204:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a208:	461a      	mov	r2, r3
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d107      	bne.n	800a220 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x4c>
      return &tflTensors[ix].tensor;
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	4613      	mov	r3, r2
 800a214:	011b      	lsls	r3, r3, #4
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4a21      	ldr	r2, [pc, #132]	; (800a2a0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a21c:	4413      	add	r3, r2
 800a21e:	e037      	b.n	800a290 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 800a220:	491f      	ldr	r1, [pc, #124]	; (800a2a0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4613      	mov	r3, r2
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	4413      	add	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	440b      	add	r3, r1
 800a22e:	3340      	adds	r3, #64	; 0x40
 800a230:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a234:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a238:	4293      	cmp	r3, r2
 800a23a:	d11e      	bne.n	800a27a <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xa6>
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 800a23c:	6838      	ldr	r0, [r7, #0]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	4613      	mov	r3, r2
 800a242:	011b      	lsls	r3, r3, #4
 800a244:	4413      	add	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4a15      	ldr	r2, [pc, #84]	; (800a2a0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a24a:	4413      	add	r3, r2
 800a24c:	4619      	mov	r1, r3
 800a24e:	f7ff fe33 	bl	8009eb8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	b218      	sxth	r0, r3
 800a256:	4912      	ldr	r1, [pc, #72]	; (800a2a0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4613      	mov	r3, r2
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	4413      	add	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	440b      	add	r3, r1
 800a264:	3340      	adds	r3, #64	; 0x40
 800a266:	4602      	mov	r2, r0
 800a268:	801a      	strh	r2, [r3, #0]
      return &tflTensors[ix].tensor;
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	4613      	mov	r3, r2
 800a26e:	011b      	lsls	r3, r3, #4
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4a0a      	ldr	r2, [pc, #40]	; (800a2a0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a276:	4413      	add	r3, r2
 800a278:	e00a      	b.n	800a290 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3301      	adds	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b03      	cmp	r3, #3
 800a284:	d9b6      	bls.n	800a1f4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 800a286:	2104      	movs	r1, #4
 800a288:	4806      	ldr	r0, [pc, #24]	; (800a2a4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xd0>)
 800a28a:	f7f8 fe93 	bl	8002fb4 <_Z9ei_printfPKcz>
  return nullptr;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	200009a0 	.word	0x200009a0
 800a29c:	0801333c 	.word	0x0801333c
 800a2a0:	20000808 	.word	0x20000808
 800a2a4:	080110d8 	.word	0x080110d8

0800a2a8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 800a2b2:	4b25      	ldr	r3, [pc, #148]	; (800a348 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa0>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a25      	ldr	r2, [pc, #148]	; (800a34c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa4>)
 800a2b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	4413      	add	r3, r2
 800a2c0:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	e033      	b.n	800a330 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x88>
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
 800a2c8:	4a21      	ldr	r2, [pc, #132]	; (800a350 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	011b      	lsls	r3, r3, #4
 800a2ce:	4413      	add	r3, r2
 800a2d0:	330c      	adds	r3, #12
 800a2d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d104      	bne.n	800a2e8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
      return &tflEvalTensors[ix].tensor;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	011b      	lsls	r3, r3, #4
 800a2e2:	4a1b      	ldr	r2, [pc, #108]	; (800a350 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a2e4:	4413      	add	r3, r2
 800a2e6:	e02b      	b.n	800a340 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 800a2e8:	4a19      	ldr	r2, [pc, #100]	; (800a350 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	4413      	add	r3, r2
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d115      	bne.n	800a32a <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x82>
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	011b      	lsls	r3, r3, #4
 800a302:	4a13      	ldr	r2, [pc, #76]	; (800a350 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a304:	4413      	add	r3, r2
 800a306:	4619      	mov	r1, r3
 800a308:	6838      	ldr	r0, [r7, #0]
 800a30a:	f7ff fe21 	bl	8009f50 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>
      tflEvalTensors[ix].index = tensor_idx;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	b219      	sxth	r1, r3
 800a312:	4a0f      	ldr	r2, [pc, #60]	; (800a350 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	4413      	add	r3, r2
 800a31a:	330c      	adds	r3, #12
 800a31c:	460a      	mov	r2, r1
 800a31e:	801a      	strh	r2, [r3, #0]
      return &tflEvalTensors[ix].tensor;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	4a0a      	ldr	r2, [pc, #40]	; (800a350 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a326:	4413      	add	r3, r2
 800a328:	e00a      	b.n	800a340 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3301      	adds	r3, #1
 800a32e:	60fb      	str	r3, [r7, #12]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2b03      	cmp	r3, #3
 800a334:	d9c8      	bls.n	800a2c8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 800a336:	2104      	movs	r1, #4
 800a338:	4806      	ldr	r0, [pc, #24]	; (800a354 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xac>)
 800a33a:	f7f8 fe3b 	bl	8002fb4 <_Z9ei_printfPKcz>
  return nullptr;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	200009a0 	.word	0x200009a0
 800a34c:	0801333c 	.word	0x0801333c
 800a350:	20000918 	.word	0x20000918
 800a354:	08011110 	.word	0x08011110

0800a358 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>:

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	2300      	movs	r3, #0
 800a364:	2200      	movs	r2, #0
 800a366:	2100      	movs	r1, #0
 800a368:	f7fe fa1e 	bl	80087a8 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
 800a36c:	4a03      	ldr	r2, [pc, #12]	; (800a37c <_ZN12_GLOBAL__N_115EonMicroContextC1Ev+0x24>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	08013354 	.word	0x08013354

0800a380 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:

  void* AllocatePersistentBuffer(size_t bytes) {
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
    return AllocatePersistentBufferImpl(nullptr, bytes);
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	2000      	movs	r0, #0
 800a38e:	f7ff fe19 	bl	8009fc4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 800a392:	4603      	mov	r3, r0
  }
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	68b9      	ldr	r1, [r7, #8]
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	f7ff fe7b 	bl	800a0a8 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
 800a3b2:	4603      	mov	r3, r0
  }
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:

  void* GetScratchBuffer(int buffer_index) {
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
    return GetScratchBufferImpl(nullptr, buffer_index);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	f7ff feb3 	bl	800a134 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>
 800a3ce:	4603      	mov	r3, r0
  }
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
    return GetTensorImpl(nullptr, tensor_index);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f7ff fef5 	bl	800a1d4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
 800a3ea:	4603      	mov	r3, r0
  }
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
    return;
 800a3fe:	bf00      	nop
  }
 800a400:	370c      	adds	r7, #12
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	6039      	str	r1, [r7, #0]
    return GetEvalTensorImpl(nullptr, tensor_index);
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	2000      	movs	r0, #0
 800a418:	f7ff ff46 	bl	800a2a8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
 800a41c:	4603      	mov	r3, r0
  }
 800a41e:	4618      	mov	r0, r3
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <_Z19tflite_learn_4_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
 800a428:	b5b0      	push	{r4, r5, r7, lr}
 800a42a:	b0aa      	sub	sp, #168	; 0xa8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 800a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a432:	f44f 7120 	mov.w	r1, #640	; 0x280
 800a436:	2010      	movs	r0, #16
 800a438:	4798      	blx	r3
 800a43a:	4603      	mov	r3, r0
 800a43c:	4aa7      	ldr	r2, [pc, #668]	; (800a6dc <_Z19tflite_learn_4_initPFPvjjE+0x2b4>)
 800a43e:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 800a440:	4ba6      	ldr	r3, [pc, #664]	; (800a6dc <_Z19tflite_learn_4_initPFPvjjE+0x2b4>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d104      	bne.n	800a452 <_Z19tflite_learn_4_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 800a448:	48a5      	ldr	r0, [pc, #660]	; (800a6e0 <_Z19tflite_learn_4_initPFPvjjE+0x2b8>)
 800a44a:	f7f8 fdb3 	bl	8002fb4 <_Z9ei_printfPKcz>
    return kTfLiteError;
 800a44e:	2401      	movs	r4, #1
 800a450:	e13f      	b.n	800a6d2 <_Z19tflite_learn_4_initPFPvjjE+0x2aa>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 800a452:	4ba2      	ldr	r3, [pc, #648]	; (800a6dc <_Z19tflite_learn_4_initPFPvjjE+0x2b4>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4aa3      	ldr	r2, [pc, #652]	; (800a6e4 <_Z19tflite_learn_4_initPFPvjjE+0x2bc>)
 800a458:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 800a45a:	4ba0      	ldr	r3, [pc, #640]	; (800a6dc <_Z19tflite_learn_4_initPFPvjjE+0x2b4>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a462:	4aa1      	ldr	r2, [pc, #644]	; (800a6e8 <_Z19tflite_learn_4_initPFPvjjE+0x2c0>)
 800a464:	6013      	str	r3, [r2, #0]

  EonMicroContext micro_context_;
 800a466:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff ff74 	bl	800a358 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
 800a470:	4a9e      	ldr	r2, [pc, #632]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a472:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a476:	6093      	str	r3, [r2, #8]
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 800a478:	4b9c      	ldr	r3, [pc, #624]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a47a:	4a9d      	ldr	r2, [pc, #628]	; (800a6f0 <_Z19tflite_learn_4_initPFPvjjE+0x2c8>)
 800a47c:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
 800a47e:	4b9b      	ldr	r3, [pc, #620]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a480:	4a9c      	ldr	r2, [pc, #624]	; (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2cc>)
 800a482:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 800a484:	4b99      	ldr	r3, [pc, #612]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a486:	4a9c      	ldr	r2, [pc, #624]	; (800a6f8 <_Z19tflite_learn_4_initPFPvjjE+0x2d0>)
 800a488:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensorImpl;
 800a48a:	4b98      	ldr	r3, [pc, #608]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a48c:	4a9b      	ldr	r2, [pc, #620]	; (800a6fc <_Z19tflite_learn_4_initPFPvjjE+0x2d4>)
 800a48e:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
 800a490:	4b96      	ldr	r3, [pc, #600]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a492:	4a9b      	ldr	r2, [pc, #620]	; (800a700 <_Z19tflite_learn_4_initPFPvjjE+0x2d8>)
 800a494:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.ReportError = &MicroContextReportOpError;
 800a496:	4b95      	ldr	r3, [pc, #596]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a498:	4a9a      	ldr	r2, [pc, #616]	; (800a704 <_Z19tflite_learn_4_initPFPvjjE+0x2dc>)
 800a49a:	611a      	str	r2, [r3, #16]

  ctx.tensors_size = 11;
 800a49c:	4b93      	ldr	r3, [pc, #588]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a49e:	220b      	movs	r2, #11
 800a4a0:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a4a8:	e024      	b.n	800a4f4 <_Z19tflite_learn_4_initPFPvjjE+0xcc>
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
 800a4aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800a4b4:	f7ff fd00 	bl	8009eb8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 800a4b8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d114      	bne.n	800a4ea <_Z19tflite_learn_4_initPFPvjjE+0xc2>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 800a4c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4c2:	4991      	ldr	r1, [pc, #580]	; (800a708 <_Z19tflite_learn_4_initPFPvjjE+0x2e0>)
 800a4c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4c8:	011b      	lsls	r3, r3, #4
 800a4ca:	440b      	add	r3, r1
 800a4cc:	330c      	adds	r3, #12
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (data_end_ptr > tensor_boundary) {
 800a4d6:	4b83      	ldr	r3, [pc, #524]	; (800a6e4 <_Z19tflite_learn_4_initPFPvjjE+0x2bc>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d903      	bls.n	800a4ea <_Z19tflite_learn_4_initPFPvjjE+0xc2>
        tensor_boundary = data_end_ptr;
 800a4e2:	4a80      	ldr	r2, [pc, #512]	; (800a6e4 <_Z19tflite_learn_4_initPFPvjjE+0x2bc>)
 800a4e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4e8:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 800a4ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a4f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4f8:	2b0a      	cmp	r3, #10
 800a4fa:	d9d6      	bls.n	800a4aa <_Z19tflite_learn_4_initPFPvjjE+0x82>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
 800a4fc:	4b79      	ldr	r3, [pc, #484]	; (800a6e4 <_Z19tflite_learn_4_initPFPvjjE+0x2bc>)
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	4b79      	ldr	r3, [pc, #484]	; (800a6e8 <_Z19tflite_learn_4_initPFPvjjE+0x2c0>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d904      	bls.n	800a512 <_Z19tflite_learn_4_initPFPvjjE+0xea>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 800a508:	4880      	ldr	r0, [pc, #512]	; (800a70c <_Z19tflite_learn_4_initPFPvjjE+0x2e4>)
 800a50a:	f7f8 fd53 	bl	8002fb4 <_Z9ei_printfPKcz>
    return kTfLiteError;
 800a50e:	2401      	movs	r4, #1
 800a510:	e0da      	b.n	800a6c8 <_Z19tflite_learn_4_initPFPvjjE+0x2a0>
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 800a512:	4c7f      	ldr	r4, [pc, #508]	; (800a710 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a514:	463b      	mov	r3, r7
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe ffd4 	bl	80094c4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 800a51c:	4625      	mov	r5, r4
 800a51e:	463c      	mov	r4, r7
 800a520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	602b      	str	r3, [r5, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 800a52c:	4c78      	ldr	r4, [pc, #480]	; (800a710 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a52e:	463b      	mov	r3, r7
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff fc23 	bl	8009d7c <_ZN6tflite16Register_SOFTMAXEv>
 800a536:	3424      	adds	r4, #36	; 0x24
 800a538:	463d      	mov	r5, r7
 800a53a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a53c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a53e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	6023      	str	r3, [r4, #0]

  for (size_t g = 0; g < 1; ++g) {
 800a546:	2300      	movs	r3, #0
 800a548:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a54c:	e054      	b.n	800a5f8 <_Z19tflite_learn_4_initPFPvjjE+0x1d0>
    current_subgraph_index = g;
 800a54e:	4a71      	ldr	r2, [pc, #452]	; (800a714 <_Z19tflite_learn_4_initPFPvjjE+0x2ec>)
 800a550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a554:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 800a556:	4a70      	ldr	r2, [pc, #448]	; (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2f0>)
 800a558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a564:	e039      	b.n	800a5da <_Z19tflite_learn_4_initPFPvjjE+0x1b2>
      if (registrations[used_ops[i]].init) {
 800a566:	4a6d      	ldr	r2, [pc, #436]	; (800a71c <_Z19tflite_learn_4_initPFPvjjE+0x2f4>)
 800a568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a56c:	4413      	add	r3, r2
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	4619      	mov	r1, r3
 800a572:	4a67      	ldr	r2, [pc, #412]	; (800a710 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a574:	460b      	mov	r3, r1
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	440b      	add	r3, r1
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d025      	beq.n	800a5d0 <_Z19tflite_learn_4_initPFPvjjE+0x1a8>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 800a584:	4a65      	ldr	r2, [pc, #404]	; (800a71c <_Z19tflite_learn_4_initPFPvjjE+0x2f4>)
 800a586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a58a:	4413      	add	r3, r2
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	4619      	mov	r1, r3
 800a590:	4a5f      	ldr	r2, [pc, #380]	; (800a710 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a592:	460b      	mov	r3, r1
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	440b      	add	r3, r1
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	681c      	ldr	r4, [r3, #0]
 800a59e:	4960      	ldr	r1, [pc, #384]	; (800a720 <_Z19tflite_learn_4_initPFPvjjE+0x2f8>)
 800a5a0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	440b      	add	r3, r1
 800a5ae:	3314      	adds	r3, #20
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	484d      	ldr	r0, [pc, #308]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a5b8:	47a0      	blx	r4
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	4858      	ldr	r0, [pc, #352]	; (800a720 <_Z19tflite_learn_4_initPFPvjjE+0x2f8>)
 800a5be:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	4403      	add	r3, r0
 800a5cc:	3310      	adds	r3, #16
 800a5ce:	6019      	str	r1, [r3, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 800a5d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5de:	3301      	adds	r3, #1
 800a5e0:	4a4d      	ldr	r2, [pc, #308]	; (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2f0>)
 800a5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5e6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d3bb      	bcc.n	800a566 <_Z19tflite_learn_4_initPFPvjjE+0x13e>
  for (size_t g = 0; g < 1; ++g) {
 800a5ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0a6      	beq.n	800a54e <_Z19tflite_learn_4_initPFPvjjE+0x126>
      }
    }
  }
  current_subgraph_index = 0;
 800a600:	4b44      	ldr	r3, [pc, #272]	; (800a714 <_Z19tflite_learn_4_initPFPvjjE+0x2ec>)
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]

  for(size_t g = 0; g < 1; ++g) {
 800a606:	2300      	movs	r3, #0
 800a608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a60c:	e054      	b.n	800a6b8 <_Z19tflite_learn_4_initPFPvjjE+0x290>
    current_subgraph_index = g;
 800a60e:	4a41      	ldr	r2, [pc, #260]	; (800a714 <_Z19tflite_learn_4_initPFPvjjE+0x2ec>)
 800a610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a614:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 800a616:	4a40      	ldr	r2, [pc, #256]	; (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2f0>)
 800a618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a624:	e039      	b.n	800a69a <_Z19tflite_learn_4_initPFPvjjE+0x272>
      if (registrations[used_ops[i]].prepare) {
 800a626:	4a3d      	ldr	r2, [pc, #244]	; (800a71c <_Z19tflite_learn_4_initPFPvjjE+0x2f4>)
 800a628:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a62c:	4413      	add	r3, r2
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	4619      	mov	r1, r3
 800a632:	4a37      	ldr	r2, [pc, #220]	; (800a710 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a634:	460b      	mov	r3, r1
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	440b      	add	r3, r1
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	3308      	adds	r3, #8
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d024      	beq.n	800a690 <_Z19tflite_learn_4_initPFPvjjE+0x268>
        ResetTensors();
 800a646:	f7ff fd91 	bl	800a16c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 800a64a:	4a34      	ldr	r2, [pc, #208]	; (800a71c <_Z19tflite_learn_4_initPFPvjjE+0x2f4>)
 800a64c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a650:	4413      	add	r3, r2
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	4619      	mov	r1, r3
 800a656:	4a2e      	ldr	r2, [pc, #184]	; (800a710 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a658:	460b      	mov	r3, r1
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	440b      	add	r3, r1
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4413      	add	r3, r2
 800a662:	3308      	adds	r3, #8
 800a664:	681c      	ldr	r4, [r3, #0]
 800a666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a66a:	4613      	mov	r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	00db      	lsls	r3, r3, #3
 800a672:	4a2b      	ldr	r2, [pc, #172]	; (800a720 <_Z19tflite_learn_4_initPFPvjjE+0x2f8>)
 800a674:	4413      	add	r3, r2
 800a676:	4619      	mov	r1, r3
 800a678:	481c      	ldr	r0, [pc, #112]	; (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a67a:	47a0      	blx	r4
 800a67c:	4603      	mov	r3, r0
 800a67e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (status != kTfLiteOk) {
 800a682:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <_Z19tflite_learn_4_initPFPvjjE+0x268>
          return status;
 800a68a:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 800a68e:	e01b      	b.n	800a6c8 <_Z19tflite_learn_4_initPFPvjjE+0x2a0>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 800a690:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a694:	3301      	adds	r3, #1
 800a696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a69a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a69e:	3301      	adds	r3, #1
 800a6a0:	4a1d      	ldr	r2, [pc, #116]	; (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2f0>)
 800a6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d3bb      	bcc.n	800a626 <_Z19tflite_learn_4_initPFPvjjE+0x1fe>
  for(size_t g = 0; g < 1; ++g) {
 800a6ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a6b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0a6      	beq.n	800a60e <_Z19tflite_learn_4_initPFPvjjE+0x1e6>
        }
      }
    }
  }
  current_subgraph_index = 0;
 800a6c0:	4b14      	ldr	r3, [pc, #80]	; (800a714 <_Z19tflite_learn_4_initPFPvjjE+0x2ec>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800a6c6:	2400      	movs	r4, #0
}
 800a6c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f8af 	bl	800a830 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 800a6d2:	4623      	mov	r3, r4
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	37a8      	adds	r7, #168	; 0xa8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bdb0      	pop	{r4, r5, r7, pc}
 800a6dc:	200007a4 	.word	0x200007a4
 800a6e0:	08011148 	.word	0x08011148
 800a6e4:	200007a8 	.word	0x200007a8
 800a6e8:	200007ac 	.word	0x200007ac
 800a6ec:	200007b0 	.word	0x200007b0
 800a6f0:	08009fc5 	.word	0x08009fc5
 800a6f4:	0800a0a9 	.word	0x0800a0a9
 800a6f8:	0800a135 	.word	0x0800a135
 800a6fc:	0800a1d5 	.word	0x0800a1d5
 800a700:	0800a2a9 	.word	0x0800a2a9
 800a704:	08008a71 	.word	0x08008a71
 800a708:	2000039c 	.word	0x2000039c
 800a70c:	08011170 	.word	0x08011170
 800a710:	20000958 	.word	0x20000958
 800a714:	200009a0 	.word	0x200009a0
 800a718:	08013344 	.word	0x08013344
 800a71c:	200004ec 	.word	0x200004ec
 800a720:	2000044c 	.word	0x2000044c

0800a724 <_Z20tflite_learn_4_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(in_tensor_indices[index], tensor);
 800a72e:	2300      	movs	r3, #0
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	4618      	mov	r0, r3
 800a734:	f7ff fbc0 	bl	8009eb8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <_Z21tflite_learn_4_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
 800a742:	b580      	push	{r7, lr}
 800a744:	b082      	sub	sp, #8
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(out_tensor_indices[index], tensor);
 800a74c:	230a      	movs	r3, #10
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff fbb1 	bl	8009eb8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <_Z21tflite_learn_4_invokev>:

TfLiteStatus tflite_learn_4_invoke() {
 800a760:	b590      	push	{r4, r7, lr}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 800a766:	2300      	movs	r3, #0
 800a768:	607b      	str	r3, [r7, #4]
 800a76a:	e022      	b.n	800a7b2 <_Z21tflite_learn_4_invokev+0x52>
    ResetTensors();
 800a76c:	f7ff fcfe 	bl	800a16c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 800a770:	4a14      	ldr	r2, [pc, #80]	; (800a7c4 <_Z21tflite_learn_4_invokev+0x64>)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4413      	add	r3, r2
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	4619      	mov	r1, r3
 800a77a:	4a13      	ldr	r2, [pc, #76]	; (800a7c8 <_Z21tflite_learn_4_invokev+0x68>)
 800a77c:	460b      	mov	r3, r1
 800a77e:	00db      	lsls	r3, r3, #3
 800a780:	440b      	add	r3, r1
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	330c      	adds	r3, #12
 800a788:	681c      	ldr	r4, [r3, #0]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	4a0d      	ldr	r2, [pc, #52]	; (800a7cc <_Z21tflite_learn_4_invokev+0x6c>)
 800a796:	4413      	add	r3, r2
 800a798:	4619      	mov	r1, r3
 800a79a:	480d      	ldr	r0, [pc, #52]	; (800a7d0 <_Z21tflite_learn_4_invokev+0x70>)
 800a79c:	47a0      	blx	r4
 800a79e:	4603      	mov	r3, r0
 800a7a0:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <_Z21tflite_learn_4_invokev+0x4c>
      return status;
 800a7a8:	78fb      	ldrb	r3, [r7, #3]
 800a7aa:	e006      	b.n	800a7ba <_Z21tflite_learn_4_invokev+0x5a>
  for (size_t i = 0; i < 4; ++i) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	607b      	str	r3, [r7, #4]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b03      	cmp	r3, #3
 800a7b6:	d9d9      	bls.n	800a76c <_Z21tflite_learn_4_invokev+0xc>
    }
  }
  return kTfLiteOk;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd90      	pop	{r4, r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200004ec 	.word	0x200004ec
 800a7c8:	20000958 	.word	0x20000958
 800a7cc:	2000044c 	.word	0x2000044c
 800a7d0:	200007b0 	.word	0x200007b0

0800a7d4 <_Z20tflite_learn_4_resetPFvPvE>:

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 800a7dc:	4b10      	ldr	r3, [pc, #64]	; (800a820 <_Z20tflite_learn_4_resetPFvPvE+0x4c>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 800a7e6:	4b0f      	ldr	r3, [pc, #60]	; (800a824 <_Z20tflite_learn_4_resetPFvPvE+0x50>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	e009      	b.n	800a806 <_Z20tflite_learn_4_resetPFvPvE+0x32>
    ei_free(overflow_buffers[ix]);
 800a7f2:	4a0d      	ldr	r2, [pc, #52]	; (800a828 <_Z20tflite_learn_4_resetPFvPvE+0x54>)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fd f9ee 	bl	8007bdc <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	3301      	adds	r3, #1
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	4b09      	ldr	r3, [pc, #36]	; (800a82c <_Z20tflite_learn_4_resetPFvPvE+0x58>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d3f0      	bcc.n	800a7f2 <_Z20tflite_learn_4_resetPFvPvE+0x1e>
  }
  overflow_buffers_ix = 0;
 800a810:	4b06      	ldr	r3, [pc, #24]	; (800a82c <_Z20tflite_learn_4_resetPFvPvE+0x58>)
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	200007a4 	.word	0x200007a4
 800a824:	200009f0 	.word	0x200009f0
 800a828:	200009a4 	.word	0x200009a4
 800a82c:	200009cc 	.word	0x200009cc

0800a830 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	4a05      	ldr	r2, [pc, #20]	; (800a850 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x20>)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4618      	mov	r0, r3
 800a842:	f7fd ffd3 	bl	80087ec <_ZN6tflite12MicroContextD1Ev>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	08013354 	.word	0x08013354

0800a854 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f7ff ffe7 	bl	800a830 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 800a862:	2118      	movs	r1, #24
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f83f 	bl	800a8e8 <_ZdlPvj>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4618      	mov	r0, r3
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <_Z41__static_initialization_and_destruction_0ii>:
}
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d11e      	bne.n	800a8c2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d119      	bne.n	800a8c2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension0, 16, },
 800a88e:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	33d0      	adds	r3, #208	; 0xd0
};
 800a894:	4a0f      	ldr	r2, [pc, #60]	; (800a8d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a896:	6053      	str	r3, [r2, #4]
 800a898:	4b0d      	ldr	r3, [pc, #52]	; (800a8d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a0d      	ldr	r2, [pc, #52]	; (800a8d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a89e:	6753      	str	r3, [r2, #116]	; 0x74
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension8, 120, },
 800a8a0:	4b0b      	ldr	r3, [pc, #44]	; (800a8d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	33d0      	adds	r3, #208	; 0xd0
};
 800a8a6:	4a0b      	ldr	r2, [pc, #44]	; (800a8d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a8a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 12, },
 800a8ac:	4b08      	ldr	r3, [pc, #32]	; (800a8d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3310      	adds	r3, #16
};
 800a8b2:	4a08      	ldr	r2, [pc, #32]	; (800a8d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a8b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a8b8:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a05      	ldr	r2, [pc, #20]	; (800a8d4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a8be:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
}
 800a8c2:	bf00      	nop
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	200007a4 	.word	0x200007a4
 800a8d4:	2000039c 	.word	0x2000039c

0800a8d8 <_GLOBAL__sub_I__Z19tflite_learn_4_initPFPvjjE>:
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a8e0:	2001      	movs	r0, #1
 800a8e2:	f7ff ffc7 	bl	800a874 <_Z41__static_initialization_and_destruction_0ii>
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <_ZdlPvj>:
 800a8e8:	f000 b81a 	b.w	800a920 <_ZdlPv>

0800a8ec <_ZdaPv>:
 800a8ec:	f000 b818 	b.w	800a920 <_ZdlPv>

0800a8f0 <_ZdaPvj>:
 800a8f0:	f7ff bffc 	b.w	800a8ec <_ZdaPv>

0800a8f4 <_Znwj>:
 800a8f4:	2801      	cmp	r0, #1
 800a8f6:	bf38      	it	cc
 800a8f8:	2001      	movcc	r0, #1
 800a8fa:	b510      	push	{r4, lr}
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	4620      	mov	r0, r4
 800a900:	f001 fb70 	bl	800bfe4 <malloc>
 800a904:	b100      	cbz	r0, 800a908 <_Znwj+0x14>
 800a906:	bd10      	pop	{r4, pc}
 800a908:	f000 f80c 	bl	800a924 <_ZSt15get_new_handlerv>
 800a90c:	b908      	cbnz	r0, 800a912 <_Znwj+0x1e>
 800a90e:	f001 fb25 	bl	800bf5c <abort>
 800a912:	4780      	blx	r0
 800a914:	e7f3      	b.n	800a8fe <_Znwj+0xa>

0800a916 <_Znaj>:
 800a916:	f7ff bfed 	b.w	800a8f4 <_Znwj>

0800a91a <_ZSt25__throw_bad_function_callv>:
 800a91a:	b508      	push	{r3, lr}
 800a91c:	f001 fb1e 	bl	800bf5c <abort>

0800a920 <_ZdlPv>:
 800a920:	f001 bb68 	b.w	800bff4 <free>

0800a924 <_ZSt15get_new_handlerv>:
 800a924:	4b02      	ldr	r3, [pc, #8]	; (800a930 <_ZSt15get_new_handlerv+0xc>)
 800a926:	6818      	ldr	r0, [r3, #0]
 800a928:	f3bf 8f5b 	dmb	ish
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	200009f4 	.word	0x200009f4

0800a934 <pow>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	ed2d 8b02 	vpush	{d8}
 800a93a:	eeb0 8a40 	vmov.f32	s16, s0
 800a93e:	eef0 8a60 	vmov.f32	s17, s1
 800a942:	ec55 4b11 	vmov	r4, r5, d1
 800a946:	f000 fb0f 	bl	800af68 <__ieee754_pow>
 800a94a:	4622      	mov	r2, r4
 800a94c:	462b      	mov	r3, r5
 800a94e:	4620      	mov	r0, r4
 800a950:	4629      	mov	r1, r5
 800a952:	ec57 6b10 	vmov	r6, r7, d0
 800a956:	f7f6 f909 	bl	8000b6c <__aeabi_dcmpun>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d13b      	bne.n	800a9d6 <pow+0xa2>
 800a95e:	ec51 0b18 	vmov	r0, r1, d8
 800a962:	2200      	movs	r2, #0
 800a964:	2300      	movs	r3, #0
 800a966:	f7f6 f8cf 	bl	8000b08 <__aeabi_dcmpeq>
 800a96a:	b1b8      	cbz	r0, 800a99c <pow+0x68>
 800a96c:	2200      	movs	r2, #0
 800a96e:	2300      	movs	r3, #0
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f6 f8c8 	bl	8000b08 <__aeabi_dcmpeq>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d146      	bne.n	800aa0a <pow+0xd6>
 800a97c:	ec45 4b10 	vmov	d0, r4, r5
 800a980:	f000 f902 	bl	800ab88 <finite>
 800a984:	b338      	cbz	r0, 800a9d6 <pow+0xa2>
 800a986:	2200      	movs	r2, #0
 800a988:	2300      	movs	r3, #0
 800a98a:	4620      	mov	r0, r4
 800a98c:	4629      	mov	r1, r5
 800a98e:	f7f6 f8c5 	bl	8000b1c <__aeabi_dcmplt>
 800a992:	b300      	cbz	r0, 800a9d6 <pow+0xa2>
 800a994:	f002 fc8e 	bl	800d2b4 <__errno>
 800a998:	2322      	movs	r3, #34	; 0x22
 800a99a:	e01b      	b.n	800a9d4 <pow+0xa0>
 800a99c:	ec47 6b10 	vmov	d0, r6, r7
 800a9a0:	f000 f8f2 	bl	800ab88 <finite>
 800a9a4:	b9e0      	cbnz	r0, 800a9e0 <pow+0xac>
 800a9a6:	eeb0 0a48 	vmov.f32	s0, s16
 800a9aa:	eef0 0a68 	vmov.f32	s1, s17
 800a9ae:	f000 f8eb 	bl	800ab88 <finite>
 800a9b2:	b1a8      	cbz	r0, 800a9e0 <pow+0xac>
 800a9b4:	ec45 4b10 	vmov	d0, r4, r5
 800a9b8:	f000 f8e6 	bl	800ab88 <finite>
 800a9bc:	b180      	cbz	r0, 800a9e0 <pow+0xac>
 800a9be:	4632      	mov	r2, r6
 800a9c0:	463b      	mov	r3, r7
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	4639      	mov	r1, r7
 800a9c6:	f7f6 f8d1 	bl	8000b6c <__aeabi_dcmpun>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d0e2      	beq.n	800a994 <pow+0x60>
 800a9ce:	f002 fc71 	bl	800d2b4 <__errno>
 800a9d2:	2321      	movs	r3, #33	; 0x21
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	ecbd 8b02 	vpop	{d8}
 800a9da:	ec47 6b10 	vmov	d0, r6, r7
 800a9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	f7f6 f88e 	bl	8000b08 <__aeabi_dcmpeq>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d0f2      	beq.n	800a9d6 <pow+0xa2>
 800a9f0:	eeb0 0a48 	vmov.f32	s0, s16
 800a9f4:	eef0 0a68 	vmov.f32	s1, s17
 800a9f8:	f000 f8c6 	bl	800ab88 <finite>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d0ea      	beq.n	800a9d6 <pow+0xa2>
 800aa00:	ec45 4b10 	vmov	d0, r4, r5
 800aa04:	f000 f8c0 	bl	800ab88 <finite>
 800aa08:	e7c3      	b.n	800a992 <pow+0x5e>
 800aa0a:	4f01      	ldr	r7, [pc, #4]	; (800aa10 <pow+0xdc>)
 800aa0c:	2600      	movs	r6, #0
 800aa0e:	e7e2      	b.n	800a9d6 <pow+0xa2>
 800aa10:	3ff00000 	.word	0x3ff00000

0800aa14 <frexp>:
 800aa14:	b570      	push	{r4, r5, r6, lr}
 800aa16:	2100      	movs	r1, #0
 800aa18:	ec55 4b10 	vmov	r4, r5, d0
 800aa1c:	6001      	str	r1, [r0, #0]
 800aa1e:	4916      	ldr	r1, [pc, #88]	; (800aa78 <frexp+0x64>)
 800aa20:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800aa24:	428a      	cmp	r2, r1
 800aa26:	4606      	mov	r6, r0
 800aa28:	462b      	mov	r3, r5
 800aa2a:	dc22      	bgt.n	800aa72 <frexp+0x5e>
 800aa2c:	ee10 1a10 	vmov	r1, s0
 800aa30:	4311      	orrs	r1, r2
 800aa32:	d01e      	beq.n	800aa72 <frexp+0x5e>
 800aa34:	4911      	ldr	r1, [pc, #68]	; (800aa7c <frexp+0x68>)
 800aa36:	4029      	ands	r1, r5
 800aa38:	b969      	cbnz	r1, 800aa56 <frexp+0x42>
 800aa3a:	4b11      	ldr	r3, [pc, #68]	; (800aa80 <frexp+0x6c>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	ee10 0a10 	vmov	r0, s0
 800aa42:	4629      	mov	r1, r5
 800aa44:	f7f5 fdf8 	bl	8000638 <__aeabi_dmul>
 800aa48:	460b      	mov	r3, r1
 800aa4a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800aa4e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800aa52:	4604      	mov	r4, r0
 800aa54:	6031      	str	r1, [r6, #0]
 800aa56:	6831      	ldr	r1, [r6, #0]
 800aa58:	1512      	asrs	r2, r2, #20
 800aa5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa5e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800aa62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa66:	4411      	add	r1, r2
 800aa68:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800aa6c:	6031      	str	r1, [r6, #0]
 800aa6e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800aa72:	ec45 4b10 	vmov	d0, r4, r5
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	7fefffff 	.word	0x7fefffff
 800aa7c:	7ff00000 	.word	0x7ff00000
 800aa80:	43500000 	.word	0x43500000

0800aa84 <expf>:
 800aa84:	b508      	push	{r3, lr}
 800aa86:	ed2d 8b02 	vpush	{d8}
 800aa8a:	eef0 8a40 	vmov.f32	s17, s0
 800aa8e:	f000 ff9f 	bl	800b9d0 <__ieee754_expf>
 800aa92:	eeb0 8a40 	vmov.f32	s16, s0
 800aa96:	eeb0 0a68 	vmov.f32	s0, s17
 800aa9a:	f000 f889 	bl	800abb0 <finitef>
 800aa9e:	b160      	cbz	r0, 800aaba <expf+0x36>
 800aaa0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800aae0 <expf+0x5c>
 800aaa4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aaa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaac:	dd0a      	ble.n	800aac4 <expf+0x40>
 800aaae:	f002 fc01 	bl	800d2b4 <__errno>
 800aab2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800aae4 <expf+0x60>
 800aab6:	2322      	movs	r3, #34	; 0x22
 800aab8:	6003      	str	r3, [r0, #0]
 800aaba:	eeb0 0a48 	vmov.f32	s0, s16
 800aabe:	ecbd 8b02 	vpop	{d8}
 800aac2:	bd08      	pop	{r3, pc}
 800aac4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800aae8 <expf+0x64>
 800aac8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad0:	d5f3      	bpl.n	800aaba <expf+0x36>
 800aad2:	f002 fbef 	bl	800d2b4 <__errno>
 800aad6:	2322      	movs	r3, #34	; 0x22
 800aad8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800aaec <expf+0x68>
 800aadc:	6003      	str	r3, [r0, #0]
 800aade:	e7ec      	b.n	800aaba <expf+0x36>
 800aae0:	42b17217 	.word	0x42b17217
 800aae4:	7f800000 	.word	0x7f800000
 800aae8:	c2cff1b5 	.word	0xc2cff1b5
 800aaec:	00000000 	.word	0x00000000

0800aaf0 <log10f>:
 800aaf0:	b508      	push	{r3, lr}
 800aaf2:	ed2d 8b02 	vpush	{d8}
 800aaf6:	eeb0 8a40 	vmov.f32	s16, s0
 800aafa:	f001 f929 	bl	800bd50 <__ieee754_log10f>
 800aafe:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab06:	d60f      	bvs.n	800ab28 <log10f+0x38>
 800ab08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ab0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab10:	d80a      	bhi.n	800ab28 <log10f+0x38>
 800ab12:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ab16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1a:	d108      	bne.n	800ab2e <log10f+0x3e>
 800ab1c:	f002 fbca 	bl	800d2b4 <__errno>
 800ab20:	2322      	movs	r3, #34	; 0x22
 800ab22:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800ab44 <log10f+0x54>
 800ab26:	6003      	str	r3, [r0, #0]
 800ab28:	ecbd 8b02 	vpop	{d8}
 800ab2c:	bd08      	pop	{r3, pc}
 800ab2e:	f002 fbc1 	bl	800d2b4 <__errno>
 800ab32:	ecbd 8b02 	vpop	{d8}
 800ab36:	2321      	movs	r3, #33	; 0x21
 800ab38:	6003      	str	r3, [r0, #0]
 800ab3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ab3e:	4802      	ldr	r0, [pc, #8]	; (800ab48 <log10f+0x58>)
 800ab40:	f000 b844 	b.w	800abcc <nanf>
 800ab44:	ff800000 	.word	0xff800000
 800ab48:	08013403 	.word	0x08013403

0800ab4c <sqrtf>:
 800ab4c:	b508      	push	{r3, lr}
 800ab4e:	ed2d 8b02 	vpush	{d8}
 800ab52:	eeb0 8a40 	vmov.f32	s16, s0
 800ab56:	f000 f93b 	bl	800add0 <__ieee754_sqrtf>
 800ab5a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab62:	d60c      	bvs.n	800ab7e <sqrtf+0x32>
 800ab64:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ab84 <sqrtf+0x38>
 800ab68:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ab6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab70:	d505      	bpl.n	800ab7e <sqrtf+0x32>
 800ab72:	f002 fb9f 	bl	800d2b4 <__errno>
 800ab76:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ab7a:	2321      	movs	r3, #33	; 0x21
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	ecbd 8b02 	vpop	{d8}
 800ab82:	bd08      	pop	{r3, pc}
 800ab84:	00000000 	.word	0x00000000

0800ab88 <finite>:
 800ab88:	b082      	sub	sp, #8
 800ab8a:	ed8d 0b00 	vstr	d0, [sp]
 800ab8e:	9801      	ldr	r0, [sp, #4]
 800ab90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ab94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ab98:	0fc0      	lsrs	r0, r0, #31
 800ab9a:	b002      	add	sp, #8
 800ab9c:	4770      	bx	lr
	...

0800aba0 <nan>:
 800aba0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aba8 <nan+0x8>
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	00000000 	.word	0x00000000
 800abac:	7ff80000 	.word	0x7ff80000

0800abb0 <finitef>:
 800abb0:	b082      	sub	sp, #8
 800abb2:	ed8d 0a01 	vstr	s0, [sp, #4]
 800abb6:	9801      	ldr	r0, [sp, #4]
 800abb8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800abbc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800abc0:	bfac      	ite	ge
 800abc2:	2000      	movge	r0, #0
 800abc4:	2001      	movlt	r0, #1
 800abc6:	b002      	add	sp, #8
 800abc8:	4770      	bx	lr
	...

0800abcc <nanf>:
 800abcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800abd4 <nanf+0x8>
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	7fc00000 	.word	0x7fc00000

0800abd8 <with_errnof>:
 800abd8:	b513      	push	{r0, r1, r4, lr}
 800abda:	4604      	mov	r4, r0
 800abdc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800abe0:	f002 fb68 	bl	800d2b4 <__errno>
 800abe4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800abe8:	6004      	str	r4, [r0, #0]
 800abea:	b002      	add	sp, #8
 800abec:	bd10      	pop	{r4, pc}

0800abee <xflowf>:
 800abee:	b130      	cbz	r0, 800abfe <xflowf+0x10>
 800abf0:	eef1 7a40 	vneg.f32	s15, s0
 800abf4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800abf8:	2022      	movs	r0, #34	; 0x22
 800abfa:	f7ff bfed 	b.w	800abd8 <with_errnof>
 800abfe:	eef0 7a40 	vmov.f32	s15, s0
 800ac02:	e7f7      	b.n	800abf4 <xflowf+0x6>

0800ac04 <__math_uflowf>:
 800ac04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac0c <__math_uflowf+0x8>
 800ac08:	f7ff bff1 	b.w	800abee <xflowf>
 800ac0c:	10000000 	.word	0x10000000

0800ac10 <__math_oflowf>:
 800ac10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac18 <__math_oflowf+0x8>
 800ac14:	f7ff bfeb 	b.w	800abee <xflowf>
 800ac18:	70000000 	.word	0x70000000

0800ac1c <__ieee754_sqrt>:
 800ac1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	ec55 4b10 	vmov	r4, r5, d0
 800ac24:	4e67      	ldr	r6, [pc, #412]	; (800adc4 <__ieee754_sqrt+0x1a8>)
 800ac26:	43ae      	bics	r6, r5
 800ac28:	ee10 0a10 	vmov	r0, s0
 800ac2c:	ee10 2a10 	vmov	r2, s0
 800ac30:	4629      	mov	r1, r5
 800ac32:	462b      	mov	r3, r5
 800ac34:	d10d      	bne.n	800ac52 <__ieee754_sqrt+0x36>
 800ac36:	f7f5 fcff 	bl	8000638 <__aeabi_dmul>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4620      	mov	r0, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	f7f5 fb43 	bl	80002cc <__adddf3>
 800ac46:	4604      	mov	r4, r0
 800ac48:	460d      	mov	r5, r1
 800ac4a:	ec45 4b10 	vmov	d0, r4, r5
 800ac4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac52:	2d00      	cmp	r5, #0
 800ac54:	dc0b      	bgt.n	800ac6e <__ieee754_sqrt+0x52>
 800ac56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ac5a:	4326      	orrs	r6, r4
 800ac5c:	d0f5      	beq.n	800ac4a <__ieee754_sqrt+0x2e>
 800ac5e:	b135      	cbz	r5, 800ac6e <__ieee754_sqrt+0x52>
 800ac60:	f7f5 fb32 	bl	80002c8 <__aeabi_dsub>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	f7f5 fe10 	bl	800088c <__aeabi_ddiv>
 800ac6c:	e7eb      	b.n	800ac46 <__ieee754_sqrt+0x2a>
 800ac6e:	1509      	asrs	r1, r1, #20
 800ac70:	f000 808d 	beq.w	800ad8e <__ieee754_sqrt+0x172>
 800ac74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac78:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ac7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac80:	07c9      	lsls	r1, r1, #31
 800ac82:	bf5c      	itt	pl
 800ac84:	005b      	lslpl	r3, r3, #1
 800ac86:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ac8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac8e:	bf58      	it	pl
 800ac90:	0052      	lslpl	r2, r2, #1
 800ac92:	2500      	movs	r5, #0
 800ac94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ac98:	1076      	asrs	r6, r6, #1
 800ac9a:	0052      	lsls	r2, r2, #1
 800ac9c:	f04f 0e16 	mov.w	lr, #22
 800aca0:	46ac      	mov	ip, r5
 800aca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aca6:	eb0c 0001 	add.w	r0, ip, r1
 800acaa:	4298      	cmp	r0, r3
 800acac:	bfde      	ittt	le
 800acae:	1a1b      	suble	r3, r3, r0
 800acb0:	eb00 0c01 	addle.w	ip, r0, r1
 800acb4:	186d      	addle	r5, r5, r1
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	f1be 0e01 	subs.w	lr, lr, #1
 800acbc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800acc0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800acc4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800acc8:	d1ed      	bne.n	800aca6 <__ieee754_sqrt+0x8a>
 800acca:	4674      	mov	r4, lr
 800accc:	2720      	movs	r7, #32
 800acce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800acd2:	4563      	cmp	r3, ip
 800acd4:	eb01 000e 	add.w	r0, r1, lr
 800acd8:	dc02      	bgt.n	800ace0 <__ieee754_sqrt+0xc4>
 800acda:	d113      	bne.n	800ad04 <__ieee754_sqrt+0xe8>
 800acdc:	4290      	cmp	r0, r2
 800acde:	d811      	bhi.n	800ad04 <__ieee754_sqrt+0xe8>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	eb00 0e01 	add.w	lr, r0, r1
 800ace6:	da57      	bge.n	800ad98 <__ieee754_sqrt+0x17c>
 800ace8:	f1be 0f00 	cmp.w	lr, #0
 800acec:	db54      	blt.n	800ad98 <__ieee754_sqrt+0x17c>
 800acee:	f10c 0801 	add.w	r8, ip, #1
 800acf2:	eba3 030c 	sub.w	r3, r3, ip
 800acf6:	4290      	cmp	r0, r2
 800acf8:	bf88      	it	hi
 800acfa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800acfe:	1a12      	subs	r2, r2, r0
 800ad00:	440c      	add	r4, r1
 800ad02:	46c4      	mov	ip, r8
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	3f01      	subs	r7, #1
 800ad08:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ad0c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ad10:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ad14:	d1dd      	bne.n	800acd2 <__ieee754_sqrt+0xb6>
 800ad16:	4313      	orrs	r3, r2
 800ad18:	d01b      	beq.n	800ad52 <__ieee754_sqrt+0x136>
 800ad1a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800adc8 <__ieee754_sqrt+0x1ac>
 800ad1e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800adcc <__ieee754_sqrt+0x1b0>
 800ad22:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad26:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad2a:	f7f5 facd 	bl	80002c8 <__aeabi_dsub>
 800ad2e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4640      	mov	r0, r8
 800ad38:	4649      	mov	r1, r9
 800ad3a:	f7f5 fef9 	bl	8000b30 <__aeabi_dcmple>
 800ad3e:	b140      	cbz	r0, 800ad52 <__ieee754_sqrt+0x136>
 800ad40:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ad44:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad48:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad4c:	d126      	bne.n	800ad9c <__ieee754_sqrt+0x180>
 800ad4e:	3501      	adds	r5, #1
 800ad50:	463c      	mov	r4, r7
 800ad52:	106a      	asrs	r2, r5, #1
 800ad54:	0863      	lsrs	r3, r4, #1
 800ad56:	07e9      	lsls	r1, r5, #31
 800ad58:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ad5c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ad60:	bf48      	it	mi
 800ad62:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ad66:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ad6a:	461c      	mov	r4, r3
 800ad6c:	e76d      	b.n	800ac4a <__ieee754_sqrt+0x2e>
 800ad6e:	0ad3      	lsrs	r3, r2, #11
 800ad70:	3815      	subs	r0, #21
 800ad72:	0552      	lsls	r2, r2, #21
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d0fa      	beq.n	800ad6e <__ieee754_sqrt+0x152>
 800ad78:	02dc      	lsls	r4, r3, #11
 800ad7a:	d50a      	bpl.n	800ad92 <__ieee754_sqrt+0x176>
 800ad7c:	f1c1 0420 	rsb	r4, r1, #32
 800ad80:	fa22 f404 	lsr.w	r4, r2, r4
 800ad84:	1e4d      	subs	r5, r1, #1
 800ad86:	408a      	lsls	r2, r1
 800ad88:	4323      	orrs	r3, r4
 800ad8a:	1b41      	subs	r1, r0, r5
 800ad8c:	e772      	b.n	800ac74 <__ieee754_sqrt+0x58>
 800ad8e:	4608      	mov	r0, r1
 800ad90:	e7f0      	b.n	800ad74 <__ieee754_sqrt+0x158>
 800ad92:	005b      	lsls	r3, r3, #1
 800ad94:	3101      	adds	r1, #1
 800ad96:	e7ef      	b.n	800ad78 <__ieee754_sqrt+0x15c>
 800ad98:	46e0      	mov	r8, ip
 800ad9a:	e7aa      	b.n	800acf2 <__ieee754_sqrt+0xd6>
 800ad9c:	f7f5 fa96 	bl	80002cc <__adddf3>
 800ada0:	e9da 8900 	ldrd	r8, r9, [sl]
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4640      	mov	r0, r8
 800adaa:	4649      	mov	r1, r9
 800adac:	f7f5 feb6 	bl	8000b1c <__aeabi_dcmplt>
 800adb0:	b120      	cbz	r0, 800adbc <__ieee754_sqrt+0x1a0>
 800adb2:	1ca0      	adds	r0, r4, #2
 800adb4:	bf08      	it	eq
 800adb6:	3501      	addeq	r5, #1
 800adb8:	3402      	adds	r4, #2
 800adba:	e7ca      	b.n	800ad52 <__ieee754_sqrt+0x136>
 800adbc:	3401      	adds	r4, #1
 800adbe:	f024 0401 	bic.w	r4, r4, #1
 800adc2:	e7c6      	b.n	800ad52 <__ieee754_sqrt+0x136>
 800adc4:	7ff00000 	.word	0x7ff00000
 800adc8:	200004f0 	.word	0x200004f0
 800adcc:	200004f8 	.word	0x200004f8

0800add0 <__ieee754_sqrtf>:
 800add0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800add4:	4770      	bx	lr
	...

0800add8 <floor>:
 800add8:	ec51 0b10 	vmov	r0, r1, d0
 800addc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ade0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800ade8:	2e13      	cmp	r6, #19
 800adea:	ee10 5a10 	vmov	r5, s0
 800adee:	ee10 8a10 	vmov	r8, s0
 800adf2:	460c      	mov	r4, r1
 800adf4:	dc31      	bgt.n	800ae5a <floor+0x82>
 800adf6:	2e00      	cmp	r6, #0
 800adf8:	da14      	bge.n	800ae24 <floor+0x4c>
 800adfa:	a333      	add	r3, pc, #204	; (adr r3, 800aec8 <floor+0xf0>)
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	f7f5 fa64 	bl	80002cc <__adddf3>
 800ae04:	2200      	movs	r2, #0
 800ae06:	2300      	movs	r3, #0
 800ae08:	f7f5 fea6 	bl	8000b58 <__aeabi_dcmpgt>
 800ae0c:	b138      	cbz	r0, 800ae1e <floor+0x46>
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	da53      	bge.n	800aeba <floor+0xe2>
 800ae12:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ae16:	4325      	orrs	r5, r4
 800ae18:	d052      	beq.n	800aec0 <floor+0xe8>
 800ae1a:	4c2d      	ldr	r4, [pc, #180]	; (800aed0 <floor+0xf8>)
 800ae1c:	2500      	movs	r5, #0
 800ae1e:	4621      	mov	r1, r4
 800ae20:	4628      	mov	r0, r5
 800ae22:	e024      	b.n	800ae6e <floor+0x96>
 800ae24:	4f2b      	ldr	r7, [pc, #172]	; (800aed4 <floor+0xfc>)
 800ae26:	4137      	asrs	r7, r6
 800ae28:	ea01 0307 	and.w	r3, r1, r7
 800ae2c:	4303      	orrs	r3, r0
 800ae2e:	d01e      	beq.n	800ae6e <floor+0x96>
 800ae30:	a325      	add	r3, pc, #148	; (adr r3, 800aec8 <floor+0xf0>)
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	f7f5 fa49 	bl	80002cc <__adddf3>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f7f5 fe8b 	bl	8000b58 <__aeabi_dcmpgt>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d0eb      	beq.n	800ae1e <floor+0x46>
 800ae46:	2c00      	cmp	r4, #0
 800ae48:	bfbe      	ittt	lt
 800ae4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ae4e:	4133      	asrlt	r3, r6
 800ae50:	18e4      	addlt	r4, r4, r3
 800ae52:	ea24 0407 	bic.w	r4, r4, r7
 800ae56:	2500      	movs	r5, #0
 800ae58:	e7e1      	b.n	800ae1e <floor+0x46>
 800ae5a:	2e33      	cmp	r6, #51	; 0x33
 800ae5c:	dd0b      	ble.n	800ae76 <floor+0x9e>
 800ae5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ae62:	d104      	bne.n	800ae6e <floor+0x96>
 800ae64:	ee10 2a10 	vmov	r2, s0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	f7f5 fa2f 	bl	80002cc <__adddf3>
 800ae6e:	ec41 0b10 	vmov	d0, r0, r1
 800ae72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae76:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ae7a:	f04f 37ff 	mov.w	r7, #4294967295
 800ae7e:	40df      	lsrs	r7, r3
 800ae80:	4238      	tst	r0, r7
 800ae82:	d0f4      	beq.n	800ae6e <floor+0x96>
 800ae84:	a310      	add	r3, pc, #64	; (adr r3, 800aec8 <floor+0xf0>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7f5 fa1f 	bl	80002cc <__adddf3>
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2300      	movs	r3, #0
 800ae92:	f7f5 fe61 	bl	8000b58 <__aeabi_dcmpgt>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d0c1      	beq.n	800ae1e <floor+0x46>
 800ae9a:	2c00      	cmp	r4, #0
 800ae9c:	da0a      	bge.n	800aeb4 <floor+0xdc>
 800ae9e:	2e14      	cmp	r6, #20
 800aea0:	d101      	bne.n	800aea6 <floor+0xce>
 800aea2:	3401      	adds	r4, #1
 800aea4:	e006      	b.n	800aeb4 <floor+0xdc>
 800aea6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800aeaa:	2301      	movs	r3, #1
 800aeac:	40b3      	lsls	r3, r6
 800aeae:	441d      	add	r5, r3
 800aeb0:	45a8      	cmp	r8, r5
 800aeb2:	d8f6      	bhi.n	800aea2 <floor+0xca>
 800aeb4:	ea25 0507 	bic.w	r5, r5, r7
 800aeb8:	e7b1      	b.n	800ae1e <floor+0x46>
 800aeba:	2500      	movs	r5, #0
 800aebc:	462c      	mov	r4, r5
 800aebe:	e7ae      	b.n	800ae1e <floor+0x46>
 800aec0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800aec4:	e7ab      	b.n	800ae1e <floor+0x46>
 800aec6:	bf00      	nop
 800aec8:	8800759c 	.word	0x8800759c
 800aecc:	7e37e43c 	.word	0x7e37e43c
 800aed0:	bff00000 	.word	0xbff00000
 800aed4:	000fffff 	.word	0x000fffff

0800aed8 <round>:
 800aed8:	ec53 2b10 	vmov	r2, r3, d0
 800aedc:	b570      	push	{r4, r5, r6, lr}
 800aede:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800aee2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800aee6:	2813      	cmp	r0, #19
 800aee8:	ee10 5a10 	vmov	r5, s0
 800aeec:	4619      	mov	r1, r3
 800aeee:	dc18      	bgt.n	800af22 <round+0x4a>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	da09      	bge.n	800af08 <round+0x30>
 800aef4:	3001      	adds	r0, #1
 800aef6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800aefa:	d103      	bne.n	800af04 <round+0x2c>
 800aefc:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800af00:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800af04:	2300      	movs	r3, #0
 800af06:	e02a      	b.n	800af5e <round+0x86>
 800af08:	4c16      	ldr	r4, [pc, #88]	; (800af64 <round+0x8c>)
 800af0a:	4104      	asrs	r4, r0
 800af0c:	ea03 0604 	and.w	r6, r3, r4
 800af10:	4316      	orrs	r6, r2
 800af12:	d011      	beq.n	800af38 <round+0x60>
 800af14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af18:	4103      	asrs	r3, r0
 800af1a:	440b      	add	r3, r1
 800af1c:	ea23 0104 	bic.w	r1, r3, r4
 800af20:	e7f0      	b.n	800af04 <round+0x2c>
 800af22:	2833      	cmp	r0, #51	; 0x33
 800af24:	dd0b      	ble.n	800af3e <round+0x66>
 800af26:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800af2a:	d105      	bne.n	800af38 <round+0x60>
 800af2c:	ee10 0a10 	vmov	r0, s0
 800af30:	f7f5 f9cc 	bl	80002cc <__adddf3>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	ec43 2b10 	vmov	d0, r2, r3
 800af3c:	bd70      	pop	{r4, r5, r6, pc}
 800af3e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800af42:	f04f 34ff 	mov.w	r4, #4294967295
 800af46:	40f4      	lsrs	r4, r6
 800af48:	4214      	tst	r4, r2
 800af4a:	d0f5      	beq.n	800af38 <round+0x60>
 800af4c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800af50:	2301      	movs	r3, #1
 800af52:	4083      	lsls	r3, r0
 800af54:	195b      	adds	r3, r3, r5
 800af56:	bf28      	it	cs
 800af58:	3101      	addcs	r1, #1
 800af5a:	ea23 0304 	bic.w	r3, r3, r4
 800af5e:	461a      	mov	r2, r3
 800af60:	460b      	mov	r3, r1
 800af62:	e7e9      	b.n	800af38 <round+0x60>
 800af64:	000fffff 	.word	0x000fffff

0800af68 <__ieee754_pow>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	ed2d 8b06 	vpush	{d8-d10}
 800af70:	b089      	sub	sp, #36	; 0x24
 800af72:	ed8d 1b00 	vstr	d1, [sp]
 800af76:	e9dd 2900 	ldrd	r2, r9, [sp]
 800af7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800af7e:	ea58 0102 	orrs.w	r1, r8, r2
 800af82:	ec57 6b10 	vmov	r6, r7, d0
 800af86:	d115      	bne.n	800afb4 <__ieee754_pow+0x4c>
 800af88:	19b3      	adds	r3, r6, r6
 800af8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800af8e:	4152      	adcs	r2, r2
 800af90:	4299      	cmp	r1, r3
 800af92:	4b89      	ldr	r3, [pc, #548]	; (800b1b8 <__ieee754_pow+0x250>)
 800af94:	4193      	sbcs	r3, r2
 800af96:	f080 84d1 	bcs.w	800b93c <__ieee754_pow+0x9d4>
 800af9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 f993 	bl	80002cc <__adddf3>
 800afa6:	ec41 0b10 	vmov	d0, r0, r1
 800afaa:	b009      	add	sp, #36	; 0x24
 800afac:	ecbd 8b06 	vpop	{d8-d10}
 800afb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb4:	4b81      	ldr	r3, [pc, #516]	; (800b1bc <__ieee754_pow+0x254>)
 800afb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800afba:	429c      	cmp	r4, r3
 800afbc:	ee10 aa10 	vmov	sl, s0
 800afc0:	463d      	mov	r5, r7
 800afc2:	dc06      	bgt.n	800afd2 <__ieee754_pow+0x6a>
 800afc4:	d101      	bne.n	800afca <__ieee754_pow+0x62>
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	d1e7      	bne.n	800af9a <__ieee754_pow+0x32>
 800afca:	4598      	cmp	r8, r3
 800afcc:	dc01      	bgt.n	800afd2 <__ieee754_pow+0x6a>
 800afce:	d10f      	bne.n	800aff0 <__ieee754_pow+0x88>
 800afd0:	b172      	cbz	r2, 800aff0 <__ieee754_pow+0x88>
 800afd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800afd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800afda:	ea55 050a 	orrs.w	r5, r5, sl
 800afde:	d1dc      	bne.n	800af9a <__ieee754_pow+0x32>
 800afe0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afe4:	18db      	adds	r3, r3, r3
 800afe6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800afea:	4152      	adcs	r2, r2
 800afec:	429d      	cmp	r5, r3
 800afee:	e7d0      	b.n	800af92 <__ieee754_pow+0x2a>
 800aff0:	2d00      	cmp	r5, #0
 800aff2:	da3b      	bge.n	800b06c <__ieee754_pow+0x104>
 800aff4:	4b72      	ldr	r3, [pc, #456]	; (800b1c0 <__ieee754_pow+0x258>)
 800aff6:	4598      	cmp	r8, r3
 800aff8:	dc51      	bgt.n	800b09e <__ieee754_pow+0x136>
 800affa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800affe:	4598      	cmp	r8, r3
 800b000:	f340 84ab 	ble.w	800b95a <__ieee754_pow+0x9f2>
 800b004:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b008:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b00c:	2b14      	cmp	r3, #20
 800b00e:	dd0f      	ble.n	800b030 <__ieee754_pow+0xc8>
 800b010:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b014:	fa22 f103 	lsr.w	r1, r2, r3
 800b018:	fa01 f303 	lsl.w	r3, r1, r3
 800b01c:	4293      	cmp	r3, r2
 800b01e:	f040 849c 	bne.w	800b95a <__ieee754_pow+0x9f2>
 800b022:	f001 0101 	and.w	r1, r1, #1
 800b026:	f1c1 0302 	rsb	r3, r1, #2
 800b02a:	9304      	str	r3, [sp, #16]
 800b02c:	b182      	cbz	r2, 800b050 <__ieee754_pow+0xe8>
 800b02e:	e05f      	b.n	800b0f0 <__ieee754_pow+0x188>
 800b030:	2a00      	cmp	r2, #0
 800b032:	d15b      	bne.n	800b0ec <__ieee754_pow+0x184>
 800b034:	f1c3 0314 	rsb	r3, r3, #20
 800b038:	fa48 f103 	asr.w	r1, r8, r3
 800b03c:	fa01 f303 	lsl.w	r3, r1, r3
 800b040:	4543      	cmp	r3, r8
 800b042:	f040 8487 	bne.w	800b954 <__ieee754_pow+0x9ec>
 800b046:	f001 0101 	and.w	r1, r1, #1
 800b04a:	f1c1 0302 	rsb	r3, r1, #2
 800b04e:	9304      	str	r3, [sp, #16]
 800b050:	4b5c      	ldr	r3, [pc, #368]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b052:	4598      	cmp	r8, r3
 800b054:	d132      	bne.n	800b0bc <__ieee754_pow+0x154>
 800b056:	f1b9 0f00 	cmp.w	r9, #0
 800b05a:	f280 8477 	bge.w	800b94c <__ieee754_pow+0x9e4>
 800b05e:	4959      	ldr	r1, [pc, #356]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b060:	4632      	mov	r2, r6
 800b062:	463b      	mov	r3, r7
 800b064:	2000      	movs	r0, #0
 800b066:	f7f5 fc11 	bl	800088c <__aeabi_ddiv>
 800b06a:	e79c      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b06c:	2300      	movs	r3, #0
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	2a00      	cmp	r2, #0
 800b072:	d13d      	bne.n	800b0f0 <__ieee754_pow+0x188>
 800b074:	4b51      	ldr	r3, [pc, #324]	; (800b1bc <__ieee754_pow+0x254>)
 800b076:	4598      	cmp	r8, r3
 800b078:	d1ea      	bne.n	800b050 <__ieee754_pow+0xe8>
 800b07a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b07e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b082:	ea53 030a 	orrs.w	r3, r3, sl
 800b086:	f000 8459 	beq.w	800b93c <__ieee754_pow+0x9d4>
 800b08a:	4b4f      	ldr	r3, [pc, #316]	; (800b1c8 <__ieee754_pow+0x260>)
 800b08c:	429c      	cmp	r4, r3
 800b08e:	dd08      	ble.n	800b0a2 <__ieee754_pow+0x13a>
 800b090:	f1b9 0f00 	cmp.w	r9, #0
 800b094:	f2c0 8456 	blt.w	800b944 <__ieee754_pow+0x9dc>
 800b098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b09c:	e783      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e7e5      	b.n	800b06e <__ieee754_pow+0x106>
 800b0a2:	f1b9 0f00 	cmp.w	r9, #0
 800b0a6:	f04f 0000 	mov.w	r0, #0
 800b0aa:	f04f 0100 	mov.w	r1, #0
 800b0ae:	f6bf af7a 	bge.w	800afa6 <__ieee754_pow+0x3e>
 800b0b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b0b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0ba:	e774      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b0bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b0c0:	d106      	bne.n	800b0d0 <__ieee754_pow+0x168>
 800b0c2:	4632      	mov	r2, r6
 800b0c4:	463b      	mov	r3, r7
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	f7f5 fab5 	bl	8000638 <__aeabi_dmul>
 800b0ce:	e76a      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b0d0:	4b3e      	ldr	r3, [pc, #248]	; (800b1cc <__ieee754_pow+0x264>)
 800b0d2:	4599      	cmp	r9, r3
 800b0d4:	d10c      	bne.n	800b0f0 <__ieee754_pow+0x188>
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	db0a      	blt.n	800b0f0 <__ieee754_pow+0x188>
 800b0da:	ec47 6b10 	vmov	d0, r6, r7
 800b0de:	b009      	add	sp, #36	; 0x24
 800b0e0:	ecbd 8b06 	vpop	{d8-d10}
 800b0e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	f7ff bd98 	b.w	800ac1c <__ieee754_sqrt>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	ec47 6b10 	vmov	d0, r6, r7
 800b0f4:	f000 fc62 	bl	800b9bc <fabs>
 800b0f8:	ec51 0b10 	vmov	r0, r1, d0
 800b0fc:	f1ba 0f00 	cmp.w	sl, #0
 800b100:	d129      	bne.n	800b156 <__ieee754_pow+0x1ee>
 800b102:	b124      	cbz	r4, 800b10e <__ieee754_pow+0x1a6>
 800b104:	4b2f      	ldr	r3, [pc, #188]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b106:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d123      	bne.n	800b156 <__ieee754_pow+0x1ee>
 800b10e:	f1b9 0f00 	cmp.w	r9, #0
 800b112:	da05      	bge.n	800b120 <__ieee754_pow+0x1b8>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	2000      	movs	r0, #0
 800b11a:	492a      	ldr	r1, [pc, #168]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b11c:	f7f5 fbb6 	bl	800088c <__aeabi_ddiv>
 800b120:	2d00      	cmp	r5, #0
 800b122:	f6bf af40 	bge.w	800afa6 <__ieee754_pow+0x3e>
 800b126:	9b04      	ldr	r3, [sp, #16]
 800b128:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b12c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b130:	431c      	orrs	r4, r3
 800b132:	d108      	bne.n	800b146 <__ieee754_pow+0x1de>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4610      	mov	r0, r2
 800b13a:	4619      	mov	r1, r3
 800b13c:	f7f5 f8c4 	bl	80002c8 <__aeabi_dsub>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	e78f      	b.n	800b066 <__ieee754_pow+0xfe>
 800b146:	9b04      	ldr	r3, [sp, #16]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	f47f af2c 	bne.w	800afa6 <__ieee754_pow+0x3e>
 800b14e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b152:	4619      	mov	r1, r3
 800b154:	e727      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b156:	0feb      	lsrs	r3, r5, #31
 800b158:	3b01      	subs	r3, #1
 800b15a:	9306      	str	r3, [sp, #24]
 800b15c:	9a06      	ldr	r2, [sp, #24]
 800b15e:	9b04      	ldr	r3, [sp, #16]
 800b160:	4313      	orrs	r3, r2
 800b162:	d102      	bne.n	800b16a <__ieee754_pow+0x202>
 800b164:	4632      	mov	r2, r6
 800b166:	463b      	mov	r3, r7
 800b168:	e7e6      	b.n	800b138 <__ieee754_pow+0x1d0>
 800b16a:	4b19      	ldr	r3, [pc, #100]	; (800b1d0 <__ieee754_pow+0x268>)
 800b16c:	4598      	cmp	r8, r3
 800b16e:	f340 80fb 	ble.w	800b368 <__ieee754_pow+0x400>
 800b172:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b176:	4598      	cmp	r8, r3
 800b178:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <__ieee754_pow+0x260>)
 800b17a:	dd0c      	ble.n	800b196 <__ieee754_pow+0x22e>
 800b17c:	429c      	cmp	r4, r3
 800b17e:	dc0f      	bgt.n	800b1a0 <__ieee754_pow+0x238>
 800b180:	f1b9 0f00 	cmp.w	r9, #0
 800b184:	da0f      	bge.n	800b1a6 <__ieee754_pow+0x23e>
 800b186:	2000      	movs	r0, #0
 800b188:	b009      	add	sp, #36	; 0x24
 800b18a:	ecbd 8b06 	vpop	{d8-d10}
 800b18e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b192:	f000 beda 	b.w	800bf4a <__math_oflow>
 800b196:	429c      	cmp	r4, r3
 800b198:	dbf2      	blt.n	800b180 <__ieee754_pow+0x218>
 800b19a:	4b0a      	ldr	r3, [pc, #40]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b19c:	429c      	cmp	r4, r3
 800b19e:	dd19      	ble.n	800b1d4 <__ieee754_pow+0x26c>
 800b1a0:	f1b9 0f00 	cmp.w	r9, #0
 800b1a4:	dcef      	bgt.n	800b186 <__ieee754_pow+0x21e>
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	b009      	add	sp, #36	; 0x24
 800b1aa:	ecbd 8b06 	vpop	{d8-d10}
 800b1ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b2:	f000 bec1 	b.w	800bf38 <__math_uflow>
 800b1b6:	bf00      	nop
 800b1b8:	fff00000 	.word	0xfff00000
 800b1bc:	7ff00000 	.word	0x7ff00000
 800b1c0:	433fffff 	.word	0x433fffff
 800b1c4:	3ff00000 	.word	0x3ff00000
 800b1c8:	3fefffff 	.word	0x3fefffff
 800b1cc:	3fe00000 	.word	0x3fe00000
 800b1d0:	41e00000 	.word	0x41e00000
 800b1d4:	4b60      	ldr	r3, [pc, #384]	; (800b358 <__ieee754_pow+0x3f0>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f7f5 f876 	bl	80002c8 <__aeabi_dsub>
 800b1dc:	a354      	add	r3, pc, #336	; (adr r3, 800b330 <__ieee754_pow+0x3c8>)
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	460d      	mov	r5, r1
 800b1e6:	f7f5 fa27 	bl	8000638 <__aeabi_dmul>
 800b1ea:	a353      	add	r3, pc, #332	; (adr r3, 800b338 <__ieee754_pow+0x3d0>)
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 fa1e 	bl	8000638 <__aeabi_dmul>
 800b1fc:	4b57      	ldr	r3, [pc, #348]	; (800b35c <__ieee754_pow+0x3f4>)
 800b1fe:	4682      	mov	sl, r0
 800b200:	468b      	mov	fp, r1
 800b202:	2200      	movs	r2, #0
 800b204:	4620      	mov	r0, r4
 800b206:	4629      	mov	r1, r5
 800b208:	f7f5 fa16 	bl	8000638 <__aeabi_dmul>
 800b20c:	4602      	mov	r2, r0
 800b20e:	460b      	mov	r3, r1
 800b210:	a14b      	add	r1, pc, #300	; (adr r1, 800b340 <__ieee754_pow+0x3d8>)
 800b212:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b216:	f7f5 f857 	bl	80002c8 <__aeabi_dsub>
 800b21a:	4622      	mov	r2, r4
 800b21c:	462b      	mov	r3, r5
 800b21e:	f7f5 fa0b 	bl	8000638 <__aeabi_dmul>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	2000      	movs	r0, #0
 800b228:	494d      	ldr	r1, [pc, #308]	; (800b360 <__ieee754_pow+0x3f8>)
 800b22a:	f7f5 f84d 	bl	80002c8 <__aeabi_dsub>
 800b22e:	4622      	mov	r2, r4
 800b230:	4680      	mov	r8, r0
 800b232:	4689      	mov	r9, r1
 800b234:	462b      	mov	r3, r5
 800b236:	4620      	mov	r0, r4
 800b238:	4629      	mov	r1, r5
 800b23a:	f7f5 f9fd 	bl	8000638 <__aeabi_dmul>
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	4640      	mov	r0, r8
 800b244:	4649      	mov	r1, r9
 800b246:	f7f5 f9f7 	bl	8000638 <__aeabi_dmul>
 800b24a:	a33f      	add	r3, pc, #252	; (adr r3, 800b348 <__ieee754_pow+0x3e0>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f9f2 	bl	8000638 <__aeabi_dmul>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4650      	mov	r0, sl
 800b25a:	4659      	mov	r1, fp
 800b25c:	f7f5 f834 	bl	80002c8 <__aeabi_dsub>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	4680      	mov	r8, r0
 800b266:	4689      	mov	r9, r1
 800b268:	4630      	mov	r0, r6
 800b26a:	4639      	mov	r1, r7
 800b26c:	f7f5 f82e 	bl	80002cc <__adddf3>
 800b270:	2000      	movs	r0, #0
 800b272:	4632      	mov	r2, r6
 800b274:	463b      	mov	r3, r7
 800b276:	4604      	mov	r4, r0
 800b278:	460d      	mov	r5, r1
 800b27a:	f7f5 f825 	bl	80002c8 <__aeabi_dsub>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4640      	mov	r0, r8
 800b284:	4649      	mov	r1, r9
 800b286:	f7f5 f81f 	bl	80002c8 <__aeabi_dsub>
 800b28a:	9b04      	ldr	r3, [sp, #16]
 800b28c:	9a06      	ldr	r2, [sp, #24]
 800b28e:	3b01      	subs	r3, #1
 800b290:	4313      	orrs	r3, r2
 800b292:	4682      	mov	sl, r0
 800b294:	468b      	mov	fp, r1
 800b296:	f040 81e7 	bne.w	800b668 <__ieee754_pow+0x700>
 800b29a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b350 <__ieee754_pow+0x3e8>
 800b29e:	eeb0 8a47 	vmov.f32	s16, s14
 800b2a2:	eef0 8a67 	vmov.f32	s17, s15
 800b2a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b2aa:	2600      	movs	r6, #0
 800b2ac:	4632      	mov	r2, r6
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2b4:	f7f5 f808 	bl	80002c8 <__aeabi_dsub>
 800b2b8:	4622      	mov	r2, r4
 800b2ba:	462b      	mov	r3, r5
 800b2bc:	f7f5 f9bc 	bl	8000638 <__aeabi_dmul>
 800b2c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	4689      	mov	r9, r1
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	4659      	mov	r1, fp
 800b2cc:	f7f5 f9b4 	bl	8000638 <__aeabi_dmul>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	f7f4 fff8 	bl	80002cc <__adddf3>
 800b2dc:	4632      	mov	r2, r6
 800b2de:	463b      	mov	r3, r7
 800b2e0:	4680      	mov	r8, r0
 800b2e2:	4689      	mov	r9, r1
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f5 f9a6 	bl	8000638 <__aeabi_dmul>
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	460d      	mov	r5, r1
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	f7f4 ffe8 	bl	80002cc <__adddf3>
 800b2fc:	4b19      	ldr	r3, [pc, #100]	; (800b364 <__ieee754_pow+0x3fc>)
 800b2fe:	4299      	cmp	r1, r3
 800b300:	ec45 4b19 	vmov	d9, r4, r5
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	468b      	mov	fp, r1
 800b30a:	f340 82f0 	ble.w	800b8ee <__ieee754_pow+0x986>
 800b30e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b312:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b316:	4303      	orrs	r3, r0
 800b318:	f000 81e4 	beq.w	800b6e4 <__ieee754_pow+0x77c>
 800b31c:	ec51 0b18 	vmov	r0, r1, d8
 800b320:	2200      	movs	r2, #0
 800b322:	2300      	movs	r3, #0
 800b324:	f7f5 fbfa 	bl	8000b1c <__aeabi_dcmplt>
 800b328:	3800      	subs	r0, #0
 800b32a:	bf18      	it	ne
 800b32c:	2001      	movne	r0, #1
 800b32e:	e72b      	b.n	800b188 <__ieee754_pow+0x220>
 800b330:	60000000 	.word	0x60000000
 800b334:	3ff71547 	.word	0x3ff71547
 800b338:	f85ddf44 	.word	0xf85ddf44
 800b33c:	3e54ae0b 	.word	0x3e54ae0b
 800b340:	55555555 	.word	0x55555555
 800b344:	3fd55555 	.word	0x3fd55555
 800b348:	652b82fe 	.word	0x652b82fe
 800b34c:	3ff71547 	.word	0x3ff71547
 800b350:	00000000 	.word	0x00000000
 800b354:	bff00000 	.word	0xbff00000
 800b358:	3ff00000 	.word	0x3ff00000
 800b35c:	3fd00000 	.word	0x3fd00000
 800b360:	3fe00000 	.word	0x3fe00000
 800b364:	408fffff 	.word	0x408fffff
 800b368:	4bd5      	ldr	r3, [pc, #852]	; (800b6c0 <__ieee754_pow+0x758>)
 800b36a:	402b      	ands	r3, r5
 800b36c:	2200      	movs	r2, #0
 800b36e:	b92b      	cbnz	r3, 800b37c <__ieee754_pow+0x414>
 800b370:	4bd4      	ldr	r3, [pc, #848]	; (800b6c4 <__ieee754_pow+0x75c>)
 800b372:	f7f5 f961 	bl	8000638 <__aeabi_dmul>
 800b376:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b37a:	460c      	mov	r4, r1
 800b37c:	1523      	asrs	r3, r4, #20
 800b37e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b382:	4413      	add	r3, r2
 800b384:	9305      	str	r3, [sp, #20]
 800b386:	4bd0      	ldr	r3, [pc, #832]	; (800b6c8 <__ieee754_pow+0x760>)
 800b388:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b38c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b390:	429c      	cmp	r4, r3
 800b392:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b396:	dd08      	ble.n	800b3aa <__ieee754_pow+0x442>
 800b398:	4bcc      	ldr	r3, [pc, #816]	; (800b6cc <__ieee754_pow+0x764>)
 800b39a:	429c      	cmp	r4, r3
 800b39c:	f340 8162 	ble.w	800b664 <__ieee754_pow+0x6fc>
 800b3a0:	9b05      	ldr	r3, [sp, #20]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	9305      	str	r3, [sp, #20]
 800b3a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b3aa:	2400      	movs	r4, #0
 800b3ac:	00e3      	lsls	r3, r4, #3
 800b3ae:	9307      	str	r3, [sp, #28]
 800b3b0:	4bc7      	ldr	r3, [pc, #796]	; (800b6d0 <__ieee754_pow+0x768>)
 800b3b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3b6:	ed93 7b00 	vldr	d7, [r3]
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	ec53 2b17 	vmov	r2, r3, d7
 800b3c0:	eeb0 9a47 	vmov.f32	s18, s14
 800b3c4:	eef0 9a67 	vmov.f32	s19, s15
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	f7f4 ff7d 	bl	80002c8 <__aeabi_dsub>
 800b3ce:	4652      	mov	r2, sl
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	460f      	mov	r7, r1
 800b3d4:	462b      	mov	r3, r5
 800b3d6:	ec51 0b19 	vmov	r0, r1, d9
 800b3da:	f7f4 ff77 	bl	80002cc <__adddf3>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	49bb      	ldr	r1, [pc, #748]	; (800b6d4 <__ieee754_pow+0x76c>)
 800b3e6:	f7f5 fa51 	bl	800088c <__aeabi_ddiv>
 800b3ea:	ec41 0b1a 	vmov	d10, r0, r1
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f5 f91f 	bl	8000638 <__aeabi_dmul>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b400:	9302      	str	r3, [sp, #8]
 800b402:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b406:	46ab      	mov	fp, r5
 800b408:	106d      	asrs	r5, r5, #1
 800b40a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b40e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b412:	ec41 0b18 	vmov	d8, r0, r1
 800b416:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b41a:	2200      	movs	r2, #0
 800b41c:	4640      	mov	r0, r8
 800b41e:	4649      	mov	r1, r9
 800b420:	4614      	mov	r4, r2
 800b422:	461d      	mov	r5, r3
 800b424:	f7f5 f908 	bl	8000638 <__aeabi_dmul>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4630      	mov	r0, r6
 800b42e:	4639      	mov	r1, r7
 800b430:	f7f4 ff4a 	bl	80002c8 <__aeabi_dsub>
 800b434:	ec53 2b19 	vmov	r2, r3, d9
 800b438:	4606      	mov	r6, r0
 800b43a:	460f      	mov	r7, r1
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f7f4 ff42 	bl	80002c8 <__aeabi_dsub>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4650      	mov	r0, sl
 800b44a:	4659      	mov	r1, fp
 800b44c:	f7f4 ff3c 	bl	80002c8 <__aeabi_dsub>
 800b450:	4642      	mov	r2, r8
 800b452:	464b      	mov	r3, r9
 800b454:	f7f5 f8f0 	bl	8000638 <__aeabi_dmul>
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f7f4 ff32 	bl	80002c8 <__aeabi_dsub>
 800b464:	ec53 2b1a 	vmov	r2, r3, d10
 800b468:	f7f5 f8e6 	bl	8000638 <__aeabi_dmul>
 800b46c:	ec53 2b18 	vmov	r2, r3, d8
 800b470:	ec41 0b19 	vmov	d9, r0, r1
 800b474:	ec51 0b18 	vmov	r0, r1, d8
 800b478:	f7f5 f8de 	bl	8000638 <__aeabi_dmul>
 800b47c:	a37c      	add	r3, pc, #496	; (adr r3, 800b670 <__ieee754_pow+0x708>)
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	4604      	mov	r4, r0
 800b484:	460d      	mov	r5, r1
 800b486:	f7f5 f8d7 	bl	8000638 <__aeabi_dmul>
 800b48a:	a37b      	add	r3, pc, #492	; (adr r3, 800b678 <__ieee754_pow+0x710>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	f7f4 ff1c 	bl	80002cc <__adddf3>
 800b494:	4622      	mov	r2, r4
 800b496:	462b      	mov	r3, r5
 800b498:	f7f5 f8ce 	bl	8000638 <__aeabi_dmul>
 800b49c:	a378      	add	r3, pc, #480	; (adr r3, 800b680 <__ieee754_pow+0x718>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	f7f4 ff13 	bl	80002cc <__adddf3>
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	f7f5 f8c5 	bl	8000638 <__aeabi_dmul>
 800b4ae:	a376      	add	r3, pc, #472	; (adr r3, 800b688 <__ieee754_pow+0x720>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	f7f4 ff0a 	bl	80002cc <__adddf3>
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	462b      	mov	r3, r5
 800b4bc:	f7f5 f8bc 	bl	8000638 <__aeabi_dmul>
 800b4c0:	a373      	add	r3, pc, #460	; (adr r3, 800b690 <__ieee754_pow+0x728>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	f7f4 ff01 	bl	80002cc <__adddf3>
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	462b      	mov	r3, r5
 800b4ce:	f7f5 f8b3 	bl	8000638 <__aeabi_dmul>
 800b4d2:	a371      	add	r3, pc, #452	; (adr r3, 800b698 <__ieee754_pow+0x730>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	f7f4 fef8 	bl	80002cc <__adddf3>
 800b4dc:	4622      	mov	r2, r4
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460f      	mov	r7, r1
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f7f5 f8a6 	bl	8000638 <__aeabi_dmul>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f5 f8a0 	bl	8000638 <__aeabi_dmul>
 800b4f8:	4642      	mov	r2, r8
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	464b      	mov	r3, r9
 800b500:	ec51 0b18 	vmov	r0, r1, d8
 800b504:	f7f4 fee2 	bl	80002cc <__adddf3>
 800b508:	ec53 2b19 	vmov	r2, r3, d9
 800b50c:	f7f5 f894 	bl	8000638 <__aeabi_dmul>
 800b510:	4622      	mov	r2, r4
 800b512:	462b      	mov	r3, r5
 800b514:	f7f4 feda 	bl	80002cc <__adddf3>
 800b518:	4642      	mov	r2, r8
 800b51a:	4682      	mov	sl, r0
 800b51c:	468b      	mov	fp, r1
 800b51e:	464b      	mov	r3, r9
 800b520:	4640      	mov	r0, r8
 800b522:	4649      	mov	r1, r9
 800b524:	f7f5 f888 	bl	8000638 <__aeabi_dmul>
 800b528:	4b6b      	ldr	r3, [pc, #428]	; (800b6d8 <__ieee754_pow+0x770>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	4606      	mov	r6, r0
 800b52e:	460f      	mov	r7, r1
 800b530:	f7f4 fecc 	bl	80002cc <__adddf3>
 800b534:	4652      	mov	r2, sl
 800b536:	465b      	mov	r3, fp
 800b538:	f7f4 fec8 	bl	80002cc <__adddf3>
 800b53c:	2000      	movs	r0, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	460d      	mov	r5, r1
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4640      	mov	r0, r8
 800b548:	4649      	mov	r1, r9
 800b54a:	f7f5 f875 	bl	8000638 <__aeabi_dmul>
 800b54e:	4b62      	ldr	r3, [pc, #392]	; (800b6d8 <__ieee754_pow+0x770>)
 800b550:	4680      	mov	r8, r0
 800b552:	4689      	mov	r9, r1
 800b554:	2200      	movs	r2, #0
 800b556:	4620      	mov	r0, r4
 800b558:	4629      	mov	r1, r5
 800b55a:	f7f4 feb5 	bl	80002c8 <__aeabi_dsub>
 800b55e:	4632      	mov	r2, r6
 800b560:	463b      	mov	r3, r7
 800b562:	f7f4 feb1 	bl	80002c8 <__aeabi_dsub>
 800b566:	4602      	mov	r2, r0
 800b568:	460b      	mov	r3, r1
 800b56a:	4650      	mov	r0, sl
 800b56c:	4659      	mov	r1, fp
 800b56e:	f7f4 feab 	bl	80002c8 <__aeabi_dsub>
 800b572:	ec53 2b18 	vmov	r2, r3, d8
 800b576:	f7f5 f85f 	bl	8000638 <__aeabi_dmul>
 800b57a:	4622      	mov	r2, r4
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	462b      	mov	r3, r5
 800b582:	ec51 0b19 	vmov	r0, r1, d9
 800b586:	f7f5 f857 	bl	8000638 <__aeabi_dmul>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4630      	mov	r0, r6
 800b590:	4639      	mov	r1, r7
 800b592:	f7f4 fe9b 	bl	80002cc <__adddf3>
 800b596:	4606      	mov	r6, r0
 800b598:	460f      	mov	r7, r1
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	4640      	mov	r0, r8
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	f7f4 fe93 	bl	80002cc <__adddf3>
 800b5a6:	a33e      	add	r3, pc, #248	; (adr r3, 800b6a0 <__ieee754_pow+0x738>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	460d      	mov	r5, r1
 800b5b2:	f7f5 f841 	bl	8000638 <__aeabi_dmul>
 800b5b6:	4642      	mov	r2, r8
 800b5b8:	ec41 0b18 	vmov	d8, r0, r1
 800b5bc:	464b      	mov	r3, r9
 800b5be:	4620      	mov	r0, r4
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	f7f4 fe81 	bl	80002c8 <__aeabi_dsub>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	f7f4 fe7b 	bl	80002c8 <__aeabi_dsub>
 800b5d2:	a335      	add	r3, pc, #212	; (adr r3, 800b6a8 <__ieee754_pow+0x740>)
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	f7f5 f82e 	bl	8000638 <__aeabi_dmul>
 800b5dc:	a334      	add	r3, pc, #208	; (adr r3, 800b6b0 <__ieee754_pow+0x748>)
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7f5 f825 	bl	8000638 <__aeabi_dmul>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	f7f4 fe69 	bl	80002cc <__adddf3>
 800b5fa:	9a07      	ldr	r2, [sp, #28]
 800b5fc:	4b37      	ldr	r3, [pc, #220]	; (800b6dc <__ieee754_pow+0x774>)
 800b5fe:	4413      	add	r3, r2
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f7f4 fe62 	bl	80002cc <__adddf3>
 800b608:	4682      	mov	sl, r0
 800b60a:	9805      	ldr	r0, [sp, #20]
 800b60c:	468b      	mov	fp, r1
 800b60e:	f7f4 ffa9 	bl	8000564 <__aeabi_i2d>
 800b612:	9a07      	ldr	r2, [sp, #28]
 800b614:	4b32      	ldr	r3, [pc, #200]	; (800b6e0 <__ieee754_pow+0x778>)
 800b616:	4413      	add	r3, r2
 800b618:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b61c:	4606      	mov	r6, r0
 800b61e:	460f      	mov	r7, r1
 800b620:	4652      	mov	r2, sl
 800b622:	465b      	mov	r3, fp
 800b624:	ec51 0b18 	vmov	r0, r1, d8
 800b628:	f7f4 fe50 	bl	80002cc <__adddf3>
 800b62c:	4642      	mov	r2, r8
 800b62e:	464b      	mov	r3, r9
 800b630:	f7f4 fe4c 	bl	80002cc <__adddf3>
 800b634:	4632      	mov	r2, r6
 800b636:	463b      	mov	r3, r7
 800b638:	f7f4 fe48 	bl	80002cc <__adddf3>
 800b63c:	2000      	movs	r0, #0
 800b63e:	4632      	mov	r2, r6
 800b640:	463b      	mov	r3, r7
 800b642:	4604      	mov	r4, r0
 800b644:	460d      	mov	r5, r1
 800b646:	f7f4 fe3f 	bl	80002c8 <__aeabi_dsub>
 800b64a:	4642      	mov	r2, r8
 800b64c:	464b      	mov	r3, r9
 800b64e:	f7f4 fe3b 	bl	80002c8 <__aeabi_dsub>
 800b652:	ec53 2b18 	vmov	r2, r3, d8
 800b656:	f7f4 fe37 	bl	80002c8 <__aeabi_dsub>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4650      	mov	r0, sl
 800b660:	4659      	mov	r1, fp
 800b662:	e610      	b.n	800b286 <__ieee754_pow+0x31e>
 800b664:	2401      	movs	r4, #1
 800b666:	e6a1      	b.n	800b3ac <__ieee754_pow+0x444>
 800b668:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b6b8 <__ieee754_pow+0x750>
 800b66c:	e617      	b.n	800b29e <__ieee754_pow+0x336>
 800b66e:	bf00      	nop
 800b670:	4a454eef 	.word	0x4a454eef
 800b674:	3fca7e28 	.word	0x3fca7e28
 800b678:	93c9db65 	.word	0x93c9db65
 800b67c:	3fcd864a 	.word	0x3fcd864a
 800b680:	a91d4101 	.word	0xa91d4101
 800b684:	3fd17460 	.word	0x3fd17460
 800b688:	518f264d 	.word	0x518f264d
 800b68c:	3fd55555 	.word	0x3fd55555
 800b690:	db6fabff 	.word	0xdb6fabff
 800b694:	3fdb6db6 	.word	0x3fdb6db6
 800b698:	33333303 	.word	0x33333303
 800b69c:	3fe33333 	.word	0x3fe33333
 800b6a0:	e0000000 	.word	0xe0000000
 800b6a4:	3feec709 	.word	0x3feec709
 800b6a8:	dc3a03fd 	.word	0xdc3a03fd
 800b6ac:	3feec709 	.word	0x3feec709
 800b6b0:	145b01f5 	.word	0x145b01f5
 800b6b4:	be3e2fe0 	.word	0xbe3e2fe0
 800b6b8:	00000000 	.word	0x00000000
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	7ff00000 	.word	0x7ff00000
 800b6c4:	43400000 	.word	0x43400000
 800b6c8:	0003988e 	.word	0x0003988e
 800b6cc:	000bb679 	.word	0x000bb679
 800b6d0:	08013380 	.word	0x08013380
 800b6d4:	3ff00000 	.word	0x3ff00000
 800b6d8:	40080000 	.word	0x40080000
 800b6dc:	080133a0 	.word	0x080133a0
 800b6e0:	08013390 	.word	0x08013390
 800b6e4:	a3b3      	add	r3, pc, #716	; (adr r3, 800b9b4 <__ieee754_pow+0xa4c>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	4640      	mov	r0, r8
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	f7f4 fded 	bl	80002cc <__adddf3>
 800b6f2:	4622      	mov	r2, r4
 800b6f4:	ec41 0b1a 	vmov	d10, r0, r1
 800b6f8:	462b      	mov	r3, r5
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f4 fde3 	bl	80002c8 <__aeabi_dsub>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	ec51 0b1a 	vmov	r0, r1, d10
 800b70a:	f7f5 fa25 	bl	8000b58 <__aeabi_dcmpgt>
 800b70e:	2800      	cmp	r0, #0
 800b710:	f47f ae04 	bne.w	800b31c <__ieee754_pow+0x3b4>
 800b714:	4aa2      	ldr	r2, [pc, #648]	; (800b9a0 <__ieee754_pow+0xa38>)
 800b716:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b71a:	4293      	cmp	r3, r2
 800b71c:	f340 8107 	ble.w	800b92e <__ieee754_pow+0x9c6>
 800b720:	151b      	asrs	r3, r3, #20
 800b722:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b726:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b72a:	fa4a fa03 	asr.w	sl, sl, r3
 800b72e:	44da      	add	sl, fp
 800b730:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b734:	489b      	ldr	r0, [pc, #620]	; (800b9a4 <__ieee754_pow+0xa3c>)
 800b736:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b73a:	4108      	asrs	r0, r1
 800b73c:	ea00 030a 	and.w	r3, r0, sl
 800b740:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b744:	f1c1 0114 	rsb	r1, r1, #20
 800b748:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b74c:	fa4a fa01 	asr.w	sl, sl, r1
 800b750:	f1bb 0f00 	cmp.w	fp, #0
 800b754:	f04f 0200 	mov.w	r2, #0
 800b758:	4620      	mov	r0, r4
 800b75a:	4629      	mov	r1, r5
 800b75c:	bfb8      	it	lt
 800b75e:	f1ca 0a00 	rsblt	sl, sl, #0
 800b762:	f7f4 fdb1 	bl	80002c8 <__aeabi_dsub>
 800b766:	ec41 0b19 	vmov	d9, r0, r1
 800b76a:	4642      	mov	r2, r8
 800b76c:	464b      	mov	r3, r9
 800b76e:	ec51 0b19 	vmov	r0, r1, d9
 800b772:	f7f4 fdab 	bl	80002cc <__adddf3>
 800b776:	a37a      	add	r3, pc, #488	; (adr r3, 800b960 <__ieee754_pow+0x9f8>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	2000      	movs	r0, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	460d      	mov	r5, r1
 800b782:	f7f4 ff59 	bl	8000638 <__aeabi_dmul>
 800b786:	ec53 2b19 	vmov	r2, r3, d9
 800b78a:	4606      	mov	r6, r0
 800b78c:	460f      	mov	r7, r1
 800b78e:	4620      	mov	r0, r4
 800b790:	4629      	mov	r1, r5
 800b792:	f7f4 fd99 	bl	80002c8 <__aeabi_dsub>
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	4640      	mov	r0, r8
 800b79c:	4649      	mov	r1, r9
 800b79e:	f7f4 fd93 	bl	80002c8 <__aeabi_dsub>
 800b7a2:	a371      	add	r3, pc, #452	; (adr r3, 800b968 <__ieee754_pow+0xa00>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f7f4 ff46 	bl	8000638 <__aeabi_dmul>
 800b7ac:	a370      	add	r3, pc, #448	; (adr r3, 800b970 <__ieee754_pow+0xa08>)
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	4680      	mov	r8, r0
 800b7b4:	4689      	mov	r9, r1
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	f7f4 ff3d 	bl	8000638 <__aeabi_dmul>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	f7f4 fd81 	bl	80002cc <__adddf3>
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	460d      	mov	r5, r1
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	f7f4 fd79 	bl	80002cc <__adddf3>
 800b7da:	4632      	mov	r2, r6
 800b7dc:	463b      	mov	r3, r7
 800b7de:	4680      	mov	r8, r0
 800b7e0:	4689      	mov	r9, r1
 800b7e2:	f7f4 fd71 	bl	80002c8 <__aeabi_dsub>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	f7f4 fd6b 	bl	80002c8 <__aeabi_dsub>
 800b7f2:	4642      	mov	r2, r8
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	460f      	mov	r7, r1
 800b7f8:	464b      	mov	r3, r9
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f4 ff1b 	bl	8000638 <__aeabi_dmul>
 800b802:	a35d      	add	r3, pc, #372	; (adr r3, 800b978 <__ieee754_pow+0xa10>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	4604      	mov	r4, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	f7f4 ff14 	bl	8000638 <__aeabi_dmul>
 800b810:	a35b      	add	r3, pc, #364	; (adr r3, 800b980 <__ieee754_pow+0xa18>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7f4 fd57 	bl	80002c8 <__aeabi_dsub>
 800b81a:	4622      	mov	r2, r4
 800b81c:	462b      	mov	r3, r5
 800b81e:	f7f4 ff0b 	bl	8000638 <__aeabi_dmul>
 800b822:	a359      	add	r3, pc, #356	; (adr r3, 800b988 <__ieee754_pow+0xa20>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fd50 	bl	80002cc <__adddf3>
 800b82c:	4622      	mov	r2, r4
 800b82e:	462b      	mov	r3, r5
 800b830:	f7f4 ff02 	bl	8000638 <__aeabi_dmul>
 800b834:	a356      	add	r3, pc, #344	; (adr r3, 800b990 <__ieee754_pow+0xa28>)
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f7f4 fd45 	bl	80002c8 <__aeabi_dsub>
 800b83e:	4622      	mov	r2, r4
 800b840:	462b      	mov	r3, r5
 800b842:	f7f4 fef9 	bl	8000638 <__aeabi_dmul>
 800b846:	a354      	add	r3, pc, #336	; (adr r3, 800b998 <__ieee754_pow+0xa30>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f7f4 fd3e 	bl	80002cc <__adddf3>
 800b850:	4622      	mov	r2, r4
 800b852:	462b      	mov	r3, r5
 800b854:	f7f4 fef0 	bl	8000638 <__aeabi_dmul>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4640      	mov	r0, r8
 800b85e:	4649      	mov	r1, r9
 800b860:	f7f4 fd32 	bl	80002c8 <__aeabi_dsub>
 800b864:	4604      	mov	r4, r0
 800b866:	460d      	mov	r5, r1
 800b868:	4602      	mov	r2, r0
 800b86a:	460b      	mov	r3, r1
 800b86c:	4640      	mov	r0, r8
 800b86e:	4649      	mov	r1, r9
 800b870:	f7f4 fee2 	bl	8000638 <__aeabi_dmul>
 800b874:	2200      	movs	r2, #0
 800b876:	ec41 0b19 	vmov	d9, r0, r1
 800b87a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b87e:	4620      	mov	r0, r4
 800b880:	4629      	mov	r1, r5
 800b882:	f7f4 fd21 	bl	80002c8 <__aeabi_dsub>
 800b886:	4602      	mov	r2, r0
 800b888:	460b      	mov	r3, r1
 800b88a:	ec51 0b19 	vmov	r0, r1, d9
 800b88e:	f7f4 fffd 	bl	800088c <__aeabi_ddiv>
 800b892:	4632      	mov	r2, r6
 800b894:	4604      	mov	r4, r0
 800b896:	460d      	mov	r5, r1
 800b898:	463b      	mov	r3, r7
 800b89a:	4640      	mov	r0, r8
 800b89c:	4649      	mov	r1, r9
 800b89e:	f7f4 fecb 	bl	8000638 <__aeabi_dmul>
 800b8a2:	4632      	mov	r2, r6
 800b8a4:	463b      	mov	r3, r7
 800b8a6:	f7f4 fd11 	bl	80002cc <__adddf3>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f4 fd09 	bl	80002c8 <__aeabi_dsub>
 800b8b6:	4642      	mov	r2, r8
 800b8b8:	464b      	mov	r3, r9
 800b8ba:	f7f4 fd05 	bl	80002c8 <__aeabi_dsub>
 800b8be:	460b      	mov	r3, r1
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	4939      	ldr	r1, [pc, #228]	; (800b9a8 <__ieee754_pow+0xa40>)
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	f7f4 fcff 	bl	80002c8 <__aeabi_dsub>
 800b8ca:	ec41 0b10 	vmov	d0, r0, r1
 800b8ce:	ee10 3a90 	vmov	r3, s1
 800b8d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b8d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8da:	da2b      	bge.n	800b934 <__ieee754_pow+0x9cc>
 800b8dc:	4650      	mov	r0, sl
 800b8de:	f000 fa8f 	bl	800be00 <scalbn>
 800b8e2:	ec51 0b10 	vmov	r0, r1, d0
 800b8e6:	ec53 2b18 	vmov	r2, r3, d8
 800b8ea:	f7ff bbee 	b.w	800b0ca <__ieee754_pow+0x162>
 800b8ee:	4b2f      	ldr	r3, [pc, #188]	; (800b9ac <__ieee754_pow+0xa44>)
 800b8f0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b8f4:	429e      	cmp	r6, r3
 800b8f6:	f77f af0d 	ble.w	800b714 <__ieee754_pow+0x7ac>
 800b8fa:	4b2d      	ldr	r3, [pc, #180]	; (800b9b0 <__ieee754_pow+0xa48>)
 800b8fc:	440b      	add	r3, r1
 800b8fe:	4303      	orrs	r3, r0
 800b900:	d009      	beq.n	800b916 <__ieee754_pow+0x9ae>
 800b902:	ec51 0b18 	vmov	r0, r1, d8
 800b906:	2200      	movs	r2, #0
 800b908:	2300      	movs	r3, #0
 800b90a:	f7f5 f907 	bl	8000b1c <__aeabi_dcmplt>
 800b90e:	3800      	subs	r0, #0
 800b910:	bf18      	it	ne
 800b912:	2001      	movne	r0, #1
 800b914:	e448      	b.n	800b1a8 <__ieee754_pow+0x240>
 800b916:	4622      	mov	r2, r4
 800b918:	462b      	mov	r3, r5
 800b91a:	f7f4 fcd5 	bl	80002c8 <__aeabi_dsub>
 800b91e:	4642      	mov	r2, r8
 800b920:	464b      	mov	r3, r9
 800b922:	f7f5 f90f 	bl	8000b44 <__aeabi_dcmpge>
 800b926:	2800      	cmp	r0, #0
 800b928:	f43f aef4 	beq.w	800b714 <__ieee754_pow+0x7ac>
 800b92c:	e7e9      	b.n	800b902 <__ieee754_pow+0x99a>
 800b92e:	f04f 0a00 	mov.w	sl, #0
 800b932:	e71a      	b.n	800b76a <__ieee754_pow+0x802>
 800b934:	ec51 0b10 	vmov	r0, r1, d0
 800b938:	4619      	mov	r1, r3
 800b93a:	e7d4      	b.n	800b8e6 <__ieee754_pow+0x97e>
 800b93c:	491a      	ldr	r1, [pc, #104]	; (800b9a8 <__ieee754_pow+0xa40>)
 800b93e:	2000      	movs	r0, #0
 800b940:	f7ff bb31 	b.w	800afa6 <__ieee754_pow+0x3e>
 800b944:	2000      	movs	r0, #0
 800b946:	2100      	movs	r1, #0
 800b948:	f7ff bb2d 	b.w	800afa6 <__ieee754_pow+0x3e>
 800b94c:	4630      	mov	r0, r6
 800b94e:	4639      	mov	r1, r7
 800b950:	f7ff bb29 	b.w	800afa6 <__ieee754_pow+0x3e>
 800b954:	9204      	str	r2, [sp, #16]
 800b956:	f7ff bb7b 	b.w	800b050 <__ieee754_pow+0xe8>
 800b95a:	2300      	movs	r3, #0
 800b95c:	f7ff bb65 	b.w	800b02a <__ieee754_pow+0xc2>
 800b960:	00000000 	.word	0x00000000
 800b964:	3fe62e43 	.word	0x3fe62e43
 800b968:	fefa39ef 	.word	0xfefa39ef
 800b96c:	3fe62e42 	.word	0x3fe62e42
 800b970:	0ca86c39 	.word	0x0ca86c39
 800b974:	be205c61 	.word	0xbe205c61
 800b978:	72bea4d0 	.word	0x72bea4d0
 800b97c:	3e663769 	.word	0x3e663769
 800b980:	c5d26bf1 	.word	0xc5d26bf1
 800b984:	3ebbbd41 	.word	0x3ebbbd41
 800b988:	af25de2c 	.word	0xaf25de2c
 800b98c:	3f11566a 	.word	0x3f11566a
 800b990:	16bebd93 	.word	0x16bebd93
 800b994:	3f66c16c 	.word	0x3f66c16c
 800b998:	5555553e 	.word	0x5555553e
 800b99c:	3fc55555 	.word	0x3fc55555
 800b9a0:	3fe00000 	.word	0x3fe00000
 800b9a4:	fff00000 	.word	0xfff00000
 800b9a8:	3ff00000 	.word	0x3ff00000
 800b9ac:	4090cbff 	.word	0x4090cbff
 800b9b0:	3f6f3400 	.word	0x3f6f3400
 800b9b4:	652b82fe 	.word	0x652b82fe
 800b9b8:	3c971547 	.word	0x3c971547

0800b9bc <fabs>:
 800b9bc:	ec51 0b10 	vmov	r0, r1, d0
 800b9c0:	ee10 2a10 	vmov	r2, s0
 800b9c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9c8:	ec43 2b10 	vmov	d0, r2, r3
 800b9cc:	4770      	bx	lr
	...

0800b9d0 <__ieee754_expf>:
 800b9d0:	ee10 2a10 	vmov	r2, s0
 800b9d4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b9d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b9dc:	d902      	bls.n	800b9e4 <__ieee754_expf+0x14>
 800b9de:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b9e2:	4770      	bx	lr
 800b9e4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800b9e8:	d106      	bne.n	800b9f8 <__ieee754_expf+0x28>
 800b9ea:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800bb24 <__ieee754_expf+0x154>
 800b9ee:	2900      	cmp	r1, #0
 800b9f0:	bf18      	it	ne
 800b9f2:	eeb0 0a67 	vmovne.f32	s0, s15
 800b9f6:	4770      	bx	lr
 800b9f8:	484b      	ldr	r0, [pc, #300]	; (800bb28 <__ieee754_expf+0x158>)
 800b9fa:	4282      	cmp	r2, r0
 800b9fc:	dd02      	ble.n	800ba04 <__ieee754_expf+0x34>
 800b9fe:	2000      	movs	r0, #0
 800ba00:	f7ff b906 	b.w	800ac10 <__math_oflowf>
 800ba04:	2a00      	cmp	r2, #0
 800ba06:	da05      	bge.n	800ba14 <__ieee754_expf+0x44>
 800ba08:	4a48      	ldr	r2, [pc, #288]	; (800bb2c <__ieee754_expf+0x15c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d902      	bls.n	800ba14 <__ieee754_expf+0x44>
 800ba0e:	2000      	movs	r0, #0
 800ba10:	f7ff b8f8 	b.w	800ac04 <__math_uflowf>
 800ba14:	4a46      	ldr	r2, [pc, #280]	; (800bb30 <__ieee754_expf+0x160>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ba1c:	d952      	bls.n	800bac4 <__ieee754_expf+0xf4>
 800ba1e:	4a45      	ldr	r2, [pc, #276]	; (800bb34 <__ieee754_expf+0x164>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800ba26:	d834      	bhi.n	800ba92 <__ieee754_expf+0xc2>
 800ba28:	4b43      	ldr	r3, [pc, #268]	; (800bb38 <__ieee754_expf+0x168>)
 800ba2a:	4413      	add	r3, r2
 800ba2c:	ed93 7a00 	vldr	s14, [r3]
 800ba30:	4b42      	ldr	r3, [pc, #264]	; (800bb3c <__ieee754_expf+0x16c>)
 800ba32:	4413      	add	r3, r2
 800ba34:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ba38:	f1c1 0201 	rsb	r2, r1, #1
 800ba3c:	edd3 7a00 	vldr	s15, [r3]
 800ba40:	1a52      	subs	r2, r2, r1
 800ba42:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ba46:	ee20 6a00 	vmul.f32	s12, s0, s0
 800ba4a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800bb40 <__ieee754_expf+0x170>
 800ba4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb44 <__ieee754_expf+0x174>
 800ba52:	eee6 6a05 	vfma.f32	s13, s12, s10
 800ba56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800bb48 <__ieee754_expf+0x178>
 800ba5a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ba5e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bb4c <__ieee754_expf+0x17c>
 800ba62:	eee5 6a06 	vfma.f32	s13, s10, s12
 800ba66:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800bb50 <__ieee754_expf+0x180>
 800ba6a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ba6e:	eef0 6a40 	vmov.f32	s13, s0
 800ba72:	eee5 6a46 	vfms.f32	s13, s10, s12
 800ba76:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800ba7a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800ba7e:	bb92      	cbnz	r2, 800bae6 <__ieee754_expf+0x116>
 800ba80:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ba84:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ba88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ba8c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800ba90:	4770      	bx	lr
 800ba92:	4b30      	ldr	r3, [pc, #192]	; (800bb54 <__ieee754_expf+0x184>)
 800ba94:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800bb58 <__ieee754_expf+0x188>
 800ba98:	eddf 6a30 	vldr	s13, [pc, #192]	; 800bb5c <__ieee754_expf+0x18c>
 800ba9c:	4413      	add	r3, r2
 800ba9e:	edd3 7a00 	vldr	s15, [r3]
 800baa2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800baa6:	eeb0 7a40 	vmov.f32	s14, s0
 800baaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800baae:	ee17 2a90 	vmov	r2, s15
 800bab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bab6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800baba:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bb60 <__ieee754_expf+0x190>
 800babe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bac2:	e7be      	b.n	800ba42 <__ieee754_expf+0x72>
 800bac4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800bac8:	d20b      	bcs.n	800bae2 <__ieee754_expf+0x112>
 800baca:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bb64 <__ieee754_expf+0x194>
 800bace:	ee70 6a26 	vadd.f32	s13, s0, s13
 800bad2:	eef4 6ae5 	vcmpe.f32	s13, s11
 800bad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bada:	dd02      	ble.n	800bae2 <__ieee754_expf+0x112>
 800badc:	ee30 0a25 	vadd.f32	s0, s0, s11
 800bae0:	4770      	bx	lr
 800bae2:	2200      	movs	r2, #0
 800bae4:	e7af      	b.n	800ba46 <__ieee754_expf+0x76>
 800bae6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800baea:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800baee:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800baf2:	bfb8      	it	lt
 800baf4:	3264      	addlt	r2, #100	; 0x64
 800baf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bafa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bafe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bb02:	ee17 3a90 	vmov	r3, s15
 800bb06:	bfab      	itete	ge
 800bb08:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bb0c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bb10:	ee00 3a10 	vmovge	s0, r3
 800bb14:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800bb68 <__ieee754_expf+0x198>
 800bb18:	bfbc      	itt	lt
 800bb1a:	ee00 3a10 	vmovlt	s0, r3
 800bb1e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800bb22:	4770      	bx	lr
 800bb24:	00000000 	.word	0x00000000
 800bb28:	42b17217 	.word	0x42b17217
 800bb2c:	42cff1b5 	.word	0x42cff1b5
 800bb30:	3eb17218 	.word	0x3eb17218
 800bb34:	3f851591 	.word	0x3f851591
 800bb38:	080133b8 	.word	0x080133b8
 800bb3c:	080133c0 	.word	0x080133c0
 800bb40:	3331bb4c 	.word	0x3331bb4c
 800bb44:	b5ddea0e 	.word	0xb5ddea0e
 800bb48:	388ab355 	.word	0x388ab355
 800bb4c:	bb360b61 	.word	0xbb360b61
 800bb50:	3e2aaaab 	.word	0x3e2aaaab
 800bb54:	080133b0 	.word	0x080133b0
 800bb58:	3fb8aa3b 	.word	0x3fb8aa3b
 800bb5c:	3f317180 	.word	0x3f317180
 800bb60:	3717f7d1 	.word	0x3717f7d1
 800bb64:	7149f2ca 	.word	0x7149f2ca
 800bb68:	0d800000 	.word	0x0d800000

0800bb6c <__ieee754_logf>:
 800bb6c:	ee10 3a10 	vmov	r3, s0
 800bb70:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800bb74:	d106      	bne.n	800bb84 <__ieee754_logf+0x18>
 800bb76:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800bd10 <__ieee754_logf+0x1a4>
 800bb7a:	eddf 7a66 	vldr	s15, [pc, #408]	; 800bd14 <__ieee754_logf+0x1a8>
 800bb7e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bb82:	4770      	bx	lr
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	da02      	bge.n	800bb8e <__ieee754_logf+0x22>
 800bb88:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bb8c:	e7f5      	b.n	800bb7a <__ieee754_logf+0xe>
 800bb8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bb92:	db02      	blt.n	800bb9a <__ieee754_logf+0x2e>
 800bb94:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bb98:	4770      	bx	lr
 800bb9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb9e:	bfb8      	it	lt
 800bba0:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 800bd18 <__ieee754_logf+0x1ac>
 800bba4:	485d      	ldr	r0, [pc, #372]	; (800bd1c <__ieee754_logf+0x1b0>)
 800bba6:	bfbe      	ittt	lt
 800bba8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800bbac:	f06f 0118 	mvnlt.w	r1, #24
 800bbb0:	ee17 3a90 	vmovlt	r3, s15
 800bbb4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800bbb8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bbbc:	4418      	add	r0, r3
 800bbbe:	bfa8      	it	ge
 800bbc0:	2100      	movge	r1, #0
 800bbc2:	3a7f      	subs	r2, #127	; 0x7f
 800bbc4:	440a      	add	r2, r1
 800bbc6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800bbca:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800bbce:	4319      	orrs	r1, r3
 800bbd0:	ee00 1a10 	vmov	s0, r1
 800bbd4:	4952      	ldr	r1, [pc, #328]	; (800bd20 <__ieee754_logf+0x1b4>)
 800bbd6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800bbda:	f103 000f 	add.w	r0, r3, #15
 800bbde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bbe2:	4001      	ands	r1, r0
 800bbe4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bbe8:	bb89      	cbnz	r1, 800bc4e <__ieee754_logf+0xe2>
 800bbea:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf2:	d10f      	bne.n	800bc14 <__ieee754_logf+0xa8>
 800bbf4:	2a00      	cmp	r2, #0
 800bbf6:	f000 8087 	beq.w	800bd08 <__ieee754_logf+0x19c>
 800bbfa:	ee07 2a90 	vmov	s15, r2
 800bbfe:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800bd24 <__ieee754_logf+0x1b8>
 800bc02:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800bd28 <__ieee754_logf+0x1bc>
 800bc06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc0e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800bc12:	4770      	bx	lr
 800bc14:	eddf 6a45 	vldr	s13, [pc, #276]	; 800bd2c <__ieee754_logf+0x1c0>
 800bc18:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bc1c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800bc20:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bc24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc28:	b912      	cbnz	r2, 800bc30 <__ieee754_logf+0xc4>
 800bc2a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bc2e:	4770      	bx	lr
 800bc30:	ee07 2a90 	vmov	s15, r2
 800bc34:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bd24 <__ieee754_logf+0x1b8>
 800bc38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc3c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bc40:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bc44:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800bd28 <__ieee754_logf+0x1bc>
 800bc48:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800bc4c:	4770      	bx	lr
 800bc4e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800bc52:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bc56:	eddf 5a36 	vldr	s11, [pc, #216]	; 800bd30 <__ieee754_logf+0x1c4>
 800bc5a:	eddf 4a36 	vldr	s9, [pc, #216]	; 800bd34 <__ieee754_logf+0x1c8>
 800bc5e:	4936      	ldr	r1, [pc, #216]	; (800bd38 <__ieee754_logf+0x1cc>)
 800bc60:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800bc64:	4419      	add	r1, r3
 800bc66:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800bc6a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800bc6e:	430b      	orrs	r3, r1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	ee07 2a90 	vmov	s15, r2
 800bc76:	ee26 5a06 	vmul.f32	s10, s12, s12
 800bc7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bc7e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800bc82:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800bd3c <__ieee754_logf+0x1d0>
 800bc86:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bc8a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800bd40 <__ieee754_logf+0x1d4>
 800bc8e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bc92:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800bd44 <__ieee754_logf+0x1d8>
 800bc96:	eee7 7a24 	vfma.f32	s15, s14, s9
 800bc9a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 800bd48 <__ieee754_logf+0x1dc>
 800bc9e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800bca2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800bd4c <__ieee754_logf+0x1e0>
 800bca6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800bcaa:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bcae:	eee5 7a87 	vfma.f32	s15, s11, s14
 800bcb2:	dd1a      	ble.n	800bcea <__ieee754_logf+0x17e>
 800bcb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bcb8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800bcbc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800bcc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bcc8:	b912      	cbnz	r2, 800bcd0 <__ieee754_logf+0x164>
 800bcca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcce:	e7ac      	b.n	800bc2a <__ieee754_logf+0xbe>
 800bcd0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800bd24 <__ieee754_logf+0x1b8>
 800bcd4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800bcd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcdc:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bce0:	eddf 7a11 	vldr	s15, [pc, #68]	; 800bd28 <__ieee754_logf+0x1bc>
 800bce4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800bce8:	4770      	bx	lr
 800bcea:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bcee:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bcf2:	b912      	cbnz	r2, 800bcfa <__ieee754_logf+0x18e>
 800bcf4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bcf8:	4770      	bx	lr
 800bcfa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800bd24 <__ieee754_logf+0x1b8>
 800bcfe:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800bd02:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bd06:	e7eb      	b.n	800bce0 <__ieee754_logf+0x174>
 800bd08:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800bd14 <__ieee754_logf+0x1a8>
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	cc000000 	.word	0xcc000000
 800bd14:	00000000 	.word	0x00000000
 800bd18:	4c000000 	.word	0x4c000000
 800bd1c:	004afb20 	.word	0x004afb20
 800bd20:	007ffff0 	.word	0x007ffff0
 800bd24:	3717f7d1 	.word	0x3717f7d1
 800bd28:	3f317180 	.word	0x3f317180
 800bd2c:	3eaaaaab 	.word	0x3eaaaaab
 800bd30:	3e1cd04f 	.word	0x3e1cd04f
 800bd34:	3e178897 	.word	0x3e178897
 800bd38:	ffcf5c30 	.word	0xffcf5c30
 800bd3c:	3e638e29 	.word	0x3e638e29
 800bd40:	3ecccccd 	.word	0x3ecccccd
 800bd44:	3e3a3325 	.word	0x3e3a3325
 800bd48:	3e924925 	.word	0x3e924925
 800bd4c:	3f2aaaab 	.word	0x3f2aaaab

0800bd50 <__ieee754_log10f>:
 800bd50:	b508      	push	{r3, lr}
 800bd52:	ee10 2a10 	vmov	r2, s0
 800bd56:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800bd5a:	ed2d 8b02 	vpush	{d8}
 800bd5e:	d108      	bne.n	800bd72 <__ieee754_log10f+0x22>
 800bd60:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800bde8 <__ieee754_log10f+0x98>
 800bd64:	eddf 7a21 	vldr	s15, [pc, #132]	; 800bdec <__ieee754_log10f+0x9c>
 800bd68:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bd6c:	ecbd 8b02 	vpop	{d8}
 800bd70:	bd08      	pop	{r3, pc}
 800bd72:	2a00      	cmp	r2, #0
 800bd74:	da02      	bge.n	800bd7c <__ieee754_log10f+0x2c>
 800bd76:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bd7a:	e7f3      	b.n	800bd64 <__ieee754_log10f+0x14>
 800bd7c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bd80:	db02      	blt.n	800bd88 <__ieee754_log10f+0x38>
 800bd82:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd86:	e7f1      	b.n	800bd6c <__ieee754_log10f+0x1c>
 800bd88:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800bd8c:	bfbf      	itttt	lt
 800bd8e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800bdf0 <__ieee754_log10f+0xa0>
 800bd92:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800bd96:	f06f 0118 	mvnlt.w	r1, #24
 800bd9a:	ee17 2a90 	vmovlt	r2, s15
 800bd9e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800bda2:	bfa8      	it	ge
 800bda4:	2100      	movge	r1, #0
 800bda6:	3b7f      	subs	r3, #127	; 0x7f
 800bda8:	440b      	add	r3, r1
 800bdaa:	0fd9      	lsrs	r1, r3, #31
 800bdac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800bdb0:	ee07 3a90 	vmov	s15, r3
 800bdb4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800bdb8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800bdbc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800bdc0:	ee00 3a10 	vmov	s0, r3
 800bdc4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800bdc8:	f7ff fed0 	bl	800bb6c <__ieee754_logf>
 800bdcc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bdf4 <__ieee754_log10f+0xa4>
 800bdd0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bdd4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bdf8 <__ieee754_log10f+0xa8>
 800bdd8:	eea8 0a27 	vfma.f32	s0, s16, s15
 800bddc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bdfc <__ieee754_log10f+0xac>
 800bde0:	eea8 0a27 	vfma.f32	s0, s16, s15
 800bde4:	e7c2      	b.n	800bd6c <__ieee754_log10f+0x1c>
 800bde6:	bf00      	nop
 800bde8:	cc000000 	.word	0xcc000000
 800bdec:	00000000 	.word	0x00000000
 800bdf0:	4c000000 	.word	0x4c000000
 800bdf4:	3ede5bd9 	.word	0x3ede5bd9
 800bdf8:	355427db 	.word	0x355427db
 800bdfc:	3e9a2080 	.word	0x3e9a2080

0800be00 <scalbn>:
 800be00:	b570      	push	{r4, r5, r6, lr}
 800be02:	ec55 4b10 	vmov	r4, r5, d0
 800be06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800be0a:	4606      	mov	r6, r0
 800be0c:	462b      	mov	r3, r5
 800be0e:	b999      	cbnz	r1, 800be38 <scalbn+0x38>
 800be10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800be14:	4323      	orrs	r3, r4
 800be16:	d03f      	beq.n	800be98 <scalbn+0x98>
 800be18:	4b35      	ldr	r3, [pc, #212]	; (800bef0 <scalbn+0xf0>)
 800be1a:	4629      	mov	r1, r5
 800be1c:	ee10 0a10 	vmov	r0, s0
 800be20:	2200      	movs	r2, #0
 800be22:	f7f4 fc09 	bl	8000638 <__aeabi_dmul>
 800be26:	4b33      	ldr	r3, [pc, #204]	; (800bef4 <scalbn+0xf4>)
 800be28:	429e      	cmp	r6, r3
 800be2a:	4604      	mov	r4, r0
 800be2c:	460d      	mov	r5, r1
 800be2e:	da10      	bge.n	800be52 <scalbn+0x52>
 800be30:	a327      	add	r3, pc, #156	; (adr r3, 800bed0 <scalbn+0xd0>)
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	e01f      	b.n	800be78 <scalbn+0x78>
 800be38:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800be3c:	4291      	cmp	r1, r2
 800be3e:	d10c      	bne.n	800be5a <scalbn+0x5a>
 800be40:	ee10 2a10 	vmov	r2, s0
 800be44:	4620      	mov	r0, r4
 800be46:	4629      	mov	r1, r5
 800be48:	f7f4 fa40 	bl	80002cc <__adddf3>
 800be4c:	4604      	mov	r4, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	e022      	b.n	800be98 <scalbn+0x98>
 800be52:	460b      	mov	r3, r1
 800be54:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800be58:	3936      	subs	r1, #54	; 0x36
 800be5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800be5e:	4296      	cmp	r6, r2
 800be60:	dd0d      	ble.n	800be7e <scalbn+0x7e>
 800be62:	2d00      	cmp	r5, #0
 800be64:	a11c      	add	r1, pc, #112	; (adr r1, 800bed8 <scalbn+0xd8>)
 800be66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be6a:	da02      	bge.n	800be72 <scalbn+0x72>
 800be6c:	a11c      	add	r1, pc, #112	; (adr r1, 800bee0 <scalbn+0xe0>)
 800be6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be72:	a319      	add	r3, pc, #100	; (adr r3, 800bed8 <scalbn+0xd8>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 fbde 	bl	8000638 <__aeabi_dmul>
 800be7c:	e7e6      	b.n	800be4c <scalbn+0x4c>
 800be7e:	1872      	adds	r2, r6, r1
 800be80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800be84:	428a      	cmp	r2, r1
 800be86:	dcec      	bgt.n	800be62 <scalbn+0x62>
 800be88:	2a00      	cmp	r2, #0
 800be8a:	dd08      	ble.n	800be9e <scalbn+0x9e>
 800be8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be98:	ec45 4b10 	vmov	d0, r4, r5
 800be9c:	bd70      	pop	{r4, r5, r6, pc}
 800be9e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bea2:	da08      	bge.n	800beb6 <scalbn+0xb6>
 800bea4:	2d00      	cmp	r5, #0
 800bea6:	a10a      	add	r1, pc, #40	; (adr r1, 800bed0 <scalbn+0xd0>)
 800bea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beac:	dac0      	bge.n	800be30 <scalbn+0x30>
 800beae:	a10e      	add	r1, pc, #56	; (adr r1, 800bee8 <scalbn+0xe8>)
 800beb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beb4:	e7bc      	b.n	800be30 <scalbn+0x30>
 800beb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800beba:	3236      	adds	r2, #54	; 0x36
 800bebc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bec0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bec4:	4620      	mov	r0, r4
 800bec6:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <scalbn+0xf8>)
 800bec8:	2200      	movs	r2, #0
 800beca:	e7d5      	b.n	800be78 <scalbn+0x78>
 800becc:	f3af 8000 	nop.w
 800bed0:	c2f8f359 	.word	0xc2f8f359
 800bed4:	01a56e1f 	.word	0x01a56e1f
 800bed8:	8800759c 	.word	0x8800759c
 800bedc:	7e37e43c 	.word	0x7e37e43c
 800bee0:	8800759c 	.word	0x8800759c
 800bee4:	fe37e43c 	.word	0xfe37e43c
 800bee8:	c2f8f359 	.word	0xc2f8f359
 800beec:	81a56e1f 	.word	0x81a56e1f
 800bef0:	43500000 	.word	0x43500000
 800bef4:	ffff3cb0 	.word	0xffff3cb0
 800bef8:	3c900000 	.word	0x3c900000

0800befc <with_errno>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	4616      	mov	r6, r2
 800bf04:	f001 f9d6 	bl	800d2b4 <__errno>
 800bf08:	4629      	mov	r1, r5
 800bf0a:	6006      	str	r6, [r0, #0]
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	bd70      	pop	{r4, r5, r6, pc}

0800bf10 <xflow>:
 800bf10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf12:	4614      	mov	r4, r2
 800bf14:	461d      	mov	r5, r3
 800bf16:	b108      	cbz	r0, 800bf1c <xflow+0xc>
 800bf18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf1c:	e9cd 2300 	strd	r2, r3, [sp]
 800bf20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf24:	4620      	mov	r0, r4
 800bf26:	4629      	mov	r1, r5
 800bf28:	f7f4 fb86 	bl	8000638 <__aeabi_dmul>
 800bf2c:	2222      	movs	r2, #34	; 0x22
 800bf2e:	b003      	add	sp, #12
 800bf30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf34:	f7ff bfe2 	b.w	800befc <with_errno>

0800bf38 <__math_uflow>:
 800bf38:	b508      	push	{r3, lr}
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bf40:	f7ff ffe6 	bl	800bf10 <xflow>
 800bf44:	ec41 0b10 	vmov	d0, r0, r1
 800bf48:	bd08      	pop	{r3, pc}

0800bf4a <__math_oflow>:
 800bf4a:	b508      	push	{r3, lr}
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bf52:	f7ff ffdd 	bl	800bf10 <xflow>
 800bf56:	ec41 0b10 	vmov	d0, r0, r1
 800bf5a:	bd08      	pop	{r3, pc}

0800bf5c <abort>:
 800bf5c:	b508      	push	{r3, lr}
 800bf5e:	2006      	movs	r0, #6
 800bf60:	f001 f936 	bl	800d1d0 <raise>
 800bf64:	2001      	movs	r0, #1
 800bf66:	f7f9 fa79 	bl	800545c <_exit>
	...

0800bf6c <__assert_func>:
 800bf6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf6e:	4614      	mov	r4, r2
 800bf70:	461a      	mov	r2, r3
 800bf72:	4b09      	ldr	r3, [pc, #36]	; (800bf98 <__assert_func+0x2c>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4605      	mov	r5, r0
 800bf78:	68d8      	ldr	r0, [r3, #12]
 800bf7a:	b14c      	cbz	r4, 800bf90 <__assert_func+0x24>
 800bf7c:	4b07      	ldr	r3, [pc, #28]	; (800bf9c <__assert_func+0x30>)
 800bf7e:	9100      	str	r1, [sp, #0]
 800bf80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf84:	4906      	ldr	r1, [pc, #24]	; (800bfa0 <__assert_func+0x34>)
 800bf86:	462b      	mov	r3, r5
 800bf88:	f000 ffd6 	bl	800cf38 <fiprintf>
 800bf8c:	f7ff ffe6 	bl	800bf5c <abort>
 800bf90:	4b04      	ldr	r3, [pc, #16]	; (800bfa4 <__assert_func+0x38>)
 800bf92:	461c      	mov	r4, r3
 800bf94:	e7f3      	b.n	800bf7e <__assert_func+0x12>
 800bf96:	bf00      	nop
 800bf98:	200006c4 	.word	0x200006c4
 800bf9c:	080133c8 	.word	0x080133c8
 800bfa0:	080133d5 	.word	0x080133d5
 800bfa4:	08013403 	.word	0x08013403

0800bfa8 <calloc>:
 800bfa8:	4b02      	ldr	r3, [pc, #8]	; (800bfb4 <calloc+0xc>)
 800bfaa:	460a      	mov	r2, r1
 800bfac:	4601      	mov	r1, r0
 800bfae:	6818      	ldr	r0, [r3, #0]
 800bfb0:	f000 b802 	b.w	800bfb8 <_calloc_r>
 800bfb4:	200006c4 	.word	0x200006c4

0800bfb8 <_calloc_r>:
 800bfb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfba:	fba1 2402 	umull	r2, r4, r1, r2
 800bfbe:	b94c      	cbnz	r4, 800bfd4 <_calloc_r+0x1c>
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	9201      	str	r2, [sp, #4]
 800bfc4:	f000 f83e 	bl	800c044 <_malloc_r>
 800bfc8:	9a01      	ldr	r2, [sp, #4]
 800bfca:	4605      	mov	r5, r0
 800bfcc:	b930      	cbnz	r0, 800bfdc <_calloc_r+0x24>
 800bfce:	4628      	mov	r0, r5
 800bfd0:	b003      	add	sp, #12
 800bfd2:	bd30      	pop	{r4, r5, pc}
 800bfd4:	220c      	movs	r2, #12
 800bfd6:	6002      	str	r2, [r0, #0]
 800bfd8:	2500      	movs	r5, #0
 800bfda:	e7f8      	b.n	800bfce <_calloc_r+0x16>
 800bfdc:	4621      	mov	r1, r4
 800bfde:	f001 f859 	bl	800d094 <memset>
 800bfe2:	e7f4      	b.n	800bfce <_calloc_r+0x16>

0800bfe4 <malloc>:
 800bfe4:	4b02      	ldr	r3, [pc, #8]	; (800bff0 <malloc+0xc>)
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	6818      	ldr	r0, [r3, #0]
 800bfea:	f000 b82b 	b.w	800c044 <_malloc_r>
 800bfee:	bf00      	nop
 800bff0:	200006c4 	.word	0x200006c4

0800bff4 <free>:
 800bff4:	4b02      	ldr	r3, [pc, #8]	; (800c000 <free+0xc>)
 800bff6:	4601      	mov	r1, r0
 800bff8:	6818      	ldr	r0, [r3, #0]
 800bffa:	f001 b997 	b.w	800d32c <_free_r>
 800bffe:	bf00      	nop
 800c000:	200006c4 	.word	0x200006c4

0800c004 <sbrk_aligned>:
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	4e0e      	ldr	r6, [pc, #56]	; (800c040 <sbrk_aligned+0x3c>)
 800c008:	460c      	mov	r4, r1
 800c00a:	6831      	ldr	r1, [r6, #0]
 800c00c:	4605      	mov	r5, r0
 800c00e:	b911      	cbnz	r1, 800c016 <sbrk_aligned+0x12>
 800c010:	f001 f92e 	bl	800d270 <_sbrk_r>
 800c014:	6030      	str	r0, [r6, #0]
 800c016:	4621      	mov	r1, r4
 800c018:	4628      	mov	r0, r5
 800c01a:	f001 f929 	bl	800d270 <_sbrk_r>
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	d00a      	beq.n	800c038 <sbrk_aligned+0x34>
 800c022:	1cc4      	adds	r4, r0, #3
 800c024:	f024 0403 	bic.w	r4, r4, #3
 800c028:	42a0      	cmp	r0, r4
 800c02a:	d007      	beq.n	800c03c <sbrk_aligned+0x38>
 800c02c:	1a21      	subs	r1, r4, r0
 800c02e:	4628      	mov	r0, r5
 800c030:	f001 f91e 	bl	800d270 <_sbrk_r>
 800c034:	3001      	adds	r0, #1
 800c036:	d101      	bne.n	800c03c <sbrk_aligned+0x38>
 800c038:	f04f 34ff 	mov.w	r4, #4294967295
 800c03c:	4620      	mov	r0, r4
 800c03e:	bd70      	pop	{r4, r5, r6, pc}
 800c040:	200009fc 	.word	0x200009fc

0800c044 <_malloc_r>:
 800c044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c048:	1ccd      	adds	r5, r1, #3
 800c04a:	f025 0503 	bic.w	r5, r5, #3
 800c04e:	3508      	adds	r5, #8
 800c050:	2d0c      	cmp	r5, #12
 800c052:	bf38      	it	cc
 800c054:	250c      	movcc	r5, #12
 800c056:	2d00      	cmp	r5, #0
 800c058:	4607      	mov	r7, r0
 800c05a:	db01      	blt.n	800c060 <_malloc_r+0x1c>
 800c05c:	42a9      	cmp	r1, r5
 800c05e:	d905      	bls.n	800c06c <_malloc_r+0x28>
 800c060:	230c      	movs	r3, #12
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	2600      	movs	r6, #0
 800c066:	4630      	mov	r0, r6
 800c068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c140 <_malloc_r+0xfc>
 800c070:	f000 f868 	bl	800c144 <__malloc_lock>
 800c074:	f8d8 3000 	ldr.w	r3, [r8]
 800c078:	461c      	mov	r4, r3
 800c07a:	bb5c      	cbnz	r4, 800c0d4 <_malloc_r+0x90>
 800c07c:	4629      	mov	r1, r5
 800c07e:	4638      	mov	r0, r7
 800c080:	f7ff ffc0 	bl	800c004 <sbrk_aligned>
 800c084:	1c43      	adds	r3, r0, #1
 800c086:	4604      	mov	r4, r0
 800c088:	d155      	bne.n	800c136 <_malloc_r+0xf2>
 800c08a:	f8d8 4000 	ldr.w	r4, [r8]
 800c08e:	4626      	mov	r6, r4
 800c090:	2e00      	cmp	r6, #0
 800c092:	d145      	bne.n	800c120 <_malloc_r+0xdc>
 800c094:	2c00      	cmp	r4, #0
 800c096:	d048      	beq.n	800c12a <_malloc_r+0xe6>
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	4631      	mov	r1, r6
 800c09c:	4638      	mov	r0, r7
 800c09e:	eb04 0903 	add.w	r9, r4, r3
 800c0a2:	f001 f8e5 	bl	800d270 <_sbrk_r>
 800c0a6:	4581      	cmp	r9, r0
 800c0a8:	d13f      	bne.n	800c12a <_malloc_r+0xe6>
 800c0aa:	6821      	ldr	r1, [r4, #0]
 800c0ac:	1a6d      	subs	r5, r5, r1
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	f7ff ffa7 	bl	800c004 <sbrk_aligned>
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	d037      	beq.n	800c12a <_malloc_r+0xe6>
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	442b      	add	r3, r5
 800c0be:	6023      	str	r3, [r4, #0]
 800c0c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d038      	beq.n	800c13a <_malloc_r+0xf6>
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	42a2      	cmp	r2, r4
 800c0cc:	d12b      	bne.n	800c126 <_malloc_r+0xe2>
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	605a      	str	r2, [r3, #4]
 800c0d2:	e00f      	b.n	800c0f4 <_malloc_r+0xb0>
 800c0d4:	6822      	ldr	r2, [r4, #0]
 800c0d6:	1b52      	subs	r2, r2, r5
 800c0d8:	d41f      	bmi.n	800c11a <_malloc_r+0xd6>
 800c0da:	2a0b      	cmp	r2, #11
 800c0dc:	d917      	bls.n	800c10e <_malloc_r+0xca>
 800c0de:	1961      	adds	r1, r4, r5
 800c0e0:	42a3      	cmp	r3, r4
 800c0e2:	6025      	str	r5, [r4, #0]
 800c0e4:	bf18      	it	ne
 800c0e6:	6059      	strne	r1, [r3, #4]
 800c0e8:	6863      	ldr	r3, [r4, #4]
 800c0ea:	bf08      	it	eq
 800c0ec:	f8c8 1000 	streq.w	r1, [r8]
 800c0f0:	5162      	str	r2, [r4, r5]
 800c0f2:	604b      	str	r3, [r1, #4]
 800c0f4:	4638      	mov	r0, r7
 800c0f6:	f104 060b 	add.w	r6, r4, #11
 800c0fa:	f000 f829 	bl	800c150 <__malloc_unlock>
 800c0fe:	f026 0607 	bic.w	r6, r6, #7
 800c102:	1d23      	adds	r3, r4, #4
 800c104:	1af2      	subs	r2, r6, r3
 800c106:	d0ae      	beq.n	800c066 <_malloc_r+0x22>
 800c108:	1b9b      	subs	r3, r3, r6
 800c10a:	50a3      	str	r3, [r4, r2]
 800c10c:	e7ab      	b.n	800c066 <_malloc_r+0x22>
 800c10e:	42a3      	cmp	r3, r4
 800c110:	6862      	ldr	r2, [r4, #4]
 800c112:	d1dd      	bne.n	800c0d0 <_malloc_r+0x8c>
 800c114:	f8c8 2000 	str.w	r2, [r8]
 800c118:	e7ec      	b.n	800c0f4 <_malloc_r+0xb0>
 800c11a:	4623      	mov	r3, r4
 800c11c:	6864      	ldr	r4, [r4, #4]
 800c11e:	e7ac      	b.n	800c07a <_malloc_r+0x36>
 800c120:	4634      	mov	r4, r6
 800c122:	6876      	ldr	r6, [r6, #4]
 800c124:	e7b4      	b.n	800c090 <_malloc_r+0x4c>
 800c126:	4613      	mov	r3, r2
 800c128:	e7cc      	b.n	800c0c4 <_malloc_r+0x80>
 800c12a:	230c      	movs	r3, #12
 800c12c:	603b      	str	r3, [r7, #0]
 800c12e:	4638      	mov	r0, r7
 800c130:	f000 f80e 	bl	800c150 <__malloc_unlock>
 800c134:	e797      	b.n	800c066 <_malloc_r+0x22>
 800c136:	6025      	str	r5, [r4, #0]
 800c138:	e7dc      	b.n	800c0f4 <_malloc_r+0xb0>
 800c13a:	605b      	str	r3, [r3, #4]
 800c13c:	deff      	udf	#255	; 0xff
 800c13e:	bf00      	nop
 800c140:	200009f8 	.word	0x200009f8

0800c144 <__malloc_lock>:
 800c144:	4801      	ldr	r0, [pc, #4]	; (800c14c <__malloc_lock+0x8>)
 800c146:	f001 b8e0 	b.w	800d30a <__retarget_lock_acquire_recursive>
 800c14a:	bf00      	nop
 800c14c:	20000b40 	.word	0x20000b40

0800c150 <__malloc_unlock>:
 800c150:	4801      	ldr	r0, [pc, #4]	; (800c158 <__malloc_unlock+0x8>)
 800c152:	f001 b8db 	b.w	800d30c <__retarget_lock_release_recursive>
 800c156:	bf00      	nop
 800c158:	20000b40 	.word	0x20000b40

0800c15c <_realloc_r>:
 800c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c160:	4680      	mov	r8, r0
 800c162:	4614      	mov	r4, r2
 800c164:	460e      	mov	r6, r1
 800c166:	b921      	cbnz	r1, 800c172 <_realloc_r+0x16>
 800c168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c16c:	4611      	mov	r1, r2
 800c16e:	f7ff bf69 	b.w	800c044 <_malloc_r>
 800c172:	b92a      	cbnz	r2, 800c180 <_realloc_r+0x24>
 800c174:	f001 f8da 	bl	800d32c <_free_r>
 800c178:	4625      	mov	r5, r4
 800c17a:	4628      	mov	r0, r5
 800c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c180:	f002 f937 	bl	800e3f2 <_malloc_usable_size_r>
 800c184:	4284      	cmp	r4, r0
 800c186:	4607      	mov	r7, r0
 800c188:	d802      	bhi.n	800c190 <_realloc_r+0x34>
 800c18a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c18e:	d812      	bhi.n	800c1b6 <_realloc_r+0x5a>
 800c190:	4621      	mov	r1, r4
 800c192:	4640      	mov	r0, r8
 800c194:	f7ff ff56 	bl	800c044 <_malloc_r>
 800c198:	4605      	mov	r5, r0
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d0ed      	beq.n	800c17a <_realloc_r+0x1e>
 800c19e:	42bc      	cmp	r4, r7
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	bf28      	it	cs
 800c1a6:	463a      	movcs	r2, r7
 800c1a8:	f001 f8b1 	bl	800d30e <memcpy>
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	f001 f8bc 	bl	800d32c <_free_r>
 800c1b4:	e7e1      	b.n	800c17a <_realloc_r+0x1e>
 800c1b6:	4635      	mov	r5, r6
 800c1b8:	e7df      	b.n	800c17a <_realloc_r+0x1e>

0800c1ba <sulp>:
 800c1ba:	b570      	push	{r4, r5, r6, lr}
 800c1bc:	4604      	mov	r4, r0
 800c1be:	460d      	mov	r5, r1
 800c1c0:	ec45 4b10 	vmov	d0, r4, r5
 800c1c4:	4616      	mov	r6, r2
 800c1c6:	f001 ffd3 	bl	800e170 <__ulp>
 800c1ca:	ec51 0b10 	vmov	r0, r1, d0
 800c1ce:	b17e      	cbz	r6, 800c1f0 <sulp+0x36>
 800c1d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dd09      	ble.n	800c1f0 <sulp+0x36>
 800c1dc:	051b      	lsls	r3, r3, #20
 800c1de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c1e2:	2400      	movs	r4, #0
 800c1e4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c1e8:	4622      	mov	r2, r4
 800c1ea:	462b      	mov	r3, r5
 800c1ec:	f7f4 fa24 	bl	8000638 <__aeabi_dmul>
 800c1f0:	bd70      	pop	{r4, r5, r6, pc}
 800c1f2:	0000      	movs	r0, r0
 800c1f4:	0000      	movs	r0, r0
	...

0800c1f8 <_strtod_l>:
 800c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fc:	ed2d 8b02 	vpush	{d8}
 800c200:	b09b      	sub	sp, #108	; 0x6c
 800c202:	4604      	mov	r4, r0
 800c204:	9213      	str	r2, [sp, #76]	; 0x4c
 800c206:	2200      	movs	r2, #0
 800c208:	9216      	str	r2, [sp, #88]	; 0x58
 800c20a:	460d      	mov	r5, r1
 800c20c:	f04f 0800 	mov.w	r8, #0
 800c210:	f04f 0900 	mov.w	r9, #0
 800c214:	460a      	mov	r2, r1
 800c216:	9215      	str	r2, [sp, #84]	; 0x54
 800c218:	7811      	ldrb	r1, [r2, #0]
 800c21a:	292b      	cmp	r1, #43	; 0x2b
 800c21c:	d04c      	beq.n	800c2b8 <_strtod_l+0xc0>
 800c21e:	d83a      	bhi.n	800c296 <_strtod_l+0x9e>
 800c220:	290d      	cmp	r1, #13
 800c222:	d834      	bhi.n	800c28e <_strtod_l+0x96>
 800c224:	2908      	cmp	r1, #8
 800c226:	d834      	bhi.n	800c292 <_strtod_l+0x9a>
 800c228:	2900      	cmp	r1, #0
 800c22a:	d03d      	beq.n	800c2a8 <_strtod_l+0xb0>
 800c22c:	2200      	movs	r2, #0
 800c22e:	920a      	str	r2, [sp, #40]	; 0x28
 800c230:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c232:	7832      	ldrb	r2, [r6, #0]
 800c234:	2a30      	cmp	r2, #48	; 0x30
 800c236:	f040 80b4 	bne.w	800c3a2 <_strtod_l+0x1aa>
 800c23a:	7872      	ldrb	r2, [r6, #1]
 800c23c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c240:	2a58      	cmp	r2, #88	; 0x58
 800c242:	d170      	bne.n	800c326 <_strtod_l+0x12e>
 800c244:	9302      	str	r3, [sp, #8]
 800c246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	ab16      	add	r3, sp, #88	; 0x58
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	4a8e      	ldr	r2, [pc, #568]	; (800c488 <_strtod_l+0x290>)
 800c250:	ab17      	add	r3, sp, #92	; 0x5c
 800c252:	a915      	add	r1, sp, #84	; 0x54
 800c254:	4620      	mov	r0, r4
 800c256:	f001 f91d 	bl	800d494 <__gethex>
 800c25a:	f010 070f 	ands.w	r7, r0, #15
 800c25e:	4605      	mov	r5, r0
 800c260:	d005      	beq.n	800c26e <_strtod_l+0x76>
 800c262:	2f06      	cmp	r7, #6
 800c264:	d12a      	bne.n	800c2bc <_strtod_l+0xc4>
 800c266:	3601      	adds	r6, #1
 800c268:	2300      	movs	r3, #0
 800c26a:	9615      	str	r6, [sp, #84]	; 0x54
 800c26c:	930a      	str	r3, [sp, #40]	; 0x28
 800c26e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c270:	2b00      	cmp	r3, #0
 800c272:	f040 857f 	bne.w	800cd74 <_strtod_l+0xb7c>
 800c276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c278:	b1db      	cbz	r3, 800c2b2 <_strtod_l+0xba>
 800c27a:	4642      	mov	r2, r8
 800c27c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c280:	ec43 2b10 	vmov	d0, r2, r3
 800c284:	b01b      	add	sp, #108	; 0x6c
 800c286:	ecbd 8b02 	vpop	{d8}
 800c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28e:	2920      	cmp	r1, #32
 800c290:	d1cc      	bne.n	800c22c <_strtod_l+0x34>
 800c292:	3201      	adds	r2, #1
 800c294:	e7bf      	b.n	800c216 <_strtod_l+0x1e>
 800c296:	292d      	cmp	r1, #45	; 0x2d
 800c298:	d1c8      	bne.n	800c22c <_strtod_l+0x34>
 800c29a:	2101      	movs	r1, #1
 800c29c:	910a      	str	r1, [sp, #40]	; 0x28
 800c29e:	1c51      	adds	r1, r2, #1
 800c2a0:	9115      	str	r1, [sp, #84]	; 0x54
 800c2a2:	7852      	ldrb	r2, [r2, #1]
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	d1c3      	bne.n	800c230 <_strtod_l+0x38>
 800c2a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2aa:	9515      	str	r5, [sp, #84]	; 0x54
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f040 855f 	bne.w	800cd70 <_strtod_l+0xb78>
 800c2b2:	4642      	mov	r2, r8
 800c2b4:	464b      	mov	r3, r9
 800c2b6:	e7e3      	b.n	800c280 <_strtod_l+0x88>
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	e7ef      	b.n	800c29c <_strtod_l+0xa4>
 800c2bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c2be:	b13a      	cbz	r2, 800c2d0 <_strtod_l+0xd8>
 800c2c0:	2135      	movs	r1, #53	; 0x35
 800c2c2:	a818      	add	r0, sp, #96	; 0x60
 800c2c4:	f002 f851 	bl	800e36a <__copybits>
 800c2c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f001 fc24 	bl	800db18 <_Bfree>
 800c2d0:	3f01      	subs	r7, #1
 800c2d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2d4:	2f04      	cmp	r7, #4
 800c2d6:	d806      	bhi.n	800c2e6 <_strtod_l+0xee>
 800c2d8:	e8df f007 	tbb	[pc, r7]
 800c2dc:	201d0314 	.word	0x201d0314
 800c2e0:	14          	.byte	0x14
 800c2e1:	00          	.byte	0x00
 800c2e2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c2e6:	05e9      	lsls	r1, r5, #23
 800c2e8:	bf48      	it	mi
 800c2ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c2ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c2f2:	0d1b      	lsrs	r3, r3, #20
 800c2f4:	051b      	lsls	r3, r3, #20
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1b9      	bne.n	800c26e <_strtod_l+0x76>
 800c2fa:	f000 ffdb 	bl	800d2b4 <__errno>
 800c2fe:	2322      	movs	r3, #34	; 0x22
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	e7b4      	b.n	800c26e <_strtod_l+0x76>
 800c304:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c308:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c30c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c310:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c314:	e7e7      	b.n	800c2e6 <_strtod_l+0xee>
 800c316:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c490 <_strtod_l+0x298>
 800c31a:	e7e4      	b.n	800c2e6 <_strtod_l+0xee>
 800c31c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c320:	f04f 38ff 	mov.w	r8, #4294967295
 800c324:	e7df      	b.n	800c2e6 <_strtod_l+0xee>
 800c326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	9215      	str	r2, [sp, #84]	; 0x54
 800c32c:	785b      	ldrb	r3, [r3, #1]
 800c32e:	2b30      	cmp	r3, #48	; 0x30
 800c330:	d0f9      	beq.n	800c326 <_strtod_l+0x12e>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d09b      	beq.n	800c26e <_strtod_l+0x76>
 800c336:	2301      	movs	r3, #1
 800c338:	f04f 0a00 	mov.w	sl, #0
 800c33c:	9304      	str	r3, [sp, #16]
 800c33e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c340:	930b      	str	r3, [sp, #44]	; 0x2c
 800c342:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c346:	46d3      	mov	fp, sl
 800c348:	220a      	movs	r2, #10
 800c34a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c34c:	7806      	ldrb	r6, [r0, #0]
 800c34e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c352:	b2d9      	uxtb	r1, r3
 800c354:	2909      	cmp	r1, #9
 800c356:	d926      	bls.n	800c3a6 <_strtod_l+0x1ae>
 800c358:	494c      	ldr	r1, [pc, #304]	; (800c48c <_strtod_l+0x294>)
 800c35a:	2201      	movs	r2, #1
 800c35c:	f000 fea2 	bl	800d0a4 <strncmp>
 800c360:	2800      	cmp	r0, #0
 800c362:	d030      	beq.n	800c3c6 <_strtod_l+0x1ce>
 800c364:	2000      	movs	r0, #0
 800c366:	4632      	mov	r2, r6
 800c368:	9005      	str	r0, [sp, #20]
 800c36a:	465e      	mov	r6, fp
 800c36c:	4603      	mov	r3, r0
 800c36e:	2a65      	cmp	r2, #101	; 0x65
 800c370:	d001      	beq.n	800c376 <_strtod_l+0x17e>
 800c372:	2a45      	cmp	r2, #69	; 0x45
 800c374:	d113      	bne.n	800c39e <_strtod_l+0x1a6>
 800c376:	b91e      	cbnz	r6, 800c380 <_strtod_l+0x188>
 800c378:	9a04      	ldr	r2, [sp, #16]
 800c37a:	4302      	orrs	r2, r0
 800c37c:	d094      	beq.n	800c2a8 <_strtod_l+0xb0>
 800c37e:	2600      	movs	r6, #0
 800c380:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c382:	1c6a      	adds	r2, r5, #1
 800c384:	9215      	str	r2, [sp, #84]	; 0x54
 800c386:	786a      	ldrb	r2, [r5, #1]
 800c388:	2a2b      	cmp	r2, #43	; 0x2b
 800c38a:	d074      	beq.n	800c476 <_strtod_l+0x27e>
 800c38c:	2a2d      	cmp	r2, #45	; 0x2d
 800c38e:	d078      	beq.n	800c482 <_strtod_l+0x28a>
 800c390:	f04f 0c00 	mov.w	ip, #0
 800c394:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c398:	2909      	cmp	r1, #9
 800c39a:	d97f      	bls.n	800c49c <_strtod_l+0x2a4>
 800c39c:	9515      	str	r5, [sp, #84]	; 0x54
 800c39e:	2700      	movs	r7, #0
 800c3a0:	e09e      	b.n	800c4e0 <_strtod_l+0x2e8>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e7c8      	b.n	800c338 <_strtod_l+0x140>
 800c3a6:	f1bb 0f08 	cmp.w	fp, #8
 800c3aa:	bfd8      	it	le
 800c3ac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c3ae:	f100 0001 	add.w	r0, r0, #1
 800c3b2:	bfda      	itte	le
 800c3b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3b8:	9309      	strle	r3, [sp, #36]	; 0x24
 800c3ba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c3be:	f10b 0b01 	add.w	fp, fp, #1
 800c3c2:	9015      	str	r0, [sp, #84]	; 0x54
 800c3c4:	e7c1      	b.n	800c34a <_strtod_l+0x152>
 800c3c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3c8:	1c5a      	adds	r2, r3, #1
 800c3ca:	9215      	str	r2, [sp, #84]	; 0x54
 800c3cc:	785a      	ldrb	r2, [r3, #1]
 800c3ce:	f1bb 0f00 	cmp.w	fp, #0
 800c3d2:	d037      	beq.n	800c444 <_strtod_l+0x24c>
 800c3d4:	9005      	str	r0, [sp, #20]
 800c3d6:	465e      	mov	r6, fp
 800c3d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c3dc:	2b09      	cmp	r3, #9
 800c3de:	d912      	bls.n	800c406 <_strtod_l+0x20e>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e7c4      	b.n	800c36e <_strtod_l+0x176>
 800c3e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3e6:	1c5a      	adds	r2, r3, #1
 800c3e8:	9215      	str	r2, [sp, #84]	; 0x54
 800c3ea:	785a      	ldrb	r2, [r3, #1]
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	2a30      	cmp	r2, #48	; 0x30
 800c3f0:	d0f8      	beq.n	800c3e4 <_strtod_l+0x1ec>
 800c3f2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c3f6:	2b08      	cmp	r3, #8
 800c3f8:	f200 84c1 	bhi.w	800cd7e <_strtod_l+0xb86>
 800c3fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3fe:	9005      	str	r0, [sp, #20]
 800c400:	2000      	movs	r0, #0
 800c402:	930b      	str	r3, [sp, #44]	; 0x2c
 800c404:	4606      	mov	r6, r0
 800c406:	3a30      	subs	r2, #48	; 0x30
 800c408:	f100 0301 	add.w	r3, r0, #1
 800c40c:	d014      	beq.n	800c438 <_strtod_l+0x240>
 800c40e:	9905      	ldr	r1, [sp, #20]
 800c410:	4419      	add	r1, r3
 800c412:	9105      	str	r1, [sp, #20]
 800c414:	4633      	mov	r3, r6
 800c416:	eb00 0c06 	add.w	ip, r0, r6
 800c41a:	210a      	movs	r1, #10
 800c41c:	4563      	cmp	r3, ip
 800c41e:	d113      	bne.n	800c448 <_strtod_l+0x250>
 800c420:	1833      	adds	r3, r6, r0
 800c422:	2b08      	cmp	r3, #8
 800c424:	f106 0601 	add.w	r6, r6, #1
 800c428:	4406      	add	r6, r0
 800c42a:	dc1a      	bgt.n	800c462 <_strtod_l+0x26a>
 800c42c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c42e:	230a      	movs	r3, #10
 800c430:	fb03 2301 	mla	r3, r3, r1, r2
 800c434:	9309      	str	r3, [sp, #36]	; 0x24
 800c436:	2300      	movs	r3, #0
 800c438:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c43a:	1c51      	adds	r1, r2, #1
 800c43c:	9115      	str	r1, [sp, #84]	; 0x54
 800c43e:	7852      	ldrb	r2, [r2, #1]
 800c440:	4618      	mov	r0, r3
 800c442:	e7c9      	b.n	800c3d8 <_strtod_l+0x1e0>
 800c444:	4658      	mov	r0, fp
 800c446:	e7d2      	b.n	800c3ee <_strtod_l+0x1f6>
 800c448:	2b08      	cmp	r3, #8
 800c44a:	f103 0301 	add.w	r3, r3, #1
 800c44e:	dc03      	bgt.n	800c458 <_strtod_l+0x260>
 800c450:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c452:	434f      	muls	r7, r1
 800c454:	9709      	str	r7, [sp, #36]	; 0x24
 800c456:	e7e1      	b.n	800c41c <_strtod_l+0x224>
 800c458:	2b10      	cmp	r3, #16
 800c45a:	bfd8      	it	le
 800c45c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c460:	e7dc      	b.n	800c41c <_strtod_l+0x224>
 800c462:	2e10      	cmp	r6, #16
 800c464:	bfdc      	itt	le
 800c466:	230a      	movle	r3, #10
 800c468:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c46c:	e7e3      	b.n	800c436 <_strtod_l+0x23e>
 800c46e:	2300      	movs	r3, #0
 800c470:	9305      	str	r3, [sp, #20]
 800c472:	2301      	movs	r3, #1
 800c474:	e780      	b.n	800c378 <_strtod_l+0x180>
 800c476:	f04f 0c00 	mov.w	ip, #0
 800c47a:	1caa      	adds	r2, r5, #2
 800c47c:	9215      	str	r2, [sp, #84]	; 0x54
 800c47e:	78aa      	ldrb	r2, [r5, #2]
 800c480:	e788      	b.n	800c394 <_strtod_l+0x19c>
 800c482:	f04f 0c01 	mov.w	ip, #1
 800c486:	e7f8      	b.n	800c47a <_strtod_l+0x282>
 800c488:	08013414 	.word	0x08013414
 800c48c:	08013404 	.word	0x08013404
 800c490:	7ff00000 	.word	0x7ff00000
 800c494:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c496:	1c51      	adds	r1, r2, #1
 800c498:	9115      	str	r1, [sp, #84]	; 0x54
 800c49a:	7852      	ldrb	r2, [r2, #1]
 800c49c:	2a30      	cmp	r2, #48	; 0x30
 800c49e:	d0f9      	beq.n	800c494 <_strtod_l+0x29c>
 800c4a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c4a4:	2908      	cmp	r1, #8
 800c4a6:	f63f af7a 	bhi.w	800c39e <_strtod_l+0x1a6>
 800c4aa:	3a30      	subs	r2, #48	; 0x30
 800c4ac:	9208      	str	r2, [sp, #32]
 800c4ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c4b0:	920c      	str	r2, [sp, #48]	; 0x30
 800c4b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c4b4:	1c57      	adds	r7, r2, #1
 800c4b6:	9715      	str	r7, [sp, #84]	; 0x54
 800c4b8:	7852      	ldrb	r2, [r2, #1]
 800c4ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c4be:	f1be 0f09 	cmp.w	lr, #9
 800c4c2:	d938      	bls.n	800c536 <_strtod_l+0x33e>
 800c4c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c4c6:	1a7f      	subs	r7, r7, r1
 800c4c8:	2f08      	cmp	r7, #8
 800c4ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c4ce:	dc03      	bgt.n	800c4d8 <_strtod_l+0x2e0>
 800c4d0:	9908      	ldr	r1, [sp, #32]
 800c4d2:	428f      	cmp	r7, r1
 800c4d4:	bfa8      	it	ge
 800c4d6:	460f      	movge	r7, r1
 800c4d8:	f1bc 0f00 	cmp.w	ip, #0
 800c4dc:	d000      	beq.n	800c4e0 <_strtod_l+0x2e8>
 800c4de:	427f      	negs	r7, r7
 800c4e0:	2e00      	cmp	r6, #0
 800c4e2:	d14f      	bne.n	800c584 <_strtod_l+0x38c>
 800c4e4:	9904      	ldr	r1, [sp, #16]
 800c4e6:	4301      	orrs	r1, r0
 800c4e8:	f47f aec1 	bne.w	800c26e <_strtod_l+0x76>
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f47f aedb 	bne.w	800c2a8 <_strtod_l+0xb0>
 800c4f2:	2a69      	cmp	r2, #105	; 0x69
 800c4f4:	d029      	beq.n	800c54a <_strtod_l+0x352>
 800c4f6:	dc26      	bgt.n	800c546 <_strtod_l+0x34e>
 800c4f8:	2a49      	cmp	r2, #73	; 0x49
 800c4fa:	d026      	beq.n	800c54a <_strtod_l+0x352>
 800c4fc:	2a4e      	cmp	r2, #78	; 0x4e
 800c4fe:	f47f aed3 	bne.w	800c2a8 <_strtod_l+0xb0>
 800c502:	499b      	ldr	r1, [pc, #620]	; (800c770 <_strtod_l+0x578>)
 800c504:	a815      	add	r0, sp, #84	; 0x54
 800c506:	f001 fa05 	bl	800d914 <__match>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	f43f aecc 	beq.w	800c2a8 <_strtod_l+0xb0>
 800c510:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	2b28      	cmp	r3, #40	; 0x28
 800c516:	d12f      	bne.n	800c578 <_strtod_l+0x380>
 800c518:	4996      	ldr	r1, [pc, #600]	; (800c774 <_strtod_l+0x57c>)
 800c51a:	aa18      	add	r2, sp, #96	; 0x60
 800c51c:	a815      	add	r0, sp, #84	; 0x54
 800c51e:	f001 fa0d 	bl	800d93c <__hexnan>
 800c522:	2805      	cmp	r0, #5
 800c524:	d128      	bne.n	800c578 <_strtod_l+0x380>
 800c526:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c528:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c52c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c530:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c534:	e69b      	b.n	800c26e <_strtod_l+0x76>
 800c536:	9f08      	ldr	r7, [sp, #32]
 800c538:	210a      	movs	r1, #10
 800c53a:	fb01 2107 	mla	r1, r1, r7, r2
 800c53e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c542:	9208      	str	r2, [sp, #32]
 800c544:	e7b5      	b.n	800c4b2 <_strtod_l+0x2ba>
 800c546:	2a6e      	cmp	r2, #110	; 0x6e
 800c548:	e7d9      	b.n	800c4fe <_strtod_l+0x306>
 800c54a:	498b      	ldr	r1, [pc, #556]	; (800c778 <_strtod_l+0x580>)
 800c54c:	a815      	add	r0, sp, #84	; 0x54
 800c54e:	f001 f9e1 	bl	800d914 <__match>
 800c552:	2800      	cmp	r0, #0
 800c554:	f43f aea8 	beq.w	800c2a8 <_strtod_l+0xb0>
 800c558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c55a:	4988      	ldr	r1, [pc, #544]	; (800c77c <_strtod_l+0x584>)
 800c55c:	3b01      	subs	r3, #1
 800c55e:	a815      	add	r0, sp, #84	; 0x54
 800c560:	9315      	str	r3, [sp, #84]	; 0x54
 800c562:	f001 f9d7 	bl	800d914 <__match>
 800c566:	b910      	cbnz	r0, 800c56e <_strtod_l+0x376>
 800c568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c56a:	3301      	adds	r3, #1
 800c56c:	9315      	str	r3, [sp, #84]	; 0x54
 800c56e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c78c <_strtod_l+0x594>
 800c572:	f04f 0800 	mov.w	r8, #0
 800c576:	e67a      	b.n	800c26e <_strtod_l+0x76>
 800c578:	4881      	ldr	r0, [pc, #516]	; (800c780 <_strtod_l+0x588>)
 800c57a:	f7fe fb11 	bl	800aba0 <nan>
 800c57e:	ec59 8b10 	vmov	r8, r9, d0
 800c582:	e674      	b.n	800c26e <_strtod_l+0x76>
 800c584:	9b05      	ldr	r3, [sp, #20]
 800c586:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c588:	1afb      	subs	r3, r7, r3
 800c58a:	f1bb 0f00 	cmp.w	fp, #0
 800c58e:	bf08      	it	eq
 800c590:	46b3      	moveq	fp, r6
 800c592:	2e10      	cmp	r6, #16
 800c594:	9308      	str	r3, [sp, #32]
 800c596:	4635      	mov	r5, r6
 800c598:	bfa8      	it	ge
 800c59a:	2510      	movge	r5, #16
 800c59c:	f7f3 ffd2 	bl	8000544 <__aeabi_ui2d>
 800c5a0:	2e09      	cmp	r6, #9
 800c5a2:	4680      	mov	r8, r0
 800c5a4:	4689      	mov	r9, r1
 800c5a6:	dd13      	ble.n	800c5d0 <_strtod_l+0x3d8>
 800c5a8:	4b76      	ldr	r3, [pc, #472]	; (800c784 <_strtod_l+0x58c>)
 800c5aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c5ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c5b2:	f7f4 f841 	bl	8000638 <__aeabi_dmul>
 800c5b6:	4680      	mov	r8, r0
 800c5b8:	4650      	mov	r0, sl
 800c5ba:	4689      	mov	r9, r1
 800c5bc:	f7f3 ffc2 	bl	8000544 <__aeabi_ui2d>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	4640      	mov	r0, r8
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	f7f3 fe80 	bl	80002cc <__adddf3>
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	4689      	mov	r9, r1
 800c5d0:	2e0f      	cmp	r6, #15
 800c5d2:	dc38      	bgt.n	800c646 <_strtod_l+0x44e>
 800c5d4:	9b08      	ldr	r3, [sp, #32]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f43f ae49 	beq.w	800c26e <_strtod_l+0x76>
 800c5dc:	dd24      	ble.n	800c628 <_strtod_l+0x430>
 800c5de:	2b16      	cmp	r3, #22
 800c5e0:	dc0b      	bgt.n	800c5fa <_strtod_l+0x402>
 800c5e2:	4968      	ldr	r1, [pc, #416]	; (800c784 <_strtod_l+0x58c>)
 800c5e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ec:	4642      	mov	r2, r8
 800c5ee:	464b      	mov	r3, r9
 800c5f0:	f7f4 f822 	bl	8000638 <__aeabi_dmul>
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	4689      	mov	r9, r1
 800c5f8:	e639      	b.n	800c26e <_strtod_l+0x76>
 800c5fa:	9a08      	ldr	r2, [sp, #32]
 800c5fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c600:	4293      	cmp	r3, r2
 800c602:	db20      	blt.n	800c646 <_strtod_l+0x44e>
 800c604:	4c5f      	ldr	r4, [pc, #380]	; (800c784 <_strtod_l+0x58c>)
 800c606:	f1c6 060f 	rsb	r6, r6, #15
 800c60a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c60e:	4642      	mov	r2, r8
 800c610:	464b      	mov	r3, r9
 800c612:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c616:	f7f4 f80f 	bl	8000638 <__aeabi_dmul>
 800c61a:	9b08      	ldr	r3, [sp, #32]
 800c61c:	1b9e      	subs	r6, r3, r6
 800c61e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c622:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c626:	e7e3      	b.n	800c5f0 <_strtod_l+0x3f8>
 800c628:	9b08      	ldr	r3, [sp, #32]
 800c62a:	3316      	adds	r3, #22
 800c62c:	db0b      	blt.n	800c646 <_strtod_l+0x44e>
 800c62e:	9b05      	ldr	r3, [sp, #20]
 800c630:	1bdf      	subs	r7, r3, r7
 800c632:	4b54      	ldr	r3, [pc, #336]	; (800c784 <_strtod_l+0x58c>)
 800c634:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c63c:	4640      	mov	r0, r8
 800c63e:	4649      	mov	r1, r9
 800c640:	f7f4 f924 	bl	800088c <__aeabi_ddiv>
 800c644:	e7d6      	b.n	800c5f4 <_strtod_l+0x3fc>
 800c646:	9b08      	ldr	r3, [sp, #32]
 800c648:	1b75      	subs	r5, r6, r5
 800c64a:	441d      	add	r5, r3
 800c64c:	2d00      	cmp	r5, #0
 800c64e:	dd70      	ble.n	800c732 <_strtod_l+0x53a>
 800c650:	f015 030f 	ands.w	r3, r5, #15
 800c654:	d00a      	beq.n	800c66c <_strtod_l+0x474>
 800c656:	494b      	ldr	r1, [pc, #300]	; (800c784 <_strtod_l+0x58c>)
 800c658:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c65c:	4642      	mov	r2, r8
 800c65e:	464b      	mov	r3, r9
 800c660:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c664:	f7f3 ffe8 	bl	8000638 <__aeabi_dmul>
 800c668:	4680      	mov	r8, r0
 800c66a:	4689      	mov	r9, r1
 800c66c:	f035 050f 	bics.w	r5, r5, #15
 800c670:	d04d      	beq.n	800c70e <_strtod_l+0x516>
 800c672:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c676:	dd22      	ble.n	800c6be <_strtod_l+0x4c6>
 800c678:	2500      	movs	r5, #0
 800c67a:	46ab      	mov	fp, r5
 800c67c:	9509      	str	r5, [sp, #36]	; 0x24
 800c67e:	9505      	str	r5, [sp, #20]
 800c680:	2322      	movs	r3, #34	; 0x22
 800c682:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c78c <_strtod_l+0x594>
 800c686:	6023      	str	r3, [r4, #0]
 800c688:	f04f 0800 	mov.w	r8, #0
 800c68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f43f aded 	beq.w	800c26e <_strtod_l+0x76>
 800c694:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c696:	4620      	mov	r0, r4
 800c698:	f001 fa3e 	bl	800db18 <_Bfree>
 800c69c:	9905      	ldr	r1, [sp, #20]
 800c69e:	4620      	mov	r0, r4
 800c6a0:	f001 fa3a 	bl	800db18 <_Bfree>
 800c6a4:	4659      	mov	r1, fp
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	f001 fa36 	bl	800db18 <_Bfree>
 800c6ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f001 fa32 	bl	800db18 <_Bfree>
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f001 fa2e 	bl	800db18 <_Bfree>
 800c6bc:	e5d7      	b.n	800c26e <_strtod_l+0x76>
 800c6be:	4b32      	ldr	r3, [pc, #200]	; (800c788 <_strtod_l+0x590>)
 800c6c0:	9304      	str	r3, [sp, #16]
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	112d      	asrs	r5, r5, #4
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	4649      	mov	r1, r9
 800c6ca:	469a      	mov	sl, r3
 800c6cc:	2d01      	cmp	r5, #1
 800c6ce:	dc21      	bgt.n	800c714 <_strtod_l+0x51c>
 800c6d0:	b10b      	cbz	r3, 800c6d6 <_strtod_l+0x4de>
 800c6d2:	4680      	mov	r8, r0
 800c6d4:	4689      	mov	r9, r1
 800c6d6:	492c      	ldr	r1, [pc, #176]	; (800c788 <_strtod_l+0x590>)
 800c6d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c6dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c6e0:	4642      	mov	r2, r8
 800c6e2:	464b      	mov	r3, r9
 800c6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e8:	f7f3 ffa6 	bl	8000638 <__aeabi_dmul>
 800c6ec:	4b27      	ldr	r3, [pc, #156]	; (800c78c <_strtod_l+0x594>)
 800c6ee:	460a      	mov	r2, r1
 800c6f0:	400b      	ands	r3, r1
 800c6f2:	4927      	ldr	r1, [pc, #156]	; (800c790 <_strtod_l+0x598>)
 800c6f4:	428b      	cmp	r3, r1
 800c6f6:	4680      	mov	r8, r0
 800c6f8:	d8be      	bhi.n	800c678 <_strtod_l+0x480>
 800c6fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c6fe:	428b      	cmp	r3, r1
 800c700:	bf86      	itte	hi
 800c702:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c794 <_strtod_l+0x59c>
 800c706:	f04f 38ff 	movhi.w	r8, #4294967295
 800c70a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c70e:	2300      	movs	r3, #0
 800c710:	9304      	str	r3, [sp, #16]
 800c712:	e07b      	b.n	800c80c <_strtod_l+0x614>
 800c714:	07ea      	lsls	r2, r5, #31
 800c716:	d505      	bpl.n	800c724 <_strtod_l+0x52c>
 800c718:	9b04      	ldr	r3, [sp, #16]
 800c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71e:	f7f3 ff8b 	bl	8000638 <__aeabi_dmul>
 800c722:	2301      	movs	r3, #1
 800c724:	9a04      	ldr	r2, [sp, #16]
 800c726:	3208      	adds	r2, #8
 800c728:	f10a 0a01 	add.w	sl, sl, #1
 800c72c:	106d      	asrs	r5, r5, #1
 800c72e:	9204      	str	r2, [sp, #16]
 800c730:	e7cc      	b.n	800c6cc <_strtod_l+0x4d4>
 800c732:	d0ec      	beq.n	800c70e <_strtod_l+0x516>
 800c734:	426d      	negs	r5, r5
 800c736:	f015 020f 	ands.w	r2, r5, #15
 800c73a:	d00a      	beq.n	800c752 <_strtod_l+0x55a>
 800c73c:	4b11      	ldr	r3, [pc, #68]	; (800c784 <_strtod_l+0x58c>)
 800c73e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c742:	4640      	mov	r0, r8
 800c744:	4649      	mov	r1, r9
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	f7f4 f89f 	bl	800088c <__aeabi_ddiv>
 800c74e:	4680      	mov	r8, r0
 800c750:	4689      	mov	r9, r1
 800c752:	112d      	asrs	r5, r5, #4
 800c754:	d0db      	beq.n	800c70e <_strtod_l+0x516>
 800c756:	2d1f      	cmp	r5, #31
 800c758:	dd1e      	ble.n	800c798 <_strtod_l+0x5a0>
 800c75a:	2500      	movs	r5, #0
 800c75c:	46ab      	mov	fp, r5
 800c75e:	9509      	str	r5, [sp, #36]	; 0x24
 800c760:	9505      	str	r5, [sp, #20]
 800c762:	2322      	movs	r3, #34	; 0x22
 800c764:	f04f 0800 	mov.w	r8, #0
 800c768:	f04f 0900 	mov.w	r9, #0
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	e78d      	b.n	800c68c <_strtod_l+0x494>
 800c770:	0801340f 	.word	0x0801340f
 800c774:	08013428 	.word	0x08013428
 800c778:	08013406 	.word	0x08013406
 800c77c:	08013409 	.word	0x08013409
 800c780:	08013403 	.word	0x08013403
 800c784:	080136d8 	.word	0x080136d8
 800c788:	080136b0 	.word	0x080136b0
 800c78c:	7ff00000 	.word	0x7ff00000
 800c790:	7ca00000 	.word	0x7ca00000
 800c794:	7fefffff 	.word	0x7fefffff
 800c798:	f015 0310 	ands.w	r3, r5, #16
 800c79c:	bf18      	it	ne
 800c79e:	236a      	movne	r3, #106	; 0x6a
 800c7a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800cb44 <_strtod_l+0x94c>
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	07ea      	lsls	r2, r5, #31
 800c7ae:	d504      	bpl.n	800c7ba <_strtod_l+0x5c2>
 800c7b0:	e9da 2300 	ldrd	r2, r3, [sl]
 800c7b4:	f7f3 ff40 	bl	8000638 <__aeabi_dmul>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	106d      	asrs	r5, r5, #1
 800c7bc:	f10a 0a08 	add.w	sl, sl, #8
 800c7c0:	d1f4      	bne.n	800c7ac <_strtod_l+0x5b4>
 800c7c2:	b10b      	cbz	r3, 800c7c8 <_strtod_l+0x5d0>
 800c7c4:	4680      	mov	r8, r0
 800c7c6:	4689      	mov	r9, r1
 800c7c8:	9b04      	ldr	r3, [sp, #16]
 800c7ca:	b1bb      	cbz	r3, 800c7fc <_strtod_l+0x604>
 800c7cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c7d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	dd10      	ble.n	800c7fc <_strtod_l+0x604>
 800c7da:	2b1f      	cmp	r3, #31
 800c7dc:	f340 811e 	ble.w	800ca1c <_strtod_l+0x824>
 800c7e0:	2b34      	cmp	r3, #52	; 0x34
 800c7e2:	bfde      	ittt	le
 800c7e4:	f04f 33ff 	movle.w	r3, #4294967295
 800c7e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c7ec:	4093      	lslle	r3, r2
 800c7ee:	f04f 0800 	mov.w	r8, #0
 800c7f2:	bfcc      	ite	gt
 800c7f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c7f8:	ea03 0901 	andle.w	r9, r3, r1
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2300      	movs	r3, #0
 800c800:	4640      	mov	r0, r8
 800c802:	4649      	mov	r1, r9
 800c804:	f7f4 f980 	bl	8000b08 <__aeabi_dcmpeq>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d1a6      	bne.n	800c75a <_strtod_l+0x562>
 800c80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c812:	4633      	mov	r3, r6
 800c814:	465a      	mov	r2, fp
 800c816:	4620      	mov	r0, r4
 800c818:	f001 f9e6 	bl	800dbe8 <__s2b>
 800c81c:	9009      	str	r0, [sp, #36]	; 0x24
 800c81e:	2800      	cmp	r0, #0
 800c820:	f43f af2a 	beq.w	800c678 <_strtod_l+0x480>
 800c824:	9a08      	ldr	r2, [sp, #32]
 800c826:	9b05      	ldr	r3, [sp, #20]
 800c828:	2a00      	cmp	r2, #0
 800c82a:	eba3 0307 	sub.w	r3, r3, r7
 800c82e:	bfa8      	it	ge
 800c830:	2300      	movge	r3, #0
 800c832:	930c      	str	r3, [sp, #48]	; 0x30
 800c834:	2500      	movs	r5, #0
 800c836:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c83a:	9312      	str	r3, [sp, #72]	; 0x48
 800c83c:	46ab      	mov	fp, r5
 800c83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c840:	4620      	mov	r0, r4
 800c842:	6859      	ldr	r1, [r3, #4]
 800c844:	f001 f928 	bl	800da98 <_Balloc>
 800c848:	9005      	str	r0, [sp, #20]
 800c84a:	2800      	cmp	r0, #0
 800c84c:	f43f af18 	beq.w	800c680 <_strtod_l+0x488>
 800c850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c852:	691a      	ldr	r2, [r3, #16]
 800c854:	3202      	adds	r2, #2
 800c856:	f103 010c 	add.w	r1, r3, #12
 800c85a:	0092      	lsls	r2, r2, #2
 800c85c:	300c      	adds	r0, #12
 800c85e:	f000 fd56 	bl	800d30e <memcpy>
 800c862:	ec49 8b10 	vmov	d0, r8, r9
 800c866:	aa18      	add	r2, sp, #96	; 0x60
 800c868:	a917      	add	r1, sp, #92	; 0x5c
 800c86a:	4620      	mov	r0, r4
 800c86c:	f001 fcf0 	bl	800e250 <__d2b>
 800c870:	ec49 8b18 	vmov	d8, r8, r9
 800c874:	9016      	str	r0, [sp, #88]	; 0x58
 800c876:	2800      	cmp	r0, #0
 800c878:	f43f af02 	beq.w	800c680 <_strtod_l+0x488>
 800c87c:	2101      	movs	r1, #1
 800c87e:	4620      	mov	r0, r4
 800c880:	f001 fa4a 	bl	800dd18 <__i2b>
 800c884:	4683      	mov	fp, r0
 800c886:	2800      	cmp	r0, #0
 800c888:	f43f aefa 	beq.w	800c680 <_strtod_l+0x488>
 800c88c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c88e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c890:	2e00      	cmp	r6, #0
 800c892:	bfab      	itete	ge
 800c894:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c896:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c898:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c89a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c89e:	bfac      	ite	ge
 800c8a0:	eb06 0a03 	addge.w	sl, r6, r3
 800c8a4:	1b9f      	sublt	r7, r3, r6
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	1af6      	subs	r6, r6, r3
 800c8aa:	4416      	add	r6, r2
 800c8ac:	4ba0      	ldr	r3, [pc, #640]	; (800cb30 <_strtod_l+0x938>)
 800c8ae:	3e01      	subs	r6, #1
 800c8b0:	429e      	cmp	r6, r3
 800c8b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c8b6:	f280 80c4 	bge.w	800ca42 <_strtod_l+0x84a>
 800c8ba:	1b9b      	subs	r3, r3, r6
 800c8bc:	2b1f      	cmp	r3, #31
 800c8be:	eba2 0203 	sub.w	r2, r2, r3
 800c8c2:	f04f 0101 	mov.w	r1, #1
 800c8c6:	f300 80b0 	bgt.w	800ca2a <_strtod_l+0x832>
 800c8ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c8ce:	930e      	str	r3, [sp, #56]	; 0x38
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	930d      	str	r3, [sp, #52]	; 0x34
 800c8d4:	eb0a 0602 	add.w	r6, sl, r2
 800c8d8:	9b04      	ldr	r3, [sp, #16]
 800c8da:	45b2      	cmp	sl, r6
 800c8dc:	4417      	add	r7, r2
 800c8de:	441f      	add	r7, r3
 800c8e0:	4653      	mov	r3, sl
 800c8e2:	bfa8      	it	ge
 800c8e4:	4633      	movge	r3, r6
 800c8e6:	42bb      	cmp	r3, r7
 800c8e8:	bfa8      	it	ge
 800c8ea:	463b      	movge	r3, r7
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	bfc2      	ittt	gt
 800c8f0:	1af6      	subgt	r6, r6, r3
 800c8f2:	1aff      	subgt	r7, r7, r3
 800c8f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c8f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	dd17      	ble.n	800c92e <_strtod_l+0x736>
 800c8fe:	4659      	mov	r1, fp
 800c900:	461a      	mov	r2, r3
 800c902:	4620      	mov	r0, r4
 800c904:	f001 fac8 	bl	800de98 <__pow5mult>
 800c908:	4683      	mov	fp, r0
 800c90a:	2800      	cmp	r0, #0
 800c90c:	f43f aeb8 	beq.w	800c680 <_strtod_l+0x488>
 800c910:	4601      	mov	r1, r0
 800c912:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c914:	4620      	mov	r0, r4
 800c916:	f001 fa15 	bl	800dd44 <__multiply>
 800c91a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c91c:	2800      	cmp	r0, #0
 800c91e:	f43f aeaf 	beq.w	800c680 <_strtod_l+0x488>
 800c922:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c924:	4620      	mov	r0, r4
 800c926:	f001 f8f7 	bl	800db18 <_Bfree>
 800c92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c92c:	9316      	str	r3, [sp, #88]	; 0x58
 800c92e:	2e00      	cmp	r6, #0
 800c930:	f300 808c 	bgt.w	800ca4c <_strtod_l+0x854>
 800c934:	9b08      	ldr	r3, [sp, #32]
 800c936:	2b00      	cmp	r3, #0
 800c938:	dd08      	ble.n	800c94c <_strtod_l+0x754>
 800c93a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c93c:	9905      	ldr	r1, [sp, #20]
 800c93e:	4620      	mov	r0, r4
 800c940:	f001 faaa 	bl	800de98 <__pow5mult>
 800c944:	9005      	str	r0, [sp, #20]
 800c946:	2800      	cmp	r0, #0
 800c948:	f43f ae9a 	beq.w	800c680 <_strtod_l+0x488>
 800c94c:	2f00      	cmp	r7, #0
 800c94e:	dd08      	ble.n	800c962 <_strtod_l+0x76a>
 800c950:	9905      	ldr	r1, [sp, #20]
 800c952:	463a      	mov	r2, r7
 800c954:	4620      	mov	r0, r4
 800c956:	f001 faf9 	bl	800df4c <__lshift>
 800c95a:	9005      	str	r0, [sp, #20]
 800c95c:	2800      	cmp	r0, #0
 800c95e:	f43f ae8f 	beq.w	800c680 <_strtod_l+0x488>
 800c962:	f1ba 0f00 	cmp.w	sl, #0
 800c966:	dd08      	ble.n	800c97a <_strtod_l+0x782>
 800c968:	4659      	mov	r1, fp
 800c96a:	4652      	mov	r2, sl
 800c96c:	4620      	mov	r0, r4
 800c96e:	f001 faed 	bl	800df4c <__lshift>
 800c972:	4683      	mov	fp, r0
 800c974:	2800      	cmp	r0, #0
 800c976:	f43f ae83 	beq.w	800c680 <_strtod_l+0x488>
 800c97a:	9a05      	ldr	r2, [sp, #20]
 800c97c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c97e:	4620      	mov	r0, r4
 800c980:	f001 fb6c 	bl	800e05c <__mdiff>
 800c984:	4605      	mov	r5, r0
 800c986:	2800      	cmp	r0, #0
 800c988:	f43f ae7a 	beq.w	800c680 <_strtod_l+0x488>
 800c98c:	68c3      	ldr	r3, [r0, #12]
 800c98e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c990:	2300      	movs	r3, #0
 800c992:	60c3      	str	r3, [r0, #12]
 800c994:	4659      	mov	r1, fp
 800c996:	f001 fb45 	bl	800e024 <__mcmp>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	da60      	bge.n	800ca60 <_strtod_l+0x868>
 800c99e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9a0:	ea53 0308 	orrs.w	r3, r3, r8
 800c9a4:	f040 8084 	bne.w	800cab0 <_strtod_l+0x8b8>
 800c9a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d17f      	bne.n	800cab0 <_strtod_l+0x8b8>
 800c9b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9b4:	0d1b      	lsrs	r3, r3, #20
 800c9b6:	051b      	lsls	r3, r3, #20
 800c9b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c9bc:	d978      	bls.n	800cab0 <_strtod_l+0x8b8>
 800c9be:	696b      	ldr	r3, [r5, #20]
 800c9c0:	b913      	cbnz	r3, 800c9c8 <_strtod_l+0x7d0>
 800c9c2:	692b      	ldr	r3, [r5, #16]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	dd73      	ble.n	800cab0 <_strtod_l+0x8b8>
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f001 fabd 	bl	800df4c <__lshift>
 800c9d2:	4659      	mov	r1, fp
 800c9d4:	4605      	mov	r5, r0
 800c9d6:	f001 fb25 	bl	800e024 <__mcmp>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	dd68      	ble.n	800cab0 <_strtod_l+0x8b8>
 800c9de:	9904      	ldr	r1, [sp, #16]
 800c9e0:	4a54      	ldr	r2, [pc, #336]	; (800cb34 <_strtod_l+0x93c>)
 800c9e2:	464b      	mov	r3, r9
 800c9e4:	2900      	cmp	r1, #0
 800c9e6:	f000 8084 	beq.w	800caf2 <_strtod_l+0x8fa>
 800c9ea:	ea02 0109 	and.w	r1, r2, r9
 800c9ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c9f2:	dc7e      	bgt.n	800caf2 <_strtod_l+0x8fa>
 800c9f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c9f8:	f77f aeb3 	ble.w	800c762 <_strtod_l+0x56a>
 800c9fc:	4b4e      	ldr	r3, [pc, #312]	; (800cb38 <_strtod_l+0x940>)
 800c9fe:	4640      	mov	r0, r8
 800ca00:	4649      	mov	r1, r9
 800ca02:	2200      	movs	r2, #0
 800ca04:	f7f3 fe18 	bl	8000638 <__aeabi_dmul>
 800ca08:	4b4a      	ldr	r3, [pc, #296]	; (800cb34 <_strtod_l+0x93c>)
 800ca0a:	400b      	ands	r3, r1
 800ca0c:	4680      	mov	r8, r0
 800ca0e:	4689      	mov	r9, r1
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f47f ae3f 	bne.w	800c694 <_strtod_l+0x49c>
 800ca16:	2322      	movs	r3, #34	; 0x22
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	e63b      	b.n	800c694 <_strtod_l+0x49c>
 800ca1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca20:	fa02 f303 	lsl.w	r3, r2, r3
 800ca24:	ea03 0808 	and.w	r8, r3, r8
 800ca28:	e6e8      	b.n	800c7fc <_strtod_l+0x604>
 800ca2a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ca2e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ca32:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ca36:	36e2      	adds	r6, #226	; 0xe2
 800ca38:	fa01 f306 	lsl.w	r3, r1, r6
 800ca3c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ca40:	e748      	b.n	800c8d4 <_strtod_l+0x6dc>
 800ca42:	2100      	movs	r1, #0
 800ca44:	2301      	movs	r3, #1
 800ca46:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ca4a:	e743      	b.n	800c8d4 <_strtod_l+0x6dc>
 800ca4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ca4e:	4632      	mov	r2, r6
 800ca50:	4620      	mov	r0, r4
 800ca52:	f001 fa7b 	bl	800df4c <__lshift>
 800ca56:	9016      	str	r0, [sp, #88]	; 0x58
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	f47f af6b 	bne.w	800c934 <_strtod_l+0x73c>
 800ca5e:	e60f      	b.n	800c680 <_strtod_l+0x488>
 800ca60:	46ca      	mov	sl, r9
 800ca62:	d171      	bne.n	800cb48 <_strtod_l+0x950>
 800ca64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca6a:	b352      	cbz	r2, 800cac2 <_strtod_l+0x8ca>
 800ca6c:	4a33      	ldr	r2, [pc, #204]	; (800cb3c <_strtod_l+0x944>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d12a      	bne.n	800cac8 <_strtod_l+0x8d0>
 800ca72:	9b04      	ldr	r3, [sp, #16]
 800ca74:	4641      	mov	r1, r8
 800ca76:	b1fb      	cbz	r3, 800cab8 <_strtod_l+0x8c0>
 800ca78:	4b2e      	ldr	r3, [pc, #184]	; (800cb34 <_strtod_l+0x93c>)
 800ca7a:	ea09 0303 	and.w	r3, r9, r3
 800ca7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca82:	f04f 32ff 	mov.w	r2, #4294967295
 800ca86:	d81a      	bhi.n	800cabe <_strtod_l+0x8c6>
 800ca88:	0d1b      	lsrs	r3, r3, #20
 800ca8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ca8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca92:	4299      	cmp	r1, r3
 800ca94:	d118      	bne.n	800cac8 <_strtod_l+0x8d0>
 800ca96:	4b2a      	ldr	r3, [pc, #168]	; (800cb40 <_strtod_l+0x948>)
 800ca98:	459a      	cmp	sl, r3
 800ca9a:	d102      	bne.n	800caa2 <_strtod_l+0x8aa>
 800ca9c:	3101      	adds	r1, #1
 800ca9e:	f43f adef 	beq.w	800c680 <_strtod_l+0x488>
 800caa2:	4b24      	ldr	r3, [pc, #144]	; (800cb34 <_strtod_l+0x93c>)
 800caa4:	ea0a 0303 	and.w	r3, sl, r3
 800caa8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800caac:	f04f 0800 	mov.w	r8, #0
 800cab0:	9b04      	ldr	r3, [sp, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1a2      	bne.n	800c9fc <_strtod_l+0x804>
 800cab6:	e5ed      	b.n	800c694 <_strtod_l+0x49c>
 800cab8:	f04f 33ff 	mov.w	r3, #4294967295
 800cabc:	e7e9      	b.n	800ca92 <_strtod_l+0x89a>
 800cabe:	4613      	mov	r3, r2
 800cac0:	e7e7      	b.n	800ca92 <_strtod_l+0x89a>
 800cac2:	ea53 0308 	orrs.w	r3, r3, r8
 800cac6:	d08a      	beq.n	800c9de <_strtod_l+0x7e6>
 800cac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caca:	b1e3      	cbz	r3, 800cb06 <_strtod_l+0x90e>
 800cacc:	ea13 0f0a 	tst.w	r3, sl
 800cad0:	d0ee      	beq.n	800cab0 <_strtod_l+0x8b8>
 800cad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cad4:	9a04      	ldr	r2, [sp, #16]
 800cad6:	4640      	mov	r0, r8
 800cad8:	4649      	mov	r1, r9
 800cada:	b1c3      	cbz	r3, 800cb0e <_strtod_l+0x916>
 800cadc:	f7ff fb6d 	bl	800c1ba <sulp>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	ec51 0b18 	vmov	r0, r1, d8
 800cae8:	f7f3 fbf0 	bl	80002cc <__adddf3>
 800caec:	4680      	mov	r8, r0
 800caee:	4689      	mov	r9, r1
 800caf0:	e7de      	b.n	800cab0 <_strtod_l+0x8b8>
 800caf2:	4013      	ands	r3, r2
 800caf4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800caf8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cafc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cb00:	f04f 38ff 	mov.w	r8, #4294967295
 800cb04:	e7d4      	b.n	800cab0 <_strtod_l+0x8b8>
 800cb06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb08:	ea13 0f08 	tst.w	r3, r8
 800cb0c:	e7e0      	b.n	800cad0 <_strtod_l+0x8d8>
 800cb0e:	f7ff fb54 	bl	800c1ba <sulp>
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	ec51 0b18 	vmov	r0, r1, d8
 800cb1a:	f7f3 fbd5 	bl	80002c8 <__aeabi_dsub>
 800cb1e:	2200      	movs	r2, #0
 800cb20:	2300      	movs	r3, #0
 800cb22:	4680      	mov	r8, r0
 800cb24:	4689      	mov	r9, r1
 800cb26:	f7f3 ffef 	bl	8000b08 <__aeabi_dcmpeq>
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	d0c0      	beq.n	800cab0 <_strtod_l+0x8b8>
 800cb2e:	e618      	b.n	800c762 <_strtod_l+0x56a>
 800cb30:	fffffc02 	.word	0xfffffc02
 800cb34:	7ff00000 	.word	0x7ff00000
 800cb38:	39500000 	.word	0x39500000
 800cb3c:	000fffff 	.word	0x000fffff
 800cb40:	7fefffff 	.word	0x7fefffff
 800cb44:	08013440 	.word	0x08013440
 800cb48:	4659      	mov	r1, fp
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f001 fbda 	bl	800e304 <__ratio>
 800cb50:	ec57 6b10 	vmov	r6, r7, d0
 800cb54:	ee10 0a10 	vmov	r0, s0
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb5e:	4639      	mov	r1, r7
 800cb60:	f7f3 ffe6 	bl	8000b30 <__aeabi_dcmple>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d071      	beq.n	800cc4c <_strtod_l+0xa54>
 800cb68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d17c      	bne.n	800cc68 <_strtod_l+0xa70>
 800cb6e:	f1b8 0f00 	cmp.w	r8, #0
 800cb72:	d15a      	bne.n	800cc2a <_strtod_l+0xa32>
 800cb74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d15d      	bne.n	800cc38 <_strtod_l+0xa40>
 800cb7c:	4b90      	ldr	r3, [pc, #576]	; (800cdc0 <_strtod_l+0xbc8>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	4630      	mov	r0, r6
 800cb82:	4639      	mov	r1, r7
 800cb84:	f7f3 ffca 	bl	8000b1c <__aeabi_dcmplt>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d15c      	bne.n	800cc46 <_strtod_l+0xa4e>
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	4639      	mov	r1, r7
 800cb90:	4b8c      	ldr	r3, [pc, #560]	; (800cdc4 <_strtod_l+0xbcc>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	f7f3 fd50 	bl	8000638 <__aeabi_dmul>
 800cb98:	4606      	mov	r6, r0
 800cb9a:	460f      	mov	r7, r1
 800cb9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cba0:	9606      	str	r6, [sp, #24]
 800cba2:	9307      	str	r3, [sp, #28]
 800cba4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cba8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cbac:	4b86      	ldr	r3, [pc, #536]	; (800cdc8 <_strtod_l+0xbd0>)
 800cbae:	ea0a 0303 	and.w	r3, sl, r3
 800cbb2:	930d      	str	r3, [sp, #52]	; 0x34
 800cbb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbb6:	4b85      	ldr	r3, [pc, #532]	; (800cdcc <_strtod_l+0xbd4>)
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	f040 8090 	bne.w	800ccde <_strtod_l+0xae6>
 800cbbe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800cbc2:	ec49 8b10 	vmov	d0, r8, r9
 800cbc6:	f001 fad3 	bl	800e170 <__ulp>
 800cbca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbce:	ec51 0b10 	vmov	r0, r1, d0
 800cbd2:	f7f3 fd31 	bl	8000638 <__aeabi_dmul>
 800cbd6:	4642      	mov	r2, r8
 800cbd8:	464b      	mov	r3, r9
 800cbda:	f7f3 fb77 	bl	80002cc <__adddf3>
 800cbde:	460b      	mov	r3, r1
 800cbe0:	4979      	ldr	r1, [pc, #484]	; (800cdc8 <_strtod_l+0xbd0>)
 800cbe2:	4a7b      	ldr	r2, [pc, #492]	; (800cdd0 <_strtod_l+0xbd8>)
 800cbe4:	4019      	ands	r1, r3
 800cbe6:	4291      	cmp	r1, r2
 800cbe8:	4680      	mov	r8, r0
 800cbea:	d944      	bls.n	800cc76 <_strtod_l+0xa7e>
 800cbec:	ee18 2a90 	vmov	r2, s17
 800cbf0:	4b78      	ldr	r3, [pc, #480]	; (800cdd4 <_strtod_l+0xbdc>)
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d104      	bne.n	800cc00 <_strtod_l+0xa08>
 800cbf6:	ee18 3a10 	vmov	r3, s16
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	f43f ad40 	beq.w	800c680 <_strtod_l+0x488>
 800cc00:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800cdd4 <_strtod_l+0xbdc>
 800cc04:	f04f 38ff 	mov.w	r8, #4294967295
 800cc08:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f000 ff84 	bl	800db18 <_Bfree>
 800cc10:	9905      	ldr	r1, [sp, #20]
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 ff80 	bl	800db18 <_Bfree>
 800cc18:	4659      	mov	r1, fp
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f000 ff7c 	bl	800db18 <_Bfree>
 800cc20:	4629      	mov	r1, r5
 800cc22:	4620      	mov	r0, r4
 800cc24:	f000 ff78 	bl	800db18 <_Bfree>
 800cc28:	e609      	b.n	800c83e <_strtod_l+0x646>
 800cc2a:	f1b8 0f01 	cmp.w	r8, #1
 800cc2e:	d103      	bne.n	800cc38 <_strtod_l+0xa40>
 800cc30:	f1b9 0f00 	cmp.w	r9, #0
 800cc34:	f43f ad95 	beq.w	800c762 <_strtod_l+0x56a>
 800cc38:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800cd90 <_strtod_l+0xb98>
 800cc3c:	4f60      	ldr	r7, [pc, #384]	; (800cdc0 <_strtod_l+0xbc8>)
 800cc3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc42:	2600      	movs	r6, #0
 800cc44:	e7ae      	b.n	800cba4 <_strtod_l+0x9ac>
 800cc46:	4f5f      	ldr	r7, [pc, #380]	; (800cdc4 <_strtod_l+0xbcc>)
 800cc48:	2600      	movs	r6, #0
 800cc4a:	e7a7      	b.n	800cb9c <_strtod_l+0x9a4>
 800cc4c:	4b5d      	ldr	r3, [pc, #372]	; (800cdc4 <_strtod_l+0xbcc>)
 800cc4e:	4630      	mov	r0, r6
 800cc50:	4639      	mov	r1, r7
 800cc52:	2200      	movs	r2, #0
 800cc54:	f7f3 fcf0 	bl	8000638 <__aeabi_dmul>
 800cc58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	460f      	mov	r7, r1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d09c      	beq.n	800cb9c <_strtod_l+0x9a4>
 800cc62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc66:	e79d      	b.n	800cba4 <_strtod_l+0x9ac>
 800cc68:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800cd98 <_strtod_l+0xba0>
 800cc6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc70:	ec57 6b17 	vmov	r6, r7, d7
 800cc74:	e796      	b.n	800cba4 <_strtod_l+0x9ac>
 800cc76:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cc7a:	9b04      	ldr	r3, [sp, #16]
 800cc7c:	46ca      	mov	sl, r9
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1c2      	bne.n	800cc08 <_strtod_l+0xa10>
 800cc82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc88:	0d1b      	lsrs	r3, r3, #20
 800cc8a:	051b      	lsls	r3, r3, #20
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d1bb      	bne.n	800cc08 <_strtod_l+0xa10>
 800cc90:	4630      	mov	r0, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	f7f4 f880 	bl	8000d98 <__aeabi_d2lz>
 800cc98:	f7f3 fca0 	bl	80005dc <__aeabi_l2d>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4630      	mov	r0, r6
 800cca2:	4639      	mov	r1, r7
 800cca4:	f7f3 fb10 	bl	80002c8 <__aeabi_dsub>
 800cca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccae:	ea43 0308 	orr.w	r3, r3, r8
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	460f      	mov	r7, r1
 800ccb8:	d054      	beq.n	800cd64 <_strtod_l+0xb6c>
 800ccba:	a339      	add	r3, pc, #228	; (adr r3, 800cda0 <_strtod_l+0xba8>)
 800ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc0:	f7f3 ff2c 	bl	8000b1c <__aeabi_dcmplt>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	f47f ace5 	bne.w	800c694 <_strtod_l+0x49c>
 800ccca:	a337      	add	r3, pc, #220	; (adr r3, 800cda8 <_strtod_l+0xbb0>)
 800cccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	4639      	mov	r1, r7
 800ccd4:	f7f3 ff40 	bl	8000b58 <__aeabi_dcmpgt>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d095      	beq.n	800cc08 <_strtod_l+0xa10>
 800ccdc:	e4da      	b.n	800c694 <_strtod_l+0x49c>
 800ccde:	9b04      	ldr	r3, [sp, #16]
 800cce0:	b333      	cbz	r3, 800cd30 <_strtod_l+0xb38>
 800cce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cce4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cce8:	d822      	bhi.n	800cd30 <_strtod_l+0xb38>
 800ccea:	a331      	add	r3, pc, #196	; (adr r3, 800cdb0 <_strtod_l+0xbb8>)
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	f7f3 ff1c 	bl	8000b30 <__aeabi_dcmple>
 800ccf8:	b1a0      	cbz	r0, 800cd24 <_strtod_l+0xb2c>
 800ccfa:	4639      	mov	r1, r7
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	f7f3 ff73 	bl	8000be8 <__aeabi_d2uiz>
 800cd02:	2801      	cmp	r0, #1
 800cd04:	bf38      	it	cc
 800cd06:	2001      	movcc	r0, #1
 800cd08:	f7f3 fc1c 	bl	8000544 <__aeabi_ui2d>
 800cd0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd0e:	4606      	mov	r6, r0
 800cd10:	460f      	mov	r7, r1
 800cd12:	bb23      	cbnz	r3, 800cd5e <_strtod_l+0xb66>
 800cd14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd18:	9010      	str	r0, [sp, #64]	; 0x40
 800cd1a:	9311      	str	r3, [sp, #68]	; 0x44
 800cd1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cd24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cd2c:	1a9b      	subs	r3, r3, r2
 800cd2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cd34:	eeb0 0a48 	vmov.f32	s0, s16
 800cd38:	eef0 0a68 	vmov.f32	s1, s17
 800cd3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cd40:	f001 fa16 	bl	800e170 <__ulp>
 800cd44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cd48:	ec53 2b10 	vmov	r2, r3, d0
 800cd4c:	f7f3 fc74 	bl	8000638 <__aeabi_dmul>
 800cd50:	ec53 2b18 	vmov	r2, r3, d8
 800cd54:	f7f3 faba 	bl	80002cc <__adddf3>
 800cd58:	4680      	mov	r8, r0
 800cd5a:	4689      	mov	r9, r1
 800cd5c:	e78d      	b.n	800cc7a <_strtod_l+0xa82>
 800cd5e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cd62:	e7db      	b.n	800cd1c <_strtod_l+0xb24>
 800cd64:	a314      	add	r3, pc, #80	; (adr r3, 800cdb8 <_strtod_l+0xbc0>)
 800cd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6a:	f7f3 fed7 	bl	8000b1c <__aeabi_dcmplt>
 800cd6e:	e7b3      	b.n	800ccd8 <_strtod_l+0xae0>
 800cd70:	2300      	movs	r3, #0
 800cd72:	930a      	str	r3, [sp, #40]	; 0x28
 800cd74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cd76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd78:	6013      	str	r3, [r2, #0]
 800cd7a:	f7ff ba7c 	b.w	800c276 <_strtod_l+0x7e>
 800cd7e:	2a65      	cmp	r2, #101	; 0x65
 800cd80:	f43f ab75 	beq.w	800c46e <_strtod_l+0x276>
 800cd84:	2a45      	cmp	r2, #69	; 0x45
 800cd86:	f43f ab72 	beq.w	800c46e <_strtod_l+0x276>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	f7ff bbaa 	b.w	800c4e4 <_strtod_l+0x2ec>
 800cd90:	00000000 	.word	0x00000000
 800cd94:	bff00000 	.word	0xbff00000
 800cd98:	00000000 	.word	0x00000000
 800cd9c:	3ff00000 	.word	0x3ff00000
 800cda0:	94a03595 	.word	0x94a03595
 800cda4:	3fdfffff 	.word	0x3fdfffff
 800cda8:	35afe535 	.word	0x35afe535
 800cdac:	3fe00000 	.word	0x3fe00000
 800cdb0:	ffc00000 	.word	0xffc00000
 800cdb4:	41dfffff 	.word	0x41dfffff
 800cdb8:	94a03595 	.word	0x94a03595
 800cdbc:	3fcfffff 	.word	0x3fcfffff
 800cdc0:	3ff00000 	.word	0x3ff00000
 800cdc4:	3fe00000 	.word	0x3fe00000
 800cdc8:	7ff00000 	.word	0x7ff00000
 800cdcc:	7fe00000 	.word	0x7fe00000
 800cdd0:	7c9fffff 	.word	0x7c9fffff
 800cdd4:	7fefffff 	.word	0x7fefffff

0800cdd8 <strtod>:
 800cdd8:	460a      	mov	r2, r1
 800cdda:	4601      	mov	r1, r0
 800cddc:	4802      	ldr	r0, [pc, #8]	; (800cde8 <strtod+0x10>)
 800cdde:	4b03      	ldr	r3, [pc, #12]	; (800cdec <strtod+0x14>)
 800cde0:	6800      	ldr	r0, [r0, #0]
 800cde2:	f7ff ba09 	b.w	800c1f8 <_strtod_l>
 800cde6:	bf00      	nop
 800cde8:	200006c4 	.word	0x200006c4
 800cdec:	2000050c 	.word	0x2000050c

0800cdf0 <std>:
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	e9c0 3300 	strd	r3, r3, [r0]
 800cdfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdfe:	6083      	str	r3, [r0, #8]
 800ce00:	8181      	strh	r1, [r0, #12]
 800ce02:	6643      	str	r3, [r0, #100]	; 0x64
 800ce04:	81c2      	strh	r2, [r0, #14]
 800ce06:	6183      	str	r3, [r0, #24]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	2208      	movs	r2, #8
 800ce0c:	305c      	adds	r0, #92	; 0x5c
 800ce0e:	f000 f941 	bl	800d094 <memset>
 800ce12:	4b0d      	ldr	r3, [pc, #52]	; (800ce48 <std+0x58>)
 800ce14:	6263      	str	r3, [r4, #36]	; 0x24
 800ce16:	4b0d      	ldr	r3, [pc, #52]	; (800ce4c <std+0x5c>)
 800ce18:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce1a:	4b0d      	ldr	r3, [pc, #52]	; (800ce50 <std+0x60>)
 800ce1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce1e:	4b0d      	ldr	r3, [pc, #52]	; (800ce54 <std+0x64>)
 800ce20:	6323      	str	r3, [r4, #48]	; 0x30
 800ce22:	4b0d      	ldr	r3, [pc, #52]	; (800ce58 <std+0x68>)
 800ce24:	6224      	str	r4, [r4, #32]
 800ce26:	429c      	cmp	r4, r3
 800ce28:	d006      	beq.n	800ce38 <std+0x48>
 800ce2a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ce2e:	4294      	cmp	r4, r2
 800ce30:	d002      	beq.n	800ce38 <std+0x48>
 800ce32:	33d0      	adds	r3, #208	; 0xd0
 800ce34:	429c      	cmp	r4, r3
 800ce36:	d105      	bne.n	800ce44 <std+0x54>
 800ce38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce40:	f000 ba62 	b.w	800d308 <__retarget_lock_init_recursive>
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	bf00      	nop
 800ce48:	0800cf99 	.word	0x0800cf99
 800ce4c:	0800cfbb 	.word	0x0800cfbb
 800ce50:	0800cff3 	.word	0x0800cff3
 800ce54:	0800d017 	.word	0x0800d017
 800ce58:	20000a00 	.word	0x20000a00

0800ce5c <stdio_exit_handler>:
 800ce5c:	4a02      	ldr	r2, [pc, #8]	; (800ce68 <stdio_exit_handler+0xc>)
 800ce5e:	4903      	ldr	r1, [pc, #12]	; (800ce6c <stdio_exit_handler+0x10>)
 800ce60:	4803      	ldr	r0, [pc, #12]	; (800ce70 <stdio_exit_handler+0x14>)
 800ce62:	f000 b87b 	b.w	800cf5c <_fwalk_sglue>
 800ce66:	bf00      	nop
 800ce68:	20000500 	.word	0x20000500
 800ce6c:	0800ed81 	.word	0x0800ed81
 800ce70:	20000678 	.word	0x20000678

0800ce74 <cleanup_stdio>:
 800ce74:	6841      	ldr	r1, [r0, #4]
 800ce76:	4b0c      	ldr	r3, [pc, #48]	; (800cea8 <cleanup_stdio+0x34>)
 800ce78:	4299      	cmp	r1, r3
 800ce7a:	b510      	push	{r4, lr}
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	d001      	beq.n	800ce84 <cleanup_stdio+0x10>
 800ce80:	f001 ff7e 	bl	800ed80 <_fflush_r>
 800ce84:	68a1      	ldr	r1, [r4, #8]
 800ce86:	4b09      	ldr	r3, [pc, #36]	; (800ceac <cleanup_stdio+0x38>)
 800ce88:	4299      	cmp	r1, r3
 800ce8a:	d002      	beq.n	800ce92 <cleanup_stdio+0x1e>
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f001 ff77 	bl	800ed80 <_fflush_r>
 800ce92:	68e1      	ldr	r1, [r4, #12]
 800ce94:	4b06      	ldr	r3, [pc, #24]	; (800ceb0 <cleanup_stdio+0x3c>)
 800ce96:	4299      	cmp	r1, r3
 800ce98:	d004      	beq.n	800cea4 <cleanup_stdio+0x30>
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cea0:	f001 bf6e 	b.w	800ed80 <_fflush_r>
 800cea4:	bd10      	pop	{r4, pc}
 800cea6:	bf00      	nop
 800cea8:	20000a00 	.word	0x20000a00
 800ceac:	20000a68 	.word	0x20000a68
 800ceb0:	20000ad0 	.word	0x20000ad0

0800ceb4 <global_stdio_init.part.0>:
 800ceb4:	b510      	push	{r4, lr}
 800ceb6:	4b0b      	ldr	r3, [pc, #44]	; (800cee4 <global_stdio_init.part.0+0x30>)
 800ceb8:	4c0b      	ldr	r4, [pc, #44]	; (800cee8 <global_stdio_init.part.0+0x34>)
 800ceba:	4a0c      	ldr	r2, [pc, #48]	; (800ceec <global_stdio_init.part.0+0x38>)
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	4620      	mov	r0, r4
 800cec0:	2200      	movs	r2, #0
 800cec2:	2104      	movs	r1, #4
 800cec4:	f7ff ff94 	bl	800cdf0 <std>
 800cec8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cecc:	2201      	movs	r2, #1
 800cece:	2109      	movs	r1, #9
 800ced0:	f7ff ff8e 	bl	800cdf0 <std>
 800ced4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ced8:	2202      	movs	r2, #2
 800ceda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cede:	2112      	movs	r1, #18
 800cee0:	f7ff bf86 	b.w	800cdf0 <std>
 800cee4:	20000b38 	.word	0x20000b38
 800cee8:	20000a00 	.word	0x20000a00
 800ceec:	0800ce5d 	.word	0x0800ce5d

0800cef0 <__sfp_lock_acquire>:
 800cef0:	4801      	ldr	r0, [pc, #4]	; (800cef8 <__sfp_lock_acquire+0x8>)
 800cef2:	f000 ba0a 	b.w	800d30a <__retarget_lock_acquire_recursive>
 800cef6:	bf00      	nop
 800cef8:	20000b41 	.word	0x20000b41

0800cefc <__sfp_lock_release>:
 800cefc:	4801      	ldr	r0, [pc, #4]	; (800cf04 <__sfp_lock_release+0x8>)
 800cefe:	f000 ba05 	b.w	800d30c <__retarget_lock_release_recursive>
 800cf02:	bf00      	nop
 800cf04:	20000b41 	.word	0x20000b41

0800cf08 <__sinit>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	f7ff fff0 	bl	800cef0 <__sfp_lock_acquire>
 800cf10:	6a23      	ldr	r3, [r4, #32]
 800cf12:	b11b      	cbz	r3, 800cf1c <__sinit+0x14>
 800cf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf18:	f7ff bff0 	b.w	800cefc <__sfp_lock_release>
 800cf1c:	4b04      	ldr	r3, [pc, #16]	; (800cf30 <__sinit+0x28>)
 800cf1e:	6223      	str	r3, [r4, #32]
 800cf20:	4b04      	ldr	r3, [pc, #16]	; (800cf34 <__sinit+0x2c>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1f5      	bne.n	800cf14 <__sinit+0xc>
 800cf28:	f7ff ffc4 	bl	800ceb4 <global_stdio_init.part.0>
 800cf2c:	e7f2      	b.n	800cf14 <__sinit+0xc>
 800cf2e:	bf00      	nop
 800cf30:	0800ce75 	.word	0x0800ce75
 800cf34:	20000b38 	.word	0x20000b38

0800cf38 <fiprintf>:
 800cf38:	b40e      	push	{r1, r2, r3}
 800cf3a:	b503      	push	{r0, r1, lr}
 800cf3c:	4601      	mov	r1, r0
 800cf3e:	ab03      	add	r3, sp, #12
 800cf40:	4805      	ldr	r0, [pc, #20]	; (800cf58 <fiprintf+0x20>)
 800cf42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf46:	6800      	ldr	r0, [r0, #0]
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	f001 fbe9 	bl	800e720 <_vfiprintf_r>
 800cf4e:	b002      	add	sp, #8
 800cf50:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf54:	b003      	add	sp, #12
 800cf56:	4770      	bx	lr
 800cf58:	200006c4 	.word	0x200006c4

0800cf5c <_fwalk_sglue>:
 800cf5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf60:	4607      	mov	r7, r0
 800cf62:	4688      	mov	r8, r1
 800cf64:	4614      	mov	r4, r2
 800cf66:	2600      	movs	r6, #0
 800cf68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf6c:	f1b9 0901 	subs.w	r9, r9, #1
 800cf70:	d505      	bpl.n	800cf7e <_fwalk_sglue+0x22>
 800cf72:	6824      	ldr	r4, [r4, #0]
 800cf74:	2c00      	cmp	r4, #0
 800cf76:	d1f7      	bne.n	800cf68 <_fwalk_sglue+0xc>
 800cf78:	4630      	mov	r0, r6
 800cf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf7e:	89ab      	ldrh	r3, [r5, #12]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d907      	bls.n	800cf94 <_fwalk_sglue+0x38>
 800cf84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	d003      	beq.n	800cf94 <_fwalk_sglue+0x38>
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	4638      	mov	r0, r7
 800cf90:	47c0      	blx	r8
 800cf92:	4306      	orrs	r6, r0
 800cf94:	3568      	adds	r5, #104	; 0x68
 800cf96:	e7e9      	b.n	800cf6c <_fwalk_sglue+0x10>

0800cf98 <__sread>:
 800cf98:	b510      	push	{r4, lr}
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa0:	f000 f940 	bl	800d224 <_read_r>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	bfab      	itete	ge
 800cfa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfaa:	89a3      	ldrhlt	r3, [r4, #12]
 800cfac:	181b      	addge	r3, r3, r0
 800cfae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cfb2:	bfac      	ite	ge
 800cfb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cfb6:	81a3      	strhlt	r3, [r4, #12]
 800cfb8:	bd10      	pop	{r4, pc}

0800cfba <__swrite>:
 800cfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfbe:	461f      	mov	r7, r3
 800cfc0:	898b      	ldrh	r3, [r1, #12]
 800cfc2:	05db      	lsls	r3, r3, #23
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	4616      	mov	r6, r2
 800cfca:	d505      	bpl.n	800cfd8 <__swrite+0x1e>
 800cfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f000 f914 	bl	800d200 <_lseek_r>
 800cfd8:	89a3      	ldrh	r3, [r4, #12]
 800cfda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfe2:	81a3      	strh	r3, [r4, #12]
 800cfe4:	4632      	mov	r2, r6
 800cfe6:	463b      	mov	r3, r7
 800cfe8:	4628      	mov	r0, r5
 800cfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfee:	f000 b94f 	b.w	800d290 <_write_r>

0800cff2 <__sseek>:
 800cff2:	b510      	push	{r4, lr}
 800cff4:	460c      	mov	r4, r1
 800cff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cffa:	f000 f901 	bl	800d200 <_lseek_r>
 800cffe:	1c43      	adds	r3, r0, #1
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	bf15      	itete	ne
 800d004:	6560      	strne	r0, [r4, #84]	; 0x54
 800d006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d00a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d00e:	81a3      	strheq	r3, [r4, #12]
 800d010:	bf18      	it	ne
 800d012:	81a3      	strhne	r3, [r4, #12]
 800d014:	bd10      	pop	{r4, pc}

0800d016 <__sclose>:
 800d016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d01a:	f000 b8e1 	b.w	800d1e0 <_close_r>
	...

0800d020 <_vsiprintf_r>:
 800d020:	b500      	push	{lr}
 800d022:	b09b      	sub	sp, #108	; 0x6c
 800d024:	9100      	str	r1, [sp, #0]
 800d026:	9104      	str	r1, [sp, #16]
 800d028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d02c:	9105      	str	r1, [sp, #20]
 800d02e:	9102      	str	r1, [sp, #8]
 800d030:	4905      	ldr	r1, [pc, #20]	; (800d048 <_vsiprintf_r+0x28>)
 800d032:	9103      	str	r1, [sp, #12]
 800d034:	4669      	mov	r1, sp
 800d036:	f001 fa4b 	bl	800e4d0 <_svfiprintf_r>
 800d03a:	9b00      	ldr	r3, [sp, #0]
 800d03c:	2200      	movs	r2, #0
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	b01b      	add	sp, #108	; 0x6c
 800d042:	f85d fb04 	ldr.w	pc, [sp], #4
 800d046:	bf00      	nop
 800d048:	ffff0208 	.word	0xffff0208

0800d04c <vsiprintf>:
 800d04c:	4613      	mov	r3, r2
 800d04e:	460a      	mov	r2, r1
 800d050:	4601      	mov	r1, r0
 800d052:	4802      	ldr	r0, [pc, #8]	; (800d05c <vsiprintf+0x10>)
 800d054:	6800      	ldr	r0, [r0, #0]
 800d056:	f7ff bfe3 	b.w	800d020 <_vsiprintf_r>
 800d05a:	bf00      	nop
 800d05c:	200006c4 	.word	0x200006c4

0800d060 <memmove>:
 800d060:	4288      	cmp	r0, r1
 800d062:	b510      	push	{r4, lr}
 800d064:	eb01 0402 	add.w	r4, r1, r2
 800d068:	d902      	bls.n	800d070 <memmove+0x10>
 800d06a:	4284      	cmp	r4, r0
 800d06c:	4623      	mov	r3, r4
 800d06e:	d807      	bhi.n	800d080 <memmove+0x20>
 800d070:	1e43      	subs	r3, r0, #1
 800d072:	42a1      	cmp	r1, r4
 800d074:	d008      	beq.n	800d088 <memmove+0x28>
 800d076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d07a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d07e:	e7f8      	b.n	800d072 <memmove+0x12>
 800d080:	4402      	add	r2, r0
 800d082:	4601      	mov	r1, r0
 800d084:	428a      	cmp	r2, r1
 800d086:	d100      	bne.n	800d08a <memmove+0x2a>
 800d088:	bd10      	pop	{r4, pc}
 800d08a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d08e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d092:	e7f7      	b.n	800d084 <memmove+0x24>

0800d094 <memset>:
 800d094:	4402      	add	r2, r0
 800d096:	4603      	mov	r3, r0
 800d098:	4293      	cmp	r3, r2
 800d09a:	d100      	bne.n	800d09e <memset+0xa>
 800d09c:	4770      	bx	lr
 800d09e:	f803 1b01 	strb.w	r1, [r3], #1
 800d0a2:	e7f9      	b.n	800d098 <memset+0x4>

0800d0a4 <strncmp>:
 800d0a4:	b510      	push	{r4, lr}
 800d0a6:	b16a      	cbz	r2, 800d0c4 <strncmp+0x20>
 800d0a8:	3901      	subs	r1, #1
 800d0aa:	1884      	adds	r4, r0, r2
 800d0ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d103      	bne.n	800d0c0 <strncmp+0x1c>
 800d0b8:	42a0      	cmp	r0, r4
 800d0ba:	d001      	beq.n	800d0c0 <strncmp+0x1c>
 800d0bc:	2a00      	cmp	r2, #0
 800d0be:	d1f5      	bne.n	800d0ac <strncmp+0x8>
 800d0c0:	1ad0      	subs	r0, r2, r3
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	e7fc      	b.n	800d0c2 <strncmp+0x1e>

0800d0c8 <strtok>:
 800d0c8:	4b16      	ldr	r3, [pc, #88]	; (800d124 <strtok+0x5c>)
 800d0ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0cc:	681e      	ldr	r6, [r3, #0]
 800d0ce:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	b9fc      	cbnz	r4, 800d114 <strtok+0x4c>
 800d0d4:	2050      	movs	r0, #80	; 0x50
 800d0d6:	9101      	str	r1, [sp, #4]
 800d0d8:	f7fe ff84 	bl	800bfe4 <malloc>
 800d0dc:	9901      	ldr	r1, [sp, #4]
 800d0de:	6470      	str	r0, [r6, #68]	; 0x44
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	b920      	cbnz	r0, 800d0ee <strtok+0x26>
 800d0e4:	4b10      	ldr	r3, [pc, #64]	; (800d128 <strtok+0x60>)
 800d0e6:	4811      	ldr	r0, [pc, #68]	; (800d12c <strtok+0x64>)
 800d0e8:	215b      	movs	r1, #91	; 0x5b
 800d0ea:	f7fe ff3f 	bl	800bf6c <__assert_func>
 800d0ee:	e9c0 4400 	strd	r4, r4, [r0]
 800d0f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d0f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d0fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d0fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d102:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d106:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d10a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d10e:	6184      	str	r4, [r0, #24]
 800d110:	7704      	strb	r4, [r0, #28]
 800d112:	6244      	str	r4, [r0, #36]	; 0x24
 800d114:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800d116:	2301      	movs	r3, #1
 800d118:	4628      	mov	r0, r5
 800d11a:	b002      	add	sp, #8
 800d11c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d120:	f000 b806 	b.w	800d130 <__strtok_r>
 800d124:	200006c4 	.word	0x200006c4
 800d128:	08013569 	.word	0x08013569
 800d12c:	08013580 	.word	0x08013580

0800d130 <__strtok_r>:
 800d130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d132:	b908      	cbnz	r0, 800d138 <__strtok_r+0x8>
 800d134:	6810      	ldr	r0, [r2, #0]
 800d136:	b188      	cbz	r0, 800d15c <__strtok_r+0x2c>
 800d138:	4604      	mov	r4, r0
 800d13a:	4620      	mov	r0, r4
 800d13c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d140:	460f      	mov	r7, r1
 800d142:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d146:	b91e      	cbnz	r6, 800d150 <__strtok_r+0x20>
 800d148:	b965      	cbnz	r5, 800d164 <__strtok_r+0x34>
 800d14a:	6015      	str	r5, [r2, #0]
 800d14c:	4628      	mov	r0, r5
 800d14e:	e005      	b.n	800d15c <__strtok_r+0x2c>
 800d150:	42b5      	cmp	r5, r6
 800d152:	d1f6      	bne.n	800d142 <__strtok_r+0x12>
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1f0      	bne.n	800d13a <__strtok_r+0xa>
 800d158:	6014      	str	r4, [r2, #0]
 800d15a:	7003      	strb	r3, [r0, #0]
 800d15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15e:	461c      	mov	r4, r3
 800d160:	e00c      	b.n	800d17c <__strtok_r+0x4c>
 800d162:	b915      	cbnz	r5, 800d16a <__strtok_r+0x3a>
 800d164:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d168:	460e      	mov	r6, r1
 800d16a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d16e:	42ab      	cmp	r3, r5
 800d170:	d1f7      	bne.n	800d162 <__strtok_r+0x32>
 800d172:	2b00      	cmp	r3, #0
 800d174:	d0f3      	beq.n	800d15e <__strtok_r+0x2e>
 800d176:	2300      	movs	r3, #0
 800d178:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d17c:	6014      	str	r4, [r2, #0]
 800d17e:	e7ed      	b.n	800d15c <__strtok_r+0x2c>

0800d180 <_raise_r>:
 800d180:	291f      	cmp	r1, #31
 800d182:	b538      	push	{r3, r4, r5, lr}
 800d184:	4604      	mov	r4, r0
 800d186:	460d      	mov	r5, r1
 800d188:	d904      	bls.n	800d194 <_raise_r+0x14>
 800d18a:	2316      	movs	r3, #22
 800d18c:	6003      	str	r3, [r0, #0]
 800d18e:	f04f 30ff 	mov.w	r0, #4294967295
 800d192:	bd38      	pop	{r3, r4, r5, pc}
 800d194:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d196:	b112      	cbz	r2, 800d19e <_raise_r+0x1e>
 800d198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d19c:	b94b      	cbnz	r3, 800d1b2 <_raise_r+0x32>
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f000 f864 	bl	800d26c <_getpid_r>
 800d1a4:	462a      	mov	r2, r5
 800d1a6:	4601      	mov	r1, r0
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1ae:	f000 b84b 	b.w	800d248 <_kill_r>
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d00a      	beq.n	800d1cc <_raise_r+0x4c>
 800d1b6:	1c59      	adds	r1, r3, #1
 800d1b8:	d103      	bne.n	800d1c2 <_raise_r+0x42>
 800d1ba:	2316      	movs	r3, #22
 800d1bc:	6003      	str	r3, [r0, #0]
 800d1be:	2001      	movs	r0, #1
 800d1c0:	e7e7      	b.n	800d192 <_raise_r+0x12>
 800d1c2:	2400      	movs	r4, #0
 800d1c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	4798      	blx	r3
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	e7e0      	b.n	800d192 <_raise_r+0x12>

0800d1d0 <raise>:
 800d1d0:	4b02      	ldr	r3, [pc, #8]	; (800d1dc <raise+0xc>)
 800d1d2:	4601      	mov	r1, r0
 800d1d4:	6818      	ldr	r0, [r3, #0]
 800d1d6:	f7ff bfd3 	b.w	800d180 <_raise_r>
 800d1da:	bf00      	nop
 800d1dc:	200006c4 	.word	0x200006c4

0800d1e0 <_close_r>:
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	4d06      	ldr	r5, [pc, #24]	; (800d1fc <_close_r+0x1c>)
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	4608      	mov	r0, r1
 800d1ea:	602b      	str	r3, [r5, #0]
 800d1ec:	f7f8 f979 	bl	80054e2 <_close>
 800d1f0:	1c43      	adds	r3, r0, #1
 800d1f2:	d102      	bne.n	800d1fa <_close_r+0x1a>
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	b103      	cbz	r3, 800d1fa <_close_r+0x1a>
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	bd38      	pop	{r3, r4, r5, pc}
 800d1fc:	20000b3c 	.word	0x20000b3c

0800d200 <_lseek_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d07      	ldr	r5, [pc, #28]	; (800d220 <_lseek_r+0x20>)
 800d204:	4604      	mov	r4, r0
 800d206:	4608      	mov	r0, r1
 800d208:	4611      	mov	r1, r2
 800d20a:	2200      	movs	r2, #0
 800d20c:	602a      	str	r2, [r5, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	f7f8 f98e 	bl	8005530 <_lseek>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_lseek_r+0x1e>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_lseek_r+0x1e>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	20000b3c 	.word	0x20000b3c

0800d224 <_read_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d07      	ldr	r5, [pc, #28]	; (800d244 <_read_r+0x20>)
 800d228:	4604      	mov	r4, r0
 800d22a:	4608      	mov	r0, r1
 800d22c:	4611      	mov	r1, r2
 800d22e:	2200      	movs	r2, #0
 800d230:	602a      	str	r2, [r5, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	f7f8 f91c 	bl	8005470 <_read>
 800d238:	1c43      	adds	r3, r0, #1
 800d23a:	d102      	bne.n	800d242 <_read_r+0x1e>
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	b103      	cbz	r3, 800d242 <_read_r+0x1e>
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	20000b3c 	.word	0x20000b3c

0800d248 <_kill_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4d07      	ldr	r5, [pc, #28]	; (800d268 <_kill_r+0x20>)
 800d24c:	2300      	movs	r3, #0
 800d24e:	4604      	mov	r4, r0
 800d250:	4608      	mov	r0, r1
 800d252:	4611      	mov	r1, r2
 800d254:	602b      	str	r3, [r5, #0]
 800d256:	f7f8 f8f1 	bl	800543c <_kill>
 800d25a:	1c43      	adds	r3, r0, #1
 800d25c:	d102      	bne.n	800d264 <_kill_r+0x1c>
 800d25e:	682b      	ldr	r3, [r5, #0]
 800d260:	b103      	cbz	r3, 800d264 <_kill_r+0x1c>
 800d262:	6023      	str	r3, [r4, #0]
 800d264:	bd38      	pop	{r3, r4, r5, pc}
 800d266:	bf00      	nop
 800d268:	20000b3c 	.word	0x20000b3c

0800d26c <_getpid_r>:
 800d26c:	f7f8 b8de 	b.w	800542c <_getpid>

0800d270 <_sbrk_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4d06      	ldr	r5, [pc, #24]	; (800d28c <_sbrk_r+0x1c>)
 800d274:	2300      	movs	r3, #0
 800d276:	4604      	mov	r4, r0
 800d278:	4608      	mov	r0, r1
 800d27a:	602b      	str	r3, [r5, #0]
 800d27c:	f7f8 f966 	bl	800554c <_sbrk>
 800d280:	1c43      	adds	r3, r0, #1
 800d282:	d102      	bne.n	800d28a <_sbrk_r+0x1a>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	b103      	cbz	r3, 800d28a <_sbrk_r+0x1a>
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	bd38      	pop	{r3, r4, r5, pc}
 800d28c:	20000b3c 	.word	0x20000b3c

0800d290 <_write_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4d07      	ldr	r5, [pc, #28]	; (800d2b0 <_write_r+0x20>)
 800d294:	4604      	mov	r4, r0
 800d296:	4608      	mov	r0, r1
 800d298:	4611      	mov	r1, r2
 800d29a:	2200      	movs	r2, #0
 800d29c:	602a      	str	r2, [r5, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	f7f8 f903 	bl	80054aa <_write>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_write_r+0x1e>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_write_r+0x1e>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	20000b3c 	.word	0x20000b3c

0800d2b4 <__errno>:
 800d2b4:	4b01      	ldr	r3, [pc, #4]	; (800d2bc <__errno+0x8>)
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	200006c4 	.word	0x200006c4

0800d2c0 <__libc_init_array>:
 800d2c0:	b570      	push	{r4, r5, r6, lr}
 800d2c2:	4d0d      	ldr	r5, [pc, #52]	; (800d2f8 <__libc_init_array+0x38>)
 800d2c4:	4c0d      	ldr	r4, [pc, #52]	; (800d2fc <__libc_init_array+0x3c>)
 800d2c6:	1b64      	subs	r4, r4, r5
 800d2c8:	10a4      	asrs	r4, r4, #2
 800d2ca:	2600      	movs	r6, #0
 800d2cc:	42a6      	cmp	r6, r4
 800d2ce:	d109      	bne.n	800d2e4 <__libc_init_array+0x24>
 800d2d0:	4d0b      	ldr	r5, [pc, #44]	; (800d300 <__libc_init_array+0x40>)
 800d2d2:	4c0c      	ldr	r4, [pc, #48]	; (800d304 <__libc_init_array+0x44>)
 800d2d4:	f001 fe96 	bl	800f004 <_init>
 800d2d8:	1b64      	subs	r4, r4, r5
 800d2da:	10a4      	asrs	r4, r4, #2
 800d2dc:	2600      	movs	r6, #0
 800d2de:	42a6      	cmp	r6, r4
 800d2e0:	d105      	bne.n	800d2ee <__libc_init_array+0x2e>
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}
 800d2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2e8:	4798      	blx	r3
 800d2ea:	3601      	adds	r6, #1
 800d2ec:	e7ee      	b.n	800d2cc <__libc_init_array+0xc>
 800d2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2f2:	4798      	blx	r3
 800d2f4:	3601      	adds	r6, #1
 800d2f6:	e7f2      	b.n	800d2de <__libc_init_array+0x1e>
 800d2f8:	080137e8 	.word	0x080137e8
 800d2fc:	080137e8 	.word	0x080137e8
 800d300:	080137e8 	.word	0x080137e8
 800d304:	080137f4 	.word	0x080137f4

0800d308 <__retarget_lock_init_recursive>:
 800d308:	4770      	bx	lr

0800d30a <__retarget_lock_acquire_recursive>:
 800d30a:	4770      	bx	lr

0800d30c <__retarget_lock_release_recursive>:
 800d30c:	4770      	bx	lr

0800d30e <memcpy>:
 800d30e:	440a      	add	r2, r1
 800d310:	4291      	cmp	r1, r2
 800d312:	f100 33ff 	add.w	r3, r0, #4294967295
 800d316:	d100      	bne.n	800d31a <memcpy+0xc>
 800d318:	4770      	bx	lr
 800d31a:	b510      	push	{r4, lr}
 800d31c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d320:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d324:	4291      	cmp	r1, r2
 800d326:	d1f9      	bne.n	800d31c <memcpy+0xe>
 800d328:	bd10      	pop	{r4, pc}
	...

0800d32c <_free_r>:
 800d32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d32e:	2900      	cmp	r1, #0
 800d330:	d044      	beq.n	800d3bc <_free_r+0x90>
 800d332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d336:	9001      	str	r0, [sp, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f1a1 0404 	sub.w	r4, r1, #4
 800d33e:	bfb8      	it	lt
 800d340:	18e4      	addlt	r4, r4, r3
 800d342:	f7fe feff 	bl	800c144 <__malloc_lock>
 800d346:	4a1e      	ldr	r2, [pc, #120]	; (800d3c0 <_free_r+0x94>)
 800d348:	9801      	ldr	r0, [sp, #4]
 800d34a:	6813      	ldr	r3, [r2, #0]
 800d34c:	b933      	cbnz	r3, 800d35c <_free_r+0x30>
 800d34e:	6063      	str	r3, [r4, #4]
 800d350:	6014      	str	r4, [r2, #0]
 800d352:	b003      	add	sp, #12
 800d354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d358:	f7fe befa 	b.w	800c150 <__malloc_unlock>
 800d35c:	42a3      	cmp	r3, r4
 800d35e:	d908      	bls.n	800d372 <_free_r+0x46>
 800d360:	6825      	ldr	r5, [r4, #0]
 800d362:	1961      	adds	r1, r4, r5
 800d364:	428b      	cmp	r3, r1
 800d366:	bf01      	itttt	eq
 800d368:	6819      	ldreq	r1, [r3, #0]
 800d36a:	685b      	ldreq	r3, [r3, #4]
 800d36c:	1949      	addeq	r1, r1, r5
 800d36e:	6021      	streq	r1, [r4, #0]
 800d370:	e7ed      	b.n	800d34e <_free_r+0x22>
 800d372:	461a      	mov	r2, r3
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	b10b      	cbz	r3, 800d37c <_free_r+0x50>
 800d378:	42a3      	cmp	r3, r4
 800d37a:	d9fa      	bls.n	800d372 <_free_r+0x46>
 800d37c:	6811      	ldr	r1, [r2, #0]
 800d37e:	1855      	adds	r5, r2, r1
 800d380:	42a5      	cmp	r5, r4
 800d382:	d10b      	bne.n	800d39c <_free_r+0x70>
 800d384:	6824      	ldr	r4, [r4, #0]
 800d386:	4421      	add	r1, r4
 800d388:	1854      	adds	r4, r2, r1
 800d38a:	42a3      	cmp	r3, r4
 800d38c:	6011      	str	r1, [r2, #0]
 800d38e:	d1e0      	bne.n	800d352 <_free_r+0x26>
 800d390:	681c      	ldr	r4, [r3, #0]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	6053      	str	r3, [r2, #4]
 800d396:	440c      	add	r4, r1
 800d398:	6014      	str	r4, [r2, #0]
 800d39a:	e7da      	b.n	800d352 <_free_r+0x26>
 800d39c:	d902      	bls.n	800d3a4 <_free_r+0x78>
 800d39e:	230c      	movs	r3, #12
 800d3a0:	6003      	str	r3, [r0, #0]
 800d3a2:	e7d6      	b.n	800d352 <_free_r+0x26>
 800d3a4:	6825      	ldr	r5, [r4, #0]
 800d3a6:	1961      	adds	r1, r4, r5
 800d3a8:	428b      	cmp	r3, r1
 800d3aa:	bf04      	itt	eq
 800d3ac:	6819      	ldreq	r1, [r3, #0]
 800d3ae:	685b      	ldreq	r3, [r3, #4]
 800d3b0:	6063      	str	r3, [r4, #4]
 800d3b2:	bf04      	itt	eq
 800d3b4:	1949      	addeq	r1, r1, r5
 800d3b6:	6021      	streq	r1, [r4, #0]
 800d3b8:	6054      	str	r4, [r2, #4]
 800d3ba:	e7ca      	b.n	800d352 <_free_r+0x26>
 800d3bc:	b003      	add	sp, #12
 800d3be:	bd30      	pop	{r4, r5, pc}
 800d3c0:	200009f8 	.word	0x200009f8

0800d3c4 <rshift>:
 800d3c4:	6903      	ldr	r3, [r0, #16]
 800d3c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d3ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d3d2:	f100 0414 	add.w	r4, r0, #20
 800d3d6:	dd45      	ble.n	800d464 <rshift+0xa0>
 800d3d8:	f011 011f 	ands.w	r1, r1, #31
 800d3dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d3e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d3e4:	d10c      	bne.n	800d400 <rshift+0x3c>
 800d3e6:	f100 0710 	add.w	r7, r0, #16
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	42b1      	cmp	r1, r6
 800d3ee:	d334      	bcc.n	800d45a <rshift+0x96>
 800d3f0:	1a9b      	subs	r3, r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	1eea      	subs	r2, r5, #3
 800d3f6:	4296      	cmp	r6, r2
 800d3f8:	bf38      	it	cc
 800d3fa:	2300      	movcc	r3, #0
 800d3fc:	4423      	add	r3, r4
 800d3fe:	e015      	b.n	800d42c <rshift+0x68>
 800d400:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d404:	f1c1 0820 	rsb	r8, r1, #32
 800d408:	40cf      	lsrs	r7, r1
 800d40a:	f105 0e04 	add.w	lr, r5, #4
 800d40e:	46a1      	mov	r9, r4
 800d410:	4576      	cmp	r6, lr
 800d412:	46f4      	mov	ip, lr
 800d414:	d815      	bhi.n	800d442 <rshift+0x7e>
 800d416:	1a9a      	subs	r2, r3, r2
 800d418:	0092      	lsls	r2, r2, #2
 800d41a:	3a04      	subs	r2, #4
 800d41c:	3501      	adds	r5, #1
 800d41e:	42ae      	cmp	r6, r5
 800d420:	bf38      	it	cc
 800d422:	2200      	movcc	r2, #0
 800d424:	18a3      	adds	r3, r4, r2
 800d426:	50a7      	str	r7, [r4, r2]
 800d428:	b107      	cbz	r7, 800d42c <rshift+0x68>
 800d42a:	3304      	adds	r3, #4
 800d42c:	1b1a      	subs	r2, r3, r4
 800d42e:	42a3      	cmp	r3, r4
 800d430:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d434:	bf08      	it	eq
 800d436:	2300      	moveq	r3, #0
 800d438:	6102      	str	r2, [r0, #16]
 800d43a:	bf08      	it	eq
 800d43c:	6143      	streq	r3, [r0, #20]
 800d43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d442:	f8dc c000 	ldr.w	ip, [ip]
 800d446:	fa0c fc08 	lsl.w	ip, ip, r8
 800d44a:	ea4c 0707 	orr.w	r7, ip, r7
 800d44e:	f849 7b04 	str.w	r7, [r9], #4
 800d452:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d456:	40cf      	lsrs	r7, r1
 800d458:	e7da      	b.n	800d410 <rshift+0x4c>
 800d45a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d45e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d462:	e7c3      	b.n	800d3ec <rshift+0x28>
 800d464:	4623      	mov	r3, r4
 800d466:	e7e1      	b.n	800d42c <rshift+0x68>

0800d468 <__hexdig_fun>:
 800d468:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d46c:	2b09      	cmp	r3, #9
 800d46e:	d802      	bhi.n	800d476 <__hexdig_fun+0xe>
 800d470:	3820      	subs	r0, #32
 800d472:	b2c0      	uxtb	r0, r0
 800d474:	4770      	bx	lr
 800d476:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	d801      	bhi.n	800d482 <__hexdig_fun+0x1a>
 800d47e:	3847      	subs	r0, #71	; 0x47
 800d480:	e7f7      	b.n	800d472 <__hexdig_fun+0xa>
 800d482:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d486:	2b05      	cmp	r3, #5
 800d488:	d801      	bhi.n	800d48e <__hexdig_fun+0x26>
 800d48a:	3827      	subs	r0, #39	; 0x27
 800d48c:	e7f1      	b.n	800d472 <__hexdig_fun+0xa>
 800d48e:	2000      	movs	r0, #0
 800d490:	4770      	bx	lr
	...

0800d494 <__gethex>:
 800d494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d498:	4617      	mov	r7, r2
 800d49a:	680a      	ldr	r2, [r1, #0]
 800d49c:	b085      	sub	sp, #20
 800d49e:	f102 0b02 	add.w	fp, r2, #2
 800d4a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d4a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d4aa:	4681      	mov	r9, r0
 800d4ac:	468a      	mov	sl, r1
 800d4ae:	9302      	str	r3, [sp, #8]
 800d4b0:	32fe      	adds	r2, #254	; 0xfe
 800d4b2:	eb02 030b 	add.w	r3, r2, fp
 800d4b6:	46d8      	mov	r8, fp
 800d4b8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d4bc:	9301      	str	r3, [sp, #4]
 800d4be:	2830      	cmp	r0, #48	; 0x30
 800d4c0:	d0f7      	beq.n	800d4b2 <__gethex+0x1e>
 800d4c2:	f7ff ffd1 	bl	800d468 <__hexdig_fun>
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d138      	bne.n	800d53e <__gethex+0xaa>
 800d4cc:	49a7      	ldr	r1, [pc, #668]	; (800d76c <__gethex+0x2d8>)
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	4640      	mov	r0, r8
 800d4d2:	f7ff fde7 	bl	800d0a4 <strncmp>
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	d169      	bne.n	800d5b0 <__gethex+0x11c>
 800d4dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d4e0:	465d      	mov	r5, fp
 800d4e2:	f7ff ffc1 	bl	800d468 <__hexdig_fun>
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d064      	beq.n	800d5b4 <__gethex+0x120>
 800d4ea:	465a      	mov	r2, fp
 800d4ec:	7810      	ldrb	r0, [r2, #0]
 800d4ee:	2830      	cmp	r0, #48	; 0x30
 800d4f0:	4690      	mov	r8, r2
 800d4f2:	f102 0201 	add.w	r2, r2, #1
 800d4f6:	d0f9      	beq.n	800d4ec <__gethex+0x58>
 800d4f8:	f7ff ffb6 	bl	800d468 <__hexdig_fun>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	fab0 f480 	clz	r4, r0
 800d502:	0964      	lsrs	r4, r4, #5
 800d504:	465e      	mov	r6, fp
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	4642      	mov	r2, r8
 800d50a:	4615      	mov	r5, r2
 800d50c:	3201      	adds	r2, #1
 800d50e:	7828      	ldrb	r0, [r5, #0]
 800d510:	f7ff ffaa 	bl	800d468 <__hexdig_fun>
 800d514:	2800      	cmp	r0, #0
 800d516:	d1f8      	bne.n	800d50a <__gethex+0x76>
 800d518:	4994      	ldr	r1, [pc, #592]	; (800d76c <__gethex+0x2d8>)
 800d51a:	2201      	movs	r2, #1
 800d51c:	4628      	mov	r0, r5
 800d51e:	f7ff fdc1 	bl	800d0a4 <strncmp>
 800d522:	b978      	cbnz	r0, 800d544 <__gethex+0xb0>
 800d524:	b946      	cbnz	r6, 800d538 <__gethex+0xa4>
 800d526:	1c6e      	adds	r6, r5, #1
 800d528:	4632      	mov	r2, r6
 800d52a:	4615      	mov	r5, r2
 800d52c:	3201      	adds	r2, #1
 800d52e:	7828      	ldrb	r0, [r5, #0]
 800d530:	f7ff ff9a 	bl	800d468 <__hexdig_fun>
 800d534:	2800      	cmp	r0, #0
 800d536:	d1f8      	bne.n	800d52a <__gethex+0x96>
 800d538:	1b73      	subs	r3, r6, r5
 800d53a:	009e      	lsls	r6, r3, #2
 800d53c:	e004      	b.n	800d548 <__gethex+0xb4>
 800d53e:	2400      	movs	r4, #0
 800d540:	4626      	mov	r6, r4
 800d542:	e7e1      	b.n	800d508 <__gethex+0x74>
 800d544:	2e00      	cmp	r6, #0
 800d546:	d1f7      	bne.n	800d538 <__gethex+0xa4>
 800d548:	782b      	ldrb	r3, [r5, #0]
 800d54a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d54e:	2b50      	cmp	r3, #80	; 0x50
 800d550:	d13d      	bne.n	800d5ce <__gethex+0x13a>
 800d552:	786b      	ldrb	r3, [r5, #1]
 800d554:	2b2b      	cmp	r3, #43	; 0x2b
 800d556:	d02f      	beq.n	800d5b8 <__gethex+0x124>
 800d558:	2b2d      	cmp	r3, #45	; 0x2d
 800d55a:	d031      	beq.n	800d5c0 <__gethex+0x12c>
 800d55c:	1c69      	adds	r1, r5, #1
 800d55e:	f04f 0b00 	mov.w	fp, #0
 800d562:	7808      	ldrb	r0, [r1, #0]
 800d564:	f7ff ff80 	bl	800d468 <__hexdig_fun>
 800d568:	1e42      	subs	r2, r0, #1
 800d56a:	b2d2      	uxtb	r2, r2
 800d56c:	2a18      	cmp	r2, #24
 800d56e:	d82e      	bhi.n	800d5ce <__gethex+0x13a>
 800d570:	f1a0 0210 	sub.w	r2, r0, #16
 800d574:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d578:	f7ff ff76 	bl	800d468 <__hexdig_fun>
 800d57c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d580:	fa5f fc8c 	uxtb.w	ip, ip
 800d584:	f1bc 0f18 	cmp.w	ip, #24
 800d588:	d91d      	bls.n	800d5c6 <__gethex+0x132>
 800d58a:	f1bb 0f00 	cmp.w	fp, #0
 800d58e:	d000      	beq.n	800d592 <__gethex+0xfe>
 800d590:	4252      	negs	r2, r2
 800d592:	4416      	add	r6, r2
 800d594:	f8ca 1000 	str.w	r1, [sl]
 800d598:	b1dc      	cbz	r4, 800d5d2 <__gethex+0x13e>
 800d59a:	9b01      	ldr	r3, [sp, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	bf14      	ite	ne
 800d5a0:	f04f 0800 	movne.w	r8, #0
 800d5a4:	f04f 0806 	moveq.w	r8, #6
 800d5a8:	4640      	mov	r0, r8
 800d5aa:	b005      	add	sp, #20
 800d5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b0:	4645      	mov	r5, r8
 800d5b2:	4626      	mov	r6, r4
 800d5b4:	2401      	movs	r4, #1
 800d5b6:	e7c7      	b.n	800d548 <__gethex+0xb4>
 800d5b8:	f04f 0b00 	mov.w	fp, #0
 800d5bc:	1ca9      	adds	r1, r5, #2
 800d5be:	e7d0      	b.n	800d562 <__gethex+0xce>
 800d5c0:	f04f 0b01 	mov.w	fp, #1
 800d5c4:	e7fa      	b.n	800d5bc <__gethex+0x128>
 800d5c6:	230a      	movs	r3, #10
 800d5c8:	fb03 0002 	mla	r0, r3, r2, r0
 800d5cc:	e7d0      	b.n	800d570 <__gethex+0xdc>
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	e7e0      	b.n	800d594 <__gethex+0x100>
 800d5d2:	eba5 0308 	sub.w	r3, r5, r8
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	4621      	mov	r1, r4
 800d5da:	2b07      	cmp	r3, #7
 800d5dc:	dc0a      	bgt.n	800d5f4 <__gethex+0x160>
 800d5de:	4648      	mov	r0, r9
 800d5e0:	f000 fa5a 	bl	800da98 <_Balloc>
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	b940      	cbnz	r0, 800d5fa <__gethex+0x166>
 800d5e8:	4b61      	ldr	r3, [pc, #388]	; (800d770 <__gethex+0x2dc>)
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	21e4      	movs	r1, #228	; 0xe4
 800d5ee:	4861      	ldr	r0, [pc, #388]	; (800d774 <__gethex+0x2e0>)
 800d5f0:	f7fe fcbc 	bl	800bf6c <__assert_func>
 800d5f4:	3101      	adds	r1, #1
 800d5f6:	105b      	asrs	r3, r3, #1
 800d5f8:	e7ef      	b.n	800d5da <__gethex+0x146>
 800d5fa:	f100 0a14 	add.w	sl, r0, #20
 800d5fe:	2300      	movs	r3, #0
 800d600:	495a      	ldr	r1, [pc, #360]	; (800d76c <__gethex+0x2d8>)
 800d602:	f8cd a004 	str.w	sl, [sp, #4]
 800d606:	469b      	mov	fp, r3
 800d608:	45a8      	cmp	r8, r5
 800d60a:	d342      	bcc.n	800d692 <__gethex+0x1fe>
 800d60c:	9801      	ldr	r0, [sp, #4]
 800d60e:	f840 bb04 	str.w	fp, [r0], #4
 800d612:	eba0 000a 	sub.w	r0, r0, sl
 800d616:	1080      	asrs	r0, r0, #2
 800d618:	6120      	str	r0, [r4, #16]
 800d61a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d61e:	4658      	mov	r0, fp
 800d620:	f000 fb2c 	bl	800dc7c <__hi0bits>
 800d624:	683d      	ldr	r5, [r7, #0]
 800d626:	eba8 0000 	sub.w	r0, r8, r0
 800d62a:	42a8      	cmp	r0, r5
 800d62c:	dd59      	ble.n	800d6e2 <__gethex+0x24e>
 800d62e:	eba0 0805 	sub.w	r8, r0, r5
 800d632:	4641      	mov	r1, r8
 800d634:	4620      	mov	r0, r4
 800d636:	f000 febb 	bl	800e3b0 <__any_on>
 800d63a:	4683      	mov	fp, r0
 800d63c:	b1b8      	cbz	r0, 800d66e <__gethex+0x1da>
 800d63e:	f108 33ff 	add.w	r3, r8, #4294967295
 800d642:	1159      	asrs	r1, r3, #5
 800d644:	f003 021f 	and.w	r2, r3, #31
 800d648:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d64c:	f04f 0b01 	mov.w	fp, #1
 800d650:	fa0b f202 	lsl.w	r2, fp, r2
 800d654:	420a      	tst	r2, r1
 800d656:	d00a      	beq.n	800d66e <__gethex+0x1da>
 800d658:	455b      	cmp	r3, fp
 800d65a:	dd06      	ble.n	800d66a <__gethex+0x1d6>
 800d65c:	f1a8 0102 	sub.w	r1, r8, #2
 800d660:	4620      	mov	r0, r4
 800d662:	f000 fea5 	bl	800e3b0 <__any_on>
 800d666:	2800      	cmp	r0, #0
 800d668:	d138      	bne.n	800d6dc <__gethex+0x248>
 800d66a:	f04f 0b02 	mov.w	fp, #2
 800d66e:	4641      	mov	r1, r8
 800d670:	4620      	mov	r0, r4
 800d672:	f7ff fea7 	bl	800d3c4 <rshift>
 800d676:	4446      	add	r6, r8
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	42b3      	cmp	r3, r6
 800d67c:	da41      	bge.n	800d702 <__gethex+0x26e>
 800d67e:	4621      	mov	r1, r4
 800d680:	4648      	mov	r0, r9
 800d682:	f000 fa49 	bl	800db18 <_Bfree>
 800d686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d688:	2300      	movs	r3, #0
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d690:	e78a      	b.n	800d5a8 <__gethex+0x114>
 800d692:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d696:	2a2e      	cmp	r2, #46	; 0x2e
 800d698:	d014      	beq.n	800d6c4 <__gethex+0x230>
 800d69a:	2b20      	cmp	r3, #32
 800d69c:	d106      	bne.n	800d6ac <__gethex+0x218>
 800d69e:	9b01      	ldr	r3, [sp, #4]
 800d6a0:	f843 bb04 	str.w	fp, [r3], #4
 800d6a4:	f04f 0b00 	mov.w	fp, #0
 800d6a8:	9301      	str	r3, [sp, #4]
 800d6aa:	465b      	mov	r3, fp
 800d6ac:	7828      	ldrb	r0, [r5, #0]
 800d6ae:	9303      	str	r3, [sp, #12]
 800d6b0:	f7ff feda 	bl	800d468 <__hexdig_fun>
 800d6b4:	9b03      	ldr	r3, [sp, #12]
 800d6b6:	f000 000f 	and.w	r0, r0, #15
 800d6ba:	4098      	lsls	r0, r3
 800d6bc:	ea4b 0b00 	orr.w	fp, fp, r0
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	e7a1      	b.n	800d608 <__gethex+0x174>
 800d6c4:	45a8      	cmp	r8, r5
 800d6c6:	d8e8      	bhi.n	800d69a <__gethex+0x206>
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	9303      	str	r3, [sp, #12]
 800d6ce:	f7ff fce9 	bl	800d0a4 <strncmp>
 800d6d2:	4926      	ldr	r1, [pc, #152]	; (800d76c <__gethex+0x2d8>)
 800d6d4:	9b03      	ldr	r3, [sp, #12]
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d1df      	bne.n	800d69a <__gethex+0x206>
 800d6da:	e795      	b.n	800d608 <__gethex+0x174>
 800d6dc:	f04f 0b03 	mov.w	fp, #3
 800d6e0:	e7c5      	b.n	800d66e <__gethex+0x1da>
 800d6e2:	da0b      	bge.n	800d6fc <__gethex+0x268>
 800d6e4:	eba5 0800 	sub.w	r8, r5, r0
 800d6e8:	4621      	mov	r1, r4
 800d6ea:	4642      	mov	r2, r8
 800d6ec:	4648      	mov	r0, r9
 800d6ee:	f000 fc2d 	bl	800df4c <__lshift>
 800d6f2:	eba6 0608 	sub.w	r6, r6, r8
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	f100 0a14 	add.w	sl, r0, #20
 800d6fc:	f04f 0b00 	mov.w	fp, #0
 800d700:	e7ba      	b.n	800d678 <__gethex+0x1e4>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	42b3      	cmp	r3, r6
 800d706:	dd73      	ble.n	800d7f0 <__gethex+0x35c>
 800d708:	1b9e      	subs	r6, r3, r6
 800d70a:	42b5      	cmp	r5, r6
 800d70c:	dc34      	bgt.n	800d778 <__gethex+0x2e4>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b02      	cmp	r3, #2
 800d712:	d023      	beq.n	800d75c <__gethex+0x2c8>
 800d714:	2b03      	cmp	r3, #3
 800d716:	d025      	beq.n	800d764 <__gethex+0x2d0>
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d115      	bne.n	800d748 <__gethex+0x2b4>
 800d71c:	42b5      	cmp	r5, r6
 800d71e:	d113      	bne.n	800d748 <__gethex+0x2b4>
 800d720:	2d01      	cmp	r5, #1
 800d722:	d10b      	bne.n	800d73c <__gethex+0x2a8>
 800d724:	9a02      	ldr	r2, [sp, #8]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6013      	str	r3, [r2, #0]
 800d72a:	2301      	movs	r3, #1
 800d72c:	6123      	str	r3, [r4, #16]
 800d72e:	f8ca 3000 	str.w	r3, [sl]
 800d732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d734:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d738:	601c      	str	r4, [r3, #0]
 800d73a:	e735      	b.n	800d5a8 <__gethex+0x114>
 800d73c:	1e69      	subs	r1, r5, #1
 800d73e:	4620      	mov	r0, r4
 800d740:	f000 fe36 	bl	800e3b0 <__any_on>
 800d744:	2800      	cmp	r0, #0
 800d746:	d1ed      	bne.n	800d724 <__gethex+0x290>
 800d748:	4621      	mov	r1, r4
 800d74a:	4648      	mov	r0, r9
 800d74c:	f000 f9e4 	bl	800db18 <_Bfree>
 800d750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d752:	2300      	movs	r3, #0
 800d754:	6013      	str	r3, [r2, #0]
 800d756:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d75a:	e725      	b.n	800d5a8 <__gethex+0x114>
 800d75c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1f2      	bne.n	800d748 <__gethex+0x2b4>
 800d762:	e7df      	b.n	800d724 <__gethex+0x290>
 800d764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1dc      	bne.n	800d724 <__gethex+0x290>
 800d76a:	e7ed      	b.n	800d748 <__gethex+0x2b4>
 800d76c:	08013404 	.word	0x08013404
 800d770:	080135e2 	.word	0x080135e2
 800d774:	080135f3 	.word	0x080135f3
 800d778:	f106 38ff 	add.w	r8, r6, #4294967295
 800d77c:	f1bb 0f00 	cmp.w	fp, #0
 800d780:	d133      	bne.n	800d7ea <__gethex+0x356>
 800d782:	f1b8 0f00 	cmp.w	r8, #0
 800d786:	d004      	beq.n	800d792 <__gethex+0x2fe>
 800d788:	4641      	mov	r1, r8
 800d78a:	4620      	mov	r0, r4
 800d78c:	f000 fe10 	bl	800e3b0 <__any_on>
 800d790:	4683      	mov	fp, r0
 800d792:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d796:	2301      	movs	r3, #1
 800d798:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d79c:	f008 081f 	and.w	r8, r8, #31
 800d7a0:	fa03 f308 	lsl.w	r3, r3, r8
 800d7a4:	4213      	tst	r3, r2
 800d7a6:	4631      	mov	r1, r6
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	bf18      	it	ne
 800d7ac:	f04b 0b02 	orrne.w	fp, fp, #2
 800d7b0:	1bad      	subs	r5, r5, r6
 800d7b2:	f7ff fe07 	bl	800d3c4 <rshift>
 800d7b6:	687e      	ldr	r6, [r7, #4]
 800d7b8:	f04f 0802 	mov.w	r8, #2
 800d7bc:	f1bb 0f00 	cmp.w	fp, #0
 800d7c0:	d04a      	beq.n	800d858 <__gethex+0x3c4>
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d016      	beq.n	800d7f6 <__gethex+0x362>
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	d018      	beq.n	800d7fe <__gethex+0x36a>
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d109      	bne.n	800d7e4 <__gethex+0x350>
 800d7d0:	f01b 0f02 	tst.w	fp, #2
 800d7d4:	d006      	beq.n	800d7e4 <__gethex+0x350>
 800d7d6:	f8da 3000 	ldr.w	r3, [sl]
 800d7da:	ea4b 0b03 	orr.w	fp, fp, r3
 800d7de:	f01b 0f01 	tst.w	fp, #1
 800d7e2:	d10f      	bne.n	800d804 <__gethex+0x370>
 800d7e4:	f048 0810 	orr.w	r8, r8, #16
 800d7e8:	e036      	b.n	800d858 <__gethex+0x3c4>
 800d7ea:	f04f 0b01 	mov.w	fp, #1
 800d7ee:	e7d0      	b.n	800d792 <__gethex+0x2fe>
 800d7f0:	f04f 0801 	mov.w	r8, #1
 800d7f4:	e7e2      	b.n	800d7bc <__gethex+0x328>
 800d7f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7f8:	f1c3 0301 	rsb	r3, r3, #1
 800d7fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d800:	2b00      	cmp	r3, #0
 800d802:	d0ef      	beq.n	800d7e4 <__gethex+0x350>
 800d804:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d808:	f104 0214 	add.w	r2, r4, #20
 800d80c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d810:	9301      	str	r3, [sp, #4]
 800d812:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d816:	2300      	movs	r3, #0
 800d818:	4694      	mov	ip, r2
 800d81a:	f852 1b04 	ldr.w	r1, [r2], #4
 800d81e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d822:	d01e      	beq.n	800d862 <__gethex+0x3ce>
 800d824:	3101      	adds	r1, #1
 800d826:	f8cc 1000 	str.w	r1, [ip]
 800d82a:	f1b8 0f02 	cmp.w	r8, #2
 800d82e:	f104 0214 	add.w	r2, r4, #20
 800d832:	d13d      	bne.n	800d8b0 <__gethex+0x41c>
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	3b01      	subs	r3, #1
 800d838:	42ab      	cmp	r3, r5
 800d83a:	d10b      	bne.n	800d854 <__gethex+0x3c0>
 800d83c:	1169      	asrs	r1, r5, #5
 800d83e:	2301      	movs	r3, #1
 800d840:	f005 051f 	and.w	r5, r5, #31
 800d844:	fa03 f505 	lsl.w	r5, r3, r5
 800d848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d84c:	421d      	tst	r5, r3
 800d84e:	bf18      	it	ne
 800d850:	f04f 0801 	movne.w	r8, #1
 800d854:	f048 0820 	orr.w	r8, r8, #32
 800d858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d85a:	601c      	str	r4, [r3, #0]
 800d85c:	9b02      	ldr	r3, [sp, #8]
 800d85e:	601e      	str	r6, [r3, #0]
 800d860:	e6a2      	b.n	800d5a8 <__gethex+0x114>
 800d862:	4290      	cmp	r0, r2
 800d864:	f842 3c04 	str.w	r3, [r2, #-4]
 800d868:	d8d6      	bhi.n	800d818 <__gethex+0x384>
 800d86a:	68a2      	ldr	r2, [r4, #8]
 800d86c:	4593      	cmp	fp, r2
 800d86e:	db17      	blt.n	800d8a0 <__gethex+0x40c>
 800d870:	6861      	ldr	r1, [r4, #4]
 800d872:	4648      	mov	r0, r9
 800d874:	3101      	adds	r1, #1
 800d876:	f000 f90f 	bl	800da98 <_Balloc>
 800d87a:	4682      	mov	sl, r0
 800d87c:	b918      	cbnz	r0, 800d886 <__gethex+0x3f2>
 800d87e:	4b1b      	ldr	r3, [pc, #108]	; (800d8ec <__gethex+0x458>)
 800d880:	4602      	mov	r2, r0
 800d882:	2184      	movs	r1, #132	; 0x84
 800d884:	e6b3      	b.n	800d5ee <__gethex+0x15a>
 800d886:	6922      	ldr	r2, [r4, #16]
 800d888:	3202      	adds	r2, #2
 800d88a:	f104 010c 	add.w	r1, r4, #12
 800d88e:	0092      	lsls	r2, r2, #2
 800d890:	300c      	adds	r0, #12
 800d892:	f7ff fd3c 	bl	800d30e <memcpy>
 800d896:	4621      	mov	r1, r4
 800d898:	4648      	mov	r0, r9
 800d89a:	f000 f93d 	bl	800db18 <_Bfree>
 800d89e:	4654      	mov	r4, sl
 800d8a0:	6922      	ldr	r2, [r4, #16]
 800d8a2:	1c51      	adds	r1, r2, #1
 800d8a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d8a8:	6121      	str	r1, [r4, #16]
 800d8aa:	2101      	movs	r1, #1
 800d8ac:	6151      	str	r1, [r2, #20]
 800d8ae:	e7bc      	b.n	800d82a <__gethex+0x396>
 800d8b0:	6921      	ldr	r1, [r4, #16]
 800d8b2:	4559      	cmp	r1, fp
 800d8b4:	dd0b      	ble.n	800d8ce <__gethex+0x43a>
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f7ff fd83 	bl	800d3c4 <rshift>
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	3601      	adds	r6, #1
 800d8c2:	42b3      	cmp	r3, r6
 800d8c4:	f6ff aedb 	blt.w	800d67e <__gethex+0x1ea>
 800d8c8:	f04f 0801 	mov.w	r8, #1
 800d8cc:	e7c2      	b.n	800d854 <__gethex+0x3c0>
 800d8ce:	f015 051f 	ands.w	r5, r5, #31
 800d8d2:	d0f9      	beq.n	800d8c8 <__gethex+0x434>
 800d8d4:	9b01      	ldr	r3, [sp, #4]
 800d8d6:	441a      	add	r2, r3
 800d8d8:	f1c5 0520 	rsb	r5, r5, #32
 800d8dc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d8e0:	f000 f9cc 	bl	800dc7c <__hi0bits>
 800d8e4:	42a8      	cmp	r0, r5
 800d8e6:	dbe6      	blt.n	800d8b6 <__gethex+0x422>
 800d8e8:	e7ee      	b.n	800d8c8 <__gethex+0x434>
 800d8ea:	bf00      	nop
 800d8ec:	080135e2 	.word	0x080135e2

0800d8f0 <L_shift>:
 800d8f0:	f1c2 0208 	rsb	r2, r2, #8
 800d8f4:	0092      	lsls	r2, r2, #2
 800d8f6:	b570      	push	{r4, r5, r6, lr}
 800d8f8:	f1c2 0620 	rsb	r6, r2, #32
 800d8fc:	6843      	ldr	r3, [r0, #4]
 800d8fe:	6804      	ldr	r4, [r0, #0]
 800d900:	fa03 f506 	lsl.w	r5, r3, r6
 800d904:	432c      	orrs	r4, r5
 800d906:	40d3      	lsrs	r3, r2
 800d908:	6004      	str	r4, [r0, #0]
 800d90a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d90e:	4288      	cmp	r0, r1
 800d910:	d3f4      	bcc.n	800d8fc <L_shift+0xc>
 800d912:	bd70      	pop	{r4, r5, r6, pc}

0800d914 <__match>:
 800d914:	b530      	push	{r4, r5, lr}
 800d916:	6803      	ldr	r3, [r0, #0]
 800d918:	3301      	adds	r3, #1
 800d91a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d91e:	b914      	cbnz	r4, 800d926 <__match+0x12>
 800d920:	6003      	str	r3, [r0, #0]
 800d922:	2001      	movs	r0, #1
 800d924:	bd30      	pop	{r4, r5, pc}
 800d926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d92a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d92e:	2d19      	cmp	r5, #25
 800d930:	bf98      	it	ls
 800d932:	3220      	addls	r2, #32
 800d934:	42a2      	cmp	r2, r4
 800d936:	d0f0      	beq.n	800d91a <__match+0x6>
 800d938:	2000      	movs	r0, #0
 800d93a:	e7f3      	b.n	800d924 <__match+0x10>

0800d93c <__hexnan>:
 800d93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d940:	680b      	ldr	r3, [r1, #0]
 800d942:	6801      	ldr	r1, [r0, #0]
 800d944:	115e      	asrs	r6, r3, #5
 800d946:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d94a:	f013 031f 	ands.w	r3, r3, #31
 800d94e:	b087      	sub	sp, #28
 800d950:	bf18      	it	ne
 800d952:	3604      	addne	r6, #4
 800d954:	2500      	movs	r5, #0
 800d956:	1f37      	subs	r7, r6, #4
 800d958:	4682      	mov	sl, r0
 800d95a:	4690      	mov	r8, r2
 800d95c:	9301      	str	r3, [sp, #4]
 800d95e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d962:	46b9      	mov	r9, r7
 800d964:	463c      	mov	r4, r7
 800d966:	9502      	str	r5, [sp, #8]
 800d968:	46ab      	mov	fp, r5
 800d96a:	784a      	ldrb	r2, [r1, #1]
 800d96c:	1c4b      	adds	r3, r1, #1
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	b342      	cbz	r2, 800d9c4 <__hexnan+0x88>
 800d972:	4610      	mov	r0, r2
 800d974:	9105      	str	r1, [sp, #20]
 800d976:	9204      	str	r2, [sp, #16]
 800d978:	f7ff fd76 	bl	800d468 <__hexdig_fun>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d14f      	bne.n	800da20 <__hexnan+0xe4>
 800d980:	9a04      	ldr	r2, [sp, #16]
 800d982:	9905      	ldr	r1, [sp, #20]
 800d984:	2a20      	cmp	r2, #32
 800d986:	d818      	bhi.n	800d9ba <__hexnan+0x7e>
 800d988:	9b02      	ldr	r3, [sp, #8]
 800d98a:	459b      	cmp	fp, r3
 800d98c:	dd13      	ble.n	800d9b6 <__hexnan+0x7a>
 800d98e:	454c      	cmp	r4, r9
 800d990:	d206      	bcs.n	800d9a0 <__hexnan+0x64>
 800d992:	2d07      	cmp	r5, #7
 800d994:	dc04      	bgt.n	800d9a0 <__hexnan+0x64>
 800d996:	462a      	mov	r2, r5
 800d998:	4649      	mov	r1, r9
 800d99a:	4620      	mov	r0, r4
 800d99c:	f7ff ffa8 	bl	800d8f0 <L_shift>
 800d9a0:	4544      	cmp	r4, r8
 800d9a2:	d950      	bls.n	800da46 <__hexnan+0x10a>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f1a4 0904 	sub.w	r9, r4, #4
 800d9aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800d9ae:	f8cd b008 	str.w	fp, [sp, #8]
 800d9b2:	464c      	mov	r4, r9
 800d9b4:	461d      	mov	r5, r3
 800d9b6:	9903      	ldr	r1, [sp, #12]
 800d9b8:	e7d7      	b.n	800d96a <__hexnan+0x2e>
 800d9ba:	2a29      	cmp	r2, #41	; 0x29
 800d9bc:	d155      	bne.n	800da6a <__hexnan+0x12e>
 800d9be:	3102      	adds	r1, #2
 800d9c0:	f8ca 1000 	str.w	r1, [sl]
 800d9c4:	f1bb 0f00 	cmp.w	fp, #0
 800d9c8:	d04f      	beq.n	800da6a <__hexnan+0x12e>
 800d9ca:	454c      	cmp	r4, r9
 800d9cc:	d206      	bcs.n	800d9dc <__hexnan+0xa0>
 800d9ce:	2d07      	cmp	r5, #7
 800d9d0:	dc04      	bgt.n	800d9dc <__hexnan+0xa0>
 800d9d2:	462a      	mov	r2, r5
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f7ff ff8a 	bl	800d8f0 <L_shift>
 800d9dc:	4544      	cmp	r4, r8
 800d9de:	d934      	bls.n	800da4a <__hexnan+0x10e>
 800d9e0:	f1a8 0204 	sub.w	r2, r8, #4
 800d9e4:	4623      	mov	r3, r4
 800d9e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d9ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800d9ee:	429f      	cmp	r7, r3
 800d9f0:	d2f9      	bcs.n	800d9e6 <__hexnan+0xaa>
 800d9f2:	1b3b      	subs	r3, r7, r4
 800d9f4:	f023 0303 	bic.w	r3, r3, #3
 800d9f8:	3304      	adds	r3, #4
 800d9fa:	3e03      	subs	r6, #3
 800d9fc:	3401      	adds	r4, #1
 800d9fe:	42a6      	cmp	r6, r4
 800da00:	bf38      	it	cc
 800da02:	2304      	movcc	r3, #4
 800da04:	4443      	add	r3, r8
 800da06:	2200      	movs	r2, #0
 800da08:	f843 2b04 	str.w	r2, [r3], #4
 800da0c:	429f      	cmp	r7, r3
 800da0e:	d2fb      	bcs.n	800da08 <__hexnan+0xcc>
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	b91b      	cbnz	r3, 800da1c <__hexnan+0xe0>
 800da14:	4547      	cmp	r7, r8
 800da16:	d126      	bne.n	800da66 <__hexnan+0x12a>
 800da18:	2301      	movs	r3, #1
 800da1a:	603b      	str	r3, [r7, #0]
 800da1c:	2005      	movs	r0, #5
 800da1e:	e025      	b.n	800da6c <__hexnan+0x130>
 800da20:	3501      	adds	r5, #1
 800da22:	2d08      	cmp	r5, #8
 800da24:	f10b 0b01 	add.w	fp, fp, #1
 800da28:	dd06      	ble.n	800da38 <__hexnan+0xfc>
 800da2a:	4544      	cmp	r4, r8
 800da2c:	d9c3      	bls.n	800d9b6 <__hexnan+0x7a>
 800da2e:	2300      	movs	r3, #0
 800da30:	f844 3c04 	str.w	r3, [r4, #-4]
 800da34:	2501      	movs	r5, #1
 800da36:	3c04      	subs	r4, #4
 800da38:	6822      	ldr	r2, [r4, #0]
 800da3a:	f000 000f 	and.w	r0, r0, #15
 800da3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800da42:	6020      	str	r0, [r4, #0]
 800da44:	e7b7      	b.n	800d9b6 <__hexnan+0x7a>
 800da46:	2508      	movs	r5, #8
 800da48:	e7b5      	b.n	800d9b6 <__hexnan+0x7a>
 800da4a:	9b01      	ldr	r3, [sp, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d0df      	beq.n	800da10 <__hexnan+0xd4>
 800da50:	f1c3 0320 	rsb	r3, r3, #32
 800da54:	f04f 32ff 	mov.w	r2, #4294967295
 800da58:	40da      	lsrs	r2, r3
 800da5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800da5e:	4013      	ands	r3, r2
 800da60:	f846 3c04 	str.w	r3, [r6, #-4]
 800da64:	e7d4      	b.n	800da10 <__hexnan+0xd4>
 800da66:	3f04      	subs	r7, #4
 800da68:	e7d2      	b.n	800da10 <__hexnan+0xd4>
 800da6a:	2004      	movs	r0, #4
 800da6c:	b007      	add	sp, #28
 800da6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da72 <__ascii_mbtowc>:
 800da72:	b082      	sub	sp, #8
 800da74:	b901      	cbnz	r1, 800da78 <__ascii_mbtowc+0x6>
 800da76:	a901      	add	r1, sp, #4
 800da78:	b142      	cbz	r2, 800da8c <__ascii_mbtowc+0x1a>
 800da7a:	b14b      	cbz	r3, 800da90 <__ascii_mbtowc+0x1e>
 800da7c:	7813      	ldrb	r3, [r2, #0]
 800da7e:	600b      	str	r3, [r1, #0]
 800da80:	7812      	ldrb	r2, [r2, #0]
 800da82:	1e10      	subs	r0, r2, #0
 800da84:	bf18      	it	ne
 800da86:	2001      	movne	r0, #1
 800da88:	b002      	add	sp, #8
 800da8a:	4770      	bx	lr
 800da8c:	4610      	mov	r0, r2
 800da8e:	e7fb      	b.n	800da88 <__ascii_mbtowc+0x16>
 800da90:	f06f 0001 	mvn.w	r0, #1
 800da94:	e7f8      	b.n	800da88 <__ascii_mbtowc+0x16>
	...

0800da98 <_Balloc>:
 800da98:	b570      	push	{r4, r5, r6, lr}
 800da9a:	69c6      	ldr	r6, [r0, #28]
 800da9c:	4604      	mov	r4, r0
 800da9e:	460d      	mov	r5, r1
 800daa0:	b976      	cbnz	r6, 800dac0 <_Balloc+0x28>
 800daa2:	2010      	movs	r0, #16
 800daa4:	f7fe fa9e 	bl	800bfe4 <malloc>
 800daa8:	4602      	mov	r2, r0
 800daaa:	61e0      	str	r0, [r4, #28]
 800daac:	b920      	cbnz	r0, 800dab8 <_Balloc+0x20>
 800daae:	4b18      	ldr	r3, [pc, #96]	; (800db10 <_Balloc+0x78>)
 800dab0:	4818      	ldr	r0, [pc, #96]	; (800db14 <_Balloc+0x7c>)
 800dab2:	216b      	movs	r1, #107	; 0x6b
 800dab4:	f7fe fa5a 	bl	800bf6c <__assert_func>
 800dab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dabc:	6006      	str	r6, [r0, #0]
 800dabe:	60c6      	str	r6, [r0, #12]
 800dac0:	69e6      	ldr	r6, [r4, #28]
 800dac2:	68f3      	ldr	r3, [r6, #12]
 800dac4:	b183      	cbz	r3, 800dae8 <_Balloc+0x50>
 800dac6:	69e3      	ldr	r3, [r4, #28]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dace:	b9b8      	cbnz	r0, 800db00 <_Balloc+0x68>
 800dad0:	2101      	movs	r1, #1
 800dad2:	fa01 f605 	lsl.w	r6, r1, r5
 800dad6:	1d72      	adds	r2, r6, #5
 800dad8:	0092      	lsls	r2, r2, #2
 800dada:	4620      	mov	r0, r4
 800dadc:	f7fe fa6c 	bl	800bfb8 <_calloc_r>
 800dae0:	b160      	cbz	r0, 800dafc <_Balloc+0x64>
 800dae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dae6:	e00e      	b.n	800db06 <_Balloc+0x6e>
 800dae8:	2221      	movs	r2, #33	; 0x21
 800daea:	2104      	movs	r1, #4
 800daec:	4620      	mov	r0, r4
 800daee:	f7fe fa63 	bl	800bfb8 <_calloc_r>
 800daf2:	69e3      	ldr	r3, [r4, #28]
 800daf4:	60f0      	str	r0, [r6, #12]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1e4      	bne.n	800dac6 <_Balloc+0x2e>
 800dafc:	2000      	movs	r0, #0
 800dafe:	bd70      	pop	{r4, r5, r6, pc}
 800db00:	6802      	ldr	r2, [r0, #0]
 800db02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db06:	2300      	movs	r3, #0
 800db08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db0c:	e7f7      	b.n	800dafe <_Balloc+0x66>
 800db0e:	bf00      	nop
 800db10:	08013569 	.word	0x08013569
 800db14:	08013653 	.word	0x08013653

0800db18 <_Bfree>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	69c6      	ldr	r6, [r0, #28]
 800db1c:	4605      	mov	r5, r0
 800db1e:	460c      	mov	r4, r1
 800db20:	b976      	cbnz	r6, 800db40 <_Bfree+0x28>
 800db22:	2010      	movs	r0, #16
 800db24:	f7fe fa5e 	bl	800bfe4 <malloc>
 800db28:	4602      	mov	r2, r0
 800db2a:	61e8      	str	r0, [r5, #28]
 800db2c:	b920      	cbnz	r0, 800db38 <_Bfree+0x20>
 800db2e:	4b09      	ldr	r3, [pc, #36]	; (800db54 <_Bfree+0x3c>)
 800db30:	4809      	ldr	r0, [pc, #36]	; (800db58 <_Bfree+0x40>)
 800db32:	218f      	movs	r1, #143	; 0x8f
 800db34:	f7fe fa1a 	bl	800bf6c <__assert_func>
 800db38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db3c:	6006      	str	r6, [r0, #0]
 800db3e:	60c6      	str	r6, [r0, #12]
 800db40:	b13c      	cbz	r4, 800db52 <_Bfree+0x3a>
 800db42:	69eb      	ldr	r3, [r5, #28]
 800db44:	6862      	ldr	r2, [r4, #4]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db4c:	6021      	str	r1, [r4, #0]
 800db4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db52:	bd70      	pop	{r4, r5, r6, pc}
 800db54:	08013569 	.word	0x08013569
 800db58:	08013653 	.word	0x08013653

0800db5c <__multadd>:
 800db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db60:	690d      	ldr	r5, [r1, #16]
 800db62:	4607      	mov	r7, r0
 800db64:	460c      	mov	r4, r1
 800db66:	461e      	mov	r6, r3
 800db68:	f101 0c14 	add.w	ip, r1, #20
 800db6c:	2000      	movs	r0, #0
 800db6e:	f8dc 3000 	ldr.w	r3, [ip]
 800db72:	b299      	uxth	r1, r3
 800db74:	fb02 6101 	mla	r1, r2, r1, r6
 800db78:	0c1e      	lsrs	r6, r3, #16
 800db7a:	0c0b      	lsrs	r3, r1, #16
 800db7c:	fb02 3306 	mla	r3, r2, r6, r3
 800db80:	b289      	uxth	r1, r1
 800db82:	3001      	adds	r0, #1
 800db84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db88:	4285      	cmp	r5, r0
 800db8a:	f84c 1b04 	str.w	r1, [ip], #4
 800db8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db92:	dcec      	bgt.n	800db6e <__multadd+0x12>
 800db94:	b30e      	cbz	r6, 800dbda <__multadd+0x7e>
 800db96:	68a3      	ldr	r3, [r4, #8]
 800db98:	42ab      	cmp	r3, r5
 800db9a:	dc19      	bgt.n	800dbd0 <__multadd+0x74>
 800db9c:	6861      	ldr	r1, [r4, #4]
 800db9e:	4638      	mov	r0, r7
 800dba0:	3101      	adds	r1, #1
 800dba2:	f7ff ff79 	bl	800da98 <_Balloc>
 800dba6:	4680      	mov	r8, r0
 800dba8:	b928      	cbnz	r0, 800dbb6 <__multadd+0x5a>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	4b0c      	ldr	r3, [pc, #48]	; (800dbe0 <__multadd+0x84>)
 800dbae:	480d      	ldr	r0, [pc, #52]	; (800dbe4 <__multadd+0x88>)
 800dbb0:	21ba      	movs	r1, #186	; 0xba
 800dbb2:	f7fe f9db 	bl	800bf6c <__assert_func>
 800dbb6:	6922      	ldr	r2, [r4, #16]
 800dbb8:	3202      	adds	r2, #2
 800dbba:	f104 010c 	add.w	r1, r4, #12
 800dbbe:	0092      	lsls	r2, r2, #2
 800dbc0:	300c      	adds	r0, #12
 800dbc2:	f7ff fba4 	bl	800d30e <memcpy>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	4638      	mov	r0, r7
 800dbca:	f7ff ffa5 	bl	800db18 <_Bfree>
 800dbce:	4644      	mov	r4, r8
 800dbd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbd4:	3501      	adds	r5, #1
 800dbd6:	615e      	str	r6, [r3, #20]
 800dbd8:	6125      	str	r5, [r4, #16]
 800dbda:	4620      	mov	r0, r4
 800dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe0:	080135e2 	.word	0x080135e2
 800dbe4:	08013653 	.word	0x08013653

0800dbe8 <__s2b>:
 800dbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbec:	460c      	mov	r4, r1
 800dbee:	4615      	mov	r5, r2
 800dbf0:	461f      	mov	r7, r3
 800dbf2:	2209      	movs	r2, #9
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	2201      	movs	r2, #1
 800dc00:	429a      	cmp	r2, r3
 800dc02:	db09      	blt.n	800dc18 <__s2b+0x30>
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7ff ff47 	bl	800da98 <_Balloc>
 800dc0a:	b940      	cbnz	r0, 800dc1e <__s2b+0x36>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	4b19      	ldr	r3, [pc, #100]	; (800dc74 <__s2b+0x8c>)
 800dc10:	4819      	ldr	r0, [pc, #100]	; (800dc78 <__s2b+0x90>)
 800dc12:	21d3      	movs	r1, #211	; 0xd3
 800dc14:	f7fe f9aa 	bl	800bf6c <__assert_func>
 800dc18:	0052      	lsls	r2, r2, #1
 800dc1a:	3101      	adds	r1, #1
 800dc1c:	e7f0      	b.n	800dc00 <__s2b+0x18>
 800dc1e:	9b08      	ldr	r3, [sp, #32]
 800dc20:	6143      	str	r3, [r0, #20]
 800dc22:	2d09      	cmp	r5, #9
 800dc24:	f04f 0301 	mov.w	r3, #1
 800dc28:	6103      	str	r3, [r0, #16]
 800dc2a:	dd16      	ble.n	800dc5a <__s2b+0x72>
 800dc2c:	f104 0909 	add.w	r9, r4, #9
 800dc30:	46c8      	mov	r8, r9
 800dc32:	442c      	add	r4, r5
 800dc34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dc38:	4601      	mov	r1, r0
 800dc3a:	3b30      	subs	r3, #48	; 0x30
 800dc3c:	220a      	movs	r2, #10
 800dc3e:	4630      	mov	r0, r6
 800dc40:	f7ff ff8c 	bl	800db5c <__multadd>
 800dc44:	45a0      	cmp	r8, r4
 800dc46:	d1f5      	bne.n	800dc34 <__s2b+0x4c>
 800dc48:	f1a5 0408 	sub.w	r4, r5, #8
 800dc4c:	444c      	add	r4, r9
 800dc4e:	1b2d      	subs	r5, r5, r4
 800dc50:	1963      	adds	r3, r4, r5
 800dc52:	42bb      	cmp	r3, r7
 800dc54:	db04      	blt.n	800dc60 <__s2b+0x78>
 800dc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc5a:	340a      	adds	r4, #10
 800dc5c:	2509      	movs	r5, #9
 800dc5e:	e7f6      	b.n	800dc4e <__s2b+0x66>
 800dc60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc64:	4601      	mov	r1, r0
 800dc66:	3b30      	subs	r3, #48	; 0x30
 800dc68:	220a      	movs	r2, #10
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f7ff ff76 	bl	800db5c <__multadd>
 800dc70:	e7ee      	b.n	800dc50 <__s2b+0x68>
 800dc72:	bf00      	nop
 800dc74:	080135e2 	.word	0x080135e2
 800dc78:	08013653 	.word	0x08013653

0800dc7c <__hi0bits>:
 800dc7c:	0c03      	lsrs	r3, r0, #16
 800dc7e:	041b      	lsls	r3, r3, #16
 800dc80:	b9d3      	cbnz	r3, 800dcb8 <__hi0bits+0x3c>
 800dc82:	0400      	lsls	r0, r0, #16
 800dc84:	2310      	movs	r3, #16
 800dc86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dc8a:	bf04      	itt	eq
 800dc8c:	0200      	lsleq	r0, r0, #8
 800dc8e:	3308      	addeq	r3, #8
 800dc90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dc94:	bf04      	itt	eq
 800dc96:	0100      	lsleq	r0, r0, #4
 800dc98:	3304      	addeq	r3, #4
 800dc9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dc9e:	bf04      	itt	eq
 800dca0:	0080      	lsleq	r0, r0, #2
 800dca2:	3302      	addeq	r3, #2
 800dca4:	2800      	cmp	r0, #0
 800dca6:	db05      	blt.n	800dcb4 <__hi0bits+0x38>
 800dca8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dcac:	f103 0301 	add.w	r3, r3, #1
 800dcb0:	bf08      	it	eq
 800dcb2:	2320      	moveq	r3, #32
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	4770      	bx	lr
 800dcb8:	2300      	movs	r3, #0
 800dcba:	e7e4      	b.n	800dc86 <__hi0bits+0xa>

0800dcbc <__lo0bits>:
 800dcbc:	6803      	ldr	r3, [r0, #0]
 800dcbe:	f013 0207 	ands.w	r2, r3, #7
 800dcc2:	d00c      	beq.n	800dcde <__lo0bits+0x22>
 800dcc4:	07d9      	lsls	r1, r3, #31
 800dcc6:	d422      	bmi.n	800dd0e <__lo0bits+0x52>
 800dcc8:	079a      	lsls	r2, r3, #30
 800dcca:	bf49      	itett	mi
 800dccc:	085b      	lsrmi	r3, r3, #1
 800dcce:	089b      	lsrpl	r3, r3, #2
 800dcd0:	6003      	strmi	r3, [r0, #0]
 800dcd2:	2201      	movmi	r2, #1
 800dcd4:	bf5c      	itt	pl
 800dcd6:	6003      	strpl	r3, [r0, #0]
 800dcd8:	2202      	movpl	r2, #2
 800dcda:	4610      	mov	r0, r2
 800dcdc:	4770      	bx	lr
 800dcde:	b299      	uxth	r1, r3
 800dce0:	b909      	cbnz	r1, 800dce6 <__lo0bits+0x2a>
 800dce2:	0c1b      	lsrs	r3, r3, #16
 800dce4:	2210      	movs	r2, #16
 800dce6:	b2d9      	uxtb	r1, r3
 800dce8:	b909      	cbnz	r1, 800dcee <__lo0bits+0x32>
 800dcea:	3208      	adds	r2, #8
 800dcec:	0a1b      	lsrs	r3, r3, #8
 800dcee:	0719      	lsls	r1, r3, #28
 800dcf0:	bf04      	itt	eq
 800dcf2:	091b      	lsreq	r3, r3, #4
 800dcf4:	3204      	addeq	r2, #4
 800dcf6:	0799      	lsls	r1, r3, #30
 800dcf8:	bf04      	itt	eq
 800dcfa:	089b      	lsreq	r3, r3, #2
 800dcfc:	3202      	addeq	r2, #2
 800dcfe:	07d9      	lsls	r1, r3, #31
 800dd00:	d403      	bmi.n	800dd0a <__lo0bits+0x4e>
 800dd02:	085b      	lsrs	r3, r3, #1
 800dd04:	f102 0201 	add.w	r2, r2, #1
 800dd08:	d003      	beq.n	800dd12 <__lo0bits+0x56>
 800dd0a:	6003      	str	r3, [r0, #0]
 800dd0c:	e7e5      	b.n	800dcda <__lo0bits+0x1e>
 800dd0e:	2200      	movs	r2, #0
 800dd10:	e7e3      	b.n	800dcda <__lo0bits+0x1e>
 800dd12:	2220      	movs	r2, #32
 800dd14:	e7e1      	b.n	800dcda <__lo0bits+0x1e>
	...

0800dd18 <__i2b>:
 800dd18:	b510      	push	{r4, lr}
 800dd1a:	460c      	mov	r4, r1
 800dd1c:	2101      	movs	r1, #1
 800dd1e:	f7ff febb 	bl	800da98 <_Balloc>
 800dd22:	4602      	mov	r2, r0
 800dd24:	b928      	cbnz	r0, 800dd32 <__i2b+0x1a>
 800dd26:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <__i2b+0x24>)
 800dd28:	4805      	ldr	r0, [pc, #20]	; (800dd40 <__i2b+0x28>)
 800dd2a:	f240 1145 	movw	r1, #325	; 0x145
 800dd2e:	f7fe f91d 	bl	800bf6c <__assert_func>
 800dd32:	2301      	movs	r3, #1
 800dd34:	6144      	str	r4, [r0, #20]
 800dd36:	6103      	str	r3, [r0, #16]
 800dd38:	bd10      	pop	{r4, pc}
 800dd3a:	bf00      	nop
 800dd3c:	080135e2 	.word	0x080135e2
 800dd40:	08013653 	.word	0x08013653

0800dd44 <__multiply>:
 800dd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd48:	4691      	mov	r9, r2
 800dd4a:	690a      	ldr	r2, [r1, #16]
 800dd4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	bfb8      	it	lt
 800dd54:	460b      	movlt	r3, r1
 800dd56:	460c      	mov	r4, r1
 800dd58:	bfbc      	itt	lt
 800dd5a:	464c      	movlt	r4, r9
 800dd5c:	4699      	movlt	r9, r3
 800dd5e:	6927      	ldr	r7, [r4, #16]
 800dd60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	6861      	ldr	r1, [r4, #4]
 800dd68:	eb07 060a 	add.w	r6, r7, sl
 800dd6c:	42b3      	cmp	r3, r6
 800dd6e:	b085      	sub	sp, #20
 800dd70:	bfb8      	it	lt
 800dd72:	3101      	addlt	r1, #1
 800dd74:	f7ff fe90 	bl	800da98 <_Balloc>
 800dd78:	b930      	cbnz	r0, 800dd88 <__multiply+0x44>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	4b44      	ldr	r3, [pc, #272]	; (800de90 <__multiply+0x14c>)
 800dd7e:	4845      	ldr	r0, [pc, #276]	; (800de94 <__multiply+0x150>)
 800dd80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dd84:	f7fe f8f2 	bl	800bf6c <__assert_func>
 800dd88:	f100 0514 	add.w	r5, r0, #20
 800dd8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd90:	462b      	mov	r3, r5
 800dd92:	2200      	movs	r2, #0
 800dd94:	4543      	cmp	r3, r8
 800dd96:	d321      	bcc.n	800dddc <__multiply+0x98>
 800dd98:	f104 0314 	add.w	r3, r4, #20
 800dd9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dda0:	f109 0314 	add.w	r3, r9, #20
 800dda4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dda8:	9202      	str	r2, [sp, #8]
 800ddaa:	1b3a      	subs	r2, r7, r4
 800ddac:	3a15      	subs	r2, #21
 800ddae:	f022 0203 	bic.w	r2, r2, #3
 800ddb2:	3204      	adds	r2, #4
 800ddb4:	f104 0115 	add.w	r1, r4, #21
 800ddb8:	428f      	cmp	r7, r1
 800ddba:	bf38      	it	cc
 800ddbc:	2204      	movcc	r2, #4
 800ddbe:	9201      	str	r2, [sp, #4]
 800ddc0:	9a02      	ldr	r2, [sp, #8]
 800ddc2:	9303      	str	r3, [sp, #12]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d80c      	bhi.n	800dde2 <__multiply+0x9e>
 800ddc8:	2e00      	cmp	r6, #0
 800ddca:	dd03      	ble.n	800ddd4 <__multiply+0x90>
 800ddcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d05b      	beq.n	800de8c <__multiply+0x148>
 800ddd4:	6106      	str	r6, [r0, #16]
 800ddd6:	b005      	add	sp, #20
 800ddd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dddc:	f843 2b04 	str.w	r2, [r3], #4
 800dde0:	e7d8      	b.n	800dd94 <__multiply+0x50>
 800dde2:	f8b3 a000 	ldrh.w	sl, [r3]
 800dde6:	f1ba 0f00 	cmp.w	sl, #0
 800ddea:	d024      	beq.n	800de36 <__multiply+0xf2>
 800ddec:	f104 0e14 	add.w	lr, r4, #20
 800ddf0:	46a9      	mov	r9, r5
 800ddf2:	f04f 0c00 	mov.w	ip, #0
 800ddf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ddfa:	f8d9 1000 	ldr.w	r1, [r9]
 800ddfe:	fa1f fb82 	uxth.w	fp, r2
 800de02:	b289      	uxth	r1, r1
 800de04:	fb0a 110b 	mla	r1, sl, fp, r1
 800de08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800de0c:	f8d9 2000 	ldr.w	r2, [r9]
 800de10:	4461      	add	r1, ip
 800de12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de16:	fb0a c20b 	mla	r2, sl, fp, ip
 800de1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800de1e:	b289      	uxth	r1, r1
 800de20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800de24:	4577      	cmp	r7, lr
 800de26:	f849 1b04 	str.w	r1, [r9], #4
 800de2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de2e:	d8e2      	bhi.n	800ddf6 <__multiply+0xb2>
 800de30:	9a01      	ldr	r2, [sp, #4]
 800de32:	f845 c002 	str.w	ip, [r5, r2]
 800de36:	9a03      	ldr	r2, [sp, #12]
 800de38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800de3c:	3304      	adds	r3, #4
 800de3e:	f1b9 0f00 	cmp.w	r9, #0
 800de42:	d021      	beq.n	800de88 <__multiply+0x144>
 800de44:	6829      	ldr	r1, [r5, #0]
 800de46:	f104 0c14 	add.w	ip, r4, #20
 800de4a:	46ae      	mov	lr, r5
 800de4c:	f04f 0a00 	mov.w	sl, #0
 800de50:	f8bc b000 	ldrh.w	fp, [ip]
 800de54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800de58:	fb09 220b 	mla	r2, r9, fp, r2
 800de5c:	4452      	add	r2, sl
 800de5e:	b289      	uxth	r1, r1
 800de60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800de64:	f84e 1b04 	str.w	r1, [lr], #4
 800de68:	f85c 1b04 	ldr.w	r1, [ip], #4
 800de6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de70:	f8be 1000 	ldrh.w	r1, [lr]
 800de74:	fb09 110a 	mla	r1, r9, sl, r1
 800de78:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800de7c:	4567      	cmp	r7, ip
 800de7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de82:	d8e5      	bhi.n	800de50 <__multiply+0x10c>
 800de84:	9a01      	ldr	r2, [sp, #4]
 800de86:	50a9      	str	r1, [r5, r2]
 800de88:	3504      	adds	r5, #4
 800de8a:	e799      	b.n	800ddc0 <__multiply+0x7c>
 800de8c:	3e01      	subs	r6, #1
 800de8e:	e79b      	b.n	800ddc8 <__multiply+0x84>
 800de90:	080135e2 	.word	0x080135e2
 800de94:	08013653 	.word	0x08013653

0800de98 <__pow5mult>:
 800de98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de9c:	4615      	mov	r5, r2
 800de9e:	f012 0203 	ands.w	r2, r2, #3
 800dea2:	4606      	mov	r6, r0
 800dea4:	460f      	mov	r7, r1
 800dea6:	d007      	beq.n	800deb8 <__pow5mult+0x20>
 800dea8:	4c25      	ldr	r4, [pc, #148]	; (800df40 <__pow5mult+0xa8>)
 800deaa:	3a01      	subs	r2, #1
 800deac:	2300      	movs	r3, #0
 800deae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800deb2:	f7ff fe53 	bl	800db5c <__multadd>
 800deb6:	4607      	mov	r7, r0
 800deb8:	10ad      	asrs	r5, r5, #2
 800deba:	d03d      	beq.n	800df38 <__pow5mult+0xa0>
 800debc:	69f4      	ldr	r4, [r6, #28]
 800debe:	b97c      	cbnz	r4, 800dee0 <__pow5mult+0x48>
 800dec0:	2010      	movs	r0, #16
 800dec2:	f7fe f88f 	bl	800bfe4 <malloc>
 800dec6:	4602      	mov	r2, r0
 800dec8:	61f0      	str	r0, [r6, #28]
 800deca:	b928      	cbnz	r0, 800ded8 <__pow5mult+0x40>
 800decc:	4b1d      	ldr	r3, [pc, #116]	; (800df44 <__pow5mult+0xac>)
 800dece:	481e      	ldr	r0, [pc, #120]	; (800df48 <__pow5mult+0xb0>)
 800ded0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ded4:	f7fe f84a 	bl	800bf6c <__assert_func>
 800ded8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dedc:	6004      	str	r4, [r0, #0]
 800dede:	60c4      	str	r4, [r0, #12]
 800dee0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dee8:	b94c      	cbnz	r4, 800defe <__pow5mult+0x66>
 800deea:	f240 2171 	movw	r1, #625	; 0x271
 800deee:	4630      	mov	r0, r6
 800def0:	f7ff ff12 	bl	800dd18 <__i2b>
 800def4:	2300      	movs	r3, #0
 800def6:	f8c8 0008 	str.w	r0, [r8, #8]
 800defa:	4604      	mov	r4, r0
 800defc:	6003      	str	r3, [r0, #0]
 800defe:	f04f 0900 	mov.w	r9, #0
 800df02:	07eb      	lsls	r3, r5, #31
 800df04:	d50a      	bpl.n	800df1c <__pow5mult+0x84>
 800df06:	4639      	mov	r1, r7
 800df08:	4622      	mov	r2, r4
 800df0a:	4630      	mov	r0, r6
 800df0c:	f7ff ff1a 	bl	800dd44 <__multiply>
 800df10:	4639      	mov	r1, r7
 800df12:	4680      	mov	r8, r0
 800df14:	4630      	mov	r0, r6
 800df16:	f7ff fdff 	bl	800db18 <_Bfree>
 800df1a:	4647      	mov	r7, r8
 800df1c:	106d      	asrs	r5, r5, #1
 800df1e:	d00b      	beq.n	800df38 <__pow5mult+0xa0>
 800df20:	6820      	ldr	r0, [r4, #0]
 800df22:	b938      	cbnz	r0, 800df34 <__pow5mult+0x9c>
 800df24:	4622      	mov	r2, r4
 800df26:	4621      	mov	r1, r4
 800df28:	4630      	mov	r0, r6
 800df2a:	f7ff ff0b 	bl	800dd44 <__multiply>
 800df2e:	6020      	str	r0, [r4, #0]
 800df30:	f8c0 9000 	str.w	r9, [r0]
 800df34:	4604      	mov	r4, r0
 800df36:	e7e4      	b.n	800df02 <__pow5mult+0x6a>
 800df38:	4638      	mov	r0, r7
 800df3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df3e:	bf00      	nop
 800df40:	080137a0 	.word	0x080137a0
 800df44:	08013569 	.word	0x08013569
 800df48:	08013653 	.word	0x08013653

0800df4c <__lshift>:
 800df4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df50:	460c      	mov	r4, r1
 800df52:	6849      	ldr	r1, [r1, #4]
 800df54:	6923      	ldr	r3, [r4, #16]
 800df56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df5a:	68a3      	ldr	r3, [r4, #8]
 800df5c:	4607      	mov	r7, r0
 800df5e:	4691      	mov	r9, r2
 800df60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df64:	f108 0601 	add.w	r6, r8, #1
 800df68:	42b3      	cmp	r3, r6
 800df6a:	db0b      	blt.n	800df84 <__lshift+0x38>
 800df6c:	4638      	mov	r0, r7
 800df6e:	f7ff fd93 	bl	800da98 <_Balloc>
 800df72:	4605      	mov	r5, r0
 800df74:	b948      	cbnz	r0, 800df8a <__lshift+0x3e>
 800df76:	4602      	mov	r2, r0
 800df78:	4b28      	ldr	r3, [pc, #160]	; (800e01c <__lshift+0xd0>)
 800df7a:	4829      	ldr	r0, [pc, #164]	; (800e020 <__lshift+0xd4>)
 800df7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800df80:	f7fd fff4 	bl	800bf6c <__assert_func>
 800df84:	3101      	adds	r1, #1
 800df86:	005b      	lsls	r3, r3, #1
 800df88:	e7ee      	b.n	800df68 <__lshift+0x1c>
 800df8a:	2300      	movs	r3, #0
 800df8c:	f100 0114 	add.w	r1, r0, #20
 800df90:	f100 0210 	add.w	r2, r0, #16
 800df94:	4618      	mov	r0, r3
 800df96:	4553      	cmp	r3, sl
 800df98:	db33      	blt.n	800e002 <__lshift+0xb6>
 800df9a:	6920      	ldr	r0, [r4, #16]
 800df9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dfa0:	f104 0314 	add.w	r3, r4, #20
 800dfa4:	f019 091f 	ands.w	r9, r9, #31
 800dfa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dfb0:	d02b      	beq.n	800e00a <__lshift+0xbe>
 800dfb2:	f1c9 0e20 	rsb	lr, r9, #32
 800dfb6:	468a      	mov	sl, r1
 800dfb8:	2200      	movs	r2, #0
 800dfba:	6818      	ldr	r0, [r3, #0]
 800dfbc:	fa00 f009 	lsl.w	r0, r0, r9
 800dfc0:	4310      	orrs	r0, r2
 800dfc2:	f84a 0b04 	str.w	r0, [sl], #4
 800dfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfca:	459c      	cmp	ip, r3
 800dfcc:	fa22 f20e 	lsr.w	r2, r2, lr
 800dfd0:	d8f3      	bhi.n	800dfba <__lshift+0x6e>
 800dfd2:	ebac 0304 	sub.w	r3, ip, r4
 800dfd6:	3b15      	subs	r3, #21
 800dfd8:	f023 0303 	bic.w	r3, r3, #3
 800dfdc:	3304      	adds	r3, #4
 800dfde:	f104 0015 	add.w	r0, r4, #21
 800dfe2:	4584      	cmp	ip, r0
 800dfe4:	bf38      	it	cc
 800dfe6:	2304      	movcc	r3, #4
 800dfe8:	50ca      	str	r2, [r1, r3]
 800dfea:	b10a      	cbz	r2, 800dff0 <__lshift+0xa4>
 800dfec:	f108 0602 	add.w	r6, r8, #2
 800dff0:	3e01      	subs	r6, #1
 800dff2:	4638      	mov	r0, r7
 800dff4:	612e      	str	r6, [r5, #16]
 800dff6:	4621      	mov	r1, r4
 800dff8:	f7ff fd8e 	bl	800db18 <_Bfree>
 800dffc:	4628      	mov	r0, r5
 800dffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e002:	f842 0f04 	str.w	r0, [r2, #4]!
 800e006:	3301      	adds	r3, #1
 800e008:	e7c5      	b.n	800df96 <__lshift+0x4a>
 800e00a:	3904      	subs	r1, #4
 800e00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e010:	f841 2f04 	str.w	r2, [r1, #4]!
 800e014:	459c      	cmp	ip, r3
 800e016:	d8f9      	bhi.n	800e00c <__lshift+0xc0>
 800e018:	e7ea      	b.n	800dff0 <__lshift+0xa4>
 800e01a:	bf00      	nop
 800e01c:	080135e2 	.word	0x080135e2
 800e020:	08013653 	.word	0x08013653

0800e024 <__mcmp>:
 800e024:	b530      	push	{r4, r5, lr}
 800e026:	6902      	ldr	r2, [r0, #16]
 800e028:	690c      	ldr	r4, [r1, #16]
 800e02a:	1b12      	subs	r2, r2, r4
 800e02c:	d10e      	bne.n	800e04c <__mcmp+0x28>
 800e02e:	f100 0314 	add.w	r3, r0, #20
 800e032:	3114      	adds	r1, #20
 800e034:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e038:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e03c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e040:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e044:	42a5      	cmp	r5, r4
 800e046:	d003      	beq.n	800e050 <__mcmp+0x2c>
 800e048:	d305      	bcc.n	800e056 <__mcmp+0x32>
 800e04a:	2201      	movs	r2, #1
 800e04c:	4610      	mov	r0, r2
 800e04e:	bd30      	pop	{r4, r5, pc}
 800e050:	4283      	cmp	r3, r0
 800e052:	d3f3      	bcc.n	800e03c <__mcmp+0x18>
 800e054:	e7fa      	b.n	800e04c <__mcmp+0x28>
 800e056:	f04f 32ff 	mov.w	r2, #4294967295
 800e05a:	e7f7      	b.n	800e04c <__mcmp+0x28>

0800e05c <__mdiff>:
 800e05c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e060:	460c      	mov	r4, r1
 800e062:	4606      	mov	r6, r0
 800e064:	4611      	mov	r1, r2
 800e066:	4620      	mov	r0, r4
 800e068:	4690      	mov	r8, r2
 800e06a:	f7ff ffdb 	bl	800e024 <__mcmp>
 800e06e:	1e05      	subs	r5, r0, #0
 800e070:	d110      	bne.n	800e094 <__mdiff+0x38>
 800e072:	4629      	mov	r1, r5
 800e074:	4630      	mov	r0, r6
 800e076:	f7ff fd0f 	bl	800da98 <_Balloc>
 800e07a:	b930      	cbnz	r0, 800e08a <__mdiff+0x2e>
 800e07c:	4b3a      	ldr	r3, [pc, #232]	; (800e168 <__mdiff+0x10c>)
 800e07e:	4602      	mov	r2, r0
 800e080:	f240 2137 	movw	r1, #567	; 0x237
 800e084:	4839      	ldr	r0, [pc, #228]	; (800e16c <__mdiff+0x110>)
 800e086:	f7fd ff71 	bl	800bf6c <__assert_func>
 800e08a:	2301      	movs	r3, #1
 800e08c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e094:	bfa4      	itt	ge
 800e096:	4643      	movge	r3, r8
 800e098:	46a0      	movge	r8, r4
 800e09a:	4630      	mov	r0, r6
 800e09c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e0a0:	bfa6      	itte	ge
 800e0a2:	461c      	movge	r4, r3
 800e0a4:	2500      	movge	r5, #0
 800e0a6:	2501      	movlt	r5, #1
 800e0a8:	f7ff fcf6 	bl	800da98 <_Balloc>
 800e0ac:	b920      	cbnz	r0, 800e0b8 <__mdiff+0x5c>
 800e0ae:	4b2e      	ldr	r3, [pc, #184]	; (800e168 <__mdiff+0x10c>)
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	f240 2145 	movw	r1, #581	; 0x245
 800e0b6:	e7e5      	b.n	800e084 <__mdiff+0x28>
 800e0b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e0bc:	6926      	ldr	r6, [r4, #16]
 800e0be:	60c5      	str	r5, [r0, #12]
 800e0c0:	f104 0914 	add.w	r9, r4, #20
 800e0c4:	f108 0514 	add.w	r5, r8, #20
 800e0c8:	f100 0e14 	add.w	lr, r0, #20
 800e0cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e0d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e0d4:	f108 0210 	add.w	r2, r8, #16
 800e0d8:	46f2      	mov	sl, lr
 800e0da:	2100      	movs	r1, #0
 800e0dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e0e4:	fa11 f88b 	uxtah	r8, r1, fp
 800e0e8:	b299      	uxth	r1, r3
 800e0ea:	0c1b      	lsrs	r3, r3, #16
 800e0ec:	eba8 0801 	sub.w	r8, r8, r1
 800e0f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e0f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e0f8:	fa1f f888 	uxth.w	r8, r8
 800e0fc:	1419      	asrs	r1, r3, #16
 800e0fe:	454e      	cmp	r6, r9
 800e100:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e104:	f84a 3b04 	str.w	r3, [sl], #4
 800e108:	d8e8      	bhi.n	800e0dc <__mdiff+0x80>
 800e10a:	1b33      	subs	r3, r6, r4
 800e10c:	3b15      	subs	r3, #21
 800e10e:	f023 0303 	bic.w	r3, r3, #3
 800e112:	3304      	adds	r3, #4
 800e114:	3415      	adds	r4, #21
 800e116:	42a6      	cmp	r6, r4
 800e118:	bf38      	it	cc
 800e11a:	2304      	movcc	r3, #4
 800e11c:	441d      	add	r5, r3
 800e11e:	4473      	add	r3, lr
 800e120:	469e      	mov	lr, r3
 800e122:	462e      	mov	r6, r5
 800e124:	4566      	cmp	r6, ip
 800e126:	d30e      	bcc.n	800e146 <__mdiff+0xea>
 800e128:	f10c 0203 	add.w	r2, ip, #3
 800e12c:	1b52      	subs	r2, r2, r5
 800e12e:	f022 0203 	bic.w	r2, r2, #3
 800e132:	3d03      	subs	r5, #3
 800e134:	45ac      	cmp	ip, r5
 800e136:	bf38      	it	cc
 800e138:	2200      	movcc	r2, #0
 800e13a:	4413      	add	r3, r2
 800e13c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e140:	b17a      	cbz	r2, 800e162 <__mdiff+0x106>
 800e142:	6107      	str	r7, [r0, #16]
 800e144:	e7a4      	b.n	800e090 <__mdiff+0x34>
 800e146:	f856 8b04 	ldr.w	r8, [r6], #4
 800e14a:	fa11 f288 	uxtah	r2, r1, r8
 800e14e:	1414      	asrs	r4, r2, #16
 800e150:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e154:	b292      	uxth	r2, r2
 800e156:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e15a:	f84e 2b04 	str.w	r2, [lr], #4
 800e15e:	1421      	asrs	r1, r4, #16
 800e160:	e7e0      	b.n	800e124 <__mdiff+0xc8>
 800e162:	3f01      	subs	r7, #1
 800e164:	e7ea      	b.n	800e13c <__mdiff+0xe0>
 800e166:	bf00      	nop
 800e168:	080135e2 	.word	0x080135e2
 800e16c:	08013653 	.word	0x08013653

0800e170 <__ulp>:
 800e170:	b082      	sub	sp, #8
 800e172:	ed8d 0b00 	vstr	d0, [sp]
 800e176:	9a01      	ldr	r2, [sp, #4]
 800e178:	4b0f      	ldr	r3, [pc, #60]	; (800e1b8 <__ulp+0x48>)
 800e17a:	4013      	ands	r3, r2
 800e17c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e180:	2b00      	cmp	r3, #0
 800e182:	dc08      	bgt.n	800e196 <__ulp+0x26>
 800e184:	425b      	negs	r3, r3
 800e186:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e18a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e18e:	da04      	bge.n	800e19a <__ulp+0x2a>
 800e190:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e194:	4113      	asrs	r3, r2
 800e196:	2200      	movs	r2, #0
 800e198:	e008      	b.n	800e1ac <__ulp+0x3c>
 800e19a:	f1a2 0314 	sub.w	r3, r2, #20
 800e19e:	2b1e      	cmp	r3, #30
 800e1a0:	bfda      	itte	le
 800e1a2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e1a6:	40da      	lsrle	r2, r3
 800e1a8:	2201      	movgt	r2, #1
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	ec41 0b10 	vmov	d0, r0, r1
 800e1b4:	b002      	add	sp, #8
 800e1b6:	4770      	bx	lr
 800e1b8:	7ff00000 	.word	0x7ff00000

0800e1bc <__b2d>:
 800e1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c0:	6906      	ldr	r6, [r0, #16]
 800e1c2:	f100 0814 	add.w	r8, r0, #20
 800e1c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e1ca:	1f37      	subs	r7, r6, #4
 800e1cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7ff fd53 	bl	800dc7c <__hi0bits>
 800e1d6:	f1c0 0320 	rsb	r3, r0, #32
 800e1da:	280a      	cmp	r0, #10
 800e1dc:	600b      	str	r3, [r1, #0]
 800e1de:	491b      	ldr	r1, [pc, #108]	; (800e24c <__b2d+0x90>)
 800e1e0:	dc15      	bgt.n	800e20e <__b2d+0x52>
 800e1e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800e1e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800e1ea:	45b8      	cmp	r8, r7
 800e1ec:	ea43 0501 	orr.w	r5, r3, r1
 800e1f0:	bf34      	ite	cc
 800e1f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e1f6:	2300      	movcs	r3, #0
 800e1f8:	3015      	adds	r0, #21
 800e1fa:	fa02 f000 	lsl.w	r0, r2, r0
 800e1fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800e202:	4303      	orrs	r3, r0
 800e204:	461c      	mov	r4, r3
 800e206:	ec45 4b10 	vmov	d0, r4, r5
 800e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e20e:	45b8      	cmp	r8, r7
 800e210:	bf3a      	itte	cc
 800e212:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e216:	f1a6 0708 	subcc.w	r7, r6, #8
 800e21a:	2300      	movcs	r3, #0
 800e21c:	380b      	subs	r0, #11
 800e21e:	d012      	beq.n	800e246 <__b2d+0x8a>
 800e220:	f1c0 0120 	rsb	r1, r0, #32
 800e224:	fa23 f401 	lsr.w	r4, r3, r1
 800e228:	4082      	lsls	r2, r0
 800e22a:	4322      	orrs	r2, r4
 800e22c:	4547      	cmp	r7, r8
 800e22e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e232:	bf8c      	ite	hi
 800e234:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e238:	2200      	movls	r2, #0
 800e23a:	4083      	lsls	r3, r0
 800e23c:	40ca      	lsrs	r2, r1
 800e23e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e242:	4313      	orrs	r3, r2
 800e244:	e7de      	b.n	800e204 <__b2d+0x48>
 800e246:	ea42 0501 	orr.w	r5, r2, r1
 800e24a:	e7db      	b.n	800e204 <__b2d+0x48>
 800e24c:	3ff00000 	.word	0x3ff00000

0800e250 <__d2b>:
 800e250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e254:	460f      	mov	r7, r1
 800e256:	2101      	movs	r1, #1
 800e258:	ec59 8b10 	vmov	r8, r9, d0
 800e25c:	4616      	mov	r6, r2
 800e25e:	f7ff fc1b 	bl	800da98 <_Balloc>
 800e262:	4604      	mov	r4, r0
 800e264:	b930      	cbnz	r0, 800e274 <__d2b+0x24>
 800e266:	4602      	mov	r2, r0
 800e268:	4b24      	ldr	r3, [pc, #144]	; (800e2fc <__d2b+0xac>)
 800e26a:	4825      	ldr	r0, [pc, #148]	; (800e300 <__d2b+0xb0>)
 800e26c:	f240 310f 	movw	r1, #783	; 0x30f
 800e270:	f7fd fe7c 	bl	800bf6c <__assert_func>
 800e274:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e27c:	bb2d      	cbnz	r5, 800e2ca <__d2b+0x7a>
 800e27e:	9301      	str	r3, [sp, #4]
 800e280:	f1b8 0300 	subs.w	r3, r8, #0
 800e284:	d026      	beq.n	800e2d4 <__d2b+0x84>
 800e286:	4668      	mov	r0, sp
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	f7ff fd17 	bl	800dcbc <__lo0bits>
 800e28e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e292:	b1e8      	cbz	r0, 800e2d0 <__d2b+0x80>
 800e294:	f1c0 0320 	rsb	r3, r0, #32
 800e298:	fa02 f303 	lsl.w	r3, r2, r3
 800e29c:	430b      	orrs	r3, r1
 800e29e:	40c2      	lsrs	r2, r0
 800e2a0:	6163      	str	r3, [r4, #20]
 800e2a2:	9201      	str	r2, [sp, #4]
 800e2a4:	9b01      	ldr	r3, [sp, #4]
 800e2a6:	61a3      	str	r3, [r4, #24]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	bf14      	ite	ne
 800e2ac:	2202      	movne	r2, #2
 800e2ae:	2201      	moveq	r2, #1
 800e2b0:	6122      	str	r2, [r4, #16]
 800e2b2:	b1bd      	cbz	r5, 800e2e4 <__d2b+0x94>
 800e2b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e2b8:	4405      	add	r5, r0
 800e2ba:	603d      	str	r5, [r7, #0]
 800e2bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e2c0:	6030      	str	r0, [r6, #0]
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	b003      	add	sp, #12
 800e2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2ce:	e7d6      	b.n	800e27e <__d2b+0x2e>
 800e2d0:	6161      	str	r1, [r4, #20]
 800e2d2:	e7e7      	b.n	800e2a4 <__d2b+0x54>
 800e2d4:	a801      	add	r0, sp, #4
 800e2d6:	f7ff fcf1 	bl	800dcbc <__lo0bits>
 800e2da:	9b01      	ldr	r3, [sp, #4]
 800e2dc:	6163      	str	r3, [r4, #20]
 800e2de:	3020      	adds	r0, #32
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	e7e5      	b.n	800e2b0 <__d2b+0x60>
 800e2e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2ec:	6038      	str	r0, [r7, #0]
 800e2ee:	6918      	ldr	r0, [r3, #16]
 800e2f0:	f7ff fcc4 	bl	800dc7c <__hi0bits>
 800e2f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2f8:	e7e2      	b.n	800e2c0 <__d2b+0x70>
 800e2fa:	bf00      	nop
 800e2fc:	080135e2 	.word	0x080135e2
 800e300:	08013653 	.word	0x08013653

0800e304 <__ratio>:
 800e304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e308:	4688      	mov	r8, r1
 800e30a:	4669      	mov	r1, sp
 800e30c:	4681      	mov	r9, r0
 800e30e:	f7ff ff55 	bl	800e1bc <__b2d>
 800e312:	a901      	add	r1, sp, #4
 800e314:	4640      	mov	r0, r8
 800e316:	ec55 4b10 	vmov	r4, r5, d0
 800e31a:	f7ff ff4f 	bl	800e1bc <__b2d>
 800e31e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e322:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e326:	eba3 0c02 	sub.w	ip, r3, r2
 800e32a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e32e:	1a9b      	subs	r3, r3, r2
 800e330:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e334:	ec51 0b10 	vmov	r0, r1, d0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	bfd6      	itet	le
 800e33c:	460a      	movle	r2, r1
 800e33e:	462a      	movgt	r2, r5
 800e340:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e344:	468b      	mov	fp, r1
 800e346:	462f      	mov	r7, r5
 800e348:	bfd4      	ite	le
 800e34a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e34e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e352:	4620      	mov	r0, r4
 800e354:	ee10 2a10 	vmov	r2, s0
 800e358:	465b      	mov	r3, fp
 800e35a:	4639      	mov	r1, r7
 800e35c:	f7f2 fa96 	bl	800088c <__aeabi_ddiv>
 800e360:	ec41 0b10 	vmov	d0, r0, r1
 800e364:	b003      	add	sp, #12
 800e366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e36a <__copybits>:
 800e36a:	3901      	subs	r1, #1
 800e36c:	b570      	push	{r4, r5, r6, lr}
 800e36e:	1149      	asrs	r1, r1, #5
 800e370:	6914      	ldr	r4, [r2, #16]
 800e372:	3101      	adds	r1, #1
 800e374:	f102 0314 	add.w	r3, r2, #20
 800e378:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e37c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e380:	1f05      	subs	r5, r0, #4
 800e382:	42a3      	cmp	r3, r4
 800e384:	d30c      	bcc.n	800e3a0 <__copybits+0x36>
 800e386:	1aa3      	subs	r3, r4, r2
 800e388:	3b11      	subs	r3, #17
 800e38a:	f023 0303 	bic.w	r3, r3, #3
 800e38e:	3211      	adds	r2, #17
 800e390:	42a2      	cmp	r2, r4
 800e392:	bf88      	it	hi
 800e394:	2300      	movhi	r3, #0
 800e396:	4418      	add	r0, r3
 800e398:	2300      	movs	r3, #0
 800e39a:	4288      	cmp	r0, r1
 800e39c:	d305      	bcc.n	800e3aa <__copybits+0x40>
 800e39e:	bd70      	pop	{r4, r5, r6, pc}
 800e3a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e3a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e3a8:	e7eb      	b.n	800e382 <__copybits+0x18>
 800e3aa:	f840 3b04 	str.w	r3, [r0], #4
 800e3ae:	e7f4      	b.n	800e39a <__copybits+0x30>

0800e3b0 <__any_on>:
 800e3b0:	f100 0214 	add.w	r2, r0, #20
 800e3b4:	6900      	ldr	r0, [r0, #16]
 800e3b6:	114b      	asrs	r3, r1, #5
 800e3b8:	4298      	cmp	r0, r3
 800e3ba:	b510      	push	{r4, lr}
 800e3bc:	db11      	blt.n	800e3e2 <__any_on+0x32>
 800e3be:	dd0a      	ble.n	800e3d6 <__any_on+0x26>
 800e3c0:	f011 011f 	ands.w	r1, r1, #31
 800e3c4:	d007      	beq.n	800e3d6 <__any_on+0x26>
 800e3c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e3ca:	fa24 f001 	lsr.w	r0, r4, r1
 800e3ce:	fa00 f101 	lsl.w	r1, r0, r1
 800e3d2:	428c      	cmp	r4, r1
 800e3d4:	d10b      	bne.n	800e3ee <__any_on+0x3e>
 800e3d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d803      	bhi.n	800e3e6 <__any_on+0x36>
 800e3de:	2000      	movs	r0, #0
 800e3e0:	bd10      	pop	{r4, pc}
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	e7f7      	b.n	800e3d6 <__any_on+0x26>
 800e3e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3ea:	2900      	cmp	r1, #0
 800e3ec:	d0f5      	beq.n	800e3da <__any_on+0x2a>
 800e3ee:	2001      	movs	r0, #1
 800e3f0:	e7f6      	b.n	800e3e0 <__any_on+0x30>

0800e3f2 <_malloc_usable_size_r>:
 800e3f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3f6:	1f18      	subs	r0, r3, #4
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	bfbc      	itt	lt
 800e3fc:	580b      	ldrlt	r3, [r1, r0]
 800e3fe:	18c0      	addlt	r0, r0, r3
 800e400:	4770      	bx	lr

0800e402 <__ascii_wctomb>:
 800e402:	b149      	cbz	r1, 800e418 <__ascii_wctomb+0x16>
 800e404:	2aff      	cmp	r2, #255	; 0xff
 800e406:	bf85      	ittet	hi
 800e408:	238a      	movhi	r3, #138	; 0x8a
 800e40a:	6003      	strhi	r3, [r0, #0]
 800e40c:	700a      	strbls	r2, [r1, #0]
 800e40e:	f04f 30ff 	movhi.w	r0, #4294967295
 800e412:	bf98      	it	ls
 800e414:	2001      	movls	r0, #1
 800e416:	4770      	bx	lr
 800e418:	4608      	mov	r0, r1
 800e41a:	4770      	bx	lr

0800e41c <__ssputs_r>:
 800e41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e420:	688e      	ldr	r6, [r1, #8]
 800e422:	461f      	mov	r7, r3
 800e424:	42be      	cmp	r6, r7
 800e426:	680b      	ldr	r3, [r1, #0]
 800e428:	4682      	mov	sl, r0
 800e42a:	460c      	mov	r4, r1
 800e42c:	4690      	mov	r8, r2
 800e42e:	d82c      	bhi.n	800e48a <__ssputs_r+0x6e>
 800e430:	898a      	ldrh	r2, [r1, #12]
 800e432:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e436:	d026      	beq.n	800e486 <__ssputs_r+0x6a>
 800e438:	6965      	ldr	r5, [r4, #20]
 800e43a:	6909      	ldr	r1, [r1, #16]
 800e43c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e440:	eba3 0901 	sub.w	r9, r3, r1
 800e444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e448:	1c7b      	adds	r3, r7, #1
 800e44a:	444b      	add	r3, r9
 800e44c:	106d      	asrs	r5, r5, #1
 800e44e:	429d      	cmp	r5, r3
 800e450:	bf38      	it	cc
 800e452:	461d      	movcc	r5, r3
 800e454:	0553      	lsls	r3, r2, #21
 800e456:	d527      	bpl.n	800e4a8 <__ssputs_r+0x8c>
 800e458:	4629      	mov	r1, r5
 800e45a:	f7fd fdf3 	bl	800c044 <_malloc_r>
 800e45e:	4606      	mov	r6, r0
 800e460:	b360      	cbz	r0, 800e4bc <__ssputs_r+0xa0>
 800e462:	6921      	ldr	r1, [r4, #16]
 800e464:	464a      	mov	r2, r9
 800e466:	f7fe ff52 	bl	800d30e <memcpy>
 800e46a:	89a3      	ldrh	r3, [r4, #12]
 800e46c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e474:	81a3      	strh	r3, [r4, #12]
 800e476:	6126      	str	r6, [r4, #16]
 800e478:	6165      	str	r5, [r4, #20]
 800e47a:	444e      	add	r6, r9
 800e47c:	eba5 0509 	sub.w	r5, r5, r9
 800e480:	6026      	str	r6, [r4, #0]
 800e482:	60a5      	str	r5, [r4, #8]
 800e484:	463e      	mov	r6, r7
 800e486:	42be      	cmp	r6, r7
 800e488:	d900      	bls.n	800e48c <__ssputs_r+0x70>
 800e48a:	463e      	mov	r6, r7
 800e48c:	6820      	ldr	r0, [r4, #0]
 800e48e:	4632      	mov	r2, r6
 800e490:	4641      	mov	r1, r8
 800e492:	f7fe fde5 	bl	800d060 <memmove>
 800e496:	68a3      	ldr	r3, [r4, #8]
 800e498:	1b9b      	subs	r3, r3, r6
 800e49a:	60a3      	str	r3, [r4, #8]
 800e49c:	6823      	ldr	r3, [r4, #0]
 800e49e:	4433      	add	r3, r6
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a8:	462a      	mov	r2, r5
 800e4aa:	f7fd fe57 	bl	800c15c <_realloc_r>
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d1e0      	bne.n	800e476 <__ssputs_r+0x5a>
 800e4b4:	6921      	ldr	r1, [r4, #16]
 800e4b6:	4650      	mov	r0, sl
 800e4b8:	f7fe ff38 	bl	800d32c <_free_r>
 800e4bc:	230c      	movs	r3, #12
 800e4be:	f8ca 3000 	str.w	r3, [sl]
 800e4c2:	89a3      	ldrh	r3, [r4, #12]
 800e4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4c8:	81a3      	strh	r3, [r4, #12]
 800e4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ce:	e7e9      	b.n	800e4a4 <__ssputs_r+0x88>

0800e4d0 <_svfiprintf_r>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	4698      	mov	r8, r3
 800e4d6:	898b      	ldrh	r3, [r1, #12]
 800e4d8:	061b      	lsls	r3, r3, #24
 800e4da:	b09d      	sub	sp, #116	; 0x74
 800e4dc:	4607      	mov	r7, r0
 800e4de:	460d      	mov	r5, r1
 800e4e0:	4614      	mov	r4, r2
 800e4e2:	d50e      	bpl.n	800e502 <_svfiprintf_r+0x32>
 800e4e4:	690b      	ldr	r3, [r1, #16]
 800e4e6:	b963      	cbnz	r3, 800e502 <_svfiprintf_r+0x32>
 800e4e8:	2140      	movs	r1, #64	; 0x40
 800e4ea:	f7fd fdab 	bl	800c044 <_malloc_r>
 800e4ee:	6028      	str	r0, [r5, #0]
 800e4f0:	6128      	str	r0, [r5, #16]
 800e4f2:	b920      	cbnz	r0, 800e4fe <_svfiprintf_r+0x2e>
 800e4f4:	230c      	movs	r3, #12
 800e4f6:	603b      	str	r3, [r7, #0]
 800e4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fc:	e0d0      	b.n	800e6a0 <_svfiprintf_r+0x1d0>
 800e4fe:	2340      	movs	r3, #64	; 0x40
 800e500:	616b      	str	r3, [r5, #20]
 800e502:	2300      	movs	r3, #0
 800e504:	9309      	str	r3, [sp, #36]	; 0x24
 800e506:	2320      	movs	r3, #32
 800e508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e50c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e510:	2330      	movs	r3, #48	; 0x30
 800e512:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e6b8 <_svfiprintf_r+0x1e8>
 800e516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e51a:	f04f 0901 	mov.w	r9, #1
 800e51e:	4623      	mov	r3, r4
 800e520:	469a      	mov	sl, r3
 800e522:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e526:	b10a      	cbz	r2, 800e52c <_svfiprintf_r+0x5c>
 800e528:	2a25      	cmp	r2, #37	; 0x25
 800e52a:	d1f9      	bne.n	800e520 <_svfiprintf_r+0x50>
 800e52c:	ebba 0b04 	subs.w	fp, sl, r4
 800e530:	d00b      	beq.n	800e54a <_svfiprintf_r+0x7a>
 800e532:	465b      	mov	r3, fp
 800e534:	4622      	mov	r2, r4
 800e536:	4629      	mov	r1, r5
 800e538:	4638      	mov	r0, r7
 800e53a:	f7ff ff6f 	bl	800e41c <__ssputs_r>
 800e53e:	3001      	adds	r0, #1
 800e540:	f000 80a9 	beq.w	800e696 <_svfiprintf_r+0x1c6>
 800e544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e546:	445a      	add	r2, fp
 800e548:	9209      	str	r2, [sp, #36]	; 0x24
 800e54a:	f89a 3000 	ldrb.w	r3, [sl]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 80a1 	beq.w	800e696 <_svfiprintf_r+0x1c6>
 800e554:	2300      	movs	r3, #0
 800e556:	f04f 32ff 	mov.w	r2, #4294967295
 800e55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e55e:	f10a 0a01 	add.w	sl, sl, #1
 800e562:	9304      	str	r3, [sp, #16]
 800e564:	9307      	str	r3, [sp, #28]
 800e566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e56a:	931a      	str	r3, [sp, #104]	; 0x68
 800e56c:	4654      	mov	r4, sl
 800e56e:	2205      	movs	r2, #5
 800e570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e574:	4850      	ldr	r0, [pc, #320]	; (800e6b8 <_svfiprintf_r+0x1e8>)
 800e576:	f7f1 fe4b 	bl	8000210 <memchr>
 800e57a:	9a04      	ldr	r2, [sp, #16]
 800e57c:	b9d8      	cbnz	r0, 800e5b6 <_svfiprintf_r+0xe6>
 800e57e:	06d0      	lsls	r0, r2, #27
 800e580:	bf44      	itt	mi
 800e582:	2320      	movmi	r3, #32
 800e584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e588:	0711      	lsls	r1, r2, #28
 800e58a:	bf44      	itt	mi
 800e58c:	232b      	movmi	r3, #43	; 0x2b
 800e58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e592:	f89a 3000 	ldrb.w	r3, [sl]
 800e596:	2b2a      	cmp	r3, #42	; 0x2a
 800e598:	d015      	beq.n	800e5c6 <_svfiprintf_r+0xf6>
 800e59a:	9a07      	ldr	r2, [sp, #28]
 800e59c:	4654      	mov	r4, sl
 800e59e:	2000      	movs	r0, #0
 800e5a0:	f04f 0c0a 	mov.w	ip, #10
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5aa:	3b30      	subs	r3, #48	; 0x30
 800e5ac:	2b09      	cmp	r3, #9
 800e5ae:	d94d      	bls.n	800e64c <_svfiprintf_r+0x17c>
 800e5b0:	b1b0      	cbz	r0, 800e5e0 <_svfiprintf_r+0x110>
 800e5b2:	9207      	str	r2, [sp, #28]
 800e5b4:	e014      	b.n	800e5e0 <_svfiprintf_r+0x110>
 800e5b6:	eba0 0308 	sub.w	r3, r0, r8
 800e5ba:	fa09 f303 	lsl.w	r3, r9, r3
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	9304      	str	r3, [sp, #16]
 800e5c2:	46a2      	mov	sl, r4
 800e5c4:	e7d2      	b.n	800e56c <_svfiprintf_r+0x9c>
 800e5c6:	9b03      	ldr	r3, [sp, #12]
 800e5c8:	1d19      	adds	r1, r3, #4
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	9103      	str	r1, [sp, #12]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	bfbb      	ittet	lt
 800e5d2:	425b      	neglt	r3, r3
 800e5d4:	f042 0202 	orrlt.w	r2, r2, #2
 800e5d8:	9307      	strge	r3, [sp, #28]
 800e5da:	9307      	strlt	r3, [sp, #28]
 800e5dc:	bfb8      	it	lt
 800e5de:	9204      	strlt	r2, [sp, #16]
 800e5e0:	7823      	ldrb	r3, [r4, #0]
 800e5e2:	2b2e      	cmp	r3, #46	; 0x2e
 800e5e4:	d10c      	bne.n	800e600 <_svfiprintf_r+0x130>
 800e5e6:	7863      	ldrb	r3, [r4, #1]
 800e5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ea:	d134      	bne.n	800e656 <_svfiprintf_r+0x186>
 800e5ec:	9b03      	ldr	r3, [sp, #12]
 800e5ee:	1d1a      	adds	r2, r3, #4
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	9203      	str	r2, [sp, #12]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	bfb8      	it	lt
 800e5f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5fc:	3402      	adds	r4, #2
 800e5fe:	9305      	str	r3, [sp, #20]
 800e600:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e6c8 <_svfiprintf_r+0x1f8>
 800e604:	7821      	ldrb	r1, [r4, #0]
 800e606:	2203      	movs	r2, #3
 800e608:	4650      	mov	r0, sl
 800e60a:	f7f1 fe01 	bl	8000210 <memchr>
 800e60e:	b138      	cbz	r0, 800e620 <_svfiprintf_r+0x150>
 800e610:	9b04      	ldr	r3, [sp, #16]
 800e612:	eba0 000a 	sub.w	r0, r0, sl
 800e616:	2240      	movs	r2, #64	; 0x40
 800e618:	4082      	lsls	r2, r0
 800e61a:	4313      	orrs	r3, r2
 800e61c:	3401      	adds	r4, #1
 800e61e:	9304      	str	r3, [sp, #16]
 800e620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e624:	4825      	ldr	r0, [pc, #148]	; (800e6bc <_svfiprintf_r+0x1ec>)
 800e626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e62a:	2206      	movs	r2, #6
 800e62c:	f7f1 fdf0 	bl	8000210 <memchr>
 800e630:	2800      	cmp	r0, #0
 800e632:	d038      	beq.n	800e6a6 <_svfiprintf_r+0x1d6>
 800e634:	4b22      	ldr	r3, [pc, #136]	; (800e6c0 <_svfiprintf_r+0x1f0>)
 800e636:	bb1b      	cbnz	r3, 800e680 <_svfiprintf_r+0x1b0>
 800e638:	9b03      	ldr	r3, [sp, #12]
 800e63a:	3307      	adds	r3, #7
 800e63c:	f023 0307 	bic.w	r3, r3, #7
 800e640:	3308      	adds	r3, #8
 800e642:	9303      	str	r3, [sp, #12]
 800e644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e646:	4433      	add	r3, r6
 800e648:	9309      	str	r3, [sp, #36]	; 0x24
 800e64a:	e768      	b.n	800e51e <_svfiprintf_r+0x4e>
 800e64c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e650:	460c      	mov	r4, r1
 800e652:	2001      	movs	r0, #1
 800e654:	e7a6      	b.n	800e5a4 <_svfiprintf_r+0xd4>
 800e656:	2300      	movs	r3, #0
 800e658:	3401      	adds	r4, #1
 800e65a:	9305      	str	r3, [sp, #20]
 800e65c:	4619      	mov	r1, r3
 800e65e:	f04f 0c0a 	mov.w	ip, #10
 800e662:	4620      	mov	r0, r4
 800e664:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e668:	3a30      	subs	r2, #48	; 0x30
 800e66a:	2a09      	cmp	r2, #9
 800e66c:	d903      	bls.n	800e676 <_svfiprintf_r+0x1a6>
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d0c6      	beq.n	800e600 <_svfiprintf_r+0x130>
 800e672:	9105      	str	r1, [sp, #20]
 800e674:	e7c4      	b.n	800e600 <_svfiprintf_r+0x130>
 800e676:	fb0c 2101 	mla	r1, ip, r1, r2
 800e67a:	4604      	mov	r4, r0
 800e67c:	2301      	movs	r3, #1
 800e67e:	e7f0      	b.n	800e662 <_svfiprintf_r+0x192>
 800e680:	ab03      	add	r3, sp, #12
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	462a      	mov	r2, r5
 800e686:	4b0f      	ldr	r3, [pc, #60]	; (800e6c4 <_svfiprintf_r+0x1f4>)
 800e688:	a904      	add	r1, sp, #16
 800e68a:	4638      	mov	r0, r7
 800e68c:	f3af 8000 	nop.w
 800e690:	1c42      	adds	r2, r0, #1
 800e692:	4606      	mov	r6, r0
 800e694:	d1d6      	bne.n	800e644 <_svfiprintf_r+0x174>
 800e696:	89ab      	ldrh	r3, [r5, #12]
 800e698:	065b      	lsls	r3, r3, #25
 800e69a:	f53f af2d 	bmi.w	800e4f8 <_svfiprintf_r+0x28>
 800e69e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6a0:	b01d      	add	sp, #116	; 0x74
 800e6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a6:	ab03      	add	r3, sp, #12
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	462a      	mov	r2, r5
 800e6ac:	4b05      	ldr	r3, [pc, #20]	; (800e6c4 <_svfiprintf_r+0x1f4>)
 800e6ae:	a904      	add	r1, sp, #16
 800e6b0:	4638      	mov	r0, r7
 800e6b2:	f000 f9bd 	bl	800ea30 <_printf_i>
 800e6b6:	e7eb      	b.n	800e690 <_svfiprintf_r+0x1c0>
 800e6b8:	080137ac 	.word	0x080137ac
 800e6bc:	080137b6 	.word	0x080137b6
 800e6c0:	00000000 	.word	0x00000000
 800e6c4:	0800e41d 	.word	0x0800e41d
 800e6c8:	080137b2 	.word	0x080137b2

0800e6cc <__sfputc_r>:
 800e6cc:	6893      	ldr	r3, [r2, #8]
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	b410      	push	{r4}
 800e6d4:	6093      	str	r3, [r2, #8]
 800e6d6:	da08      	bge.n	800e6ea <__sfputc_r+0x1e>
 800e6d8:	6994      	ldr	r4, [r2, #24]
 800e6da:	42a3      	cmp	r3, r4
 800e6dc:	db01      	blt.n	800e6e2 <__sfputc_r+0x16>
 800e6de:	290a      	cmp	r1, #10
 800e6e0:	d103      	bne.n	800e6ea <__sfputc_r+0x1e>
 800e6e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6e6:	f000 bb73 	b.w	800edd0 <__swbuf_r>
 800e6ea:	6813      	ldr	r3, [r2, #0]
 800e6ec:	1c58      	adds	r0, r3, #1
 800e6ee:	6010      	str	r0, [r2, #0]
 800e6f0:	7019      	strb	r1, [r3, #0]
 800e6f2:	4608      	mov	r0, r1
 800e6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6f8:	4770      	bx	lr

0800e6fa <__sfputs_r>:
 800e6fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6fc:	4606      	mov	r6, r0
 800e6fe:	460f      	mov	r7, r1
 800e700:	4614      	mov	r4, r2
 800e702:	18d5      	adds	r5, r2, r3
 800e704:	42ac      	cmp	r4, r5
 800e706:	d101      	bne.n	800e70c <__sfputs_r+0x12>
 800e708:	2000      	movs	r0, #0
 800e70a:	e007      	b.n	800e71c <__sfputs_r+0x22>
 800e70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e710:	463a      	mov	r2, r7
 800e712:	4630      	mov	r0, r6
 800e714:	f7ff ffda 	bl	800e6cc <__sfputc_r>
 800e718:	1c43      	adds	r3, r0, #1
 800e71a:	d1f3      	bne.n	800e704 <__sfputs_r+0xa>
 800e71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e720 <_vfiprintf_r>:
 800e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	460d      	mov	r5, r1
 800e726:	b09d      	sub	sp, #116	; 0x74
 800e728:	4614      	mov	r4, r2
 800e72a:	4698      	mov	r8, r3
 800e72c:	4606      	mov	r6, r0
 800e72e:	b118      	cbz	r0, 800e738 <_vfiprintf_r+0x18>
 800e730:	6a03      	ldr	r3, [r0, #32]
 800e732:	b90b      	cbnz	r3, 800e738 <_vfiprintf_r+0x18>
 800e734:	f7fe fbe8 	bl	800cf08 <__sinit>
 800e738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e73a:	07d9      	lsls	r1, r3, #31
 800e73c:	d405      	bmi.n	800e74a <_vfiprintf_r+0x2a>
 800e73e:	89ab      	ldrh	r3, [r5, #12]
 800e740:	059a      	lsls	r2, r3, #22
 800e742:	d402      	bmi.n	800e74a <_vfiprintf_r+0x2a>
 800e744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e746:	f7fe fde0 	bl	800d30a <__retarget_lock_acquire_recursive>
 800e74a:	89ab      	ldrh	r3, [r5, #12]
 800e74c:	071b      	lsls	r3, r3, #28
 800e74e:	d501      	bpl.n	800e754 <_vfiprintf_r+0x34>
 800e750:	692b      	ldr	r3, [r5, #16]
 800e752:	b99b      	cbnz	r3, 800e77c <_vfiprintf_r+0x5c>
 800e754:	4629      	mov	r1, r5
 800e756:	4630      	mov	r0, r6
 800e758:	f000 fb78 	bl	800ee4c <__swsetup_r>
 800e75c:	b170      	cbz	r0, 800e77c <_vfiprintf_r+0x5c>
 800e75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e760:	07dc      	lsls	r4, r3, #31
 800e762:	d504      	bpl.n	800e76e <_vfiprintf_r+0x4e>
 800e764:	f04f 30ff 	mov.w	r0, #4294967295
 800e768:	b01d      	add	sp, #116	; 0x74
 800e76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76e:	89ab      	ldrh	r3, [r5, #12]
 800e770:	0598      	lsls	r0, r3, #22
 800e772:	d4f7      	bmi.n	800e764 <_vfiprintf_r+0x44>
 800e774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e776:	f7fe fdc9 	bl	800d30c <__retarget_lock_release_recursive>
 800e77a:	e7f3      	b.n	800e764 <_vfiprintf_r+0x44>
 800e77c:	2300      	movs	r3, #0
 800e77e:	9309      	str	r3, [sp, #36]	; 0x24
 800e780:	2320      	movs	r3, #32
 800e782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e786:	f8cd 800c 	str.w	r8, [sp, #12]
 800e78a:	2330      	movs	r3, #48	; 0x30
 800e78c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e940 <_vfiprintf_r+0x220>
 800e790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e794:	f04f 0901 	mov.w	r9, #1
 800e798:	4623      	mov	r3, r4
 800e79a:	469a      	mov	sl, r3
 800e79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7a0:	b10a      	cbz	r2, 800e7a6 <_vfiprintf_r+0x86>
 800e7a2:	2a25      	cmp	r2, #37	; 0x25
 800e7a4:	d1f9      	bne.n	800e79a <_vfiprintf_r+0x7a>
 800e7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800e7aa:	d00b      	beq.n	800e7c4 <_vfiprintf_r+0xa4>
 800e7ac:	465b      	mov	r3, fp
 800e7ae:	4622      	mov	r2, r4
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	f7ff ffa1 	bl	800e6fa <__sfputs_r>
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	f000 80a9 	beq.w	800e910 <_vfiprintf_r+0x1f0>
 800e7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7c0:	445a      	add	r2, fp
 800e7c2:	9209      	str	r2, [sp, #36]	; 0x24
 800e7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f000 80a1 	beq.w	800e910 <_vfiprintf_r+0x1f0>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7d8:	f10a 0a01 	add.w	sl, sl, #1
 800e7dc:	9304      	str	r3, [sp, #16]
 800e7de:	9307      	str	r3, [sp, #28]
 800e7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7e4:	931a      	str	r3, [sp, #104]	; 0x68
 800e7e6:	4654      	mov	r4, sl
 800e7e8:	2205      	movs	r2, #5
 800e7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ee:	4854      	ldr	r0, [pc, #336]	; (800e940 <_vfiprintf_r+0x220>)
 800e7f0:	f7f1 fd0e 	bl	8000210 <memchr>
 800e7f4:	9a04      	ldr	r2, [sp, #16]
 800e7f6:	b9d8      	cbnz	r0, 800e830 <_vfiprintf_r+0x110>
 800e7f8:	06d1      	lsls	r1, r2, #27
 800e7fa:	bf44      	itt	mi
 800e7fc:	2320      	movmi	r3, #32
 800e7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e802:	0713      	lsls	r3, r2, #28
 800e804:	bf44      	itt	mi
 800e806:	232b      	movmi	r3, #43	; 0x2b
 800e808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e80c:	f89a 3000 	ldrb.w	r3, [sl]
 800e810:	2b2a      	cmp	r3, #42	; 0x2a
 800e812:	d015      	beq.n	800e840 <_vfiprintf_r+0x120>
 800e814:	9a07      	ldr	r2, [sp, #28]
 800e816:	4654      	mov	r4, sl
 800e818:	2000      	movs	r0, #0
 800e81a:	f04f 0c0a 	mov.w	ip, #10
 800e81e:	4621      	mov	r1, r4
 800e820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e824:	3b30      	subs	r3, #48	; 0x30
 800e826:	2b09      	cmp	r3, #9
 800e828:	d94d      	bls.n	800e8c6 <_vfiprintf_r+0x1a6>
 800e82a:	b1b0      	cbz	r0, 800e85a <_vfiprintf_r+0x13a>
 800e82c:	9207      	str	r2, [sp, #28]
 800e82e:	e014      	b.n	800e85a <_vfiprintf_r+0x13a>
 800e830:	eba0 0308 	sub.w	r3, r0, r8
 800e834:	fa09 f303 	lsl.w	r3, r9, r3
 800e838:	4313      	orrs	r3, r2
 800e83a:	9304      	str	r3, [sp, #16]
 800e83c:	46a2      	mov	sl, r4
 800e83e:	e7d2      	b.n	800e7e6 <_vfiprintf_r+0xc6>
 800e840:	9b03      	ldr	r3, [sp, #12]
 800e842:	1d19      	adds	r1, r3, #4
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	9103      	str	r1, [sp, #12]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	bfbb      	ittet	lt
 800e84c:	425b      	neglt	r3, r3
 800e84e:	f042 0202 	orrlt.w	r2, r2, #2
 800e852:	9307      	strge	r3, [sp, #28]
 800e854:	9307      	strlt	r3, [sp, #28]
 800e856:	bfb8      	it	lt
 800e858:	9204      	strlt	r2, [sp, #16]
 800e85a:	7823      	ldrb	r3, [r4, #0]
 800e85c:	2b2e      	cmp	r3, #46	; 0x2e
 800e85e:	d10c      	bne.n	800e87a <_vfiprintf_r+0x15a>
 800e860:	7863      	ldrb	r3, [r4, #1]
 800e862:	2b2a      	cmp	r3, #42	; 0x2a
 800e864:	d134      	bne.n	800e8d0 <_vfiprintf_r+0x1b0>
 800e866:	9b03      	ldr	r3, [sp, #12]
 800e868:	1d1a      	adds	r2, r3, #4
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	9203      	str	r2, [sp, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	bfb8      	it	lt
 800e872:	f04f 33ff 	movlt.w	r3, #4294967295
 800e876:	3402      	adds	r4, #2
 800e878:	9305      	str	r3, [sp, #20]
 800e87a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e950 <_vfiprintf_r+0x230>
 800e87e:	7821      	ldrb	r1, [r4, #0]
 800e880:	2203      	movs	r2, #3
 800e882:	4650      	mov	r0, sl
 800e884:	f7f1 fcc4 	bl	8000210 <memchr>
 800e888:	b138      	cbz	r0, 800e89a <_vfiprintf_r+0x17a>
 800e88a:	9b04      	ldr	r3, [sp, #16]
 800e88c:	eba0 000a 	sub.w	r0, r0, sl
 800e890:	2240      	movs	r2, #64	; 0x40
 800e892:	4082      	lsls	r2, r0
 800e894:	4313      	orrs	r3, r2
 800e896:	3401      	adds	r4, #1
 800e898:	9304      	str	r3, [sp, #16]
 800e89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e89e:	4829      	ldr	r0, [pc, #164]	; (800e944 <_vfiprintf_r+0x224>)
 800e8a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8a4:	2206      	movs	r2, #6
 800e8a6:	f7f1 fcb3 	bl	8000210 <memchr>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d03f      	beq.n	800e92e <_vfiprintf_r+0x20e>
 800e8ae:	4b26      	ldr	r3, [pc, #152]	; (800e948 <_vfiprintf_r+0x228>)
 800e8b0:	bb1b      	cbnz	r3, 800e8fa <_vfiprintf_r+0x1da>
 800e8b2:	9b03      	ldr	r3, [sp, #12]
 800e8b4:	3307      	adds	r3, #7
 800e8b6:	f023 0307 	bic.w	r3, r3, #7
 800e8ba:	3308      	adds	r3, #8
 800e8bc:	9303      	str	r3, [sp, #12]
 800e8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8c0:	443b      	add	r3, r7
 800e8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c4:	e768      	b.n	800e798 <_vfiprintf_r+0x78>
 800e8c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	2001      	movs	r0, #1
 800e8ce:	e7a6      	b.n	800e81e <_vfiprintf_r+0xfe>
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	3401      	adds	r4, #1
 800e8d4:	9305      	str	r3, [sp, #20]
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	f04f 0c0a 	mov.w	ip, #10
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8e2:	3a30      	subs	r2, #48	; 0x30
 800e8e4:	2a09      	cmp	r2, #9
 800e8e6:	d903      	bls.n	800e8f0 <_vfiprintf_r+0x1d0>
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d0c6      	beq.n	800e87a <_vfiprintf_r+0x15a>
 800e8ec:	9105      	str	r1, [sp, #20]
 800e8ee:	e7c4      	b.n	800e87a <_vfiprintf_r+0x15a>
 800e8f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e7f0      	b.n	800e8dc <_vfiprintf_r+0x1bc>
 800e8fa:	ab03      	add	r3, sp, #12
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	462a      	mov	r2, r5
 800e900:	4b12      	ldr	r3, [pc, #72]	; (800e94c <_vfiprintf_r+0x22c>)
 800e902:	a904      	add	r1, sp, #16
 800e904:	4630      	mov	r0, r6
 800e906:	f3af 8000 	nop.w
 800e90a:	4607      	mov	r7, r0
 800e90c:	1c78      	adds	r0, r7, #1
 800e90e:	d1d6      	bne.n	800e8be <_vfiprintf_r+0x19e>
 800e910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e912:	07d9      	lsls	r1, r3, #31
 800e914:	d405      	bmi.n	800e922 <_vfiprintf_r+0x202>
 800e916:	89ab      	ldrh	r3, [r5, #12]
 800e918:	059a      	lsls	r2, r3, #22
 800e91a:	d402      	bmi.n	800e922 <_vfiprintf_r+0x202>
 800e91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e91e:	f7fe fcf5 	bl	800d30c <__retarget_lock_release_recursive>
 800e922:	89ab      	ldrh	r3, [r5, #12]
 800e924:	065b      	lsls	r3, r3, #25
 800e926:	f53f af1d 	bmi.w	800e764 <_vfiprintf_r+0x44>
 800e92a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e92c:	e71c      	b.n	800e768 <_vfiprintf_r+0x48>
 800e92e:	ab03      	add	r3, sp, #12
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	462a      	mov	r2, r5
 800e934:	4b05      	ldr	r3, [pc, #20]	; (800e94c <_vfiprintf_r+0x22c>)
 800e936:	a904      	add	r1, sp, #16
 800e938:	4630      	mov	r0, r6
 800e93a:	f000 f879 	bl	800ea30 <_printf_i>
 800e93e:	e7e4      	b.n	800e90a <_vfiprintf_r+0x1ea>
 800e940:	080137ac 	.word	0x080137ac
 800e944:	080137b6 	.word	0x080137b6
 800e948:	00000000 	.word	0x00000000
 800e94c:	0800e6fb 	.word	0x0800e6fb
 800e950:	080137b2 	.word	0x080137b2

0800e954 <_printf_common>:
 800e954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e958:	4616      	mov	r6, r2
 800e95a:	4699      	mov	r9, r3
 800e95c:	688a      	ldr	r2, [r1, #8]
 800e95e:	690b      	ldr	r3, [r1, #16]
 800e960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e964:	4293      	cmp	r3, r2
 800e966:	bfb8      	it	lt
 800e968:	4613      	movlt	r3, r2
 800e96a:	6033      	str	r3, [r6, #0]
 800e96c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e970:	4607      	mov	r7, r0
 800e972:	460c      	mov	r4, r1
 800e974:	b10a      	cbz	r2, 800e97a <_printf_common+0x26>
 800e976:	3301      	adds	r3, #1
 800e978:	6033      	str	r3, [r6, #0]
 800e97a:	6823      	ldr	r3, [r4, #0]
 800e97c:	0699      	lsls	r1, r3, #26
 800e97e:	bf42      	ittt	mi
 800e980:	6833      	ldrmi	r3, [r6, #0]
 800e982:	3302      	addmi	r3, #2
 800e984:	6033      	strmi	r3, [r6, #0]
 800e986:	6825      	ldr	r5, [r4, #0]
 800e988:	f015 0506 	ands.w	r5, r5, #6
 800e98c:	d106      	bne.n	800e99c <_printf_common+0x48>
 800e98e:	f104 0a19 	add.w	sl, r4, #25
 800e992:	68e3      	ldr	r3, [r4, #12]
 800e994:	6832      	ldr	r2, [r6, #0]
 800e996:	1a9b      	subs	r3, r3, r2
 800e998:	42ab      	cmp	r3, r5
 800e99a:	dc26      	bgt.n	800e9ea <_printf_common+0x96>
 800e99c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e9a0:	1e13      	subs	r3, r2, #0
 800e9a2:	6822      	ldr	r2, [r4, #0]
 800e9a4:	bf18      	it	ne
 800e9a6:	2301      	movne	r3, #1
 800e9a8:	0692      	lsls	r2, r2, #26
 800e9aa:	d42b      	bmi.n	800ea04 <_printf_common+0xb0>
 800e9ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9b0:	4649      	mov	r1, r9
 800e9b2:	4638      	mov	r0, r7
 800e9b4:	47c0      	blx	r8
 800e9b6:	3001      	adds	r0, #1
 800e9b8:	d01e      	beq.n	800e9f8 <_printf_common+0xa4>
 800e9ba:	6823      	ldr	r3, [r4, #0]
 800e9bc:	6922      	ldr	r2, [r4, #16]
 800e9be:	f003 0306 	and.w	r3, r3, #6
 800e9c2:	2b04      	cmp	r3, #4
 800e9c4:	bf02      	ittt	eq
 800e9c6:	68e5      	ldreq	r5, [r4, #12]
 800e9c8:	6833      	ldreq	r3, [r6, #0]
 800e9ca:	1aed      	subeq	r5, r5, r3
 800e9cc:	68a3      	ldr	r3, [r4, #8]
 800e9ce:	bf0c      	ite	eq
 800e9d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9d4:	2500      	movne	r5, #0
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	bfc4      	itt	gt
 800e9da:	1a9b      	subgt	r3, r3, r2
 800e9dc:	18ed      	addgt	r5, r5, r3
 800e9de:	2600      	movs	r6, #0
 800e9e0:	341a      	adds	r4, #26
 800e9e2:	42b5      	cmp	r5, r6
 800e9e4:	d11a      	bne.n	800ea1c <_printf_common+0xc8>
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	e008      	b.n	800e9fc <_printf_common+0xa8>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	4652      	mov	r2, sl
 800e9ee:	4649      	mov	r1, r9
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	47c0      	blx	r8
 800e9f4:	3001      	adds	r0, #1
 800e9f6:	d103      	bne.n	800ea00 <_printf_common+0xac>
 800e9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea00:	3501      	adds	r5, #1
 800ea02:	e7c6      	b.n	800e992 <_printf_common+0x3e>
 800ea04:	18e1      	adds	r1, r4, r3
 800ea06:	1c5a      	adds	r2, r3, #1
 800ea08:	2030      	movs	r0, #48	; 0x30
 800ea0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea0e:	4422      	add	r2, r4
 800ea10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea18:	3302      	adds	r3, #2
 800ea1a:	e7c7      	b.n	800e9ac <_printf_common+0x58>
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	4622      	mov	r2, r4
 800ea20:	4649      	mov	r1, r9
 800ea22:	4638      	mov	r0, r7
 800ea24:	47c0      	blx	r8
 800ea26:	3001      	adds	r0, #1
 800ea28:	d0e6      	beq.n	800e9f8 <_printf_common+0xa4>
 800ea2a:	3601      	adds	r6, #1
 800ea2c:	e7d9      	b.n	800e9e2 <_printf_common+0x8e>
	...

0800ea30 <_printf_i>:
 800ea30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea34:	7e0f      	ldrb	r7, [r1, #24]
 800ea36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea38:	2f78      	cmp	r7, #120	; 0x78
 800ea3a:	4691      	mov	r9, r2
 800ea3c:	4680      	mov	r8, r0
 800ea3e:	460c      	mov	r4, r1
 800ea40:	469a      	mov	sl, r3
 800ea42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea46:	d807      	bhi.n	800ea58 <_printf_i+0x28>
 800ea48:	2f62      	cmp	r7, #98	; 0x62
 800ea4a:	d80a      	bhi.n	800ea62 <_printf_i+0x32>
 800ea4c:	2f00      	cmp	r7, #0
 800ea4e:	f000 80d4 	beq.w	800ebfa <_printf_i+0x1ca>
 800ea52:	2f58      	cmp	r7, #88	; 0x58
 800ea54:	f000 80c0 	beq.w	800ebd8 <_printf_i+0x1a8>
 800ea58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea60:	e03a      	b.n	800ead8 <_printf_i+0xa8>
 800ea62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea66:	2b15      	cmp	r3, #21
 800ea68:	d8f6      	bhi.n	800ea58 <_printf_i+0x28>
 800ea6a:	a101      	add	r1, pc, #4	; (adr r1, 800ea70 <_printf_i+0x40>)
 800ea6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea70:	0800eac9 	.word	0x0800eac9
 800ea74:	0800eadd 	.word	0x0800eadd
 800ea78:	0800ea59 	.word	0x0800ea59
 800ea7c:	0800ea59 	.word	0x0800ea59
 800ea80:	0800ea59 	.word	0x0800ea59
 800ea84:	0800ea59 	.word	0x0800ea59
 800ea88:	0800eadd 	.word	0x0800eadd
 800ea8c:	0800ea59 	.word	0x0800ea59
 800ea90:	0800ea59 	.word	0x0800ea59
 800ea94:	0800ea59 	.word	0x0800ea59
 800ea98:	0800ea59 	.word	0x0800ea59
 800ea9c:	0800ebe1 	.word	0x0800ebe1
 800eaa0:	0800eb09 	.word	0x0800eb09
 800eaa4:	0800eb9b 	.word	0x0800eb9b
 800eaa8:	0800ea59 	.word	0x0800ea59
 800eaac:	0800ea59 	.word	0x0800ea59
 800eab0:	0800ec03 	.word	0x0800ec03
 800eab4:	0800ea59 	.word	0x0800ea59
 800eab8:	0800eb09 	.word	0x0800eb09
 800eabc:	0800ea59 	.word	0x0800ea59
 800eac0:	0800ea59 	.word	0x0800ea59
 800eac4:	0800eba3 	.word	0x0800eba3
 800eac8:	682b      	ldr	r3, [r5, #0]
 800eaca:	1d1a      	adds	r2, r3, #4
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	602a      	str	r2, [r5, #0]
 800ead0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ead4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ead8:	2301      	movs	r3, #1
 800eada:	e09f      	b.n	800ec1c <_printf_i+0x1ec>
 800eadc:	6820      	ldr	r0, [r4, #0]
 800eade:	682b      	ldr	r3, [r5, #0]
 800eae0:	0607      	lsls	r7, r0, #24
 800eae2:	f103 0104 	add.w	r1, r3, #4
 800eae6:	6029      	str	r1, [r5, #0]
 800eae8:	d501      	bpl.n	800eaee <_printf_i+0xbe>
 800eaea:	681e      	ldr	r6, [r3, #0]
 800eaec:	e003      	b.n	800eaf6 <_printf_i+0xc6>
 800eaee:	0646      	lsls	r6, r0, #25
 800eaf0:	d5fb      	bpl.n	800eaea <_printf_i+0xba>
 800eaf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eaf6:	2e00      	cmp	r6, #0
 800eaf8:	da03      	bge.n	800eb02 <_printf_i+0xd2>
 800eafa:	232d      	movs	r3, #45	; 0x2d
 800eafc:	4276      	negs	r6, r6
 800eafe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb02:	485a      	ldr	r0, [pc, #360]	; (800ec6c <_printf_i+0x23c>)
 800eb04:	230a      	movs	r3, #10
 800eb06:	e012      	b.n	800eb2e <_printf_i+0xfe>
 800eb08:	682b      	ldr	r3, [r5, #0]
 800eb0a:	6820      	ldr	r0, [r4, #0]
 800eb0c:	1d19      	adds	r1, r3, #4
 800eb0e:	6029      	str	r1, [r5, #0]
 800eb10:	0605      	lsls	r5, r0, #24
 800eb12:	d501      	bpl.n	800eb18 <_printf_i+0xe8>
 800eb14:	681e      	ldr	r6, [r3, #0]
 800eb16:	e002      	b.n	800eb1e <_printf_i+0xee>
 800eb18:	0641      	lsls	r1, r0, #25
 800eb1a:	d5fb      	bpl.n	800eb14 <_printf_i+0xe4>
 800eb1c:	881e      	ldrh	r6, [r3, #0]
 800eb1e:	4853      	ldr	r0, [pc, #332]	; (800ec6c <_printf_i+0x23c>)
 800eb20:	2f6f      	cmp	r7, #111	; 0x6f
 800eb22:	bf0c      	ite	eq
 800eb24:	2308      	moveq	r3, #8
 800eb26:	230a      	movne	r3, #10
 800eb28:	2100      	movs	r1, #0
 800eb2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb2e:	6865      	ldr	r5, [r4, #4]
 800eb30:	60a5      	str	r5, [r4, #8]
 800eb32:	2d00      	cmp	r5, #0
 800eb34:	bfa2      	ittt	ge
 800eb36:	6821      	ldrge	r1, [r4, #0]
 800eb38:	f021 0104 	bicge.w	r1, r1, #4
 800eb3c:	6021      	strge	r1, [r4, #0]
 800eb3e:	b90e      	cbnz	r6, 800eb44 <_printf_i+0x114>
 800eb40:	2d00      	cmp	r5, #0
 800eb42:	d04b      	beq.n	800ebdc <_printf_i+0x1ac>
 800eb44:	4615      	mov	r5, r2
 800eb46:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb4a:	fb03 6711 	mls	r7, r3, r1, r6
 800eb4e:	5dc7      	ldrb	r7, [r0, r7]
 800eb50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb54:	4637      	mov	r7, r6
 800eb56:	42bb      	cmp	r3, r7
 800eb58:	460e      	mov	r6, r1
 800eb5a:	d9f4      	bls.n	800eb46 <_printf_i+0x116>
 800eb5c:	2b08      	cmp	r3, #8
 800eb5e:	d10b      	bne.n	800eb78 <_printf_i+0x148>
 800eb60:	6823      	ldr	r3, [r4, #0]
 800eb62:	07de      	lsls	r6, r3, #31
 800eb64:	d508      	bpl.n	800eb78 <_printf_i+0x148>
 800eb66:	6923      	ldr	r3, [r4, #16]
 800eb68:	6861      	ldr	r1, [r4, #4]
 800eb6a:	4299      	cmp	r1, r3
 800eb6c:	bfde      	ittt	le
 800eb6e:	2330      	movle	r3, #48	; 0x30
 800eb70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb78:	1b52      	subs	r2, r2, r5
 800eb7a:	6122      	str	r2, [r4, #16]
 800eb7c:	f8cd a000 	str.w	sl, [sp]
 800eb80:	464b      	mov	r3, r9
 800eb82:	aa03      	add	r2, sp, #12
 800eb84:	4621      	mov	r1, r4
 800eb86:	4640      	mov	r0, r8
 800eb88:	f7ff fee4 	bl	800e954 <_printf_common>
 800eb8c:	3001      	adds	r0, #1
 800eb8e:	d14a      	bne.n	800ec26 <_printf_i+0x1f6>
 800eb90:	f04f 30ff 	mov.w	r0, #4294967295
 800eb94:	b004      	add	sp, #16
 800eb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	f043 0320 	orr.w	r3, r3, #32
 800eba0:	6023      	str	r3, [r4, #0]
 800eba2:	4833      	ldr	r0, [pc, #204]	; (800ec70 <_printf_i+0x240>)
 800eba4:	2778      	movs	r7, #120	; 0x78
 800eba6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ebaa:	6823      	ldr	r3, [r4, #0]
 800ebac:	6829      	ldr	r1, [r5, #0]
 800ebae:	061f      	lsls	r7, r3, #24
 800ebb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ebb4:	d402      	bmi.n	800ebbc <_printf_i+0x18c>
 800ebb6:	065f      	lsls	r7, r3, #25
 800ebb8:	bf48      	it	mi
 800ebba:	b2b6      	uxthmi	r6, r6
 800ebbc:	07df      	lsls	r7, r3, #31
 800ebbe:	bf48      	it	mi
 800ebc0:	f043 0320 	orrmi.w	r3, r3, #32
 800ebc4:	6029      	str	r1, [r5, #0]
 800ebc6:	bf48      	it	mi
 800ebc8:	6023      	strmi	r3, [r4, #0]
 800ebca:	b91e      	cbnz	r6, 800ebd4 <_printf_i+0x1a4>
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	f023 0320 	bic.w	r3, r3, #32
 800ebd2:	6023      	str	r3, [r4, #0]
 800ebd4:	2310      	movs	r3, #16
 800ebd6:	e7a7      	b.n	800eb28 <_printf_i+0xf8>
 800ebd8:	4824      	ldr	r0, [pc, #144]	; (800ec6c <_printf_i+0x23c>)
 800ebda:	e7e4      	b.n	800eba6 <_printf_i+0x176>
 800ebdc:	4615      	mov	r5, r2
 800ebde:	e7bd      	b.n	800eb5c <_printf_i+0x12c>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	6826      	ldr	r6, [r4, #0]
 800ebe4:	6961      	ldr	r1, [r4, #20]
 800ebe6:	1d18      	adds	r0, r3, #4
 800ebe8:	6028      	str	r0, [r5, #0]
 800ebea:	0635      	lsls	r5, r6, #24
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	d501      	bpl.n	800ebf4 <_printf_i+0x1c4>
 800ebf0:	6019      	str	r1, [r3, #0]
 800ebf2:	e002      	b.n	800ebfa <_printf_i+0x1ca>
 800ebf4:	0670      	lsls	r0, r6, #25
 800ebf6:	d5fb      	bpl.n	800ebf0 <_printf_i+0x1c0>
 800ebf8:	8019      	strh	r1, [r3, #0]
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	6123      	str	r3, [r4, #16]
 800ebfe:	4615      	mov	r5, r2
 800ec00:	e7bc      	b.n	800eb7c <_printf_i+0x14c>
 800ec02:	682b      	ldr	r3, [r5, #0]
 800ec04:	1d1a      	adds	r2, r3, #4
 800ec06:	602a      	str	r2, [r5, #0]
 800ec08:	681d      	ldr	r5, [r3, #0]
 800ec0a:	6862      	ldr	r2, [r4, #4]
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	4628      	mov	r0, r5
 800ec10:	f7f1 fafe 	bl	8000210 <memchr>
 800ec14:	b108      	cbz	r0, 800ec1a <_printf_i+0x1ea>
 800ec16:	1b40      	subs	r0, r0, r5
 800ec18:	6060      	str	r0, [r4, #4]
 800ec1a:	6863      	ldr	r3, [r4, #4]
 800ec1c:	6123      	str	r3, [r4, #16]
 800ec1e:	2300      	movs	r3, #0
 800ec20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec24:	e7aa      	b.n	800eb7c <_printf_i+0x14c>
 800ec26:	6923      	ldr	r3, [r4, #16]
 800ec28:	462a      	mov	r2, r5
 800ec2a:	4649      	mov	r1, r9
 800ec2c:	4640      	mov	r0, r8
 800ec2e:	47d0      	blx	sl
 800ec30:	3001      	adds	r0, #1
 800ec32:	d0ad      	beq.n	800eb90 <_printf_i+0x160>
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	079b      	lsls	r3, r3, #30
 800ec38:	d413      	bmi.n	800ec62 <_printf_i+0x232>
 800ec3a:	68e0      	ldr	r0, [r4, #12]
 800ec3c:	9b03      	ldr	r3, [sp, #12]
 800ec3e:	4298      	cmp	r0, r3
 800ec40:	bfb8      	it	lt
 800ec42:	4618      	movlt	r0, r3
 800ec44:	e7a6      	b.n	800eb94 <_printf_i+0x164>
 800ec46:	2301      	movs	r3, #1
 800ec48:	4632      	mov	r2, r6
 800ec4a:	4649      	mov	r1, r9
 800ec4c:	4640      	mov	r0, r8
 800ec4e:	47d0      	blx	sl
 800ec50:	3001      	adds	r0, #1
 800ec52:	d09d      	beq.n	800eb90 <_printf_i+0x160>
 800ec54:	3501      	adds	r5, #1
 800ec56:	68e3      	ldr	r3, [r4, #12]
 800ec58:	9903      	ldr	r1, [sp, #12]
 800ec5a:	1a5b      	subs	r3, r3, r1
 800ec5c:	42ab      	cmp	r3, r5
 800ec5e:	dcf2      	bgt.n	800ec46 <_printf_i+0x216>
 800ec60:	e7eb      	b.n	800ec3a <_printf_i+0x20a>
 800ec62:	2500      	movs	r5, #0
 800ec64:	f104 0619 	add.w	r6, r4, #25
 800ec68:	e7f5      	b.n	800ec56 <_printf_i+0x226>
 800ec6a:	bf00      	nop
 800ec6c:	080137bd 	.word	0x080137bd
 800ec70:	080137ce 	.word	0x080137ce

0800ec74 <__sflush_r>:
 800ec74:	898a      	ldrh	r2, [r1, #12]
 800ec76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	0710      	lsls	r0, r2, #28
 800ec7e:	460c      	mov	r4, r1
 800ec80:	d458      	bmi.n	800ed34 <__sflush_r+0xc0>
 800ec82:	684b      	ldr	r3, [r1, #4]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	dc05      	bgt.n	800ec94 <__sflush_r+0x20>
 800ec88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	dc02      	bgt.n	800ec94 <__sflush_r+0x20>
 800ec8e:	2000      	movs	r0, #0
 800ec90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec96:	2e00      	cmp	r6, #0
 800ec98:	d0f9      	beq.n	800ec8e <__sflush_r+0x1a>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eca0:	682f      	ldr	r7, [r5, #0]
 800eca2:	6a21      	ldr	r1, [r4, #32]
 800eca4:	602b      	str	r3, [r5, #0]
 800eca6:	d032      	beq.n	800ed0e <__sflush_r+0x9a>
 800eca8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ecaa:	89a3      	ldrh	r3, [r4, #12]
 800ecac:	075a      	lsls	r2, r3, #29
 800ecae:	d505      	bpl.n	800ecbc <__sflush_r+0x48>
 800ecb0:	6863      	ldr	r3, [r4, #4]
 800ecb2:	1ac0      	subs	r0, r0, r3
 800ecb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecb6:	b10b      	cbz	r3, 800ecbc <__sflush_r+0x48>
 800ecb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecba:	1ac0      	subs	r0, r0, r3
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecc2:	6a21      	ldr	r1, [r4, #32]
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	47b0      	blx	r6
 800ecc8:	1c43      	adds	r3, r0, #1
 800ecca:	89a3      	ldrh	r3, [r4, #12]
 800eccc:	d106      	bne.n	800ecdc <__sflush_r+0x68>
 800ecce:	6829      	ldr	r1, [r5, #0]
 800ecd0:	291d      	cmp	r1, #29
 800ecd2:	d82b      	bhi.n	800ed2c <__sflush_r+0xb8>
 800ecd4:	4a29      	ldr	r2, [pc, #164]	; (800ed7c <__sflush_r+0x108>)
 800ecd6:	410a      	asrs	r2, r1
 800ecd8:	07d6      	lsls	r6, r2, #31
 800ecda:	d427      	bmi.n	800ed2c <__sflush_r+0xb8>
 800ecdc:	2200      	movs	r2, #0
 800ecde:	6062      	str	r2, [r4, #4]
 800ece0:	04d9      	lsls	r1, r3, #19
 800ece2:	6922      	ldr	r2, [r4, #16]
 800ece4:	6022      	str	r2, [r4, #0]
 800ece6:	d504      	bpl.n	800ecf2 <__sflush_r+0x7e>
 800ece8:	1c42      	adds	r2, r0, #1
 800ecea:	d101      	bne.n	800ecf0 <__sflush_r+0x7c>
 800ecec:	682b      	ldr	r3, [r5, #0]
 800ecee:	b903      	cbnz	r3, 800ecf2 <__sflush_r+0x7e>
 800ecf0:	6560      	str	r0, [r4, #84]	; 0x54
 800ecf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecf4:	602f      	str	r7, [r5, #0]
 800ecf6:	2900      	cmp	r1, #0
 800ecf8:	d0c9      	beq.n	800ec8e <__sflush_r+0x1a>
 800ecfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecfe:	4299      	cmp	r1, r3
 800ed00:	d002      	beq.n	800ed08 <__sflush_r+0x94>
 800ed02:	4628      	mov	r0, r5
 800ed04:	f7fe fb12 	bl	800d32c <_free_r>
 800ed08:	2000      	movs	r0, #0
 800ed0a:	6360      	str	r0, [r4, #52]	; 0x34
 800ed0c:	e7c0      	b.n	800ec90 <__sflush_r+0x1c>
 800ed0e:	2301      	movs	r3, #1
 800ed10:	4628      	mov	r0, r5
 800ed12:	47b0      	blx	r6
 800ed14:	1c41      	adds	r1, r0, #1
 800ed16:	d1c8      	bne.n	800ecaa <__sflush_r+0x36>
 800ed18:	682b      	ldr	r3, [r5, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d0c5      	beq.n	800ecaa <__sflush_r+0x36>
 800ed1e:	2b1d      	cmp	r3, #29
 800ed20:	d001      	beq.n	800ed26 <__sflush_r+0xb2>
 800ed22:	2b16      	cmp	r3, #22
 800ed24:	d101      	bne.n	800ed2a <__sflush_r+0xb6>
 800ed26:	602f      	str	r7, [r5, #0]
 800ed28:	e7b1      	b.n	800ec8e <__sflush_r+0x1a>
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed30:	81a3      	strh	r3, [r4, #12]
 800ed32:	e7ad      	b.n	800ec90 <__sflush_r+0x1c>
 800ed34:	690f      	ldr	r7, [r1, #16]
 800ed36:	2f00      	cmp	r7, #0
 800ed38:	d0a9      	beq.n	800ec8e <__sflush_r+0x1a>
 800ed3a:	0793      	lsls	r3, r2, #30
 800ed3c:	680e      	ldr	r6, [r1, #0]
 800ed3e:	bf08      	it	eq
 800ed40:	694b      	ldreq	r3, [r1, #20]
 800ed42:	600f      	str	r7, [r1, #0]
 800ed44:	bf18      	it	ne
 800ed46:	2300      	movne	r3, #0
 800ed48:	eba6 0807 	sub.w	r8, r6, r7
 800ed4c:	608b      	str	r3, [r1, #8]
 800ed4e:	f1b8 0f00 	cmp.w	r8, #0
 800ed52:	dd9c      	ble.n	800ec8e <__sflush_r+0x1a>
 800ed54:	6a21      	ldr	r1, [r4, #32]
 800ed56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed58:	4643      	mov	r3, r8
 800ed5a:	463a      	mov	r2, r7
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	47b0      	blx	r6
 800ed60:	2800      	cmp	r0, #0
 800ed62:	dc06      	bgt.n	800ed72 <__sflush_r+0xfe>
 800ed64:	89a3      	ldrh	r3, [r4, #12]
 800ed66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed6a:	81a3      	strh	r3, [r4, #12]
 800ed6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed70:	e78e      	b.n	800ec90 <__sflush_r+0x1c>
 800ed72:	4407      	add	r7, r0
 800ed74:	eba8 0800 	sub.w	r8, r8, r0
 800ed78:	e7e9      	b.n	800ed4e <__sflush_r+0xda>
 800ed7a:	bf00      	nop
 800ed7c:	dfbffffe 	.word	0xdfbffffe

0800ed80 <_fflush_r>:
 800ed80:	b538      	push	{r3, r4, r5, lr}
 800ed82:	690b      	ldr	r3, [r1, #16]
 800ed84:	4605      	mov	r5, r0
 800ed86:	460c      	mov	r4, r1
 800ed88:	b913      	cbnz	r3, 800ed90 <_fflush_r+0x10>
 800ed8a:	2500      	movs	r5, #0
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	bd38      	pop	{r3, r4, r5, pc}
 800ed90:	b118      	cbz	r0, 800ed9a <_fflush_r+0x1a>
 800ed92:	6a03      	ldr	r3, [r0, #32]
 800ed94:	b90b      	cbnz	r3, 800ed9a <_fflush_r+0x1a>
 800ed96:	f7fe f8b7 	bl	800cf08 <__sinit>
 800ed9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d0f3      	beq.n	800ed8a <_fflush_r+0xa>
 800eda2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eda4:	07d0      	lsls	r0, r2, #31
 800eda6:	d404      	bmi.n	800edb2 <_fflush_r+0x32>
 800eda8:	0599      	lsls	r1, r3, #22
 800edaa:	d402      	bmi.n	800edb2 <_fflush_r+0x32>
 800edac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edae:	f7fe faac 	bl	800d30a <__retarget_lock_acquire_recursive>
 800edb2:	4628      	mov	r0, r5
 800edb4:	4621      	mov	r1, r4
 800edb6:	f7ff ff5d 	bl	800ec74 <__sflush_r>
 800edba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edbc:	07da      	lsls	r2, r3, #31
 800edbe:	4605      	mov	r5, r0
 800edc0:	d4e4      	bmi.n	800ed8c <_fflush_r+0xc>
 800edc2:	89a3      	ldrh	r3, [r4, #12]
 800edc4:	059b      	lsls	r3, r3, #22
 800edc6:	d4e1      	bmi.n	800ed8c <_fflush_r+0xc>
 800edc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edca:	f7fe fa9f 	bl	800d30c <__retarget_lock_release_recursive>
 800edce:	e7dd      	b.n	800ed8c <_fflush_r+0xc>

0800edd0 <__swbuf_r>:
 800edd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd2:	460e      	mov	r6, r1
 800edd4:	4614      	mov	r4, r2
 800edd6:	4605      	mov	r5, r0
 800edd8:	b118      	cbz	r0, 800ede2 <__swbuf_r+0x12>
 800edda:	6a03      	ldr	r3, [r0, #32]
 800eddc:	b90b      	cbnz	r3, 800ede2 <__swbuf_r+0x12>
 800edde:	f7fe f893 	bl	800cf08 <__sinit>
 800ede2:	69a3      	ldr	r3, [r4, #24]
 800ede4:	60a3      	str	r3, [r4, #8]
 800ede6:	89a3      	ldrh	r3, [r4, #12]
 800ede8:	071a      	lsls	r2, r3, #28
 800edea:	d525      	bpl.n	800ee38 <__swbuf_r+0x68>
 800edec:	6923      	ldr	r3, [r4, #16]
 800edee:	b31b      	cbz	r3, 800ee38 <__swbuf_r+0x68>
 800edf0:	6823      	ldr	r3, [r4, #0]
 800edf2:	6922      	ldr	r2, [r4, #16]
 800edf4:	1a98      	subs	r0, r3, r2
 800edf6:	6963      	ldr	r3, [r4, #20]
 800edf8:	b2f6      	uxtb	r6, r6
 800edfa:	4283      	cmp	r3, r0
 800edfc:	4637      	mov	r7, r6
 800edfe:	dc04      	bgt.n	800ee0a <__swbuf_r+0x3a>
 800ee00:	4621      	mov	r1, r4
 800ee02:	4628      	mov	r0, r5
 800ee04:	f7ff ffbc 	bl	800ed80 <_fflush_r>
 800ee08:	b9e0      	cbnz	r0, 800ee44 <__swbuf_r+0x74>
 800ee0a:	68a3      	ldr	r3, [r4, #8]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	60a3      	str	r3, [r4, #8]
 800ee10:	6823      	ldr	r3, [r4, #0]
 800ee12:	1c5a      	adds	r2, r3, #1
 800ee14:	6022      	str	r2, [r4, #0]
 800ee16:	701e      	strb	r6, [r3, #0]
 800ee18:	6962      	ldr	r2, [r4, #20]
 800ee1a:	1c43      	adds	r3, r0, #1
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d004      	beq.n	800ee2a <__swbuf_r+0x5a>
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	07db      	lsls	r3, r3, #31
 800ee24:	d506      	bpl.n	800ee34 <__swbuf_r+0x64>
 800ee26:	2e0a      	cmp	r6, #10
 800ee28:	d104      	bne.n	800ee34 <__swbuf_r+0x64>
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	4628      	mov	r0, r5
 800ee2e:	f7ff ffa7 	bl	800ed80 <_fflush_r>
 800ee32:	b938      	cbnz	r0, 800ee44 <__swbuf_r+0x74>
 800ee34:	4638      	mov	r0, r7
 800ee36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee38:	4621      	mov	r1, r4
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f000 f806 	bl	800ee4c <__swsetup_r>
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d0d5      	beq.n	800edf0 <__swbuf_r+0x20>
 800ee44:	f04f 37ff 	mov.w	r7, #4294967295
 800ee48:	e7f4      	b.n	800ee34 <__swbuf_r+0x64>
	...

0800ee4c <__swsetup_r>:
 800ee4c:	b538      	push	{r3, r4, r5, lr}
 800ee4e:	4b2a      	ldr	r3, [pc, #168]	; (800eef8 <__swsetup_r+0xac>)
 800ee50:	4605      	mov	r5, r0
 800ee52:	6818      	ldr	r0, [r3, #0]
 800ee54:	460c      	mov	r4, r1
 800ee56:	b118      	cbz	r0, 800ee60 <__swsetup_r+0x14>
 800ee58:	6a03      	ldr	r3, [r0, #32]
 800ee5a:	b90b      	cbnz	r3, 800ee60 <__swsetup_r+0x14>
 800ee5c:	f7fe f854 	bl	800cf08 <__sinit>
 800ee60:	89a3      	ldrh	r3, [r4, #12]
 800ee62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee66:	0718      	lsls	r0, r3, #28
 800ee68:	d422      	bmi.n	800eeb0 <__swsetup_r+0x64>
 800ee6a:	06d9      	lsls	r1, r3, #27
 800ee6c:	d407      	bmi.n	800ee7e <__swsetup_r+0x32>
 800ee6e:	2309      	movs	r3, #9
 800ee70:	602b      	str	r3, [r5, #0]
 800ee72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee76:	81a3      	strh	r3, [r4, #12]
 800ee78:	f04f 30ff 	mov.w	r0, #4294967295
 800ee7c:	e034      	b.n	800eee8 <__swsetup_r+0x9c>
 800ee7e:	0758      	lsls	r0, r3, #29
 800ee80:	d512      	bpl.n	800eea8 <__swsetup_r+0x5c>
 800ee82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee84:	b141      	cbz	r1, 800ee98 <__swsetup_r+0x4c>
 800ee86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee8a:	4299      	cmp	r1, r3
 800ee8c:	d002      	beq.n	800ee94 <__swsetup_r+0x48>
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f7fe fa4c 	bl	800d32c <_free_r>
 800ee94:	2300      	movs	r3, #0
 800ee96:	6363      	str	r3, [r4, #52]	; 0x34
 800ee98:	89a3      	ldrh	r3, [r4, #12]
 800ee9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee9e:	81a3      	strh	r3, [r4, #12]
 800eea0:	2300      	movs	r3, #0
 800eea2:	6063      	str	r3, [r4, #4]
 800eea4:	6923      	ldr	r3, [r4, #16]
 800eea6:	6023      	str	r3, [r4, #0]
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	f043 0308 	orr.w	r3, r3, #8
 800eeae:	81a3      	strh	r3, [r4, #12]
 800eeb0:	6923      	ldr	r3, [r4, #16]
 800eeb2:	b94b      	cbnz	r3, 800eec8 <__swsetup_r+0x7c>
 800eeb4:	89a3      	ldrh	r3, [r4, #12]
 800eeb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eeba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eebe:	d003      	beq.n	800eec8 <__swsetup_r+0x7c>
 800eec0:	4621      	mov	r1, r4
 800eec2:	4628      	mov	r0, r5
 800eec4:	f000 f840 	bl	800ef48 <__smakebuf_r>
 800eec8:	89a0      	ldrh	r0, [r4, #12]
 800eeca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eece:	f010 0301 	ands.w	r3, r0, #1
 800eed2:	d00a      	beq.n	800eeea <__swsetup_r+0x9e>
 800eed4:	2300      	movs	r3, #0
 800eed6:	60a3      	str	r3, [r4, #8]
 800eed8:	6963      	ldr	r3, [r4, #20]
 800eeda:	425b      	negs	r3, r3
 800eedc:	61a3      	str	r3, [r4, #24]
 800eede:	6923      	ldr	r3, [r4, #16]
 800eee0:	b943      	cbnz	r3, 800eef4 <__swsetup_r+0xa8>
 800eee2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eee6:	d1c4      	bne.n	800ee72 <__swsetup_r+0x26>
 800eee8:	bd38      	pop	{r3, r4, r5, pc}
 800eeea:	0781      	lsls	r1, r0, #30
 800eeec:	bf58      	it	pl
 800eeee:	6963      	ldrpl	r3, [r4, #20]
 800eef0:	60a3      	str	r3, [r4, #8]
 800eef2:	e7f4      	b.n	800eede <__swsetup_r+0x92>
 800eef4:	2000      	movs	r0, #0
 800eef6:	e7f7      	b.n	800eee8 <__swsetup_r+0x9c>
 800eef8:	200006c4 	.word	0x200006c4

0800eefc <__swhatbuf_r>:
 800eefc:	b570      	push	{r4, r5, r6, lr}
 800eefe:	460c      	mov	r4, r1
 800ef00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef04:	2900      	cmp	r1, #0
 800ef06:	b096      	sub	sp, #88	; 0x58
 800ef08:	4615      	mov	r5, r2
 800ef0a:	461e      	mov	r6, r3
 800ef0c:	da0d      	bge.n	800ef2a <__swhatbuf_r+0x2e>
 800ef0e:	89a3      	ldrh	r3, [r4, #12]
 800ef10:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ef14:	f04f 0100 	mov.w	r1, #0
 800ef18:	bf0c      	ite	eq
 800ef1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ef1e:	2340      	movne	r3, #64	; 0x40
 800ef20:	2000      	movs	r0, #0
 800ef22:	6031      	str	r1, [r6, #0]
 800ef24:	602b      	str	r3, [r5, #0]
 800ef26:	b016      	add	sp, #88	; 0x58
 800ef28:	bd70      	pop	{r4, r5, r6, pc}
 800ef2a:	466a      	mov	r2, sp
 800ef2c:	f000 f848 	bl	800efc0 <_fstat_r>
 800ef30:	2800      	cmp	r0, #0
 800ef32:	dbec      	blt.n	800ef0e <__swhatbuf_r+0x12>
 800ef34:	9901      	ldr	r1, [sp, #4]
 800ef36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ef3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ef3e:	4259      	negs	r1, r3
 800ef40:	4159      	adcs	r1, r3
 800ef42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef46:	e7eb      	b.n	800ef20 <__swhatbuf_r+0x24>

0800ef48 <__smakebuf_r>:
 800ef48:	898b      	ldrh	r3, [r1, #12]
 800ef4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef4c:	079d      	lsls	r5, r3, #30
 800ef4e:	4606      	mov	r6, r0
 800ef50:	460c      	mov	r4, r1
 800ef52:	d507      	bpl.n	800ef64 <__smakebuf_r+0x1c>
 800ef54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef58:	6023      	str	r3, [r4, #0]
 800ef5a:	6123      	str	r3, [r4, #16]
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	6163      	str	r3, [r4, #20]
 800ef60:	b002      	add	sp, #8
 800ef62:	bd70      	pop	{r4, r5, r6, pc}
 800ef64:	ab01      	add	r3, sp, #4
 800ef66:	466a      	mov	r2, sp
 800ef68:	f7ff ffc8 	bl	800eefc <__swhatbuf_r>
 800ef6c:	9900      	ldr	r1, [sp, #0]
 800ef6e:	4605      	mov	r5, r0
 800ef70:	4630      	mov	r0, r6
 800ef72:	f7fd f867 	bl	800c044 <_malloc_r>
 800ef76:	b948      	cbnz	r0, 800ef8c <__smakebuf_r+0x44>
 800ef78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef7c:	059a      	lsls	r2, r3, #22
 800ef7e:	d4ef      	bmi.n	800ef60 <__smakebuf_r+0x18>
 800ef80:	f023 0303 	bic.w	r3, r3, #3
 800ef84:	f043 0302 	orr.w	r3, r3, #2
 800ef88:	81a3      	strh	r3, [r4, #12]
 800ef8a:	e7e3      	b.n	800ef54 <__smakebuf_r+0xc>
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	6020      	str	r0, [r4, #0]
 800ef90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef94:	81a3      	strh	r3, [r4, #12]
 800ef96:	9b00      	ldr	r3, [sp, #0]
 800ef98:	6163      	str	r3, [r4, #20]
 800ef9a:	9b01      	ldr	r3, [sp, #4]
 800ef9c:	6120      	str	r0, [r4, #16]
 800ef9e:	b15b      	cbz	r3, 800efb8 <__smakebuf_r+0x70>
 800efa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efa4:	4630      	mov	r0, r6
 800efa6:	f000 f81d 	bl	800efe4 <_isatty_r>
 800efaa:	b128      	cbz	r0, 800efb8 <__smakebuf_r+0x70>
 800efac:	89a3      	ldrh	r3, [r4, #12]
 800efae:	f023 0303 	bic.w	r3, r3, #3
 800efb2:	f043 0301 	orr.w	r3, r3, #1
 800efb6:	81a3      	strh	r3, [r4, #12]
 800efb8:	89a3      	ldrh	r3, [r4, #12]
 800efba:	431d      	orrs	r5, r3
 800efbc:	81a5      	strh	r5, [r4, #12]
 800efbe:	e7cf      	b.n	800ef60 <__smakebuf_r+0x18>

0800efc0 <_fstat_r>:
 800efc0:	b538      	push	{r3, r4, r5, lr}
 800efc2:	4d07      	ldr	r5, [pc, #28]	; (800efe0 <_fstat_r+0x20>)
 800efc4:	2300      	movs	r3, #0
 800efc6:	4604      	mov	r4, r0
 800efc8:	4608      	mov	r0, r1
 800efca:	4611      	mov	r1, r2
 800efcc:	602b      	str	r3, [r5, #0]
 800efce:	f7f6 fa94 	bl	80054fa <_fstat>
 800efd2:	1c43      	adds	r3, r0, #1
 800efd4:	d102      	bne.n	800efdc <_fstat_r+0x1c>
 800efd6:	682b      	ldr	r3, [r5, #0]
 800efd8:	b103      	cbz	r3, 800efdc <_fstat_r+0x1c>
 800efda:	6023      	str	r3, [r4, #0]
 800efdc:	bd38      	pop	{r3, r4, r5, pc}
 800efde:	bf00      	nop
 800efe0:	20000b3c 	.word	0x20000b3c

0800efe4 <_isatty_r>:
 800efe4:	b538      	push	{r3, r4, r5, lr}
 800efe6:	4d06      	ldr	r5, [pc, #24]	; (800f000 <_isatty_r+0x1c>)
 800efe8:	2300      	movs	r3, #0
 800efea:	4604      	mov	r4, r0
 800efec:	4608      	mov	r0, r1
 800efee:	602b      	str	r3, [r5, #0]
 800eff0:	f7f6 fa93 	bl	800551a <_isatty>
 800eff4:	1c43      	adds	r3, r0, #1
 800eff6:	d102      	bne.n	800effe <_isatty_r+0x1a>
 800eff8:	682b      	ldr	r3, [r5, #0]
 800effa:	b103      	cbz	r3, 800effe <_isatty_r+0x1a>
 800effc:	6023      	str	r3, [r4, #0]
 800effe:	bd38      	pop	{r3, r4, r5, pc}
 800f000:	20000b3c 	.word	0x20000b3c

0800f004 <_init>:
 800f004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f006:	bf00      	nop
 800f008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f00a:	bc08      	pop	{r3}
 800f00c:	469e      	mov	lr, r3
 800f00e:	4770      	bx	lr

0800f010 <_fini>:
 800f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f012:	bf00      	nop
 800f014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f016:	bc08      	pop	{r3}
 800f018:	469e      	mov	lr, r3
 800f01a:	4770      	bx	lr
