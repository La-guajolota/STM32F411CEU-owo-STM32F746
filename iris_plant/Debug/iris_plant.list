
iris_plant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000474c  0800f010  0800f010  00010010  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801375c  0801375c  000156b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801375c  0801375c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013764  08013764  000156b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08013764  08013764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013770  08013770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006b8  20000000  08013778  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  200006b8  08013e30  000156b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08013e30  00015b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000156b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0016e09a  00000000  00000000  000156e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000f85e  00000000  00000000  00183782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004868  00000000  00000000  00192fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003826  00000000  00000000  00197848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038bd7  00000000  00000000  0019b06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000525dd  00000000  00000000  001d3c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001e911c  00000000  00000000  00226222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0040f33e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00016550  00000000  00000000  0040f384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  004258d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200006b8 	.word	0x200006b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800efec 	.word	0x0800efec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200006bc 	.word	0x200006bc
 800020c:	0800efec 	.word	0x0800efec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	4798      	blx	r3
    }
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 800116c:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800116e:	2137      	movs	r1, #55	@ 0x37
 8001170:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 8001172:	f00a ff21 	bl	800bfb8 <__assert_func>

	if(align && size)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d01f      	beq.n	80011bc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d01c      	beq.n	80011bc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4413      	add	r3, r2
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f006 fd19 	bl	8007bc8 <_Z9ei_callocjj>
 8001196:	60f8      	str	r0, [r7, #12]

		if(p)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00e      	beq.n	80011bc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	425b      	negs	r3, r3
 80011aa:	4013      	ands	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1ad2      	subs	r2, r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3b02      	subs	r3, #2
 80011b8:	b292      	uxth	r2, r2
 80011ba:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 80011bc:	697b      	ldr	r3, [r7, #20]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	0800f010 	.word	0x0800f010
 80011cc:	0800f02c 	.word	0x0800f02c
 80011d0:	0800f064 	.word	0x0800f064

080011d4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	assert(ptr);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 80011e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 80011e6:	215a      	movs	r1, #90	@ 0x5a
 80011e8:	480b      	ldr	r0, [pc, #44]	@ (8001218 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 80011ea:	f00a fee5 	bl	800bfb8 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80011f4:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	425b      	negs	r3, r3
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001200:	68b8      	ldr	r0, [r7, #8]
 8001202:	f006 fcef 	bl	8007be4 <_Z7ei_freePv>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	0800f0e4 	.word	0x0800f0e4
 8001214:	0800f0e8 	.word	0x0800f0e8
 8001218:	0800f064 	.word	0x0800f064

0800121c <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	731a      	strb	r2, [r3, #12]
 800123c:	e00e      	b.n	800125c <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f006 fcbc 	bl	8007bc8 <_Z9ei_callocjj>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2201      	movs	r2, #1
 800125a:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7b1b      	ldrb	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f006 fca8 	bl	8007be4 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	ed87 0a01 	vstr	s0, [r7, #4]
 80012a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80012ac:	f009 fbec 	bl	800aa88 <expf>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	ed87 0a01 	vstr	s0, [r7, #4]
 80012c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80012cc:	f009 fc40 	bl	800ab50 <sqrtf>
 80012d0:	eef0 7a40 	vmov.f32	s15, s0
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	ed87 0a01 	vstr	s0, [r7, #4]
 80012e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ec:	fef8 7a67 	vrinta.f32	s15, s15
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 800130c:	edd7 7a00 	vldr	s15, [r7]
 8001310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001314:	eef4 7a47 	vcmp.f32	s15, s14
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	d101      	bne.n	8001322 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 800131e:	2300      	movs	r3, #0
 8001320:	e033      	b.n	800138a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800132a:	d204      	bcs.n	8001336 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001334:	d301      	bcc.n	800133a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001338:	e027      	b.n	800138a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	b29b      	uxth	r3, r3
 8001340:	82bb      	strh	r3, [r7, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	b29b      	uxth	r3, r3
 8001348:	82fb      	strh	r3, [r7, #22]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	b29b      	uxth	r3, r3
 8001356:	81bb      	strh	r3, [r7, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	b29b      	uxth	r3, r3
 800135e:	81fb      	strh	r3, [r7, #14]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001366:	f107 020c 	add.w	r2, r7, #12
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4611      	mov	r1, r2
 8001370:	ed97 0a00 	vldr	s0, [r7]
 8001374:	4618      	mov	r0, r3
 8001376:	f006 fa78 	bl	800786a <arm_mat_scale_f32>
 800137a:	4603      	mov	r3, r0
 800137c:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	e000      	b.n	800138a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001388:	2300      	movs	r3, #0
    }
 800138a:	4618      	mov	r0, r3
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	fffffc0c 	.word	0xfffffc0c

08001398 <_ZN18ei_impulse_state_tC1EPK10ei_impulse>:
typedef DspHandle* _dsp_handle_ptr_t;
public:
    const ei_impulse_t *impulse; // keep a pointer to the impulse
    _dsp_handle_ptr_t *dsp_handles;
    bool is_temp_handle = false; // to know if we're using the old (stateless) API
    ei_impulse_state_t(const ei_impulse_t *impulse)
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
        : impulse(impulse)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	721a      	strb	r2, [r3, #8]
    {
        const auto num_dsp_blocks = impulse->dsp_blocks_size;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013b2:	60bb      	str	r3, [r7, #8]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 fbf9 	bl	8007bb0 <_Z9ei_mallocj>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	605a      	str	r2, [r3, #4]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e009      	b.n	80013de <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x46>
            dsp_handles[ix] = nullptr;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d3f1      	bcc.n	80013ca <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x32>
        }
    }
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_ZN18ei_impulse_state_t14get_dsp_handleEj>:

    DspHandle* get_dsp_handle(size_t ix) {
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
        if (dsp_handles[ix] == nullptr) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d115      	bne.n	8001436 <_ZN18ei_impulse_state_t14get_dsp_handleEj+0x46>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	015b      	lsls	r3, r3, #5
 8001414:	4413      	add	r3, r2
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	0152      	lsls	r2, r2, #5
 8001422:	440a      	add	r2, r1
 8001424:	68d0      	ldr	r0, [r2, #12]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6851      	ldr	r1, [r2, #4]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	188c      	adds	r4, r1, r2
 8001430:	4798      	blx	r3
 8001432:	4603      	mov	r3, r0
 8001434:	6023      	str	r3, [r4, #0]
        }
        return dsp_handles[ix];
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	681b      	ldr	r3, [r3, #0]
    }
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bd90      	pop	{r4, r7, pc}

0800144a <_ZN18ei_impulse_state_t5resetEv>:

    void reset()
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
    {
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e01e      	b.n	8001496 <_ZN18ei_impulse_state_t5resetEv+0x4c>
            if (dsp_handles[ix] != nullptr) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <_ZN18ei_impulse_state_t5resetEv+0x46>
                delete dsp_handles[ix];
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <_ZN18ei_impulse_state_t5resetEv+0x38>
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	320c      	adds	r2, #12
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	4790      	blx	r2
                dsp_handles[ix] = nullptr;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3301      	adds	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3da      	bcc.n	8001458 <_ZN18ei_impulse_state_t5resetEv+0xe>
            }
        }
    }
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_ZN18ei_impulse_state_tD1Ev>:

    void operator delete[](void* ptr) {
        ei_free(ptr);
    }

    ~ei_impulse_state_t()
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    {
        reset();
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffc8 	bl	800144a <_ZN18ei_impulse_state_t5resetEv>
        ei_free(dsp_handles);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f006 fb90 	bl	8007be4 <_Z7ei_freePv>
    }
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>:
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
        : state(impulse), impulse(impulse) {};
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6839      	ldr	r1, [r7, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5b 	bl	8001398 <_ZN18ei_impulse_state_tC1EPK10ei_impulse>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fe03 	bl	8001108 <_ZNSt14_Function_baseD1Ev>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_ZN2ei11ei_signal_tC1Ev>:
} DCT_NORMALIZATION_MODE;

/**
 * Sensor signal structure
 */
typedef struct ei_signal_t {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fc0e 	bl	8003d38 <_ZNSt8functionIFijjPfEEC1Ev>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_ZN2ei11ei_signal_tD1Ev>:
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ffde 	bl	80014f2 <_ZNSt8functionIFijjPfEED1Ev>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    }
#endif
    return EIDSP_NOT_SUPPORTED;
}

__attribute__((unused)) int extract_raw_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b08b      	sub	sp, #44	@ 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_raw_t config = *((ei_dsp_config_raw_t*)config_ptr);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f107 0410 	add.w	r4, r7, #16
 8001556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Because of rounding errors during re-sampling the output size of the block might be
    // smaller than the input of the block. Make sure we don't write outside of the bounds
    // of the array:
    // https://forum.edgeimpulse.com/t/using-custom-sensors-on-raspberry-pi-4/3506/7
    size_t els_to_copy = signal->total_length;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
    if (els_to_copy > output_matrix->rows * output_matrix->cols) {
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	6892      	ldr	r2, [r2, #8]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001570:	429a      	cmp	r2, r3
 8001572:	d906      	bls.n	8001582 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x42>
        els_to_copy = output_matrix->rows * output_matrix->cols;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	6892      	ldr	r2, [r2, #8]
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    signal->get_data(0, els_to_copy, output_matrix->buffer);
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158a:	2100      	movs	r1, #0
 800158c:	f002 fb93 	bl	8003cb6 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    int ret = numpy::scale(output_matrix, config.scale_axes);
 8001590:	edd7 7a07 	vldr	s15, [r7, #28]
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	68b8      	ldr	r0, [r7, #8]
 800159a:	f7ff feb1 	bl	8001300 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 800159e:	6238      	str	r0, [r7, #32]
    if (ret != EIDSP_OK) {
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
        EIDSP_ERR(ret);
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	e000      	b.n	80015ac <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6c>
    }

    return EIDSP_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	372c      	adds	r7, #44	@ 0x2c
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}

080015b4 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3310      	adds	r3, #16
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff94 	bl	800150c <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	f000 f832 	bl	800166e <_ZN14SignalWithAxes8get_dataEjjPf>
 800160a:	4603      	mov	r3, r0
        };
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	429a      	cmp	r2, r3
 8001628:	d102      	bne.n	8001630 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	e01a      	b.n	8001666 <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6892      	ldr	r2, [r2, #8]
 8001644:	fb03 f202 	mul.w	r2, r3, r2
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	621a      	str	r2, [r3, #32]
        };
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f103 0210 	add.w	r2, r3, #16
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]
        };
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f002 fba0 	bl	8003da2 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>
#endif
        return &wrapped_signal;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3310      	adds	r3, #16
    }
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 800166e:	b580      	push	{r7, lr}
 8001670:	b08a      	sub	sp, #40	@ 0x28
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	68d2      	ldr	r2, [r2, #12]
 800168a:	6992      	ldr	r2, [r2, #24]
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	68d2      	ldr	r2, [r2, #12]
 80016a0:	6992      	ldr	r2, [r2, #24]
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	e02a      	b.n	8001708 <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e01c      	b.n	80016f2 <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	18d1      	adds	r1, r2, r3
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	2201      	movs	r2, #1
 80016dc:	f002 faeb 	bl	8003cb6 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 80016e0:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <_ZN14SignalWithAxes8get_dataEjjPf+0x7e>
                    return r;
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	e014      	b.n	8001716 <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	3301      	adds	r3, #1
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3dd      	bcc.n	80016b8 <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	6a3a      	ldr	r2, [r7, #32]
 8001704:	4413      	add	r3, r2
 8001706:	623b      	str	r3, [r7, #32]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	4413      	add	r3, r2
 800170e:	6a3a      	ldr	r2, [r7, #32]
 8001710:	429a      	cmp	r2, r3
 8001712:	d3ce      	bcc.n	80016b2 <_ZN14SignalWithAxes8get_dataEjjPf+0x44>
                }
            }
        }

        return 0;
 8001714:	2300      	movs	r3, #0
    }
 8001716:	4618      	mov	r0, r3
 8001718:	3728      	adds	r7, #40	@ 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_ZN19ei_impulse_handle_tD1Ev>:
class ei_impulse_handle_t {
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff febf 	bl	80014ac <_ZN18ei_impulse_state_tD1Ev>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001746:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8001756:	b480      	push	{r7}
 8001758:	b087      	sub	sp, #28
 800175a:	af00      	add	r7, sp, #0
 800175c:	6178      	str	r0, [r7, #20]
 800175e:	6139      	str	r1, [r7, #16]
 8001760:	60fa      	str	r2, [r7, #12]
 8001762:	ed87 0a02 	vstr	s0, [r7, #8]
 8001766:	edc7 0a01 	vstr	s1, [r7, #4]
 800176a:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800176c:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6178      	str	r0, [r7, #20]
 8001784:	6139      	str	r1, [r7, #16]
 8001786:	60fa      	str	r2, [r7, #12]
 8001788:	ed87 0a02 	vstr	s0, [r7, #8]
 800178c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001790:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e03e      	b.n	8001816 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x9a>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f993 3000 	ldrsb.w	r3, [r3]
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ba:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d011      	beq.n	80017e8 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x6c>
            ei_printf("%s:\t", impulse->categories[ix]);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	4816      	ldr	r0, [pc, #88]	@ (8001830 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 80017d6:	f001 fbe7 	bl	8002fa8 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80017da:	ed97 0a06 	vldr	s0, [r7, #24]
 80017de:	f006 f8e3 	bl	80079a8 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80017e2:	4814      	ldr	r0, [pc, #80]	@ (8001834 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb8>)
 80017e4:	f001 fbe0 	bl	8002fa8 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	3201      	adds	r2, #1
 80017fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3301      	adds	r3, #1
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	3304      	adds	r3, #4
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	3301      	adds	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 800181c:	461a      	mov	r2, r3
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4293      	cmp	r3, r2
 8001822:	d3b9      	bcc.n	8001798 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1c>
    }

    return EI_IMPULSE_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0800f5bc 	.word	0x0800f5bc
 8001834:	0800f308 	.word	0x0800f308

08001838 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e031      	b.n	80018b0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x78>
        float value = data[ix];
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]

        if (debug) {
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d011      	beq.n	8001882 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x4a>
            ei_printf("%s:\t", impulse->categories[ix]);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	4816      	ldr	r0, [pc, #88]	@ (80018c8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8001870:	f001 fb9a 	bl	8002fa8 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8001874:	ed97 0a04 	vldr	s0, [r7, #16]
 8001878:	f006 f896 	bl	80079a8 <_Z15ei_printf_floatf>
            ei_printf("\n");
 800187c:	4813      	ldr	r0, [pc, #76]	@ (80018cc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 800187e:	f001 fb93 	bl	8002fa8 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	6819      	ldr	r1, [r3, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	3201      	adds	r2, #1
 8001896:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	3304      	adds	r3, #4
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 80018b6:	461a      	mov	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d3c6      	bcc.n	800184c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x14>
    }

    return EI_IMPULSE_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	0800f5bc 	.word	0x0800f5bc
 80018cc:	0800f308 	.word	0x0800f308

080018d0 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the visual anomaly result structures from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_visual_ad_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	70fb      	strb	r3, [r7, #3]
    }

    result->visual_ad_grid_cells = results.data();
    result->visual_ad_count = results.size();
#endif // EI_CLASSIFIER_HAS_VISUAL_ANOMALY
    return EI_IMPULSE_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov5(const ei_impulse_t *impulse,
                                                                              ei_impulse_result_t *result,
                                                                              int version,
                                                                              float *data,
                                                                              size_t output_features_count,
                                                                              bool debug = false) {
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80018fa:	f06f 0314 	mvn.w	r3, #20
#endif
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>:
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolox(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                             float *data,
                                                                             size_t output_features_count,
                                                                             bool debug = false) {
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001918:	f06f 0314 	mvn.w	r3, #20
#endif // EI_HAS_YOLOX
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov7(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                              float *data,
                                                                              size_t output_features_count) {
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001936:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_YOLOV7
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_decode_detections(const ei_impulse_t *impulse,
                                                                                     ei_impulse_result_t *result,
                                                                                     float *data,
                                                                                     size_t output_features_count,
                                                                                     bool debug = false) {
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_DECODE_DETECTIONS
    return fill_result_struct_tao_decode_detections_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001954:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_DETECT_DETECTIONS
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov3(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV3
    return fill_result_struct_tao_yolov3_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001972:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV3
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov4(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8001990:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e01e      	b.n	80019f2 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x52>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	ed93 7a00 	vldr	s14, [r3]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	4413      	add	r3, r2
 80019d8:	ed93 7a00 	vldr	s14, [r3]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e8:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3dc      	bcc.n	80019b4 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x14>
    }
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	e029      	b.n	8001a74 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x6c>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3e:	2002      	movs	r0, #2
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	f002 f8b6 	bl	8003bb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a48:	ec55 4b10 	vmov	r4, r5, d0
 8001a4c:	6978      	ldr	r0, [r7, #20]
 8001a4e:	f7fe fd9b 	bl	8000588 <__aeabi_f2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f7fe fc37 	bl	80002cc <__adddf3>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff f8df 	bl	8000c28 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	3301      	adds	r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d3d1      	bcc.n	8001a20 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x18>
    }
    return sqrt(dist) - cluster->max_error;
 8001a7c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001a80:	f7ff fc1d 	bl	80012be <_ZSt4sqrtf>
 8001a84:	eeb0 7a40 	vmov.f32	s14, s0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001a92:	eeb0 0a67 	vmov.f32	s0, s15
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bdb0      	pop	{r4, r5, r7, pc}

08001a9c <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x64>)
 8001aac:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	e018      	b.n	8001ae6 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4a>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7ff ffa1 	bl	8001a08 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 8001ac6:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 8001aca:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ace:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	d501      	bpl.n	8001ae0 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x44>
            min = dist;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3e2      	bcc.n	8001ab4 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x18>
        }
    }
    return min;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	ee07 3a90 	vmov	s15, r3
}
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	447a0000 	.word	0x447a0000

08001b04 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    uint32_t anom_axes_size,
    const uint16_t *anom_axis,
    float *input)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b08d      	sub	sp, #52	@ 0x34
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
    if (input_block_ids_size == 1) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d11a      	bne.n	8001b4e <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x4a>
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b1c:	e012      	b.n	8001b44 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x40>
            input[ix] = fmatrix[0].matrix->buffer[anom_axis[ix]];
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b2a:	440b      	add	r3, r1
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	441a      	add	r2, r3
 8001b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001b38:	440b      	add	r3, r1
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8001b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b40:	3301      	adds	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3e8      	bcc.n	8001b1e <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x1a>
 8001b4c:	e053      	b.n	8001bf6 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
    else {
#if EI_CLASSIFIER_SINGLE_FEATURE_INPUT == 0
        ei::matrix_t* matrix = NULL;
#endif
        // tracks where we are now in the combined feature matrix
        uint32_t global_buf_pos = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
        // we add the size of passed matrix to it
        uint32_t buf_offset = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	@ 0x28
        // current index of input feature
        uint32_t input_pos = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24

        for (size_t i = 0; i < input_block_ids_size; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
 8001b5e:	e044      	b.n	8001bea <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xe6>
            if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, anom_axes_size)) {
                ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
                return EI_IMPULSE_INVALID_SIZE;
            }
#else
            ei::matrix_t* matrix = fmatrix[0].matrix;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	617b      	str	r3, [r7, #20]
#endif
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	e02c      	b.n	8001bc6 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xc2>
                global_buf_pos = anom_axis[input_pos];
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b72:	4413      	add	r3, r2
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	61bb      	str	r3, [r7, #24]
                if (global_buf_pos <= buf_offset + (matrix->rows * matrix->cols)) {
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	6892      	ldr	r2, [r2, #8]
 8001b80:	fb03 f202 	mul.w	r2, r3, r2
 8001b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b86:	4413      	add	r3, r2
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d820      	bhi.n	8001bd0 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xcc>
                    input[input_pos] = matrix->buffer[anom_axis[input_pos] - buf_offset];
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b98:	440b      	add	r3, r1
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba0:	1acb      	subs	r3, r1, r3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	441a      	add	r2, r3
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001bac:	440b      	add	r3, r1
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	601a      	str	r2, [r3, #0]
                    input_pos++;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
                if (input_pos >= anom_axes_size) { goto end; }
 8001bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d219      	bcs.n	8001bf4 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf0>
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3ce      	bcc.n	8001b6c <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x68>
 8001bce:	e000      	b.n	8001bd2 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xce>
                }
                else {
                    break;
 8001bd0:	bf00      	nop
                }
            }
            buf_offset += matrix->rows * matrix->cols;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	6892      	ldr	r2, [r2, #8]
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001be0:	4413      	add	r3, r2
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (size_t i = 0; i < input_block_ids_size; i++) {
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	3301      	adds	r3, #1
 8001be8:	623b      	str	r3, [r7, #32]
 8001bea:	6a3a      	ldr	r2, [r7, #32]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3b6      	bcc.n	8001b60 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x5c>
        }
        end:;
 8001bf2:	e000      	b.n	8001bf6 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
                if (input_pos >= anom_axes_size) { goto end; }
 8001bf4:	bf00      	nop
    }
    return EI_IMPULSE_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3734      	adds	r7, #52	@ 0x34
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	@ 0x38
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
    ei_learning_block_config_anomaly_kmeans_t *block_config = (ei_learning_block_config_anomaly_kmeans_t*)config_ptr;
 8001c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint64_t anomaly_start_ms = ei_read_timer_ms();
 8001c16:	f005 fea7 	bl	8007968 <_Z16ei_read_timer_msv>
 8001c1a:	e9c7 0108 	strd	r0, r1, [r7, #32]

    float *input = (float*)ei_malloc(block_config->anom_axes_size * sizeof(float));
 8001c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c20:	891b      	ldrh	r3, [r3, #8]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 ffc3 	bl	8007bb0 <_Z9ei_mallocj>
 8001c2a:	61f8      	str	r0, [r7, #28]
    if (!input) {
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x3a>
        ei_printf("Failed to allocate memory for anomaly input buffer");
 8001c32:	4829      	ldr	r0, [pc, #164]	@ (8001cd8 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd4>)
 8001c34:	f001 f9b8 	bl	8002fa8 <_Z9ei_printfPKcz>
        return EI_IMPULSE_OUT_OF_MEMORY;
 8001c38:	f06f 030a 	mvn.w	r3, #10
 8001c3c:	e047      	b.n	8001cce <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xca>
    }

    extract_anomaly_input_values(fmatrix, input_block_ids, input_block_ids_size, block_config->anom_axes_size, block_config->anom_axis, input);
 8001c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c40:	891b      	ldrh	r3, [r3, #8]
 8001c42:	4619      	mov	r1, r3
 8001c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	9201      	str	r2, [sp, #4]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c52:	6839      	ldr	r1, [r7, #0]
 8001c54:	68b8      	ldr	r0, [r7, #8]
 8001c56:	f7ff ff55 	bl	8001b04 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>

    standard_scaler(input, block_config->anom_scale, block_config->anom_mean, block_config->anom_axes_size);
 8001c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c5c:	6959      	ldr	r1, [r3, #20]
 8001c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c64:	891b      	ldrh	r3, [r3, #8]
 8001c66:	69f8      	ldr	r0, [r7, #28]
 8001c68:	f7ff fe9a 	bl	80019a0 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
    float anomaly = get_min_distance_to_cluster(
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8001c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6e:	891b      	ldrh	r3, [r3, #8]
    float anomaly = get_min_distance_to_cluster(
 8001c70:	4619      	mov	r1, r3
 8001c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c74:	68da      	ldr	r2, [r3, #12]
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8001c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c78:	8a1b      	ldrh	r3, [r3, #16]
    float anomaly = get_min_distance_to_cluster(
 8001c7a:	69f8      	ldr	r0, [r7, #28]
 8001c7c:	f7ff ff0e 	bl	8001a9c <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 8001c80:	ed87 0a06 	vstr	s0, [r7, #24]

    uint64_t anomaly_end_ms = ei_read_timer_ms();
 8001c84:	f005 fe70 	bl	8007968 <_Z16ei_read_timer_msv>
 8001c88:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (debug) {
 8001c8c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00d      	beq.n	8001cb0 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xac>
        ei_printf("Anomaly score (time: %d ms.): ", static_cast<int>(anomaly_end_ms - anomaly_start_ms));
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480f      	ldr	r0, [pc, #60]	@ (8001cdc <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd8>)
 8001c9e:	f001 f983 	bl	8002fa8 <_Z9ei_printfPKcz>
        ei_printf_float(anomaly);
 8001ca2:	ed97 0a06 	vldr	s0, [r7, #24]
 8001ca6:	f005 fe7f 	bl	80079a8 <_Z15ei_printf_floatf>
        ei_printf("\n");
 8001caa:	480d      	ldr	r0, [pc, #52]	@ (8001ce0 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xdc>)
 8001cac:	f001 f97c 	bl	8002fa8 <_Z9ei_printfPKcz>
    }

    result->timing.anomaly = anomaly_end_ms - anomaly_start_ms;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cba:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    result->anomaly = anomaly;
 8001cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    ei_free(input);
 8001cc6:	69f8      	ldr	r0, [r7, #28]
 8001cc8:	f005 ff8c 	bl	8007be4 <_Z7ei_freePv>

    return EI_IMPULSE_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3730      	adds	r7, #48	@ 0x30
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	0800f5c4 	.word	0x0800f5c4
 8001cdc:	0800f5f8 	.word	0x0800f5f8
 8001ce0:	0800f308 	.word	0x0800f308

08001ce4 <_ZL17pre_cast_quantizefflb>:
#define __EI_QUANTIZE__H__

#include <algorithm>
#include <cmath>

static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cee:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]

    int32_t max_value = is_signed ? 127 : 255;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <_ZL17pre_cast_quantizefflb+0x1e>
 8001cfe:	237f      	movs	r3, #127	@ 0x7f
 8001d00:	e000      	b.n	8001d04 <_ZL17pre_cast_quantizefflb+0x20>
 8001d02:	23ff      	movs	r3, #255	@ 0xff
 8001d04:	61bb      	str	r3, [r7, #24]
    int32_t min_value = is_signed ? -128 : 0;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <_ZL17pre_cast_quantizefflb+0x2e>
 8001d0c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8001d10:	e000      	b.n	8001d14 <_ZL17pre_cast_quantizefflb+0x30>
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 8001d16:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d22:	eeb0 0a66 	vmov.f32	s0, s13
 8001d26:	f7ff fada 	bl	80012de <_ZSt5roundf>
 8001d2a:	eef0 7a40 	vmov.f32	s15, s0
 8001d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d32:	ee17 2a90 	vmov	r2, s15
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	f107 0214 	add.w	r2, r7, #20
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 f8f7 	bl	8003f3a <_ZSt3maxIlERKT_S2_S2_>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f107 0318 	add.w	r3, r7, #24
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f002 f8dc 	bl	8003f12 <_ZSt3minIlERKT_S2_S2_>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	681b      	ldr	r3, [r3, #0]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08e      	sub	sp, #56	@ 0x38
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
    size_t matrix_els = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t input_idx = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	633b      	str	r3, [r7, #48]	@ 0x30

    for (size_t i = 0; i < input_block_ids_size; i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d82:	e098      	b.n	8001eb6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14e>
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61fb      	str	r3, [r7, #28]
#endif

        matrix_els += matrix->rows * matrix->cols;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	6892      	ldr	r2, [r2, #8]
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d98:	4413      	add	r3, r2
 8001d9a:	637b      	str	r3, [r7, #52]	@ 0x34

        switch (input->type) {
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d024      	beq.n	8001dee <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x86>
 8001da4:	2b09      	cmp	r3, #9
 8001da6:	dc7a      	bgt.n	8001e9e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d002      	beq.n	8001db2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d04a      	beq.n	8001e46 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xde>
 8001db0:	e075      	b.n	8001e9e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
            case kTfLiteFloat32: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db6:	e010      	b.n	8001dda <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x72>
                    input->data.f[input_idx++] = matrix->buffer[ix];
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	441a      	add	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6859      	ldr	r1, [r3, #4]
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc8:	1c58      	adds	r0, r3, #1
 8001dca:	6338      	str	r0, [r7, #48]	@ 0x30
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	601a      	str	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	6892      	ldr	r2, [r2, #8]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d3e5      	bcc.n	8001db8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x50>
                }
                break;
 8001dec:	e060      	b.n	8001eb0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df2:	e01e      	b.n	8001e32 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xca>
                    float val = (float)matrix->buffer[ix];
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	4618      	mov	r0, r3
 8001e10:	eef0 0a67 	vmov.f32	s1, s15
 8001e14:	ed97 0a06 	vldr	s0, [r7, #24]
 8001e18:	f7ff ff64 	bl	8001ce4 <_ZL17pre_cast_quantizefflb>
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e22:	1c59      	adds	r1, r3, #1
 8001e24:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e26:	4413      	add	r3, r2
 8001e28:	b242      	sxtb	r2, r0
 8001e2a:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	3301      	adds	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	6892      	ldr	r2, [r2, #8]
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3d7      	bcc.n	8001df4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8c>
                }
                break;
 8001e44:	e034      	b.n	8001eb0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	e01e      	b.n	8001e8a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x122>
                    float val = (float)matrix->buffer[ix];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	617b      	str	r3, [r7, #20]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	eef0 0a67 	vmov.f32	s1, s15
 8001e6c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e70:	f7ff ff38 	bl	8001ce4 <_ZL17pre_cast_quantizefflb>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7a:	1c59      	adds	r1, r3, #1
 8001e7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e7e:	4413      	add	r3, r2
 8001e80:	b2c2      	uxtb	r2, r0
 8001e82:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	3301      	adds	r3, #1
 8001e88:	623b      	str	r3, [r7, #32]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	6892      	ldr	r2, [r2, #8]
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	6a3a      	ldr	r2, [r7, #32]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3d7      	bcc.n	8001e4c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe4>
                break;
 8001e9c:	e008      	b.n	8001eb0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4814      	ldr	r0, [pc, #80]	@ (8001ef8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x190>)
 8001ea6:	f001 f87f 	bl	8002fa8 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8001eaa:	f06f 030c 	mvn.w	r3, #12
 8001eae:	e01e      	b.n	8001eee <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    for (size_t i = 0; i < input_block_ids_size; i++) {
 8001eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	f4ff af62 	bcc.w	8001d84 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1c>
            }
        }
    }

    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d00f      	beq.n	8001eec <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d00a      	beq.n	8001eec <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
            (int)input->bytes, (int)matrix_els);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	699b      	ldr	r3, [r3, #24]
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
 8001eda:	4619      	mov	r1, r3
 8001edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4806      	ldr	r0, [pc, #24]	@ (8001efc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x194>)
 8001ee2:	f001 f861 	bl	8002fa8 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
 8001ee6:	f06f 0317 	mvn.w	r3, #23
 8001eea:	e000      	b.n	8001eee <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    }

    return EI_IMPULSE_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3738      	adds	r7, #56	@ 0x38
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	0800f618 	.word	0x0800f618
 8001efc:	0800f63c 	.word	0x0800f63c

08001f00 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	6892      	ldr	r2, [r2, #8]
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]

    switch (output->type) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	d026      	beq.n	8001f6e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x6e>
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	f300 8093 	bgt.w	800204c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d002      	beq.n	8001f30 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x30>
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d057      	beq.n	8001fde <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xde>
 8001f2e:	e08d      	b.n	800204c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d00e      	beq.n	8001f5a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x5a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da00      	bge.n	8001f46 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
 8001f44:	3303      	adds	r3, #3
 8001f46:	109b      	asrs	r3, r3, #2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4846      	ldr	r0, [pc, #280]	@ (8002068 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8001f50:	f001 f82a 	bl	8002fa8 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8001f54:	f06f 0317 	mvn.w	r3, #23
 8001f58:	e082      	b.n	8002060 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f00b f9e9 	bl	800d33e <memcpy>
            break;
 8001f6c:	e077      	b.n	800205e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteInt8: {
            if (output->bytes != matrix_els) {
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d00a      	beq.n	8001f8e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8e>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4839      	ldr	r0, [pc, #228]	@ (8002068 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8001f84:	f001 f810 	bl	8002fa8 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8001f88:	f06f 0317 	mvn.w	r3, #23
 8001f8c:	e068      	b.n	8002060 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e01e      	b.n	8001fd2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd2>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	edc7 7a04 	vstr	s15, [r7, #16]
                output_matrix->buffer[ix] = value;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d3db      	bcc.n	8001f94 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x94>
            }
            break;
 8001fdc:	e03f      	b.n	800205e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d00a      	beq.n	8001ffe <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xfe>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8001fec:	4619      	mov	r1, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	481d      	ldr	r0, [pc, #116]	@ (8002068 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8001ff4:	f000 ffd8 	bl	8002fa8 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8001ff8:	f06f 0317 	mvn.w	r3, #23
 8001ffc:	e030      	b.n	8002060 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	e01d      	b.n	8002040 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x140>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	edd3 7a03 	vldr	s15, [r3, #12]
 8002024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002028:	edc7 7a03 	vstr	s15, [r7, #12]
                output_matrix->buffer[ix] = value;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	3301      	adds	r3, #1
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	429a      	cmp	r2, r3
 8002048:	d3dc      	bcc.n	8002004 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x104>
            }
            break;
 800204a:	e008      	b.n	800205e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        default: {
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	@ (800206c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x16c>)
 8002054:	f000 ffa8 	bl	8002fa8 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
 8002058:	f06f 030d 	mvn.w	r3, #13
 800205c:	e000      	b.n	8002060 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
        }
    }

    return EI_IMPULSE_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	0800f6c4 	.word	0x0800f6c4
 800206c:	0800f708 	.word	0x0800f708

08002070 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	@ 0x30
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	789b      	ldrb	r3, [r3, #2]
 8002088:	2b03      	cmp	r3, #3
 800208a:	f040 822d 	bne.w	80024e8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x478>
        switch (block_config->object_detection_last_layer) {
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002094:	3b01      	subs	r3, #1
 8002096:	2b09      	cmp	r3, #9
 8002098:	f200 821c 	bhi.w	80024d4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x464>
 800209c:	a201      	add	r2, pc, #4	@ (adr r2, 80020a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	0800213f 	.word	0x0800213f
 80020a8:	080020cd 	.word	0x080020cd
 80020ac:	0800214b 	.word	0x0800214b
 80020b0:	08002227 	.word	0x08002227
 80020b4:	0800214b 	.word	0x0800214b
 80020b8:	08002247 	.word	0x08002247
 80020bc:	0800228f 	.word	0x0800228f
 80020c0:	0800228f 	.word	0x0800228f
 80020c4:	0800234d 	.word	0x0800234d
 80020c8:	08002417 	.word	0x08002417
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b09      	cmp	r3, #9
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	74fb      	strb	r3, [r7, #19]
                if (int8_output) {
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01d      	beq.n	800211c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xac>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 80020fa:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	460b      	mov	r3, r1
 8002104:	eef0 0a47 	vmov.f32	s1, s14
 8002108:	eeb0 0a67 	vmov.f32	s0, s15
 800210c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff fb21 	bl	8001756 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8002114:	4603      	mov	r3, r0
 8002116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
                        impulse->fomo_output_size, impulse->fomo_output_size);
                }
                break;
 800211a:	e233      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8002124:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	460b      	mov	r3, r1
 800212e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff fb01 	bl	8001738 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 800213c:	e222      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 800213e:	48a4      	ldr	r0, [pc, #656]	@ (80023d0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x360>)
 8002140:	f000 ff32 	bl	8002fa8 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8002144:	f06f 0309 	mvn.w	r3, #9
 8002148:	e21e      	b.n	8002588 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                int version = impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI ?
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
 8002150:	2b05      	cmp	r3, #5
 8002152:	d101      	bne.n	8002158 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xe8>
 8002154:	2305      	movs	r3, #5
 8002156:	e000      	b.n	800215a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xea>
 8002158:	2306      	movs	r3, #6
 800215a:	617b      	str	r3, [r7, #20]
                    5 : 6;

                if (output->type == kTfLiteInt8) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d11e      	bne.n	80021a2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x132>
                    fill_res = fill_result_struct_quantized_yolov5(
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        result,
                        version,
                        output->data.int8,
                        output->params.zero_point,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 800217e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002182:	9201      	str	r2, [sp, #4]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	eef0 0a47 	vmov.f32	s1, s14
 800218a:	eeb0 0a67 	vmov.f32	s0, s15
 800218e:	460b      	mov	r3, r1
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f001 fee4 	bl	8003f62 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80021a0:	e1f0      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d11e      	bne.n	80021e8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x178>
                    fill_res = fill_result_struct_quantized_yolov5(
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6859      	ldr	r1, [r3, #4]
                        output->params.zero_point,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 80021c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80021c8:	9201      	str	r2, [sp, #4]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	eef0 0a47 	vmov.f32	s1, s14
 80021d0:	eeb0 0a67 	vmov.f32	s0, s15
 80021d4:	460b      	mov	r3, r1
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f001 fed4 	bl	8003f88 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 80021e6:	e1cd      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d111      	bne.n	8002214 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1a4>
                    fill_res = fill_result_struct_f32_yolov5(
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
                        impulse->tflite_output_features_count,
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_yolov5(
 80021f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80021fc:	9201      	str	r2, [sp, #4]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	460b      	mov	r3, r1
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f7ff fb70 	bl	80018ec <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>
 800220c:	4603      	mov	r3, r0
 800220e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8002212:	e1b7      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	486e      	ldr	r0, [pc, #440]	@ (80023d4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
 800221c:	f000 fec4 	bl	8002fa8 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8002220:	f06f 0309 	mvn.w	r3, #9
 8002224:	e1b0      	b.n	8002588 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    fill_res = fill_result_struct_f32_yolox(
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.f,
                        impulse->tflite_output_features_count,
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_yolox(
 800222e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	460b      	mov	r3, r1
 8002236:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff fb66 	bl	800190a <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>
 800223e:	4603      	mov	r3, r0
 8002240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                        debug);
                #endif
                break;
 8002244:	e19e      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            case EI_CLASSIFIER_LAST_LAYER_YOLOV7: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    size_t output_feature_count = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e00d      	b.n	800226c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1fc>
                        output_feature_count *= output->dims->data[ix];
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	461a      	mov	r2, r3
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3301      	adds	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	429a      	cmp	r2, r3
 8002276:	dbeb      	blt.n	8002250 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1e0>
                    }
                    fill_res = fill_result_struct_f32_yolov7(
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff fb51 	bl	8001928 <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>
 8002286:	4603      	mov	r3, r0
 8002288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                        impulse,
                        result,
                        output->data.f,
                        output_feature_count);
                #endif
                break;
 800228c:	e17a      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_SSD:
            case EI_CLASSIFIER_LAST_LAYER_TAO_RETINANET: {

                if (output->type == kTfLiteInt8) {
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b09      	cmp	r3, #9
 8002294:	d11c      	bne.n	80022d0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x260>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022b0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	460b      	mov	r3, r1
 80022b8:	eef0 0a47 	vmov.f32	s1, s14
 80022bc:	eeb0 0a67 	vmov.f32	s0, s15
 80022c0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f001 fe73 	bl	8003fae <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80022ce:	e159      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d11c      	bne.n	8002312 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2a2>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 80022f2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	460b      	mov	r3, r1
 80022fa:	eef0 0a47 	vmov.f32	s1, s14
 80022fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002302:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f001 fe65 	bl	8003fd4 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 800230a:	4603      	mov	r3, r0
 800230c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8002310:	e138      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d10f      	bne.n	800233a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2ca>
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 8002322:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	460b      	mov	r3, r1
 800232a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fb0a 	bl	8001946 <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>
 8002332:	4603      	mov	r3, r0
 8002334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8002338:	e124      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	4825      	ldr	r0, [pc, #148]	@ (80023d8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
 8002342:	f000 fe31 	bl	8002fa8 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8002346:	f06f 0309 	mvn.w	r3, #9
 800234a:	e11d      	b.n	8002588 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV3: {

                if (output->type == kTfLiteInt8) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b09      	cmp	r3, #9
 8002352:	d11c      	bne.n	800238e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x31e>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800236e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	460b      	mov	r3, r1
 8002376:	eef0 0a47 	vmov.f32	s1, s14
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f001 fe3a 	bl	8003ffa <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8002386:	4603      	mov	r3, r0
 8002388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 800238c:	e0fa      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d122      	bne.n	80023dc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80023b0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	460b      	mov	r3, r1
 80023b8:	eef0 0a47 	vmov.f32	s1, s14
 80023bc:	eeb0 0a67 	vmov.f32	s0, s15
 80023c0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f001 fe2c 	bl	8004020 <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 80023ce:	e0d9      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
 80023d0:	0800f730 	.word	0x0800f730
 80023d4:	0800f778 	.word	0x0800f778
 80023d8:	0800f7b0 	.word	0x0800f7b0
                else if (output->type == kTfLiteFloat32) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10f      	bne.n	8002404 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x394>
                    fill_res = fill_result_struct_f32_tao_yolov3(
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov3(
 80023ec:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	460b      	mov	r3, r1
 80023f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f7ff fab4 	bl	8001964 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8002402:	e0bf      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	4861      	ldr	r0, [pc, #388]	@ (8002590 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x520>)
 800240c:	f000 fdcc 	bl	8002fa8 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8002410:	f06f 0309 	mvn.w	r3, #9
 8002414:	e0b8      	b.n	8002588 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV4: {

                if (output->type == kTfLiteInt8) {
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b09      	cmp	r3, #9
 800241c:	d11c      	bne.n	8002458 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3e8>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8002438:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	460b      	mov	r3, r1
 8002440:	eef0 0a47 	vmov.f32	s1, s14
 8002444:	eeb0 0a67 	vmov.f32	s0, s15
 8002448:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f001 fdfb 	bl	8004046 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8002450:	4603      	mov	r3, r0
 8002452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8002456:	e095      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d11c      	bne.n	800249a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x42a>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8002468:	ee07 3a90 	vmov	s15, r3
 800246c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 800247a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	460b      	mov	r3, r1
 8002482:	eef0 0a47 	vmov.f32	s1, s14
 8002486:	eeb0 0a67 	vmov.f32	s0, s15
 800248a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f001 fded 	bl	800406c <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8002492:	4603      	mov	r3, r0
 8002494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8002498:	e074      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10f      	bne.n	80024c2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x452>
                    fill_res = fill_result_struct_f32_tao_yolov4(
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov4(
 80024aa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	460b      	mov	r3, r1
 80024b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff fa64 	bl	8001982 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 80024c0:	e060      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	4832      	ldr	r0, [pc, #200]	@ (8002594 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x524>)
 80024ca:	f000 fd6d 	bl	8002fa8 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80024ce:	f06f 0309 	mvn.w	r3, #9
 80024d2:	e059      	b.n	8002588 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 80024da:	4619      	mov	r1, r3
 80024dc:	482e      	ldr	r0, [pc, #184]	@ (8002598 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x528>)
 80024de:	f000 fd63 	bl	8002fa8 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80024e2:	f06f 0309 	mvn.w	r3, #9
 80024e6:	e04f      	b.n	8002588 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	789b      	ldrb	r3, [r3, #2]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d113      	bne.n	8002518 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4a8>
    {
        if (!result->copy_output) {
 80024f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f2:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80024f6:	f083 0301 	eor.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d041      	beq.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            fill_res = fill_result_visual_ad_struct_f32(impulse, result, output->data.f, debug);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002508:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f7ff f9e0 	bl	80018d0 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 8002510:	4603      	mov	r3, r0
 8002512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002516:	e035      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
 8002518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251a:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 800251e:	f083 0301 	eor.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d02d      	beq.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b09      	cmp	r3, #9
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	76fb      	strb	r3, [r7, #27]
            if (int8_output) {
 8002536:	7efb      	ldrb	r3, [r7, #27]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d018      	beq.n	800256e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4fe>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	ee07 3a90 	vmov	s15, r3
 8002548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002552:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002556:	eef0 0a47 	vmov.f32	s1, s14
 800255a:	eeb0 0a67 	vmov.f32	s0, s15
 800255e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7ff f90b 	bl	800177c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8002566:	4603      	mov	r3, r0
 8002568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800256c:	e00a      	b.n	8002584 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            else {
                fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002576:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7ff f95d 	bl	8001838 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800257e:	4603      	mov	r3, r0
 8002580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return fill_res;
 8002584:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002588:	4618      	mov	r0, r3
 800258a:	3728      	adds	r7, #40	@ 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	0800f7e4 	.word	0x0800f7e4
 8002594:	0800f818 	.word	0x0800f818
 8002598:	0800f84c 	.word	0x0800f84c

0800259c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>:
    uint64_t *ctx_start_us,
    TfLiteTensor* input,
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	617b      	str	r3, [r7, #20]

    *ctx_start_us = ei_read_timer_us();
 80025b0:	f005 f9e7 	bl	8007982 <_Z16ei_read_timer_usv>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4829      	ldr	r0, [pc, #164]	@ (8002668 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xcc>)
 80025c4:	4798      	blx	r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	74fb      	strb	r3, [r7, #19]
    if (init_status != kTfLiteOk) {
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x44>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4825      	ldr	r0, [pc, #148]	@ (800266c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xd0>)
 80025d6:	f000 fce7 	bl	8002fa8 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80025da:	f06f 0305 	mvn.w	r3, #5
 80025de:	e03f      	b.n	8002660 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	2000      	movs	r0, #0
 80025e8:	4798      	blx	r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 80025ee:	7cbb      	ldrb	r3, [r7, #18]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x5e>
        return EI_IMPULSE_TFLITE_ERROR;
 80025f4:	f06f 0302 	mvn.w	r3, #2
 80025f8:	e032      	b.n	8002660 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	7a92      	ldrb	r2, [r2, #10]
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	4610      	mov	r0, r2
 8002606:	4798      	blx	r3
 8002608:	4603      	mov	r3, r0
 800260a:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 800260c:	7cbb      	ldrb	r3, [r7, #18]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x7c>
        return EI_IMPULSE_TFLITE_ERROR;
 8002612:	f06f 0302 	mvn.w	r3, #2
 8002616:	e023      	b.n	8002660 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d11d      	bne.n	800265e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	7b12      	ldrb	r2, [r2, #12]
 800262a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800262c:	4610      	mov	r0, r2
 800262e:	4798      	blx	r3
 8002630:	4603      	mov	r3, r0
 8002632:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 8002634:	7cbb      	ldrb	r3, [r7, #18]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xa4>
            return EI_IMPULSE_TFLITE_ERROR;
 800263a:	f06f 0302 	mvn.w	r3, #2
 800263e:	e00f      	b.n	8002660 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	7ad2      	ldrb	r2, [r2, #11]
 8002648:	6a39      	ldr	r1, [r7, #32]
 800264a:	4610      	mov	r0, r2
 800264c:	4798      	blx	r3
 800264e:	4603      	mov	r3, r0
 8002650:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 8002652:	7cbb      	ldrb	r3, [r7, #18]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
            return EI_IMPULSE_TFLITE_ERROR;
 8002658:	f06f 0302 	mvn.w	r3, #2
 800265c:	e000      	b.n	8002660 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
    }

    return EI_IMPULSE_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	08001151 	.word	0x08001151
 800266c:	0800f880 	.word	0x0800f880

08002670 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b08e      	sub	sp, #56	@ 0x38
 8002674:	af04      	add	r7, sp, #16
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	e9c7 2300 	strd	r2, r3, [r7]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24

    if (graph_config->model_invoke() != kTfLiteOk) {
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4798      	blx	r3
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x30>
        return EI_IMPULSE_TFLITE_ERROR;
 800269a:	f06f 0302 	mvn.w	r3, #2
 800269e:	e04d      	b.n	800273c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80026a0:	f005 f96f 	bl	8007982 <_Z16ei_read_timer_usv>
 80026a4:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80026a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026b0:	1a84      	subs	r4, r0, r2
 80026b2:	eb61 0503 	sbc.w	r5, r1, r3
 80026b6:	4622      	mov	r2, r4
 80026b8:	462b      	mov	r3, r5
 80026ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80026bc:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 80026c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026c2:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	@ 0xf0
 80026c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	f7fe fafb 	bl	8000cc8 <__aeabi_ldivmod>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 80026dc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x82>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 80026e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ea:	4619      	mov	r1, r3
 80026ec:	4815      	ldr	r0, [pc, #84]	@ (8002744 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xd4>)
 80026ee:	f000 fc5b 	bl	8002fa8 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 80026f2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80026f6:	9302      	str	r3, [sp, #8]
 80026f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002702:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f7ff fcb2 	bl	8002070 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
 800270c:	4603      	mov	r3, r0
 800270e:	75fb      	strb	r3, [r7, #23]
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
 8002710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xae>
        return fill_res;
 8002718:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800271c:	e00e      	b.n	800273c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800271e:	f005 f91b 	bl	8007958 <_Z29ei_run_impulse_check_canceledv>
 8002722:	4603      	mov	r3, r0
 8002724:	f113 0f02 	cmn.w	r3, #2
 8002728:	bf0c      	ite	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	2300      	movne	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xca>
        return EI_IMPULSE_CANCELED;
 8002734:	f06f 0301 	mvn.w	r3, #1
 8002738:	e000      	b.n	800273c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    return EI_IMPULSE_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3728      	adds	r7, #40	@ 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bdb0      	pop	{r4, r5, r7, pc}
 8002744:	0800f8b0 	.word	0x0800f8b0

08002748 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 8002748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274a:	b0d7      	sub	sp, #348	@ 0x15c
 800274c:	af06      	add	r7, sp, #24
 800274e:	f507 76a0 	add.w	r6, r7, #320	@ 0x140
 8002752:	f5a6 769a 	sub.w	r6, r6, #308	@ 0x134
 8002756:	6030      	str	r0, [r6, #0]
 8002758:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800275c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8002760:	6001      	str	r1, [r0, #0]
 8002762:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8002766:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800276a:	600a      	str	r2, [r1, #0]
 800276c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002770:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002774:	6013      	str	r3, [r2, #0]
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
 8002776:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800277a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800277e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 8002788:	f005 f8fb 	bl	8007982 <_Z16ei_read_timer_usv>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8002794:	4b65      	ldr	r3, [pc, #404]	@ (800292c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 8002796:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800279a:	f507 7292 	add.w	r2, r7, #292	@ 0x124
 800279e:	f107 0310 	add.w	r3, r7, #16
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 fa37 	bl	8003c18 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 80027aa:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 80027ae:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 80027b2:	f107 0118 	add.w	r1, r7, #24
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	9302      	str	r3, [sp, #8]
 80027bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4603      	mov	r3, r0
 80027ca:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80027ce:	f7ff fee5 	bl	800259c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 80027d8:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9e>
        return init_res;
 80027e0:	f997 4137 	ldrsb.w	r4, [r7, #311]	@ 0x137
 80027e4:	e096      	b.n	8002914 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 80027e6:	f107 0310 	add.w	r3, r7, #16
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fc51 	bl	8004092 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 80027f0:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 80027f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002800:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002804:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800280c:	4413      	add	r3, r2
 800280e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 8002812:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002816:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800281a:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 800281e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002822:	f5a3 709c 	sub.w	r0, r3, #312	@ 0x138
 8002826:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	6800      	ldr	r0, [r0, #0]
 8002834:	f7ff fa98 	bl	8001d68 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
 8002838:	4603      	mov	r3, r0
 800283a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    if (input_res != EI_IMPULSE_OK) {
 800283e:	f997 312b 	ldrsb.w	r3, [r7, #299]	@ 0x12b
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x104>
        return input_res;
 8002846:	f997 412b 	ldrsb.w	r4, [r7, #299]	@ 0x12b
 800284a:	e063      	b.n	8002914 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 800284c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002850:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8002854:	f5a1 709a 	sub.w	r0, r1, #308	@ 0x134
 8002858:	f897 1164 	ldrb.w	r1, [r7, #356]	@ 0x164
 800285c:	9105      	str	r1, [sp, #20]
 800285e:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 8002862:	9104      	str	r1, [sp, #16]
 8002864:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8002868:	9103      	str	r1, [sp, #12]
 800286a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800286e:	9102      	str	r1, [sp, #8]
 8002870:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002874:	9101      	str	r1, [sp, #4]
 8002876:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800287a:	9100      	str	r1, [sp, #0]
 800287c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002880:	6800      	ldr	r0, [r0, #0]
 8002882:	f7ff fef5 	bl	8002670 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
 800288c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002890:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d023      	beq.n	80028e0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
 8002898:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800289c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028b6:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fb1a 	bl	8001f00 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
        if (output_res != EI_IMPULSE_OK) {
 80028d2:	f997 3129 	ldrsb.w	r3, [r7, #297]	@ 0x129
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
            return output_res;
 80028da:	f997 4129 	ldrsb.w	r4, [r7, #297]	@ 0x129
 80028de:	e019      	b.n	8002914 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
        }
    }

    graph_config->model_reset(ei_aligned_free);
 80028e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4811      	ldr	r0, [pc, #68]	@ (800292c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 80028e8:	4798      	blx	r3

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80028ea:	f005 f84a 	bl	8007982 <_Z16ei_read_timer_usv>
 80028ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f2:	1a84      	subs	r4, r0, r2
 80028f4:	eb61 0503 	sbc.w	r5, r1, r3
 80028f8:	4622      	mov	r2, r4
 80028fa:	462b      	mov	r3, r5
 80028fc:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 8002900:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

    if (run_res != EI_IMPULSE_OK) {
 8002904:	f997 312a 	ldrsb.w	r3, [r7, #298]	@ 0x12a
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1ca>
        return run_res;
 800290c:	f997 412a 	ldrsb.w	r4, [r7, #298]	@ 0x12a
 8002910:	e000      	b.n	8002914 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    return EI_IMPULSE_OK;
 8002912:	2400      	movs	r4, #0
}
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	4618      	mov	r0, r3
 800291a:	f001 f992 	bl	8003c42 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 800291e:	4623      	mov	r3, r4
 8002920:	4618      	mov	r0, r3
 8002922:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8002926:	46bd      	mov	sp, r7
 8002928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800292a:	bf00      	nop
 800292c:	080011d5 	.word	0x080011d5

08002930 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b094      	sub	sp, #80	@ 0x50
 8002934:	af04      	add	r7, sp, #16
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	70fb      	strb	r3, [r7, #3]
    auto& impulse = handle->impulse;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	330c      	adds	r3, #12
 8002942:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8002944:	2300      	movs	r3, #0
 8002946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002948:	e02f      	b.n	80029aa <run_inference+0x7a>

        ei_learning_block_t block = impulse->learning_blocks[ix];
 800294a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002952:	015b      	lsls	r3, r3, #5
 8002954:	4413      	add	r3, r2
 8002956:	f107 0414 	add.w	r4, r7, #20
 800295a:	461d      	mov	r5, r3
 800295c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800295e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002960:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        result->copy_output = block.keep_output;
 8002968:	7e3a      	ldrb	r2, [r7, #24]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 8002970:	69fc      	ldr	r4, [r7, #28]
 8002972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 8002978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	78f9      	ldrb	r1, [r7, #3]
 800297e:	9103      	str	r1, [sp, #12]
 8002980:	9202      	str	r2, [sp, #8]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	9201      	str	r2, [sp, #4]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	462b      	mov	r3, r5
 800298a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	47a0      	blx	r4
 8002990:	4603      	mov	r3, r0
 8002992:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (res != EI_IMPULSE_OK) {
 8002996:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <run_inference+0x74>
            return res;
 800299e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80029a2:	e017      	b.n	80029d4 <run_inference+0xa4>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 80029a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a6:	3301      	adds	r3, #1
 80029a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d3c9      	bcc.n	800294a <run_inference+0x1a>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80029b6:	f004 ffcf 	bl	8007958 <_Z29ei_run_impulse_check_canceledv>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f113 0f02 	cmn.w	r3, #2
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <run_inference+0xa2>
        return EI_IMPULSE_CANCELED;
 80029cc:	f06f 0301 	mvn.w	r3, #1
 80029d0:	e000      	b.n	80029d4 <run_inference+0xa4>
    }

    return EI_IMPULSE_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3740      	adds	r7, #64	@ 0x40
 80029d8:	46bd      	mov	sp, r7
 80029da:	bdb0      	pop	{r4, r5, r7, pc}

080029dc <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 fb87 	bl	8004100 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ffe5 	bl	80029dc <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3310      	adds	r3, #16
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fd7c 	bl	8001526 <_ZN2ei11ei_signal_tD1Ev>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8002a38:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8002a3c:	b0a6      	sub	sp, #152	@ 0x98
 8002a3e:	af02      	add	r7, sp, #8
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	70fb      	strb	r3, [r7, #3]
 8002a48:	2600      	movs	r6, #0
    if(!handle) {
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <process_impulse+0x1e>
        return EI_IMPULSE_INFERENCE_ERROR;
 8002a50:	f06f 0615 	mvn.w	r6, #21
 8002a54:	e24c      	b.n	8002ef0 <process_impulse+0x4b8>
    if (can_run_classifier_image_quantized(handle->impulse, block) == EI_IMPULSE_OK) {
        return run_classifier_image_quantized(handle->impulse, signal, result, debug);
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8002a56:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f00a fb31 	bl	800d0c4 <memset>
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6e:	4413      	add	r3, r2
 8002a70:	67bb      	str	r3, [r7, #120]	@ 0x78

    // smart pointer to features array
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 8002a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a78:	d201      	bcs.n	8002a7e <process_impulse+0x46>
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	e001      	b.n	8002a82 <process_impulse+0x4a>
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	4618      	mov	r0, r3
 8002a84:	f007 ff4b 	bl	800a91e <_Znaj>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 f9b4 	bl	8003e00 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>
    ei_feature_t* features = features_ptr.get();
 8002a98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 f9dd 	bl	8003e5c <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>
 8002aa2:	6778      	str	r0, [r7, #116]	@ 0x74
    memset(features, 0, sizeof(ei_feature_t) * block_num);
 8002aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2100      	movs	r1, #0
 8002aac:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002aae:	f00a fb09 	bl	800d0c4 <memset>

    // have it outside of the loop to avoid going out of scope
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
 8002ab2:	6fbc      	ldr	r4, [r7, #120]	@ 0x78
 8002ab4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8002ab8:	429c      	cmp	r4, r3
 8002aba:	d202      	bcs.n	8002ac2 <process_impulse+0x8a>
 8002abc:	1ca3      	adds	r3, r4, #2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	e001      	b.n	8002ac6 <process_impulse+0x8e>
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f007 ff29 	bl	800a91e <_Znaj>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461d      	mov	r5, r3
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	602b      	str	r3, [r5, #0]
 8002ad4:	1d2b      	adds	r3, r5, #4
 8002ad6:	601c      	str	r4, [r3, #0]
 8002ad8:	f105 0308 	add.w	r3, r5, #8
 8002adc:	1e62      	subs	r2, r4, #1
 8002ade:	4614      	mov	r4, r2
 8002ae0:	4698      	mov	r8, r3
 8002ae2:	e005      	b.n	8002af0 <process_impulse+0xb8>
 8002ae4:	4640      	mov	r0, r8
 8002ae6:	f001 fafb 	bl	80040e0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>
 8002aea:	3c01      	subs	r4, #1
 8002aec:	f108 0804 	add.w	r8, r8, #4
 8002af0:	2c00      	cmp	r4, #0
 8002af2:	daf7      	bge.n	8002ae4 <process_impulse+0xac>
 8002af4:	f105 0308 	add.w	r3, r5, #8
 8002af8:	673b      	str	r3, [r7, #112]	@ 0x70

    uint64_t dsp_start_us = ei_read_timer_us();
 8002afa:	f004 ff42 	bl	8007982 <_Z16ei_read_timer_usv>
 8002afe:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68

    size_t out_features_index = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b0e:	e13c      	b.n	8002d8a <process_impulse+0x352>
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b1a:	015b      	lsls	r3, r3, #5
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f107 0410 	add.w	r4, r7, #16
 8002b22:	461d      	mov	r5, r3
 8002b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 8002b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002b38:	18d4      	adds	r4, r2, r3
 8002b3a:	2010      	movs	r0, #16
 8002b3c:	f007 fede 	bl	800a8fc <_Znwj>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461d      	mov	r5, r3
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	2300      	movs	r3, #0
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f7fe fb66 	bl	800121c <_ZN2ei9ei_matrixC1EmmPf>
 8002b50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b54:	4629      	mov	r1, r5
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f99d 	bl	8003e96 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8002b5c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b60:	4619      	mov	r1, r3
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7ff ff4a 	bl	80029fc <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 8002b68:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 f9a1 	bl	8003eb4 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
        features[ix].matrix = matrix_ptrs[ix].get();
 8002b72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002b7a:	18d1      	adds	r1, r2, r3
 8002b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b84:	18d4      	adds	r4, r2, r3
 8002b86:	4608      	mov	r0, r1
 8002b88:	f001 f9b6 	bl	8003ef8 <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	6023      	str	r3, [r4, #0]
        features[ix].blockId = block.blockId;
 8002b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b98:	4413      	add	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	605a      	str	r2, [r3, #4]

        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba4:	441a      	add	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d922      	bls.n	8002bf6 <process_impulse+0x1be>
            ei_printf("ERR: Would write outside feature buffer\n");
 8002bb0:	48a6      	ldr	r0, [pc, #664]	@ (8002e4c <process_impulse+0x414>)
 8002bb2:	f000 f9f9 	bl	8002fa8 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8002bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d019      	beq.n	8002bf0 <process_impulse+0x1b8>
 8002bbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002bc6:	18d4      	adds	r4, r2, r3
 8002bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bca:	429c      	cmp	r4, r3
 8002bcc:	d004      	beq.n	8002bd8 <process_impulse+0x1a0>
 8002bce:	3c04      	subs	r4, #4
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f001 f96f 	bl	8003eb4 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8002bd6:	e7f7      	b.n	8002bc8 <process_impulse+0x190>
 8002bd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bda:	f1a3 0208 	sub.w	r2, r3, #8
 8002bde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002be0:	3b04      	subs	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3302      	adds	r3, #2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f007 fe84 	bl	800a8f8 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8002bf0:	f06f 0604 	mvn.w	r6, #4
 8002bf4:	e176      	b.n	8002ee4 <process_impulse+0x4ac>
            delete[] matrix_ptrs;
            return EI_IMPULSE_DSP_ERROR;
        }
        auto internal_signal = signal;
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, handle->impulse);
 8002bf6:	6a3a      	ldr	r2, [r7, #32]
 8002bf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	460b      	mov	r3, r1
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	f7fe fcd4 	bl	80015b4 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        auto internal_signal = swa.get_signal();
 8002c0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fcff 	bl	8001614 <_ZN14SignalWithAxes10get_signalEv>
 8002c16:	6638      	str	r0, [r7, #96]	@ 0x60
#endif

        int ret;
        if (block.factory) { // ie, if we're using state
 8002c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d038      	beq.n	8002c90 <process_impulse+0x258>
            // Msg user
            static bool has_printed = false;
            if (!has_printed) {
 8002c1e:	4b8c      	ldr	r3, [pc, #560]	@ (8002e50 <process_impulse+0x418>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f083 0301 	eor.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <process_impulse+0x20c>
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
 8002c2c:	4b89      	ldr	r3, [pc, #548]	@ (8002e54 <process_impulse+0x41c>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4619      	mov	r1, r3
 8002c32:	4889      	ldr	r0, [pc, #548]	@ (8002e58 <process_impulse+0x420>)
 8002c34:	f000 f9b8 	bl	8002fa8 <_Z9ei_printfPKcz>
 8002c38:	4888      	ldr	r0, [pc, #544]	@ (8002e5c <process_impulse+0x424>)
 8002c3a:	f000 f9b5 	bl	8002fa8 <_Z9ei_printfPKcz>
                has_printed = true;
 8002c3e:	4b84      	ldr	r3, [pc, #528]	@ (8002e50 <process_impulse+0x418>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
            }

            // getter has a lazy init, so we can just call it
            auto dsp_handle = handle->state.get_dsp_handle(ix);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fbd0 	bl	80013f0 <_ZN18ei_impulse_state_t14get_dsp_handleEj>
 8002c50:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if(dsp_handle) {
 8002c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d017      	beq.n	8002c88 <process_impulse+0x250>
                ret = dsp_handle->extract(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8002c58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	681c      	ldr	r4, [r3, #0]
 8002c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002c68:	4413      	add	r3, r2
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	69f9      	ldr	r1, [r7, #28]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002c76:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002c7e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002c80:	47a0      	blx	r4
 8002c82:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 8002c86:	e016      	b.n	8002cb6 <process_impulse+0x27e>
            } else {
                return EI_IMPULSE_OUT_OF_MEMORY;
 8002c88:	f06f 060a 	mvn.w	r6, #10
 8002c8c:	2400      	movs	r4, #0
 8002c8e:	e06f      	b.n	8002d70 <process_impulse+0x338>
            }
        } else {
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002c96:	00d2      	lsls	r2, r2, #3
 8002c98:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002c9a:	440a      	add	r2, r1
 8002c9c:	6811      	ldr	r1, [r2, #0]
 8002c9e:	69f8      	ldr	r0, [r7, #28]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	68d2      	ldr	r2, [r2, #12]
 8002ca4:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8002ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cac:	4602      	mov	r2, r0
 8002cae:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002cb0:	4798      	blx	r3
 8002cb2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
        }

        if (ret != EIDSP_OK) {
 8002cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d025      	beq.n	8002d0a <process_impulse+0x2d2>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002cbe:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002cc2:	4867      	ldr	r0, [pc, #412]	@ (8002e60 <process_impulse+0x428>)
 8002cc4:	f000 f970 	bl	8002fa8 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8002cc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d019      	beq.n	8002d02 <process_impulse+0x2ca>
 8002cce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cd0:	3b04      	subs	r3, #4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002cd8:	18d4      	adds	r4, r2, r3
 8002cda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cdc:	429c      	cmp	r4, r3
 8002cde:	d004      	beq.n	8002cea <process_impulse+0x2b2>
 8002ce0:	3c04      	subs	r4, #4
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f001 f8e6 	bl	8003eb4 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8002ce8:	e7f7      	b.n	8002cda <process_impulse+0x2a2>
 8002cea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cec:	f1a3 0208 	sub.w	r2, r3, #8
 8002cf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f007 fdfb 	bl	800a8f8 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8002d02:	f06f 0604 	mvn.w	r6, #4
 8002d06:	2400      	movs	r4, #0
 8002d08:	e032      	b.n	8002d70 <process_impulse+0x338>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002d0a:	f004 fe25 	bl	8007958 <_Z29ei_run_impulse_check_canceledv>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f113 0f02 	cmn.w	r3, #2
 8002d14:	bf0c      	ite	eq
 8002d16:	2301      	moveq	r3, #1
 8002d18:	2300      	movne	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <process_impulse+0x32a>
            delete[] matrix_ptrs;
 8002d20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d019      	beq.n	8002d5a <process_impulse+0x322>
 8002d26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d28:	3b04      	subs	r3, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002d30:	18d4      	adds	r4, r2, r3
 8002d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d34:	429c      	cmp	r4, r3
 8002d36:	d004      	beq.n	8002d42 <process_impulse+0x30a>
 8002d38:	3c04      	subs	r4, #4
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f001 f8ba 	bl	8003eb4 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8002d40:	e7f7      	b.n	8002d32 <process_impulse+0x2fa>
 8002d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d44:	f1a3 0208 	sub.w	r2, r3, #8
 8002d48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d4a:	3b04      	subs	r3, #4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3302      	adds	r3, #2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f007 fdcf 	bl	800a8f8 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
 8002d5a:	f06f 0601 	mvn.w	r6, #1
 8002d5e:	2400      	movs	r4, #0
 8002d60:	e006      	b.n	8002d70 <process_impulse+0x338>
        }

        out_features_index += block.n_output_features;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d68:	4413      	add	r3, r2
 8002d6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    }
 8002d6e:	2401      	movs	r4, #1
 8002d70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fe51 	bl	8002a1c <_ZN14SignalWithAxesD1Ev>
 8002d7a:	2c01      	cmp	r4, #1
 8002d7c:	f040 80b2 	bne.w	8002ee4 <process_impulse+0x4ac>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8002d80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d84:	3301      	adds	r3, #1
 8002d86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d90:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f4ff aebb 	bcc.w	8002b10 <process_impulse+0xd8>
            features[handle->impulse->dsp_blocks_size + ix].blockId = block.blockId;
        }
    }
#endif // EI_CLASSIFIER_SINGLE_FEATURE_INPUT

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002d9a:	f004 fdf2 	bl	8007982 <_Z16ei_read_timer_usv>
 8002d9e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002da2:	ebb0 0a02 	subs.w	sl, r0, r2
 8002da6:	eb61 0b03 	sbc.w	fp, r1, r3
 8002daa:	4652      	mov	r2, sl
 8002dac:	465b      	mov	r3, fp
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 8002dba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	f7fd ff81 	bl	8000cc8 <__aeabi_ldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

    if (debug) {
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d057      	beq.n	8002e86 <process_impulse+0x44e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4821      	ldr	r0, [pc, #132]	@ (8002e64 <process_impulse+0x42c>)
 8002de0:	f000 f8e2 	bl	8002fa8 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dea:	e047      	b.n	8002e7c <process_impulse+0x444>
            if (features[ix].matrix == nullptr) {
 8002dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002df4:	4413      	add	r3, r2
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d039      	beq.n	8002e70 <process_impulse+0x438>
                continue;
            }
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e00:	e015      	b.n	8002e2e <process_impulse+0x3f6>
                ei_printf_float(features[ix].matrix->buffer[jx]);
 8002e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e0a:	4413      	add	r3, r2
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1e:	f004 fdc3 	bl	80079a8 <_Z15ei_printf_floatf>
                ei_printf(" ");
 8002e22:	4811      	ldr	r0, [pc, #68]	@ (8002e68 <process_impulse+0x430>)
 8002e24:	f000 f8c0 	bl	8002fa8 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8002e28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e36:	4413      	add	r3, r2
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d3df      	bcc.n	8002e02 <process_impulse+0x3ca>
            }
            ei_printf("\n");
 8002e42:	480a      	ldr	r0, [pc, #40]	@ (8002e6c <process_impulse+0x434>)
 8002e44:	f000 f8b0 	bl	8002fa8 <_Z9ei_printfPKcz>
 8002e48:	e013      	b.n	8002e72 <process_impulse+0x43a>
 8002e4a:	bf00      	nop
 8002e4c:	0800f95c 	.word	0x0800f95c
 8002e50:	200006e4 	.word	0x200006e4
 8002e54:	20000000 	.word	0x20000000
 8002e58:	0800f988 	.word	0x0800f988
 8002e5c:	0800f990 	.word	0x0800f990
 8002e60:	0800f9fc 	.word	0x0800f9fc
 8002e64:	0800fa24 	.word	0x0800fa24
 8002e68:	0800fa38 	.word	0x0800fa38
 8002e6c:	0800f308 	.word	0x0800f308
                continue;
 8002e70:	bf00      	nop
        for (size_t ix = 0; ix < block_num; ix++) {
 8002e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e76:	3301      	adds	r3, #1
 8002e78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3b2      	bcc.n	8002dec <process_impulse+0x3b4>
        }
    }

    if (debug) {
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <process_impulse+0x45a>
        ei_printf("Running impulse...\n");
 8002e8c:	481b      	ldr	r0, [pc, #108]	@ (8002efc <process_impulse+0x4c4>)
 8002e8e:	f000 f88b 	bl	8002fa8 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7ff fd49 	bl	8002930 <run_inference>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    delete[] matrix_ptrs;
 8002ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d019      	beq.n	8002ede <process_impulse+0x4a6>
 8002eaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eac:	3b04      	subs	r3, #4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002eb4:	18d4      	adds	r4, r2, r3
 8002eb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eb8:	429c      	cmp	r4, r3
 8002eba:	d004      	beq.n	8002ec6 <process_impulse+0x48e>
 8002ebc:	3c04      	subs	r4, #4
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f000 fff8 	bl	8003eb4 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8002ec4:	e7f7      	b.n	8002eb6 <process_impulse+0x47e>
 8002ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ec8:	f1a3 0208 	sub.w	r2, r3, #8
 8002ecc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ece:	3b04      	subs	r3, #4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f007 fd0d 	bl	800a8f8 <_ZdaPvj>
    return res;
 8002ede:	f997 6067 	ldrsb.w	r6, [r7, #103]	@ 0x67
 8002ee2:	e000      	b.n	8002ee6 <process_impulse+0x4ae>
            return EI_IMPULSE_DSP_ERROR;
 8002ee4:	bf00      	nop
}
 8002ee6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 ff97 	bl	8003e1e <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
 8002ef0:	4633      	mov	r3, r6
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3790      	adds	r7, #144	@ 0x90
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8002efc:	0800fa3c 	.word	0x0800fa3c

08002f00 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	71fb      	strb	r3, [r7, #7]
    return process_impulse(&ei_default_impulse, signal, result, debug);
 8002f0e:	4805      	ldr	r0, [pc, #20]	@ (8002f24 <run_classifier+0x24>)
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	68f9      	ldr	r1, [r7, #12]
 8002f16:	f7ff fd8f 	bl	8002a38 <process_impulse>
 8002f1a:	4603      	mov	r3, r0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200006d4 	.word	0x200006d4

08002f28 <_Z16get_feature_datajjPf>:
using namespace ei;

// paste the raw features here
static float features[] = {0.0, 0.0, 0.0, 0.0};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4a06      	ldr	r2, [pc, #24]	@ (8002f54 <_Z16get_feature_datajjPf+0x2c>)
 8002f3a:	1899      	adds	r1, r3, r2
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	461a      	mov	r2, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f00a f9fb 	bl	800d33e <memcpy>
    return 0;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200006e8 	.word	0x200006e8

08002f58 <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0b4      	sub	sp, #208	@ 0xd0
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8002f62:	f107 0308 	add.w	r3, r7, #8
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f00a f886 	bl	800d07c <vsiprintf>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bfcc      	ite	gt
 8002f76:	2301      	movgt	r3, #1
 8002f78:	2300      	movle	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00c      	beq.n	8002f9a <_Z6vprintPKcSt9__va_list+0x42>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 180); // send message via UART
 8002f80:	f107 0308 	add.w	r3, r7, #8
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd f993 	bl	80002b0 <strlen>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	f107 0108 	add.w	r1, r7, #8
 8002f92:	23b4      	movs	r3, #180	@ 0xb4
 8002f94:	4803      	ldr	r0, [pc, #12]	@ (8002fa4 <_Z6vprintPKcSt9__va_list+0x4c>)
 8002f96:	f003 ff1d 	bl	8006dd4 <HAL_UART_Transmit>
    }
}
 8002f9a:	bf00      	nop
 8002f9c:	37d0      	adds	r7, #208	@ 0xd0
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200006f8 	.word	0x200006f8

08002fa8 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8002fa8:	b40f      	push	{r0, r1, r2, r3}
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	6938      	ldr	r0, [r7, #16]
 8002fba:	f7ff ffcd 	bl	8002f58 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fc8:	b004      	add	sp, #16
 8002fca:	4770      	bx	lr

08002fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b0cb      	sub	sp, #300	@ 0x12c
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fd2:	f002 fb2e 	bl	8005632 <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8002fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fa96 	bl	800150c <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  signal.get_data = &get_feature_data;
 8002fe6:	4b56      	ldr	r3, [pc, #344]	@ (8003140 <main+0x174>)
 8002fe8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002fec:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8002ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 feb4 	bl	8003d64 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ffc:	f000 f8b8 	bl	8003170 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003000:	f000 f95c 	bl	80032bc <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8003004:	f000 f926 	bl	8003254 <_ZL19MX_USART1_UART_Initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ei_impulse_result_t result = { 0 };
 8003008:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800300c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003010:	4618      	mov	r0, r3
 8003012:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8003016:	461a      	mov	r2, r3
 8003018:	2100      	movs	r1, #0
 800301a:	f00a f853 	bl	800d0c4 <memset>
			EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 800301e:	4639      	mov	r1, r7
 8003020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003024:	2201      	movs	r2, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff6a 	bl	8002f00 <run_classifier>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
			ei_printf("run_classifier returned: %d\n", res);
 8003032:	f997 3123 	ldrsb.w	r3, [r7, #291]	@ 0x123
 8003036:	4619      	mov	r1, r3
 8003038:	4842      	ldr	r0, [pc, #264]	@ (8003144 <main+0x178>)
 800303a:	f7ff ffb5 	bl	8002fa8 <_Z9ei_printfPKcz>

			ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 800303e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003042:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003046:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800304a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800304e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003052:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003056:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800305a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800305e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003062:	4839      	ldr	r0, [pc, #228]	@ (8003148 <main+0x17c>)
 8003064:	f7ff ffa0 	bl	8002fa8 <_Z9ei_printfPKcz>
				result.timing.dsp, result.timing.classification, result.timing.anomaly);

			// print the predictions
			ei_printf("[");
 8003068:	4838      	ldr	r0, [pc, #224]	@ (800314c <main+0x180>)
 800306a:	f7ff ff9d 	bl	8002fa8 <_Z9ei_printfPKcz>
			for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800306e:	2300      	movs	r3, #0
 8003070:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003074:	e017      	b.n	80030a6 <main+0xda>
			  ei_printf_float(result.classification[ix].value);
 8003076:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800307a:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 800307e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003082:	3301      	adds	r3, #1
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	3304      	adds	r3, #4
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	eeb0 0a67 	vmov.f32	s0, s15
 8003092:	f004 fc89 	bl	80079a8 <_Z15ei_printf_floatf>
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
				ei_printf(", ");
 8003096:	482e      	ldr	r0, [pc, #184]	@ (8003150 <main+0x184>)
 8003098:	f7ff ff86 	bl	8002fa8 <_Z9ei_printfPKcz>
			for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800309c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80030a0:	3301      	adds	r3, #1
 80030a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80030a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d9e3      	bls.n	8003076 <main+0xaa>
					ei_printf(", ");
				}
		#endif
			}
		#if EI_CLASSIFIER_HAS_ANOMALY == 1
			ei_printf_float(result.anomaly);
 80030ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80030b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030b6:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80030ba:	eeb0 0a67 	vmov.f32	s0, s15
 80030be:	f004 fc73 	bl	80079a8 <_Z15ei_printf_floatf>
		#endif
			ei_printf("]\n\n\n");
 80030c2:	4824      	ldr	r0, [pc, #144]	@ (8003154 <main+0x188>)
 80030c4:	f7ff ff70 	bl	8002fa8 <_Z9ei_printfPKcz>

	//parceamos los features
	if(HAL_OK == HAL_UART_Receive(&huart1,atributos,18,5000)){
 80030c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80030cc:	2212      	movs	r2, #18
 80030ce:	4922      	ldr	r1, [pc, #136]	@ (8003158 <main+0x18c>)
 80030d0:	4822      	ldr	r0, [pc, #136]	@ (800315c <main+0x190>)
 80030d2:	f003 ff02 	bl	8006eda <HAL_UART_Receive>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d090      	beq.n	8003008 <main+0x3c>
		ptr = strtok((char *)atributos, ","); //dividimos en sub cadenas
 80030e6:	491e      	ldr	r1, [pc, #120]	@ (8003160 <main+0x194>)
 80030e8:	481b      	ldr	r0, [pc, #108]	@ (8003158 <main+0x18c>)
 80030ea:	f00a f805 	bl	800d0f8 <strtok>
 80030ee:	4603      	mov	r3, r0
 80030f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003164 <main+0x198>)
 80030f2:	6013      	str	r3, [r2, #0]
		cont = 0;
 80030f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <main+0x19c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
		while (ptr != NULL){
 80030fa:	e01c      	b.n	8003136 <main+0x16a>
			features[cont] = strtod(ptr, NULL);
 80030fc:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <main+0x198>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f009 fe80 	bl	800ce08 <strtod>
 8003108:	ec51 0b10 	vmov	r0, r1, d0
 800310c:	4b16      	ldr	r3, [pc, #88]	@ (8003168 <main+0x19c>)
 800310e:	681c      	ldr	r4, [r3, #0]
 8003110:	f7fd fd8a 	bl	8000c28 <__aeabi_d2f>
 8003114:	4602      	mov	r2, r0
 8003116:	4915      	ldr	r1, [pc, #84]	@ (800316c <main+0x1a0>)
 8003118:	00a3      	lsls	r3, r4, #2
 800311a:	440b      	add	r3, r1
 800311c:	601a      	str	r2, [r3, #0]
			ptr = strtok(NULL, ","); // Pasamos a la siguiente subcadena
 800311e:	4910      	ldr	r1, [pc, #64]	@ (8003160 <main+0x194>)
 8003120:	2000      	movs	r0, #0
 8003122:	f009 ffe9 	bl	800d0f8 <strtok>
 8003126:	4603      	mov	r3, r0
 8003128:	4a0e      	ldr	r2, [pc, #56]	@ (8003164 <main+0x198>)
 800312a:	6013      	str	r3, [r2, #0]
			cont++;
 800312c:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <main+0x19c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <main+0x19c>)
 8003134:	6013      	str	r3, [r2, #0]
		while (ptr != NULL){
 8003136:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <main+0x198>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1de      	bne.n	80030fc <main+0x130>
		}
	}

  }
 800313e:	e763      	b.n	8003008 <main+0x3c>
 8003140:	08002f29 	.word	0x08002f29
 8003144:	0800fadc 	.word	0x0800fadc
 8003148:	0800f8d0 	.word	0x0800f8d0
 800314c:	0800fafc 	.word	0x0800fafc
 8003150:	0800fb00 	.word	0x0800fb00
 8003154:	0800fb04 	.word	0x0800fb04
 8003158:	20000780 	.word	0x20000780
 800315c:	200006f8 	.word	0x200006f8
 8003160:	0800fb0c 	.word	0x0800fb0c
 8003164:	20000794 	.word	0x20000794
 8003168:	20000798 	.word	0x20000798
 800316c:	200006e8 	.word	0x200006e8

08003170 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b094      	sub	sp, #80	@ 0x50
 8003174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003176:	f107 0320 	add.w	r3, r7, #32
 800317a:	2230      	movs	r2, #48	@ 0x30
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f009 ffa0 	bl	800d0c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003184:	f107 030c 	add.w	r3, r7, #12
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003194:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <_Z18SystemClock_Configv+0xdc>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	4a2c      	ldr	r2, [pc, #176]	@ (800324c <_Z18SystemClock_Configv+0xdc>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319e:	6413      	str	r3, [r2, #64]	@ 0x40
 80031a0:	4b2a      	ldr	r3, [pc, #168]	@ (800324c <_Z18SystemClock_Configv+0xdc>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80031ac:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <_Z18SystemClock_Configv+0xe0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80031b4:	4a26      	ldr	r2, [pc, #152]	@ (8003250 <_Z18SystemClock_Configv+0xe0>)
 80031b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b24      	ldr	r3, [pc, #144]	@ (8003250 <_Z18SystemClock_Configv+0xe0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031c8:	2302      	movs	r3, #2
 80031ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031cc:	2301      	movs	r3, #1
 80031ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031d0:	2310      	movs	r3, #16
 80031d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031d4:	2302      	movs	r3, #2
 80031d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031d8:	2300      	movs	r3, #0
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80031dc:	230a      	movs	r3, #10
 80031de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80031e0:	23d2      	movs	r3, #210	@ 0xd2
 80031e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031e4:	2302      	movs	r3, #2
 80031e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80031e8:	2302      	movs	r3, #2
 80031ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ec:	f107 0320 	add.w	r3, r7, #32
 80031f0:	4618      	mov	r0, r3
 80031f2:	f002 fd27 	bl	8005c44 <HAL_RCC_OscConfig>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8003206:	f000 fccf 	bl	8003ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800320a:	230f      	movs	r3, #15
 800320c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800320e:	2302      	movs	r3, #2
 8003210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003216:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800321a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800321c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003220:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003222:	f107 030c 	add.w	r3, r7, #12
 8003226:	2105      	movs	r1, #5
 8003228:	4618      	mov	r0, r3
 800322a:	f002 ffaf 	bl	800618c <HAL_RCC_ClockConfig>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800323e:	f000 fcb3 	bl	8003ba8 <Error_Handler>
  }
}
 8003242:	bf00      	nop
 8003244:	3750      	adds	r7, #80	@ 0x50
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	40007000 	.word	0x40007000

08003254 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003258:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800325a:	4a17      	ldr	r2, [pc, #92]	@ (80032b8 <_ZL19MX_USART1_UART_Initv+0x64>)
 800325c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003266:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003272:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003278:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800327a:	220c      	movs	r2, #12
 800327c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003280:	2200      	movs	r2, #0
 8003282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003284:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003286:	2200      	movs	r2, #0
 8003288:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800328c:	2200      	movs	r2, #0
 800328e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003290:	4b08      	ldr	r3, [pc, #32]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003292:	2200      	movs	r2, #0
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003296:	4807      	ldr	r0, [pc, #28]	@ (80032b4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8003298:	f003 fd4e 	bl	8006d38 <HAL_UART_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf14      	ite	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	2300      	moveq	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80032ac:	f000 fc7c 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200006f8 	.word	0x200006f8
 80032b8:	40011000 	.word	0x40011000

080032bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b090      	sub	sp, #64	@ 0x40
 80032c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	60da      	str	r2, [r3, #12]
 80032d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032d2:	4bad      	ldr	r3, [pc, #692]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	4aac      	ldr	r2, [pc, #688]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032d8:	f043 0310 	orr.w	r3, r3, #16
 80032dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032de:	4baa      	ldr	r3, [pc, #680]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032ea:	4ba7      	ldr	r3, [pc, #668]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	4aa6      	ldr	r2, [pc, #664]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f6:	4ba4      	ldr	r3, [pc, #656]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	4ba1      	ldr	r3, [pc, #644]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	4aa0      	ldr	r2, [pc, #640]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	6313      	str	r3, [r2, #48]	@ 0x30
 800330e:	4b9e      	ldr	r3, [pc, #632]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800331a:	4b9b      	ldr	r3, [pc, #620]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	4a9a      	ldr	r2, [pc, #616]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003320:	f043 0308 	orr.w	r3, r3, #8
 8003324:	6313      	str	r3, [r2, #48]	@ 0x30
 8003326:	4b98      	ldr	r3, [pc, #608]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003332:	4b95      	ldr	r3, [pc, #596]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4a94      	ldr	r2, [pc, #592]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6313      	str	r3, [r2, #48]	@ 0x30
 800333e:	4b92      	ldr	r3, [pc, #584]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	4b8f      	ldr	r3, [pc, #572]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	4a8e      	ldr	r2, [pc, #568]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6313      	str	r3, [r2, #48]	@ 0x30
 8003356:	4b8c      	ldr	r3, [pc, #560]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003362:	4b89      	ldr	r3, [pc, #548]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a88      	ldr	r2, [pc, #544]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b86      	ldr	r3, [pc, #536]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800337a:	4b83      	ldr	r3, [pc, #524]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	4a82      	ldr	r2, [pc, #520]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003384:	6313      	str	r3, [r2, #48]	@ 0x30
 8003386:	4b80      	ldr	r3, [pc, #512]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003392:	4b7d      	ldr	r3, [pc, #500]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	4a7c      	ldr	r2, [pc, #496]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 8003398:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800339c:	6313      	str	r3, [r2, #48]	@ 0x30
 800339e:	4b7a      	ldr	r3, [pc, #488]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033aa:	4b77      	ldr	r3, [pc, #476]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	4a76      	ldr	r2, [pc, #472]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033b0:	f043 0320 	orr.w	r3, r3, #32
 80033b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b6:	4b74      	ldr	r3, [pc, #464]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033c2:	4b71      	ldr	r3, [pc, #452]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	4a70      	ldr	r2, [pc, #448]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003588 <_ZL12MX_GPIO_Initv+0x2cc>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80033da:	2201      	movs	r2, #1
 80033dc:	2120      	movs	r1, #32
 80033de:	486b      	ldr	r0, [pc, #428]	@ (800358c <_ZL12MX_GPIO_Initv+0x2d0>)
 80033e0:	f002 fc16 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80033e4:	2200      	movs	r2, #0
 80033e6:	f241 010c 	movw	r1, #4108	@ 0x100c
 80033ea:	4869      	ldr	r0, [pc, #420]	@ (8003590 <_ZL12MX_GPIO_Initv+0x2d4>)
 80033ec:	f002 fc10 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80033f0:	2200      	movs	r2, #0
 80033f2:	2108      	movs	r1, #8
 80033f4:	4867      	ldr	r0, [pc, #412]	@ (8003594 <_ZL12MX_GPIO_Initv+0x2d8>)
 80033f6:	f002 fc0b 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80033fa:	2200      	movs	r2, #0
 80033fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003400:	4865      	ldr	r0, [pc, #404]	@ (8003598 <_ZL12MX_GPIO_Initv+0x2dc>)
 8003402:	f002 fc05 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003406:	2200      	movs	r2, #0
 8003408:	21c8      	movs	r1, #200	@ 0xc8
 800340a:	4864      	ldr	r0, [pc, #400]	@ (800359c <_ZL12MX_GPIO_Initv+0x2e0>)
 800340c:	f002 fc00 	bl	8005c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003410:	2310      	movs	r3, #16
 8003412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003414:	2302      	movs	r3, #2
 8003416:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	2300      	movs	r3, #0
 800341e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003420:	230e      	movs	r3, #14
 8003422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003428:	4619      	mov	r1, r3
 800342a:	485d      	ldr	r0, [pc, #372]	@ (80035a0 <_ZL12MX_GPIO_Initv+0x2e4>)
 800342c:	f002 fa44 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8003430:	2308      	movs	r3, #8
 8003432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003434:	2300      	movs	r3, #0
 8003436:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800343c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003440:	4619      	mov	r1, r3
 8003442:	4857      	ldr	r0, [pc, #348]	@ (80035a0 <_ZL12MX_GPIO_Initv+0x2e4>)
 8003444:	f002 fa38 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003448:	2304      	movs	r3, #4
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003454:	2303      	movs	r3, #3
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003458:	2309      	movs	r3, #9
 800345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800345c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003460:	4619      	mov	r1, r3
 8003462:	484f      	ldr	r0, [pc, #316]	@ (80035a0 <_ZL12MX_GPIO_Initv+0x2e4>)
 8003464:	f002 fa28 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003468:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800347a:	230b      	movs	r3, #11
 800347c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800347e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003482:	4619      	mov	r1, r3
 8003484:	4845      	ldr	r0, [pc, #276]	@ (800359c <_ZL12MX_GPIO_Initv+0x2e0>)
 8003486:	f002 fa17 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800348a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800348e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800349c:	230c      	movs	r3, #12
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034a4:	4619      	mov	r1, r3
 80034a6:	483e      	ldr	r0, [pc, #248]	@ (80035a0 <_ZL12MX_GPIO_Initv+0x2e4>)
 80034a8:	f002 fa06 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80034ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034b2:	2312      	movs	r3, #18
 80034b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	2300      	movs	r3, #0
 80034bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034be:	2304      	movs	r3, #4
 80034c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034c6:	4619      	mov	r1, r3
 80034c8:	4836      	ldr	r0, [pc, #216]	@ (80035a4 <_ZL12MX_GPIO_Initv+0x2e8>)
 80034ca:	f002 f9f5 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80034ce:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80034d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80034e0:	230a      	movs	r3, #10
 80034e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034e8:	4619      	mov	r1, r3
 80034ea:	482e      	ldr	r0, [pc, #184]	@ (80035a4 <_ZL12MX_GPIO_Initv+0x2e8>)
 80034ec:	f002 f9e4 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80034f0:	2310      	movs	r3, #16
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	2302      	movs	r3, #2
 80034f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fc:	2300      	movs	r3, #0
 80034fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003500:	2302      	movs	r3, #2
 8003502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003504:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003508:	4619      	mov	r1, r3
 800350a:	4826      	ldr	r0, [pc, #152]	@ (80035a4 <_ZL12MX_GPIO_Initv+0x2e8>)
 800350c:	f002 f9d4 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003510:	2380      	movs	r3, #128	@ 0x80
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003520:	2308      	movs	r3, #8
 8003522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003524:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003528:	4619      	mov	r1, r3
 800352a:	4818      	ldr	r0, [pc, #96]	@ (800358c <_ZL12MX_GPIO_Initv+0x2d0>)
 800352c:	f002 f9c4 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003530:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003542:	230c      	movs	r3, #12
 8003544:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003546:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800354a:	4619      	mov	r1, r3
 800354c:	4816      	ldr	r0, [pc, #88]	@ (80035a8 <_ZL12MX_GPIO_Initv+0x2ec>)
 800354e:	f002 f9b3 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003560:	2300      	movs	r3, #0
 8003562:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003564:	2301      	movs	r3, #1
 8003566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003568:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800356c:	4619      	mov	r1, r3
 800356e:	480f      	ldr	r0, [pc, #60]	@ (80035ac <_ZL12MX_GPIO_Initv+0x2f0>)
 8003570:	f002 f9a2 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003574:	2360      	movs	r3, #96	@ 0x60
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003578:	2302      	movs	r3, #2
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003580:	2300      	movs	r3, #0
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003584:	230d      	movs	r3, #13
 8003586:	e013      	b.n	80035b0 <_ZL12MX_GPIO_Initv+0x2f4>
 8003588:	40023800 	.word	0x40023800
 800358c:	40020c00 	.word	0x40020c00
 8003590:	40022000 	.word	0x40022000
 8003594:	40022800 	.word	0x40022800
 8003598:	40021c00 	.word	0x40021c00
 800359c:	40021800 	.word	0x40021800
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40020400 	.word	0x40020400
 80035a8:	40020800 	.word	0x40020800
 80035ac:	40020000 	.word	0x40020000
 80035b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035b6:	4619      	mov	r1, r3
 80035b8:	48bc      	ldr	r0, [pc, #752]	@ (80038ac <_ZL12MX_GPIO_Initv+0x5f0>)
 80035ba:	f002 f97d 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80035be:	2340      	movs	r3, #64	@ 0x40
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80035ce:	230a      	movs	r3, #10
 80035d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80035d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035d6:	4619      	mov	r1, r3
 80035d8:	48b5      	ldr	r0, [pc, #724]	@ (80038b0 <_ZL12MX_GPIO_Initv+0x5f4>)
 80035da:	f002 f96d 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80035de:	f248 1333 	movw	r3, #33075	@ 0x8133
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035f0:	230c      	movs	r3, #12
 80035f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035f8:	4619      	mov	r1, r3
 80035fa:	48ae      	ldr	r0, [pc, #696]	@ (80038b4 <_ZL12MX_GPIO_Initv+0x5f8>)
 80035fc:	f002 f95c 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003600:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360e:	2300      	movs	r3, #0
 8003610:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003612:	230e      	movs	r3, #14
 8003614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003616:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800361a:	4619      	mov	r1, r3
 800361c:	48a6      	ldr	r0, [pc, #664]	@ (80038b8 <_ZL12MX_GPIO_Initv+0x5fc>)
 800361e:	f002 f94b 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8003622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003628:	2300      	movs	r3, #0
 800362a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003630:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003634:	4619      	mov	r1, r3
 8003636:	48a0      	ldr	r0, [pc, #640]	@ (80038b8 <_ZL12MX_GPIO_Initv+0x5fc>)
 8003638:	f002 f93e 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800363c:	2340      	movs	r3, #64	@ 0x40
 800363e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003640:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800364a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800364e:	4619      	mov	r1, r3
 8003650:	489a      	ldr	r0, [pc, #616]	@ (80038bc <_ZL12MX_GPIO_Initv+0x600>)
 8003652:	f002 f931 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003656:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003664:	2303      	movs	r3, #3
 8003666:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003668:	230c      	movs	r3, #12
 800366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800366c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003670:	4619      	mov	r1, r3
 8003672:	4892      	ldr	r0, [pc, #584]	@ (80038bc <_ZL12MX_GPIO_Initv+0x600>)
 8003674:	f002 f920 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8003678:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	2302      	movs	r3, #2
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003686:	2303      	movs	r3, #3
 8003688:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800368a:	230a      	movs	r3, #10
 800368c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003692:	4619      	mov	r1, r3
 8003694:	488a      	ldr	r0, [pc, #552]	@ (80038c0 <_ZL12MX_GPIO_Initv+0x604>)
 8003696:	f002 f90f 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800369a:	23f0      	movs	r3, #240	@ 0xf0
 800369c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036aa:	230a      	movs	r3, #10
 80036ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80036ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b2:	4619      	mov	r1, r3
 80036b4:	4883      	ldr	r0, [pc, #524]	@ (80038c4 <_ZL12MX_GPIO_Initv+0x608>)
 80036b6:	f002 f8ff 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80036ba:	23f7      	movs	r3, #247	@ 0xf7
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036ca:	230e      	movs	r3, #14
 80036cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80036ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036d2:	4619      	mov	r1, r3
 80036d4:	487c      	ldr	r0, [pc, #496]	@ (80038c8 <_ZL12MX_GPIO_Initv+0x60c>)
 80036d6:	f002 f8ef 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80036da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e8:	2300      	movs	r3, #0
 80036ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80036ec:	2309      	movs	r3, #9
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80036f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036f4:	4619      	mov	r1, r3
 80036f6:	486f      	ldr	r0, [pc, #444]	@ (80038b4 <_ZL12MX_GPIO_Initv+0x5f8>)
 80036f8:	f002 f8de 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80036fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2300      	movs	r3, #0
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800370e:	230a      	movs	r3, #10
 8003710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003716:	4619      	mov	r1, r3
 8003718:	4866      	ldr	r0, [pc, #408]	@ (80038b4 <_ZL12MX_GPIO_Initv+0x5f8>)
 800371a:	f002 f8cd 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800371e:	2320      	movs	r3, #32
 8003720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003722:	2301      	movs	r3, #1
 8003724:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800372e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003732:	4619      	mov	r1, r3
 8003734:	4861      	ldr	r0, [pc, #388]	@ (80038bc <_ZL12MX_GPIO_Initv+0x600>)
 8003736:	f002 f8bf 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800373a:	2308      	movs	r3, #8
 800373c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	2300      	movs	r3, #0
 8003748:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800374a:	230d      	movs	r3, #13
 800374c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800374e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003752:	4619      	mov	r1, r3
 8003754:	4859      	ldr	r0, [pc, #356]	@ (80038bc <_ZL12MX_GPIO_Initv+0x600>)
 8003756:	f002 f8af 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800375a:	f241 030c 	movw	r3, #4108	@ 0x100c
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003760:	2301      	movs	r3, #1
 8003762:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003768:	2300      	movs	r3, #0
 800376a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800376c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003770:	4619      	mov	r1, r3
 8003772:	4854      	ldr	r0, [pc, #336]	@ (80038c4 <_ZL12MX_GPIO_Initv+0x608>)
 8003774:	f002 f8a0 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003778:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800377c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800377e:	2300      	movs	r3, #0
 8003780:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800378a:	4619      	mov	r1, r3
 800378c:	484f      	ldr	r0, [pc, #316]	@ (80038cc <_ZL12MX_GPIO_Initv+0x610>)
 800378e:	f002 f893 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003792:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003796:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a0:	2303      	movs	r3, #3
 80037a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037a4:	230c      	movs	r3, #12
 80037a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037ac:	4619      	mov	r1, r3
 80037ae:	4848      	ldr	r0, [pc, #288]	@ (80038d0 <_ZL12MX_GPIO_Initv+0x614>)
 80037b0:	f002 f882 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80037b4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80037b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037c6:	230e      	movs	r3, #14
 80037c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80037ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037ce:	4619      	mov	r1, r3
 80037d0:	483c      	ldr	r0, [pc, #240]	@ (80038c4 <_ZL12MX_GPIO_Initv+0x608>)
 80037d2:	f002 f871 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80037d6:	2308      	movs	r3, #8
 80037d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037da:	2301      	movs	r3, #1
 80037dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e2:	2300      	movs	r3, #0
 80037e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80037e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037ea:	4619      	mov	r1, r3
 80037ec:	4836      	ldr	r0, [pc, #216]	@ (80038c8 <_ZL12MX_GPIO_Initv+0x60c>)
 80037ee:	f002 f863 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80037f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003800:	2300      	movs	r3, #0
 8003802:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003804:	230d      	movs	r3, #13
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800380c:	4619      	mov	r1, r3
 800380e:	4829      	ldr	r0, [pc, #164]	@ (80038b4 <_ZL12MX_GPIO_Initv+0x5f8>)
 8003810:	f002 f852 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003814:	2310      	movs	r3, #16
 8003816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003818:	2300      	movs	r3, #0
 800381a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003820:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003824:	4619      	mov	r1, r3
 8003826:	4825      	ldr	r0, [pc, #148]	@ (80038bc <_ZL12MX_GPIO_Initv+0x600>)
 8003828:	f002 f846 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800382c:	2304      	movs	r3, #4
 800382e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003838:	2303      	movs	r3, #3
 800383a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800383c:	230c      	movs	r3, #12
 800383e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8003840:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003844:	4619      	mov	r1, r3
 8003846:	481d      	ldr	r0, [pc, #116]	@ (80038bc <_ZL12MX_GPIO_Initv+0x600>)
 8003848:	f002 f836 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800384c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003852:	2300      	movs	r3, #0
 8003854:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800385a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800385e:	4619      	mov	r1, r3
 8003860:	481c      	ldr	r0, [pc, #112]	@ (80038d4 <_ZL12MX_GPIO_Initv+0x618>)
 8003862:	f002 f829 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003866:	2302      	movs	r3, #2
 8003868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386a:	2302      	movs	r3, #2
 800386c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003872:	2300      	movs	r3, #0
 8003874:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003876:	2305      	movs	r3, #5
 8003878:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800387a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800387e:	4619      	mov	r1, r3
 8003880:	4810      	ldr	r0, [pc, #64]	@ (80038c4 <_ZL12MX_GPIO_Initv+0x608>)
 8003882:	f002 f819 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8003886:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800388a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800388c:	2301      	movs	r3, #1
 800388e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003894:	2300      	movs	r3, #0
 8003896:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003898:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800389c:	4619      	mov	r1, r3
 800389e:	480d      	ldr	r0, [pc, #52]	@ (80038d4 <_ZL12MX_GPIO_Initv+0x618>)
 80038a0:	f002 f80a 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80038a4:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80038a8:	e016      	b.n	80038d8 <_ZL12MX_GPIO_Initv+0x61c>
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40020400 	.word	0x40020400
 80038b4:	40021800 	.word	0x40021800
 80038b8:	40022400 	.word	0x40022400
 80038bc:	40020c00 	.word	0x40020c00
 80038c0:	40020000 	.word	0x40020000
 80038c4:	40022000 	.word	0x40022000
 80038c8:	40022800 	.word	0x40022800
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40021400 	.word	0x40021400
 80038d4:	40021c00 	.word	0x40021c00
 80038d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038da:	2302      	movs	r3, #2
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e2:	2300      	movs	r3, #0
 80038e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80038e6:	230d      	movs	r3, #13
 80038e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038ee:	4619      	mov	r1, r3
 80038f0:	48a5      	ldr	r0, [pc, #660]	@ (8003b88 <_ZL12MX_GPIO_Initv+0x8cc>)
 80038f2:	f001 ffe1 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80038f6:	2301      	movs	r3, #1
 80038f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fa:	2302      	movs	r3, #2
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003902:	2300      	movs	r3, #0
 8003904:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003906:	2302      	movs	r3, #2
 8003908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800390a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800390e:	4619      	mov	r1, r3
 8003910:	489e      	ldr	r0, [pc, #632]	@ (8003b8c <_ZL12MX_GPIO_Initv+0x8d0>)
 8003912:	f001 ffd1 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800391a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391c:	2302      	movs	r3, #2
 800391e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003920:	2300      	movs	r3, #0
 8003922:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003924:	2300      	movs	r3, #0
 8003926:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003928:	2301      	movs	r3, #1
 800392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800392c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003930:	4619      	mov	r1, r3
 8003932:	4897      	ldr	r0, [pc, #604]	@ (8003b90 <_ZL12MX_GPIO_Initv+0x8d4>)
 8003934:	f001 ffc0 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800393c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800393e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003942:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003948:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800394c:	4619      	mov	r1, r3
 800394e:	488f      	ldr	r0, [pc, #572]	@ (8003b8c <_ZL12MX_GPIO_Initv+0x8d0>)
 8003950:	f001 ffb2 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003954:	23c0      	movs	r3, #192	@ 0xc0
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003964:	2308      	movs	r3, #8
 8003966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003968:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800396c:	4619      	mov	r1, r3
 800396e:	4889      	ldr	r0, [pc, #548]	@ (8003b94 <_ZL12MX_GPIO_Initv+0x8d8>)
 8003970:	f001 ffa2 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003974:	2310      	movs	r3, #16
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003984:	230a      	movs	r3, #10
 8003986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003988:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800398c:	4619      	mov	r1, r3
 800398e:	487e      	ldr	r0, [pc, #504]	@ (8003b88 <_ZL12MX_GPIO_Initv+0x8cc>)
 8003990:	f001 ff92 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003994:	2328      	movs	r3, #40	@ 0x28
 8003996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039a4:	230c      	movs	r3, #12
 80039a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039ac:	4619      	mov	r1, r3
 80039ae:	4876      	ldr	r0, [pc, #472]	@ (8003b88 <_ZL12MX_GPIO_Initv+0x8cc>)
 80039b0:	f001 ff82 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80039b4:	23c8      	movs	r3, #200	@ 0xc8
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b8:	2301      	movs	r3, #1
 80039ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	2300      	movs	r3, #0
 80039c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039c8:	4619      	mov	r1, r3
 80039ca:	4873      	ldr	r0, [pc, #460]	@ (8003b98 <_ZL12MX_GPIO_Initv+0x8dc>)
 80039cc:	f001 ff74 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80039d0:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039d6:	2303      	movs	r3, #3
 80039d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039e2:	4619      	mov	r1, r3
 80039e4:	486d      	ldr	r0, [pc, #436]	@ (8003b9c <_ZL12MX_GPIO_Initv+0x8e0>)
 80039e6:	f001 ff67 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80039ea:	2308      	movs	r3, #8
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f6:	2303      	movs	r3, #3
 80039f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039fa:	230c      	movs	r3, #12
 80039fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80039fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a02:	4619      	mov	r1, r3
 8003a04:	4863      	ldr	r0, [pc, #396]	@ (8003b94 <_ZL12MX_GPIO_Initv+0x8d8>)
 8003a06:	f001 ff57 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003a0a:	2305      	movs	r3, #5
 8003a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a16:	2303      	movs	r3, #3
 8003a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003a1a:	230a      	movs	r3, #10
 8003a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a22:	4619      	mov	r1, r3
 8003a24:	485b      	ldr	r0, [pc, #364]	@ (8003b94 <_ZL12MX_GPIO_Initv+0x8d8>)
 8003a26:	f001 ff47 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003a2a:	2332      	movs	r3, #50	@ 0x32
 8003a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a36:	2303      	movs	r3, #3
 8003a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a3a:	230b      	movs	r3, #11
 8003a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a42:	4619      	mov	r1, r3
 8003a44:	4853      	ldr	r0, [pc, #332]	@ (8003b94 <_ZL12MX_GPIO_Initv+0x8d8>)
 8003a46:	f001 ff37 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a56:	2303      	movs	r3, #3
 8003a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a5a:	2309      	movs	r3, #9
 8003a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a62:	4619      	mov	r1, r3
 8003a64:	484e      	ldr	r0, [pc, #312]	@ (8003ba0 <_ZL12MX_GPIO_Initv+0x8e4>)
 8003a66:	f001 ff27 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003a6a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a70:	2302      	movs	r3, #2
 8003a72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a7c:	2309      	movs	r3, #9
 8003a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a84:	4619      	mov	r1, r3
 8003a86:	4847      	ldr	r0, [pc, #284]	@ (8003ba4 <_ZL12MX_GPIO_Initv+0x8e8>)
 8003a88:	f001 ff16 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a90:	2300      	movs	r3, #0
 8003a92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003a98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	483e      	ldr	r0, [pc, #248]	@ (8003b98 <_ZL12MX_GPIO_Initv+0x8dc>)
 8003aa0:	f001 ff0a 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003aa4:	2386      	movs	r3, #134	@ 0x86
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ab4:	230b      	movs	r3, #11
 8003ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003abc:	4619      	mov	r1, r3
 8003abe:	4834      	ldr	r0, [pc, #208]	@ (8003b90 <_ZL12MX_GPIO_Initv+0x8d4>)
 8003ac0:	f001 fefa 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003ad0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	482e      	ldr	r0, [pc, #184]	@ (8003b90 <_ZL12MX_GPIO_Initv+0x8d4>)
 8003ad8:	f001 feee 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003adc:	2350      	movs	r3, #80	@ 0x50
 8003ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003aec:	230d      	movs	r3, #13
 8003aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003af4:	4619      	mov	r1, r3
 8003af6:	4826      	ldr	r0, [pc, #152]	@ (8003b90 <_ZL12MX_GPIO_Initv+0x8d4>)
 8003af8:	f001 fede 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003afc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b02:	2312      	movs	r3, #18
 8003b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b16:	4619      	mov	r1, r3
 8003b18:	481b      	ldr	r0, [pc, #108]	@ (8003b88 <_ZL12MX_GPIO_Initv+0x8cc>)
 8003b1a:	f001 fecd 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003b1e:	2328      	movs	r3, #40	@ 0x28
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b22:	2302      	movs	r3, #2
 8003b24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003b2e:	230a      	movs	r3, #10
 8003b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b36:	4619      	mov	r1, r3
 8003b38:	4815      	ldr	r0, [pc, #84]	@ (8003b90 <_ZL12MX_GPIO_Initv+0x8d4>)
 8003b3a:	f001 febd 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003b3e:	2340      	movs	r3, #64	@ 0x40
 8003b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003b4e:	2309      	movs	r3, #9
 8003b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b56:	4619      	mov	r1, r3
 8003b58:	480b      	ldr	r0, [pc, #44]	@ (8003b88 <_ZL12MX_GPIO_Initv+0x8cc>)
 8003b5a:	f001 fead 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003b5e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b70:	2305      	movs	r3, #5
 8003b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4809      	ldr	r0, [pc, #36]	@ (8003ba0 <_ZL12MX_GPIO_Initv+0x8e4>)
 8003b7c:	f001 fe9c 	bl	80058b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b80:	bf00      	nop
 8003b82:	3740      	adds	r7, #64	@ 0x40
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021c00 	.word	0x40021c00
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	40020000 	.word	0x40020000
 8003b94:	40020800 	.word	0x40020800
 8003b98:	40021800 	.word	0x40021800
 8003b9c:	40021400 	.word	0x40021400
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40020c00 	.word	0x40020c00

08003ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bac:	b672      	cpsid	i
}
 8003bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <Error_Handler+0x8>

08003bb4 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8003bb4:	b5b0      	push	{r4, r5, r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	ed87 0a01 	vstr	s0, [r7, #4]
 8003bbe:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7fc fce1 	bl	8000588 <__aeabi_f2d>
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	460d      	mov	r5, r1
 8003bca:	6838      	ldr	r0, [r7, #0]
 8003bcc:	f7fc fcca 	bl	8000564 <__aeabi_i2d>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	ec43 2b11 	vmov	d1, r2, r3
 8003bd8:	ec45 4b10 	vmov	d0, r4, r5
 8003bdc:	f006 feae 	bl	800a93c <pow>
 8003be0:	eeb0 7a40 	vmov.f32	s14, s0
 8003be4:	eef0 7a60 	vmov.f32	s15, s1
    }
 8003be8:	eeb0 0a47 	vmov.f32	s0, s14
 8003bec:	eef0 0a67 	vmov.f32	s1, s15
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bdb0      	pop	{r4, r5, r7, pc}

08003bf6 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fac1 	bl	8004190 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
	unique_ptr(pointer __p,
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8003c24:	68fc      	ldr	r4, [r7, #12]
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 faa7 	bl	800417a <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	4620      	mov	r0, r4
 8003c34:	f7ff ffdf 	bl	8003bf6 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd90      	pop	{r4, r7, pc}

08003c42 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
      ~unique_ptr() noexcept
 8003c42:	b590      	push	{r4, r7, lr}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fab5 	bl	80041bc <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8003c52:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 faba 	bl	80041d6 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8003c62:	4603      	mov	r3, r0
 8003c64:	681c      	ldr	r4, [r3, #0]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fac2 	bl	80041f0 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	47a0      	blx	r4
	__ptr = pointer();
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
      }
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd90      	pop	{r4, r7, pc}

08003c84 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	ed93 7a00 	vldr	s14, [r3]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	d501      	bpl.n	8003ca8 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	e000      	b.n	8003caa <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8003ca8:	687b      	ldr	r3, [r7, #4]
    }
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8003cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
      {
	if (_M_empty())
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd fa30 	bl	800112e <_ZNKSt14_Function_base8_M_emptyEv>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	  __throw_bad_function_call();
 8003cd4:	f006 fe25 	bl	800a922 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68dc      	ldr	r4, [r3, #12]
 8003cdc:	68fd      	ldr	r5, [r7, #12]
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fa8f 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003ce8:	4606      	mov	r6, r0
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fa8a 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003cf2:	4680      	mov	r8, r0
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fa90 	bl	800421c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4642      	mov	r2, r8
 8003d00:	4631      	mov	r1, r6
 8003d02:	4628      	mov	r0, r5
 8003d04:	47a0      	blx	r4
 8003d06:	4603      	mov	r3, r0
      }
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d12 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2300      	movs	r3, #0
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	6053      	str	r3, [r2, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	461a      	mov	r2, r3
 8003d44:	2300      	movs	r3, #0
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	6053      	str	r3, [r2, #4]
 8003d4a:	6093      	str	r3, [r2, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ffdf 	bl	8003d12 <_ZNSt14_Function_baseC1Ev>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003d6e:	6838      	ldr	r0, [r7, #0]
 8003d70:	f000 fa5f 	bl	8004232 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f107 0308 	add.w	r3, r7, #8
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fa63 	bl	8004248 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>
 8003d82:	f107 0308 	add.w	r3, r7, #8
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f9d5 	bl	8004138 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8003d8e:	f107 0308 	add.w	r3, r7, #8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fbad 	bl	80014f2 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8003d98:	687b      	ldr	r3, [r7, #4]
	}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003dac:	6838      	ldr	r0, [r7, #0]
 8003dae:	f000 fa7d 	bl	80042ac <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8003db2:	4602      	mov	r2, r0
 8003db4:	f107 0308 	add.w	r3, r7, #8
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fa82 	bl	80042c4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>
 8003dc0:	f107 0308 	add.w	r3, r7, #8
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f9b6 	bl	8004138 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8003dcc:	f107 0308 	add.w	r3, r7, #8
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd fb8e 	bl	80014f2 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8003dd6:	687b      	ldr	r3, [r7, #4]
	}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fa97 	bl	8004324 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>:
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	_GLIBCXX23_CONSTEXPR
	explicit
	unique_ptr(_Up __p) noexcept
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6839      	ldr	r1, [r7, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff ffe6 	bl	8003de0 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>
        { }
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:

      /// Destructor, invokes the deleter if the stored pointer is not null.
#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~unique_ptr()
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fa8f 	bl	800434c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 8003e2e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fa94 	bl	8004366 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 fa9a 	bl	8004380 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>
	__ptr = pointer();
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
      }
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fa99 	bl	800439e <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	4611      	mov	r1, r2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fa97 	bl	80043ba <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6839      	ldr	r1, [r7, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ffe6 	bl	8003e76 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fa8f 	bl	80043e2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 8003ec4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa94 	bl	80043fc <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fa9d 	bl	8004416 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>
 8003edc:	4603      	mov	r3, r0
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f000 faa2 	bl	800442c <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
	__ptr = pointer();
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
      }
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd90      	pop	{r4, r7, pc}

08003ef8 <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 faa5 	bl	8004452 <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	da01      	bge.n	8003f2c <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	e000      	b.n	8003f2e <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8003f2c:	687b      	ldr	r3, [r7, #4]
    }
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	da01      	bge.n	8003f54 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	e000      	b.n	8003f56 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8003f54:	687b      	ldr	r3, [r7, #4]
    }
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 8003f62:	b480      	push	{r7}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6178      	str	r0, [r7, #20]
 8003f6a:	6139      	str	r1, [r7, #16]
 8003f6c:	60fa      	str	r2, [r7, #12]
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f74:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003f78:	f06f 0314 	mvn.w	r3, #20
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6178      	str	r0, [r7, #20]
 8003f90:	6139      	str	r1, [r7, #16]
 8003f92:	60fa      	str	r2, [r7, #12]
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f9a:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003f9e:	f06f 0314 	mvn.w	r3, #20
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6178      	str	r0, [r7, #20]
 8003fb6:	6139      	str	r1, [r7, #16]
 8003fb8:	60fa      	str	r2, [r7, #12]
 8003fba:	ed87 0a02 	vstr	s0, [r7, #8]
 8003fbe:	edc7 0a01 	vstr	s1, [r7, #4]
 8003fc2:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003fc4:	f06f 0314 	mvn.w	r3, #20
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6178      	str	r0, [r7, #20]
 8003fdc:	6139      	str	r1, [r7, #16]
 8003fde:	60fa      	str	r2, [r7, #12]
 8003fe0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003fe4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003fea:	f06f 0314 	mvn.w	r3, #20
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 8003ffa:	b480      	push	{r7}
 8003ffc:	b087      	sub	sp, #28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6178      	str	r0, [r7, #20]
 8004002:	6139      	str	r1, [r7, #16]
 8004004:	60fa      	str	r2, [r7, #12]
 8004006:	ed87 0a02 	vstr	s0, [r7, #8]
 800400a:	edc7 0a01 	vstr	s1, [r7, #4]
 800400e:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004010:	f06f 0314 	mvn.w	r3, #20
}
 8004014:	4618      	mov	r0, r3
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6178      	str	r0, [r7, #20]
 8004028:	6139      	str	r1, [r7, #16]
 800402a:	60fa      	str	r2, [r7, #12]
 800402c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004030:	edc7 0a01 	vstr	s1, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004036:	f06f 0314 	mvn.w	r3, #20
}
 800403a:	4618      	mov	r0, r3
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:

/**
 * Fill the result structure from a quantized output tensor
*/
template<typename T>
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 8004046:	b480      	push	{r7}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	6178      	str	r0, [r7, #20]
 800404e:	6139      	str	r1, [r7, #16]
 8004050:	60fa      	str	r2, [r7, #12]
 8004052:	ed87 0a02 	vstr	s0, [r7, #8]
 8004056:	edc7 0a01 	vstr	s1, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
                                                                                      size_t output_features_count,
                                                                                      bool debug = false) {
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, zero_point, scale, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800405c:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 8004060:	4618      	mov	r0, r3
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6178      	str	r0, [r7, #20]
 8004074:	6139      	str	r1, [r7, #16]
 8004076:	60fa      	str	r2, [r7, #12]
 8004078:	ed87 0a02 	vstr	s0, [r7, #8]
 800407c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004082:	f06f 0314 	mvn.w	r3, #20
}
 8004086:	4618      	mov	r0, r3
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f9e6 	bl	800446e <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 f9e7 	bl	800448a <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ffeb 	bl	80040ac <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	: _M_t()
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ffe8 	bl	80040c6 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>
	{ }
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800410a:	6838      	ldr	r0, [r7, #0]
 800410c:	f000 f9ea 	bl	80044e4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>
 8004110:	4603      	mov	r3, r0
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f9c5 	bl	80044a4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800411a:	6838      	ldr	r0, [r7, #0]
 800411c:	f000 f9f7 	bl	800450e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 8004120:	4603      	mov	r3, r0
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fa00 	bl	8004528 <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f9f0 	bl	800450e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
	return *this;
 800412e:	687b      	ldr	r3, [r7, #4]
      }
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f000 f9f8 	bl	800453e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f103 0208 	add.w	r2, r3, #8
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f000 fa16 	bl	800458c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f103 020c 	add.w	r2, r3, #12
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f000 fa2c 	bl	80045ca <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800419c:	68fc      	ldr	r4, [r7, #12]
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa32 	bl	8004608 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80041a4:	4602      	mov	r2, r0
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	4619      	mov	r1, r3
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 fa36 	bl	800461e <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd90      	pop	{r4, r7, pc}

080041bc <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fa42 	bl	8004650 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80041cc:	4603      	mov	r3, r0
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fa42 	bl	800466a <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>:
	function(_Functor&& __f)
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	461a      	mov	r2, r3
 8004256:	2300      	movs	r3, #0
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	6053      	str	r3, [r2, #4]
 800425c:	6093      	str	r3, [r2, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fd56 	bl	8003d12 <_ZNSt14_Function_baseC1Ev>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fa07 	bl	8004684 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00e      	beq.n	800429a <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 800427c:	687c      	ldr	r4, [r7, #4]
 800427e:	6838      	ldr	r0, [r7, #0]
 8004280:	f7ff ffd7 	bl	8004232 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004284:	4603      	mov	r3, r0
 8004286:	4619      	mov	r1, r3
 8004288:	4620      	mov	r0, r4
 800428a:	f000 fa0b 	bl	80046a4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a04      	ldr	r2, [pc, #16]	@ (80042a4 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x5c>)
 8004292:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a04      	ldr	r2, [pc, #16]	@ (80042a8 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x60>)
 8004298:	609a      	str	r2, [r3, #8]
	}
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd90      	pop	{r4, r7, pc}
 80042a4:	080046c9 	.word	0x080046c9
 80042a8:	0800470b 	.word	0x0800470b

080042ac <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	461a      	mov	r2, r3
 80042d2:	2300      	movs	r3, #0
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	6053      	str	r3, [r2, #4]
 80042d8:	6093      	str	r3, [r2, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fd18 	bl	8003d12 <_ZNSt14_Function_baseC1Ev>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80042e8:	6838      	ldr	r0, [r7, #0]
 80042ea:	f000 fa2d 	bl	8004748 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00e      	beq.n	8004312 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80042f4:	687c      	ldr	r4, [r7, #4]
 80042f6:	6838      	ldr	r0, [r7, #0]
 80042f8:	f7ff ffd8 	bl	80042ac <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4619      	mov	r1, r3
 8004300:	4620      	mov	r0, r4
 8004302:	f000 fa2c 	bl	800475e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a04      	ldr	r2, [pc, #16]	@ (800431c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x58>)
 800430a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a04      	ldr	r2, [pc, #16]	@ (8004320 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x5c>)
 8004310:	609a      	str	r2, [r3, #8]
	}
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	bd90      	pop	{r4, r7, pc}
 800431c:	08004783 	.word	0x08004783
 8004320:	080047c5 	.word	0x080047c5

08004324 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fa66 	bl	8004802 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f808 	bl	800434c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800433c:	4602      	mov	r2, r0
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa60 	bl	800481c <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800435c:	4603      	mov	r3, r0
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      _GLIBCXX23_CONSTEXPR
      deleter_type&
      get_deleter() noexcept
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fa60 	bl	8004836 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>
 8004376:	4603      	mov	r3, r0
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>:
	operator()(_Up* __ptr) const
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_+0x16>
 8004390:	6838      	ldr	r0, [r7, #0]
 8004392:	f006 faaf 	bl	800a8f4 <_ZdaPv>
	}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fa51 	bl	8004850 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80043ae:	4603      	mov	r3, r0
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f85f 	bl	800448a <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f808 	bl	80043e2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80043d2:	4602      	mov	r2, r0
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fa3c 	bl	800486a <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f881 	bl	800450e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800440c:	4603      	mov	r3, r0
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8004436:	683c      	ldr	r4, [r7, #0]
 8004438:	2c00      	cmp	r4, #0
 800443a:	d006      	beq.n	800444a <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_+0x1e>
 800443c:	4620      	mov	r0, r4
 800443e:	f7fc ff18 	bl	8001272 <_ZN2ei9ei_matrixD1Ev>
 8004442:	2110      	movs	r1, #16
 8004444:	4620      	mov	r0, r4
 8004446:	f006 fa53 	bl	800a8f0 <_ZdlPvj>
      }
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bd90      	pop	{r4, r7, pc}

08004452 <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fa11 	bl	8004884 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8004462:	4603      	mov	r3, r0
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fa10 	bl	800489e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 800447e:	4603      	mov	r3, r0
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fa0f 	bl	80048b8 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>:
      void reset(pointer __p) noexcept
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ff97 	bl	80043e2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80044b4:	4603      	mov	r3, r0
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff ff91 	bl	80043e2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80044c0:	4602      	mov	r2, r0
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_+0x38>
	  _M_deleter()(__old_p);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f81e 	bl	800450e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 80044d2:	4603      	mov	r3, r0
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ffa8 	bl	800442c <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
      }
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>:
      pointer release() noexcept
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ff78 	bl	80043e2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80044f2:	4603      	mov	r3, r0
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff ff72 	bl	80043e2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 80044fe:	4603      	mov	r3, r0
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
	return __p;
 8004504:	68fb      	ldr	r3, [r7, #12]
      }
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4618      	mov	r0, r3
 800451a:	f000 f9dd 	bl	80048d8 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800451e:	4603      	mov	r3, r0
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f9d1 	bl	80048f0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800454e:	4602      	mov	r2, r0
 8004550:	f107 0308 	add.w	r3, r7, #8
 8004554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004558:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800455c:	6838      	ldr	r0, [r7, #0]
 800455e:	f000 f9c7 	bl	80048f0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8004562:	4602      	mov	r2, r0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800456a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800456e:	f107 0308 	add.w	r3, r7, #8
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f9bc 	bl	80048f0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8004578:	4602      	mov	r2, r0
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004580:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f9b5 	bl	8004906 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800459c:	4603      	mov	r3, r0
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80045a2:	6838      	ldr	r0, [r7, #0]
 80045a4:	f000 f9af 	bl	8004906 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80045a8:	4603      	mov	r3, r0
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80045b0:	f107 030c 	add.w	r3, r7, #12
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f9a6 	bl	8004906 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80045ba:	4603      	mov	r3, r0
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	601a      	str	r2, [r3, #0]
    }
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f9a1 	bl	800491c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80045da:	4603      	mov	r3, r0
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80045e0:	6838      	ldr	r0, [r7, #0]
 80045e2:	f000 f99b 	bl	800491c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80045e6:	4603      	mov	r3, r0
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80045ee:	f107 030c 	add.w	r3, r7, #12
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f992 	bl	800491c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80045f8:	4603      	mov	r3, r0
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	601a      	str	r2, [r3, #0]
    }
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 800461e:	b5b0      	push	{r4, r5, r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800462a:	68fc      	ldr	r4, [r7, #12]
 800462c:	68b8      	ldr	r0, [r7, #8]
 800462e:	f000 f980 	bl	8004932 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004632:	4605      	mov	r5, r0
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ffe7 	bl	8004608 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	4629      	mov	r1, r5
 8004640:	4620      	mov	r0, r4
 8004642:	f000 f981 	bl	8004948 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bdb0      	pop	{r4, r5, r7, pc}

08004650 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f992 	bl	8004984 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004660:	4603      	mov	r3, r0
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f991 	bl	800499c <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800467a:	4603      	mov	r3, r0
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80046ae:	6838      	ldr	r0, [r7, #0]
 80046b0:	f7ff fdbf 	bl	8004232 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4622      	mov	r2, r4
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f97b 	bl	80049b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}

080046c8 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80046c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f986 	bl	80049e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80046dc:	4604      	mov	r4, r0
 80046de:	68b8      	ldr	r0, [r7, #8]
 80046e0:	f7ff fd91 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80046e4:	4605      	mov	r5, r0
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff fd8d 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80046ec:	4606      	mov	r6, r0
 80046ee:	6838      	ldr	r0, [r7, #0]
 80046f0:	f7ff fd94 	bl	800421c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4632      	mov	r2, r6
 80046f8:	4629      	mov	r1, r5
 80046fa:	4620      	mov	r0, r4
 80046fc:	f000 f985 	bl	8004a0a <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8004700:	4603      	mov	r3, r0
      }
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800470a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800470a:	b590      	push	{r4, r7, lr}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	4613      	mov	r3, r2
 8004716:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d109      	bne.n	8004732 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f998 	bl	8004a54 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8004724:	4604      	mov	r4, r0
 8004726:	68b8      	ldr	r0, [r7, #8]
 8004728:	f000 f95e 	bl	80049e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800472c:	4603      	mov	r3, r0
 800472e:	6023      	str	r3, [r4, #0]
	    break;
 8004730:	e005      	b.n	800473e <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	461a      	mov	r2, r3
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f997 	bl	8004a6c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800473e:	2300      	movs	r3, #0
      }
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	bd90      	pop	{r4, r7, pc}

08004748 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8004750:	2301      	movs	r3, #1
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800475e:	b590      	push	{r4, r7, lr}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004768:	6838      	ldr	r0, [r7, #0]
 800476a:	f7ff fd9f 	bl	80042ac <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800476e:	4603      	mov	r3, r0
 8004770:	4622      	mov	r2, r4
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f9b3 	bl	8004ae0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bd90      	pop	{r4, r7, pc}

08004782 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f9be 	bl	8004b12 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004796:	4604      	mov	r4, r0
 8004798:	68b8      	ldr	r0, [r7, #8]
 800479a:	f7ff fd34 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800479e:	4605      	mov	r5, r0
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff fd30 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80047a6:	4606      	mov	r6, r0
 80047a8:	6838      	ldr	r0, [r7, #0]
 80047aa:	f7ff fd37 	bl	800421c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4632      	mov	r2, r6
 80047b2:	4629      	mov	r1, r5
 80047b4:	4620      	mov	r0, r4
 80047b6:	f000 f9bd 	bl	8004b34 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 80047ba:	4603      	mov	r3, r0
      }
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047c4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d109      	bne.n	80047ec <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f9d0 	bl	8004b7e <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 80047de:	4604      	mov	r4, r0
 80047e0:	68b8      	ldr	r0, [r7, #8]
 80047e2:	f000 f996 	bl	8004b12 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80047e6:	4603      	mov	r3, r0
 80047e8:	6023      	str	r3, [r4, #0]
	    break;
 80047ea:	e005      	b.n	80047f8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	461a      	mov	r2, r3
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f9d0 	bl	8004b98 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80047f8:	2300      	movs	r3, #0
      }
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}

08004802 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f9fd 	bl	8004c0c <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fa00 	bl	8004c2c <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800482c:	4603      	mov	r3, r0
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>:
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f9ff 	bl	8004c44 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8004846:	4603      	mov	r3, r0
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f9fe 	bl	8004c5c <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8004860:	4603      	mov	r3, r0
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f9fd 	bl	8004c74 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800487a:	4603      	mov	r3, r0
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f9fc 	bl	8004c8c <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8004894:	4603      	mov	r3, r0
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:
    get(const tuple<_Elements...>& __t) noexcept
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 f9fb 	bl	8004ca4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f9fb 	bl	8004cbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fa03 	bl	8004cd4 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fa05 	bl	8004cf0 <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8004954:	68fc      	ldr	r4, [r7, #12]
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff fe56 	bl	8004608 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800495c:	4603      	mov	r3, r0
 800495e:	4619      	mov	r1, r3
 8004960:	4620      	mov	r0, r4
 8004962:	f000 f9dd 	bl	8004d20 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1d1c      	adds	r4, r3, #4
 800496a:	68b8      	ldr	r0, [r7, #8]
 800496c:	f7ff ffe1 	bl	8004932 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004970:	4603      	mov	r3, r0
 8004972:	4619      	mov	r1, r3
 8004974:	4620      	mov	r0, r4
 8004976:	f000 f9e6 	bl	8004d46 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
	{ }
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bd90      	pop	{r4, r7, pc}

08004984 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f9eb 	bl	8004d68 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8004992:	4603      	mov	r3, r0
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f9ec 	bl	8004d84 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80049ac:	4603      	mov	r3, r0
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80049b6:	b590      	push	{r4, r7, lr}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7fc fb8a 	bl	80010dc <_ZNSt9_Any_data9_M_accessEv>
 80049c8:	4603      	mov	r3, r0
 80049ca:	4619      	mov	r1, r3
 80049cc:	2004      	movs	r0, #4
 80049ce:	f7fc fb79 	bl	80010c4 <_ZnwjPv>
 80049d2:	4604      	mov	r4, r0
 80049d4:	68b8      	ldr	r0, [r7, #8]
 80049d6:	f7ff fc2c 	bl	8004232 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 80049da:	4603      	mov	r3, r0
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6023      	str	r3, [r4, #0]
	  }
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd90      	pop	{r4, r7, pc}

080049e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f9d3 	bl	8004d9c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 80049f6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f9db 	bl	8004db4 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 80049fe:	4603      	mov	r3, r0
 8004a00:	bf00      	nop
	}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f9d5 	bl	8004dca <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004a20:	4604      	mov	r4, r0
 8004a22:	68b8      	ldr	r0, [r7, #8]
 8004a24:	f7ff fbef 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a28:	4605      	mov	r5, r0
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fbeb 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a30:	4606      	mov	r6, r0
 8004a32:	6838      	ldr	r0, [r7, #0]
 8004a34:	f7ff fbf2 	bl	800421c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4633      	mov	r3, r6
 8004a3e:	462a      	mov	r2, r5
 8004a40:	4621      	mov	r1, r4
 8004a42:	4640      	mov	r0, r8
 8004a44:	f000 f9cc 	bl	8004de0 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8004a48:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a54 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access() noexcept
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fc fb3d 	bl	80010dc <_ZNSt9_Any_data9_M_accessEv>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d82a      	bhi.n	8004ad6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 8004a80:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004aa7 	.word	0x08004aa7
 8004a90:	08004abb 	.word	0x08004abb
 8004a94:	08004acd 	.word	0x08004acd
	      __dest._M_access<const type_info*>() = nullptr;
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f935 	bl	8004d08 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
	      break;
 8004aa4:	e017      	b.n	8004ad6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff ffd4 	bl	8004a54 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8004aac:	4604      	mov	r4, r0
 8004aae:	68b8      	ldr	r0, [r7, #8]
 8004ab0:	f7ff ff9a 	bl	80049e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	6023      	str	r3, [r4, #0]
	      break;
 8004ab8:	e00d      	b.n	8004ad6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8004aba:	68b8      	ldr	r0, [r7, #8]
 8004abc:	f7ff ff94 	bl	80049e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004ac0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f9af 	bl	8004e28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 8004aca:	e004      	b.n	8004ad6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8004acc:	4621      	mov	r1, r4
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f9bc 	bl	8004e4c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004ad4:	bf00      	nop
	  return false;
 8004ad6:	2300      	movs	r3, #0
	}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}

08004ae0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7fc faf5 	bl	80010dc <_ZNSt9_Any_data9_M_accessEv>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4619      	mov	r1, r3
 8004af6:	2004      	movs	r0, #4
 8004af8:	f7fc fae4 	bl	80010c4 <_ZnwjPv>
 8004afc:	4604      	mov	r4, r0
 8004afe:	68b8      	ldr	r0, [r7, #8]
 8004b00:	f7ff fbd4 	bl	80042ac <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8004b04:	4603      	mov	r3, r0
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6023      	str	r3, [r4, #0]
	  }
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd90      	pop	{r4, r7, pc}

08004b12 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f9a2 	bl	8004e64 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004b20:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f9aa 	bl	8004e7c <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	bf00      	nop
	}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af02      	add	r7, sp, #8
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f9a4 	bl	8004e92 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	68b8      	ldr	r0, [r7, #8]
 8004b4e:	f7ff fb5a 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004b52:	4605      	mov	r5, r0
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fb56 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	6838      	ldr	r0, [r7, #0]
 8004b5e:	f7ff fb5d 	bl	800421c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004b62:	4603      	mov	r3, r0
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	4633      	mov	r3, r6
 8004b68:	462a      	mov	r2, r5
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	f000 f99b 	bl	8004ea8 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8004b72:	4603      	mov	r3, r0
    }
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b7e <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access() noexcept
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fc faa8 	bl	80010dc <_ZNSt9_Any_data9_M_accessEv>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d82a      	bhi.n	8004c02 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 8004bac:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bd3 	.word	0x08004bd3
 8004bbc:	08004be7 	.word	0x08004be7
 8004bc0:	08004bf9 	.word	0x08004bf9
	      __dest._M_access<const type_info*>() = nullptr;
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f89f 	bl	8004d08 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
	      break;
 8004bd0:	e017      	b.n	8004c02 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff ffd3 	bl	8004b7e <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8004bd8:	4604      	mov	r4, r0
 8004bda:	68b8      	ldr	r0, [r7, #8]
 8004bdc:	f7ff ff99 	bl	8004b12 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004be0:	4603      	mov	r3, r0
 8004be2:	6023      	str	r3, [r4, #0]
	      break;
 8004be4:	e00d      	b.n	8004c02 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f7ff ff93 	bl	8004b12 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004bec:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8004bee:	4619      	mov	r1, r3
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f97d 	bl	8004ef0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 8004bf6:	e004      	b.n	8004c02 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f98a 	bl	8004f14 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004c00:	bf00      	nop
	  return false;
 8004c02:	2300      	movs	r3, #0
	}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd90      	pop	{r4, r7, pc}

08004c0c <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f989 	bl	8004f2c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 f991 	bl	8004f44 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f993 	bl	8004f60 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f994 	bl	8004f7a <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f994 	bl	8004f92 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f995 	bl	8004fac <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>
 8004c82:	4603      	mov	r3, r0
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f996 	bl	8004fc6 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f997 	bl	8004fe0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>:
      _Tuple_impl()
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f999 	bl	8004ffc <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>:
      constexpr _Head_base()
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f98a 	bl	8005012 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fc f9e3 	bl	80010dc <_ZNSt9_Any_data9_M_accessEv>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8004d2a:	687c      	ldr	r4, [r7, #4]
 8004d2c:	6838      	ldr	r0, [r7, #0]
 8004d2e:	f7ff fc6b 	bl	8004608 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4619      	mov	r1, r3
 8004d36:	4620      	mov	r0, r4
 8004d38:	f000 f977 	bl	800502a <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
	{ }
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd90      	pop	{r4, r7, pc}

08004d46 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004d50:	6838      	ldr	r0, [r7, #0]
 8004d52:	f7ff fdee 	bl	8004932 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004d56:	4603      	mov	r3, r0
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f969 	bl	800504c <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f968 	bl	8005062 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const noexcept
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc f9a4 	bl	80010f2 <_ZNKSt9_Any_data9_M_accessEv>
 8004daa:	4603      	mov	r3, r0
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	7338      	strb	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004dee:	68b8      	ldr	r0, [r7, #8]
 8004df0:	f7ff ffeb 	bl	8004dca <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004df4:	4603      	mov	r3, r0
 8004df6:	681c      	ldr	r4, [r3, #0]
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fa04 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	681d      	ldr	r5, [r3, #0]
 8004e02:	6838      	ldr	r0, [r7, #0]
 8004e04:	f7ff f9ff 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	681e      	ldr	r6, [r3, #0]
 8004e0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e0e:	f7ff fa05 	bl	800421c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004e12:	4603      	mov	r3, r0
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47a0      	blx	r4
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004e32:	6838      	ldr	r0, [r7, #0]
 8004e34:	f000 f922 	bl	800507c <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f927 	bl	8005092 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}

08004e4c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f934 	bl	80050c4 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const noexcept
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7fc f940 	bl	80010f2 <_ZNKSt9_Any_data9_M_accessEv>
 8004e72:	4603      	mov	r3, r0
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	7338      	strb	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004eb6:	68b8      	ldr	r0, [r7, #8]
 8004eb8:	f7ff ffeb 	bl	8004e92 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff f9a1 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	681c      	ldr	r4, [r3, #0]
 8004ec8:	6838      	ldr	r0, [r7, #0]
 8004eca:	f7ff f99c 	bl	8004206 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	681d      	ldr	r5, [r3, #0]
 8004ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ed4:	f7ff f9a2 	bl	800421c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	462a      	mov	r2, r5
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f7fc fb84 	bl	80015ee <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ef0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8004efa:	6838      	ldr	r0, [r7, #0]
 8004efc:	f000 f8ee 	bl	80050dc <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8004f00:	4603      	mov	r3, r0
 8004f02:	4622      	mov	r2, r4
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f8f3 	bl	80050f2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd90      	pop	{r4, r7, pc}

08004f14 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f900 	bl	8005124 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>:
      _Tuple_impl()
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f901 	bl	800513c <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>:
      constexpr _Head_base()
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f8f1 	bl	8005152 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>
 8004f70:	4603      	mov	r3, r0
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f8f0 	bl	8005168 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 f8ef 	bl	8005180 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f8ed 	bl	8005196 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f8eb 	bl	80051ac <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 f8e8 	bl	80051c2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>:
      constexpr _Head_base()
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f8dc 	bl	80051d8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>
 8005020:	4603      	mov	r3, r0
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005034:	6838      	ldr	r0, [r7, #0]
 8005036:	f7ff fae7 	bl	8004608 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800503a:	4603      	mov	r3, r0
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f8be 	bl	80051ee <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8005072:	4603      	mov	r3, r0
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8005092:	b590      	push	{r4, r7, lr}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7fc f81c 	bl	80010dc <_ZNSt9_Any_data9_M_accessEv>
 80050a4:	4603      	mov	r3, r0
 80050a6:	4619      	mov	r1, r3
 80050a8:	2004      	movs	r0, #4
 80050aa:	f7fc f80b 	bl	80010c4 <_ZnwjPv>
 80050ae:	4604      	mov	r4, r0
 80050b0:	68b8      	ldr	r0, [r7, #8]
 80050b2:	f7ff ffe3 	bl	800507c <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 80050b6:	4603      	mov	r3, r0
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6023      	str	r3, [r4, #0]
	  }
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd90      	pop	{r4, r7, pc}

080050c4 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access() noexcept
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fc f805 	bl	80010dc <_ZNSt9_Any_data9_M_accessEv>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80050f2:	b590      	push	{r4, r7, lr}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7fb ffec 	bl	80010dc <_ZNSt9_Any_data9_M_accessEv>
 8005104:	4603      	mov	r3, r0
 8005106:	4619      	mov	r1, r3
 8005108:	2004      	movs	r0, #4
 800510a:	f7fb ffdb 	bl	80010c4 <_ZnwjPv>
 800510e:	4604      	mov	r4, r0
 8005110:	68b8      	ldr	r0, [r7, #8]
 8005112:	f7ff ffe3 	bl	80050dc <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8005116:	4603      	mov	r3, r0
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6023      	str	r3, [r4, #0]
	  }
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	bd90      	pop	{r4, r7, pc}

08005124 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access() noexcept
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7fb ffd5 	bl	80010dc <_ZNSt9_Any_data9_M_accessEv>
 8005132:	4603      	mov	r3, r0
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>:
      constexpr _Head_base()
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f847 	bl	8005204 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>
 8005176:	4603      	mov	r3, r0
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d108      	bne.n	800523e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005232:	4293      	cmp	r3, r2
 8005234:	d103      	bne.n	800523e <_Z41__static_initialization_and_destruction_0ii+0x22>
    .calibration = ei_calibration,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};

ei_impulse_handle_t impulse_handle_365745_0 = ei_impulse_handle_t( &impulse_365745_0 );
 8005236:	4909      	ldr	r1, [pc, #36]	@ (800525c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005238:	4809      	ldr	r0, [pc, #36]	@ (8005260 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800523a:	f7fc f948 	bl	80014ce <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800524a:	4293      	cmp	r3, r2
 800524c:	d102      	bne.n	8005254 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800524e:	4804      	ldr	r0, [pc, #16]	@ (8005260 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005250:	f7fc fa65 	bl	800171e <_ZN19ei_impulse_handle_tD1Ev>
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08011388 	.word	0x08011388
 8005260:	200006d4 	.word	0x200006d4

08005264 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
 8005268:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800526c:	2001      	movs	r0, #1
 800526e:	f7ff ffd5 	bl	800521c <_Z41__static_initialization_and_destruction_0ii>
 8005272:	bd80      	pop	{r7, pc}

08005274 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
 8005278:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800527c:	2000      	movs	r0, #0
 800527e:	f7ff ffcd 	bl	800521c <_Z41__static_initialization_and_destruction_0ii>
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	4b0f      	ldr	r3, [pc, #60]	@ (80052c8 <HAL_MspInit+0x44>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	4a0e      	ldr	r2, [pc, #56]	@ (80052c8 <HAL_MspInit+0x44>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005294:	6413      	str	r3, [r2, #64]	@ 0x40
 8005296:	4b0c      	ldr	r3, [pc, #48]	@ (80052c8 <HAL_MspInit+0x44>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052a2:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_MspInit+0x44>)
 80052a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a6:	4a08      	ldr	r2, [pc, #32]	@ (80052c8 <HAL_MspInit+0x44>)
 80052a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80052ae:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <HAL_MspInit+0x44>)
 80052b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40023800 	.word	0x40023800

080052cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b0ac      	sub	sp, #176	@ 0xb0
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	609a      	str	r2, [r3, #8]
 80052e0:	60da      	str	r2, [r3, #12]
 80052e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052e4:	f107 0318 	add.w	r3, r7, #24
 80052e8:	2284      	movs	r2, #132	@ 0x84
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f007 fee9 	bl	800d0c4 <memset>
  if(huart->Instance==USART1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a32      	ldr	r2, [pc, #200]	@ (80053c0 <HAL_UART_MspInit+0xf4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d15c      	bne.n	80053b6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80052fc:	2340      	movs	r3, #64	@ 0x40
 80052fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005300:	2300      	movs	r3, #0
 8005302:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005304:	f107 0318 	add.w	r3, r7, #24
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f925 	bl	8006558 <HAL_RCCEx_PeriphCLKConfig>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005314:	f7fe fc48 	bl	8003ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005318:	4b2a      	ldr	r3, [pc, #168]	@ (80053c4 <HAL_UART_MspInit+0xf8>)
 800531a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531c:	4a29      	ldr	r2, [pc, #164]	@ (80053c4 <HAL_UART_MspInit+0xf8>)
 800531e:	f043 0310 	orr.w	r3, r3, #16
 8005322:	6453      	str	r3, [r2, #68]	@ 0x44
 8005324:	4b27      	ldr	r3, [pc, #156]	@ (80053c4 <HAL_UART_MspInit+0xf8>)
 8005326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005330:	4b24      	ldr	r3, [pc, #144]	@ (80053c4 <HAL_UART_MspInit+0xf8>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005334:	4a23      	ldr	r2, [pc, #140]	@ (80053c4 <HAL_UART_MspInit+0xf8>)
 8005336:	f043 0302 	orr.w	r3, r3, #2
 800533a:	6313      	str	r3, [r2, #48]	@ 0x30
 800533c:	4b21      	ldr	r3, [pc, #132]	@ (80053c4 <HAL_UART_MspInit+0xf8>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005348:	4b1e      	ldr	r3, [pc, #120]	@ (80053c4 <HAL_UART_MspInit+0xf8>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	4a1d      	ldr	r2, [pc, #116]	@ (80053c4 <HAL_UART_MspInit+0xf8>)
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	6313      	str	r3, [r2, #48]	@ 0x30
 8005354:	4b1b      	ldr	r3, [pc, #108]	@ (80053c4 <HAL_UART_MspInit+0xf8>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005366:	2302      	movs	r3, #2
 8005368:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005378:	2307      	movs	r3, #7
 800537a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800537e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005382:	4619      	mov	r1, r3
 8005384:	4810      	ldr	r0, [pc, #64]	@ (80053c8 <HAL_UART_MspInit+0xfc>)
 8005386:	f000 fa97 	bl	80058b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800538a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800538e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005392:	2302      	movs	r3, #2
 8005394:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539e:	2300      	movs	r3, #0
 80053a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053a4:	2307      	movs	r3, #7
 80053a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80053aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80053ae:	4619      	mov	r1, r3
 80053b0:	4806      	ldr	r0, [pc, #24]	@ (80053cc <HAL_UART_MspInit+0x100>)
 80053b2:	f000 fa81 	bl	80058b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053b6:	bf00      	nop
 80053b8:	37b0      	adds	r7, #176	@ 0xb0
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40011000 	.word	0x40011000
 80053c4:	40023800 	.word	0x40023800
 80053c8:	40020400 	.word	0x40020400
 80053cc:	40020000 	.word	0x40020000

080053d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <NMI_Handler+0x4>

080053d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <HardFault_Handler+0x4>

080053e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <MemManage_Handler+0x4>

080053e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <BusFault_Handler+0x4>

080053f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <UsageFault_Handler+0x4>

080053f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053fc:	bf00      	nop
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005418:	bf00      	nop
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005426:	f000 f941 	bl	80056ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}

0800542e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800542e:	b480      	push	{r7}
 8005430:	af00      	add	r7, sp, #0
  return 1;
 8005432:	2301      	movs	r3, #1
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <_kill>:

int _kill(int pid, int sig)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005448:	f007 ff4c 	bl	800d2e4 <__errno>
 800544c:	4603      	mov	r3, r0
 800544e:	2216      	movs	r2, #22
 8005450:	601a      	str	r2, [r3, #0]
  return -1;
 8005452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <_exit>:

void _exit (int status)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005466:	f04f 31ff 	mov.w	r1, #4294967295
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff ffe7 	bl	800543e <_kill>
  while (1) {}    /* Make sure we hang here */
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <_exit+0x12>

08005474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e00a      	b.n	800549c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005486:	f3af 8000 	nop.w
 800548a:	4601      	mov	r1, r0
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	60ba      	str	r2, [r7, #8]
 8005492:	b2ca      	uxtb	r2, r1
 8005494:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	3301      	adds	r3, #1
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	dbf0      	blt.n	8005486 <_read+0x12>
  }

  return len;
 80054a4:	687b      	ldr	r3, [r7, #4]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b086      	sub	sp, #24
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e009      	b.n	80054d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	60ba      	str	r2, [r7, #8]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	3301      	adds	r3, #1
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	dbf1      	blt.n	80054c0 <_write+0x12>
  }
  return len;
 80054dc:	687b      	ldr	r3, [r7, #4]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <_close>:

int _close(int file)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800550e:	605a      	str	r2, [r3, #4]
  return 0;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_isatty>:

int _isatty(int file)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005526:	2301      	movs	r3, #1
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005558:	4a14      	ldr	r2, [pc, #80]	@ (80055ac <_sbrk+0x5c>)
 800555a:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <_sbrk+0x60>)
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005564:	4b13      	ldr	r3, [pc, #76]	@ (80055b4 <_sbrk+0x64>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800556c:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <_sbrk+0x64>)
 800556e:	4a12      	ldr	r2, [pc, #72]	@ (80055b8 <_sbrk+0x68>)
 8005570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005572:	4b10      	ldr	r3, [pc, #64]	@ (80055b4 <_sbrk+0x64>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4413      	add	r3, r2
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	429a      	cmp	r2, r3
 800557e:	d207      	bcs.n	8005590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005580:	f007 feb0 	bl	800d2e4 <__errno>
 8005584:	4603      	mov	r3, r0
 8005586:	220c      	movs	r2, #12
 8005588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
 800558e:	e009      	b.n	80055a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005590:	4b08      	ldr	r3, [pc, #32]	@ (80055b4 <_sbrk+0x64>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005596:	4b07      	ldr	r3, [pc, #28]	@ (80055b4 <_sbrk+0x64>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4413      	add	r3, r2
 800559e:	4a05      	ldr	r2, [pc, #20]	@ (80055b4 <_sbrk+0x64>)
 80055a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20050000 	.word	0x20050000
 80055b0:	00000400 	.word	0x00000400
 80055b4:	2000079c 	.word	0x2000079c
 80055b8:	20000b48 	.word	0x20000b48

080055bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055c0:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <SystemInit+0x20>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c6:	4a05      	ldr	r2, [pc, #20]	@ (80055dc <SystemInit+0x20>)
 80055c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055d0:	bf00      	nop
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	e000ed00 	.word	0xe000ed00

080055e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80055e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055e4:	480d      	ldr	r0, [pc, #52]	@ (800561c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055e6:	490e      	ldr	r1, [pc, #56]	@ (8005620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055ec:	e002      	b.n	80055f4 <LoopCopyDataInit>

080055ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055f2:	3304      	adds	r3, #4

080055f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055f8:	d3f9      	bcc.n	80055ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055fc:	4c0b      	ldr	r4, [pc, #44]	@ (800562c <LoopFillZerobss+0x26>)
  movs r3, #0
 80055fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005600:	e001      	b.n	8005606 <LoopFillZerobss>

08005602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005604:	3204      	adds	r2, #4

08005606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005608:	d3fb      	bcc.n	8005602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800560a:	f7ff ffd7 	bl	80055bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800560e:	f007 fe6f 	bl	800d2f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005612:	f7fd fcdb 	bl	8002fcc <main>
  bx  lr    
 8005616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005618:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800561c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005620:	200006b8 	.word	0x200006b8
  ldr r2, =_sidata
 8005624:	08013778 	.word	0x08013778
  ldr r2, =_sbss
 8005628:	200006b8 	.word	0x200006b8
  ldr r4, =_ebss
 800562c:	20000b44 	.word	0x20000b44

08005630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005630:	e7fe      	b.n	8005630 <ADC_IRQHandler>

08005632 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005636:	2003      	movs	r0, #3
 8005638:	f000 f90a 	bl	8005850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800563c:	2000      	movs	r0, #0
 800563e:	f000 f805 	bl	800564c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005642:	f7ff fe1f 	bl	8005284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005654:	4b12      	ldr	r3, [pc, #72]	@ (80056a0 <HAL_InitTick+0x54>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4b12      	ldr	r3, [pc, #72]	@ (80056a4 <HAL_InitTick+0x58>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	4619      	mov	r1, r3
 800565e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005662:	fbb3 f3f1 	udiv	r3, r3, r1
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	4618      	mov	r0, r3
 800566c:	f000 f917 	bl	800589e <HAL_SYSTICK_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e00e      	b.n	8005698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b0f      	cmp	r3, #15
 800567e:	d80a      	bhi.n	8005696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005680:	2200      	movs	r2, #0
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	f000 f8ed 	bl	8005866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800568c:	4a06      	ldr	r2, [pc, #24]	@ (80056a8 <HAL_InitTick+0x5c>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e000      	b.n	8005698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000374 	.word	0x20000374
 80056a4:	2000037c 	.word	0x2000037c
 80056a8:	20000378 	.word	0x20000378

080056ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056b0:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <HAL_IncTick+0x20>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	4b06      	ldr	r3, [pc, #24]	@ (80056d0 <HAL_IncTick+0x24>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4413      	add	r3, r2
 80056bc:	4a04      	ldr	r2, [pc, #16]	@ (80056d0 <HAL_IncTick+0x24>)
 80056be:	6013      	str	r3, [r2, #0]
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	2000037c 	.word	0x2000037c
 80056d0:	200007a0 	.word	0x200007a0

080056d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return uwTick;
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <HAL_GetTick+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	200007a0 	.word	0x200007a0

080056ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056fc:	4b0b      	ldr	r3, [pc, #44]	@ (800572c <__NVIC_SetPriorityGrouping+0x40>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005708:	4013      	ands	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005714:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <__NVIC_SetPriorityGrouping+0x44>)
 8005716:	4313      	orrs	r3, r2
 8005718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800571a:	4a04      	ldr	r2, [pc, #16]	@ (800572c <__NVIC_SetPriorityGrouping+0x40>)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	60d3      	str	r3, [r2, #12]
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	e000ed00 	.word	0xe000ed00
 8005730:	05fa0000 	.word	0x05fa0000

08005734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005738:	4b04      	ldr	r3, [pc, #16]	@ (800574c <__NVIC_GetPriorityGrouping+0x18>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	f003 0307 	and.w	r3, r3, #7
}
 8005742:	4618      	mov	r0, r3
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	6039      	str	r1, [r7, #0]
 800575a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800575c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005760:	2b00      	cmp	r3, #0
 8005762:	db0a      	blt.n	800577a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	b2da      	uxtb	r2, r3
 8005768:	490c      	ldr	r1, [pc, #48]	@ (800579c <__NVIC_SetPriority+0x4c>)
 800576a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576e:	0112      	lsls	r2, r2, #4
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	440b      	add	r3, r1
 8005774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005778:	e00a      	b.n	8005790 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	4908      	ldr	r1, [pc, #32]	@ (80057a0 <__NVIC_SetPriority+0x50>)
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	3b04      	subs	r3, #4
 8005788:	0112      	lsls	r2, r2, #4
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	440b      	add	r3, r1
 800578e:	761a      	strb	r2, [r3, #24]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	e000e100 	.word	0xe000e100
 80057a0:	e000ed00 	.word	0xe000ed00

080057a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b089      	sub	sp, #36	@ 0x24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f1c3 0307 	rsb	r3, r3, #7
 80057be:	2b04      	cmp	r3, #4
 80057c0:	bf28      	it	cs
 80057c2:	2304      	movcs	r3, #4
 80057c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3304      	adds	r3, #4
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d902      	bls.n	80057d4 <NVIC_EncodePriority+0x30>
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	3b03      	subs	r3, #3
 80057d2:	e000      	b.n	80057d6 <NVIC_EncodePriority+0x32>
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d8:	f04f 32ff 	mov.w	r2, #4294967295
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43da      	mvns	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	401a      	ands	r2, r3
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057ec:	f04f 31ff 	mov.w	r1, #4294967295
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	fa01 f303 	lsl.w	r3, r1, r3
 80057f6:	43d9      	mvns	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057fc:	4313      	orrs	r3, r2
         );
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3724      	adds	r7, #36	@ 0x24
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3b01      	subs	r3, #1
 8005818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800581c:	d301      	bcc.n	8005822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800581e:	2301      	movs	r3, #1
 8005820:	e00f      	b.n	8005842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005822:	4a0a      	ldr	r2, [pc, #40]	@ (800584c <SysTick_Config+0x40>)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3b01      	subs	r3, #1
 8005828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800582a:	210f      	movs	r1, #15
 800582c:	f04f 30ff 	mov.w	r0, #4294967295
 8005830:	f7ff ff8e 	bl	8005750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005834:	4b05      	ldr	r3, [pc, #20]	@ (800584c <SysTick_Config+0x40>)
 8005836:	2200      	movs	r2, #0
 8005838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800583a:	4b04      	ldr	r3, [pc, #16]	@ (800584c <SysTick_Config+0x40>)
 800583c:	2207      	movs	r2, #7
 800583e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	e000e010 	.word	0xe000e010

08005850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ff47 	bl	80056ec <__NVIC_SetPriorityGrouping>
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005866:	b580      	push	{r7, lr}
 8005868:	b086      	sub	sp, #24
 800586a:	af00      	add	r7, sp, #0
 800586c:	4603      	mov	r3, r0
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005878:	f7ff ff5c 	bl	8005734 <__NVIC_GetPriorityGrouping>
 800587c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	6978      	ldr	r0, [r7, #20]
 8005884:	f7ff ff8e 	bl	80057a4 <NVIC_EncodePriority>
 8005888:	4602      	mov	r2, r0
 800588a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff ff5d 	bl	8005750 <__NVIC_SetPriority>
}
 8005896:	bf00      	nop
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff ffb0 	bl	800580c <SysTick_Config>
 80058ac:	4603      	mov	r3, r0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b089      	sub	sp, #36	@ 0x24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
 80058d6:	e175      	b.n	8005bc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80058d8:	2201      	movs	r2, #1
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4013      	ands	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	f040 8164 	bne.w	8005bbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d005      	beq.n	800590e <HAL_GPIO_Init+0x56>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d130      	bne.n	8005970 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	2203      	movs	r2, #3
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	43db      	mvns	r3, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4013      	ands	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005944:	2201      	movs	r2, #1
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	4013      	ands	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	f003 0201 	and.w	r2, r3, #1
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b03      	cmp	r3, #3
 800597a:	d017      	beq.n	80059ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	2203      	movs	r2, #3
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	43db      	mvns	r3, r3
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4013      	ands	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d123      	bne.n	8005a00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	08da      	lsrs	r2, r3, #3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3208      	adds	r2, #8
 80059c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	220f      	movs	r2, #15
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	08da      	lsrs	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3208      	adds	r2, #8
 80059fa:	69b9      	ldr	r1, [r7, #24]
 80059fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 0203 	and.w	r2, r3, #3
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80be 	beq.w	8005bbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a42:	4b66      	ldr	r3, [pc, #408]	@ (8005bdc <HAL_GPIO_Init+0x324>)
 8005a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a46:	4a65      	ldr	r2, [pc, #404]	@ (8005bdc <HAL_GPIO_Init+0x324>)
 8005a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a4e:	4b63      	ldr	r3, [pc, #396]	@ (8005bdc <HAL_GPIO_Init+0x324>)
 8005a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a5a:	4a61      	ldr	r2, [pc, #388]	@ (8005be0 <HAL_GPIO_Init+0x328>)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	089b      	lsrs	r3, r3, #2
 8005a60:	3302      	adds	r3, #2
 8005a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	220f      	movs	r2, #15
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a58      	ldr	r2, [pc, #352]	@ (8005be4 <HAL_GPIO_Init+0x32c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d037      	beq.n	8005af6 <HAL_GPIO_Init+0x23e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a57      	ldr	r2, [pc, #348]	@ (8005be8 <HAL_GPIO_Init+0x330>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d031      	beq.n	8005af2 <HAL_GPIO_Init+0x23a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a56      	ldr	r2, [pc, #344]	@ (8005bec <HAL_GPIO_Init+0x334>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d02b      	beq.n	8005aee <HAL_GPIO_Init+0x236>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a55      	ldr	r2, [pc, #340]	@ (8005bf0 <HAL_GPIO_Init+0x338>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d025      	beq.n	8005aea <HAL_GPIO_Init+0x232>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a54      	ldr	r2, [pc, #336]	@ (8005bf4 <HAL_GPIO_Init+0x33c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01f      	beq.n	8005ae6 <HAL_GPIO_Init+0x22e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a53      	ldr	r2, [pc, #332]	@ (8005bf8 <HAL_GPIO_Init+0x340>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d019      	beq.n	8005ae2 <HAL_GPIO_Init+0x22a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a52      	ldr	r2, [pc, #328]	@ (8005bfc <HAL_GPIO_Init+0x344>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <HAL_GPIO_Init+0x226>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a51      	ldr	r2, [pc, #324]	@ (8005c00 <HAL_GPIO_Init+0x348>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00d      	beq.n	8005ada <HAL_GPIO_Init+0x222>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a50      	ldr	r2, [pc, #320]	@ (8005c04 <HAL_GPIO_Init+0x34c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d007      	beq.n	8005ad6 <HAL_GPIO_Init+0x21e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a4f      	ldr	r2, [pc, #316]	@ (8005c08 <HAL_GPIO_Init+0x350>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d101      	bne.n	8005ad2 <HAL_GPIO_Init+0x21a>
 8005ace:	2309      	movs	r3, #9
 8005ad0:	e012      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005ad2:	230a      	movs	r3, #10
 8005ad4:	e010      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	e00e      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005ada:	2307      	movs	r3, #7
 8005adc:	e00c      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005ade:	2306      	movs	r3, #6
 8005ae0:	e00a      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005ae2:	2305      	movs	r3, #5
 8005ae4:	e008      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	e006      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005aea:	2303      	movs	r3, #3
 8005aec:	e004      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e002      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <HAL_GPIO_Init+0x240>
 8005af6:	2300      	movs	r3, #0
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	f002 0203 	and.w	r2, r2, #3
 8005afe:	0092      	lsls	r2, r2, #2
 8005b00:	4093      	lsls	r3, r2
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b08:	4935      	ldr	r1, [pc, #212]	@ (8005be0 <HAL_GPIO_Init+0x328>)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	089b      	lsrs	r3, r3, #2
 8005b0e:	3302      	adds	r3, #2
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b16:	4b3d      	ldr	r3, [pc, #244]	@ (8005c0c <HAL_GPIO_Init+0x354>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4013      	ands	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b3a:	4a34      	ldr	r2, [pc, #208]	@ (8005c0c <HAL_GPIO_Init+0x354>)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b40:	4b32      	ldr	r3, [pc, #200]	@ (8005c0c <HAL_GPIO_Init+0x354>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b64:	4a29      	ldr	r2, [pc, #164]	@ (8005c0c <HAL_GPIO_Init+0x354>)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b6a:	4b28      	ldr	r3, [pc, #160]	@ (8005c0c <HAL_GPIO_Init+0x354>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	43db      	mvns	r3, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4013      	ands	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c0c <HAL_GPIO_Init+0x354>)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b94:	4b1d      	ldr	r3, [pc, #116]	@ (8005c0c <HAL_GPIO_Init+0x354>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bb8:	4a14      	ldr	r2, [pc, #80]	@ (8005c0c <HAL_GPIO_Init+0x354>)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	f67f ae86 	bls.w	80058d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	3724      	adds	r7, #36	@ 0x24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40013800 	.word	0x40013800
 8005be4:	40020000 	.word	0x40020000
 8005be8:	40020400 	.word	0x40020400
 8005bec:	40020800 	.word	0x40020800
 8005bf0:	40020c00 	.word	0x40020c00
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	40021400 	.word	0x40021400
 8005bfc:	40021800 	.word	0x40021800
 8005c00:	40021c00 	.word	0x40021c00
 8005c04:	40022000 	.word	0x40022000
 8005c08:	40022400 	.word	0x40022400
 8005c0c:	40013c00 	.word	0x40013c00

08005c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	807b      	strh	r3, [r7, #2]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c20:	787b      	ldrb	r3, [r7, #1]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c26:	887a      	ldrh	r2, [r7, #2]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c2c:	e003      	b.n	8005c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c2e:	887b      	ldrh	r3, [r7, #2]
 8005c30:	041a      	lsls	r2, r3, #16
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	619a      	str	r2, [r3, #24]
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e291      	b.n	800617e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8087 	beq.w	8005d76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c68:	4b96      	ldr	r3, [pc, #600]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 030c 	and.w	r3, r3, #12
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d00c      	beq.n	8005c8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c74:	4b93      	ldr	r3, [pc, #588]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d112      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x62>
 8005c80:	4b90      	ldr	r3, [pc, #576]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c8c:	d10b      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c8e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d06c      	beq.n	8005d74 <HAL_RCC_OscConfig+0x130>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d168      	bne.n	8005d74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e26b      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cae:	d106      	bne.n	8005cbe <HAL_RCC_OscConfig+0x7a>
 8005cb0:	4b84      	ldr	r3, [pc, #528]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a83      	ldr	r2, [pc, #524]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e02e      	b.n	8005d1c <HAL_RCC_OscConfig+0xd8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x9c>
 8005cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a7e      	ldr	r2, [pc, #504]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a7b      	ldr	r2, [pc, #492]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005cd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	e01d      	b.n	8005d1c <HAL_RCC_OscConfig+0xd8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCC_OscConfig+0xc0>
 8005cea:	4b76      	ldr	r3, [pc, #472]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a75      	ldr	r2, [pc, #468]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	4b73      	ldr	r3, [pc, #460]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a72      	ldr	r2, [pc, #456]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e00b      	b.n	8005d1c <HAL_RCC_OscConfig+0xd8>
 8005d04:	4b6f      	ldr	r3, [pc, #444]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6e      	ldr	r2, [pc, #440]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	4b6c      	ldr	r3, [pc, #432]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6b      	ldr	r2, [pc, #428]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d013      	beq.n	8005d4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7ff fcd6 	bl	80056d4 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d2c:	f7ff fcd2 	bl	80056d4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	@ 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e21f      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	4b61      	ldr	r3, [pc, #388]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0xe8>
 8005d4a:	e014      	b.n	8005d76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7ff fcc2 	bl	80056d4 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d54:	f7ff fcbe 	bl	80056d4 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	@ 0x64
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e20b      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d66:	4b57      	ldr	r3, [pc, #348]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <HAL_RCC_OscConfig+0x110>
 8005d72:	e000      	b.n	8005d76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d069      	beq.n	8005e56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d82:	4b50      	ldr	r3, [pc, #320]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d11c      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x190>
 8005d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d116      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da6:	4b47      	ldr	r3, [pc, #284]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_RCC_OscConfig+0x17a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d001      	beq.n	8005dbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e1df      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbe:	4b41      	ldr	r3, [pc, #260]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	493d      	ldr	r1, [pc, #244]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd2:	e040      	b.n	8005e56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d023      	beq.n	8005e24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ddc:	4b39      	ldr	r3, [pc, #228]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a38      	ldr	r2, [pc, #224]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7ff fc74 	bl	80056d4 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df0:	f7ff fc70 	bl	80056d4 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e1bd      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e02:	4b30      	ldr	r3, [pc, #192]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4929      	ldr	r1, [pc, #164]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	600b      	str	r3, [r1, #0]
 8005e22:	e018      	b.n	8005e56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e24:	4b27      	ldr	r3, [pc, #156]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a26      	ldr	r2, [pc, #152]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005e2a:	f023 0301 	bic.w	r3, r3, #1
 8005e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7ff fc50 	bl	80056d4 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e38:	f7ff fc4c 	bl	80056d4 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e199      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d038      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d019      	beq.n	8005e9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e6a:	4b16      	ldr	r3, [pc, #88]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e6e:	4a15      	ldr	r2, [pc, #84]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e76:	f7ff fc2d 	bl	80056d4 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e7e:	f7ff fc29 	bl	80056d4 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e176      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e90:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <HAL_RCC_OscConfig+0x23a>
 8005e9c:	e01a      	b.n	8005ed4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e9e:	4b09      	ldr	r3, [pc, #36]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ea2:	4a08      	ldr	r2, [pc, #32]	@ (8005ec4 <HAL_RCC_OscConfig+0x280>)
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eaa:	f7ff fc13 	bl	80056d4 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb0:	e00a      	b.n	8005ec8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb2:	f7ff fc0f 	bl	80056d4 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d903      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e15c      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
 8005ec4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec8:	4b91      	ldr	r3, [pc, #580]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1ee      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80a4 	beq.w	800602a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee2:	4b8b      	ldr	r3, [pc, #556]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10d      	bne.n	8005f0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eee:	4b88      	ldr	r3, [pc, #544]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	4a87      	ldr	r2, [pc, #540]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005efa:	4b85      	ldr	r3, [pc, #532]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f02:	60bb      	str	r3, [r7, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f06:	2301      	movs	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f0a:	4b82      	ldr	r3, [pc, #520]	@ (8006114 <HAL_RCC_OscConfig+0x4d0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d118      	bne.n	8005f48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f16:	4b7f      	ldr	r3, [pc, #508]	@ (8006114 <HAL_RCC_OscConfig+0x4d0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8006114 <HAL_RCC_OscConfig+0x4d0>)
 8005f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f22:	f7ff fbd7 	bl	80056d4 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2a:	f7ff fbd3 	bl	80056d4 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b64      	cmp	r3, #100	@ 0x64
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e120      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f3c:	4b75      	ldr	r3, [pc, #468]	@ (8006114 <HAL_RCC_OscConfig+0x4d0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0f0      	beq.n	8005f2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d106      	bne.n	8005f5e <HAL_RCC_OscConfig+0x31a>
 8005f50:	4b6f      	ldr	r3, [pc, #444]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f54:	4a6e      	ldr	r2, [pc, #440]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f56:	f043 0301 	orr.w	r3, r3, #1
 8005f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f5c:	e02d      	b.n	8005fba <HAL_RCC_OscConfig+0x376>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10c      	bne.n	8005f80 <HAL_RCC_OscConfig+0x33c>
 8005f66:	4b6a      	ldr	r3, [pc, #424]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6a:	4a69      	ldr	r2, [pc, #420]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f72:	4b67      	ldr	r3, [pc, #412]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f76:	4a66      	ldr	r2, [pc, #408]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f78:	f023 0304 	bic.w	r3, r3, #4
 8005f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f7e:	e01c      	b.n	8005fba <HAL_RCC_OscConfig+0x376>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	d10c      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x35e>
 8005f88:	4b61      	ldr	r3, [pc, #388]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8c:	4a60      	ldr	r2, [pc, #384]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f8e:	f043 0304 	orr.w	r3, r3, #4
 8005f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f94:	4b5e      	ldr	r3, [pc, #376]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f98:	4a5d      	ldr	r2, [pc, #372]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa0:	e00b      	b.n	8005fba <HAL_RCC_OscConfig+0x376>
 8005fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa6:	4a5a      	ldr	r2, [pc, #360]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005fa8:	f023 0301 	bic.w	r3, r3, #1
 8005fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fae:	4b58      	ldr	r3, [pc, #352]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	4a57      	ldr	r2, [pc, #348]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005fb4:	f023 0304 	bic.w	r3, r3, #4
 8005fb8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d015      	beq.n	8005fee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc2:	f7ff fb87 	bl	80056d4 <HAL_GetTick>
 8005fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc8:	e00a      	b.n	8005fe0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fca:	f7ff fb83 	bl	80056d4 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e0ce      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0ee      	beq.n	8005fca <HAL_RCC_OscConfig+0x386>
 8005fec:	e014      	b.n	8006018 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fee:	f7ff fb71 	bl	80056d4 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff4:	e00a      	b.n	800600c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff6:	f7ff fb6d 	bl	80056d4 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006004:	4293      	cmp	r3, r2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e0b8      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600c:	4b40      	ldr	r3, [pc, #256]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 800600e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1ee      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d105      	bne.n	800602a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800601e:	4b3c      	ldr	r3, [pc, #240]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	4a3b      	ldr	r2, [pc, #236]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8006024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006028:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80a4 	beq.w	800617c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006034:	4b36      	ldr	r3, [pc, #216]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 030c 	and.w	r3, r3, #12
 800603c:	2b08      	cmp	r3, #8
 800603e:	d06b      	beq.n	8006118 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d149      	bne.n	80060dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006048:	4b31      	ldr	r3, [pc, #196]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a30      	ldr	r2, [pc, #192]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 800604e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7ff fb3e 	bl	80056d4 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605c:	f7ff fb3a 	bl	80056d4 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e087      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606e:	4b28      	ldr	r3, [pc, #160]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69da      	ldr	r2, [r3, #28]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006088:	019b      	lsls	r3, r3, #6
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	3b01      	subs	r3, #1
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609c:	061b      	lsls	r3, r3, #24
 800609e:	4313      	orrs	r3, r2
 80060a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 80060a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a8:	4b19      	ldr	r3, [pc, #100]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a18      	ldr	r2, [pc, #96]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 80060ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7ff fb0e 	bl	80056d4 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7ff fb0a 	bl	80056d4 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e057      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ce:	4b10      	ldr	r3, [pc, #64]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x478>
 80060da:	e04f      	b.n	800617c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 80060e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7ff faf4 	bl	80056d4 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f0:	f7ff faf0 	bl	80056d4 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e03d      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006102:	4b03      	ldr	r3, [pc, #12]	@ (8006110 <HAL_RCC_OscConfig+0x4cc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x4ac>
 800610e:	e035      	b.n	800617c <HAL_RCC_OscConfig+0x538>
 8006110:	40023800 	.word	0x40023800
 8006114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006118:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <HAL_RCC_OscConfig+0x544>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d028      	beq.n	8006178 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006130:	429a      	cmp	r2, r3
 8006132:	d121      	bne.n	8006178 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d11a      	bne.n	8006178 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006148:	4013      	ands	r3, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800614e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006150:	4293      	cmp	r3, r2
 8006152:	d111      	bne.n	8006178 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	3b01      	subs	r3, #1
 8006162:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006164:	429a      	cmp	r2, r3
 8006166:	d107      	bne.n	8006178 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006172:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40023800 	.word	0x40023800

0800618c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0d0      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006350 <HAL_RCC_ClockConfig+0x1c4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d910      	bls.n	80061d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b2:	4b67      	ldr	r3, [pc, #412]	@ (8006350 <HAL_RCC_ClockConfig+0x1c4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f023 020f 	bic.w	r2, r3, #15
 80061ba:	4965      	ldr	r1, [pc, #404]	@ (8006350 <HAL_RCC_ClockConfig+0x1c4>)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	4313      	orrs	r3, r2
 80061c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c2:	4b63      	ldr	r3, [pc, #396]	@ (8006350 <HAL_RCC_ClockConfig+0x1c4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d001      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0b8      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d020      	beq.n	8006222 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061ec:	4b59      	ldr	r3, [pc, #356]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4a58      	ldr	r2, [pc, #352]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 80061f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006204:	4b53      	ldr	r3, [pc, #332]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	4a52      	ldr	r2, [pc, #328]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 800620a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800620e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006210:	4b50      	ldr	r3, [pc, #320]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	494d      	ldr	r1, [pc, #308]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 800621e:	4313      	orrs	r3, r2
 8006220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d040      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d107      	bne.n	8006246 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006236:	4b47      	ldr	r3, [pc, #284]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d115      	bne.n	800626e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e07f      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d107      	bne.n	800625e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624e:	4b41      	ldr	r3, [pc, #260]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e073      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800625e:	4b3d      	ldr	r3, [pc, #244]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e06b      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800626e:	4b39      	ldr	r3, [pc, #228]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f023 0203 	bic.w	r2, r3, #3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4936      	ldr	r1, [pc, #216]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 800627c:	4313      	orrs	r3, r2
 800627e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006280:	f7ff fa28 	bl	80056d4 <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006286:	e00a      	b.n	800629e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006288:	f7ff fa24 	bl	80056d4 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006296:	4293      	cmp	r3, r2
 8006298:	d901      	bls.n	800629e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e053      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629e:	4b2d      	ldr	r3, [pc, #180]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 020c 	and.w	r2, r3, #12
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d1eb      	bne.n	8006288 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062b0:	4b27      	ldr	r3, [pc, #156]	@ (8006350 <HAL_RCC_ClockConfig+0x1c4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d210      	bcs.n	80062e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062be:	4b24      	ldr	r3, [pc, #144]	@ (8006350 <HAL_RCC_ClockConfig+0x1c4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f023 020f 	bic.w	r2, r3, #15
 80062c6:	4922      	ldr	r1, [pc, #136]	@ (8006350 <HAL_RCC_ClockConfig+0x1c4>)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ce:	4b20      	ldr	r3, [pc, #128]	@ (8006350 <HAL_RCC_ClockConfig+0x1c4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d001      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e032      	b.n	8006346 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062ec:	4b19      	ldr	r3, [pc, #100]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4916      	ldr	r1, [pc, #88]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d009      	beq.n	800631e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800630a:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	490e      	ldr	r1, [pc, #56]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 800631a:	4313      	orrs	r3, r2
 800631c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800631e:	f000 f821 	bl	8006364 <HAL_RCC_GetSysClockFreq>
 8006322:	4602      	mov	r2, r0
 8006324:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <HAL_RCC_ClockConfig+0x1c8>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	490a      	ldr	r1, [pc, #40]	@ (8006358 <HAL_RCC_ClockConfig+0x1cc>)
 8006330:	5ccb      	ldrb	r3, [r1, r3]
 8006332:	fa22 f303 	lsr.w	r3, r2, r3
 8006336:	4a09      	ldr	r2, [pc, #36]	@ (800635c <HAL_RCC_ClockConfig+0x1d0>)
 8006338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800633a:	4b09      	ldr	r3, [pc, #36]	@ (8006360 <HAL_RCC_ClockConfig+0x1d4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff f984 	bl	800564c <HAL_InitTick>

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40023c00 	.word	0x40023c00
 8006354:	40023800 	.word	0x40023800
 8006358:	08011418 	.word	0x08011418
 800635c:	20000374 	.word	0x20000374
 8006360:	20000378 	.word	0x20000378

08006364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006368:	b090      	sub	sp, #64	@ 0x40
 800636a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006370:	2300      	movs	r3, #0
 8006372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006374:	2300      	movs	r3, #0
 8006376:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800637c:	4b59      	ldr	r3, [pc, #356]	@ (80064e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 030c 	and.w	r3, r3, #12
 8006384:	2b08      	cmp	r3, #8
 8006386:	d00d      	beq.n	80063a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006388:	2b08      	cmp	r3, #8
 800638a:	f200 80a1 	bhi.w	80064d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0x34>
 8006392:	2b04      	cmp	r3, #4
 8006394:	d003      	beq.n	800639e <HAL_RCC_GetSysClockFreq+0x3a>
 8006396:	e09b      	b.n	80064d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006398:	4b53      	ldr	r3, [pc, #332]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800639a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800639c:	e09b      	b.n	80064d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800639e:	4b53      	ldr	r3, [pc, #332]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x188>)
 80063a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063a2:	e098      	b.n	80064d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063a4:	4b4f      	ldr	r3, [pc, #316]	@ (80064e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80063ae:	4b4d      	ldr	r3, [pc, #308]	@ (80064e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d028      	beq.n	800640c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ba:	4b4a      	ldr	r3, [pc, #296]	@ (80064e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	099b      	lsrs	r3, r3, #6
 80063c0:	2200      	movs	r2, #0
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063cc:	2100      	movs	r1, #0
 80063ce:	4b47      	ldr	r3, [pc, #284]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x188>)
 80063d0:	fb03 f201 	mul.w	r2, r3, r1
 80063d4:	2300      	movs	r3, #0
 80063d6:	fb00 f303 	mul.w	r3, r0, r3
 80063da:	4413      	add	r3, r2
 80063dc:	4a43      	ldr	r2, [pc, #268]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x188>)
 80063de:	fba0 1202 	umull	r1, r2, r0, r2
 80063e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063e4:	460a      	mov	r2, r1
 80063e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80063e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ea:	4413      	add	r3, r2
 80063ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f0:	2200      	movs	r2, #0
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	61fa      	str	r2, [r7, #28]
 80063f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80063fe:	f7fa fcb3 	bl	8000d68 <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4613      	mov	r3, r2
 8006408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800640a:	e053      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800640c:	4b35      	ldr	r3, [pc, #212]	@ (80064e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	099b      	lsrs	r3, r3, #6
 8006412:	2200      	movs	r2, #0
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	617a      	str	r2, [r7, #20]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800641e:	f04f 0b00 	mov.w	fp, #0
 8006422:	4652      	mov	r2, sl
 8006424:	465b      	mov	r3, fp
 8006426:	f04f 0000 	mov.w	r0, #0
 800642a:	f04f 0100 	mov.w	r1, #0
 800642e:	0159      	lsls	r1, r3, #5
 8006430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006434:	0150      	lsls	r0, r2, #5
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	ebb2 080a 	subs.w	r8, r2, sl
 800643e:	eb63 090b 	sbc.w	r9, r3, fp
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	f04f 0300 	mov.w	r3, #0
 800644a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800644e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006452:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006456:	ebb2 0408 	subs.w	r4, r2, r8
 800645a:	eb63 0509 	sbc.w	r5, r3, r9
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	00eb      	lsls	r3, r5, #3
 8006468:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800646c:	00e2      	lsls	r2, r4, #3
 800646e:	4614      	mov	r4, r2
 8006470:	461d      	mov	r5, r3
 8006472:	eb14 030a 	adds.w	r3, r4, sl
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	eb45 030b 	adc.w	r3, r5, fp
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800648a:	4629      	mov	r1, r5
 800648c:	028b      	lsls	r3, r1, #10
 800648e:	4621      	mov	r1, r4
 8006490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006494:	4621      	mov	r1, r4
 8006496:	028a      	lsls	r2, r1, #10
 8006498:	4610      	mov	r0, r2
 800649a:	4619      	mov	r1, r3
 800649c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800649e:	2200      	movs	r2, #0
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	60fa      	str	r2, [r7, #12]
 80064a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a8:	f7fa fc5e 	bl	8000d68 <__aeabi_uldivmod>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4613      	mov	r3, r2
 80064b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80064b4:	4b0b      	ldr	r3, [pc, #44]	@ (80064e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	3301      	adds	r3, #1
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80064c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80064c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064ce:	e002      	b.n	80064d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064d0:	4b05      	ldr	r3, [pc, #20]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80064d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3740      	adds	r7, #64	@ 0x40
 80064dc:	46bd      	mov	sp, r7
 80064de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	00f42400 	.word	0x00f42400
 80064ec:	017d7840 	.word	0x017d7840

080064f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f4:	4b03      	ldr	r3, [pc, #12]	@ (8006504 <HAL_RCC_GetHCLKFreq+0x14>)
 80064f6:	681b      	ldr	r3, [r3, #0]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000374 	.word	0x20000374

08006508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800650c:	f7ff fff0 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006510:	4602      	mov	r2, r0
 8006512:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	0a9b      	lsrs	r3, r3, #10
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	4903      	ldr	r1, [pc, #12]	@ (800652c <HAL_RCC_GetPCLK1Freq+0x24>)
 800651e:	5ccb      	ldrb	r3, [r1, r3]
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40023800 	.word	0x40023800
 800652c:	08011428 	.word	0x08011428

08006530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006534:	f7ff ffdc 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006538:	4602      	mov	r2, r0
 800653a:	4b05      	ldr	r3, [pc, #20]	@ (8006550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	0b5b      	lsrs	r3, r3, #13
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	4903      	ldr	r1, [pc, #12]	@ (8006554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006546:	5ccb      	ldrb	r3, [r1, r3]
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800654c:	4618      	mov	r0, r3
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40023800 	.word	0x40023800
 8006554:	08011428 	.word	0x08011428

08006558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d012      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006580:	4b69      	ldr	r3, [pc, #420]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	4a68      	ldr	r2, [pc, #416]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006586:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800658a:	6093      	str	r3, [r2, #8]
 800658c:	4b66      	ldr	r3, [pc, #408]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006594:	4964      	ldr	r1, [pc, #400]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80065a2:	2301      	movs	r3, #1
 80065a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d017      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c0:	4959      	ldr	r1, [pc, #356]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065d0:	d101      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80065d2:	2301      	movs	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80065de:	2301      	movs	r3, #1
 80065e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d017      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065ee:	4b4e      	ldr	r3, [pc, #312]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fc:	494a      	ldr	r1, [pc, #296]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800660c:	d101      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800660e:	2301      	movs	r3, #1
 8006610:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800661a:	2301      	movs	r3, #1
 800661c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800662a:	2301      	movs	r3, #1
 800662c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 808b 	beq.w	8006752 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800663c:	4b3a      	ldr	r3, [pc, #232]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006640:	4a39      	ldr	r2, [pc, #228]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006646:	6413      	str	r3, [r2, #64]	@ 0x40
 8006648:	4b37      	ldr	r3, [pc, #220]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006654:	4b35      	ldr	r3, [pc, #212]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a34      	ldr	r2, [pc, #208]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800665a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800665e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006660:	f7ff f838 	bl	80056d4 <HAL_GetTick>
 8006664:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006666:	e008      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006668:	f7ff f834 	bl	80056d4 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b64      	cmp	r3, #100	@ 0x64
 8006674:	d901      	bls.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e357      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800667a:	4b2c      	ldr	r3, [pc, #176]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006686:	4b28      	ldr	r3, [pc, #160]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800668e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d035      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d02e      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066a4:	4b20      	ldr	r3, [pc, #128]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066be:	4a1a      	ldr	r2, [pc, #104]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80066c6:	4a18      	ldr	r2, [pc, #96]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066cc:	4b16      	ldr	r3, [pc, #88]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d114      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fe fffc 	bl	80056d4 <HAL_GetTick>
 80066dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066de:	e00a      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e0:	f7fe fff8 	bl	80056d4 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e319      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0ee      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800670a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800670e:	d111      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006710:	4b05      	ldr	r3, [pc, #20]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800671c:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800671e:	400b      	ands	r3, r1
 8006720:	4901      	ldr	r1, [pc, #4]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006722:	4313      	orrs	r3, r2
 8006724:	608b      	str	r3, [r1, #8]
 8006726:	e00b      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006728:	40023800 	.word	0x40023800
 800672c:	40007000 	.word	0x40007000
 8006730:	0ffffcff 	.word	0x0ffffcff
 8006734:	4baa      	ldr	r3, [pc, #680]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4aa9      	ldr	r2, [pc, #676]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800673a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800673e:	6093      	str	r3, [r2, #8]
 8006740:	4ba7      	ldr	r3, [pc, #668]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006742:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800674c:	49a4      	ldr	r1, [pc, #656]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800674e:	4313      	orrs	r3, r2
 8006750:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b00      	cmp	r3, #0
 800675c:	d010      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800675e:	4ba0      	ldr	r3, [pc, #640]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006764:	4a9e      	ldr	r2, [pc, #632]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006766:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800676a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800676e:	4b9c      	ldr	r3, [pc, #624]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006770:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006778:	4999      	ldr	r1, [pc, #612]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800678c:	4b94      	ldr	r3, [pc, #592]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006792:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800679a:	4991      	ldr	r1, [pc, #580]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067ae:	4b8c      	ldr	r3, [pc, #560]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067bc:	4988      	ldr	r1, [pc, #544]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067d0:	4b83      	ldr	r3, [pc, #524]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067de:	4980      	ldr	r1, [pc, #512]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067f2:	4b7b      	ldr	r3, [pc, #492]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006800:	4977      	ldr	r1, [pc, #476]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006814:	4b72      	ldr	r3, [pc, #456]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681a:	f023 0203 	bic.w	r2, r3, #3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	496f      	ldr	r1, [pc, #444]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006836:	4b6a      	ldr	r3, [pc, #424]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683c:	f023 020c 	bic.w	r2, r3, #12
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006844:	4966      	ldr	r1, [pc, #408]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006858:	4b61      	ldr	r3, [pc, #388]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800685e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006866:	495e      	ldr	r1, [pc, #376]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800687a:	4b59      	ldr	r3, [pc, #356]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800687c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006880:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006888:	4955      	ldr	r1, [pc, #340]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800689c:	4b50      	ldr	r3, [pc, #320]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068aa:	494d      	ldr	r1, [pc, #308]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80068be:	4b48      	ldr	r3, [pc, #288]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068cc:	4944      	ldr	r1, [pc, #272]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80068e0:	4b3f      	ldr	r3, [pc, #252]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ee:	493c      	ldr	r1, [pc, #240]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006902:	4b37      	ldr	r3, [pc, #220]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006908:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006910:	4933      	ldr	r1, [pc, #204]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006924:	4b2e      	ldr	r3, [pc, #184]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006932:	492b      	ldr	r1, [pc, #172]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d011      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006946:	4b26      	ldr	r3, [pc, #152]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006954:	4922      	ldr	r1, [pc, #136]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006964:	d101      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006966:	2301      	movs	r3, #1
 8006968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006976:	2301      	movs	r3, #1
 8006978:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006986:	4b16      	ldr	r3, [pc, #88]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006994:	4912      	ldr	r1, [pc, #72]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006996:	4313      	orrs	r3, r2
 8006998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069a8:	4b0d      	ldr	r3, [pc, #52]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069b8:	4909      	ldr	r1, [pc, #36]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d006      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 80d9 	beq.w	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069d4:	4b02      	ldr	r3, [pc, #8]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a01      	ldr	r2, [pc, #4]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069de:	e001      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80069e0:	40023800 	.word	0x40023800
 80069e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e6:	f7fe fe75 	bl	80056d4 <HAL_GetTick>
 80069ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069ec:	e008      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069ee:	f7fe fe71 	bl	80056d4 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b64      	cmp	r3, #100	@ 0x64
 80069fa:	d901      	bls.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e194      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a00:	4b6c      	ldr	r3, [pc, #432]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f0      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d021      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d11d      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a20:	4b64      	ldr	r3, [pc, #400]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a2e:	4b61      	ldr	r3, [pc, #388]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a34:	0e1b      	lsrs	r3, r3, #24
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	019a      	lsls	r2, r3, #6
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	041b      	lsls	r3, r3, #16
 8006a46:	431a      	orrs	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	071b      	lsls	r3, r3, #28
 8006a54:	4957      	ldr	r1, [pc, #348]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a70:	d00a      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d02e      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a86:	d129      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a88:	4b4a      	ldr	r3, [pc, #296]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a8e:	0c1b      	lsrs	r3, r3, #16
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a96:	4b47      	ldr	r3, [pc, #284]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a9c:	0f1b      	lsrs	r3, r3, #28
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	019a      	lsls	r2, r3, #6
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	061b      	lsls	r3, r3, #24
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	071b      	lsls	r3, r3, #28
 8006abc:	493d      	ldr	r1, [pc, #244]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aca:	f023 021f 	bic.w	r2, r3, #31
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	4937      	ldr	r1, [pc, #220]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01d      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ae8:	4b32      	ldr	r3, [pc, #200]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aee:	0e1b      	lsrs	r3, r3, #24
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006af6:	4b2f      	ldr	r3, [pc, #188]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006afc:	0f1b      	lsrs	r3, r3, #28
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	019a      	lsls	r2, r3, #6
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	431a      	orrs	r2, r3
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	061b      	lsls	r3, r3, #24
 8006b16:	431a      	orrs	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	071b      	lsls	r3, r3, #28
 8006b1c:	4925      	ldr	r1, [pc, #148]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d011      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	019a      	lsls	r2, r3, #6
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	041b      	lsls	r3, r3, #16
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	061b      	lsls	r3, r3, #24
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	071b      	lsls	r3, r3, #28
 8006b4c:	4919      	ldr	r1, [pc, #100]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b54:	4b17      	ldr	r3, [pc, #92]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a16      	ldr	r2, [pc, #88]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b60:	f7fe fdb8 	bl	80056d4 <HAL_GetTick>
 8006b64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b66:	e008      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b68:	f7fe fdb4 	bl	80056d4 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b64      	cmp	r3, #100	@ 0x64
 8006b74:	d901      	bls.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e0d7      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f0      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	f040 80cd 	bne.w	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b8e:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a08      	ldr	r2, [pc, #32]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b9a:	f7fe fd9b 	bl	80056d4 <HAL_GetTick>
 8006b9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ba0:	e00a      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ba2:	f7fe fd97 	bl	80056d4 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b64      	cmp	r3, #100	@ 0x64
 8006bae:	d903      	bls.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0ba      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006bb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bb8:	4b5e      	ldr	r3, [pc, #376]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc4:	d0ed      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d02e      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d12a      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006bee:	4b51      	ldr	r3, [pc, #324]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c02:	0f1b      	lsrs	r3, r3, #28
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	019a      	lsls	r2, r3, #6
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	061b      	lsls	r3, r3, #24
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	071b      	lsls	r3, r3, #28
 8006c22:	4944      	ldr	r1, [pc, #272]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c2a:	4b42      	ldr	r3, [pc, #264]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c30:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	493d      	ldr	r1, [pc, #244]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d022      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c58:	d11d      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c5a:	4b36      	ldr	r3, [pc, #216]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c60:	0e1b      	lsrs	r3, r3, #24
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c68:	4b32      	ldr	r3, [pc, #200]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6e:	0f1b      	lsrs	r3, r3, #28
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	019a      	lsls	r2, r3, #6
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	431a      	orrs	r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	061b      	lsls	r3, r3, #24
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	071b      	lsls	r3, r3, #28
 8006c8e:	4929      	ldr	r1, [pc, #164]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d028      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ca2:	4b24      	ldr	r3, [pc, #144]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca8:	0e1b      	lsrs	r3, r3, #24
 8006caa:	f003 030f 	and.w	r3, r3, #15
 8006cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006cb0:	4b20      	ldr	r3, [pc, #128]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb6:	0c1b      	lsrs	r3, r3, #16
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	019a      	lsls	r2, r3, #6
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	061b      	lsls	r3, r3, #24
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	071b      	lsls	r3, r3, #28
 8006cd6:	4917      	ldr	r1, [pc, #92]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006cde:	4b15      	ldr	r3, [pc, #84]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ce4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	4911      	ldr	r1, [pc, #68]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d00:	f7fe fce8 	bl	80056d4 <HAL_GetTick>
 8006d04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d06:	e008      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d08:	f7fe fce4 	bl	80056d4 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b64      	cmp	r3, #100	@ 0x64
 8006d14:	d901      	bls.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e007      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d1a:	4b06      	ldr	r3, [pc, #24]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d26:	d1ef      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40023800 	.word	0x40023800

08006d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e040      	b.n	8006dcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fe fab6 	bl	80052cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2224      	movs	r2, #36	@ 0x24
 8006d64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0201 	bic.w	r2, r2, #1
 8006d74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f974 	bl	8007064 <UART_SetConfig>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e022      	b.n	8006dcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fbcc 	bl	800752c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fc53 	bl	8007670 <UART_CheckIdleState>
 8006dca:	4603      	mov	r3, r0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08a      	sub	sp, #40	@ 0x28
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d171      	bne.n	8006ed0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_UART_Transmit+0x24>
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e06a      	b.n	8006ed2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2221      	movs	r2, #33	@ 0x21
 8006e08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e0a:	f7fe fc63 	bl	80056d4 <HAL_GetTick>
 8006e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	88fa      	ldrh	r2, [r7, #6]
 8006e14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e28:	d108      	bne.n	8006e3c <HAL_UART_Transmit+0x68>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d104      	bne.n	8006e3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	e003      	b.n	8006e44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e44:	e02c      	b.n	8006ea0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2180      	movs	r1, #128	@ 0x80
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fc44 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e038      	b.n	8006ed2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10b      	bne.n	8006e7e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	3302      	adds	r3, #2
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	e007      	b.n	8006e8e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1cc      	bne.n	8006e46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2140      	movs	r1, #64	@ 0x40
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 fc11 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e005      	b.n	8006ed2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e000      	b.n	8006ed2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
  }
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3720      	adds	r7, #32
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b08a      	sub	sp, #40	@ 0x28
 8006ede:	af02      	add	r7, sp, #8
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	f040 80b1 	bne.w	8007058 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_UART_Receive+0x28>
 8006efc:	88fb      	ldrh	r3, [r7, #6]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e0a9      	b.n	800705a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2222      	movs	r2, #34	@ 0x22
 8006f12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f1c:	f7fe fbda 	bl	80056d4 <HAL_GetTick>
 8006f20:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	88fa      	ldrh	r2, [r7, #6]
 8006f26:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	88fa      	ldrh	r2, [r7, #6]
 8006f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f3a:	d10e      	bne.n	8006f5a <HAL_UART_Receive+0x80>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d105      	bne.n	8006f50 <HAL_UART_Receive+0x76>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006f4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f4e:	e02d      	b.n	8006fac <HAL_UART_Receive+0xd2>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	22ff      	movs	r2, #255	@ 0xff
 8006f54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f58:	e028      	b.n	8006fac <HAL_UART_Receive+0xd2>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10d      	bne.n	8006f7e <HAL_UART_Receive+0xa4>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d104      	bne.n	8006f74 <HAL_UART_Receive+0x9a>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	22ff      	movs	r2, #255	@ 0xff
 8006f6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f72:	e01b      	b.n	8006fac <HAL_UART_Receive+0xd2>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	227f      	movs	r2, #127	@ 0x7f
 8006f78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f7c:	e016      	b.n	8006fac <HAL_UART_Receive+0xd2>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f86:	d10d      	bne.n	8006fa4 <HAL_UART_Receive+0xca>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <HAL_UART_Receive+0xc0>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	227f      	movs	r2, #127	@ 0x7f
 8006f94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f98:	e008      	b.n	8006fac <HAL_UART_Receive+0xd2>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	223f      	movs	r2, #63	@ 0x3f
 8006f9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fa2:	e003      	b.n	8006fac <HAL_UART_Receive+0xd2>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fb2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fbc:	d108      	bne.n	8006fd0 <HAL_UART_Receive+0xf6>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	e003      	b.n	8006fd8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006fd8:	e032      	b.n	8007040 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2120      	movs	r1, #32
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fb7a 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e032      	b.n	800705a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10c      	bne.n	8007014 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	b29a      	uxth	r2, r3
 8007002:	8a7b      	ldrh	r3, [r7, #18]
 8007004:	4013      	ands	r3, r2
 8007006:	b29a      	uxth	r2, r3
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	3302      	adds	r3, #2
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	e00c      	b.n	800702e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701a:	b2da      	uxtb	r2, r3
 800701c:	8a7b      	ldrh	r3, [r7, #18]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	4013      	ands	r3, r2
 8007022:	b2da      	uxtb	r2, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	3301      	adds	r3, #1
 800702c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1c6      	bne.n	8006fda <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	e000      	b.n	800705a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007058:	2302      	movs	r3, #2
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	431a      	orrs	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	4ba6      	ldr	r3, [pc, #664]	@ (8007328 <UART_SetConfig+0x2c4>)
 8007090:	4013      	ands	r3, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	6979      	ldr	r1, [r7, #20]
 8007098:	430b      	orrs	r3, r1
 800709a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a94      	ldr	r2, [pc, #592]	@ (800732c <UART_SetConfig+0x2c8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d120      	bne.n	8007122 <UART_SetConfig+0xbe>
 80070e0:	4b93      	ldr	r3, [pc, #588]	@ (8007330 <UART_SetConfig+0x2cc>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d816      	bhi.n	800711c <UART_SetConfig+0xb8>
 80070ee:	a201      	add	r2, pc, #4	@ (adr r2, 80070f4 <UART_SetConfig+0x90>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	08007105 	.word	0x08007105
 80070f8:	08007111 	.word	0x08007111
 80070fc:	0800710b 	.word	0x0800710b
 8007100:	08007117 	.word	0x08007117
 8007104:	2301      	movs	r3, #1
 8007106:	77fb      	strb	r3, [r7, #31]
 8007108:	e150      	b.n	80073ac <UART_SetConfig+0x348>
 800710a:	2302      	movs	r3, #2
 800710c:	77fb      	strb	r3, [r7, #31]
 800710e:	e14d      	b.n	80073ac <UART_SetConfig+0x348>
 8007110:	2304      	movs	r3, #4
 8007112:	77fb      	strb	r3, [r7, #31]
 8007114:	e14a      	b.n	80073ac <UART_SetConfig+0x348>
 8007116:	2308      	movs	r3, #8
 8007118:	77fb      	strb	r3, [r7, #31]
 800711a:	e147      	b.n	80073ac <UART_SetConfig+0x348>
 800711c:	2310      	movs	r3, #16
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e144      	b.n	80073ac <UART_SetConfig+0x348>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a83      	ldr	r2, [pc, #524]	@ (8007334 <UART_SetConfig+0x2d0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d132      	bne.n	8007192 <UART_SetConfig+0x12e>
 800712c:	4b80      	ldr	r3, [pc, #512]	@ (8007330 <UART_SetConfig+0x2cc>)
 800712e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007132:	f003 030c 	and.w	r3, r3, #12
 8007136:	2b0c      	cmp	r3, #12
 8007138:	d828      	bhi.n	800718c <UART_SetConfig+0x128>
 800713a:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <UART_SetConfig+0xdc>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007175 	.word	0x08007175
 8007144:	0800718d 	.word	0x0800718d
 8007148:	0800718d 	.word	0x0800718d
 800714c:	0800718d 	.word	0x0800718d
 8007150:	08007181 	.word	0x08007181
 8007154:	0800718d 	.word	0x0800718d
 8007158:	0800718d 	.word	0x0800718d
 800715c:	0800718d 	.word	0x0800718d
 8007160:	0800717b 	.word	0x0800717b
 8007164:	0800718d 	.word	0x0800718d
 8007168:	0800718d 	.word	0x0800718d
 800716c:	0800718d 	.word	0x0800718d
 8007170:	08007187 	.word	0x08007187
 8007174:	2300      	movs	r3, #0
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e118      	b.n	80073ac <UART_SetConfig+0x348>
 800717a:	2302      	movs	r3, #2
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e115      	b.n	80073ac <UART_SetConfig+0x348>
 8007180:	2304      	movs	r3, #4
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e112      	b.n	80073ac <UART_SetConfig+0x348>
 8007186:	2308      	movs	r3, #8
 8007188:	77fb      	strb	r3, [r7, #31]
 800718a:	e10f      	b.n	80073ac <UART_SetConfig+0x348>
 800718c:	2310      	movs	r3, #16
 800718e:	77fb      	strb	r3, [r7, #31]
 8007190:	e10c      	b.n	80073ac <UART_SetConfig+0x348>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a68      	ldr	r2, [pc, #416]	@ (8007338 <UART_SetConfig+0x2d4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d120      	bne.n	80071de <UART_SetConfig+0x17a>
 800719c:	4b64      	ldr	r3, [pc, #400]	@ (8007330 <UART_SetConfig+0x2cc>)
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071a6:	2b30      	cmp	r3, #48	@ 0x30
 80071a8:	d013      	beq.n	80071d2 <UART_SetConfig+0x16e>
 80071aa:	2b30      	cmp	r3, #48	@ 0x30
 80071ac:	d814      	bhi.n	80071d8 <UART_SetConfig+0x174>
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d009      	beq.n	80071c6 <UART_SetConfig+0x162>
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	d810      	bhi.n	80071d8 <UART_SetConfig+0x174>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <UART_SetConfig+0x15c>
 80071ba:	2b10      	cmp	r3, #16
 80071bc:	d006      	beq.n	80071cc <UART_SetConfig+0x168>
 80071be:	e00b      	b.n	80071d8 <UART_SetConfig+0x174>
 80071c0:	2300      	movs	r3, #0
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	e0f2      	b.n	80073ac <UART_SetConfig+0x348>
 80071c6:	2302      	movs	r3, #2
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e0ef      	b.n	80073ac <UART_SetConfig+0x348>
 80071cc:	2304      	movs	r3, #4
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e0ec      	b.n	80073ac <UART_SetConfig+0x348>
 80071d2:	2308      	movs	r3, #8
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e0e9      	b.n	80073ac <UART_SetConfig+0x348>
 80071d8:	2310      	movs	r3, #16
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e0e6      	b.n	80073ac <UART_SetConfig+0x348>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a56      	ldr	r2, [pc, #344]	@ (800733c <UART_SetConfig+0x2d8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d120      	bne.n	800722a <UART_SetConfig+0x1c6>
 80071e8:	4b51      	ldr	r3, [pc, #324]	@ (8007330 <UART_SetConfig+0x2cc>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80071f4:	d013      	beq.n	800721e <UART_SetConfig+0x1ba>
 80071f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071f8:	d814      	bhi.n	8007224 <UART_SetConfig+0x1c0>
 80071fa:	2b80      	cmp	r3, #128	@ 0x80
 80071fc:	d009      	beq.n	8007212 <UART_SetConfig+0x1ae>
 80071fe:	2b80      	cmp	r3, #128	@ 0x80
 8007200:	d810      	bhi.n	8007224 <UART_SetConfig+0x1c0>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <UART_SetConfig+0x1a8>
 8007206:	2b40      	cmp	r3, #64	@ 0x40
 8007208:	d006      	beq.n	8007218 <UART_SetConfig+0x1b4>
 800720a:	e00b      	b.n	8007224 <UART_SetConfig+0x1c0>
 800720c:	2300      	movs	r3, #0
 800720e:	77fb      	strb	r3, [r7, #31]
 8007210:	e0cc      	b.n	80073ac <UART_SetConfig+0x348>
 8007212:	2302      	movs	r3, #2
 8007214:	77fb      	strb	r3, [r7, #31]
 8007216:	e0c9      	b.n	80073ac <UART_SetConfig+0x348>
 8007218:	2304      	movs	r3, #4
 800721a:	77fb      	strb	r3, [r7, #31]
 800721c:	e0c6      	b.n	80073ac <UART_SetConfig+0x348>
 800721e:	2308      	movs	r3, #8
 8007220:	77fb      	strb	r3, [r7, #31]
 8007222:	e0c3      	b.n	80073ac <UART_SetConfig+0x348>
 8007224:	2310      	movs	r3, #16
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e0c0      	b.n	80073ac <UART_SetConfig+0x348>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a44      	ldr	r2, [pc, #272]	@ (8007340 <UART_SetConfig+0x2dc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d125      	bne.n	8007280 <UART_SetConfig+0x21c>
 8007234:	4b3e      	ldr	r3, [pc, #248]	@ (8007330 <UART_SetConfig+0x2cc>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800723a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800723e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007242:	d017      	beq.n	8007274 <UART_SetConfig+0x210>
 8007244:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007248:	d817      	bhi.n	800727a <UART_SetConfig+0x216>
 800724a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800724e:	d00b      	beq.n	8007268 <UART_SetConfig+0x204>
 8007250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007254:	d811      	bhi.n	800727a <UART_SetConfig+0x216>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <UART_SetConfig+0x1fe>
 800725a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800725e:	d006      	beq.n	800726e <UART_SetConfig+0x20a>
 8007260:	e00b      	b.n	800727a <UART_SetConfig+0x216>
 8007262:	2300      	movs	r3, #0
 8007264:	77fb      	strb	r3, [r7, #31]
 8007266:	e0a1      	b.n	80073ac <UART_SetConfig+0x348>
 8007268:	2302      	movs	r3, #2
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e09e      	b.n	80073ac <UART_SetConfig+0x348>
 800726e:	2304      	movs	r3, #4
 8007270:	77fb      	strb	r3, [r7, #31]
 8007272:	e09b      	b.n	80073ac <UART_SetConfig+0x348>
 8007274:	2308      	movs	r3, #8
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e098      	b.n	80073ac <UART_SetConfig+0x348>
 800727a:	2310      	movs	r3, #16
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e095      	b.n	80073ac <UART_SetConfig+0x348>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a2f      	ldr	r2, [pc, #188]	@ (8007344 <UART_SetConfig+0x2e0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d125      	bne.n	80072d6 <UART_SetConfig+0x272>
 800728a:	4b29      	ldr	r3, [pc, #164]	@ (8007330 <UART_SetConfig+0x2cc>)
 800728c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007290:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007294:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007298:	d017      	beq.n	80072ca <UART_SetConfig+0x266>
 800729a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800729e:	d817      	bhi.n	80072d0 <UART_SetConfig+0x26c>
 80072a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072a4:	d00b      	beq.n	80072be <UART_SetConfig+0x25a>
 80072a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072aa:	d811      	bhi.n	80072d0 <UART_SetConfig+0x26c>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <UART_SetConfig+0x254>
 80072b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072b4:	d006      	beq.n	80072c4 <UART_SetConfig+0x260>
 80072b6:	e00b      	b.n	80072d0 <UART_SetConfig+0x26c>
 80072b8:	2301      	movs	r3, #1
 80072ba:	77fb      	strb	r3, [r7, #31]
 80072bc:	e076      	b.n	80073ac <UART_SetConfig+0x348>
 80072be:	2302      	movs	r3, #2
 80072c0:	77fb      	strb	r3, [r7, #31]
 80072c2:	e073      	b.n	80073ac <UART_SetConfig+0x348>
 80072c4:	2304      	movs	r3, #4
 80072c6:	77fb      	strb	r3, [r7, #31]
 80072c8:	e070      	b.n	80073ac <UART_SetConfig+0x348>
 80072ca:	2308      	movs	r3, #8
 80072cc:	77fb      	strb	r3, [r7, #31]
 80072ce:	e06d      	b.n	80073ac <UART_SetConfig+0x348>
 80072d0:	2310      	movs	r3, #16
 80072d2:	77fb      	strb	r3, [r7, #31]
 80072d4:	e06a      	b.n	80073ac <UART_SetConfig+0x348>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a1b      	ldr	r2, [pc, #108]	@ (8007348 <UART_SetConfig+0x2e4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d138      	bne.n	8007352 <UART_SetConfig+0x2ee>
 80072e0:	4b13      	ldr	r3, [pc, #76]	@ (8007330 <UART_SetConfig+0x2cc>)
 80072e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80072ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072ee:	d017      	beq.n	8007320 <UART_SetConfig+0x2bc>
 80072f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072f4:	d82a      	bhi.n	800734c <UART_SetConfig+0x2e8>
 80072f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072fa:	d00b      	beq.n	8007314 <UART_SetConfig+0x2b0>
 80072fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007300:	d824      	bhi.n	800734c <UART_SetConfig+0x2e8>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <UART_SetConfig+0x2aa>
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800730a:	d006      	beq.n	800731a <UART_SetConfig+0x2b6>
 800730c:	e01e      	b.n	800734c <UART_SetConfig+0x2e8>
 800730e:	2300      	movs	r3, #0
 8007310:	77fb      	strb	r3, [r7, #31]
 8007312:	e04b      	b.n	80073ac <UART_SetConfig+0x348>
 8007314:	2302      	movs	r3, #2
 8007316:	77fb      	strb	r3, [r7, #31]
 8007318:	e048      	b.n	80073ac <UART_SetConfig+0x348>
 800731a:	2304      	movs	r3, #4
 800731c:	77fb      	strb	r3, [r7, #31]
 800731e:	e045      	b.n	80073ac <UART_SetConfig+0x348>
 8007320:	2308      	movs	r3, #8
 8007322:	77fb      	strb	r3, [r7, #31]
 8007324:	e042      	b.n	80073ac <UART_SetConfig+0x348>
 8007326:	bf00      	nop
 8007328:	efff69f3 	.word	0xefff69f3
 800732c:	40011000 	.word	0x40011000
 8007330:	40023800 	.word	0x40023800
 8007334:	40004400 	.word	0x40004400
 8007338:	40004800 	.word	0x40004800
 800733c:	40004c00 	.word	0x40004c00
 8007340:	40005000 	.word	0x40005000
 8007344:	40011400 	.word	0x40011400
 8007348:	40007800 	.word	0x40007800
 800734c:	2310      	movs	r3, #16
 800734e:	77fb      	strb	r3, [r7, #31]
 8007350:	e02c      	b.n	80073ac <UART_SetConfig+0x348>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a72      	ldr	r2, [pc, #456]	@ (8007520 <UART_SetConfig+0x4bc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d125      	bne.n	80073a8 <UART_SetConfig+0x344>
 800735c:	4b71      	ldr	r3, [pc, #452]	@ (8007524 <UART_SetConfig+0x4c0>)
 800735e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007362:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007366:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800736a:	d017      	beq.n	800739c <UART_SetConfig+0x338>
 800736c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007370:	d817      	bhi.n	80073a2 <UART_SetConfig+0x33e>
 8007372:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007376:	d00b      	beq.n	8007390 <UART_SetConfig+0x32c>
 8007378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800737c:	d811      	bhi.n	80073a2 <UART_SetConfig+0x33e>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <UART_SetConfig+0x326>
 8007382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007386:	d006      	beq.n	8007396 <UART_SetConfig+0x332>
 8007388:	e00b      	b.n	80073a2 <UART_SetConfig+0x33e>
 800738a:	2300      	movs	r3, #0
 800738c:	77fb      	strb	r3, [r7, #31]
 800738e:	e00d      	b.n	80073ac <UART_SetConfig+0x348>
 8007390:	2302      	movs	r3, #2
 8007392:	77fb      	strb	r3, [r7, #31]
 8007394:	e00a      	b.n	80073ac <UART_SetConfig+0x348>
 8007396:	2304      	movs	r3, #4
 8007398:	77fb      	strb	r3, [r7, #31]
 800739a:	e007      	b.n	80073ac <UART_SetConfig+0x348>
 800739c:	2308      	movs	r3, #8
 800739e:	77fb      	strb	r3, [r7, #31]
 80073a0:	e004      	b.n	80073ac <UART_SetConfig+0x348>
 80073a2:	2310      	movs	r3, #16
 80073a4:	77fb      	strb	r3, [r7, #31]
 80073a6:	e001      	b.n	80073ac <UART_SetConfig+0x348>
 80073a8:	2310      	movs	r3, #16
 80073aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073b4:	d15b      	bne.n	800746e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80073b6:	7ffb      	ldrb	r3, [r7, #31]
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d828      	bhi.n	800740e <UART_SetConfig+0x3aa>
 80073bc:	a201      	add	r2, pc, #4	@ (adr r2, 80073c4 <UART_SetConfig+0x360>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	080073e9 	.word	0x080073e9
 80073c8:	080073f1 	.word	0x080073f1
 80073cc:	080073f9 	.word	0x080073f9
 80073d0:	0800740f 	.word	0x0800740f
 80073d4:	080073ff 	.word	0x080073ff
 80073d8:	0800740f 	.word	0x0800740f
 80073dc:	0800740f 	.word	0x0800740f
 80073e0:	0800740f 	.word	0x0800740f
 80073e4:	08007407 	.word	0x08007407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e8:	f7ff f88e 	bl	8006508 <HAL_RCC_GetPCLK1Freq>
 80073ec:	61b8      	str	r0, [r7, #24]
        break;
 80073ee:	e013      	b.n	8007418 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f0:	f7ff f89e 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 80073f4:	61b8      	str	r0, [r7, #24]
        break;
 80073f6:	e00f      	b.n	8007418 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073f8:	4b4b      	ldr	r3, [pc, #300]	@ (8007528 <UART_SetConfig+0x4c4>)
 80073fa:	61bb      	str	r3, [r7, #24]
        break;
 80073fc:	e00c      	b.n	8007418 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fe:	f7fe ffb1 	bl	8006364 <HAL_RCC_GetSysClockFreq>
 8007402:	61b8      	str	r0, [r7, #24]
        break;
 8007404:	e008      	b.n	8007418 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800740a:	61bb      	str	r3, [r7, #24]
        break;
 800740c:	e004      	b.n	8007418 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	77bb      	strb	r3, [r7, #30]
        break;
 8007416:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d074      	beq.n	8007508 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	005a      	lsls	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	441a      	add	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007432:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b0f      	cmp	r3, #15
 8007438:	d916      	bls.n	8007468 <UART_SetConfig+0x404>
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007440:	d212      	bcs.n	8007468 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	b29b      	uxth	r3, r3
 8007446:	f023 030f 	bic.w	r3, r3, #15
 800744a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	b29b      	uxth	r3, r3
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	b29a      	uxth	r2, r3
 8007458:	89fb      	ldrh	r3, [r7, #14]
 800745a:	4313      	orrs	r3, r2
 800745c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	89fa      	ldrh	r2, [r7, #14]
 8007464:	60da      	str	r2, [r3, #12]
 8007466:	e04f      	b.n	8007508 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	77bb      	strb	r3, [r7, #30]
 800746c:	e04c      	b.n	8007508 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800746e:	7ffb      	ldrb	r3, [r7, #31]
 8007470:	2b08      	cmp	r3, #8
 8007472:	d828      	bhi.n	80074c6 <UART_SetConfig+0x462>
 8007474:	a201      	add	r2, pc, #4	@ (adr r2, 800747c <UART_SetConfig+0x418>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a9 	.word	0x080074a9
 8007484:	080074b1 	.word	0x080074b1
 8007488:	080074c7 	.word	0x080074c7
 800748c:	080074b7 	.word	0x080074b7
 8007490:	080074c7 	.word	0x080074c7
 8007494:	080074c7 	.word	0x080074c7
 8007498:	080074c7 	.word	0x080074c7
 800749c:	080074bf 	.word	0x080074bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a0:	f7ff f832 	bl	8006508 <HAL_RCC_GetPCLK1Freq>
 80074a4:	61b8      	str	r0, [r7, #24]
        break;
 80074a6:	e013      	b.n	80074d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074a8:	f7ff f842 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 80074ac:	61b8      	str	r0, [r7, #24]
        break;
 80074ae:	e00f      	b.n	80074d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <UART_SetConfig+0x4c4>)
 80074b2:	61bb      	str	r3, [r7, #24]
        break;
 80074b4:	e00c      	b.n	80074d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074b6:	f7fe ff55 	bl	8006364 <HAL_RCC_GetSysClockFreq>
 80074ba:	61b8      	str	r0, [r7, #24]
        break;
 80074bc:	e008      	b.n	80074d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074c2:	61bb      	str	r3, [r7, #24]
        break;
 80074c4:	e004      	b.n	80074d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	77bb      	strb	r3, [r7, #30]
        break;
 80074ce:	bf00      	nop
    }

    if (pclk != 0U)
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d018      	beq.n	8007508 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	085a      	lsrs	r2, r3, #1
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	441a      	add	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2b0f      	cmp	r3, #15
 80074ee:	d909      	bls.n	8007504 <UART_SetConfig+0x4a0>
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074f6:	d205      	bcs.n	8007504 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60da      	str	r2, [r3, #12]
 8007502:	e001      	b.n	8007508 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007514:	7fbb      	ldrb	r3, [r7, #30]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3720      	adds	r7, #32
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40007c00 	.word	0x40007c00
 8007524:	40023800 	.word	0x40023800
 8007528:	00f42400 	.word	0x00f42400

0800752c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	f003 0308 	and.w	r3, r3, #8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01a      	beq.n	8007642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800762a:	d10a      	bne.n	8007642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
  }
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af02      	add	r7, sp, #8
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007680:	f7fe f828 	bl	80056d4 <HAL_GetTick>
 8007684:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b08      	cmp	r3, #8
 8007692:	d10e      	bne.n	80076b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007694:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f81b 	bl	80076de <UART_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e011      	b.n	80076d6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2220      	movs	r2, #32
 80076b6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b09c      	sub	sp, #112	@ 0x70
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4613      	mov	r3, r2
 80076ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ee:	e0a7      	b.n	8007840 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f6:	f000 80a3 	beq.w	8007840 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076fa:	f7fd ffeb 	bl	80056d4 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007706:	429a      	cmp	r2, r3
 8007708:	d302      	bcc.n	8007710 <UART_WaitOnFlagUntilTimeout+0x32>
 800770a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800770c:	2b00      	cmp	r3, #0
 800770e:	d13f      	bne.n	8007790 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800771e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007720:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007724:	667b      	str	r3, [r7, #100]	@ 0x64
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007730:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007734:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800773c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e6      	bne.n	8007710 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007754:	f023 0301 	bic.w	r3, r3, #1
 8007758:	663b      	str	r3, [r7, #96]	@ 0x60
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007762:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007764:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2220      	movs	r2, #32
 800777a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2220      	movs	r2, #32
 8007780:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e068      	b.n	8007862 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	d050      	beq.n	8007840 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ac:	d148      	bne.n	8007840 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80077cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80077e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e6      	bne.n	80077b8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	613b      	str	r3, [r7, #16]
   return(result);
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f023 0301 	bic.w	r3, r3, #1
 8007800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800780a:	623a      	str	r2, [r7, #32]
 800780c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	69f9      	ldr	r1, [r7, #28]
 8007810:	6a3a      	ldr	r2, [r7, #32]
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	61bb      	str	r3, [r7, #24]
   return(result);
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e5      	bne.n	80077ea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2220      	movs	r2, #32
 8007822:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2220      	movs	r2, #32
 8007828:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e010      	b.n	8007862 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69da      	ldr	r2, [r3, #28]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4013      	ands	r3, r2
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	429a      	cmp	r2, r3
 800784e:	bf0c      	ite	eq
 8007850:	2301      	moveq	r3, #1
 8007852:	2300      	movne	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	429a      	cmp	r2, r3
 800785c:	f43f af48 	beq.w	80076f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3770      	adds	r7, #112	@ 0x70
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800786a:	b480      	push	{r7}
 800786c:	b08b      	sub	sp, #44	@ 0x2c
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	ed87 0a02 	vstr	s0, [r7, #8]
 8007876:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	885b      	ldrh	r3, [r3, #2]
 800788e:	fb02 f303 	mul.w	r3, r2, r3
 8007892:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8007898:	e010      	b.n	80078bc <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	1d1a      	adds	r2, r3, #4
 800789e:	627a      	str	r2, [r7, #36]	@ 0x24
 80078a0:	ed93 7a00 	vldr	s14, [r3]
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	623a      	str	r2, [r7, #32]
 80078aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80078ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1eb      	bne.n	800789a <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80078c2:	2300      	movs	r3, #0
 80078c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80078c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	372c      	adds	r7, #44	@ 0x2c
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	ed87 0a01 	vstr	s0, [r7, #4]
 80078e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80078e4:	f003 f906 	bl	800aaf4 <log10f>
 80078e8:	eef0 7a40 	vmov.f32	s15, s0
 80078ec:	eeb0 0a67 	vmov.f32	s0, s15
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 80078f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	ed87 0b00 	vstr	d0, [r7]
 8007902:	683c      	ldr	r4, [r7, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800790a:	2301      	movs	r3, #1
 800790c:	461e      	mov	r6, r3
 800790e:	f04f 32ff 	mov.w	r2, #4294967295
 8007912:	4b10      	ldr	r3, [pc, #64]	@ (8007954 <_ZSt5isinfd+0x5c>)
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f9 f928 	bl	8000b6c <__aeabi_dcmpun>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <_ZSt5isinfd+0x42>
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	4b0b      	ldr	r3, [pc, #44]	@ (8007954 <_ZSt5isinfd+0x5c>)
 8007928:	4620      	mov	r0, r4
 800792a:	4629      	mov	r1, r5
 800792c:	f7f9 f900 	bl	8000b30 <__aeabi_dcmple>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <_ZSt5isinfd+0x42>
 8007936:	2300      	movs	r3, #0
 8007938:	461e      	mov	r6, r3
 800793a:	b2f3      	uxtb	r3, r6
 800793c:	f083 0301 	eor.w	r3, r3, #1
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	bf14      	ite	ne
 8007946:	2301      	movne	r3, #1
 8007948:	2300      	moveq	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007954:	7fefffff 	.word	0x7fefffff

08007958 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 8007968:	b5b0      	push	{r4, r5, r7, lr}
 800796a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800796c:	f7fd feb2 	bl	80056d4 <HAL_GetTick>
 8007970:	4603      	mov	r3, r0
 8007972:	2200      	movs	r2, #0
 8007974:	461c      	mov	r4, r3
 8007976:	4615      	mov	r5, r2
 8007978:	4622      	mov	r2, r4
 800797a:	462b      	mov	r3, r5
}
 800797c:	4610      	mov	r0, r2
 800797e:	4619      	mov	r1, r3
 8007980:	bdb0      	pop	{r4, r5, r7, pc}

08007982 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_us() {
 8007982:	b5b0      	push	{r4, r5, r7, lr}
 8007984:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8007986:	f7fd fea5 	bl	80056d4 <HAL_GetTick>
 800798a:	4603      	mov	r3, r0
 800798c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007990:	fb02 f303 	mul.w	r3, r2, r3
 8007994:	2200      	movs	r2, #0
 8007996:	461c      	mov	r4, r3
 8007998:	4615      	mov	r5, r2
 800799a:	4622      	mov	r2, r4
 800799c:	462b      	mov	r3, r5
}
 800799e:	4610      	mov	r0, r2
 80079a0:	4619      	mov	r1, r3
 80079a2:	bdb0      	pop	{r4, r5, r7, pc}
 80079a4:	0000      	movs	r0, r0
	...

080079a8 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	b08c      	sub	sp, #48	@ 0x30
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	ed87 0a01 	vstr	s0, [r7, #4]
        *(c) = '\0';
    }


    ei_printf("%s", s);
}
 80079b4:	466b      	mov	r3, sp
 80079b6:	4698      	mov	r8, r3
    float n = f;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char s[MAX_NUMBER_STRING_SIZE];
 80079bc:	4b78      	ldr	r3, [pc, #480]	@ (8007ba0 <_Z15ei_printf_floatf+0x1f8>)
 80079be:	681e      	ldr	r6, [r3, #0]
 80079c0:	1e73      	subs	r3, r6, #1
 80079c2:	623b      	str	r3, [r7, #32]
 80079c4:	4632      	mov	r2, r6
 80079c6:	2300      	movs	r3, #0
 80079c8:	4614      	mov	r4, r2
 80079ca:	461d      	mov	r5, r3
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	f04f 0300 	mov.w	r3, #0
 80079d4:	00eb      	lsls	r3, r5, #3
 80079d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079da:	00e2      	lsls	r2, r4, #3
 80079dc:	4632      	mov	r2, r6
 80079de:	2300      	movs	r3, #0
 80079e0:	4610      	mov	r0, r2
 80079e2:	4619      	mov	r1, r3
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	00cb      	lsls	r3, r1, #3
 80079ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80079f2:	00c2      	lsls	r2, r0, #3
 80079f4:	4633      	mov	r3, r6
 80079f6:	3307      	adds	r3, #7
 80079f8:	08db      	lsrs	r3, r3, #3
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	ebad 0d03 	sub.w	sp, sp, r3
 8007a00:	466b      	mov	r3, sp
 8007a02:	3300      	adds	r3, #0
 8007a04:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8007a06:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007a0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a12:	d106      	bne.n	8007a22 <_Z15ei_printf_floatf+0x7a>
        strcpy(s, "0");
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4963      	ldr	r1, [pc, #396]	@ (8007ba4 <_Z15ei_printf_floatf+0x1fc>)
 8007a18:	461a      	mov	r2, r3
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	8013      	strh	r3, [r2, #0]
 8007a20:	e0ad      	b.n	8007b7e <_Z15ei_printf_floatf+0x1d6>
        char *c = s;
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	627b      	str	r3, [r7, #36]	@ 0x24
        int neg = (n < 0);
 8007a26:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a32:	bf4c      	ite	mi
 8007a34:	2301      	movmi	r3, #1
 8007a36:	2300      	movpl	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <_Z15ei_printf_floatf+0xa6>
            n = -n;
 8007a42:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007a46:	eef1 7a67 	vneg.f32	s15, s15
 8007a4a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        m = log10(n);
 8007a4e:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8007a52:	f7ff ff40 	bl	80078d6 <_ZSt5log10f>
 8007a56:	eef0 7a40 	vmov.f32	s15, s0
 8007a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a5e:	ee17 3a90 	vmov	r3, s15
 8007a62:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (neg) {
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d004      	beq.n	8007a74 <_Z15ei_printf_floatf+0xcc>
            *(c++) = '-';
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a70:	222d      	movs	r2, #45	@ 0x2d
 8007a72:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dc70      	bgt.n	8007b5c <_Z15ei_printf_floatf+0x1b4>
            m = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (n > PRECISION || m >= 0) {
 8007a7e:	e06d      	b.n	8007b5c <_Z15ei_printf_floatf+0x1b4>
            double weight = pow(10.0, m);
 8007a80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a82:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 8007b98 <_Z15ei_printf_floatf+0x1f0>
 8007a86:	f000 f8b8 	bl	8007bfa <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8007a8a:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a9a:	f7f9 f85d 	bl	8000b58 <__aeabi_dcmpgt>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <_Z15ei_printf_floatf+0x114>
 8007aa4:	ed97 0b04 	vldr	d0, [r7, #16]
 8007aa8:	f7ff ff26 	bl	80078f8 <_ZSt5isinfd>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f083 0301 	eor.w	r3, r3, #1
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <_Z15ei_printf_floatf+0x114>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e000      	b.n	8007abe <_Z15ei_printf_floatf+0x116>
 8007abc:	2300      	movs	r3, #0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d03a      	beq.n	8007b38 <_Z15ei_printf_floatf+0x190>
                digit = floor(n / weight);
 8007ac2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ac4:	f7f8 fd60 	bl	8000588 <__aeabi_f2d>
 8007ac8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007acc:	f7f8 fede 	bl	800088c <__aeabi_ddiv>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	ec43 2b17 	vmov	d7, r2, r3
 8007ad8:	eeb0 0a47 	vmov.f32	s0, s14
 8007adc:	eef0 0a67 	vmov.f32	s1, s15
 8007ae0:	f003 f97e 	bl	800ade0 <floor>
 8007ae4:	ec53 2b10 	vmov	r2, r3, d0
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4619      	mov	r1, r3
 8007aec:	f7f9 f854 	bl	8000b98 <__aeabi_d2iz>
 8007af0:	4603      	mov	r3, r0
 8007af2:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8007af4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007af6:	f7f8 fd47 	bl	8000588 <__aeabi_f2d>
 8007afa:	4604      	mov	r4, r0
 8007afc:	460d      	mov	r5, r1
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7f8 fd30 	bl	8000564 <__aeabi_i2d>
 8007b04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b08:	f7f8 fd96 	bl	8000638 <__aeabi_dmul>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4620      	mov	r0, r4
 8007b12:	4629      	mov	r1, r5
 8007b14:	f7f8 fbd8 	bl	80002c8 <__aeabi_dsub>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	f7f9 f882 	bl	8000c28 <__aeabi_d2f>
 8007b24:	4603      	mov	r3, r0
 8007b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                *(c++) = '0' + digit;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	1c59      	adds	r1, r3, #1
 8007b30:	6279      	str	r1, [r7, #36]	@ 0x24
 8007b32:	3230      	adds	r2, #48	@ 0x30
 8007b34:	b2d2      	uxtb	r2, r2
 8007b36:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <_Z15ei_printf_floatf+0x1ae>
 8007b3e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007b42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4a:	dd04      	ble.n	8007b56 <_Z15ei_printf_floatf+0x1ae>
                *(c++) = '.';
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b52:	222e      	movs	r2, #46	@ 0x2e
 8007b54:	701a      	strb	r2, [r3, #0]
            m--;
 8007b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (n > PRECISION || m >= 0) {
 8007b5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b5e:	f7f8 fd13 	bl	8000588 <__aeabi_f2d>
 8007b62:	4b11      	ldr	r3, [pc, #68]	@ (8007ba8 <_Z15ei_printf_floatf+0x200>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f7f8 fff6 	bl	8000b58 <__aeabi_dcmpgt>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d186      	bne.n	8007a80 <_Z15ei_printf_floatf+0xd8>
 8007b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da83      	bge.n	8007a80 <_Z15ei_printf_floatf+0xd8>
        *(c) = '\0';
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8007b7e:	69f9      	ldr	r1, [r7, #28]
 8007b80:	480a      	ldr	r0, [pc, #40]	@ (8007bac <_Z15ei_printf_floatf+0x204>)
 8007b82:	f7fb fa11 	bl	8002fa8 <_Z9ei_printfPKcz>
 8007b86:	46c5      	mov	sp, r8
}
 8007b88:	bf00      	nop
 8007b8a:	3730      	adds	r7, #48	@ 0x30
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b92:	bf00      	nop
 8007b94:	f3af 8000 	nop.w
 8007b98:	00000000 	.word	0x00000000
 8007b9c:	40240000 	.word	0x40240000
 8007ba0:	20000388 	.word	0x20000388
 8007ba4:	0800fbac 	.word	0x0800fbac
 8007ba8:	20000380 	.word	0x20000380
 8007bac:	0800fbb0 	.word	0x0800fbb0

08007bb0 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f004 fa37 	bl	800c02c <malloc>
 8007bbe:	4603      	mov	r3, r0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f004 fa0d 	bl	800bff4 <calloc>
 8007bda:	4603      	mov	r3, r0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
    free(ptr);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f004 fa25 	bl	800c03c <free>
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	ed87 0b02 	vstr	d0, [r7, #8]
 8007c04:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7f8 fcac 	bl	8000564 <__aeabi_i2d>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	ec43 2b11 	vmov	d1, r2, r3
 8007c14:	ed97 0b02 	vldr	d0, [r7, #8]
 8007c18:	f002 fe90 	bl	800a93c <pow>
 8007c1c:	eeb0 7a40 	vmov.f32	s14, s0
 8007c20:	eef0 7a60 	vmov.f32	s15, s1
    }
 8007c24:	eeb0 0a47 	vmov.f32	s0, s14
 8007c28:	eef0 0a67 	vmov.f32	s1, s15
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	2b12      	cmp	r3, #18
 8007c42:	d84f      	bhi.n	8007ce4 <TfLiteTypeGetName+0xb0>
 8007c44:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <TfLiteTypeGetName+0x18>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c99 	.word	0x08007c99
 8007c50:	08007c9d 	.word	0x08007c9d
 8007c54:	08007ca9 	.word	0x08007ca9
 8007c58:	08007cb1 	.word	0x08007cb1
 8007c5c:	08007cb9 	.word	0x08007cb9
 8007c60:	08007ccd 	.word	0x08007ccd
 8007c64:	08007cc1 	.word	0x08007cc1
 8007c68:	08007ca5 	.word	0x08007ca5
 8007c6c:	08007cc5 	.word	0x08007cc5
 8007c70:	08007cb5 	.word	0x08007cb5
 8007c74:	08007cd1 	.word	0x08007cd1
 8007c78:	08007cd5 	.word	0x08007cd5
 8007c7c:	08007cc9 	.word	0x08007cc9
 8007c80:	08007cbd 	.word	0x08007cbd
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007cdd 	.word	0x08007cdd
 8007c8c:	08007cad 	.word	0x08007cad
 8007c90:	08007ca1 	.word	0x08007ca1
 8007c94:	08007ce1 	.word	0x08007ce1
    case kTfLiteNoType:
      return "NOTYPE";
 8007c98:	4b16      	ldr	r3, [pc, #88]	@ (8007cf4 <TfLiteTypeGetName+0xc0>)
 8007c9a:	e024      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8007c9c:	4b16      	ldr	r3, [pc, #88]	@ (8007cf8 <TfLiteTypeGetName+0xc4>)
 8007c9e:	e022      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt16:
      return "UINT16";
 8007ca0:	4b16      	ldr	r3, [pc, #88]	@ (8007cfc <TfLiteTypeGetName+0xc8>)
 8007ca2:	e020      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt16:
      return "INT16";
 8007ca4:	4b16      	ldr	r3, [pc, #88]	@ (8007d00 <TfLiteTypeGetName+0xcc>)
 8007ca6:	e01e      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt32:
      return "INT32";
 8007ca8:	4b16      	ldr	r3, [pc, #88]	@ (8007d04 <TfLiteTypeGetName+0xd0>)
 8007caa:	e01c      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt32:
      return "UINT32";
 8007cac:	4b16      	ldr	r3, [pc, #88]	@ (8007d08 <TfLiteTypeGetName+0xd4>)
 8007cae:	e01a      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt8:
      return "UINT8";
 8007cb0:	4b16      	ldr	r3, [pc, #88]	@ (8007d0c <TfLiteTypeGetName+0xd8>)
 8007cb2:	e018      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt8:
      return "INT8";
 8007cb4:	4b16      	ldr	r3, [pc, #88]	@ (8007d10 <TfLiteTypeGetName+0xdc>)
 8007cb6:	e016      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt64:
      return "INT64";
 8007cb8:	4b16      	ldr	r3, [pc, #88]	@ (8007d14 <TfLiteTypeGetName+0xe0>)
 8007cba:	e014      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt64:
      return "UINT64";
 8007cbc:	4b16      	ldr	r3, [pc, #88]	@ (8007d18 <TfLiteTypeGetName+0xe4>)
 8007cbe:	e012      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteBool:
      return "BOOL";
 8007cc0:	4b16      	ldr	r3, [pc, #88]	@ (8007d1c <TfLiteTypeGetName+0xe8>)
 8007cc2:	e010      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8007cc4:	4b16      	ldr	r3, [pc, #88]	@ (8007d20 <TfLiteTypeGetName+0xec>)
 8007cc6:	e00e      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8007cc8:	4b16      	ldr	r3, [pc, #88]	@ (8007d24 <TfLiteTypeGetName+0xf0>)
 8007cca:	e00c      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteString:
      return "STRING";
 8007ccc:	4b16      	ldr	r3, [pc, #88]	@ (8007d28 <TfLiteTypeGetName+0xf4>)
 8007cce:	e00a      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8007cd0:	4b16      	ldr	r3, [pc, #88]	@ (8007d2c <TfLiteTypeGetName+0xf8>)
 8007cd2:	e008      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8007cd4:	4b16      	ldr	r3, [pc, #88]	@ (8007d30 <TfLiteTypeGetName+0xfc>)
 8007cd6:	e006      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteResource:
      return "RESOURCE";
 8007cd8:	4b16      	ldr	r3, [pc, #88]	@ (8007d34 <TfLiteTypeGetName+0x100>)
 8007cda:	e004      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteVariant:
      return "VARIANT";
 8007cdc:	4b16      	ldr	r3, [pc, #88]	@ (8007d38 <TfLiteTypeGetName+0x104>)
 8007cde:	e002      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt4:
      return "INT4";
 8007ce0:	4b16      	ldr	r3, [pc, #88]	@ (8007d3c <TfLiteTypeGetName+0x108>)
 8007ce2:	e000      	b.n	8007ce6 <TfLiteTypeGetName+0xb2>
  }
  return "Unknown type";
 8007ce4:	4b16      	ldr	r3, [pc, #88]	@ (8007d40 <TfLiteTypeGetName+0x10c>)
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	0800fbb4 	.word	0x0800fbb4
 8007cf8:	0800fbbc 	.word	0x0800fbbc
 8007cfc:	0800fbc4 	.word	0x0800fbc4
 8007d00:	0800fbcc 	.word	0x0800fbcc
 8007d04:	0800fbd4 	.word	0x0800fbd4
 8007d08:	0800fbdc 	.word	0x0800fbdc
 8007d0c:	0800fbe4 	.word	0x0800fbe4
 8007d10:	0800fbec 	.word	0x0800fbec
 8007d14:	0800fbf4 	.word	0x0800fbf4
 8007d18:	0800fbfc 	.word	0x0800fbfc
 8007d1c:	0800fc04 	.word	0x0800fc04
 8007d20:	0800fc0c 	.word	0x0800fc0c
 8007d24:	0800fc18 	.word	0x0800fc18
 8007d28:	0800fc24 	.word	0x0800fc24
 8007d2c:	0800fc2c 	.word	0x0800fc2c
 8007d30:	0800fc34 	.word	0x0800fc34
 8007d34:	0800fc3c 	.word	0x0800fc3c
 8007d38:	0800fc48 	.word	0x0800fc48
 8007d3c:	0800fc50 	.word	0x0800fc50
 8007d40:	0800fc58 	.word	0x0800fc58

08007d44 <_ZN6tflite12RuntimeShapeC1Ev>:
  // RuntimeShape in TFLM supports up to 5 dimensions.
  // The name kMaxSmallSize comes from the same file of the upstream
  // tensorflow lite repo and need to be kept the same for max reuse.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape() : size_(0) {}
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 f828 	bl	8007dcc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff ffdc 	bl	8007d9c <_ZN6tflite12RuntimeShape8DimsDataEv>
 8007de4:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	461a      	mov	r2, r3
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	6978      	ldr	r0, [r7, #20]
 8007df0:	f005 faa5 	bl	800d33e <memcpy>
  }
 8007df4:	bf00      	nop
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8007e04:	2301      	movs	r3, #1
 8007e06:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff ffd3 	bl	8007db4 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8007e0e:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8007e10:	2300      	movs	r3, #0
 8007e12:	613b      	str	r3, [r7, #16]
 8007e14:	e00b      	b.n	8007e2e <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	fb02 f303 	mul.w	r3, r2, r3
 8007e26:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	dbee      	blt.n	8007e16 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 8007e38:	697b      	ldr	r3, [r7, #20]
  }
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d103      	bne.n	8007e5a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff ff76 	bl	8007d44 <_ZN6tflite12RuntimeShapeC1Ev>
 8007e58:	e00d      	b.n	8007e76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	6939      	ldr	r1, [r7, #16]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff ff75 	bl	8007d60 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x18>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	e000      	b.n	8007eb2 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x1a>
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) {
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x18>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	e000      	b.n	8007ed8 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x1a>
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_elements; i += 2) {
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	e02a      	b.n	8007f4c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x68>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da00      	bge.n	8007efe <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x1a>
 8007efc:	3301      	adds	r3, #1
 8007efe:	105b      	asrs	r3, r3, #1
 8007f00:	461a      	mov	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	f993 3000 	ldrsb.w	r3, [r3]
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	b25a      	sxtb	r2, r3
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	440b      	add	r3, r1
 8007f14:	1112      	asrs	r2, r2, #4
 8007f16:	b252      	sxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d018      	beq.n	8007f56 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x72>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	da00      	bge.n	8007f2c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x48>
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	105b      	asrs	r3, r3, #1
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f993 2000 	ldrsb.w	r2, [r3]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	440b      	add	r3, r1
 8007f40:	1112      	asrs	r2, r2, #4
 8007f42:	b252      	sxtb	r2, r2
 8007f44:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements; i += 2) {
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	3302      	adds	r3, #2
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	dbd0      	blt.n	8007ef6 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }
}
 8007f54:	e000      	b.n	8007f58 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x74>
    if (i + 1 == num_elements) break;
 8007f56:	bf00      	nop
}
 8007f58:	bf00      	nop
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	ed93 7a00 	vldr	s14, [r3]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	edd3 7a00 	vldr	s15, [r3]
 8007f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f82:	d501      	bpl.n	8007f88 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	e000      	b.n	8007f8a <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8007f88:	687b      	ldr	r3, [r7, #4]
    }
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8007f96:	b480      	push	{r7}
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8007fa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007fac:	b088      	sub	sp, #32
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	ed87 0b02 	vstr	d0, [r7, #8]
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fc4:	f7f8 fda0 	bl	8000b08 <__aeabi_dcmpeq>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d006      	beq.n	8007fdc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
    return;
 8007fda:	e068      	b.n	80080ae <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8007fdc:	6838      	ldr	r0, [r7, #0]
 8007fde:	ed97 0b02 	vldr	d0, [r7, #8]
 8007fe2:	f002 fd1b 	bl	800aa1c <frexp>
 8007fe6:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	4b32      	ldr	r3, [pc, #200]	@ (80080b8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8007ff0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ff4:	f7f8 fb20 	bl	8000638 <__aeabi_dmul>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	ec43 2b17 	vmov	d7, r2, r3
 8008000:	eeb0 0a47 	vmov.f32	s0, s14
 8008004:	eef0 0a67 	vmov.f32	s1, s15
 8008008:	f000 f85a 	bl	80080c0 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800800c:	ec53 2b10 	vmov	r2, r3, d0
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	f7f8 fec0 	bl	8000d98 <__aeabi_d2lz>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8008020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008024:	4925      	ldr	r1, [pc, #148]	@ (80080bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8008026:	428a      	cmp	r2, r1
 8008028:	f173 0300 	sbcs.w	r3, r3, #0
 800802c:	db01      	blt.n	8008032 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 800802e:	f003 ffbb 	bl	800bfa8 <abort>
  if (q_fixed == (1LL << 31)) {
 8008032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008036:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800803a:	430b      	orrs	r3, r1
 800803c:	d118      	bne.n	8008070 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 800803e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	da05      	bge.n	8008052 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xaa>
 8008046:	f112 0801 	adds.w	r8, r2, #1
 800804a:	f143 0900 	adc.w	r9, r3, #0
 800804e:	4642      	mov	r2, r8
 8008050:	464b      	mov	r3, r9
 8008052:	f04f 0000 	mov.w	r0, #0
 8008056:	f04f 0100 	mov.w	r1, #0
 800805a:	0850      	lsrs	r0, r2, #1
 800805c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008060:	1059      	asrs	r1, r3, #1
 8008062:	e9c7 0106 	strd	r0, r1, [r7, #24]
    ++*shift;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8008070:	f7ff ff91 	bl	8007f96 <_ZNSt14numeric_limitsIlE3maxEv>
 8008074:	4603      	mov	r3, r0
 8008076:	17da      	asrs	r2, r3, #31
 8008078:	461c      	mov	r4, r3
 800807a:	4615      	mov	r5, r2
 800807c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008080:	4294      	cmp	r4, r2
 8008082:	eb75 0303 	sbcs.w	r3, r5, r3
 8008086:	da01      	bge.n	800808c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8008088:	f003 ff8e 	bl	800bfa8 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f113 0f1f 	cmn.w	r3, #31
 8008094:	da08      	bge.n	80080a8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	601a      	str	r2, [r3, #0]
}
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80080b6:	bf00      	nop
 80080b8:	41e00000 	.word	0x41e00000
 80080bc:	80000001 	.word	0x80000001

080080c0 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	ed87 0b00 	vstr	d0, [r7]
 80080ca:	ed97 0b00 	vldr	d0, [r7]
 80080ce:	f002 ff03 	bl	800aed8 <round>
 80080d2:	eeb0 7a40 	vmov.f32	s14, s0
 80080d6:	eef0 7a60 	vmov.f32	s15, s1
 80080da:	eeb0 0a47 	vmov.f32	s0, s14
 80080de:	eef0 0a67 	vmov.f32	s1, s15
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80080f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80080f6:	f7f9 f8f2 	bl	80012de <_ZSt5roundf>
 80080fa:	eef0 7a40 	vmov.f32	s15, s0
 80080fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	ed87 0b00 	vstr	d0, [r7]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800811a:	ec43 2b17 	vmov	d7, r2, r3
 800811e:	eeb0 0a47 	vmov.f32	s0, s14
 8008122:	eef0 0a67 	vmov.f32	s1, s15
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
 8008134:	4b02      	ldr	r3, [pc, #8]	@ (8008140 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8008136:	4618      	mov	r0, r3
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	ffff8000 	.word	0xffff8000

08008144 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8008144:	b480      	push	{r7}
 8008146:	af00      	add	r7, sp, #0
 8008148:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800814c:	4618      	mov	r0, r3
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8008156:	b480      	push	{r7}
 8008158:	af00      	add	r7, sp, #0
 800815a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800815e:	4618      	mov	r0, r3
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
 800816c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8008170:	4618      	mov	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800817a:	b480      	push	{r7}
 800817c:	af00      	add	r7, sp, #0
 800817e:	237f      	movs	r3, #127	@ 0x7f
 8008180:	4618      	mov	r0, r3
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800818a:	b480      	push	{r7}
 800818c:	af00      	add	r7, sp, #0
 800818e:	2300      	movs	r3, #0
 8008190:	4618      	mov	r0, r3
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800819a:	b480      	push	{r7}
 800819c:	af00      	add	r7, sp, #0
 800819e:	23ff      	movs	r3, #255	@ 0xff
 80081a0:	4618      	mov	r0, r3
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	0000      	movs	r0, r0
 80081ac:	0000      	movs	r0, r0
	...

080081b0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80081b0:	b5b0      	push	{r4, r5, r7, lr}
 80081b2:	b08e      	sub	sp, #56	@ 0x38
 80081b4:	af02      	add	r7, sp, #8
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7f8 f9e0 	bl	8000588 <__aeabi_f2d>
 80081c8:	4604      	mov	r4, r0
 80081ca:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7f8 f9d9 	bl	8000588 <__aeabi_f2d>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80081da:	4620      	mov	r0, r4
 80081dc:	4629      	mov	r1, r5
 80081de:	f7f8 fa2b 	bl	8000638 <__aeabi_dmul>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d04b      	beq.n	8008288 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7f8 f9c7 	bl	8000588 <__aeabi_f2d>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8008202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008206:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800820a:	f7f8 f85d 	bl	80002c8 <__aeabi_dsub>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	ec43 2b17 	vmov	d7, r2, r3
 8008216:	eeb0 0a47 	vmov.f32	s0, s14
 800821a:	eef0 0a67 	vmov.f32	s1, s15
 800821e:	f7ff ff73 	bl	8008108 <_ZSt3absd>
 8008222:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8008226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	4618      	mov	r0, r3
 800822c:	f7f8 f9ac 	bl	8000588 <__aeabi_f2d>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8008238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800823c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008240:	f7f8 fb24 	bl	800088c <__aeabi_ddiv>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4610      	mov	r0, r2
 800824a:	4619      	mov	r1, r3
 800824c:	2301      	movs	r3, #1
 800824e:	461c      	mov	r4, r3
 8008250:	a318      	add	r3, pc, #96	@ (adr r3, 80082b4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f7f8 fc6b 	bl	8000b30 <__aeabi_dcmple>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8008260:	2300      	movs	r3, #0
 8008262:	461c      	mov	r4, r3
 8008264:	b2e3      	uxtb	r3, r4
 8008266:	f083 0301 	eor.w	r3, r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00b      	beq.n	8008288 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	691c      	ldr	r4, [r3, #16]
 8008274:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	f44f 739e 	mov.w	r3, #316	@ 0x13c
 800827c:	4a0b      	ldr	r2, [pc, #44]	@ (80082ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800827e:	490c      	ldr	r1, [pc, #48]	@ (80082b0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	47a0      	blx	r4
 8008284:	2301      	movs	r3, #1
 8008286:	e009      	b.n	800829c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8008288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 f812 	bl	80082bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8008298:	4603      	mov	r3, r0
                                          multiplier);
 800829a:	bf00      	nop
}
 800829c:	4618      	mov	r0, r3
 800829e:	3730      	adds	r7, #48	@ 0x30
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bdb0      	pop	{r4, r5, r7, pc}
 80082a4:	f3af 8000 	nop.w
 80082a8:	0800fef8 	.word	0x0800fef8
 80082ac:	0800fcc8 	.word	0x0800fcc8
 80082b0:	0800fdc4 	.word	0x0800fdc4
 80082b4:	47ae147b 	.word	0x47ae147b
 80082b8:	3f947ae1 	.word	0x3f947ae1

080082bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b089      	sub	sp, #36	@ 0x24
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80082d6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80082da:	ee17 0a90 	vmov	r0, s15
 80082de:	f7f8 f953 	bl	8000588 <__aeabi_f2d>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80082ea:	2301      	movs	r3, #1
 80082ec:	461c      	mov	r4, r3
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	f04f 0300 	mov.w	r3, #0
 80082f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082fa:	f7f8 fc23 	bl	8000b44 <__aeabi_dcmpge>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8008304:	2300      	movs	r3, #0
 8008306:	461c      	mov	r4, r3
 8008308:	b2e3      	uxtb	r3, r4
 800830a:	f083 0301 	eor.w	r3, r3, #1
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00b      	beq.n	800832c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	691c      	ldr	r4, [r3, #16]
 8008318:	4b0f      	ldr	r3, [pc, #60]	@ (8008358 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	f240 1349 	movw	r3, #329	@ 0x149
 8008320:	4a0e      	ldr	r2, [pc, #56]	@ (800835c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8008322:	490f      	ldr	r1, [pc, #60]	@ (8008360 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	47a0      	blx	r4
 8008328:	2301      	movs	r3, #1
 800832a:	e010      	b.n	800834e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	4618      	mov	r0, r3
 8008332:	f7f8 f929 	bl	8000588 <__aeabi_f2d>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800833e:	f7f8 faa5 	bl	800088c <__aeabi_ddiv>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008348:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	bd90      	pop	{r4, r7, pc}
 8008356:	bf00      	nop
 8008358:	0800ff1c 	.word	0x0800ff1c
 800835c:	0800fcc8 	.word	0x0800fcc8
 8008360:	0800fdc4 	.word	0x0800fdc4

08008364 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b08b      	sub	sp, #44	@ 0x2c
 8008368:	af02      	add	r7, sp, #8
 800836a:	6178      	str	r0, [r7, #20]
 800836c:	ed87 0a04 	vstr	s0, [r7, #16]
 8008370:	60f9      	str	r1, [r7, #12]
 8008372:	edc7 0a02 	vstr	s1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8008378:	ed97 7a02 	vldr	s14, [r7, #8]
 800837c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008380:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008384:	eeb0 0a66 	vmov.f32	s0, s13
 8008388:	f7ff feae 	bl	80080e8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800838c:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8008390:	f7ff fee1 	bl	8008156 <_ZNSt14numeric_limitsIlE3minEv>
 8008394:	ee07 0a90 	vmov	s15, r0
 8008398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800839c:	ed97 7a07 	vldr	s14, [r7, #28]
 80083a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a8:	db0e      	blt.n	80083c8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80083aa:	f7ff fdf4 	bl	8007f96 <_ZNSt14numeric_limitsIlE3maxEv>
 80083ae:	ee07 0a90 	vmov	s15, r0
 80083b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80083b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80083ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c2:	d801      	bhi.n	80083c8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e000      	b.n	80083ca <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 80083c8:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80083ca:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 80083cc:	7efb      	ldrb	r3, [r7, #27]
 80083ce:	f083 0301 	eor.w	r3, r3, #1
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	691c      	ldr	r4, [r3, #16]
 80083dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008410 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	f240 1357 	movw	r3, #343	@ 0x157
 80083e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008414 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 80083e6:	490c      	ldr	r1, [pc, #48]	@ (8008418 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 80083e8:	6978      	ldr	r0, [r7, #20]
 80083ea:	47a0      	blx	r4
 80083ec:	2301      	movs	r3, #1
 80083ee:	e00a      	b.n	8008406 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 80083f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80083f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083f8:	ee17 2a90 	vmov	r2, s15
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	441a      	add	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3724      	adds	r7, #36	@ 0x24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd90      	pop	{r4, r7, pc}
 800840e:	bf00      	nop
 8008410:	0800ff38 	.word	0x0800ff38
 8008414:	0800fcc8 	.word	0x0800fcc8
 8008418:	0800fdc4 	.word	0x0800fdc4

0800841c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	@ 0x28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	607a      	str	r2, [r7, #4]
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	460b      	mov	r3, r1
 800842a:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 800842c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	627b      	str	r3, [r7, #36]	@ 0x24
  const auto zero_point = output->params.zero_point;
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d120      	bne.n	8008480 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 800843e:	f107 0314 	add.w	r3, r7, #20
 8008442:	461a      	mov	r2, r3
 8008444:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8008590 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8008448:	6a39      	ldr	r1, [r7, #32]
 800844a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff ff88 	bl	8008364 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8008454:	4603      	mov	r3, r0
 8008456:	76fb      	strb	r3, [r7, #27]
 8008458:	7efb      	ldrb	r3, [r7, #27]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 800845e:	7efb      	ldrb	r3, [r7, #27]
 8008460:	e091      	b.n	8008586 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8008462:	f107 0214 	add.w	r2, r7, #20
 8008466:	1d3b      	adds	r3, r7, #4
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7fb fd65 	bl	8003f3a <_ZSt3maxIlERKT_S2_S2_>
 8008470:	4603      	mov	r3, r0
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008476:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	e081      	b.n	8008584 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	2b03      	cmp	r3, #3
 8008484:	d13a      	bne.n	80084fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 8008486:	f107 0314 	add.w	r3, r7, #20
 800848a:	461a      	mov	r2, r3
 800848c:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8008590 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8008490:	6a39      	ldr	r1, [r7, #32]
 8008492:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f7ff ff64 	bl	8008364 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 800849c:	4603      	mov	r3, r0
 800849e:	777b      	strb	r3, [r7, #29]
 80084a0:	7f7b      	ldrb	r3, [r7, #29]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 80084a6:	7f7b      	ldrb	r3, [r7, #29]
 80084a8:	e06d      	b.n	8008586 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80084aa:	f107 0214 	add.w	r2, r7, #20
 80084ae:	1d3b      	adds	r3, r7, #4
 80084b0:	4611      	mov	r1, r2
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fb fd41 	bl	8003f3a <_ZSt3maxIlERKT_S2_S2_>
 80084b8:	4603      	mov	r3, r0
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084be:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 80084c0:	f107 0314 	add.w	r3, r7, #20
 80084c4:	461a      	mov	r2, r3
 80084c6:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 80084ca:	6a39      	ldr	r1, [r7, #32]
 80084cc:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff ff47 	bl	8008364 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80084d6:	4603      	mov	r3, r0
 80084d8:	773b      	strb	r3, [r7, #28]
 80084da:	7f3b      	ldrb	r3, [r7, #28]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 80084e0:	7f3b      	ldrb	r3, [r7, #28]
 80084e2:	e050      	b.n	8008586 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 80084e4:	f107 0214 	add.w	r2, r7, #20
 80084e8:	463b      	mov	r3, r7
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fb fd10 	bl	8003f12 <_ZSt3minIlERKT_S2_S2_>
 80084f2:	4603      	mov	r3, r0
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e043      	b.n	8008584 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d13a      	bne.n	8008578 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 8008502:	f107 0314 	add.w	r3, r7, #20
 8008506:	461a      	mov	r2, r3
 8008508:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800850c:	6a39      	ldr	r1, [r7, #32]
 800850e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff ff26 	bl	8008364 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8008518:	4603      	mov	r3, r0
 800851a:	77fb      	strb	r3, [r7, #31]
 800851c:	7ffb      	ldrb	r3, [r7, #31]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 8008522:	7ffb      	ldrb	r3, [r7, #31]
 8008524:	e02f      	b.n	8008586 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8008526:	f107 0214 	add.w	r2, r7, #20
 800852a:	1d3b      	adds	r3, r7, #4
 800852c:	4611      	mov	r1, r2
 800852e:	4618      	mov	r0, r3
 8008530:	f7fb fd03 	bl	8003f3a <_ZSt3maxIlERKT_S2_S2_>
 8008534:	4603      	mov	r3, r0
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800853a:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 800853c:	f107 0314 	add.w	r3, r7, #20
 8008540:	461a      	mov	r2, r3
 8008542:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8008546:	6a39      	ldr	r1, [r7, #32]
 8008548:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f7ff ff09 	bl	8008364 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8008552:	4603      	mov	r3, r0
 8008554:	77bb      	strb	r3, [r7, #30]
 8008556:	7fbb      	ldrb	r3, [r7, #30]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 800855c:	7fbb      	ldrb	r3, [r7, #30]
 800855e:	e012      	b.n	8008586 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8008560:	f107 0214 	add.w	r2, r7, #20
 8008564:	463b      	mov	r3, r7
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7fb fcd2 	bl	8003f12 <_ZSt3minIlERKT_S2_S2_>
 800856e:	4603      	mov	r3, r0
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	e005      	b.n	8008584 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008582:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3728      	adds	r7, #40	@ 0x28
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	00000000 	.word	0x00000000

08008594 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8008594:	b590      	push	{r4, r7, lr}
 8008596:	b08b      	sub	sp, #44	@ 0x2c
 8008598:	af04      	add	r7, sp, #16
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	607a      	str	r2, [r7, #4]
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	460b      	mov	r3, r1
 80085a2:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d108      	bne.n	80085c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 80085b4:	f7ff fde9 	bl	800818a <_ZNSt14numeric_limitsIhE3minEv>
 80085b8:	4603      	mov	r3, r0
 80085ba:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 80085bc:	f7ff fded 	bl	800819a <_ZNSt14numeric_limitsIhE3maxEv>
 80085c0:	4603      	mov	r3, r0
 80085c2:	613b      	str	r3, [r7, #16]
 80085c4:	e025      	b.n	8008612 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b09      	cmp	r3, #9
 80085cc:	d108      	bne.n	80085e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80085ce:	f7ff fdcb 	bl	8008168 <_ZNSt14numeric_limitsIaE3minEv>
 80085d2:	4603      	mov	r3, r0
 80085d4:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80085d6:	f7ff fdd0 	bl	800817a <_ZNSt14numeric_limitsIaE3maxEv>
 80085da:	4603      	mov	r3, r0
 80085dc:	613b      	str	r3, [r7, #16]
 80085de:	e018      	b.n	8008612 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b07      	cmp	r3, #7
 80085e6:	d108      	bne.n	80085fa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80085e8:	f7ff fda2 	bl	8008130 <_ZNSt14numeric_limitsIsE3minEv>
 80085ec:	4603      	mov	r3, r0
 80085ee:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80085f0:	f7ff fda8 	bl	8008144 <_ZNSt14numeric_limitsIsE3maxEv>
 80085f4:	4603      	mov	r3, r0
 80085f6:	613b      	str	r3, [r7, #16]
 80085f8:	e00b      	b.n	8008612 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	691c      	ldr	r4, [r3, #16]
 80085fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008638 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	f240 138f 	movw	r3, #399	@ 0x18f
 8008606:	4a0d      	ldr	r2, [pc, #52]	@ (800863c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8008608:	490d      	ldr	r1, [pc, #52]	@ (8008640 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	47a0      	blx	r4
 800860e:	2301      	movs	r3, #1
 8008610:	e00d      	b.n	800862e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 8008612:	7af9      	ldrb	r1, [r7, #11]
 8008614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008616:	9302      	str	r3, [sp, #8]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7ff fef9 	bl	800841c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 800862a:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 800862c:	bf00      	nop
}
 800862e:	4618      	mov	r0, r3
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	bd90      	pop	{r4, r7, pc}
 8008636:	bf00      	nop
 8008638:	0800ff60 	.word	0x0800ff60
 800863c:	0800fcc8 	.word	0x0800fcc8
 8008640:	0800fdc4 	.word	0x0800fdc4

08008644 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:
  int32_t DimensionsCount() const { return size_; }
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <_ZN6tflite14AlignPointerUpEPhj>:
#include "edge-impulse-sdk/tensorflow/lite/micro/flatbuffer_conversions_bridge.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4413      	add	r3, r2
 8008670:	1e5a      	subs	r2, r3, #1
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	fbb2 f3f3 	udiv	r3, r2, r3
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800867e:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8008680:	68bb      	ldr	r3, [r7, #8]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 f854 	bl	800874c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80086a4:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80086aa:	2300      	movs	r3, #0
 80086ac:	61bb      	str	r3, [r7, #24]
 80086ae:	e011      	b.n	80086d4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	4613      	mov	r3, r2
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	461a      	mov	r2, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	4413      	add	r3, r2
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d102      	bne.n	80086ce <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	3301      	adds	r3, #1
 80086cc:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	3301      	adds	r3, #1
 80086d2:	61bb      	str	r3, [r7, #24]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d3e8      	bcc.n	80086b0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	2b0b      	cmp	r3, #11
 80086e2:	d905      	bls.n	80086f0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 80086e4:	4917      	ldr	r1, [pc, #92]	@ (8008744 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 80086e6:	4818      	ldr	r0, [pc, #96]	@ (8008748 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb8>)
 80086e8:	f000 f83f 	bl	800876a <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e024      	b.n	800873a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	699a      	ldr	r2, [r3, #24]
 80086f4:	4613      	mov	r3, r2
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	4413      	add	r3, r2
 8008702:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	461a      	mov	r2, r3
 8008708:	2300      	movs	r3, #0
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	6053      	str	r3, [r2, #4]
 800870e:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f04f 32ff 	mov.w	r2, #4294967295
 800871c:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	461a      	mov	r2, r3
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3720      	adds	r7, #32
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	08011430 	.word	0x08011430
 8008748:	08010144 	.word	0x08010144

0800874c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
  }

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	2104      	movs	r1, #4
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff ff7e 	bl	800865c <_ZN6tflite14AlignPointerUpEPhj>
 8008760:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>:
namespace tflite {

// From
// https://stackoverflow.com/questions/23235910/variadic-unused-function-macro
template <typename... Args>
void Unused(Args&&... args) {
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
  (void)(sizeof...(args));
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <_ZN6tflite10MicroGraph14GetAllocationsEv>:
    current_subgraph_index_ = subgraph_idx;
  }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
#include <cstdint>

#include "edge-impulse-sdk/tensorflow/lite/micro/micro_log.h"

namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 80087be:	4a0c      	ldr	r2, [pc, #48]	@ (80087f0 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x40>)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	605a      	str	r2, [r3, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	609a      	str	r2, [r3, #8]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	60da      	str	r2, [r3, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	611a      	str	r2, [r3, #16]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	615a      	str	r2, [r3, #20]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	0801143c 	.word	0x0801143c

080087f4 <_ZN6tflite12MicroContextD1Ev>:

MicroContext::~MicroContext() {}
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	4a04      	ldr	r2, [pc, #16]	@ (8008810 <_ZN6tflite12MicroContextD1Ev+0x1c>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	0801143c 	.word	0x0801143c

08008814 <_ZN6tflite12MicroContextD0Ev>:
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7ff ffe9 	bl	80087f4 <_ZN6tflite12MicroContextD1Ev>
 8008822:	2118      	movs	r1, #24
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f002 f863 	bl	800a8f0 <_ZdlPvj>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  return allocator_.AllocatePersistentBuffer(bytes);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3314      	adds	r3, #20
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	4610      	mov	r0, r2
 8008850:	4798      	blx	r3
 8008852:	4603      	mov	r3, r0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroContext::RequestScratchBufferInArena(size_t bytes,
                                                       int* buffer_idx) {
 800885c:	b590      	push	{r4, r7, lr}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  return allocator_.RequestScratchBufferInArena(
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff ff85 	bl	8008780 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8008876:	4602      	mov	r2, r0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	4620      	mov	r0, r4
 800887e:	f7ff ff07 	bl	8008690 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 8008882:	4603      	mov	r3, r0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	bd90      	pop	{r4, r7, pc}

0800888c <_ZN6tflite12MicroContext16GetScratchBufferEi>:

void* MicroContext::GetScratchBuffer(int buffer_idx) {
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691a      	ldr	r2, [r3, #16]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
  return handle->data;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 80088b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af02      	add	r7, sp, #8
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685d      	ldr	r5, [r3, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3304      	adds	r3, #4
 80088ca:	681c      	ldr	r4, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68de      	ldr	r6, [r3, #12]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff ff5f 	bl	8008798 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80088da:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff ff4d 	bl	8008780 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80088e6:	4603      	mov	r3, r0
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	4642      	mov	r2, r8
 80088ee:	4631      	mov	r1, r6
 80088f0:	4628      	mov	r0, r5
 80088f2:	47a0      	blx	r4
 80088f4:	4603      	mov	r3, r0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008900 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:

int MicroContext::GetTensorIndex(int index, int max_size,
                                 const int* tensor_indices) {
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	db0f      	blt.n	8008934 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	da0b      	bge.n	8008934 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	4413      	add	r3, r2
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d001      	beq.n	8008934 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
      return tensor_index;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	e001      	b.n	8008938 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x38>
    }
  }
  return -1;
 8008934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008938:	4618      	mov	r0, r3
 800893a:	371c      	adds	r7, #28
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3304      	adds	r3, #4
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7ff ffce 	bl	8008900 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 8008964:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	da01      	bge.n	8008970 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 800896c:	2300      	movs	r3, #0
 800896e:	e008      	b.n	8008982 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3314      	adds	r3, #20
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6979      	ldr	r1, [r7, #20]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	4798      	blx	r3
 800897e:	4603      	mov	r3, r0
 8008980:	bf00      	nop
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 800898a:	b580      	push	{r7, lr}
 800898c:	b086      	sub	sp, #24
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	3304      	adds	r3, #4
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7ff ffab 	bl	8008900 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 80089aa:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	da01      	bge.n	80089b6 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 80089b2:	2300      	movs	r3, #0
 80089b4:	e008      	b.n	80089c8 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3314      	adds	r3, #20
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6979      	ldr	r1, [r7, #20]
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	4798      	blx	r3
 80089c4:	4603      	mov	r3, r0
 80089c6:	bf00      	nop
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempIntermediateTensor(
    const TfLiteNode* node, int index) {
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	681a      	ldr	r2, [r3, #0]
                                          node->intermediates->data);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	3304      	adds	r3, #4
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f7ff ff88 	bl	8008900 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 80089f0:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da01      	bge.n	80089fc <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 80089f8:	2300      	movs	r3, #0
 80089fa:	e008      	b.n	8008a0e <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3314      	adds	r3, #20
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6979      	ldr	r1, [r7, #20]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	4798      	blx	r3
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	bf00      	nop
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	4610      	mov	r0, r2
 8008a32:	4798      	blx	r3
 8008a34:	bf00      	nop
}
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <_ZN6tflite12MicroContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
 8008a3c:	b590      	push	{r4, r7, lr}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff fea4 	bl	8008798 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8008a50:	4604      	mov	r4, r0
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fe92 	bl	8008780 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	4423      	add	r3, r4
              .tensors[tensor_idx];
 8008a62:	6859      	ldr	r1, [r3, #4]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	4613      	mov	r3, r2
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd90      	pop	{r4, r7, pc}

08008a78 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 8008a78:	b40e      	push	{r1, r2, r3}
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8008a82:	f107 0320 	add.w	r3, r7, #32
 8008a86:	60fb      	str	r3, [r7, #12]
  Log(format, args);
 8008a88:	68f9      	ldr	r1, [r7, #12]
 8008a8a:	69f8      	ldr	r0, [r7, #28]
 8008a8c:	f000 f81e 	bl	8008acc <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 8008a90:	bf00      	nop
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a9a:	b003      	add	sp, #12
 8008a9c:	4770      	bx	lr

08008a9e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>:
void Unused(Args&&... args) {
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <_Z3LogPKcSt9__va_list>:
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
#include "edge-impulse-sdk/tensorflow/lite/micro/debug_log.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_string.h"
#endif

void Log(const char* format, va_list args) {
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8008af0:	f003 fa5a 	bl	800bfa8 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x12>
 8008b0e:	f003 fa4b 	bl	800bfa8 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b082      	sub	sp, #8
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8008b2c:	f003 fa3c 	bl	800bfa8 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 8008b4a:	f003 fa2d 	bl	800bfa8 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	da01      	bge.n	8008b6e <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8008b6a:	f003 fa1d 	bl	800bfa8 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	db01      	blt.n	8008b7c <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8008b78:	f003 fa16 	bl	800bfa8 <abort>
    return dims_[i];
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	685b      	ldr	r3, [r3, #4]
  }
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	4b04      	ldr	r3, [pc, #16]	@ (8008ba8 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	7f7fffff 	.word	0x7f7fffff

08008bac <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 8008bb4:	ee07 3a90 	vmov	s15, r3
 8008bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
      break;
  }
}

template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	ed87 0a03 	vstr	s0, [r7, #12]
 8008bce:	edc7 0a02 	vstr	s1, [r7, #8]
 8008bd2:	ed87 1a01 	vstr	s2, [r7, #4]
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
 8008bd6:	f107 0208 	add.w	r2, r7, #8
 8008bda:	f107 030c 	add.w	r3, r7, #12
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fb f84f 	bl	8003c84 <_ZSt3maxIfERKT_S2_S2_>
 8008be6:	4602      	mov	r2, r0
 8008be8:	1d3b      	adds	r3, r7, #4
 8008bea:	4619      	mov	r1, r3
 8008bec:	4610      	mov	r0, r2
 8008bee:	f7ff f9b9 	bl	8007f64 <_ZSt3minIfERKT_S2_S2_>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	ee07 3a90 	vmov	s15, r3
}
 8008bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d10b      	bne.n	8008c30 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8008c20:	f7ff ffb6 	bl	8008b90 <_ZNSt14numeric_limitsIfE3maxEv>
 8008c24:	eef0 7a40 	vmov.f32	s15, s0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8008c2e:	e023      	b.n	8008c78 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d107      	bne.n	8008c46 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f04f 0200 	mov.w	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a0f      	ldr	r2, [pc, #60]	@ (8008c80 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8008c42:	601a      	str	r2, [r3, #0]
}
 8008c44:	e018      	b.n	8008c78 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d107      	bne.n	8008c5c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c84 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8008c50:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008c58:	601a      	str	r2, [r3, #0]
}
 8008c5a:	e00d      	b.n	8008c78 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8008c5c:	f7ff ffa6 	bl	8008bac <_ZNSt14numeric_limitsIfE6lowestEv>
 8008c60:	eef0 7a40 	vmov.f32	s15, s0
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8008c6a:	f7ff ff91 	bl	8008b90 <_ZNSt14numeric_limitsIfE3maxEv>
 8008c6e:	eef0 7a40 	vmov.f32	s15, s0
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	edc3 7a00 	vstr	s15, [r3]
}
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	40c00000 	.word	0x40c00000
 8008c84:	bf800000 	.word	0xbf800000

08008c88 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
}
 8008c94:	bf00      	nop
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8008ca0:	b590      	push	{r4, r7, lr}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7ff ff52 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff ff4d 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	d001      	beq.n	8008cca <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8008cc6:	f003 f96f 	bl	800bfa8 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff ff44 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff ff3e 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	f107 0214 	add.w	r2, r7, #20
 8008ce6:	f107 0310 	add.w	r3, r7, #16
 8008cea:	4611      	mov	r1, r2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fb f910 	bl	8003f12 <_ZSt3minIlERKT_S2_S2_>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	681b      	ldr	r3, [r3, #0]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd90      	pop	{r4, r7, pc}

08008cfe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b086      	sub	sp, #24
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff fc9b 	bl	8008644 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8008d0e:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	db03      	blt.n	8008d1e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	db01      	blt.n	8008d22 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8008d1e:	f003 f943 	bl	800bfa8 <abort>
  const auto* dims_data = shape.DimsData();
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff f846 	bl	8007db4 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8008d28:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8008d2e:	2300      	movs	r3, #0
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	e011      	b.n	8008d58 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d005      	beq.n	8008d48 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	4413      	add	r3, r2
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	e000      	b.n	8008d4a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	3301      	adds	r3, #1
 8008d56:	613b      	str	r3, [r7, #16]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	dbe9      	blt.n	8008d34 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 8008d60:	697b      	ldr	r3, [r7, #20]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8008d6a:	b590      	push	{r4, r7, lr}
 8008d6c:	b091      	sub	sp, #68	@ 0x44
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
 8008d76:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  const float output_activation_max = params.float_activation_max;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	627b      	str	r3, [r7, #36]	@ 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8008d84:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8008d86:	f7ff fc5d 	bl	8008644 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8008d8a:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8008d8c:	6838      	ldr	r0, [r7, #0]
 8008d8e:	f7ff fc59 	bl	8008644 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8008d92:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8008d9c:	f7ff ffaf 	bl	8008cfe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8008da0:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	1e99      	subs	r1, r3, #2
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008dac:	6838      	ldr	r0, [r7, #0]
 8008dae:	f7ff ff77 	bl	8008ca0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8008db2:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	4619      	mov	r1, r3
 8008dba:	6838      	ldr	r0, [r7, #0]
 8008dbc:	f7ff fecd 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 8008dc0:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dc6:	e05e      	b.n	8008e86 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8008dc8:	2300      	movs	r3, #0
 8008dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008dcc:	e054      	b.n	8008e78 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	637b      	str	r3, [r7, #52]	@ 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dd8:	e020      	b.n	8008e1c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 8008dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	fb03 f202 	mul.w	r2, r3, r2
 8008de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	4413      	add	r3, r2
 8008dec:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	fb03 f202 	mul.w	r2, r3, r2
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008e00:	4413      	add	r3, r2
 8008e02:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8008e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8008e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e12:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	3301      	adds	r3, #1
 8008e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	dbda      	blt.n	8008dda <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (bias_data) {
 8008e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d005      	beq.n	8008e3c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 8008e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e36:	4413      	add	r3, r2
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8008e3c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8008e40:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8008e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e4c:	fb03 f202 	mul.w	r2, r3, r2
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e58:	18d4      	adds	r4, r2, r3
 8008e5a:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8008e5e:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8008e62:	eeb0 0a67 	vmov.f32	s0, s15
 8008e66:	f7ff fead 	bl	8008bc4 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8008e6a:	eef0 7a40 	vmov.f32	s15, s0
 8008e6e:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8008e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e74:	3301      	adds	r3, #1
 8008e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	dba6      	blt.n	8008dce <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 8008e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e82:	3301      	adds	r3, #1
 8008e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	db9c      	blt.n	8008dc8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	3744      	adds	r7, #68	@ 0x44
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd90      	pop	{r4, r7, pc}

08008e98 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8008eac:	f003 f87c 	bl	800bfa8 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb4:	213c      	movs	r1, #60	@ 0x3c
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	4798      	blx	r3
 8008eba:	4603      	mov	r3, r0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8008ec4:	b5b0      	push	{r4, r5, r7, lr}
 8008ec6:	b0b2      	sub	sp, #200	@ 0xc8
 8008ec8:	af04      	add	r7, sp, #16
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8008ed6:	f003 f867 	bl	800bfa8 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8008ee2:	f003 f861 	bl	800bfa8 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  const auto params =
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff fdd1 	bl	8008a9e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8008efc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 8008f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3318      	adds	r3, #24
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4ab7      	ldr	r2, [pc, #732]	@ (80091e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8008f0c:	6812      	ldr	r2, [r2, #0]
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8008f14:	4798      	blx	r3
 8008f16:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8008f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x74>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691c      	ldr	r4, [r3, #16]
 8008f26:	4bb1      	ldr	r3, [pc, #708]	@ (80091ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	2347      	movs	r3, #71	@ 0x47
 8008f2c:	4ab0      	ldr	r2, [pc, #704]	@ (80091f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8008f2e:	49b1      	ldr	r1, [pc, #708]	@ (80091f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	47a0      	blx	r4
 8008f34:	2401      	movs	r4, #1
 8008f36:	e1a8      	b.n	800928a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 8008f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3318      	adds	r3, #24
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4aad      	ldr	r2, [pc, #692]	@ (80091f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
 8008f44:	6812      	ldr	r2, [r2, #0]
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8008f4c:	4798      	blx	r3
 8008f4e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 8008f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691c      	ldr	r4, [r3, #16]
 8008f5e:	4ba7      	ldr	r3, [pc, #668]	@ (80091fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	234a      	movs	r3, #74	@ 0x4a
 8008f64:	4aa2      	ldr	r2, [pc, #648]	@ (80091f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8008f66:	49a3      	ldr	r1, [pc, #652]	@ (80091f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	47a0      	blx	r4
 8008f6c:	2401      	movs	r4, #1
 8008f6e:	e18c      	b.n	800928a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 8008f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3318      	adds	r3, #24
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4aa1      	ldr	r2, [pc, #644]	@ (8009200 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
 8008f7c:	6812      	ldr	r2, [r2, #0]
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8008f84:	4798      	blx	r3
 8008f86:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 8008f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	331c      	adds	r3, #28
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a9b      	ldr	r2, [pc, #620]	@ (8009204 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
 8008f96:	6812      	ldr	r2, [r2, #0]
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8008f9e:	4798      	blx	r3
 8008fa0:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 8008fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691c      	ldr	r4, [r3, #16]
 8008fb0:	4b95      	ldr	r3, [pc, #596]	@ (8009208 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	234f      	movs	r3, #79	@ 0x4f
 8008fb6:	4a8e      	ldr	r2, [pc, #568]	@ (80091f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8008fb8:	498e      	ldr	r1, [pc, #568]	@ (80091f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	47a0      	blx	r4
 8008fbe:	2401      	movs	r4, #1
 8008fc0:	e163      	b.n	800928a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8008fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d01c      	beq.n	800900c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	691c      	ldr	r4, [r3, #16]
 8008fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fe29 	bl	8007c34 <TfLiteTypeGetName>
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe fe22 	bl	8007c34 <TfLiteTypeGetName>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	9303      	str	r3, [sp, #12]
 8008ff4:	9502      	str	r5, [sp, #8]
 8008ff6:	4b85      	ldr	r3, [pc, #532]	@ (800920c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	4b85      	ldr	r3, [pc, #532]	@ (8009210 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	2351      	movs	r3, #81	@ 0x51
 8009000:	4a7b      	ldr	r2, [pc, #492]	@ (80091f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8009002:	4984      	ldr	r1, [pc, #528]	@ (8009214 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	47a0      	blx	r4
 8009008:	2401      	movs	r4, #1
 800900a:	e13e      	b.n	800928a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  const RuntimeShape filter_shape = GetTensorShape(filter);
 800900c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009010:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe ff14 	bl	8007e42 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800901a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800901e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe ff0d 	bl	8007e42 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8009028:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff fb09 	bl	8008644 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009032:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
  const int output_dim_count = output_shape.DimensionsCount();
 8009036:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fb02 	bl	8008644 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009040:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  cmsis_nn_dims filter_dims;
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8009044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009048:	1e5a      	subs	r2, r3, #1
 800904a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fd82 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 8009056:	4603      	mov	r3, r0
 8009058:	627b      	str	r3, [r7, #36]	@ 0x24
  filter_dims.h = 1;
 800905a:	2301      	movs	r3, #1
 800905c:	62bb      	str	r3, [r7, #40]	@ 0x28
  filter_dims.w = 1;
 800905e:	2301      	movs	r3, #1
 8009060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 8009062:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009066:	1e5a      	subs	r2, r3, #1
 8009068:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff fd73 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 8009074:	4603      	mov	r3, r0
 8009076:	633b      	str	r3, [r7, #48]	@ 0x30

  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8009078:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800907c:	1e5a      	subs	r2, r3, #1
 800907e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009082:	4611      	mov	r1, r2
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff fd68 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 800908a:	4602      	mov	r2, r0
 800908c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009090:	635a      	str	r2, [r3, #52]	@ 0x34
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8009092:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009096:	1e5a      	subs	r2, r3, #1
 8009098:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff fe2d 	bl	8008cfe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80090a4:	4602      	mov	r2, r0
 80090a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090aa:	631a      	str	r2, [r3, #48]	@ 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 80090ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090b0:	1e5a      	subs	r2, r3, #1
 80090b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80090b6:	4611      	mov	r1, r2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7ff fd4e 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 80090be:	4602      	mov	r2, r0
 80090c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090c4:	639a      	str	r2, [r3, #56]	@ 0x38

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 80090c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090ca:	f04f 32ff 	mov.w	r2, #4294967295
 80090ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 80090d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80090d4:	7819      	ldrb	r1, [r3, #0]
 80090d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090e0:	9303      	str	r3, [sp, #12]
 80090e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090e6:	9302      	str	r3, [sp, #8]
 80090e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fa31 	bl	8009560 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 80090fe:	4603      	mov	r3, r0
 8009100:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8009104:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24e>
 800910c:	f897 4093 	ldrb.w	r4, [r7, #147]	@ 0x93
 8009110:	e0b1      	b.n	8009276 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  int32_t buf_size = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  if (input->type == kTfLiteInt16) {
 8009118:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b07      	cmp	r3, #7
 8009120:	d10f      	bne.n	8009142 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27e>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I16
        MicroPrintf("Filter data type %s currently not supported.",
 8009122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe fd83 	bl	8007c34 <TfLiteTypeGetName>
 800912e:	4603      	mov	r3, r0
 8009130:	667b      	str	r3, [r7, #100]	@ 0x64
 8009132:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009136:	4619      	mov	r1, r3
 8009138:	4837      	ldr	r0, [pc, #220]	@ (8009218 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 800913a:	f7ff fcbc 	bl	8008ab6 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 800913e:	2401      	movs	r4, #1
 8009140:	e099      	b.n	8009276 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
#endif
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
  } else if (input->type == kTfLiteInt8) {
 8009142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b09      	cmp	r3, #9
 800914a:	d10f      	bne.n	800916c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
 800914c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe fd6e 	bl	8007c34 <TfLiteTypeGetName>
 8009158:	4603      	mov	r3, r0
 800915a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800915c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8009160:	4619      	mov	r1, r3
 8009162:	482d      	ldr	r0, [pc, #180]	@ (8009218 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 8009164:	f7ff fca7 	bl	8008ab6 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8009168:	2401      	movs	r4, #1
 800916a:	e084      	b.n	8009276 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
    }
#endif
  }

  if (filter->type == kTfLiteInt4) {
 800916c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b12      	cmp	r3, #18
 8009174:	d121      	bne.n	80091ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f6>
    int filter_size =
        RuntimeShape(filter->dims->size,
 8009176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 800917e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 8009186:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fde8 	bl	8007d60 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 8009190:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe fe31 	bl	8007dfc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800919a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        RuntimeShape(filter->dims->size,
 800919e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe fdef 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ac:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80091b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80091b4:	3220      	adds	r2, #32
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (buf_size > 0) {
 80091ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	dd2c      	ble.n	800921c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c6:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80091ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80091ce:	322c      	adds	r2, #44	@ 0x2c
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	4798      	blx	r3
 80091d4:	4603      	mov	r3, r0
 80091d6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80091da:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d01c      	beq.n	800921c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
 80091e2:	f897 4087 	ldrb.w	r4, [r7, #135]	@ 0x87
 80091e6:	e046      	b.n	8009276 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
 80091e8:	08011468 	.word	0x08011468
 80091ec:	08010840 	.word	0x08010840
 80091f0:	08010794 	.word	0x08010794
 80091f4:	08010828 	.word	0x08010828
 80091f8:	0801146c 	.word	0x0801146c
 80091fc:	08010854 	.word	0x08010854
 8009200:	08011470 	.word	0x08011470
 8009204:	08011474 	.word	0x08011474
 8009208:	08010868 	.word	0x08010868
 800920c:	08010898 	.word	0x08010898
 8009210:	080108a8 	.word	0x080108a8
 8009214:	0801087c 	.word	0x0801087c
 8009218:	080108b4 	.word	0x080108b4
        context, buf_size, &data->buffer_idx));
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 800921c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3324      	adds	r3, #36	@ 0x24
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800922a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800922e:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 8009230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3324      	adds	r3, #36	@ 0x24
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800923e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8009242:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 8009244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3324      	adds	r3, #36	@ 0x24
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009252:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8009256:	4798      	blx	r3
  if (bias != nullptr) {
 8009258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b0>
    micro_context->DeallocateTempTfLiteTensor(bias);
 8009260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3324      	adds	r3, #36	@ 0x24
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800926e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8009272:	4798      	blx	r3
  }

  return kTfLiteOk;
 8009274:	2400      	movs	r4, #0
}
 8009276:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fd83 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
 8009280:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe fd7e 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
 800928a:	4623      	mov	r3, r4
 800928c:	4618      	mov	r0, r3
 800928e:	37b8      	adds	r7, #184	@ 0xb8
 8009290:	46bd      	mov	sp, r7
 8009292:	bdb0      	pop	{r4, r5, r7, pc}

08009294 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8009294:	b5b0      	push	{r4, r5, r7, lr}
 8009296:	b0b8      	sub	sp, #224	@ 0xe0
 8009298:	af06      	add	r7, sp, #24
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80092a6:	f002 fe7f 	bl	800bfa8 <abort>
  const auto* params =
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 80092b2:	4b7f      	ldr	r3, [pc, #508]	@ (80094b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fa21 	bl	8009702 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80092c0:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 80092c4:	4b7b      	ldr	r3, [pc, #492]	@ (80094b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	461a      	mov	r2, r3
 80092ca:	6839      	ldr	r1, [r7, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fa18 	bl	8009702 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80092d2:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 80092d6:	4b78      	ldr	r3, [pc, #480]	@ (80094b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa0f 	bl	8009702 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80092e4:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 80092e8:	4b74      	ldr	r3, [pc, #464]	@ (80094bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fa16 	bl	8009722 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80092f6:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4

  TFLITE_DCHECK(node->user_data != nullptr);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 8009302:	f002 fe51 	bl	800bfa8 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 800930e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009312:	6a1a      	ldr	r2, [r3, #32]
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
 8009314:	f107 0008 	add.w	r0, r7, #8
 8009318:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	f000 fa42 	bl	80097a6 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8009322:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009326:	7a1b      	ldrb	r3, [r3, #8]
 8009328:	2b09      	cmp	r3, #9
 800932a:	d06e      	beq.n	800940a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
 800932c:	2b09      	cmp	r3, #9
 800932e:	f300 80a6 	bgt.w	800947e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
 8009332:	2b01      	cmp	r3, #1
 8009334:	d003      	beq.n	800933e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8009336:	2b07      	cmp	r3, #7
 8009338:	f000 8090 	beq.w	800945c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 800933c:	e09f      	b.n	800947e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      MicroPrintf("Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      const float* bias_data =
          tflite::micro::GetOptionalTensorData<float>(bias);
 800933e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8009342:	f000 f8db 	bl	80094fc <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8009346:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 800934a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800934e:	781a      	ldrb	r2, [r3, #0]
 8009350:	f107 0314 	add.w	r3, r7, #20
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f8ed 	bl	8009536 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 800935c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009360:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f9fc 	bl	8009762 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800936a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800936e:	f7ff fbb8 	bl	8008ae2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8009372:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8009374:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009378:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800937c:	4618      	mov	r0, r3
 800937e:	f000 f9f0 	bl	8009762 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8009382:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8009386:	f7ff fbac 	bl	8008ae2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800938a:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias), bias_data,
 800938c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009390:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f9e4 	bl	8009762 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 800939a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800939e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f9dd 	bl	8009762 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80093a8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80093ac:	f7ff fba8 	bl	8008b00 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80093b6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80093ba:	f107 0014 	add.w	r0, r7, #20
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093ca:	9302      	str	r3, [sp, #8]
 80093cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	9400      	str	r4, [sp, #0]
 80093d4:	4613      	mov	r3, r2
 80093d6:	462a      	mov	r2, r5
 80093d8:	f7ff fcc7 	bl	8008d6a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 80093dc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe fcd0 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias), bias_data,
 80093e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fccb 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80093f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fe fcc6 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80093fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe fcc1 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8009404:	bf00      	nop
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
 8009406:	2300      	movs	r3, #0
 8009408:	e04d      	b.n	80094a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      switch (filter_int8.type) {
 800940a:	7c3b      	ldrb	r3, [r7, #16]
 800940c:	2b09      	cmp	r3, #9
 800940e:	d110      	bne.n	8009432 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19e>
        MicroPrintf("Filter data type %s currently not supported.",
 8009410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009414:	7a1b      	ldrb	r3, [r3, #8]
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fc0c 	bl	8007c34 <TfLiteTypeGetName>
 800941c:	4603      	mov	r3, r0
 800941e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009422:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009426:	4619      	mov	r1, r3
 8009428:	4825      	ldr	r0, [pc, #148]	@ (80094c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 800942a:	f7ff fb44 	bl	8008ab6 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 800942e:	2301      	movs	r3, #1
 8009430:	e039      	b.n	80094a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
          MicroPrintf("Filter Type %s (%d) not supported.",
 8009432:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009436:	7a1b      	ldrb	r3, [r3, #8]
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fbfb 	bl	8007c34 <TfLiteTypeGetName>
 800943e:	4603      	mov	r3, r0
 8009440:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009448:	f103 0208 	add.w	r2, r3, #8
 800944c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8009450:	4619      	mov	r1, r3
 8009452:	481c      	ldr	r0, [pc, #112]	@ (80094c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>)
 8009454:	f000 f863 	bl	800951e <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>
          return kTfLiteError;
 8009458:	2301      	movs	r3, #1
 800945a:	e024      	b.n	80094a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
        MicroPrintf("Filter data type %s currently not supported.",
 800945c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009460:	7a1b      	ldrb	r3, [r3, #8]
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fbe6 	bl	8007c34 <TfLiteTypeGetName>
 8009468:	4603      	mov	r3, r0
 800946a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800946e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8009472:	4619      	mov	r1, r3
 8009474:	4812      	ldr	r0, [pc, #72]	@ (80094c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8009476:	f7ff fb1e 	bl	8008ab6 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 800947a:	2301      	movs	r3, #1
 800947c:	e013      	b.n	80094a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 800947e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009482:	7a1b      	ldrb	r3, [r3, #8]
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe fbd5 	bl	8007c34 <TfLiteTypeGetName>
 800948a:	4603      	mov	r3, r0
 800948c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009494:	f103 0208 	add.w	r2, r3, #8
 8009498:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800949c:	4619      	mov	r1, r3
 800949e:	480a      	ldr	r0, [pc, #40]	@ (80094c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x234>)
 80094a0:	f7ff fbf2 	bl	8008c88 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
      return kTfLiteError;
 80094a4:	2301      	movs	r3, #1
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	37c8      	adds	r7, #200	@ 0xc8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bdb0      	pop	{r4, r5, r7, pc}
 80094ae:	bf00      	nop
 80094b0:	08011468 	.word	0x08011468
 80094b4:	0801146c 	.word	0x0801146c
 80094b8:	08011470 	.word	0x08011470
 80094bc:	08011474 	.word	0x08011474
 80094c0:	080108b4 	.word	0x080108b4
 80094c4:	08010b24 	.word	0x08010b24
 80094c8:	08010b48 	.word	0x08010b48

080094cc <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	2300      	movs	r3, #0
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	4b05      	ldr	r3, [pc, #20]	@ (80094f0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x24>)
 80094dc:	4a05      	ldr	r2, [pc, #20]	@ (80094f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 80094de:	4906      	ldr	r1, [pc, #24]	@ (80094f8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 80094e0:	f000 f8b6 	bl	8009650 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 80094e4:	bf00      	nop
}
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	08009295 	.word	0x08009295
 80094f4:	08008ec5 	.word	0x08008ec5
 80094f8:	08008e99 	.word	0x08008e99

080094fc <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d002      	beq.n	8009510 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x14>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 800950e:	e000      	b.n	8009512 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  op_params.quantized_activation_max = op_data.output_activation_max;
  return op_params;
}

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f103 0220 	add.w	r2, r3, #32
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f103 011c 	add.w	r1, r3, #28
 800954e:	78fb      	ldrb	r3, [r7, #3]
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff fb57 	bl	8008c04 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8009556:	bf00      	nop
}
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8009560:	b580      	push	{r7, lr}
 8009562:	b08a      	sub	sp, #40	@ 0x28
 8009564:	af02      	add	r7, sp, #8
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	607b      	str	r3, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	72fb      	strb	r3, [r7, #11]
 800956e:	4613      	mov	r3, r2
 8009570:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8009572:	7abb      	ldrb	r3, [r7, #10]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d044      	beq.n	8009602 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8009584:	f107 0310 	add.w	r3, r7, #16
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009592:	6879      	ldr	r1, [r7, #4]
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7fe fe0b 	bl	80081b0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800959a:	4603      	mov	r3, r0
 800959c:	77fb      	strb	r3, [r7, #31]
 800959e:	7ffb      	ldrb	r3, [r7, #31]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 80095a4:	7ffb      	ldrb	r3, [r7, #31]
 80095a6:	e02d      	b.n	8009604 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 80095a8:	ed97 7b04 	vldr	d7, [r7, #16]
 80095ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b0:	3304      	adds	r3, #4
 80095b2:	4619      	mov	r1, r3
 80095b4:	4610      	mov	r0, r2
 80095b6:	eeb0 0a47 	vmov.f32	s0, s14
 80095ba:	eef0 0a67 	vmov.f32	s1, s15
 80095be:	f7fe fcf3 	bl	8007fa8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	691a      	ldr	r2, [r3, #16]
 80095c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c8:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 80095ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 80095d2:	f002 fce9 	bl	800bfa8 <abort>
    data->filter_zero_point = filter->params.zero_point;
 80095d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095dc:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 80095de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e0:	691a      	ldr	r2, [r3, #16]
 80095e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e4:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 80095e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e8:	f103 0208 	add.w	r2, r3, #8
 80095ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ee:	330c      	adds	r3, #12
 80095f0:	7af9      	ldrb	r1, [r7, #11]
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	4613      	mov	r3, r2
 80095f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7fe ffcb 	bl	8008594 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80095fe:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8009600:	e000      	b.n	8009604 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3720      	adds	r7, #32
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	db0f      	blt.n	8009640 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	da0b      	bge.n	8009640 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	4413      	add	r3, r2
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	d001      	beq.n	8009640 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	e001      	b.n	8009644 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8009640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009644:	4618      	mov	r0, r3
 8009646:	371c      	adds	r7, #28
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	603b      	str	r3, [r7, #0]
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	609a      	str	r2, [r3, #8]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	60da      	str	r2, [r3, #12]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	611a      	str	r2, [r3, #16]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	615a      	str	r2, [r3, #20]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	619a      	str	r2, [r3, #24]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	61da      	str	r2, [r3, #28]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	621a      	str	r2, [r3, #32]
}
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d101      	bne.n	80096b6 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80096b2:	f002 fc79 	bl	800bfa8 <abort>
  TFLITE_DCHECK(node != nullptr);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80096bc:	f002 fc74 	bl	800bfa8 <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 80096c4:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff ff9c 	bl	800960c <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80096d4:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	da01      	bge.n	80096e0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 80096dc:	2300      	movs	r3, #0
 80096de:	e00c      	b.n	80096fa <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	6819      	ldr	r1, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	4619      	mov	r1, r3
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	4790      	blx	r2
 80096f6:	4603      	mov	r3, r0
 80096f8:	bf00      	nop
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	60f8      	str	r0, [r7, #12]
 800970a:	60b9      	str	r1, [r7, #8]
 800970c:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	68b9      	ldr	r1, [r7, #8]
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7ff ffc4 	bl	80096a0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009718:	4603      	mov	r3, r0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8009734:	f002 fc38 	bl	800bfa8 <abort>
  TFLITE_DCHECK(node != nullptr);
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800973e:	f002 fc33 	bl	800bfa8 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	6859      	ldr	r1, [r3, #4]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	4619      	mov	r1, r3
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	4790      	blx	r2
 8009758:	4603      	mov	r3, r0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8009762:	b580      	push	{r7, lr}
 8009764:	b086      	sub	sp, #24
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d103      	bne.n	8009782 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7fe fae2 	bl	8007d44 <_ZN6tflite12RuntimeShapeC1Ev>
 8009780:	e00d      	b.n	800979e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	3304      	adds	r3, #4
 8009792:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	6939      	ldr	r1, [r7, #16]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7fe fae1 	bl	8007d60 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 80097a6:	b5b0      	push	{r4, r5, r7, lr}
 80097a8:	b08e      	sub	sp, #56	@ 0x38
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	603b      	str	r3, [r7, #0]
  if (tensor->type != kTfLiteInt4) {
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	7a1b      	ldrb	r3, [r3, #8]
 80097b8:	2b12      	cmp	r3, #18
 80097ba:	d005      	beq.n	80097c8 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x22>
    return *tensor;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80097c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80097c6:	e033      	b.n	8009830 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x8a>
  }

  TfLiteEvalTensor new_tensor;
  new_tensor.data.data = static_cast<int8_t*>(
      context->GetScratchBuffer(context, scratch_buffer_index));
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097cc:	6879      	ldr	r1, [r7, #4]
 80097ce:	68b8      	ldr	r0, [r7, #8]
 80097d0:	4798      	blx	r3
 80097d2:	4603      	mov	r3, r0
  new_tensor.data.data = static_cast<int8_t*>(
 80097d4:	617b      	str	r3, [r7, #20]
  new_tensor.dims = tensor->dims;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	61bb      	str	r3, [r7, #24]
  new_tensor.type = kTfLiteInt8;
 80097dc:	2309      	movs	r3, #9
 80097de:	773b      	strb	r3, [r7, #28]
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 80097e0:	6838      	ldr	r0, [r7, #0]
 80097e2:	f7ff f99c 	bl	8008b1e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80097e6:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 80097e8:	f107 0320 	add.w	r3, r7, #32
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff ffb7 	bl	8009762 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 80097f4:	f107 0320 	add.w	r3, r7, #32
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe faff 	bl	8007dfc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80097fe:	4605      	mov	r5, r0
 8009800:	f107 0314 	add.w	r3, r7, #20
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff f999 	bl	8008b3c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800980a:	4603      	mov	r3, r0
 800980c:	461a      	mov	r2, r3
 800980e:	4629      	mov	r1, r5
 8009810:	4620      	mov	r0, r4
 8009812:	f7fe fb67 	bl	8007ee4 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 8009816:	f107 0320 	add.w	r3, r7, #32
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fab3 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	461c      	mov	r4, r3
 8009824:	f107 0314 	add.w	r3, r7, #20
 8009828:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800982c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	3738      	adds	r7, #56	@ 0x38
 8009834:	46bd      	mov	sp, r7
 8009836:	bdb0      	pop	{r4, r5, r7, pc}

08009838 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8009838:	b590      	push	{r4, r7, lr}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7fe fefd 	bl	8008644 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800984a:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]
 8009850:	e014      	b.n	800987c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	429a      	cmp	r2, r3
 8009858:	d00d      	beq.n	8009876 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800985a:	6979      	ldr	r1, [r7, #20]
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f7ff f97c 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 8009862:	4604      	mov	r4, r0
 8009864:	6979      	ldr	r1, [r7, #20]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff f977 	bl	8008b5a <_ZNK6tflite12RuntimeShape4DimsEi>
 800986c:	4603      	mov	r3, r0
 800986e:	429c      	cmp	r4, r3
 8009870:	d001      	beq.n	8009876 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 8009872:	f002 fb99 	bl	800bfa8 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	3301      	adds	r3, #1
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	429a      	cmp	r2, r3
 8009882:	dbe6      	blt.n	8009852 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8009884:	68b9      	ldr	r1, [r7, #8]
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7ff fa39 	bl	8008cfe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800988c:	4603      	mov	r3, r0
}
 800988e:	4618      	mov	r0, r3
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	bd90      	pop	{r4, r7, pc}

08009896 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8009896:	b580      	push	{r7, lr}
 8009898:	ed2d 8b02 	vpush	{d8}
 800989c:	b08e      	sub	sp, #56	@ 0x38
 800989e:	af00      	add	r7, sp, #0
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	60b9      	str	r1, [r7, #8]
 80098a4:	607a      	str	r2, [r7, #4]
 80098a6:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80098a8:	68b8      	ldr	r0, [r7, #8]
 80098aa:	f7fe fecb 	bl	8008644 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80098ae:	4603      	mov	r3, r0
 80098b0:	3b01      	subs	r3, #1
 80098b2:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	6a39      	ldr	r1, [r7, #32]
 80098b8:	68b8      	ldr	r0, [r7, #8]
 80098ba:	f7ff ffbd 	bl	8009838 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80098be:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	6a39      	ldr	r1, [r7, #32]
 80098c6:	68b8      	ldr	r0, [r7, #8]
 80098c8:	f7ff f9ea 	bl	8008ca0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80098cc:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 80098ce:	2300      	movs	r3, #0
 80098d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d2:	e085      	b.n	80099e0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14a>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 80098d4:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 80098d8:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80098da:	2300      	movs	r3, #0
 80098dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80098de:	e014      	b.n	800990a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
      max = std::max(max, input_data[i * depth + c]);
 80098e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	fb03 f202 	mul.w	r2, r3, r2
 80098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	441a      	add	r2, r3
 80098f2:	f107 0310 	add.w	r3, r7, #16
 80098f6:	4611      	mov	r1, r2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fa f9c3 	bl	8003c84 <_ZSt3maxIfERKT_S2_S2_>
 80098fe:	4603      	mov	r3, r0
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	3301      	adds	r3, #1
 8009908:	633b      	str	r3, [r7, #48]	@ 0x30
 800990a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	429a      	cmp	r2, r3
 8009910:	dbe6      	blt.n	80098e0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    }

    // Compute sum.
    float sum = 0.f;
 8009912:	f04f 0300 	mov.w	r3, #0
 8009916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int c = 0; c < depth; ++c) {
 8009918:	2300      	movs	r3, #0
 800991a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800991c:	e035      	b.n	800998a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf4>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800991e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	fb03 f202 	mul.w	r2, r3, r2
 8009926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	4413      	add	r3, r2
 8009930:	ed93 7a00 	vldr	s14, [r3]
 8009934:	edd7 7a04 	vldr	s15, [r7, #16]
 8009938:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	4610      	mov	r0, r2
 8009944:	4619      	mov	r1, r3
 8009946:	f7f7 f96f 	bl	8000c28 <__aeabi_d2f>
 800994a:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800994e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009952:	eeb0 0a67 	vmov.f32	s0, s15
 8009956:	f7f7 fca2 	bl	800129e <_ZSt3expf>
 800995a:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 800995e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	fb03 f202 	mul.w	r2, r3, r2
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	4413      	add	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800996e:	4413      	add	r3, r2
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 8009974:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8009978:	edd7 7a05 	vldr	s15, [r7, #20]
 800997c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009980:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (int c = 0; c < depth; ++c) {
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	3301      	adds	r3, #1
 8009988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800998a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	429a      	cmp	r2, r3
 8009990:	dbc5      	blt.n	800991e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8009992:	2300      	movs	r3, #0
 8009994:	627b      	str	r3, [r7, #36]	@ 0x24
 8009996:	e01c      	b.n	80099d2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 8009998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800999a:	69ba      	ldr	r2, [r7, #24]
 800999c:	fb03 f202 	mul.w	r2, r3, r2
 80099a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a2:	4413      	add	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099a8:	4413      	add	r3, r2
 80099aa:	edd3 6a00 	vldr	s13, [r3]
 80099ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	fb03 f202 	mul.w	r2, r3, r2
 80099b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099be:	4413      	add	r3, r2
 80099c0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80099c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c8:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80099cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ce:	3301      	adds	r3, #1
 80099d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80099d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	dbde      	blt.n	8009998 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x102>
  for (int i = 0; i < outer_size; ++i) {
 80099da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099dc:	3301      	adds	r3, #1
 80099de:	637b      	str	r3, [r7, #52]	@ 0x34
 80099e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	f6ff af75 	blt.w	80098d4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
    }
  }
}
 80099ea:	bf00      	nop
 80099ec:	bf00      	nop
 80099ee:	3738      	adds	r7, #56	@ 0x38
 80099f0:	46bd      	mov	sp, r7
 80099f2:	ecbd 8b02 	vpop	{d8}
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8009a0c:	f002 facc 	bl	800bfa8 <abort>
  return context->AllocatePersistentBuffer(context,
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a14:	2140      	movs	r1, #64	@ 0x40
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	4798      	blx	r3
 8009a1a:	4603      	mov	r3, r0
                                           sizeof(CMSISNNSoftmaxParams));
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8009a24:	b590      	push	{r4, r7, lr}
 8009a26:	b09d      	sub	sp, #116	@ 0x74
 8009a28:	af04      	add	r7, sp, #16
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff f835 	bl	8008a9e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8009a34:	65f8      	str	r0, [r7, #92]	@ 0x5c

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8009a36:	6838      	ldr	r0, [r7, #0]
 8009a38:	f7fe fa2e 	bl	8007e98 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	bf14      	ite	ne
 8009a42:	2301      	movne	r3, #1
 8009a44:	2300      	moveq	r3, #0
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d013      	beq.n	8009a74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x50>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	691c      	ldr	r4, [r3, #16]
 8009a50:	6838      	ldr	r0, [r7, #0]
 8009a52:	f7fe fa21 	bl	8007e98 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2201      	movs	r2, #1
 8009a5a:	9203      	str	r2, [sp, #12]
 8009a5c:	9302      	str	r3, [sp, #8]
 8009a5e:	4b6c      	ldr	r3, [pc, #432]	@ (8009c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	4b6c      	ldr	r3, [pc, #432]	@ (8009c14 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	2334      	movs	r3, #52	@ 0x34
 8009a68:	4a6b      	ldr	r2, [pc, #428]	@ (8009c18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009a6a:	496c      	ldr	r1, [pc, #432]	@ (8009c1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	47a0      	blx	r4
 8009a70:	2401      	movs	r4, #1
 8009a72:	e0c8      	b.n	8009c06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8009a74:	6838      	ldr	r0, [r7, #0]
 8009a76:	f7fe fa22 	bl	8007ebe <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	bf14      	ite	ne
 8009a80:	2301      	movne	r3, #1
 8009a82:	2300      	moveq	r3, #0
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d013      	beq.n	8009ab2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	691c      	ldr	r4, [r3, #16]
 8009a8e:	6838      	ldr	r0, [r7, #0]
 8009a90:	f7fe fa15 	bl	8007ebe <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2201      	movs	r2, #1
 8009a98:	9203      	str	r2, [sp, #12]
 8009a9a:	9302      	str	r3, [sp, #8]
 8009a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8009c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8009c20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2335      	movs	r3, #53	@ 0x35
 8009aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8009c18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009aa8:	495c      	ldr	r1, [pc, #368]	@ (8009c1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	47a0      	blx	r4
 8009aae:	2401      	movs	r4, #1
 8009ab0:	e0a9      	b.n	8009c06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8009ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3318      	adds	r3, #24
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2200      	movs	r2, #0
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009ac0:	4798      	blx	r3
 8009ac2:	65b8      	str	r0, [r7, #88]	@ 0x58
  TF_LITE_ENSURE(context, input != nullptr);
 8009ac4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10a      	bne.n	8009ae0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	691c      	ldr	r4, [r3, #16]
 8009ace:	4b55      	ldr	r3, [pc, #340]	@ (8009c24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	2337      	movs	r3, #55	@ 0x37
 8009ad4:	4a50      	ldr	r2, [pc, #320]	@ (8009c18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009ad6:	4954      	ldr	r1, [pc, #336]	@ (8009c28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	47a0      	blx	r4
 8009adc:	2401      	movs	r4, #1
 8009ade:	e092      	b.n	8009c06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8009ae0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009ae2:	f7fe f9cc 	bl	8007e7e <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bfd4      	ite	le
 8009aec:	2301      	movle	r3, #1
 8009aee:	2300      	movgt	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691c      	ldr	r4, [r3, #16]
 8009afa:	4b4c      	ldr	r3, [pc, #304]	@ (8009c2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	2338      	movs	r3, #56	@ 0x38
 8009b00:	4a45      	ldr	r2, [pc, #276]	@ (8009c18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009b02:	4949      	ldr	r1, [pc, #292]	@ (8009c28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	47a0      	blx	r4
 8009b08:	2401      	movs	r4, #1
 8009b0a:	e07c      	b.n	8009c06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 8009b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	331c      	adds	r3, #28
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2200      	movs	r2, #0
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009b1a:	4798      	blx	r3
 8009b1c:	6578      	str	r0, [r7, #84]	@ 0x54
  TF_LITE_ENSURE(context, output != nullptr);
 8009b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x116>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	691c      	ldr	r4, [r3, #16]
 8009b28:	4b41      	ldr	r3, [pc, #260]	@ (8009c30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	233a      	movs	r3, #58	@ 0x3a
 8009b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8009c18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009b30:	493d      	ldr	r1, [pc, #244]	@ (8009c28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	47a0      	blx	r4
 8009b36:	2401      	movs	r4, #1
 8009b38:	e065      	b.n	8009c06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>

  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10a      	bne.n	8009b58 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	691c      	ldr	r4, [r3, #16]
 8009b46:	4b3b      	ldr	r3, [pc, #236]	@ (8009c34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	233c      	movs	r3, #60	@ 0x3c
 8009b4c:	4a32      	ldr	r2, [pc, #200]	@ (8009c18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8009b4e:	4936      	ldr	r1, [pc, #216]	@ (8009c28 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	47a0      	blx	r4
 8009b54:	2401      	movs	r4, #1
 8009b56:	e056      	b.n	8009c06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  CMSISNNSoftmaxParams* op_data =
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	653b      	str	r3, [r7, #80]	@ 0x50
      static_cast<CMSISNNSoftmaxParams*>(node->user_data);

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
 8009b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b6a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f920 	bl	8009db4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                                        &op_data->softmax_params);

  const auto input_shape = GetTensorShape(input);
 8009b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b7e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe f95e 	bl	8007e42 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 8009b86:	f107 030c 	add.w	r3, r7, #12
 8009b8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fe f958 	bl	8007e42 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8009b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fd54 	bl	8008644 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8009ba2:	f107 020c 	add.w	r2, r7, #12
 8009ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009baa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fe43 	bl	8009838 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8009bb2:	6438      	str	r0, [r7, #64]	@ 0x40
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8009bb4:	f107 020c 	add.w	r2, r7, #12
 8009bb8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bc0:	f7ff f86e 	bl	8008ca0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8009bc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
  op_data->num_rows = outer_size;
 8009bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bca:	639a      	str	r2, [r3, #56]	@ 0x38
  op_data->row_size = depth;
 8009bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  micro_context->DeallocateTempTfLiteTensor(input);
 8009bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3324      	adds	r3, #36	@ 0x24
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009bdc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009bde:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8009be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3324      	adds	r3, #36	@ 0x24
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bea:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009bec:	4798      	blx	r3
  return ret_val;
 8009bee:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
}
 8009bf2:	f107 030c 	add.w	r3, r7, #12
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe f8c5 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
 8009bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe f8c0 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
 8009c06:	4623      	mov	r3, r4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3764      	adds	r7, #100	@ 0x64
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd90      	pop	{r4, r7, pc}
 8009c10:	08010c0c 	.word	0x08010c0c
 8009c14:	08010c10 	.word	0x08010c10
 8009c18:	08010b64 	.word	0x08010b64
 8009c1c:	08010bf0 	.word	0x08010bf0
 8009c20:	08010c20 	.word	0x08010c20
 8009c24:	08010c4c 	.word	0x08010c4c
 8009c28:	08010c34 	.word	0x08010c34
 8009c2c:	08010c60 	.word	0x08010c60
 8009c30:	08010c7c 	.word	0x08010c7c
 8009c34:	08010c90 	.word	0x08010c90

08009c38 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8009c38:	b5b0      	push	{r4, r5, r7, lr}
 8009c3a:	b0aa      	sub	sp, #168	@ 0xa8
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8009c42:	2200      	movs	r2, #0
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fd5b 	bl	8009702 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009c4c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8009c50:	2200      	movs	r2, #0
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff fd64 	bl	8009722 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8009c5a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

  TFLITE_DCHECK(node->user_data != nullptr);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 8009c66:	f002 f99f 	bl	800bfa8 <abort>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	691b      	ldr	r3, [r3, #16]
  const CMSISNNSoftmaxParams op_data =
 8009c6e:	f107 0410 	add.w	r4, r7, #16
 8009c72:	461d      	mov	r5, r3
 8009c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  switch (input->type) {
 8009c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c8c:	7a1b      	ldrb	r3, [r3, #8]
 8009c8e:	2b09      	cmp	r3, #9
 8009c90:	d034      	beq.n	8009cfc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
 8009c92:	2b09      	cmp	r3, #9
 8009c94:	dc5c      	bgt.n	8009d50 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d002      	beq.n	8009ca0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x68>
 8009c9a:	2b07      	cmp	r3, #7
 8009c9c:	d043      	beq.n	8009d26 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
 8009c9e:	e057      	b.n	8009d50 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      tflite::reference_ops::Softmax(
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 8009ca0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009ca4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff fd5a 	bl	8009762 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8009cae:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8009cb2:	f7fe ff16 	bl	8008ae2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8009cb6:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8009cb8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009cbc:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff fd4e 	bl	8009762 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8009cc6:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8009cca:	f7fe ff19 	bl	8008b00 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009cd4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8009cd8:	f107 0010 	add.w	r0, r7, #16
 8009cdc:	9200      	str	r2, [sp, #0]
 8009cde:	4622      	mov	r2, r4
 8009ce0:	f7ff fdd9 	bl	8009896 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8009ce4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe f84c 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 8009cee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe f847 	bl	8007d86 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	e03d      	b.n	8009d78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    }
    case kTfLiteInt8: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8009cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d00:	7a1b      	ldrb	r3, [r3, #8]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fd ff96 	bl	8007c34 <TfLiteTypeGetName>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d12:	f103 0208 	add.w	r2, r3, #8
 8009d16:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	4818      	ldr	r0, [pc, #96]	@ (8009d80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8009d1e:	f7fe ffb3 	bl	8008c88 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e028      	b.n	8009d78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
      }
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8009d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d2a:	7a1b      	ldrb	r3, [r3, #8]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fd ff81 	bl	8007c34 <TfLiteTypeGetName>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d3c:	f103 0208 	add.w	r2, r3, #8
 8009d40:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8009d44:	4619      	mov	r1, r3
 8009d46:	480e      	ldr	r0, [pc, #56]	@ (8009d80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8009d48:	f7fe ff9e 	bl	8008c88 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e013      	b.n	8009d78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
              tflite::micro::GetTensorData<int16_t>(output)),
          ARM_CMSIS_NN_SUCCESS);
      return kTfLiteOk;
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8009d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d54:	7a1b      	ldrb	r3, [r3, #8]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fd ff6c 	bl	8007c34 <TfLiteTypeGetName>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d66:	f103 0208 	add.w	r2, r3, #8
 8009d6a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4803      	ldr	r0, [pc, #12]	@ (8009d80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8009d72:	f7fe ff89 	bl	8008c88 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8009d76:	2301      	movs	r3, #1
  }
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	37a0      	adds	r7, #160	@ 0xa0
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8009d80:	08010cac 	.word	0x08010cac

08009d84 <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	2300      	movs	r3, #0
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4b05      	ldr	r3, [pc, #20]	@ (8009da8 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
 8009d94:	4a05      	ldr	r2, [pc, #20]	@ (8009dac <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8009d96:	4906      	ldr	r1, [pc, #24]	@ (8009db0 <_ZN6tflite16Register_SOFTMAXEv+0x2c>)
 8009d98:	f7ff fc5a 	bl	8009650 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8009d9c:	bf00      	nop
}
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	08009c39 	.word	0x08009c39
 8009dac:	08009a25 	.word	0x08009a25
 8009db0:	080099f9 	.word	0x080099f9

08009db4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8009db4:	b5b0      	push	{r4, r5, r7, lr}
 8009db6:	b08a      	sub	sp, #40	@ 0x28
 8009db8:	af04      	add	r7, sp, #16
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b09      	cmp	r3, #9
 8009dc8:	d003      	beq.n	8009dd2 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b07      	cmp	r3, #7
 8009dd0:	d121      	bne.n	8009e16 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x62>
    if (input->type == kTfLiteInt16) {
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b07      	cmp	r3, #7
 8009dd8:	d10e      	bne.n	8009df8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x44>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	691c      	ldr	r4, [r3, #16]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fd ff26 	bl	8007c34 <TfLiteTypeGetName>
 8009de8:	4602      	mov	r2, r0
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	492e      	ldr	r1, [pc, #184]	@ (8009ea8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e053      	b.n	8009ea0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	691c      	ldr	r4, [r3, #16]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fd ff17 	bl	8007c34 <TfLiteTypeGetName>
 8009e06:	4602      	mov	r2, r0
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	4926      	ldr	r1, [pc, #152]	@ (8009ea8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e044      	b.n	8009ea0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                    TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
#endif
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d018      	beq.n	8009e50 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	691c      	ldr	r4, [r3, #16]
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fd ff04 	bl	8007c34 <TfLiteTypeGetName>
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	2001      	movs	r0, #1
 8009e30:	f7fd ff00 	bl	8007c34 <TfLiteTypeGetName>
 8009e34:	4603      	mov	r3, r0
 8009e36:	9303      	str	r3, [sp, #12]
 8009e38:	9502      	str	r5, [sp, #8]
 8009e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8009eac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfc>)
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	23a0      	movs	r3, #160	@ 0xa0
 8009e44:	4a1b      	ldr	r2, [pc, #108]	@ (8009eb4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8009e46:	491c      	ldr	r1, [pc, #112]	@ (8009eb8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	47a0      	blx	r4
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e027      	b.n	8009ea0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d018      	beq.n	8009e8a <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd6>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	691c      	ldr	r4, [r3, #16]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fd fee7 	bl	8007c34 <TfLiteTypeGetName>
 8009e66:	4605      	mov	r5, r0
 8009e68:	2001      	movs	r0, #1
 8009e6a:	f7fd fee3 	bl	8007c34 <TfLiteTypeGetName>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	9303      	str	r3, [sp, #12]
 8009e72:	9502      	str	r5, [sp, #8]
 8009e74:	4b0d      	ldr	r3, [pc, #52]	@ (8009eac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8009e76:	9301      	str	r3, [sp, #4]
 8009e78:	4b10      	ldr	r3, [pc, #64]	@ (8009ebc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x108>)
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	23a1      	movs	r3, #161	@ 0xa1
 8009e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8009eb4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8009e80:	490d      	ldr	r1, [pc, #52]	@ (8009eb8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	47a0      	blx	r4
 8009e86:	2301      	movs	r3, #1
 8009e88:	e00a      	b.n	8009ea0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    op_data->beta = static_cast<double>(params->beta);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7f6 fb7a 	bl	8000588 <__aeabi_f2d>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e9a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ea8:	08010e40 	.word	0x08010e40
 8009eac:	08010e78 	.word	0x08010e78
 8009eb0:	08010e14 	.word	0x08010e14
 8009eb4:	08010cc8 	.word	0x08010cc8
 8009eb8:	08010e5c 	.word	0x08010e5c
 8009ebc:	08010e04 	.word	0x08010e04

08009ec0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  tensor->type = kTfLiteFloat32;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	701a      	strb	r2, [r3, #0]
  tensor->is_variable = false;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 8009ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f50 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	011b      	lsls	r3, r3, #4
 8009ede:	4413      	add	r3, r2
 8009ee0:	781a      	ldrb	r2, [r3, #0]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	751a      	strb	r2, [r3, #20]
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
 8009ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f50 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	011b      	lsls	r3, r3, #4
 8009eec:	4413      	add	r3, r2
 8009eee:	330c      	adds	r3, #12
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	619a      	str	r2, [r3, #24]
  tensor->dims = tensorData[i].dims;
 8009ef6:	4a16      	ldr	r2, [pc, #88]	@ (8009f50 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	4413      	add	r3, r2
 8009efe:	3308      	adds	r3, #8
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	609a      	str	r2, [r3, #8]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	7d1b      	ldrb	r3, [r3, #20]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d10e      	bne.n	8009f2c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x6c>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8009f0e:	4a10      	ldr	r2, [pc, #64]	@ (8009f50 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	011b      	lsls	r3, r3, #4
 8009f14:	4413      	add	r3, r2
 8009f16:	3304      	adds	r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f54 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x94>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4413      	add	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]

    tensor->data.data =  start;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	605a      	str	r2, [r3, #4]
 8009f2a:	e007      	b.n	8009f3c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x7c>
  }
  else {
      tensor->data.data = tensorData[i].data;
 8009f2c:	4a08      	ldr	r2, [pc, #32]	@ (8009f50 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	011b      	lsls	r3, r3, #4
 8009f32:	4413      	add	r3, r2
 8009f34:	3304      	adds	r3, #4
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	605a      	str	r2, [r3, #4]
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

}
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	2000038c 	.word	0x2000038c
 8009f54:	200007a4 	.word	0x200007a4

08009f58 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>:

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]

  tensor->type = kTfLiteFloat32;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2201      	movs	r2, #1
 8009f66:	721a      	strb	r2, [r3, #8]

  tensor->dims = tensorData[i].dims;
 8009f68:	4a16      	ldr	r2, [pc, #88]	@ (8009fc4 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	011b      	lsls	r3, r3, #4
 8009f6e:	4413      	add	r3, r2
 8009f70:	3308      	adds	r3, #8
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	605a      	str	r2, [r3, #4]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
 8009f78:	4a12      	ldr	r2, [pc, #72]	@ (8009fc4 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	011b      	lsls	r3, r3, #4
 8009f7e:	4413      	add	r3, r2
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	73fb      	strb	r3, [r7, #15]
  if(allocation_type == kTfLiteArenaRw) {
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d10e      	bne.n	8009fa8 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x50>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8009f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8009fc4 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	4413      	add	r3, r2
 8009f92:	3304      	adds	r3, #4
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc8 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x70>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	60bb      	str	r3, [r7, #8]

    tensor->data.data =  start;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	601a      	str	r2, [r3, #0]
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}
 8009fa6:	e007      	b.n	8009fb8 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x60>
    tensor->data.data = tensorData[i].data;
 8009fa8:	4a06      	ldr	r2, [pc, #24]	@ (8009fc4 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	4413      	add	r3, r2
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	601a      	str	r2, [r3, #0]
}
 8009fb8:	bf00      	nop
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	2000038c 	.word	0x2000038c
 8009fc8:	200007a4 	.word	0x200007a4

08009fcc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	f003 030f 	and.w	r3, r3, #15
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d005      	beq.n	8009fec <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x20>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	f003 030f 	and.w	r3, r3, #15
 8009fe6:	f1c3 0310 	rsb	r3, r3, #16
 8009fea:	e000      	b.n	8009fee <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x22>
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 8009ff0:	4b29      	ldr	r3, [pc, #164]	@ (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	440b      	add	r3, r1
 8009ffa:	425b      	negs	r3, r3
 8009ffc:	441a      	add	r2, r3
 8009ffe:	4b27      	ldr	r3, [pc, #156]	@ (800a09c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd0>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d224      	bcs.n	800a050 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 800a006:	4b26      	ldr	r3, [pc, #152]	@ (800a0a0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b09      	cmp	r3, #9
 800a00c:	d906      	bls.n	800a01c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	4619      	mov	r1, r3
 800a012:	4824      	ldr	r0, [pc, #144]	@ (800a0a4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd8>)
 800a014:	f7f8 ffc8 	bl	8002fa8 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 800a018:	2300      	movs	r3, #0
 800a01a:	e039      	b.n	800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 800a01c:	2101      	movs	r1, #1
 800a01e:	6838      	ldr	r0, [r7, #0]
 800a020:	f7fd fdd2 	bl	8007bc8 <_Z9ei_callocjj>
 800a024:	60b8      	str	r0, [r7, #8]
    if (ptr == NULL) {
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d106      	bne.n	800a03a <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	4619      	mov	r1, r3
 800a030:	481d      	ldr	r0, [pc, #116]	@ (800a0a8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xdc>)
 800a032:	f7f8 ffb9 	bl	8002fa8 <_Z9ei_printfPKcz>
      return NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	e02a      	b.n	800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 800a03a:	4b19      	ldr	r3, [pc, #100]	@ (800a0a0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	1c5a      	adds	r2, r3, #1
 800a040:	4917      	ldr	r1, [pc, #92]	@ (800a0a0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 800a042:	600a      	str	r2, [r1, #0]
 800a044:	4919      	ldr	r1, [pc, #100]	@ (800a0ac <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xe0>)
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	e01f      	b.n	800a090 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
  }

  current_location -= bytes;
 800a050:	4b11      	ldr	r3, [pc, #68]	@ (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	425b      	negs	r3, r3
 800a058:	4413      	add	r3, r2
 800a05a:	4a0f      	ldr	r2, [pc, #60]	@ (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a05c:	6013      	str	r3, [r2, #0]

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
 800a05e:	4b0e      	ldr	r3, [pc, #56]	@ (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3b0f      	subs	r3, #15
 800a064:	4a0c      	ldr	r2, [pc, #48]	@ (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a066:	6013      	str	r3, [r2, #0]
  current_location += 16 - ((uintptr_t)(current_location) & 15);
 800a068:	4b0b      	ldr	r3, [pc, #44]	@ (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	4b0a      	ldr	r3, [pc, #40]	@ (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 030f 	and.w	r3, r3, #15
 800a074:	f1c3 0310 	rsb	r3, r3, #16
 800a078:	4413      	add	r3, r2
 800a07a:	4a07      	ldr	r2, [pc, #28]	@ (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a07c:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 800a07e:	4b06      	ldr	r3, [pc, #24]	@ (800a098 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	60bb      	str	r3, [r7, #8]
  memset(ptr, 0, bytes);
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	2100      	movs	r1, #0
 800a088:	68b8      	ldr	r0, [r7, #8]
 800a08a:	f003 f81b 	bl	800d0c4 <memset>

  return ptr;
 800a08e:	68bb      	ldr	r3, [r7, #8]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	200007ac 	.word	0x200007ac
 800a09c:	200007a8 	.word	0x200007a8
 800a0a0:	200009cc 	.word	0x200009cc
 800a0a4:	08010f10 	.word	0x08010f10
 800a0a8:	08010f90 	.word	0x08010f90
 800a0ac:	200009a4 	.word	0x200009a4

0800a0b0 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 800a0bc:	4b1b      	ldr	r3, [pc, #108]	@ (800a12c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d906      	bls.n	800a0d2 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	4819      	ldr	r0, [pc, #100]	@ (800a130 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x80>)
 800a0ca:	f7f8 ff6d 	bl	8002fa8 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e028      	b.n	800a124 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff ff76 	bl	8009fcc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4811      	ldr	r0, [pc, #68]	@ (800a134 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x84>)
 800a0f0:	f7f8 ff5a 	bl	8002fa8 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e015      	b.n	800a124 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 800a0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a12c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a0e      	ldr	r2, [pc, #56]	@ (800a138 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x88>)
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	4413      	add	r3, r2
 800a102:	f107 0210 	add.w	r2, r7, #16
 800a106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a10a:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 800a10e:	4b07      	ldr	r3, [pc, #28]	@ (800a12c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 800a118:	4b04      	ldr	r3, [pc, #16]	@ (800a12c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3301      	adds	r3, #1
 800a11e:	4a03      	ldr	r2, [pc, #12]	@ (800a12c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 800a120:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	200009f0 	.word	0x200009f0
 800a130:	08010fc8 	.word	0x08010fc8
 800a134:	08011020 	.word	0x08011020
 800a138:	200009d0 	.word	0x200009d0

0800a13c <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 800a146:	4b09      	ldr	r3, [pc, #36]	@ (800a16c <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x30>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	4293      	cmp	r3, r2
 800a150:	dd01      	ble.n	800a156 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x1a>
    return NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	e004      	b.n	800a160 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 800a156:	4a06      	ldr	r2, [pc, #24]	@ (800a170 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x34>)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	4413      	add	r3, r2
 800a15e:	685b      	ldr	r3, [r3, #4]
}
 800a160:	4618      	mov	r0, r3
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	200009f0 	.word	0x200009f0
 800a170:	200009d0 	.word	0x200009d0

0800a174 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 800a17a:	2300      	movs	r3, #0
 800a17c:	607b      	str	r3, [r7, #4]
 800a17e:	e00d      	b.n	800a19c <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 800a180:	4914      	ldr	r1, [pc, #80]	@ (800a1d4 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x60>)
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	4613      	mov	r3, r2
 800a186:	011b      	lsls	r3, r3, #4
 800a188:	4413      	add	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	440b      	add	r3, r1
 800a18e:	3340      	adds	r3, #64	@ 0x40
 800a190:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a194:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	3301      	adds	r3, #1
 800a19a:	607b      	str	r3, [r7, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d9ee      	bls.n	800a180 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0xc>
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	603b      	str	r3, [r7, #0]
 800a1a6:	e00a      	b.n	800a1be <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x4a>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 800a1a8:	4a0b      	ldr	r2, [pc, #44]	@ (800a1d8 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x64>)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	011b      	lsls	r3, r3, #4
 800a1ae:	4413      	add	r3, r2
 800a1b0:	330c      	adds	r3, #12
 800a1b2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a1b6:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	603b      	str	r3, [r7, #0]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d9f1      	bls.n	800a1a8 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x34>
  }
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	20000808 	.word	0x20000808
 800a1d8:	20000918 	.word	0x20000918

0800a1dc <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 800a1e6:	4b2e      	ldr	r3, [pc, #184]	@ (800a2a0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc4>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a2e      	ldr	r2, [pc, #184]	@ (800a2a4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc8>)
 800a1ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	e045      	b.n	800a288 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xac>
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
 800a1fc:	492a      	ldr	r1, [pc, #168]	@ (800a2a8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4613      	mov	r3, r2
 800a202:	011b      	lsls	r3, r3, #4
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	3340      	adds	r3, #64	@ 0x40
 800a20c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a210:	461a      	mov	r2, r3
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	4293      	cmp	r3, r2
 800a216:	d107      	bne.n	800a228 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x4c>
      return &tflTensors[ix].tensor;
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	4613      	mov	r3, r2
 800a21c:	011b      	lsls	r3, r3, #4
 800a21e:	4413      	add	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4a21      	ldr	r2, [pc, #132]	@ (800a2a8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a224:	4413      	add	r3, r2
 800a226:	e037      	b.n	800a298 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 800a228:	491f      	ldr	r1, [pc, #124]	@ (800a2a8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	4613      	mov	r3, r2
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	4413      	add	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	440b      	add	r3, r1
 800a236:	3340      	adds	r3, #64	@ 0x40
 800a238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a23c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a240:	4293      	cmp	r3, r2
 800a242:	d11e      	bne.n	800a282 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xa6>
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 800a244:	6838      	ldr	r0, [r7, #0]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	4613      	mov	r3, r2
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	4413      	add	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4a15      	ldr	r2, [pc, #84]	@ (800a2a8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a252:	4413      	add	r3, r2
 800a254:	4619      	mov	r1, r3
 800a256:	f7ff fe33 	bl	8009ec0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	b218      	sxth	r0, r3
 800a25e:	4912      	ldr	r1, [pc, #72]	@ (800a2a8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	4613      	mov	r3, r2
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	440b      	add	r3, r1
 800a26c:	3340      	adds	r3, #64	@ 0x40
 800a26e:	4602      	mov	r2, r0
 800a270:	801a      	strh	r2, [r3, #0]
      return &tflTensors[ix].tensor;
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	4613      	mov	r3, r2
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	4413      	add	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4a0a      	ldr	r2, [pc, #40]	@ (800a2a8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 800a27e:	4413      	add	r3, r2
 800a280:	e00a      	b.n	800a298 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	3301      	adds	r3, #1
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d9b6      	bls.n	800a1fc <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 800a28e:	2104      	movs	r1, #4
 800a290:	4806      	ldr	r0, [pc, #24]	@ (800a2ac <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xd0>)
 800a292:	f7f8 fe89 	bl	8002fa8 <_Z9ei_printfPKcz>
  return nullptr;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	200009a0 	.word	0x200009a0
 800a2a4:	080132bc 	.word	0x080132bc
 800a2a8:	20000808 	.word	0x20000808
 800a2ac:	08011054 	.word	0x08011054

0800a2b0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 800a2ba:	4b25      	ldr	r3, [pc, #148]	@ (800a350 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa0>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a25      	ldr	r2, [pc, #148]	@ (800a354 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa4>)
 800a2c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60fb      	str	r3, [r7, #12]
 800a2ce:	e033      	b.n	800a338 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x88>
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
 800a2d0:	4a21      	ldr	r2, [pc, #132]	@ (800a358 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	4413      	add	r3, r2
 800a2d8:	330c      	adds	r3, #12
 800a2da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d104      	bne.n	800a2f0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
      return &tflEvalTensors[ix].tensor;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	011b      	lsls	r3, r3, #4
 800a2ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a358 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a2ec:	4413      	add	r3, r2
 800a2ee:	e02b      	b.n	800a348 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 800a2f0:	4a19      	ldr	r2, [pc, #100]	@ (800a358 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	011b      	lsls	r3, r3, #4
 800a2f6:	4413      	add	r3, r2
 800a2f8:	330c      	adds	r3, #12
 800a2fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a302:	4293      	cmp	r3, r2
 800a304:	d115      	bne.n	800a332 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x82>
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	011b      	lsls	r3, r3, #4
 800a30a:	4a13      	ldr	r2, [pc, #76]	@ (800a358 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a30c:	4413      	add	r3, r2
 800a30e:	4619      	mov	r1, r3
 800a310:	6838      	ldr	r0, [r7, #0]
 800a312:	f7ff fe21 	bl	8009f58 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>
      tflEvalTensors[ix].index = tensor_idx;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	b219      	sxth	r1, r3
 800a31a:	4a0f      	ldr	r2, [pc, #60]	@ (800a358 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	4413      	add	r3, r2
 800a322:	330c      	adds	r3, #12
 800a324:	460a      	mov	r2, r1
 800a326:	801a      	strh	r2, [r3, #0]
      return &tflEvalTensors[ix].tensor;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	4a0a      	ldr	r2, [pc, #40]	@ (800a358 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 800a32e:	4413      	add	r3, r2
 800a330:	e00a      	b.n	800a348 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3301      	adds	r3, #1
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d9c8      	bls.n	800a2d0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 800a33e:	2104      	movs	r1, #4
 800a340:	4806      	ldr	r0, [pc, #24]	@ (800a35c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xac>)
 800a342:	f7f8 fe31 	bl	8002fa8 <_Z9ei_printfPKcz>
  return nullptr;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	200009a0 	.word	0x200009a0
 800a354:	080132bc 	.word	0x080132bc
 800a358:	20000918 	.word	0x20000918
 800a35c:	0801108c 	.word	0x0801108c

0800a360 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>:

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	2300      	movs	r3, #0
 800a36c:	2200      	movs	r2, #0
 800a36e:	2100      	movs	r1, #0
 800a370:	f7fe fa1e 	bl	80087b0 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
 800a374:	4a03      	ldr	r2, [pc, #12]	@ (800a384 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev+0x24>)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	080132d4 	.word	0x080132d4

0800a388 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:

  void* AllocatePersistentBuffer(size_t bytes) {
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
    return AllocatePersistentBufferImpl(nullptr, bytes);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	2000      	movs	r0, #0
 800a396:	f7ff fe19 	bl	8009fcc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 800a39a:	4603      	mov	r3, r0
  }
 800a39c:	4618      	mov	r0, r3
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	68b9      	ldr	r1, [r7, #8]
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f7ff fe7b 	bl	800a0b0 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
 800a3ba:	4603      	mov	r3, r0
  }
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:

  void* GetScratchBuffer(int buffer_index) {
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
    return GetScratchBufferImpl(nullptr, buffer_index);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	f7ff feb3 	bl	800a13c <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>
 800a3d6:	4603      	mov	r3, r0
  }
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
    return GetTensorImpl(nullptr, tensor_index);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f7ff fef5 	bl	800a1dc <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
 800a3f2:	4603      	mov	r3, r0
  }
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
    return;
 800a406:	bf00      	nop
  }
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
 800a412:	b580      	push	{r7, lr}
 800a414:	b082      	sub	sp, #8
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	6039      	str	r1, [r7, #0]
    return GetEvalTensorImpl(nullptr, tensor_index);
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	2000      	movs	r0, #0
 800a420:	f7ff ff46 	bl	800a2b0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
 800a424:	4603      	mov	r3, r0
  }
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <_Z19tflite_learn_4_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
 800a430:	b5b0      	push	{r4, r5, r7, lr}
 800a432:	b0aa      	sub	sp, #168	@ 0xa8
 800a434:	af00      	add	r7, sp, #0
 800a436:	62f8      	str	r0, [r7, #44]	@ 0x2c
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 800a438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a43a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800a43e:	2010      	movs	r0, #16
 800a440:	4798      	blx	r3
 800a442:	4603      	mov	r3, r0
 800a444:	4aa7      	ldr	r2, [pc, #668]	@ (800a6e4 <_Z19tflite_learn_4_initPFPvjjE+0x2b4>)
 800a446:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 800a448:	4ba6      	ldr	r3, [pc, #664]	@ (800a6e4 <_Z19tflite_learn_4_initPFPvjjE+0x2b4>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <_Z19tflite_learn_4_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 800a450:	48a5      	ldr	r0, [pc, #660]	@ (800a6e8 <_Z19tflite_learn_4_initPFPvjjE+0x2b8>)
 800a452:	f7f8 fda9 	bl	8002fa8 <_Z9ei_printfPKcz>
    return kTfLiteError;
 800a456:	2401      	movs	r4, #1
 800a458:	e13f      	b.n	800a6da <_Z19tflite_learn_4_initPFPvjjE+0x2aa>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 800a45a:	4ba2      	ldr	r3, [pc, #648]	@ (800a6e4 <_Z19tflite_learn_4_initPFPvjjE+0x2b4>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4aa3      	ldr	r2, [pc, #652]	@ (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2bc>)
 800a460:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 800a462:	4ba0      	ldr	r3, [pc, #640]	@ (800a6e4 <_Z19tflite_learn_4_initPFPvjjE+0x2b4>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800a46a:	4aa1      	ldr	r2, [pc, #644]	@ (800a6f0 <_Z19tflite_learn_4_initPFPvjjE+0x2c0>)
 800a46c:	6013      	str	r3, [r2, #0]

  EonMicroContext micro_context_;
 800a46e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff ff74 	bl	800a360 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
 800a478:	4a9e      	ldr	r2, [pc, #632]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a47a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a47e:	6093      	str	r3, [r2, #8]
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 800a480:	4b9c      	ldr	r3, [pc, #624]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a482:	4a9d      	ldr	r2, [pc, #628]	@ (800a6f8 <_Z19tflite_learn_4_initPFPvjjE+0x2c8>)
 800a484:	635a      	str	r2, [r3, #52]	@ 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
 800a486:	4b9b      	ldr	r3, [pc, #620]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a488:	4a9c      	ldr	r2, [pc, #624]	@ (800a6fc <_Z19tflite_learn_4_initPFPvjjE+0x2cc>)
 800a48a:	63da      	str	r2, [r3, #60]	@ 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 800a48c:	4b99      	ldr	r3, [pc, #612]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a48e:	4a9c      	ldr	r2, [pc, #624]	@ (800a700 <_Z19tflite_learn_4_initPFPvjjE+0x2d0>)
 800a490:	641a      	str	r2, [r3, #64]	@ 0x40
  ctx.GetTensor = &GetTensorImpl;
 800a492:	4b98      	ldr	r3, [pc, #608]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a494:	4a9b      	ldr	r2, [pc, #620]	@ (800a704 <_Z19tflite_learn_4_initPFPvjjE+0x2d4>)
 800a496:	64da      	str	r2, [r3, #76]	@ 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
 800a498:	4b96      	ldr	r3, [pc, #600]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a49a:	4a9b      	ldr	r2, [pc, #620]	@ (800a708 <_Z19tflite_learn_4_initPFPvjjE+0x2d8>)
 800a49c:	651a      	str	r2, [r3, #80]	@ 0x50
  ctx.ReportError = &MicroContextReportOpError;
 800a49e:	4b95      	ldr	r3, [pc, #596]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a4a0:	4a9a      	ldr	r2, [pc, #616]	@ (800a70c <_Z19tflite_learn_4_initPFPvjjE+0x2dc>)
 800a4a2:	611a      	str	r2, [r3, #16]

  ctx.tensors_size = 11;
 800a4a4:	4b93      	ldr	r3, [pc, #588]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a4a6:	220b      	movs	r2, #11
 800a4a8:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a4b0:	e024      	b.n	800a4fc <_Z19tflite_learn_4_initPFPvjjE+0xcc>
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
 800a4b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800a4bc:	f7ff fd00 	bl	8009ec0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 800a4c0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d114      	bne.n	800a4f2 <_Z19tflite_learn_4_initPFPvjjE+0xc2>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 800a4c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4ca:	4991      	ldr	r1, [pc, #580]	@ (800a710 <_Z19tflite_learn_4_initPFPvjjE+0x2e0>)
 800a4cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	440b      	add	r3, r1
 800a4d4:	330c      	adds	r3, #12
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (data_end_ptr > tensor_boundary) {
 800a4de:	4b83      	ldr	r3, [pc, #524]	@ (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2bc>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d903      	bls.n	800a4f2 <_Z19tflite_learn_4_initPFPvjjE+0xc2>
        tensor_boundary = data_end_ptr;
 800a4ea:	4a80      	ldr	r2, [pc, #512]	@ (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2bc>)
 800a4ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4f0:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 800a4f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a4fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a500:	2b0a      	cmp	r3, #10
 800a502:	d9d6      	bls.n	800a4b2 <_Z19tflite_learn_4_initPFPvjjE+0x82>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
 800a504:	4b79      	ldr	r3, [pc, #484]	@ (800a6ec <_Z19tflite_learn_4_initPFPvjjE+0x2bc>)
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	4b79      	ldr	r3, [pc, #484]	@ (800a6f0 <_Z19tflite_learn_4_initPFPvjjE+0x2c0>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d904      	bls.n	800a51a <_Z19tflite_learn_4_initPFPvjjE+0xea>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 800a510:	4880      	ldr	r0, [pc, #512]	@ (800a714 <_Z19tflite_learn_4_initPFPvjjE+0x2e4>)
 800a512:	f7f8 fd49 	bl	8002fa8 <_Z9ei_printfPKcz>
    return kTfLiteError;
 800a516:	2401      	movs	r4, #1
 800a518:	e0da      	b.n	800a6d0 <_Z19tflite_learn_4_initPFPvjjE+0x2a0>
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 800a51a:	4c7f      	ldr	r4, [pc, #508]	@ (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a51c:	463b      	mov	r3, r7
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe ffd4 	bl	80094cc <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 800a524:	4625      	mov	r5, r4
 800a526:	463c      	mov	r4, r7
 800a528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a52a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a52c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a52e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	602b      	str	r3, [r5, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 800a534:	4c78      	ldr	r4, [pc, #480]	@ (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a536:	463b      	mov	r3, r7
 800a538:	4618      	mov	r0, r3
 800a53a:	f7ff fc23 	bl	8009d84 <_ZN6tflite16Register_SOFTMAXEv>
 800a53e:	3424      	adds	r4, #36	@ 0x24
 800a540:	463d      	mov	r5, r7
 800a542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a54a:	682b      	ldr	r3, [r5, #0]
 800a54c:	6023      	str	r3, [r4, #0]

  for (size_t g = 0; g < 1; ++g) {
 800a54e:	2300      	movs	r3, #0
 800a550:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a554:	e054      	b.n	800a600 <_Z19tflite_learn_4_initPFPvjjE+0x1d0>
    current_subgraph_index = g;
 800a556:	4a71      	ldr	r2, [pc, #452]	@ (800a71c <_Z19tflite_learn_4_initPFPvjjE+0x2ec>)
 800a558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a55c:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 800a55e:	4a70      	ldr	r2, [pc, #448]	@ (800a720 <_Z19tflite_learn_4_initPFPvjjE+0x2f0>)
 800a560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a56c:	e039      	b.n	800a5e2 <_Z19tflite_learn_4_initPFPvjjE+0x1b2>
      if (registrations[used_ops[i]].init) {
 800a56e:	4a6d      	ldr	r2, [pc, #436]	@ (800a724 <_Z19tflite_learn_4_initPFPvjjE+0x2f4>)
 800a570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a574:	4413      	add	r3, r2
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	4619      	mov	r1, r3
 800a57a:	4a67      	ldr	r2, [pc, #412]	@ (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a57c:	460b      	mov	r3, r1
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	440b      	add	r3, r1
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d025      	beq.n	800a5d8 <_Z19tflite_learn_4_initPFPvjjE+0x1a8>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 800a58c:	4a65      	ldr	r2, [pc, #404]	@ (800a724 <_Z19tflite_learn_4_initPFPvjjE+0x2f4>)
 800a58e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a592:	4413      	add	r3, r2
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	4619      	mov	r1, r3
 800a598:	4a5f      	ldr	r2, [pc, #380]	@ (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a59a:	460b      	mov	r3, r1
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	440b      	add	r3, r1
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	681c      	ldr	r4, [r3, #0]
 800a5a6:	4960      	ldr	r1, [pc, #384]	@ (800a728 <_Z19tflite_learn_4_initPFPvjjE+0x2f8>)
 800a5a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	440b      	add	r3, r1
 800a5b6:	3314      	adds	r3, #20
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	4619      	mov	r1, r3
 800a5be:	484d      	ldr	r0, [pc, #308]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a5c0:	47a0      	blx	r4
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	4858      	ldr	r0, [pc, #352]	@ (800a728 <_Z19tflite_learn_4_initPFPvjjE+0x2f8>)
 800a5c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	00db      	lsls	r3, r3, #3
 800a5d2:	4403      	add	r3, r0
 800a5d4:	3310      	adds	r3, #16
 800a5d6:	6019      	str	r1, [r3, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 800a5d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5dc:	3301      	adds	r3, #1
 800a5de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a5e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	4a4d      	ldr	r2, [pc, #308]	@ (800a720 <_Z19tflite_learn_4_initPFPvjjE+0x2f0>)
 800a5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d3bb      	bcc.n	800a56e <_Z19tflite_learn_4_initPFPvjjE+0x13e>
  for (size_t g = 0; g < 1; ++g) {
 800a5f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a600:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0a6      	beq.n	800a556 <_Z19tflite_learn_4_initPFPvjjE+0x126>
      }
    }
  }
  current_subgraph_index = 0;
 800a608:	4b44      	ldr	r3, [pc, #272]	@ (800a71c <_Z19tflite_learn_4_initPFPvjjE+0x2ec>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]

  for(size_t g = 0; g < 1; ++g) {
 800a60e:	2300      	movs	r3, #0
 800a610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a614:	e054      	b.n	800a6c0 <_Z19tflite_learn_4_initPFPvjjE+0x290>
    current_subgraph_index = g;
 800a616:	4a41      	ldr	r2, [pc, #260]	@ (800a71c <_Z19tflite_learn_4_initPFPvjjE+0x2ec>)
 800a618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a61c:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 800a61e:	4a40      	ldr	r2, [pc, #256]	@ (800a720 <_Z19tflite_learn_4_initPFPvjjE+0x2f0>)
 800a620:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a628:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a62c:	e039      	b.n	800a6a2 <_Z19tflite_learn_4_initPFPvjjE+0x272>
      if (registrations[used_ops[i]].prepare) {
 800a62e:	4a3d      	ldr	r2, [pc, #244]	@ (800a724 <_Z19tflite_learn_4_initPFPvjjE+0x2f4>)
 800a630:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a634:	4413      	add	r3, r2
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	4619      	mov	r1, r3
 800a63a:	4a37      	ldr	r2, [pc, #220]	@ (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a63c:	460b      	mov	r3, r1
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	440b      	add	r3, r1
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	3308      	adds	r3, #8
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d024      	beq.n	800a698 <_Z19tflite_learn_4_initPFPvjjE+0x268>
        ResetTensors();
 800a64e:	f7ff fd91 	bl	800a174 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 800a652:	4a34      	ldr	r2, [pc, #208]	@ (800a724 <_Z19tflite_learn_4_initPFPvjjE+0x2f4>)
 800a654:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a658:	4413      	add	r3, r2
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	4619      	mov	r1, r3
 800a65e:	4a2e      	ldr	r2, [pc, #184]	@ (800a718 <_Z19tflite_learn_4_initPFPvjjE+0x2e8>)
 800a660:	460b      	mov	r3, r1
 800a662:	00db      	lsls	r3, r3, #3
 800a664:	440b      	add	r3, r1
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	3308      	adds	r3, #8
 800a66c:	681c      	ldr	r4, [r3, #0]
 800a66e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	00db      	lsls	r3, r3, #3
 800a67a:	4a2b      	ldr	r2, [pc, #172]	@ (800a728 <_Z19tflite_learn_4_initPFPvjjE+0x2f8>)
 800a67c:	4413      	add	r3, r2
 800a67e:	4619      	mov	r1, r3
 800a680:	481c      	ldr	r0, [pc, #112]	@ (800a6f4 <_Z19tflite_learn_4_initPFPvjjE+0x2c4>)
 800a682:	47a0      	blx	r4
 800a684:	4603      	mov	r3, r0
 800a686:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
        if (status != kTfLiteOk) {
 800a68a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <_Z19tflite_learn_4_initPFPvjjE+0x268>
          return status;
 800a692:	f897 4093 	ldrb.w	r4, [r7, #147]	@ 0x93
 800a696:	e01b      	b.n	800a6d0 <_Z19tflite_learn_4_initPFPvjjE+0x2a0>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 800a698:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a69c:	3301      	adds	r3, #1
 800a69e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a720 <_Z19tflite_learn_4_initPFPvjjE+0x2f0>)
 800a6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d3bb      	bcc.n	800a62e <_Z19tflite_learn_4_initPFPvjjE+0x1fe>
  for(size_t g = 0; g < 1; ++g) {
 800a6b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a6c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d0a6      	beq.n	800a616 <_Z19tflite_learn_4_initPFPvjjE+0x1e6>
        }
      }
    }
  }
  current_subgraph_index = 0;
 800a6c8:	4b14      	ldr	r3, [pc, #80]	@ (800a71c <_Z19tflite_learn_4_initPFPvjjE+0x2ec>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 800a6ce:	2400      	movs	r4, #0
}
 800a6d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 f8af 	bl	800a838 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 800a6da:	4623      	mov	r3, r4
 800a6dc:	4618      	mov	r0, r3
 800a6de:	37a8      	adds	r7, #168	@ 0xa8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bdb0      	pop	{r4, r5, r7, pc}
 800a6e4:	200007a4 	.word	0x200007a4
 800a6e8:	080110c4 	.word	0x080110c4
 800a6ec:	200007a8 	.word	0x200007a8
 800a6f0:	200007ac 	.word	0x200007ac
 800a6f4:	200007b0 	.word	0x200007b0
 800a6f8:	08009fcd 	.word	0x08009fcd
 800a6fc:	0800a0b1 	.word	0x0800a0b1
 800a700:	0800a13d 	.word	0x0800a13d
 800a704:	0800a1dd 	.word	0x0800a1dd
 800a708:	0800a2b1 	.word	0x0800a2b1
 800a70c:	08008a79 	.word	0x08008a79
 800a710:	2000038c 	.word	0x2000038c
 800a714:	080110ec 	.word	0x080110ec
 800a718:	20000958 	.word	0x20000958
 800a71c:	200009a0 	.word	0x200009a0
 800a720:	080132c4 	.word	0x080132c4
 800a724:	200004dc 	.word	0x200004dc
 800a728:	2000043c 	.word	0x2000043c

0800a72c <_Z20tflite_learn_4_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(in_tensor_indices[index], tensor);
 800a736:	2300      	movs	r3, #0
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff fbc0 	bl	8009ec0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <_Z21tflite_learn_4_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(out_tensor_indices[index], tensor);
 800a754:	230a      	movs	r3, #10
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	4618      	mov	r0, r3
 800a75a:	f7ff fbb1 	bl	8009ec0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <_Z21tflite_learn_4_invokev>:

TfLiteStatus tflite_learn_4_invoke() {
 800a768:	b590      	push	{r4, r7, lr}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 800a76e:	2300      	movs	r3, #0
 800a770:	607b      	str	r3, [r7, #4]
 800a772:	e022      	b.n	800a7ba <_Z21tflite_learn_4_invokev+0x52>
    ResetTensors();
 800a774:	f7ff fcfe 	bl	800a174 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 800a778:	4a14      	ldr	r2, [pc, #80]	@ (800a7cc <_Z21tflite_learn_4_invokev+0x64>)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4413      	add	r3, r2
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	4619      	mov	r1, r3
 800a782:	4a13      	ldr	r2, [pc, #76]	@ (800a7d0 <_Z21tflite_learn_4_invokev+0x68>)
 800a784:	460b      	mov	r3, r1
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	440b      	add	r3, r1
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	330c      	adds	r3, #12
 800a790:	681c      	ldr	r4, [r3, #0]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	4613      	mov	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	4a0d      	ldr	r2, [pc, #52]	@ (800a7d4 <_Z21tflite_learn_4_invokev+0x6c>)
 800a79e:	4413      	add	r3, r2
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	480d      	ldr	r0, [pc, #52]	@ (800a7d8 <_Z21tflite_learn_4_invokev+0x70>)
 800a7a4:	47a0      	blx	r4
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 800a7aa:	78fb      	ldrb	r3, [r7, #3]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <_Z21tflite_learn_4_invokev+0x4c>
      return status;
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	e006      	b.n	800a7c2 <_Z21tflite_learn_4_invokev+0x5a>
  for (size_t i = 0; i < 4; ++i) {
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	607b      	str	r3, [r7, #4]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d9d9      	bls.n	800a774 <_Z21tflite_learn_4_invokev+0xc>
    }
  }
  return kTfLiteOk;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd90      	pop	{r4, r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	200004dc 	.word	0x200004dc
 800a7d0:	20000958 	.word	0x20000958
 800a7d4:	2000043c 	.word	0x2000043c
 800a7d8:	200007b0 	.word	0x200007b0

0800a7dc <_Z20tflite_learn_4_resetPFvPvE>:

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 800a7e4:	4b10      	ldr	r3, [pc, #64]	@ (800a828 <_Z20tflite_learn_4_resetPFvPvE+0x4c>)
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4610      	mov	r0, r2
 800a7ec:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 800a7ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a82c <_Z20tflite_learn_4_resetPFvPvE+0x50>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e009      	b.n	800a80e <_Z20tflite_learn_4_resetPFvPvE+0x32>
    ei_free(overflow_buffers[ix]);
 800a7fa:	4a0d      	ldr	r2, [pc, #52]	@ (800a830 <_Z20tflite_learn_4_resetPFvPvE+0x54>)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a802:	4618      	mov	r0, r3
 800a804:	f7fd f9ee 	bl	8007be4 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	3301      	adds	r3, #1
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	4b09      	ldr	r3, [pc, #36]	@ (800a834 <_Z20tflite_learn_4_resetPFvPvE+0x58>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	429a      	cmp	r2, r3
 800a816:	d3f0      	bcc.n	800a7fa <_Z20tflite_learn_4_resetPFvPvE+0x1e>
  }
  overflow_buffers_ix = 0;
 800a818:	4b06      	ldr	r3, [pc, #24]	@ (800a834 <_Z20tflite_learn_4_resetPFvPvE+0x58>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	200007a4 	.word	0x200007a4
 800a82c:	200009f0 	.word	0x200009f0
 800a830:	200009a4 	.word	0x200009a4
 800a834:	200009cc 	.word	0x200009cc

0800a838 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	4a05      	ldr	r2, [pc, #20]	@ (800a858 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x20>)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fd ffd3 	bl	80087f4 <_ZN6tflite12MicroContextD1Ev>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	080132d4 	.word	0x080132d4

0800a85c <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff ffe7 	bl	800a838 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 800a86a:	2118      	movs	r1, #24
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f83f 	bl	800a8f0 <_ZdlPvj>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <_Z41__static_initialization_and_destruction_0ii>:
}
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d11e      	bne.n	800a8ca <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a892:	4293      	cmp	r3, r2
 800a894:	d119      	bne.n	800a8ca <_Z41__static_initialization_and_destruction_0ii+0x4e>
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension0, 16, },
 800a896:	4b10      	ldr	r3, [pc, #64]	@ (800a8d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	33d0      	adds	r3, #208	@ 0xd0
};
 800a89c:	4a0f      	ldr	r2, [pc, #60]	@ (800a8dc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a89e:	6053      	str	r3, [r2, #4]
 800a8a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a8dc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a8a6:	6753      	str	r3, [r2, #116]	@ 0x74
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension8, 120, },
 800a8a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a8d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	33d0      	adds	r3, #208	@ 0xd0
};
 800a8ae:	4a0b      	ldr	r2, [pc, #44]	@ (800a8dc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a8b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 12, },
 800a8b4:	4b08      	ldr	r3, [pc, #32]	@ (800a8d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3310      	adds	r3, #16
};
 800a8ba:	4a08      	ldr	r2, [pc, #32]	@ (800a8dc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a8bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a8c0:	4b05      	ldr	r3, [pc, #20]	@ (800a8d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a05      	ldr	r2, [pc, #20]	@ (800a8dc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a8c6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 800a8ca:	bf00      	nop
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	200007a4 	.word	0x200007a4
 800a8dc:	2000038c 	.word	0x2000038c

0800a8e0 <_GLOBAL__sub_I__Z19tflite_learn_4_initPFPvjjE>:
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	f7ff ffc7 	bl	800a87c <_Z41__static_initialization_and_destruction_0ii>
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <_ZdlPvj>:
 800a8f0:	f000 b81a 	b.w	800a928 <_ZdlPv>

0800a8f4 <_ZdaPv>:
 800a8f4:	f000 b818 	b.w	800a928 <_ZdlPv>

0800a8f8 <_ZdaPvj>:
 800a8f8:	f7ff bffc 	b.w	800a8f4 <_ZdaPv>

0800a8fc <_Znwj>:
 800a8fc:	2801      	cmp	r0, #1
 800a8fe:	bf38      	it	cc
 800a900:	2001      	movcc	r0, #1
 800a902:	b510      	push	{r4, lr}
 800a904:	4604      	mov	r4, r0
 800a906:	4620      	mov	r0, r4
 800a908:	f001 fb90 	bl	800c02c <malloc>
 800a90c:	b100      	cbz	r0, 800a910 <_Znwj+0x14>
 800a90e:	bd10      	pop	{r4, pc}
 800a910:	f000 f80c 	bl	800a92c <_ZSt15get_new_handlerv>
 800a914:	b908      	cbnz	r0, 800a91a <_Znwj+0x1e>
 800a916:	f001 fb47 	bl	800bfa8 <abort>
 800a91a:	4780      	blx	r0
 800a91c:	e7f3      	b.n	800a906 <_Znwj+0xa>

0800a91e <_Znaj>:
 800a91e:	f7ff bfed 	b.w	800a8fc <_Znwj>

0800a922 <_ZSt25__throw_bad_function_callv>:
 800a922:	b508      	push	{r3, lr}
 800a924:	f001 fb40 	bl	800bfa8 <abort>

0800a928 <_ZdlPv>:
 800a928:	f001 bb88 	b.w	800c03c <free>

0800a92c <_ZSt15get_new_handlerv>:
 800a92c:	4b02      	ldr	r3, [pc, #8]	@ (800a938 <_ZSt15get_new_handlerv+0xc>)
 800a92e:	6818      	ldr	r0, [r3, #0]
 800a930:	f3bf 8f5b 	dmb	ish
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	200009f4 	.word	0x200009f4

0800a93c <pow>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	ed2d 8b02 	vpush	{d8}
 800a942:	eeb0 8a40 	vmov.f32	s16, s0
 800a946:	eef0 8a60 	vmov.f32	s17, s1
 800a94a:	ec55 4b11 	vmov	r4, r5, d1
 800a94e:	f000 fb0b 	bl	800af68 <__ieee754_pow>
 800a952:	4622      	mov	r2, r4
 800a954:	462b      	mov	r3, r5
 800a956:	4620      	mov	r0, r4
 800a958:	4629      	mov	r1, r5
 800a95a:	ec57 6b10 	vmov	r6, r7, d0
 800a95e:	f7f6 f905 	bl	8000b6c <__aeabi_dcmpun>
 800a962:	2800      	cmp	r0, #0
 800a964:	d13b      	bne.n	800a9de <pow+0xa2>
 800a966:	ec51 0b18 	vmov	r0, r1, d8
 800a96a:	2200      	movs	r2, #0
 800a96c:	2300      	movs	r3, #0
 800a96e:	f7f6 f8cb 	bl	8000b08 <__aeabi_dcmpeq>
 800a972:	b1b8      	cbz	r0, 800a9a4 <pow+0x68>
 800a974:	2200      	movs	r2, #0
 800a976:	2300      	movs	r3, #0
 800a978:	4620      	mov	r0, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	f7f6 f8c4 	bl	8000b08 <__aeabi_dcmpeq>
 800a980:	2800      	cmp	r0, #0
 800a982:	d146      	bne.n	800aa12 <pow+0xd6>
 800a984:	ec45 4b10 	vmov	d0, r4, r5
 800a988:	f000 f900 	bl	800ab8c <finite>
 800a98c:	b338      	cbz	r0, 800a9de <pow+0xa2>
 800a98e:	2200      	movs	r2, #0
 800a990:	2300      	movs	r3, #0
 800a992:	4620      	mov	r0, r4
 800a994:	4629      	mov	r1, r5
 800a996:	f7f6 f8c1 	bl	8000b1c <__aeabi_dcmplt>
 800a99a:	b300      	cbz	r0, 800a9de <pow+0xa2>
 800a99c:	f002 fca2 	bl	800d2e4 <__errno>
 800a9a0:	2322      	movs	r3, #34	@ 0x22
 800a9a2:	e01b      	b.n	800a9dc <pow+0xa0>
 800a9a4:	ec47 6b10 	vmov	d0, r6, r7
 800a9a8:	f000 f8f0 	bl	800ab8c <finite>
 800a9ac:	b9e0      	cbnz	r0, 800a9e8 <pow+0xac>
 800a9ae:	eeb0 0a48 	vmov.f32	s0, s16
 800a9b2:	eef0 0a68 	vmov.f32	s1, s17
 800a9b6:	f000 f8e9 	bl	800ab8c <finite>
 800a9ba:	b1a8      	cbz	r0, 800a9e8 <pow+0xac>
 800a9bc:	ec45 4b10 	vmov	d0, r4, r5
 800a9c0:	f000 f8e4 	bl	800ab8c <finite>
 800a9c4:	b180      	cbz	r0, 800a9e8 <pow+0xac>
 800a9c6:	4632      	mov	r2, r6
 800a9c8:	463b      	mov	r3, r7
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	f7f6 f8cd 	bl	8000b6c <__aeabi_dcmpun>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d0e2      	beq.n	800a99c <pow+0x60>
 800a9d6:	f002 fc85 	bl	800d2e4 <__errno>
 800a9da:	2321      	movs	r3, #33	@ 0x21
 800a9dc:	6003      	str	r3, [r0, #0]
 800a9de:	ecbd 8b02 	vpop	{d8}
 800a9e2:	ec47 6b10 	vmov	d0, r6, r7
 800a9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	f7f6 f88a 	bl	8000b08 <__aeabi_dcmpeq>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d0f2      	beq.n	800a9de <pow+0xa2>
 800a9f8:	eeb0 0a48 	vmov.f32	s0, s16
 800a9fc:	eef0 0a68 	vmov.f32	s1, s17
 800aa00:	f000 f8c4 	bl	800ab8c <finite>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d0ea      	beq.n	800a9de <pow+0xa2>
 800aa08:	ec45 4b10 	vmov	d0, r4, r5
 800aa0c:	f000 f8be 	bl	800ab8c <finite>
 800aa10:	e7c3      	b.n	800a99a <pow+0x5e>
 800aa12:	4f01      	ldr	r7, [pc, #4]	@ (800aa18 <pow+0xdc>)
 800aa14:	2600      	movs	r6, #0
 800aa16:	e7e2      	b.n	800a9de <pow+0xa2>
 800aa18:	3ff00000 	.word	0x3ff00000

0800aa1c <frexp>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	2100      	movs	r1, #0
 800aa20:	ec55 4b10 	vmov	r4, r5, d0
 800aa24:	6001      	str	r1, [r0, #0]
 800aa26:	4915      	ldr	r1, [pc, #84]	@ (800aa7c <frexp+0x60>)
 800aa28:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800aa2c:	428a      	cmp	r2, r1
 800aa2e:	4606      	mov	r6, r0
 800aa30:	462b      	mov	r3, r5
 800aa32:	d820      	bhi.n	800aa76 <frexp+0x5a>
 800aa34:	4621      	mov	r1, r4
 800aa36:	4311      	orrs	r1, r2
 800aa38:	d01d      	beq.n	800aa76 <frexp+0x5a>
 800aa3a:	4911      	ldr	r1, [pc, #68]	@ (800aa80 <frexp+0x64>)
 800aa3c:	4029      	ands	r1, r5
 800aa3e:	b961      	cbnz	r1, 800aa5a <frexp+0x3e>
 800aa40:	4b10      	ldr	r3, [pc, #64]	@ (800aa84 <frexp+0x68>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	4620      	mov	r0, r4
 800aa46:	4629      	mov	r1, r5
 800aa48:	f7f5 fdf6 	bl	8000638 <__aeabi_dmul>
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800aa52:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800aa56:	4604      	mov	r4, r0
 800aa58:	6031      	str	r1, [r6, #0]
 800aa5a:	6831      	ldr	r1, [r6, #0]
 800aa5c:	1512      	asrs	r2, r2, #20
 800aa5e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa62:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800aa66:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aa6a:	4411      	add	r1, r2
 800aa6c:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa70:	6031      	str	r1, [r6, #0]
 800aa72:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800aa76:	ec45 4b10 	vmov	d0, r4, r5
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}
 800aa7c:	7fefffff 	.word	0x7fefffff
 800aa80:	7ff00000 	.word	0x7ff00000
 800aa84:	43500000 	.word	0x43500000

0800aa88 <expf>:
 800aa88:	b508      	push	{r3, lr}
 800aa8a:	ed2d 8b02 	vpush	{d8}
 800aa8e:	eef0 8a40 	vmov.f32	s17, s0
 800aa92:	f000 ffb5 	bl	800ba00 <__ieee754_expf>
 800aa96:	eeb0 8a40 	vmov.f32	s16, s0
 800aa9a:	eeb0 0a68 	vmov.f32	s0, s17
 800aa9e:	f000 f88b 	bl	800abb8 <finitef>
 800aaa2:	b160      	cbz	r0, 800aabe <expf+0x36>
 800aaa4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800aae4 <expf+0x5c>
 800aaa8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab0:	dd0a      	ble.n	800aac8 <expf+0x40>
 800aab2:	f002 fc17 	bl	800d2e4 <__errno>
 800aab6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800aae8 <expf+0x60>
 800aaba:	2322      	movs	r3, #34	@ 0x22
 800aabc:	6003      	str	r3, [r0, #0]
 800aabe:	eeb0 0a48 	vmov.f32	s0, s16
 800aac2:	ecbd 8b02 	vpop	{d8}
 800aac6:	bd08      	pop	{r3, pc}
 800aac8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800aaec <expf+0x64>
 800aacc:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad4:	d5f3      	bpl.n	800aabe <expf+0x36>
 800aad6:	f002 fc05 	bl	800d2e4 <__errno>
 800aada:	2322      	movs	r3, #34	@ 0x22
 800aadc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800aaf0 <expf+0x68>
 800aae0:	6003      	str	r3, [r0, #0]
 800aae2:	e7ec      	b.n	800aabe <expf+0x36>
 800aae4:	42b17217 	.word	0x42b17217
 800aae8:	7f800000 	.word	0x7f800000
 800aaec:	c2cff1b5 	.word	0xc2cff1b5
 800aaf0:	00000000 	.word	0x00000000

0800aaf4 <log10f>:
 800aaf4:	b508      	push	{r3, lr}
 800aaf6:	ed2d 8b02 	vpush	{d8}
 800aafa:	eeb0 8a40 	vmov.f32	s16, s0
 800aafe:	f001 f93f 	bl	800bd80 <__ieee754_log10f>
 800ab02:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0a:	d60f      	bvs.n	800ab2c <log10f+0x38>
 800ab0c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ab10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab14:	d80a      	bhi.n	800ab2c <log10f+0x38>
 800ab16:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ab1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1e:	d108      	bne.n	800ab32 <log10f+0x3e>
 800ab20:	f002 fbe0 	bl	800d2e4 <__errno>
 800ab24:	2322      	movs	r3, #34	@ 0x22
 800ab26:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ab48 <log10f+0x54>
 800ab2a:	6003      	str	r3, [r0, #0]
 800ab2c:	ecbd 8b02 	vpop	{d8}
 800ab30:	bd08      	pop	{r3, pc}
 800ab32:	f002 fbd7 	bl	800d2e4 <__errno>
 800ab36:	ecbd 8b02 	vpop	{d8}
 800ab3a:	2321      	movs	r3, #33	@ 0x21
 800ab3c:	6003      	str	r3, [r0, #0]
 800ab3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ab42:	4802      	ldr	r0, [pc, #8]	@ (800ab4c <log10f+0x58>)
 800ab44:	f000 b842 	b.w	800abcc <nanf>
 800ab48:	ff800000 	.word	0xff800000
 800ab4c:	08013383 	.word	0x08013383

0800ab50 <sqrtf>:
 800ab50:	b508      	push	{r3, lr}
 800ab52:	ed2d 8b02 	vpush	{d8}
 800ab56:	eeb0 8a40 	vmov.f32	s16, s0
 800ab5a:	f000 f93d 	bl	800add8 <__ieee754_sqrtf>
 800ab5e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab66:	d60c      	bvs.n	800ab82 <sqrtf+0x32>
 800ab68:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ab88 <sqrtf+0x38>
 800ab6c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ab70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab74:	d505      	bpl.n	800ab82 <sqrtf+0x32>
 800ab76:	f002 fbb5 	bl	800d2e4 <__errno>
 800ab7a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ab7e:	2321      	movs	r3, #33	@ 0x21
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	ecbd 8b02 	vpop	{d8}
 800ab86:	bd08      	pop	{r3, pc}
 800ab88:	00000000 	.word	0x00000000

0800ab8c <finite>:
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	ed8d 0b00 	vstr	d0, [sp]
 800ab92:	9801      	ldr	r0, [sp, #4]
 800ab94:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ab98:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ab9c:	0fc0      	lsrs	r0, r0, #31
 800ab9e:	b002      	add	sp, #8
 800aba0:	4770      	bx	lr
 800aba2:	0000      	movs	r0, r0
 800aba4:	0000      	movs	r0, r0
	...

0800aba8 <nan>:
 800aba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800abb0 <nan+0x8>
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	00000000 	.word	0x00000000
 800abb4:	7ff80000 	.word	0x7ff80000

0800abb8 <finitef>:
 800abb8:	ee10 3a10 	vmov	r3, s0
 800abbc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800abc0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800abc4:	bfac      	ite	ge
 800abc6:	2000      	movge	r0, #0
 800abc8:	2001      	movlt	r0, #1
 800abca:	4770      	bx	lr

0800abcc <nanf>:
 800abcc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800abd4 <nanf+0x8>
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	7fc00000 	.word	0x7fc00000

0800abd8 <with_errnof>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	ed2d 8b02 	vpush	{d8}
 800abde:	eeb0 8a40 	vmov.f32	s16, s0
 800abe2:	4604      	mov	r4, r0
 800abe4:	f002 fb7e 	bl	800d2e4 <__errno>
 800abe8:	eeb0 0a48 	vmov.f32	s0, s16
 800abec:	ecbd 8b02 	vpop	{d8}
 800abf0:	6004      	str	r4, [r0, #0]
 800abf2:	bd10      	pop	{r4, pc}

0800abf4 <xflowf>:
 800abf4:	b130      	cbz	r0, 800ac04 <xflowf+0x10>
 800abf6:	eef1 7a40 	vneg.f32	s15, s0
 800abfa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800abfe:	2022      	movs	r0, #34	@ 0x22
 800ac00:	f7ff bfea 	b.w	800abd8 <with_errnof>
 800ac04:	eef0 7a40 	vmov.f32	s15, s0
 800ac08:	e7f7      	b.n	800abfa <xflowf+0x6>
	...

0800ac0c <__math_uflowf>:
 800ac0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ac14 <__math_uflowf+0x8>
 800ac10:	f7ff bff0 	b.w	800abf4 <xflowf>
 800ac14:	10000000 	.word	0x10000000

0800ac18 <__math_oflowf>:
 800ac18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ac20 <__math_oflowf+0x8>
 800ac1c:	f7ff bfea 	b.w	800abf4 <xflowf>
 800ac20:	70000000 	.word	0x70000000

0800ac24 <__ieee754_sqrt>:
 800ac24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac28:	4a68      	ldr	r2, [pc, #416]	@ (800adcc <__ieee754_sqrt+0x1a8>)
 800ac2a:	ec55 4b10 	vmov	r4, r5, d0
 800ac2e:	43aa      	bics	r2, r5
 800ac30:	462b      	mov	r3, r5
 800ac32:	4621      	mov	r1, r4
 800ac34:	d110      	bne.n	800ac58 <__ieee754_sqrt+0x34>
 800ac36:	4622      	mov	r2, r4
 800ac38:	4620      	mov	r0, r4
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	f7f5 fcfc 	bl	8000638 <__aeabi_dmul>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4620      	mov	r0, r4
 800ac46:	4629      	mov	r1, r5
 800ac48:	f7f5 fb40 	bl	80002cc <__adddf3>
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	460d      	mov	r5, r1
 800ac50:	ec45 4b10 	vmov	d0, r4, r5
 800ac54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac58:	2d00      	cmp	r5, #0
 800ac5a:	dc0e      	bgt.n	800ac7a <__ieee754_sqrt+0x56>
 800ac5c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ac60:	4322      	orrs	r2, r4
 800ac62:	d0f5      	beq.n	800ac50 <__ieee754_sqrt+0x2c>
 800ac64:	b19d      	cbz	r5, 800ac8e <__ieee754_sqrt+0x6a>
 800ac66:	4622      	mov	r2, r4
 800ac68:	4620      	mov	r0, r4
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	f7f5 fb2c 	bl	80002c8 <__aeabi_dsub>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	f7f5 fe0a 	bl	800088c <__aeabi_ddiv>
 800ac78:	e7e8      	b.n	800ac4c <__ieee754_sqrt+0x28>
 800ac7a:	152a      	asrs	r2, r5, #20
 800ac7c:	d115      	bne.n	800acaa <__ieee754_sqrt+0x86>
 800ac7e:	2000      	movs	r0, #0
 800ac80:	e009      	b.n	800ac96 <__ieee754_sqrt+0x72>
 800ac82:	0acb      	lsrs	r3, r1, #11
 800ac84:	3a15      	subs	r2, #21
 800ac86:	0549      	lsls	r1, r1, #21
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0fa      	beq.n	800ac82 <__ieee754_sqrt+0x5e>
 800ac8c:	e7f7      	b.n	800ac7e <__ieee754_sqrt+0x5a>
 800ac8e:	462a      	mov	r2, r5
 800ac90:	e7fa      	b.n	800ac88 <__ieee754_sqrt+0x64>
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	3001      	adds	r0, #1
 800ac96:	02dc      	lsls	r4, r3, #11
 800ac98:	d5fb      	bpl.n	800ac92 <__ieee754_sqrt+0x6e>
 800ac9a:	1e44      	subs	r4, r0, #1
 800ac9c:	1b12      	subs	r2, r2, r4
 800ac9e:	f1c0 0420 	rsb	r4, r0, #32
 800aca2:	fa21 f404 	lsr.w	r4, r1, r4
 800aca6:	4323      	orrs	r3, r4
 800aca8:	4081      	lsls	r1, r0
 800acaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acae:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800acb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acb6:	07d2      	lsls	r2, r2, #31
 800acb8:	bf5c      	itt	pl
 800acba:	005b      	lslpl	r3, r3, #1
 800acbc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800acc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800acc4:	bf58      	it	pl
 800acc6:	0049      	lslpl	r1, r1, #1
 800acc8:	2600      	movs	r6, #0
 800acca:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800acce:	106d      	asrs	r5, r5, #1
 800acd0:	0049      	lsls	r1, r1, #1
 800acd2:	2016      	movs	r0, #22
 800acd4:	4632      	mov	r2, r6
 800acd6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800acda:	1917      	adds	r7, r2, r4
 800acdc:	429f      	cmp	r7, r3
 800acde:	bfde      	ittt	le
 800ace0:	193a      	addle	r2, r7, r4
 800ace2:	1bdb      	suble	r3, r3, r7
 800ace4:	1936      	addle	r6, r6, r4
 800ace6:	0fcf      	lsrs	r7, r1, #31
 800ace8:	3801      	subs	r0, #1
 800acea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800acee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800acf2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800acf6:	d1f0      	bne.n	800acda <__ieee754_sqrt+0xb6>
 800acf8:	4604      	mov	r4, r0
 800acfa:	2720      	movs	r7, #32
 800acfc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ad00:	429a      	cmp	r2, r3
 800ad02:	eb00 0e0c 	add.w	lr, r0, ip
 800ad06:	db02      	blt.n	800ad0e <__ieee754_sqrt+0xea>
 800ad08:	d113      	bne.n	800ad32 <__ieee754_sqrt+0x10e>
 800ad0a:	458e      	cmp	lr, r1
 800ad0c:	d811      	bhi.n	800ad32 <__ieee754_sqrt+0x10e>
 800ad0e:	f1be 0f00 	cmp.w	lr, #0
 800ad12:	eb0e 000c 	add.w	r0, lr, ip
 800ad16:	da42      	bge.n	800ad9e <__ieee754_sqrt+0x17a>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	db40      	blt.n	800ad9e <__ieee754_sqrt+0x17a>
 800ad1c:	f102 0801 	add.w	r8, r2, #1
 800ad20:	1a9b      	subs	r3, r3, r2
 800ad22:	458e      	cmp	lr, r1
 800ad24:	bf88      	it	hi
 800ad26:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ad2a:	eba1 010e 	sub.w	r1, r1, lr
 800ad2e:	4464      	add	r4, ip
 800ad30:	4642      	mov	r2, r8
 800ad32:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ad36:	3f01      	subs	r7, #1
 800ad38:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ad3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ad40:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ad44:	d1dc      	bne.n	800ad00 <__ieee754_sqrt+0xdc>
 800ad46:	4319      	orrs	r1, r3
 800ad48:	d01b      	beq.n	800ad82 <__ieee754_sqrt+0x15e>
 800ad4a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800add0 <__ieee754_sqrt+0x1ac>
 800ad4e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800add4 <__ieee754_sqrt+0x1b0>
 800ad52:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad56:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad5a:	f7f5 fab5 	bl	80002c8 <__aeabi_dsub>
 800ad5e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4640      	mov	r0, r8
 800ad68:	4649      	mov	r1, r9
 800ad6a:	f7f5 fee1 	bl	8000b30 <__aeabi_dcmple>
 800ad6e:	b140      	cbz	r0, 800ad82 <__ieee754_sqrt+0x15e>
 800ad70:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ad74:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad78:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad7c:	d111      	bne.n	800ada2 <__ieee754_sqrt+0x17e>
 800ad7e:	3601      	adds	r6, #1
 800ad80:	463c      	mov	r4, r7
 800ad82:	1072      	asrs	r2, r6, #1
 800ad84:	0863      	lsrs	r3, r4, #1
 800ad86:	07f1      	lsls	r1, r6, #31
 800ad88:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ad8c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ad90:	bf48      	it	mi
 800ad92:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ad96:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	e756      	b.n	800ac4c <__ieee754_sqrt+0x28>
 800ad9e:	4690      	mov	r8, r2
 800ada0:	e7be      	b.n	800ad20 <__ieee754_sqrt+0xfc>
 800ada2:	f7f5 fa93 	bl	80002cc <__adddf3>
 800ada6:	e9da 8900 	ldrd	r8, r9, [sl]
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4640      	mov	r0, r8
 800adb0:	4649      	mov	r1, r9
 800adb2:	f7f5 feb3 	bl	8000b1c <__aeabi_dcmplt>
 800adb6:	b120      	cbz	r0, 800adc2 <__ieee754_sqrt+0x19e>
 800adb8:	1ca0      	adds	r0, r4, #2
 800adba:	bf08      	it	eq
 800adbc:	3601      	addeq	r6, #1
 800adbe:	3402      	adds	r4, #2
 800adc0:	e7df      	b.n	800ad82 <__ieee754_sqrt+0x15e>
 800adc2:	1c63      	adds	r3, r4, #1
 800adc4:	f023 0401 	bic.w	r4, r3, #1
 800adc8:	e7db      	b.n	800ad82 <__ieee754_sqrt+0x15e>
 800adca:	bf00      	nop
 800adcc:	7ff00000 	.word	0x7ff00000
 800add0:	200004e8 	.word	0x200004e8
 800add4:	200004e0 	.word	0x200004e0

0800add8 <__ieee754_sqrtf>:
 800add8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800addc:	4770      	bx	lr
	...

0800ade0 <floor>:
 800ade0:	ec51 0b10 	vmov	r0, r1, d0
 800ade4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ade8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800adf0:	2e13      	cmp	r6, #19
 800adf2:	460c      	mov	r4, r1
 800adf4:	4605      	mov	r5, r0
 800adf6:	4680      	mov	r8, r0
 800adf8:	dc34      	bgt.n	800ae64 <floor+0x84>
 800adfa:	2e00      	cmp	r6, #0
 800adfc:	da17      	bge.n	800ae2e <floor+0x4e>
 800adfe:	a332      	add	r3, pc, #200	@ (adr r3, 800aec8 <floor+0xe8>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	f7f5 fa62 	bl	80002cc <__adddf3>
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f7f5 fea4 	bl	8000b58 <__aeabi_dcmpgt>
 800ae10:	b150      	cbz	r0, 800ae28 <floor+0x48>
 800ae12:	2c00      	cmp	r4, #0
 800ae14:	da55      	bge.n	800aec2 <floor+0xe2>
 800ae16:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ae1a:	432c      	orrs	r4, r5
 800ae1c:	2500      	movs	r5, #0
 800ae1e:	42ac      	cmp	r4, r5
 800ae20:	4c2b      	ldr	r4, [pc, #172]	@ (800aed0 <floor+0xf0>)
 800ae22:	bf08      	it	eq
 800ae24:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ae28:	4621      	mov	r1, r4
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	e023      	b.n	800ae76 <floor+0x96>
 800ae2e:	4f29      	ldr	r7, [pc, #164]	@ (800aed4 <floor+0xf4>)
 800ae30:	4137      	asrs	r7, r6
 800ae32:	ea01 0307 	and.w	r3, r1, r7
 800ae36:	4303      	orrs	r3, r0
 800ae38:	d01d      	beq.n	800ae76 <floor+0x96>
 800ae3a:	a323      	add	r3, pc, #140	@ (adr r3, 800aec8 <floor+0xe8>)
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	f7f5 fa44 	bl	80002cc <__adddf3>
 800ae44:	2200      	movs	r2, #0
 800ae46:	2300      	movs	r3, #0
 800ae48:	f7f5 fe86 	bl	8000b58 <__aeabi_dcmpgt>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d0eb      	beq.n	800ae28 <floor+0x48>
 800ae50:	2c00      	cmp	r4, #0
 800ae52:	bfbe      	ittt	lt
 800ae54:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ae58:	4133      	asrlt	r3, r6
 800ae5a:	18e4      	addlt	r4, r4, r3
 800ae5c:	ea24 0407 	bic.w	r4, r4, r7
 800ae60:	2500      	movs	r5, #0
 800ae62:	e7e1      	b.n	800ae28 <floor+0x48>
 800ae64:	2e33      	cmp	r6, #51	@ 0x33
 800ae66:	dd0a      	ble.n	800ae7e <floor+0x9e>
 800ae68:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ae6c:	d103      	bne.n	800ae76 <floor+0x96>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	f7f5 fa2b 	bl	80002cc <__adddf3>
 800ae76:	ec41 0b10 	vmov	d0, r0, r1
 800ae7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ae82:	f04f 37ff 	mov.w	r7, #4294967295
 800ae86:	40df      	lsrs	r7, r3
 800ae88:	4207      	tst	r7, r0
 800ae8a:	d0f4      	beq.n	800ae76 <floor+0x96>
 800ae8c:	a30e      	add	r3, pc, #56	@ (adr r3, 800aec8 <floor+0xe8>)
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	f7f5 fa1b 	bl	80002cc <__adddf3>
 800ae96:	2200      	movs	r2, #0
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f7f5 fe5d 	bl	8000b58 <__aeabi_dcmpgt>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d0c2      	beq.n	800ae28 <floor+0x48>
 800aea2:	2c00      	cmp	r4, #0
 800aea4:	da0a      	bge.n	800aebc <floor+0xdc>
 800aea6:	2e14      	cmp	r6, #20
 800aea8:	d101      	bne.n	800aeae <floor+0xce>
 800aeaa:	3401      	adds	r4, #1
 800aeac:	e006      	b.n	800aebc <floor+0xdc>
 800aeae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	40b3      	lsls	r3, r6
 800aeb6:	441d      	add	r5, r3
 800aeb8:	4545      	cmp	r5, r8
 800aeba:	d3f6      	bcc.n	800aeaa <floor+0xca>
 800aebc:	ea25 0507 	bic.w	r5, r5, r7
 800aec0:	e7b2      	b.n	800ae28 <floor+0x48>
 800aec2:	2500      	movs	r5, #0
 800aec4:	462c      	mov	r4, r5
 800aec6:	e7af      	b.n	800ae28 <floor+0x48>
 800aec8:	8800759c 	.word	0x8800759c
 800aecc:	7e37e43c 	.word	0x7e37e43c
 800aed0:	bff00000 	.word	0xbff00000
 800aed4:	000fffff 	.word	0x000fffff

0800aed8 <round>:
 800aed8:	ec51 0b10 	vmov	r0, r1, d0
 800aedc:	b570      	push	{r4, r5, r6, lr}
 800aede:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800aee2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800aee6:	2a13      	cmp	r2, #19
 800aee8:	460b      	mov	r3, r1
 800aeea:	4605      	mov	r5, r0
 800aeec:	dc1b      	bgt.n	800af26 <round+0x4e>
 800aeee:	2a00      	cmp	r2, #0
 800aef0:	da0b      	bge.n	800af0a <round+0x32>
 800aef2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800aef6:	3201      	adds	r2, #1
 800aef8:	bf04      	itt	eq
 800aefa:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800aefe:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800af02:	2200      	movs	r2, #0
 800af04:	4619      	mov	r1, r3
 800af06:	4610      	mov	r0, r2
 800af08:	e015      	b.n	800af36 <round+0x5e>
 800af0a:	4c15      	ldr	r4, [pc, #84]	@ (800af60 <round+0x88>)
 800af0c:	4114      	asrs	r4, r2
 800af0e:	ea04 0601 	and.w	r6, r4, r1
 800af12:	4306      	orrs	r6, r0
 800af14:	d00f      	beq.n	800af36 <round+0x5e>
 800af16:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800af1a:	fa41 f202 	asr.w	r2, r1, r2
 800af1e:	4413      	add	r3, r2
 800af20:	ea23 0304 	bic.w	r3, r3, r4
 800af24:	e7ed      	b.n	800af02 <round+0x2a>
 800af26:	2a33      	cmp	r2, #51	@ 0x33
 800af28:	dd08      	ble.n	800af3c <round+0x64>
 800af2a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800af2e:	d102      	bne.n	800af36 <round+0x5e>
 800af30:	4602      	mov	r2, r0
 800af32:	f7f5 f9cb 	bl	80002cc <__adddf3>
 800af36:	ec41 0b10 	vmov	d0, r0, r1
 800af3a:	bd70      	pop	{r4, r5, r6, pc}
 800af3c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800af40:	f04f 34ff 	mov.w	r4, #4294967295
 800af44:	40f4      	lsrs	r4, r6
 800af46:	4204      	tst	r4, r0
 800af48:	d0f5      	beq.n	800af36 <round+0x5e>
 800af4a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800af4e:	2201      	movs	r2, #1
 800af50:	408a      	lsls	r2, r1
 800af52:	1952      	adds	r2, r2, r5
 800af54:	bf28      	it	cs
 800af56:	3301      	addcs	r3, #1
 800af58:	ea22 0204 	bic.w	r2, r2, r4
 800af5c:	e7d2      	b.n	800af04 <round+0x2c>
 800af5e:	bf00      	nop
 800af60:	000fffff 	.word	0x000fffff
 800af64:	00000000 	.word	0x00000000

0800af68 <__ieee754_pow>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	b091      	sub	sp, #68	@ 0x44
 800af6e:	ed8d 1b00 	vstr	d1, [sp]
 800af72:	e9dd 1900 	ldrd	r1, r9, [sp]
 800af76:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800af7a:	ea5a 0001 	orrs.w	r0, sl, r1
 800af7e:	ec57 6b10 	vmov	r6, r7, d0
 800af82:	d113      	bne.n	800afac <__ieee754_pow+0x44>
 800af84:	19b3      	adds	r3, r6, r6
 800af86:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800af8a:	4152      	adcs	r2, r2
 800af8c:	4298      	cmp	r0, r3
 800af8e:	4b98      	ldr	r3, [pc, #608]	@ (800b1f0 <__ieee754_pow+0x288>)
 800af90:	4193      	sbcs	r3, r2
 800af92:	f080 84ea 	bcs.w	800b96a <__ieee754_pow+0xa02>
 800af96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af9a:	4630      	mov	r0, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	f7f5 f995 	bl	80002cc <__adddf3>
 800afa2:	ec41 0b10 	vmov	d0, r0, r1
 800afa6:	b011      	add	sp, #68	@ 0x44
 800afa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afac:	4a91      	ldr	r2, [pc, #580]	@ (800b1f4 <__ieee754_pow+0x28c>)
 800afae:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800afb2:	4590      	cmp	r8, r2
 800afb4:	463d      	mov	r5, r7
 800afb6:	4633      	mov	r3, r6
 800afb8:	d806      	bhi.n	800afc8 <__ieee754_pow+0x60>
 800afba:	d101      	bne.n	800afc0 <__ieee754_pow+0x58>
 800afbc:	2e00      	cmp	r6, #0
 800afbe:	d1ea      	bne.n	800af96 <__ieee754_pow+0x2e>
 800afc0:	4592      	cmp	sl, r2
 800afc2:	d801      	bhi.n	800afc8 <__ieee754_pow+0x60>
 800afc4:	d10e      	bne.n	800afe4 <__ieee754_pow+0x7c>
 800afc6:	b169      	cbz	r1, 800afe4 <__ieee754_pow+0x7c>
 800afc8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800afcc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800afd0:	431d      	orrs	r5, r3
 800afd2:	d1e0      	bne.n	800af96 <__ieee754_pow+0x2e>
 800afd4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afd8:	18db      	adds	r3, r3, r3
 800afda:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800afde:	4152      	adcs	r2, r2
 800afe0:	429d      	cmp	r5, r3
 800afe2:	e7d4      	b.n	800af8e <__ieee754_pow+0x26>
 800afe4:	2d00      	cmp	r5, #0
 800afe6:	46c3      	mov	fp, r8
 800afe8:	da3a      	bge.n	800b060 <__ieee754_pow+0xf8>
 800afea:	4a83      	ldr	r2, [pc, #524]	@ (800b1f8 <__ieee754_pow+0x290>)
 800afec:	4592      	cmp	sl, r2
 800afee:	d84d      	bhi.n	800b08c <__ieee754_pow+0x124>
 800aff0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800aff4:	4592      	cmp	sl, r2
 800aff6:	f240 84c7 	bls.w	800b988 <__ieee754_pow+0xa20>
 800affa:	ea4f 522a 	mov.w	r2, sl, asr #20
 800affe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b002:	2a14      	cmp	r2, #20
 800b004:	dd0f      	ble.n	800b026 <__ieee754_pow+0xbe>
 800b006:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b00a:	fa21 f402 	lsr.w	r4, r1, r2
 800b00e:	fa04 f202 	lsl.w	r2, r4, r2
 800b012:	428a      	cmp	r2, r1
 800b014:	f040 84b8 	bne.w	800b988 <__ieee754_pow+0xa20>
 800b018:	f004 0401 	and.w	r4, r4, #1
 800b01c:	f1c4 0402 	rsb	r4, r4, #2
 800b020:	2900      	cmp	r1, #0
 800b022:	d158      	bne.n	800b0d6 <__ieee754_pow+0x16e>
 800b024:	e00e      	b.n	800b044 <__ieee754_pow+0xdc>
 800b026:	2900      	cmp	r1, #0
 800b028:	d154      	bne.n	800b0d4 <__ieee754_pow+0x16c>
 800b02a:	f1c2 0214 	rsb	r2, r2, #20
 800b02e:	fa4a f402 	asr.w	r4, sl, r2
 800b032:	fa04 f202 	lsl.w	r2, r4, r2
 800b036:	4552      	cmp	r2, sl
 800b038:	f040 84a3 	bne.w	800b982 <__ieee754_pow+0xa1a>
 800b03c:	f004 0401 	and.w	r4, r4, #1
 800b040:	f1c4 0402 	rsb	r4, r4, #2
 800b044:	4a6d      	ldr	r2, [pc, #436]	@ (800b1fc <__ieee754_pow+0x294>)
 800b046:	4592      	cmp	sl, r2
 800b048:	d12e      	bne.n	800b0a8 <__ieee754_pow+0x140>
 800b04a:	f1b9 0f00 	cmp.w	r9, #0
 800b04e:	f280 8494 	bge.w	800b97a <__ieee754_pow+0xa12>
 800b052:	496a      	ldr	r1, [pc, #424]	@ (800b1fc <__ieee754_pow+0x294>)
 800b054:	4632      	mov	r2, r6
 800b056:	463b      	mov	r3, r7
 800b058:	2000      	movs	r0, #0
 800b05a:	f7f5 fc17 	bl	800088c <__aeabi_ddiv>
 800b05e:	e7a0      	b.n	800afa2 <__ieee754_pow+0x3a>
 800b060:	2400      	movs	r4, #0
 800b062:	bbc1      	cbnz	r1, 800b0d6 <__ieee754_pow+0x16e>
 800b064:	4a63      	ldr	r2, [pc, #396]	@ (800b1f4 <__ieee754_pow+0x28c>)
 800b066:	4592      	cmp	sl, r2
 800b068:	d1ec      	bne.n	800b044 <__ieee754_pow+0xdc>
 800b06a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b06e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b072:	431a      	orrs	r2, r3
 800b074:	f000 8479 	beq.w	800b96a <__ieee754_pow+0xa02>
 800b078:	4b61      	ldr	r3, [pc, #388]	@ (800b200 <__ieee754_pow+0x298>)
 800b07a:	4598      	cmp	r8, r3
 800b07c:	d908      	bls.n	800b090 <__ieee754_pow+0x128>
 800b07e:	f1b9 0f00 	cmp.w	r9, #0
 800b082:	f2c0 8476 	blt.w	800b972 <__ieee754_pow+0xa0a>
 800b086:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b08a:	e78a      	b.n	800afa2 <__ieee754_pow+0x3a>
 800b08c:	2402      	movs	r4, #2
 800b08e:	e7e8      	b.n	800b062 <__ieee754_pow+0xfa>
 800b090:	f1b9 0f00 	cmp.w	r9, #0
 800b094:	f04f 0000 	mov.w	r0, #0
 800b098:	f04f 0100 	mov.w	r1, #0
 800b09c:	da81      	bge.n	800afa2 <__ieee754_pow+0x3a>
 800b09e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b0a2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b0a6:	e77c      	b.n	800afa2 <__ieee754_pow+0x3a>
 800b0a8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b0ac:	d106      	bne.n	800b0bc <__ieee754_pow+0x154>
 800b0ae:	4632      	mov	r2, r6
 800b0b0:	463b      	mov	r3, r7
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	4639      	mov	r1, r7
 800b0b6:	f7f5 fabf 	bl	8000638 <__aeabi_dmul>
 800b0ba:	e772      	b.n	800afa2 <__ieee754_pow+0x3a>
 800b0bc:	4a51      	ldr	r2, [pc, #324]	@ (800b204 <__ieee754_pow+0x29c>)
 800b0be:	4591      	cmp	r9, r2
 800b0c0:	d109      	bne.n	800b0d6 <__ieee754_pow+0x16e>
 800b0c2:	2d00      	cmp	r5, #0
 800b0c4:	db07      	blt.n	800b0d6 <__ieee754_pow+0x16e>
 800b0c6:	ec47 6b10 	vmov	d0, r6, r7
 800b0ca:	b011      	add	sp, #68	@ 0x44
 800b0cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	f7ff bda8 	b.w	800ac24 <__ieee754_sqrt>
 800b0d4:	2400      	movs	r4, #0
 800b0d6:	ec47 6b10 	vmov	d0, r6, r7
 800b0da:	9302      	str	r3, [sp, #8]
 800b0dc:	f000 fc88 	bl	800b9f0 <fabs>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	ec51 0b10 	vmov	r0, r1, d0
 800b0e6:	bb53      	cbnz	r3, 800b13e <__ieee754_pow+0x1d6>
 800b0e8:	4b44      	ldr	r3, [pc, #272]	@ (800b1fc <__ieee754_pow+0x294>)
 800b0ea:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d002      	beq.n	800b0f8 <__ieee754_pow+0x190>
 800b0f2:	f1b8 0f00 	cmp.w	r8, #0
 800b0f6:	d122      	bne.n	800b13e <__ieee754_pow+0x1d6>
 800b0f8:	f1b9 0f00 	cmp.w	r9, #0
 800b0fc:	da05      	bge.n	800b10a <__ieee754_pow+0x1a2>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	2000      	movs	r0, #0
 800b104:	493d      	ldr	r1, [pc, #244]	@ (800b1fc <__ieee754_pow+0x294>)
 800b106:	f7f5 fbc1 	bl	800088c <__aeabi_ddiv>
 800b10a:	2d00      	cmp	r5, #0
 800b10c:	f6bf af49 	bge.w	800afa2 <__ieee754_pow+0x3a>
 800b110:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b114:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b118:	ea58 0804 	orrs.w	r8, r8, r4
 800b11c:	d108      	bne.n	800b130 <__ieee754_pow+0x1c8>
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	4610      	mov	r0, r2
 800b124:	4619      	mov	r1, r3
 800b126:	f7f5 f8cf 	bl	80002c8 <__aeabi_dsub>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	e794      	b.n	800b05a <__ieee754_pow+0xf2>
 800b130:	2c01      	cmp	r4, #1
 800b132:	f47f af36 	bne.w	800afa2 <__ieee754_pow+0x3a>
 800b136:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b13a:	4619      	mov	r1, r3
 800b13c:	e731      	b.n	800afa2 <__ieee754_pow+0x3a>
 800b13e:	0feb      	lsrs	r3, r5, #31
 800b140:	3b01      	subs	r3, #1
 800b142:	ea53 0204 	orrs.w	r2, r3, r4
 800b146:	d102      	bne.n	800b14e <__ieee754_pow+0x1e6>
 800b148:	4632      	mov	r2, r6
 800b14a:	463b      	mov	r3, r7
 800b14c:	e7e9      	b.n	800b122 <__ieee754_pow+0x1ba>
 800b14e:	3c01      	subs	r4, #1
 800b150:	431c      	orrs	r4, r3
 800b152:	d016      	beq.n	800b182 <__ieee754_pow+0x21a>
 800b154:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b1e0 <__ieee754_pow+0x278>
 800b158:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b15c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b160:	f240 8112 	bls.w	800b388 <__ieee754_pow+0x420>
 800b164:	4b28      	ldr	r3, [pc, #160]	@ (800b208 <__ieee754_pow+0x2a0>)
 800b166:	459a      	cmp	sl, r3
 800b168:	4b25      	ldr	r3, [pc, #148]	@ (800b200 <__ieee754_pow+0x298>)
 800b16a:	d916      	bls.n	800b19a <__ieee754_pow+0x232>
 800b16c:	4598      	cmp	r8, r3
 800b16e:	d80b      	bhi.n	800b188 <__ieee754_pow+0x220>
 800b170:	f1b9 0f00 	cmp.w	r9, #0
 800b174:	da0b      	bge.n	800b18e <__ieee754_pow+0x226>
 800b176:	2000      	movs	r0, #0
 800b178:	b011      	add	sp, #68	@ 0x44
 800b17a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17e:	f000 bf0b 	b.w	800bf98 <__math_oflow>
 800b182:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b1e8 <__ieee754_pow+0x280>
 800b186:	e7e7      	b.n	800b158 <__ieee754_pow+0x1f0>
 800b188:	f1b9 0f00 	cmp.w	r9, #0
 800b18c:	dcf3      	bgt.n	800b176 <__ieee754_pow+0x20e>
 800b18e:	2000      	movs	r0, #0
 800b190:	b011      	add	sp, #68	@ 0x44
 800b192:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b196:	f000 bef7 	b.w	800bf88 <__math_uflow>
 800b19a:	4598      	cmp	r8, r3
 800b19c:	d20c      	bcs.n	800b1b8 <__ieee754_pow+0x250>
 800b19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f7f5 fcb9 	bl	8000b1c <__aeabi_dcmplt>
 800b1aa:	3800      	subs	r0, #0
 800b1ac:	bf18      	it	ne
 800b1ae:	2001      	movne	r0, #1
 800b1b0:	f1b9 0f00 	cmp.w	r9, #0
 800b1b4:	daec      	bge.n	800b190 <__ieee754_pow+0x228>
 800b1b6:	e7df      	b.n	800b178 <__ieee754_pow+0x210>
 800b1b8:	4b10      	ldr	r3, [pc, #64]	@ (800b1fc <__ieee754_pow+0x294>)
 800b1ba:	4598      	cmp	r8, r3
 800b1bc:	f04f 0200 	mov.w	r2, #0
 800b1c0:	d924      	bls.n	800b20c <__ieee754_pow+0x2a4>
 800b1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f7f5 fca8 	bl	8000b1c <__aeabi_dcmplt>
 800b1cc:	3800      	subs	r0, #0
 800b1ce:	bf18      	it	ne
 800b1d0:	2001      	movne	r0, #1
 800b1d2:	f1b9 0f00 	cmp.w	r9, #0
 800b1d6:	dccf      	bgt.n	800b178 <__ieee754_pow+0x210>
 800b1d8:	e7da      	b.n	800b190 <__ieee754_pow+0x228>
 800b1da:	bf00      	nop
 800b1dc:	f3af 8000 	nop.w
 800b1e0:	00000000 	.word	0x00000000
 800b1e4:	3ff00000 	.word	0x3ff00000
 800b1e8:	00000000 	.word	0x00000000
 800b1ec:	bff00000 	.word	0xbff00000
 800b1f0:	fff00000 	.word	0xfff00000
 800b1f4:	7ff00000 	.word	0x7ff00000
 800b1f8:	433fffff 	.word	0x433fffff
 800b1fc:	3ff00000 	.word	0x3ff00000
 800b200:	3fefffff 	.word	0x3fefffff
 800b204:	3fe00000 	.word	0x3fe00000
 800b208:	43f00000 	.word	0x43f00000
 800b20c:	4b5a      	ldr	r3, [pc, #360]	@ (800b378 <__ieee754_pow+0x410>)
 800b20e:	f7f5 f85b 	bl	80002c8 <__aeabi_dsub>
 800b212:	a351      	add	r3, pc, #324	@ (adr r3, 800b358 <__ieee754_pow+0x3f0>)
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	4604      	mov	r4, r0
 800b21a:	460d      	mov	r5, r1
 800b21c:	f7f5 fa0c 	bl	8000638 <__aeabi_dmul>
 800b220:	a34f      	add	r3, pc, #316	@ (adr r3, 800b360 <__ieee754_pow+0x3f8>)
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	4606      	mov	r6, r0
 800b228:	460f      	mov	r7, r1
 800b22a:	4620      	mov	r0, r4
 800b22c:	4629      	mov	r1, r5
 800b22e:	f7f5 fa03 	bl	8000638 <__aeabi_dmul>
 800b232:	4b52      	ldr	r3, [pc, #328]	@ (800b37c <__ieee754_pow+0x414>)
 800b234:	4682      	mov	sl, r0
 800b236:	468b      	mov	fp, r1
 800b238:	2200      	movs	r2, #0
 800b23a:	4620      	mov	r0, r4
 800b23c:	4629      	mov	r1, r5
 800b23e:	f7f5 f9fb 	bl	8000638 <__aeabi_dmul>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	a148      	add	r1, pc, #288	@ (adr r1, 800b368 <__ieee754_pow+0x400>)
 800b248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b24c:	f7f5 f83c 	bl	80002c8 <__aeabi_dsub>
 800b250:	4622      	mov	r2, r4
 800b252:	462b      	mov	r3, r5
 800b254:	f7f5 f9f0 	bl	8000638 <__aeabi_dmul>
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	2000      	movs	r0, #0
 800b25e:	4948      	ldr	r1, [pc, #288]	@ (800b380 <__ieee754_pow+0x418>)
 800b260:	f7f5 f832 	bl	80002c8 <__aeabi_dsub>
 800b264:	4622      	mov	r2, r4
 800b266:	4680      	mov	r8, r0
 800b268:	4689      	mov	r9, r1
 800b26a:	462b      	mov	r3, r5
 800b26c:	4620      	mov	r0, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	f7f5 f9e2 	bl	8000638 <__aeabi_dmul>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4640      	mov	r0, r8
 800b27a:	4649      	mov	r1, r9
 800b27c:	f7f5 f9dc 	bl	8000638 <__aeabi_dmul>
 800b280:	a33b      	add	r3, pc, #236	@ (adr r3, 800b370 <__ieee754_pow+0x408>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f7f5 f9d7 	bl	8000638 <__aeabi_dmul>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	4650      	mov	r0, sl
 800b290:	4659      	mov	r1, fp
 800b292:	f7f5 f819 	bl	80002c8 <__aeabi_dsub>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4680      	mov	r8, r0
 800b29c:	4689      	mov	r9, r1
 800b29e:	4630      	mov	r0, r6
 800b2a0:	4639      	mov	r1, r7
 800b2a2:	f7f5 f813 	bl	80002cc <__adddf3>
 800b2a6:	2400      	movs	r4, #0
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	463b      	mov	r3, r7
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	460d      	mov	r5, r1
 800b2b0:	f7f5 f80a 	bl	80002c8 <__aeabi_dsub>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4640      	mov	r0, r8
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	f7f5 f804 	bl	80002c8 <__aeabi_dsub>
 800b2c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	9304      	str	r3, [sp, #16]
 800b2cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	460f      	mov	r7, r1
 800b2d4:	4652      	mov	r2, sl
 800b2d6:	465b      	mov	r3, fp
 800b2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2dc:	f7f4 fff4 	bl	80002c8 <__aeabi_dsub>
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	462b      	mov	r3, r5
 800b2e4:	f7f5 f9a8 	bl	8000638 <__aeabi_dmul>
 800b2e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ec:	4680      	mov	r8, r0
 800b2ee:	4689      	mov	r9, r1
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	f7f5 f9a0 	bl	8000638 <__aeabi_dmul>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4640      	mov	r0, r8
 800b2fe:	4649      	mov	r1, r9
 800b300:	f7f4 ffe4 	bl	80002cc <__adddf3>
 800b304:	4652      	mov	r2, sl
 800b306:	465b      	mov	r3, fp
 800b308:	4606      	mov	r6, r0
 800b30a:	460f      	mov	r7, r1
 800b30c:	4620      	mov	r0, r4
 800b30e:	4629      	mov	r1, r5
 800b310:	f7f5 f992 	bl	8000638 <__aeabi_dmul>
 800b314:	460b      	mov	r3, r1
 800b316:	4602      	mov	r2, r0
 800b318:	4680      	mov	r8, r0
 800b31a:	4689      	mov	r9, r1
 800b31c:	4630      	mov	r0, r6
 800b31e:	4639      	mov	r1, r7
 800b320:	f7f4 ffd4 	bl	80002cc <__adddf3>
 800b324:	4b17      	ldr	r3, [pc, #92]	@ (800b384 <__ieee754_pow+0x41c>)
 800b326:	4299      	cmp	r1, r3
 800b328:	4604      	mov	r4, r0
 800b32a:	460d      	mov	r5, r1
 800b32c:	468a      	mov	sl, r1
 800b32e:	468b      	mov	fp, r1
 800b330:	f340 82ef 	ble.w	800b912 <__ieee754_pow+0x9aa>
 800b334:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b338:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b33c:	4303      	orrs	r3, r0
 800b33e:	f000 81e8 	beq.w	800b712 <__ieee754_pow+0x7aa>
 800b342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b346:	2200      	movs	r2, #0
 800b348:	2300      	movs	r3, #0
 800b34a:	f7f5 fbe7 	bl	8000b1c <__aeabi_dcmplt>
 800b34e:	3800      	subs	r0, #0
 800b350:	bf18      	it	ne
 800b352:	2001      	movne	r0, #1
 800b354:	e710      	b.n	800b178 <__ieee754_pow+0x210>
 800b356:	bf00      	nop
 800b358:	60000000 	.word	0x60000000
 800b35c:	3ff71547 	.word	0x3ff71547
 800b360:	f85ddf44 	.word	0xf85ddf44
 800b364:	3e54ae0b 	.word	0x3e54ae0b
 800b368:	55555555 	.word	0x55555555
 800b36c:	3fd55555 	.word	0x3fd55555
 800b370:	652b82fe 	.word	0x652b82fe
 800b374:	3ff71547 	.word	0x3ff71547
 800b378:	3ff00000 	.word	0x3ff00000
 800b37c:	3fd00000 	.word	0x3fd00000
 800b380:	3fe00000 	.word	0x3fe00000
 800b384:	408fffff 	.word	0x408fffff
 800b388:	4bd5      	ldr	r3, [pc, #852]	@ (800b6e0 <__ieee754_pow+0x778>)
 800b38a:	402b      	ands	r3, r5
 800b38c:	2200      	movs	r2, #0
 800b38e:	b92b      	cbnz	r3, 800b39c <__ieee754_pow+0x434>
 800b390:	4bd4      	ldr	r3, [pc, #848]	@ (800b6e4 <__ieee754_pow+0x77c>)
 800b392:	f7f5 f951 	bl	8000638 <__aeabi_dmul>
 800b396:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b39a:	468b      	mov	fp, r1
 800b39c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b3a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b3a4:	4413      	add	r3, r2
 800b3a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3a8:	4bcf      	ldr	r3, [pc, #828]	@ (800b6e8 <__ieee754_pow+0x780>)
 800b3aa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b3ae:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b3b2:	459b      	cmp	fp, r3
 800b3b4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b3b8:	dd08      	ble.n	800b3cc <__ieee754_pow+0x464>
 800b3ba:	4bcc      	ldr	r3, [pc, #816]	@ (800b6ec <__ieee754_pow+0x784>)
 800b3bc:	459b      	cmp	fp, r3
 800b3be:	f340 81a5 	ble.w	800b70c <__ieee754_pow+0x7a4>
 800b3c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3c8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b3cc:	f04f 0a00 	mov.w	sl, #0
 800b3d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b3d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3d6:	4bc6      	ldr	r3, [pc, #792]	@ (800b6f0 <__ieee754_pow+0x788>)
 800b3d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3dc:	ed93 7b00 	vldr	d7, [r3]
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	ec53 2b17 	vmov	r2, r3, d7
 800b3e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3ea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3ee:	f7f4 ff6b 	bl	80002c8 <__aeabi_dsub>
 800b3f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3fe:	f7f4 ff65 	bl	80002cc <__adddf3>
 800b402:	4602      	mov	r2, r0
 800b404:	460b      	mov	r3, r1
 800b406:	2000      	movs	r0, #0
 800b408:	49ba      	ldr	r1, [pc, #744]	@ (800b6f4 <__ieee754_pow+0x78c>)
 800b40a:	f7f5 fa3f 	bl	800088c <__aeabi_ddiv>
 800b40e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b412:	4602      	mov	r2, r0
 800b414:	460b      	mov	r3, r1
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	f7f5 f90d 	bl	8000638 <__aeabi_dmul>
 800b41e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b422:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b426:	106d      	asrs	r5, r5, #1
 800b428:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b42c:	f04f 0b00 	mov.w	fp, #0
 800b430:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b434:	4661      	mov	r1, ip
 800b436:	2200      	movs	r2, #0
 800b438:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b43c:	4658      	mov	r0, fp
 800b43e:	46e1      	mov	r9, ip
 800b440:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b444:	4614      	mov	r4, r2
 800b446:	461d      	mov	r5, r3
 800b448:	f7f5 f8f6 	bl	8000638 <__aeabi_dmul>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4630      	mov	r0, r6
 800b452:	4639      	mov	r1, r7
 800b454:	f7f4 ff38 	bl	80002c8 <__aeabi_dsub>
 800b458:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b45c:	4606      	mov	r6, r0
 800b45e:	460f      	mov	r7, r1
 800b460:	4620      	mov	r0, r4
 800b462:	4629      	mov	r1, r5
 800b464:	f7f4 ff30 	bl	80002c8 <__aeabi_dsub>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b470:	f7f4 ff2a 	bl	80002c8 <__aeabi_dsub>
 800b474:	465a      	mov	r2, fp
 800b476:	464b      	mov	r3, r9
 800b478:	f7f5 f8de 	bl	8000638 <__aeabi_dmul>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	4630      	mov	r0, r6
 800b482:	4639      	mov	r1, r7
 800b484:	f7f4 ff20 	bl	80002c8 <__aeabi_dsub>
 800b488:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b48c:	f7f5 f8d4 	bl	8000638 <__aeabi_dmul>
 800b490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b494:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b498:	4610      	mov	r0, r2
 800b49a:	4619      	mov	r1, r3
 800b49c:	f7f5 f8cc 	bl	8000638 <__aeabi_dmul>
 800b4a0:	a37d      	add	r3, pc, #500	@ (adr r3, 800b698 <__ieee754_pow+0x730>)
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	460d      	mov	r5, r1
 800b4aa:	f7f5 f8c5 	bl	8000638 <__aeabi_dmul>
 800b4ae:	a37c      	add	r3, pc, #496	@ (adr r3, 800b6a0 <__ieee754_pow+0x738>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	f7f4 ff0a 	bl	80002cc <__adddf3>
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	462b      	mov	r3, r5
 800b4bc:	f7f5 f8bc 	bl	8000638 <__aeabi_dmul>
 800b4c0:	a379      	add	r3, pc, #484	@ (adr r3, 800b6a8 <__ieee754_pow+0x740>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	f7f4 ff01 	bl	80002cc <__adddf3>
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	462b      	mov	r3, r5
 800b4ce:	f7f5 f8b3 	bl	8000638 <__aeabi_dmul>
 800b4d2:	a377      	add	r3, pc, #476	@ (adr r3, 800b6b0 <__ieee754_pow+0x748>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	f7f4 fef8 	bl	80002cc <__adddf3>
 800b4dc:	4622      	mov	r2, r4
 800b4de:	462b      	mov	r3, r5
 800b4e0:	f7f5 f8aa 	bl	8000638 <__aeabi_dmul>
 800b4e4:	a374      	add	r3, pc, #464	@ (adr r3, 800b6b8 <__ieee754_pow+0x750>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	f7f4 feef 	bl	80002cc <__adddf3>
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	f7f5 f8a1 	bl	8000638 <__aeabi_dmul>
 800b4f6:	a372      	add	r3, pc, #456	@ (adr r3, 800b6c0 <__ieee754_pow+0x758>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	f7f4 fee6 	bl	80002cc <__adddf3>
 800b500:	4622      	mov	r2, r4
 800b502:	4606      	mov	r6, r0
 800b504:	460f      	mov	r7, r1
 800b506:	462b      	mov	r3, r5
 800b508:	4620      	mov	r0, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	f7f5 f894 	bl	8000638 <__aeabi_dmul>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4630      	mov	r0, r6
 800b516:	4639      	mov	r1, r7
 800b518:	f7f5 f88e 	bl	8000638 <__aeabi_dmul>
 800b51c:	465a      	mov	r2, fp
 800b51e:	4604      	mov	r4, r0
 800b520:	460d      	mov	r5, r1
 800b522:	464b      	mov	r3, r9
 800b524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b528:	f7f4 fed0 	bl	80002cc <__adddf3>
 800b52c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b530:	f7f5 f882 	bl	8000638 <__aeabi_dmul>
 800b534:	4622      	mov	r2, r4
 800b536:	462b      	mov	r3, r5
 800b538:	f7f4 fec8 	bl	80002cc <__adddf3>
 800b53c:	465a      	mov	r2, fp
 800b53e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b542:	464b      	mov	r3, r9
 800b544:	4658      	mov	r0, fp
 800b546:	4649      	mov	r1, r9
 800b548:	f7f5 f876 	bl	8000638 <__aeabi_dmul>
 800b54c:	4b6a      	ldr	r3, [pc, #424]	@ (800b6f8 <__ieee754_pow+0x790>)
 800b54e:	2200      	movs	r2, #0
 800b550:	4606      	mov	r6, r0
 800b552:	460f      	mov	r7, r1
 800b554:	f7f4 feba 	bl	80002cc <__adddf3>
 800b558:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b55c:	f7f4 feb6 	bl	80002cc <__adddf3>
 800b560:	46d8      	mov	r8, fp
 800b562:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b566:	460d      	mov	r5, r1
 800b568:	465a      	mov	r2, fp
 800b56a:	460b      	mov	r3, r1
 800b56c:	4640      	mov	r0, r8
 800b56e:	4649      	mov	r1, r9
 800b570:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b574:	f7f5 f860 	bl	8000638 <__aeabi_dmul>
 800b578:	465c      	mov	r4, fp
 800b57a:	4680      	mov	r8, r0
 800b57c:	4689      	mov	r9, r1
 800b57e:	4b5e      	ldr	r3, [pc, #376]	@ (800b6f8 <__ieee754_pow+0x790>)
 800b580:	2200      	movs	r2, #0
 800b582:	4620      	mov	r0, r4
 800b584:	4629      	mov	r1, r5
 800b586:	f7f4 fe9f 	bl	80002c8 <__aeabi_dsub>
 800b58a:	4632      	mov	r2, r6
 800b58c:	463b      	mov	r3, r7
 800b58e:	f7f4 fe9b 	bl	80002c8 <__aeabi_dsub>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b59a:	f7f4 fe95 	bl	80002c8 <__aeabi_dsub>
 800b59e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5a2:	f7f5 f849 	bl	8000638 <__aeabi_dmul>
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	460f      	mov	r7, r1
 800b5ac:	462b      	mov	r3, r5
 800b5ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5b2:	f7f5 f841 	bl	8000638 <__aeabi_dmul>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	4639      	mov	r1, r7
 800b5be:	f7f4 fe85 	bl	80002cc <__adddf3>
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	4649      	mov	r1, r9
 800b5ce:	f7f4 fe7d 	bl	80002cc <__adddf3>
 800b5d2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b5d6:	a33c      	add	r3, pc, #240	@ (adr r3, 800b6c8 <__ieee754_pow+0x760>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	4658      	mov	r0, fp
 800b5de:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b5e2:	460d      	mov	r5, r1
 800b5e4:	f7f5 f828 	bl	8000638 <__aeabi_dmul>
 800b5e8:	465c      	mov	r4, fp
 800b5ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5ee:	4642      	mov	r2, r8
 800b5f0:	464b      	mov	r3, r9
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	f7f4 fe67 	bl	80002c8 <__aeabi_dsub>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4630      	mov	r0, r6
 800b600:	4639      	mov	r1, r7
 800b602:	f7f4 fe61 	bl	80002c8 <__aeabi_dsub>
 800b606:	a332      	add	r3, pc, #200	@ (adr r3, 800b6d0 <__ieee754_pow+0x768>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	f7f5 f814 	bl	8000638 <__aeabi_dmul>
 800b610:	a331      	add	r3, pc, #196	@ (adr r3, 800b6d8 <__ieee754_pow+0x770>)
 800b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b616:	4606      	mov	r6, r0
 800b618:	460f      	mov	r7, r1
 800b61a:	4620      	mov	r0, r4
 800b61c:	4629      	mov	r1, r5
 800b61e:	f7f5 f80b 	bl	8000638 <__aeabi_dmul>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4630      	mov	r0, r6
 800b628:	4639      	mov	r1, r7
 800b62a:	f7f4 fe4f 	bl	80002cc <__adddf3>
 800b62e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b630:	4b32      	ldr	r3, [pc, #200]	@ (800b6fc <__ieee754_pow+0x794>)
 800b632:	4413      	add	r3, r2
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	f7f4 fe48 	bl	80002cc <__adddf3>
 800b63c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b640:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b642:	f7f4 ff8f 	bl	8000564 <__aeabi_i2d>
 800b646:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b648:	4b2d      	ldr	r3, [pc, #180]	@ (800b700 <__ieee754_pow+0x798>)
 800b64a:	4413      	add	r3, r2
 800b64c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b650:	4606      	mov	r6, r0
 800b652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b656:	460f      	mov	r7, r1
 800b658:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b65c:	f7f4 fe36 	bl	80002cc <__adddf3>
 800b660:	4642      	mov	r2, r8
 800b662:	464b      	mov	r3, r9
 800b664:	f7f4 fe32 	bl	80002cc <__adddf3>
 800b668:	4632      	mov	r2, r6
 800b66a:	463b      	mov	r3, r7
 800b66c:	f7f4 fe2e 	bl	80002cc <__adddf3>
 800b670:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b674:	4632      	mov	r2, r6
 800b676:	463b      	mov	r3, r7
 800b678:	4658      	mov	r0, fp
 800b67a:	460d      	mov	r5, r1
 800b67c:	f7f4 fe24 	bl	80002c8 <__aeabi_dsub>
 800b680:	4642      	mov	r2, r8
 800b682:	464b      	mov	r3, r9
 800b684:	f7f4 fe20 	bl	80002c8 <__aeabi_dsub>
 800b688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b68c:	f7f4 fe1c 	bl	80002c8 <__aeabi_dsub>
 800b690:	465c      	mov	r4, fp
 800b692:	4602      	mov	r2, r0
 800b694:	e036      	b.n	800b704 <__ieee754_pow+0x79c>
 800b696:	bf00      	nop
 800b698:	4a454eef 	.word	0x4a454eef
 800b69c:	3fca7e28 	.word	0x3fca7e28
 800b6a0:	93c9db65 	.word	0x93c9db65
 800b6a4:	3fcd864a 	.word	0x3fcd864a
 800b6a8:	a91d4101 	.word	0xa91d4101
 800b6ac:	3fd17460 	.word	0x3fd17460
 800b6b0:	518f264d 	.word	0x518f264d
 800b6b4:	3fd55555 	.word	0x3fd55555
 800b6b8:	db6fabff 	.word	0xdb6fabff
 800b6bc:	3fdb6db6 	.word	0x3fdb6db6
 800b6c0:	33333303 	.word	0x33333303
 800b6c4:	3fe33333 	.word	0x3fe33333
 800b6c8:	e0000000 	.word	0xe0000000
 800b6cc:	3feec709 	.word	0x3feec709
 800b6d0:	dc3a03fd 	.word	0xdc3a03fd
 800b6d4:	3feec709 	.word	0x3feec709
 800b6d8:	145b01f5 	.word	0x145b01f5
 800b6dc:	be3e2fe0 	.word	0xbe3e2fe0
 800b6e0:	7ff00000 	.word	0x7ff00000
 800b6e4:	43400000 	.word	0x43400000
 800b6e8:	0003988e 	.word	0x0003988e
 800b6ec:	000bb679 	.word	0x000bb679
 800b6f0:	08013320 	.word	0x08013320
 800b6f4:	3ff00000 	.word	0x3ff00000
 800b6f8:	40080000 	.word	0x40080000
 800b6fc:	08013300 	.word	0x08013300
 800b700:	08013310 	.word	0x08013310
 800b704:	460b      	mov	r3, r1
 800b706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b70a:	e5d7      	b.n	800b2bc <__ieee754_pow+0x354>
 800b70c:	f04f 0a01 	mov.w	sl, #1
 800b710:	e65e      	b.n	800b3d0 <__ieee754_pow+0x468>
 800b712:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b9e4 <__ieee754_pow+0xa7c>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	4630      	mov	r0, r6
 800b71a:	4639      	mov	r1, r7
 800b71c:	f7f4 fdd6 	bl	80002cc <__adddf3>
 800b720:	4642      	mov	r2, r8
 800b722:	e9cd 0100 	strd	r0, r1, [sp]
 800b726:	464b      	mov	r3, r9
 800b728:	4620      	mov	r0, r4
 800b72a:	4629      	mov	r1, r5
 800b72c:	f7f4 fdcc 	bl	80002c8 <__aeabi_dsub>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b738:	f7f5 fa0e 	bl	8000b58 <__aeabi_dcmpgt>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f47f ae00 	bne.w	800b342 <__ieee754_pow+0x3da>
 800b742:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b746:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b74a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b74e:	fa43 fa0a 	asr.w	sl, r3, sl
 800b752:	44da      	add	sl, fp
 800b754:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b758:	489d      	ldr	r0, [pc, #628]	@ (800b9d0 <__ieee754_pow+0xa68>)
 800b75a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b75e:	4108      	asrs	r0, r1
 800b760:	ea00 030a 	and.w	r3, r0, sl
 800b764:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b768:	f1c1 0114 	rsb	r1, r1, #20
 800b76c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b770:	fa4a fa01 	asr.w	sl, sl, r1
 800b774:	f1bb 0f00 	cmp.w	fp, #0
 800b778:	4640      	mov	r0, r8
 800b77a:	4649      	mov	r1, r9
 800b77c:	f04f 0200 	mov.w	r2, #0
 800b780:	bfb8      	it	lt
 800b782:	f1ca 0a00 	rsblt	sl, sl, #0
 800b786:	f7f4 fd9f 	bl	80002c8 <__aeabi_dsub>
 800b78a:	4680      	mov	r8, r0
 800b78c:	4689      	mov	r9, r1
 800b78e:	4632      	mov	r2, r6
 800b790:	463b      	mov	r3, r7
 800b792:	4640      	mov	r0, r8
 800b794:	4649      	mov	r1, r9
 800b796:	f7f4 fd99 	bl	80002cc <__adddf3>
 800b79a:	2400      	movs	r4, #0
 800b79c:	a37c      	add	r3, pc, #496	@ (adr r3, 800b990 <__ieee754_pow+0xa28>)
 800b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	460d      	mov	r5, r1
 800b7a6:	f7f4 ff47 	bl	8000638 <__aeabi_dmul>
 800b7aa:	4642      	mov	r2, r8
 800b7ac:	e9cd 0100 	strd	r0, r1, [sp]
 800b7b0:	464b      	mov	r3, r9
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	f7f4 fd87 	bl	80002c8 <__aeabi_dsub>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4630      	mov	r0, r6
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	f7f4 fd81 	bl	80002c8 <__aeabi_dsub>
 800b7c6:	a374      	add	r3, pc, #464	@ (adr r3, 800b998 <__ieee754_pow+0xa30>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	f7f4 ff34 	bl	8000638 <__aeabi_dmul>
 800b7d0:	a373      	add	r3, pc, #460	@ (adr r3, 800b9a0 <__ieee754_pow+0xa38>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	4680      	mov	r8, r0
 800b7d8:	4689      	mov	r9, r1
 800b7da:	4620      	mov	r0, r4
 800b7dc:	4629      	mov	r1, r5
 800b7de:	f7f4 ff2b 	bl	8000638 <__aeabi_dmul>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	f7f4 fd6f 	bl	80002cc <__adddf3>
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	460d      	mov	r5, r1
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7fa:	f7f4 fd67 	bl	80002cc <__adddf3>
 800b7fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b802:	4680      	mov	r8, r0
 800b804:	4689      	mov	r9, r1
 800b806:	f7f4 fd5f 	bl	80002c8 <__aeabi_dsub>
 800b80a:	4602      	mov	r2, r0
 800b80c:	460b      	mov	r3, r1
 800b80e:	4620      	mov	r0, r4
 800b810:	4629      	mov	r1, r5
 800b812:	f7f4 fd59 	bl	80002c8 <__aeabi_dsub>
 800b816:	4642      	mov	r2, r8
 800b818:	4606      	mov	r6, r0
 800b81a:	460f      	mov	r7, r1
 800b81c:	464b      	mov	r3, r9
 800b81e:	4640      	mov	r0, r8
 800b820:	4649      	mov	r1, r9
 800b822:	f7f4 ff09 	bl	8000638 <__aeabi_dmul>
 800b826:	a360      	add	r3, pc, #384	@ (adr r3, 800b9a8 <__ieee754_pow+0xa40>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	4604      	mov	r4, r0
 800b82e:	460d      	mov	r5, r1
 800b830:	f7f4 ff02 	bl	8000638 <__aeabi_dmul>
 800b834:	a35e      	add	r3, pc, #376	@ (adr r3, 800b9b0 <__ieee754_pow+0xa48>)
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f7f4 fd45 	bl	80002c8 <__aeabi_dsub>
 800b83e:	4622      	mov	r2, r4
 800b840:	462b      	mov	r3, r5
 800b842:	f7f4 fef9 	bl	8000638 <__aeabi_dmul>
 800b846:	a35c      	add	r3, pc, #368	@ (adr r3, 800b9b8 <__ieee754_pow+0xa50>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f7f4 fd3e 	bl	80002cc <__adddf3>
 800b850:	4622      	mov	r2, r4
 800b852:	462b      	mov	r3, r5
 800b854:	f7f4 fef0 	bl	8000638 <__aeabi_dmul>
 800b858:	a359      	add	r3, pc, #356	@ (adr r3, 800b9c0 <__ieee754_pow+0xa58>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f7f4 fd33 	bl	80002c8 <__aeabi_dsub>
 800b862:	4622      	mov	r2, r4
 800b864:	462b      	mov	r3, r5
 800b866:	f7f4 fee7 	bl	8000638 <__aeabi_dmul>
 800b86a:	a357      	add	r3, pc, #348	@ (adr r3, 800b9c8 <__ieee754_pow+0xa60>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f7f4 fd2c 	bl	80002cc <__adddf3>
 800b874:	4622      	mov	r2, r4
 800b876:	462b      	mov	r3, r5
 800b878:	f7f4 fede 	bl	8000638 <__aeabi_dmul>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4640      	mov	r0, r8
 800b882:	4649      	mov	r1, r9
 800b884:	f7f4 fd20 	bl	80002c8 <__aeabi_dsub>
 800b888:	4604      	mov	r4, r0
 800b88a:	460d      	mov	r5, r1
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	4640      	mov	r0, r8
 800b892:	4649      	mov	r1, r9
 800b894:	f7f4 fed0 	bl	8000638 <__aeabi_dmul>
 800b898:	2200      	movs	r2, #0
 800b89a:	e9cd 0100 	strd	r0, r1, [sp]
 800b89e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	f7f4 fd0f 	bl	80002c8 <__aeabi_dsub>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8b2:	f7f4 ffeb 	bl	800088c <__aeabi_ddiv>
 800b8b6:	4632      	mov	r2, r6
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	460d      	mov	r5, r1
 800b8bc:	463b      	mov	r3, r7
 800b8be:	4640      	mov	r0, r8
 800b8c0:	4649      	mov	r1, r9
 800b8c2:	f7f4 feb9 	bl	8000638 <__aeabi_dmul>
 800b8c6:	4632      	mov	r2, r6
 800b8c8:	463b      	mov	r3, r7
 800b8ca:	f7f4 fcff 	bl	80002cc <__adddf3>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	f7f4 fcf7 	bl	80002c8 <__aeabi_dsub>
 800b8da:	4642      	mov	r2, r8
 800b8dc:	464b      	mov	r3, r9
 800b8de:	f7f4 fcf3 	bl	80002c8 <__aeabi_dsub>
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	493b      	ldr	r1, [pc, #236]	@ (800b9d4 <__ieee754_pow+0xa6c>)
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	f7f4 fced 	bl	80002c8 <__aeabi_dsub>
 800b8ee:	ec41 0b10 	vmov	d0, r0, r1
 800b8f2:	ee10 3a90 	vmov	r3, s1
 800b8f6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b8fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8fe:	da30      	bge.n	800b962 <__ieee754_pow+0x9fa>
 800b900:	4650      	mov	r0, sl
 800b902:	f000 fa95 	bl	800be30 <scalbn>
 800b906:	ec51 0b10 	vmov	r0, r1, d0
 800b90a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b90e:	f7ff bbd2 	b.w	800b0b6 <__ieee754_pow+0x14e>
 800b912:	4c31      	ldr	r4, [pc, #196]	@ (800b9d8 <__ieee754_pow+0xa70>)
 800b914:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b918:	42a3      	cmp	r3, r4
 800b91a:	d91a      	bls.n	800b952 <__ieee754_pow+0x9ea>
 800b91c:	4b2f      	ldr	r3, [pc, #188]	@ (800b9dc <__ieee754_pow+0xa74>)
 800b91e:	440b      	add	r3, r1
 800b920:	4303      	orrs	r3, r0
 800b922:	d009      	beq.n	800b938 <__ieee754_pow+0x9d0>
 800b924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b928:	2200      	movs	r2, #0
 800b92a:	2300      	movs	r3, #0
 800b92c:	f7f5 f8f6 	bl	8000b1c <__aeabi_dcmplt>
 800b930:	3800      	subs	r0, #0
 800b932:	bf18      	it	ne
 800b934:	2001      	movne	r0, #1
 800b936:	e42b      	b.n	800b190 <__ieee754_pow+0x228>
 800b938:	4642      	mov	r2, r8
 800b93a:	464b      	mov	r3, r9
 800b93c:	f7f4 fcc4 	bl	80002c8 <__aeabi_dsub>
 800b940:	4632      	mov	r2, r6
 800b942:	463b      	mov	r3, r7
 800b944:	f7f5 f8fe 	bl	8000b44 <__aeabi_dcmpge>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d1eb      	bne.n	800b924 <__ieee754_pow+0x9bc>
 800b94c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b9ec <__ieee754_pow+0xa84>
 800b950:	e6f7      	b.n	800b742 <__ieee754_pow+0x7da>
 800b952:	469a      	mov	sl, r3
 800b954:	4b22      	ldr	r3, [pc, #136]	@ (800b9e0 <__ieee754_pow+0xa78>)
 800b956:	459a      	cmp	sl, r3
 800b958:	f63f aef3 	bhi.w	800b742 <__ieee754_pow+0x7da>
 800b95c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b960:	e715      	b.n	800b78e <__ieee754_pow+0x826>
 800b962:	ec51 0b10 	vmov	r0, r1, d0
 800b966:	4619      	mov	r1, r3
 800b968:	e7cf      	b.n	800b90a <__ieee754_pow+0x9a2>
 800b96a:	491a      	ldr	r1, [pc, #104]	@ (800b9d4 <__ieee754_pow+0xa6c>)
 800b96c:	2000      	movs	r0, #0
 800b96e:	f7ff bb18 	b.w	800afa2 <__ieee754_pow+0x3a>
 800b972:	2000      	movs	r0, #0
 800b974:	2100      	movs	r1, #0
 800b976:	f7ff bb14 	b.w	800afa2 <__ieee754_pow+0x3a>
 800b97a:	4630      	mov	r0, r6
 800b97c:	4639      	mov	r1, r7
 800b97e:	f7ff bb10 	b.w	800afa2 <__ieee754_pow+0x3a>
 800b982:	460c      	mov	r4, r1
 800b984:	f7ff bb5e 	b.w	800b044 <__ieee754_pow+0xdc>
 800b988:	2400      	movs	r4, #0
 800b98a:	f7ff bb49 	b.w	800b020 <__ieee754_pow+0xb8>
 800b98e:	bf00      	nop
 800b990:	00000000 	.word	0x00000000
 800b994:	3fe62e43 	.word	0x3fe62e43
 800b998:	fefa39ef 	.word	0xfefa39ef
 800b99c:	3fe62e42 	.word	0x3fe62e42
 800b9a0:	0ca86c39 	.word	0x0ca86c39
 800b9a4:	be205c61 	.word	0xbe205c61
 800b9a8:	72bea4d0 	.word	0x72bea4d0
 800b9ac:	3e663769 	.word	0x3e663769
 800b9b0:	c5d26bf1 	.word	0xc5d26bf1
 800b9b4:	3ebbbd41 	.word	0x3ebbbd41
 800b9b8:	af25de2c 	.word	0xaf25de2c
 800b9bc:	3f11566a 	.word	0x3f11566a
 800b9c0:	16bebd93 	.word	0x16bebd93
 800b9c4:	3f66c16c 	.word	0x3f66c16c
 800b9c8:	5555553e 	.word	0x5555553e
 800b9cc:	3fc55555 	.word	0x3fc55555
 800b9d0:	fff00000 	.word	0xfff00000
 800b9d4:	3ff00000 	.word	0x3ff00000
 800b9d8:	4090cbff 	.word	0x4090cbff
 800b9dc:	3f6f3400 	.word	0x3f6f3400
 800b9e0:	3fe00000 	.word	0x3fe00000
 800b9e4:	652b82fe 	.word	0x652b82fe
 800b9e8:	3c971547 	.word	0x3c971547
 800b9ec:	4090cc00 	.word	0x4090cc00

0800b9f0 <fabs>:
 800b9f0:	ec51 0b10 	vmov	r0, r1, d0
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b9fa:	ec43 2b10 	vmov	d0, r2, r3
 800b9fe:	4770      	bx	lr

0800ba00 <__ieee754_expf>:
 800ba00:	ee10 2a10 	vmov	r2, s0
 800ba04:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800ba08:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ba0c:	d902      	bls.n	800ba14 <__ieee754_expf+0x14>
 800ba0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ba12:	4770      	bx	lr
 800ba14:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800ba18:	d106      	bne.n	800ba28 <__ieee754_expf+0x28>
 800ba1a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800bb54 <__ieee754_expf+0x154>
 800ba1e:	2900      	cmp	r1, #0
 800ba20:	bf18      	it	ne
 800ba22:	eeb0 0a67 	vmovne.f32	s0, s15
 800ba26:	4770      	bx	lr
 800ba28:	484b      	ldr	r0, [pc, #300]	@ (800bb58 <__ieee754_expf+0x158>)
 800ba2a:	4282      	cmp	r2, r0
 800ba2c:	dd02      	ble.n	800ba34 <__ieee754_expf+0x34>
 800ba2e:	2000      	movs	r0, #0
 800ba30:	f7ff b8f2 	b.w	800ac18 <__math_oflowf>
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	da05      	bge.n	800ba44 <__ieee754_expf+0x44>
 800ba38:	4a48      	ldr	r2, [pc, #288]	@ (800bb5c <__ieee754_expf+0x15c>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d902      	bls.n	800ba44 <__ieee754_expf+0x44>
 800ba3e:	2000      	movs	r0, #0
 800ba40:	f7ff b8e4 	b.w	800ac0c <__math_uflowf>
 800ba44:	4a46      	ldr	r2, [pc, #280]	@ (800bb60 <__ieee754_expf+0x160>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800ba4c:	d952      	bls.n	800baf4 <__ieee754_expf+0xf4>
 800ba4e:	4a45      	ldr	r2, [pc, #276]	@ (800bb64 <__ieee754_expf+0x164>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800ba56:	d834      	bhi.n	800bac2 <__ieee754_expf+0xc2>
 800ba58:	4b43      	ldr	r3, [pc, #268]	@ (800bb68 <__ieee754_expf+0x168>)
 800ba5a:	4413      	add	r3, r2
 800ba5c:	ed93 7a00 	vldr	s14, [r3]
 800ba60:	4b42      	ldr	r3, [pc, #264]	@ (800bb6c <__ieee754_expf+0x16c>)
 800ba62:	4413      	add	r3, r2
 800ba64:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ba68:	f1c1 0201 	rsb	r2, r1, #1
 800ba6c:	edd3 7a00 	vldr	s15, [r3]
 800ba70:	1a52      	subs	r2, r2, r1
 800ba72:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ba76:	ee20 6a00 	vmul.f32	s12, s0, s0
 800ba7a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800bb70 <__ieee754_expf+0x170>
 800ba7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bb74 <__ieee754_expf+0x174>
 800ba82:	eee6 6a05 	vfma.f32	s13, s12, s10
 800ba86:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800bb78 <__ieee754_expf+0x178>
 800ba8a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ba8e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bb7c <__ieee754_expf+0x17c>
 800ba92:	eee5 6a06 	vfma.f32	s13, s10, s12
 800ba96:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800bb80 <__ieee754_expf+0x180>
 800ba9a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ba9e:	eef0 6a40 	vmov.f32	s13, s0
 800baa2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800baa6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800baaa:	ee20 5a26 	vmul.f32	s10, s0, s13
 800baae:	bb92      	cbnz	r2, 800bb16 <__ieee754_expf+0x116>
 800bab0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800bab4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800bab8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800babc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800bac0:	4770      	bx	lr
 800bac2:	4b30      	ldr	r3, [pc, #192]	@ (800bb84 <__ieee754_expf+0x184>)
 800bac4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800bb88 <__ieee754_expf+0x188>
 800bac8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800bb8c <__ieee754_expf+0x18c>
 800bacc:	4413      	add	r3, r2
 800bace:	edd3 7a00 	vldr	s15, [r3]
 800bad2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bad6:	eeb0 7a40 	vmov.f32	s14, s0
 800bada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bade:	ee17 2a90 	vmov	r2, s15
 800bae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bae6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800baea:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800bb90 <__ieee754_expf+0x190>
 800baee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800baf2:	e7be      	b.n	800ba72 <__ieee754_expf+0x72>
 800baf4:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800baf8:	d20b      	bcs.n	800bb12 <__ieee754_expf+0x112>
 800bafa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800bb94 <__ieee754_expf+0x194>
 800bafe:	ee70 6a26 	vadd.f32	s13, s0, s13
 800bb02:	eef4 6ae5 	vcmpe.f32	s13, s11
 800bb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0a:	dd02      	ble.n	800bb12 <__ieee754_expf+0x112>
 800bb0c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800bb10:	4770      	bx	lr
 800bb12:	2200      	movs	r2, #0
 800bb14:	e7af      	b.n	800ba76 <__ieee754_expf+0x76>
 800bb16:	ee36 6a66 	vsub.f32	s12, s12, s13
 800bb1a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800bb1e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800bb22:	bfb8      	it	lt
 800bb24:	3264      	addlt	r2, #100	@ 0x64
 800bb26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb2e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bb32:	ee17 3a90 	vmov	r3, s15
 800bb36:	bfab      	itete	ge
 800bb38:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bb3c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bb40:	ee00 3a10 	vmovge	s0, r3
 800bb44:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800bb98 <__ieee754_expf+0x198>
 800bb48:	bfbc      	itt	lt
 800bb4a:	ee00 3a10 	vmovlt	s0, r3
 800bb4e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800bb52:	4770      	bx	lr
 800bb54:	00000000 	.word	0x00000000
 800bb58:	42b17217 	.word	0x42b17217
 800bb5c:	42cff1b5 	.word	0x42cff1b5
 800bb60:	3eb17218 	.word	0x3eb17218
 800bb64:	3f851591 	.word	0x3f851591
 800bb68:	08013338 	.word	0x08013338
 800bb6c:	08013330 	.word	0x08013330
 800bb70:	3331bb4c 	.word	0x3331bb4c
 800bb74:	b5ddea0e 	.word	0xb5ddea0e
 800bb78:	388ab355 	.word	0x388ab355
 800bb7c:	bb360b61 	.word	0xbb360b61
 800bb80:	3e2aaaab 	.word	0x3e2aaaab
 800bb84:	08013340 	.word	0x08013340
 800bb88:	3fb8aa3b 	.word	0x3fb8aa3b
 800bb8c:	3f317180 	.word	0x3f317180
 800bb90:	3717f7d1 	.word	0x3717f7d1
 800bb94:	7149f2ca 	.word	0x7149f2ca
 800bb98:	0d800000 	.word	0x0d800000

0800bb9c <__ieee754_logf>:
 800bb9c:	ee10 3a10 	vmov	r3, s0
 800bba0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bba4:	d106      	bne.n	800bbb4 <__ieee754_logf+0x18>
 800bba6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800bd40 <__ieee754_logf+0x1a4>
 800bbaa:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800bd44 <__ieee754_logf+0x1a8>
 800bbae:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bbb2:	4770      	bx	lr
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	da02      	bge.n	800bbc0 <__ieee754_logf+0x24>
 800bbba:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bbbe:	e7f4      	b.n	800bbaa <__ieee754_logf+0xe>
 800bbc0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bbc4:	db02      	blt.n	800bbcc <__ieee754_logf+0x30>
 800bbc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbca:	4770      	bx	lr
 800bbcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbd0:	bfb8      	it	lt
 800bbd2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800bd48 <__ieee754_logf+0x1ac>
 800bbd6:	485d      	ldr	r0, [pc, #372]	@ (800bd4c <__ieee754_logf+0x1b0>)
 800bbd8:	bfbe      	ittt	lt
 800bbda:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800bbde:	f06f 0118 	mvnlt.w	r1, #24
 800bbe2:	ee17 2a90 	vmovlt	r2, s15
 800bbe6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800bbea:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800bbee:	4410      	add	r0, r2
 800bbf0:	bfa8      	it	ge
 800bbf2:	2100      	movge	r1, #0
 800bbf4:	3b7f      	subs	r3, #127	@ 0x7f
 800bbf6:	440b      	add	r3, r1
 800bbf8:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800bbfc:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800bc00:	4311      	orrs	r1, r2
 800bc02:	ee00 1a10 	vmov	s0, r1
 800bc06:	4952      	ldr	r1, [pc, #328]	@ (800bd50 <__ieee754_logf+0x1b4>)
 800bc08:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800bc0c:	f102 000f 	add.w	r0, r2, #15
 800bc10:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bc14:	4001      	ands	r1, r0
 800bc16:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc1a:	bb89      	cbnz	r1, 800bc80 <__ieee754_logf+0xe4>
 800bc1c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc24:	d10f      	bne.n	800bc46 <__ieee754_logf+0xaa>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f000 8087 	beq.w	800bd3a <__ieee754_logf+0x19e>
 800bc2c:	ee07 3a90 	vmov	s15, r3
 800bc30:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800bd54 <__ieee754_logf+0x1b8>
 800bc34:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800bd58 <__ieee754_logf+0x1bc>
 800bc38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc3c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc40:	eea7 0a87 	vfma.f32	s0, s15, s14
 800bc44:	4770      	bx	lr
 800bc46:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800bd5c <__ieee754_logf+0x1c0>
 800bc4a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bc4e:	eee0 7a66 	vfms.f32	s15, s0, s13
 800bc52:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bc56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc5a:	b913      	cbnz	r3, 800bc62 <__ieee754_logf+0xc6>
 800bc5c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bc60:	4770      	bx	lr
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bd54 <__ieee754_logf+0x1b8>
 800bc6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc6e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bc72:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bc76:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800bd58 <__ieee754_logf+0x1bc>
 800bc7a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800bc7e:	4770      	bx	lr
 800bc80:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800bc84:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bc88:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800bd60 <__ieee754_logf+0x1c4>
 800bc8c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800bd64 <__ieee754_logf+0x1c8>
 800bc90:	4935      	ldr	r1, [pc, #212]	@ (800bd68 <__ieee754_logf+0x1cc>)
 800bc92:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800bc96:	4411      	add	r1, r2
 800bc98:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800bc9c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800bca0:	430a      	orrs	r2, r1
 800bca2:	2a00      	cmp	r2, #0
 800bca4:	ee07 3a90 	vmov	s15, r3
 800bca8:	ee26 5a06 	vmul.f32	s10, s12, s12
 800bcac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bcb0:	ee25 7a05 	vmul.f32	s14, s10, s10
 800bcb4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800bd6c <__ieee754_logf+0x1d0>
 800bcb8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bcbc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800bd70 <__ieee754_logf+0x1d4>
 800bcc0:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bcc4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800bd74 <__ieee754_logf+0x1d8>
 800bcc8:	eee7 7a24 	vfma.f32	s15, s14, s9
 800bccc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800bd78 <__ieee754_logf+0x1dc>
 800bcd0:	eee7 4a87 	vfma.f32	s9, s15, s14
 800bcd4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800bd7c <__ieee754_logf+0x1e0>
 800bcd8:	eee4 7a87 	vfma.f32	s15, s9, s14
 800bcdc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bce0:	eee5 7a87 	vfma.f32	s15, s11, s14
 800bce4:	dd1a      	ble.n	800bd1c <__ieee754_logf+0x180>
 800bce6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bcea:	ee20 7a07 	vmul.f32	s14, s0, s14
 800bcee:	ee27 7a00 	vmul.f32	s14, s14, s0
 800bcf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcf6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bcfa:	b913      	cbnz	r3, 800bd02 <__ieee754_logf+0x166>
 800bcfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd00:	e7ac      	b.n	800bc5c <__ieee754_logf+0xc0>
 800bd02:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800bd54 <__ieee754_logf+0x1b8>
 800bd06:	eee6 7a86 	vfma.f32	s15, s13, s12
 800bd0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd0e:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bd12:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800bd58 <__ieee754_logf+0x1bc>
 800bd16:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800bd1a:	4770      	bx	lr
 800bd1c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bd20:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bd24:	b913      	cbnz	r3, 800bd2c <__ieee754_logf+0x190>
 800bd26:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd2a:	4770      	bx	lr
 800bd2c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800bd54 <__ieee754_logf+0x1b8>
 800bd30:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800bd34:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bd38:	e7eb      	b.n	800bd12 <__ieee754_logf+0x176>
 800bd3a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800bd44 <__ieee754_logf+0x1a8>
 800bd3e:	4770      	bx	lr
 800bd40:	cc000000 	.word	0xcc000000
 800bd44:	00000000 	.word	0x00000000
 800bd48:	4c000000 	.word	0x4c000000
 800bd4c:	004afb20 	.word	0x004afb20
 800bd50:	007ffff0 	.word	0x007ffff0
 800bd54:	3717f7d1 	.word	0x3717f7d1
 800bd58:	3f317180 	.word	0x3f317180
 800bd5c:	3eaaaaab 	.word	0x3eaaaaab
 800bd60:	3e1cd04f 	.word	0x3e1cd04f
 800bd64:	3e178897 	.word	0x3e178897
 800bd68:	ffcf5c30 	.word	0xffcf5c30
 800bd6c:	3e638e29 	.word	0x3e638e29
 800bd70:	3ecccccd 	.word	0x3ecccccd
 800bd74:	3e3a3325 	.word	0x3e3a3325
 800bd78:	3e924925 	.word	0x3e924925
 800bd7c:	3f2aaaab 	.word	0x3f2aaaab

0800bd80 <__ieee754_log10f>:
 800bd80:	b508      	push	{r3, lr}
 800bd82:	ee10 3a10 	vmov	r3, s0
 800bd86:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bd8a:	ed2d 8b02 	vpush	{d8}
 800bd8e:	d108      	bne.n	800bda2 <__ieee754_log10f+0x22>
 800bd90:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800be18 <__ieee754_log10f+0x98>
 800bd94:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800be1c <__ieee754_log10f+0x9c>
 800bd98:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bd9c:	ecbd 8b02 	vpop	{d8}
 800bda0:	bd08      	pop	{r3, pc}
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	461a      	mov	r2, r3
 800bda6:	da02      	bge.n	800bdae <__ieee754_log10f+0x2e>
 800bda8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bdac:	e7f2      	b.n	800bd94 <__ieee754_log10f+0x14>
 800bdae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bdb2:	db02      	blt.n	800bdba <__ieee754_log10f+0x3a>
 800bdb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bdb8:	e7f0      	b.n	800bd9c <__ieee754_log10f+0x1c>
 800bdba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bdbe:	bfbf      	itttt	lt
 800bdc0:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800be20 <__ieee754_log10f+0xa0>
 800bdc4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800bdc8:	f06f 0118 	mvnlt.w	r1, #24
 800bdcc:	ee17 2a90 	vmovlt	r2, s15
 800bdd0:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800bdd4:	bfa8      	it	ge
 800bdd6:	2100      	movge	r1, #0
 800bdd8:	3b7f      	subs	r3, #127	@ 0x7f
 800bdda:	440b      	add	r3, r1
 800bddc:	0fd9      	lsrs	r1, r3, #31
 800bdde:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800bde2:	ee07 3a90 	vmov	s15, r3
 800bde6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800bdea:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800bdee:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800bdf2:	ee00 3a10 	vmov	s0, r3
 800bdf6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800bdfa:	f7ff fecf 	bl	800bb9c <__ieee754_logf>
 800bdfe:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800be24 <__ieee754_log10f+0xa4>
 800be02:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be06:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800be28 <__ieee754_log10f+0xa8>
 800be0a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800be0e:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800be2c <__ieee754_log10f+0xac>
 800be12:	eea8 0a27 	vfma.f32	s0, s16, s15
 800be16:	e7c1      	b.n	800bd9c <__ieee754_log10f+0x1c>
 800be18:	cc000000 	.word	0xcc000000
 800be1c:	00000000 	.word	0x00000000
 800be20:	4c000000 	.word	0x4c000000
 800be24:	3ede5bd9 	.word	0x3ede5bd9
 800be28:	355427db 	.word	0x355427db
 800be2c:	3e9a2080 	.word	0x3e9a2080

0800be30 <scalbn>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	ec55 4b10 	vmov	r4, r5, d0
 800be36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800be3a:	4606      	mov	r6, r0
 800be3c:	462b      	mov	r3, r5
 800be3e:	b991      	cbnz	r1, 800be66 <scalbn+0x36>
 800be40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800be44:	4323      	orrs	r3, r4
 800be46:	d03d      	beq.n	800bec4 <scalbn+0x94>
 800be48:	4b35      	ldr	r3, [pc, #212]	@ (800bf20 <scalbn+0xf0>)
 800be4a:	4620      	mov	r0, r4
 800be4c:	4629      	mov	r1, r5
 800be4e:	2200      	movs	r2, #0
 800be50:	f7f4 fbf2 	bl	8000638 <__aeabi_dmul>
 800be54:	4b33      	ldr	r3, [pc, #204]	@ (800bf24 <scalbn+0xf4>)
 800be56:	429e      	cmp	r6, r3
 800be58:	4604      	mov	r4, r0
 800be5a:	460d      	mov	r5, r1
 800be5c:	da0f      	bge.n	800be7e <scalbn+0x4e>
 800be5e:	a328      	add	r3, pc, #160	@ (adr r3, 800bf00 <scalbn+0xd0>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	e01e      	b.n	800bea4 <scalbn+0x74>
 800be66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800be6a:	4291      	cmp	r1, r2
 800be6c:	d10b      	bne.n	800be86 <scalbn+0x56>
 800be6e:	4622      	mov	r2, r4
 800be70:	4620      	mov	r0, r4
 800be72:	4629      	mov	r1, r5
 800be74:	f7f4 fa2a 	bl	80002cc <__adddf3>
 800be78:	4604      	mov	r4, r0
 800be7a:	460d      	mov	r5, r1
 800be7c:	e022      	b.n	800bec4 <scalbn+0x94>
 800be7e:	460b      	mov	r3, r1
 800be80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800be84:	3936      	subs	r1, #54	@ 0x36
 800be86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800be8a:	4296      	cmp	r6, r2
 800be8c:	dd0d      	ble.n	800beaa <scalbn+0x7a>
 800be8e:	2d00      	cmp	r5, #0
 800be90:	a11d      	add	r1, pc, #116	@ (adr r1, 800bf08 <scalbn+0xd8>)
 800be92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be96:	da02      	bge.n	800be9e <scalbn+0x6e>
 800be98:	a11d      	add	r1, pc, #116	@ (adr r1, 800bf10 <scalbn+0xe0>)
 800be9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be9e:	a31a      	add	r3, pc, #104	@ (adr r3, 800bf08 <scalbn+0xd8>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f7f4 fbc8 	bl	8000638 <__aeabi_dmul>
 800bea8:	e7e6      	b.n	800be78 <scalbn+0x48>
 800beaa:	1872      	adds	r2, r6, r1
 800beac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800beb0:	428a      	cmp	r2, r1
 800beb2:	dcec      	bgt.n	800be8e <scalbn+0x5e>
 800beb4:	2a00      	cmp	r2, #0
 800beb6:	dd08      	ble.n	800beca <scalbn+0x9a>
 800beb8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bebc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bec0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bec4:	ec45 4b10 	vmov	d0, r4, r5
 800bec8:	bd70      	pop	{r4, r5, r6, pc}
 800beca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bece:	da08      	bge.n	800bee2 <scalbn+0xb2>
 800bed0:	2d00      	cmp	r5, #0
 800bed2:	a10b      	add	r1, pc, #44	@ (adr r1, 800bf00 <scalbn+0xd0>)
 800bed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bed8:	dac1      	bge.n	800be5e <scalbn+0x2e>
 800beda:	a10f      	add	r1, pc, #60	@ (adr r1, 800bf18 <scalbn+0xe8>)
 800bedc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bee0:	e7bd      	b.n	800be5e <scalbn+0x2e>
 800bee2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bee6:	3236      	adds	r2, #54	@ 0x36
 800bee8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800beec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bef0:	4620      	mov	r0, r4
 800bef2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf28 <scalbn+0xf8>)
 800bef4:	4629      	mov	r1, r5
 800bef6:	2200      	movs	r2, #0
 800bef8:	e7d4      	b.n	800bea4 <scalbn+0x74>
 800befa:	bf00      	nop
 800befc:	f3af 8000 	nop.w
 800bf00:	c2f8f359 	.word	0xc2f8f359
 800bf04:	01a56e1f 	.word	0x01a56e1f
 800bf08:	8800759c 	.word	0x8800759c
 800bf0c:	7e37e43c 	.word	0x7e37e43c
 800bf10:	8800759c 	.word	0x8800759c
 800bf14:	fe37e43c 	.word	0xfe37e43c
 800bf18:	c2f8f359 	.word	0xc2f8f359
 800bf1c:	81a56e1f 	.word	0x81a56e1f
 800bf20:	43500000 	.word	0x43500000
 800bf24:	ffff3cb0 	.word	0xffff3cb0
 800bf28:	3c900000 	.word	0x3c900000

0800bf2c <with_errno>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	ed2d 8b02 	vpush	{d8}
 800bf32:	eeb0 8a40 	vmov.f32	s16, s0
 800bf36:	eef0 8a60 	vmov.f32	s17, s1
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	f001 f9d2 	bl	800d2e4 <__errno>
 800bf40:	eeb0 0a48 	vmov.f32	s0, s16
 800bf44:	eef0 0a68 	vmov.f32	s1, s17
 800bf48:	ecbd 8b02 	vpop	{d8}
 800bf4c:	6004      	str	r4, [r0, #0]
 800bf4e:	bd10      	pop	{r4, pc}

0800bf50 <xflow>:
 800bf50:	4603      	mov	r3, r0
 800bf52:	b507      	push	{r0, r1, r2, lr}
 800bf54:	ec51 0b10 	vmov	r0, r1, d0
 800bf58:	b183      	cbz	r3, 800bf7c <xflow+0x2c>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf60:	e9cd 2300 	strd	r2, r3, [sp]
 800bf64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf68:	f7f4 fb66 	bl	8000638 <__aeabi_dmul>
 800bf6c:	ec41 0b10 	vmov	d0, r0, r1
 800bf70:	2022      	movs	r0, #34	@ 0x22
 800bf72:	b003      	add	sp, #12
 800bf74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf78:	f7ff bfd8 	b.w	800bf2c <with_errno>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	460b      	mov	r3, r1
 800bf80:	e7ee      	b.n	800bf60 <xflow+0x10>
 800bf82:	0000      	movs	r0, r0
 800bf84:	0000      	movs	r0, r0
	...

0800bf88 <__math_uflow>:
 800bf88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf90 <__math_uflow+0x8>
 800bf8c:	f7ff bfe0 	b.w	800bf50 <xflow>
 800bf90:	00000000 	.word	0x00000000
 800bf94:	10000000 	.word	0x10000000

0800bf98 <__math_oflow>:
 800bf98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bfa0 <__math_oflow+0x8>
 800bf9c:	f7ff bfd8 	b.w	800bf50 <xflow>
 800bfa0:	00000000 	.word	0x00000000
 800bfa4:	70000000 	.word	0x70000000

0800bfa8 <abort>:
 800bfa8:	b508      	push	{r3, lr}
 800bfaa:	2006      	movs	r0, #6
 800bfac:	f001 f928 	bl	800d200 <raise>
 800bfb0:	2001      	movs	r0, #1
 800bfb2:	f7f9 fa54 	bl	800545e <_exit>
	...

0800bfb8 <__assert_func>:
 800bfb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfba:	4614      	mov	r4, r2
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4b09      	ldr	r3, [pc, #36]	@ (800bfe4 <__assert_func+0x2c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	68d8      	ldr	r0, [r3, #12]
 800bfc6:	b954      	cbnz	r4, 800bfde <__assert_func+0x26>
 800bfc8:	4b07      	ldr	r3, [pc, #28]	@ (800bfe8 <__assert_func+0x30>)
 800bfca:	461c      	mov	r4, r3
 800bfcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfd0:	9100      	str	r1, [sp, #0]
 800bfd2:	462b      	mov	r3, r5
 800bfd4:	4905      	ldr	r1, [pc, #20]	@ (800bfec <__assert_func+0x34>)
 800bfd6:	f000 ffc7 	bl	800cf68 <fiprintf>
 800bfda:	f7ff ffe5 	bl	800bfa8 <abort>
 800bfde:	4b04      	ldr	r3, [pc, #16]	@ (800bff0 <__assert_func+0x38>)
 800bfe0:	e7f4      	b.n	800bfcc <__assert_func+0x14>
 800bfe2:	bf00      	nop
 800bfe4:	20000668 	.word	0x20000668
 800bfe8:	08013383 	.word	0x08013383
 800bfec:	08013355 	.word	0x08013355
 800bff0:	08013348 	.word	0x08013348

0800bff4 <calloc>:
 800bff4:	4b02      	ldr	r3, [pc, #8]	@ (800c000 <calloc+0xc>)
 800bff6:	460a      	mov	r2, r1
 800bff8:	4601      	mov	r1, r0
 800bffa:	6818      	ldr	r0, [r3, #0]
 800bffc:	f000 b802 	b.w	800c004 <_calloc_r>
 800c000:	20000668 	.word	0x20000668

0800c004 <_calloc_r>:
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	fba1 5402 	umull	r5, r4, r1, r2
 800c00a:	b93c      	cbnz	r4, 800c01c <_calloc_r+0x18>
 800c00c:	4629      	mov	r1, r5
 800c00e:	f000 f83f 	bl	800c090 <_malloc_r>
 800c012:	4606      	mov	r6, r0
 800c014:	b928      	cbnz	r0, 800c022 <_calloc_r+0x1e>
 800c016:	2600      	movs	r6, #0
 800c018:	4630      	mov	r0, r6
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
 800c01c:	220c      	movs	r2, #12
 800c01e:	6002      	str	r2, [r0, #0]
 800c020:	e7f9      	b.n	800c016 <_calloc_r+0x12>
 800c022:	462a      	mov	r2, r5
 800c024:	4621      	mov	r1, r4
 800c026:	f001 f84d 	bl	800d0c4 <memset>
 800c02a:	e7f5      	b.n	800c018 <_calloc_r+0x14>

0800c02c <malloc>:
 800c02c:	4b02      	ldr	r3, [pc, #8]	@ (800c038 <malloc+0xc>)
 800c02e:	4601      	mov	r1, r0
 800c030:	6818      	ldr	r0, [r3, #0]
 800c032:	f000 b82d 	b.w	800c090 <_malloc_r>
 800c036:	bf00      	nop
 800c038:	20000668 	.word	0x20000668

0800c03c <free>:
 800c03c:	4b02      	ldr	r3, [pc, #8]	@ (800c048 <free+0xc>)
 800c03e:	4601      	mov	r1, r0
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	f001 b98b 	b.w	800d35c <_free_r>
 800c046:	bf00      	nop
 800c048:	20000668 	.word	0x20000668

0800c04c <sbrk_aligned>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	4e0f      	ldr	r6, [pc, #60]	@ (800c08c <sbrk_aligned+0x40>)
 800c050:	460c      	mov	r4, r1
 800c052:	6831      	ldr	r1, [r6, #0]
 800c054:	4605      	mov	r5, r0
 800c056:	b911      	cbnz	r1, 800c05e <sbrk_aligned+0x12>
 800c058:	f001 f922 	bl	800d2a0 <_sbrk_r>
 800c05c:	6030      	str	r0, [r6, #0]
 800c05e:	4621      	mov	r1, r4
 800c060:	4628      	mov	r0, r5
 800c062:	f001 f91d 	bl	800d2a0 <_sbrk_r>
 800c066:	1c43      	adds	r3, r0, #1
 800c068:	d103      	bne.n	800c072 <sbrk_aligned+0x26>
 800c06a:	f04f 34ff 	mov.w	r4, #4294967295
 800c06e:	4620      	mov	r0, r4
 800c070:	bd70      	pop	{r4, r5, r6, pc}
 800c072:	1cc4      	adds	r4, r0, #3
 800c074:	f024 0403 	bic.w	r4, r4, #3
 800c078:	42a0      	cmp	r0, r4
 800c07a:	d0f8      	beq.n	800c06e <sbrk_aligned+0x22>
 800c07c:	1a21      	subs	r1, r4, r0
 800c07e:	4628      	mov	r0, r5
 800c080:	f001 f90e 	bl	800d2a0 <_sbrk_r>
 800c084:	3001      	adds	r0, #1
 800c086:	d1f2      	bne.n	800c06e <sbrk_aligned+0x22>
 800c088:	e7ef      	b.n	800c06a <sbrk_aligned+0x1e>
 800c08a:	bf00      	nop
 800c08c:	200009f8 	.word	0x200009f8

0800c090 <_malloc_r>:
 800c090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c094:	1ccd      	adds	r5, r1, #3
 800c096:	f025 0503 	bic.w	r5, r5, #3
 800c09a:	3508      	adds	r5, #8
 800c09c:	2d0c      	cmp	r5, #12
 800c09e:	bf38      	it	cc
 800c0a0:	250c      	movcc	r5, #12
 800c0a2:	2d00      	cmp	r5, #0
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	db01      	blt.n	800c0ac <_malloc_r+0x1c>
 800c0a8:	42a9      	cmp	r1, r5
 800c0aa:	d904      	bls.n	800c0b6 <_malloc_r+0x26>
 800c0ac:	230c      	movs	r3, #12
 800c0ae:	6033      	str	r3, [r6, #0]
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c18c <_malloc_r+0xfc>
 800c0ba:	f000 f869 	bl	800c190 <__malloc_lock>
 800c0be:	f8d8 3000 	ldr.w	r3, [r8]
 800c0c2:	461c      	mov	r4, r3
 800c0c4:	bb44      	cbnz	r4, 800c118 <_malloc_r+0x88>
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f7ff ffbf 	bl	800c04c <sbrk_aligned>
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	d158      	bne.n	800c186 <_malloc_r+0xf6>
 800c0d4:	f8d8 4000 	ldr.w	r4, [r8]
 800c0d8:	4627      	mov	r7, r4
 800c0da:	2f00      	cmp	r7, #0
 800c0dc:	d143      	bne.n	800c166 <_malloc_r+0xd6>
 800c0de:	2c00      	cmp	r4, #0
 800c0e0:	d04b      	beq.n	800c17a <_malloc_r+0xea>
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	4639      	mov	r1, r7
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	eb04 0903 	add.w	r9, r4, r3
 800c0ec:	f001 f8d8 	bl	800d2a0 <_sbrk_r>
 800c0f0:	4581      	cmp	r9, r0
 800c0f2:	d142      	bne.n	800c17a <_malloc_r+0xea>
 800c0f4:	6821      	ldr	r1, [r4, #0]
 800c0f6:	1a6d      	subs	r5, r5, r1
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7ff ffa6 	bl	800c04c <sbrk_aligned>
 800c100:	3001      	adds	r0, #1
 800c102:	d03a      	beq.n	800c17a <_malloc_r+0xea>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	442b      	add	r3, r5
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	f8d8 3000 	ldr.w	r3, [r8]
 800c10e:	685a      	ldr	r2, [r3, #4]
 800c110:	bb62      	cbnz	r2, 800c16c <_malloc_r+0xdc>
 800c112:	f8c8 7000 	str.w	r7, [r8]
 800c116:	e00f      	b.n	800c138 <_malloc_r+0xa8>
 800c118:	6822      	ldr	r2, [r4, #0]
 800c11a:	1b52      	subs	r2, r2, r5
 800c11c:	d420      	bmi.n	800c160 <_malloc_r+0xd0>
 800c11e:	2a0b      	cmp	r2, #11
 800c120:	d917      	bls.n	800c152 <_malloc_r+0xc2>
 800c122:	1961      	adds	r1, r4, r5
 800c124:	42a3      	cmp	r3, r4
 800c126:	6025      	str	r5, [r4, #0]
 800c128:	bf18      	it	ne
 800c12a:	6059      	strne	r1, [r3, #4]
 800c12c:	6863      	ldr	r3, [r4, #4]
 800c12e:	bf08      	it	eq
 800c130:	f8c8 1000 	streq.w	r1, [r8]
 800c134:	5162      	str	r2, [r4, r5]
 800c136:	604b      	str	r3, [r1, #4]
 800c138:	4630      	mov	r0, r6
 800c13a:	f000 f82f 	bl	800c19c <__malloc_unlock>
 800c13e:	f104 000b 	add.w	r0, r4, #11
 800c142:	1d23      	adds	r3, r4, #4
 800c144:	f020 0007 	bic.w	r0, r0, #7
 800c148:	1ac2      	subs	r2, r0, r3
 800c14a:	bf1c      	itt	ne
 800c14c:	1a1b      	subne	r3, r3, r0
 800c14e:	50a3      	strne	r3, [r4, r2]
 800c150:	e7af      	b.n	800c0b2 <_malloc_r+0x22>
 800c152:	6862      	ldr	r2, [r4, #4]
 800c154:	42a3      	cmp	r3, r4
 800c156:	bf0c      	ite	eq
 800c158:	f8c8 2000 	streq.w	r2, [r8]
 800c15c:	605a      	strne	r2, [r3, #4]
 800c15e:	e7eb      	b.n	800c138 <_malloc_r+0xa8>
 800c160:	4623      	mov	r3, r4
 800c162:	6864      	ldr	r4, [r4, #4]
 800c164:	e7ae      	b.n	800c0c4 <_malloc_r+0x34>
 800c166:	463c      	mov	r4, r7
 800c168:	687f      	ldr	r7, [r7, #4]
 800c16a:	e7b6      	b.n	800c0da <_malloc_r+0x4a>
 800c16c:	461a      	mov	r2, r3
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	42a3      	cmp	r3, r4
 800c172:	d1fb      	bne.n	800c16c <_malloc_r+0xdc>
 800c174:	2300      	movs	r3, #0
 800c176:	6053      	str	r3, [r2, #4]
 800c178:	e7de      	b.n	800c138 <_malloc_r+0xa8>
 800c17a:	230c      	movs	r3, #12
 800c17c:	6033      	str	r3, [r6, #0]
 800c17e:	4630      	mov	r0, r6
 800c180:	f000 f80c 	bl	800c19c <__malloc_unlock>
 800c184:	e794      	b.n	800c0b0 <_malloc_r+0x20>
 800c186:	6005      	str	r5, [r0, #0]
 800c188:	e7d6      	b.n	800c138 <_malloc_r+0xa8>
 800c18a:	bf00      	nop
 800c18c:	200009fc 	.word	0x200009fc

0800c190 <__malloc_lock>:
 800c190:	4801      	ldr	r0, [pc, #4]	@ (800c198 <__malloc_lock+0x8>)
 800c192:	f001 b8d2 	b.w	800d33a <__retarget_lock_acquire_recursive>
 800c196:	bf00      	nop
 800c198:	20000b40 	.word	0x20000b40

0800c19c <__malloc_unlock>:
 800c19c:	4801      	ldr	r0, [pc, #4]	@ (800c1a4 <__malloc_unlock+0x8>)
 800c19e:	f001 b8cd 	b.w	800d33c <__retarget_lock_release_recursive>
 800c1a2:	bf00      	nop
 800c1a4:	20000b40 	.word	0x20000b40

0800c1a8 <_realloc_r>:
 800c1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ac:	4680      	mov	r8, r0
 800c1ae:	4615      	mov	r5, r2
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	b921      	cbnz	r1, 800c1be <_realloc_r+0x16>
 800c1b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	f7ff bf69 	b.w	800c090 <_malloc_r>
 800c1be:	b92a      	cbnz	r2, 800c1cc <_realloc_r+0x24>
 800c1c0:	f001 f8cc 	bl	800d35c <_free_r>
 800c1c4:	2400      	movs	r4, #0
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1cc:	f002 f90e 	bl	800e3ec <_malloc_usable_size_r>
 800c1d0:	4285      	cmp	r5, r0
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	d802      	bhi.n	800c1dc <_realloc_r+0x34>
 800c1d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c1da:	d8f4      	bhi.n	800c1c6 <_realloc_r+0x1e>
 800c1dc:	4629      	mov	r1, r5
 800c1de:	4640      	mov	r0, r8
 800c1e0:	f7ff ff56 	bl	800c090 <_malloc_r>
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d0ec      	beq.n	800c1c4 <_realloc_r+0x1c>
 800c1ea:	42b5      	cmp	r5, r6
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	bf28      	it	cs
 800c1f2:	4632      	movcs	r2, r6
 800c1f4:	f001 f8a3 	bl	800d33e <memcpy>
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	4640      	mov	r0, r8
 800c1fc:	f001 f8ae 	bl	800d35c <_free_r>
 800c200:	463c      	mov	r4, r7
 800c202:	e7e0      	b.n	800c1c6 <_realloc_r+0x1e>

0800c204 <sulp>:
 800c204:	b570      	push	{r4, r5, r6, lr}
 800c206:	4604      	mov	r4, r0
 800c208:	460d      	mov	r5, r1
 800c20a:	ec45 4b10 	vmov	d0, r4, r5
 800c20e:	4616      	mov	r6, r2
 800c210:	f001 ffae 	bl	800e170 <__ulp>
 800c214:	ec51 0b10 	vmov	r0, r1, d0
 800c218:	b17e      	cbz	r6, 800c23a <sulp+0x36>
 800c21a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c21e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c222:	2b00      	cmp	r3, #0
 800c224:	dd09      	ble.n	800c23a <sulp+0x36>
 800c226:	051b      	lsls	r3, r3, #20
 800c228:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c22c:	2400      	movs	r4, #0
 800c22e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c232:	4622      	mov	r2, r4
 800c234:	462b      	mov	r3, r5
 800c236:	f7f4 f9ff 	bl	8000638 <__aeabi_dmul>
 800c23a:	ec41 0b10 	vmov	d0, r0, r1
 800c23e:	bd70      	pop	{r4, r5, r6, pc}

0800c240 <_strtod_l>:
 800c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c244:	b09f      	sub	sp, #124	@ 0x7c
 800c246:	460c      	mov	r4, r1
 800c248:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c24a:	2200      	movs	r2, #0
 800c24c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c24e:	9005      	str	r0, [sp, #20]
 800c250:	f04f 0a00 	mov.w	sl, #0
 800c254:	f04f 0b00 	mov.w	fp, #0
 800c258:	460a      	mov	r2, r1
 800c25a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c25c:	7811      	ldrb	r1, [r2, #0]
 800c25e:	292b      	cmp	r1, #43	@ 0x2b
 800c260:	d04a      	beq.n	800c2f8 <_strtod_l+0xb8>
 800c262:	d838      	bhi.n	800c2d6 <_strtod_l+0x96>
 800c264:	290d      	cmp	r1, #13
 800c266:	d832      	bhi.n	800c2ce <_strtod_l+0x8e>
 800c268:	2908      	cmp	r1, #8
 800c26a:	d832      	bhi.n	800c2d2 <_strtod_l+0x92>
 800c26c:	2900      	cmp	r1, #0
 800c26e:	d03b      	beq.n	800c2e8 <_strtod_l+0xa8>
 800c270:	2200      	movs	r2, #0
 800c272:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c274:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c276:	782a      	ldrb	r2, [r5, #0]
 800c278:	2a30      	cmp	r2, #48	@ 0x30
 800c27a:	f040 80b3 	bne.w	800c3e4 <_strtod_l+0x1a4>
 800c27e:	786a      	ldrb	r2, [r5, #1]
 800c280:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c284:	2a58      	cmp	r2, #88	@ 0x58
 800c286:	d16e      	bne.n	800c366 <_strtod_l+0x126>
 800c288:	9302      	str	r3, [sp, #8]
 800c28a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c28c:	9301      	str	r3, [sp, #4]
 800c28e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	4a8e      	ldr	r2, [pc, #568]	@ (800c4cc <_strtod_l+0x28c>)
 800c294:	9805      	ldr	r0, [sp, #20]
 800c296:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c298:	a919      	add	r1, sp, #100	@ 0x64
 800c29a:	f001 f911 	bl	800d4c0 <__gethex>
 800c29e:	f010 060f 	ands.w	r6, r0, #15
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	d005      	beq.n	800c2b2 <_strtod_l+0x72>
 800c2a6:	2e06      	cmp	r6, #6
 800c2a8:	d128      	bne.n	800c2fc <_strtod_l+0xbc>
 800c2aa:	3501      	adds	r5, #1
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800c2b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f040 858e 	bne.w	800cdd6 <_strtod_l+0xb96>
 800c2ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2bc:	b1cb      	cbz	r3, 800c2f2 <_strtod_l+0xb2>
 800c2be:	4652      	mov	r2, sl
 800c2c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c2c4:	ec43 2b10 	vmov	d0, r2, r3
 800c2c8:	b01f      	add	sp, #124	@ 0x7c
 800c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	2920      	cmp	r1, #32
 800c2d0:	d1ce      	bne.n	800c270 <_strtod_l+0x30>
 800c2d2:	3201      	adds	r2, #1
 800c2d4:	e7c1      	b.n	800c25a <_strtod_l+0x1a>
 800c2d6:	292d      	cmp	r1, #45	@ 0x2d
 800c2d8:	d1ca      	bne.n	800c270 <_strtod_l+0x30>
 800c2da:	2101      	movs	r1, #1
 800c2dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c2de:	1c51      	adds	r1, r2, #1
 800c2e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c2e2:	7852      	ldrb	r2, [r2, #1]
 800c2e4:	2a00      	cmp	r2, #0
 800c2e6:	d1c5      	bne.n	800c274 <_strtod_l+0x34>
 800c2e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f040 8570 	bne.w	800cdd2 <_strtod_l+0xb92>
 800c2f2:	4652      	mov	r2, sl
 800c2f4:	465b      	mov	r3, fp
 800c2f6:	e7e5      	b.n	800c2c4 <_strtod_l+0x84>
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	e7ef      	b.n	800c2dc <_strtod_l+0x9c>
 800c2fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c2fe:	b13a      	cbz	r2, 800c310 <_strtod_l+0xd0>
 800c300:	2135      	movs	r1, #53	@ 0x35
 800c302:	a81c      	add	r0, sp, #112	@ 0x70
 800c304:	f002 f82e 	bl	800e364 <__copybits>
 800c308:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c30a:	9805      	ldr	r0, [sp, #20]
 800c30c:	f001 fbfc 	bl	800db08 <_Bfree>
 800c310:	3e01      	subs	r6, #1
 800c312:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c314:	2e04      	cmp	r6, #4
 800c316:	d806      	bhi.n	800c326 <_strtod_l+0xe6>
 800c318:	e8df f006 	tbb	[pc, r6]
 800c31c:	201d0314 	.word	0x201d0314
 800c320:	14          	.byte	0x14
 800c321:	00          	.byte	0x00
 800c322:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c326:	05e1      	lsls	r1, r4, #23
 800c328:	bf48      	it	mi
 800c32a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c32e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c332:	0d1b      	lsrs	r3, r3, #20
 800c334:	051b      	lsls	r3, r3, #20
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1bb      	bne.n	800c2b2 <_strtod_l+0x72>
 800c33a:	f000 ffd3 	bl	800d2e4 <__errno>
 800c33e:	2322      	movs	r3, #34	@ 0x22
 800c340:	6003      	str	r3, [r0, #0]
 800c342:	e7b6      	b.n	800c2b2 <_strtod_l+0x72>
 800c344:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c348:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c34c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c350:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c354:	e7e7      	b.n	800c326 <_strtod_l+0xe6>
 800c356:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c4d4 <_strtod_l+0x294>
 800c35a:	e7e4      	b.n	800c326 <_strtod_l+0xe6>
 800c35c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c360:	f04f 3aff 	mov.w	sl, #4294967295
 800c364:	e7df      	b.n	800c326 <_strtod_l+0xe6>
 800c366:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c36c:	785b      	ldrb	r3, [r3, #1]
 800c36e:	2b30      	cmp	r3, #48	@ 0x30
 800c370:	d0f9      	beq.n	800c366 <_strtod_l+0x126>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d09d      	beq.n	800c2b2 <_strtod_l+0x72>
 800c376:	2301      	movs	r3, #1
 800c378:	9309      	str	r3, [sp, #36]	@ 0x24
 800c37a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c37c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c37e:	2300      	movs	r3, #0
 800c380:	9308      	str	r3, [sp, #32]
 800c382:	930a      	str	r3, [sp, #40]	@ 0x28
 800c384:	461f      	mov	r7, r3
 800c386:	220a      	movs	r2, #10
 800c388:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c38a:	7805      	ldrb	r5, [r0, #0]
 800c38c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c390:	b2d9      	uxtb	r1, r3
 800c392:	2909      	cmp	r1, #9
 800c394:	d928      	bls.n	800c3e8 <_strtod_l+0x1a8>
 800c396:	494e      	ldr	r1, [pc, #312]	@ (800c4d0 <_strtod_l+0x290>)
 800c398:	2201      	movs	r2, #1
 800c39a:	f000 fe9b 	bl	800d0d4 <strncmp>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d032      	beq.n	800c408 <_strtod_l+0x1c8>
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4681      	mov	r9, r0
 800c3a8:	463d      	mov	r5, r7
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2a65      	cmp	r2, #101	@ 0x65
 800c3ae:	d001      	beq.n	800c3b4 <_strtod_l+0x174>
 800c3b0:	2a45      	cmp	r2, #69	@ 0x45
 800c3b2:	d114      	bne.n	800c3de <_strtod_l+0x19e>
 800c3b4:	b91d      	cbnz	r5, 800c3be <_strtod_l+0x17e>
 800c3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b8:	4302      	orrs	r2, r0
 800c3ba:	d095      	beq.n	800c2e8 <_strtod_l+0xa8>
 800c3bc:	2500      	movs	r5, #0
 800c3be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c3c0:	1c62      	adds	r2, r4, #1
 800c3c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3c4:	7862      	ldrb	r2, [r4, #1]
 800c3c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c3c8:	d077      	beq.n	800c4ba <_strtod_l+0x27a>
 800c3ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800c3cc:	d07b      	beq.n	800c4c6 <_strtod_l+0x286>
 800c3ce:	f04f 0c00 	mov.w	ip, #0
 800c3d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c3d6:	2909      	cmp	r1, #9
 800c3d8:	f240 8082 	bls.w	800c4e0 <_strtod_l+0x2a0>
 800c3dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800c3de:	f04f 0800 	mov.w	r8, #0
 800c3e2:	e0a2      	b.n	800c52a <_strtod_l+0x2ea>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	e7c7      	b.n	800c378 <_strtod_l+0x138>
 800c3e8:	2f08      	cmp	r7, #8
 800c3ea:	bfd5      	itete	le
 800c3ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c3ee:	9908      	ldrgt	r1, [sp, #32]
 800c3f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c3f8:	f100 0001 	add.w	r0, r0, #1
 800c3fc:	bfd4      	ite	le
 800c3fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c400:	9308      	strgt	r3, [sp, #32]
 800c402:	3701      	adds	r7, #1
 800c404:	9019      	str	r0, [sp, #100]	@ 0x64
 800c406:	e7bf      	b.n	800c388 <_strtod_l+0x148>
 800c408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c40e:	785a      	ldrb	r2, [r3, #1]
 800c410:	b37f      	cbz	r7, 800c472 <_strtod_l+0x232>
 800c412:	4681      	mov	r9, r0
 800c414:	463d      	mov	r5, r7
 800c416:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c41a:	2b09      	cmp	r3, #9
 800c41c:	d912      	bls.n	800c444 <_strtod_l+0x204>
 800c41e:	2301      	movs	r3, #1
 800c420:	e7c4      	b.n	800c3ac <_strtod_l+0x16c>
 800c422:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	9219      	str	r2, [sp, #100]	@ 0x64
 800c428:	785a      	ldrb	r2, [r3, #1]
 800c42a:	3001      	adds	r0, #1
 800c42c:	2a30      	cmp	r2, #48	@ 0x30
 800c42e:	d0f8      	beq.n	800c422 <_strtod_l+0x1e2>
 800c430:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c434:	2b08      	cmp	r3, #8
 800c436:	f200 84d3 	bhi.w	800cde0 <_strtod_l+0xba0>
 800c43a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c43c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c43e:	4681      	mov	r9, r0
 800c440:	2000      	movs	r0, #0
 800c442:	4605      	mov	r5, r0
 800c444:	3a30      	subs	r2, #48	@ 0x30
 800c446:	f100 0301 	add.w	r3, r0, #1
 800c44a:	d02a      	beq.n	800c4a2 <_strtod_l+0x262>
 800c44c:	4499      	add	r9, r3
 800c44e:	eb00 0c05 	add.w	ip, r0, r5
 800c452:	462b      	mov	r3, r5
 800c454:	210a      	movs	r1, #10
 800c456:	4563      	cmp	r3, ip
 800c458:	d10d      	bne.n	800c476 <_strtod_l+0x236>
 800c45a:	1c69      	adds	r1, r5, #1
 800c45c:	4401      	add	r1, r0
 800c45e:	4428      	add	r0, r5
 800c460:	2808      	cmp	r0, #8
 800c462:	dc16      	bgt.n	800c492 <_strtod_l+0x252>
 800c464:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c466:	230a      	movs	r3, #10
 800c468:	fb03 2300 	mla	r3, r3, r0, r2
 800c46c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c46e:	2300      	movs	r3, #0
 800c470:	e018      	b.n	800c4a4 <_strtod_l+0x264>
 800c472:	4638      	mov	r0, r7
 800c474:	e7da      	b.n	800c42c <_strtod_l+0x1ec>
 800c476:	2b08      	cmp	r3, #8
 800c478:	f103 0301 	add.w	r3, r3, #1
 800c47c:	dc03      	bgt.n	800c486 <_strtod_l+0x246>
 800c47e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c480:	434e      	muls	r6, r1
 800c482:	960a      	str	r6, [sp, #40]	@ 0x28
 800c484:	e7e7      	b.n	800c456 <_strtod_l+0x216>
 800c486:	2b10      	cmp	r3, #16
 800c488:	bfde      	ittt	le
 800c48a:	9e08      	ldrle	r6, [sp, #32]
 800c48c:	434e      	mulle	r6, r1
 800c48e:	9608      	strle	r6, [sp, #32]
 800c490:	e7e1      	b.n	800c456 <_strtod_l+0x216>
 800c492:	280f      	cmp	r0, #15
 800c494:	dceb      	bgt.n	800c46e <_strtod_l+0x22e>
 800c496:	9808      	ldr	r0, [sp, #32]
 800c498:	230a      	movs	r3, #10
 800c49a:	fb03 2300 	mla	r3, r3, r0, r2
 800c49e:	9308      	str	r3, [sp, #32]
 800c4a0:	e7e5      	b.n	800c46e <_strtod_l+0x22e>
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4a6:	1c50      	adds	r0, r2, #1
 800c4a8:	9019      	str	r0, [sp, #100]	@ 0x64
 800c4aa:	7852      	ldrb	r2, [r2, #1]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	460d      	mov	r5, r1
 800c4b0:	e7b1      	b.n	800c416 <_strtod_l+0x1d6>
 800c4b2:	f04f 0900 	mov.w	r9, #0
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e77d      	b.n	800c3b6 <_strtod_l+0x176>
 800c4ba:	f04f 0c00 	mov.w	ip, #0
 800c4be:	1ca2      	adds	r2, r4, #2
 800c4c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4c2:	78a2      	ldrb	r2, [r4, #2]
 800c4c4:	e785      	b.n	800c3d2 <_strtod_l+0x192>
 800c4c6:	f04f 0c01 	mov.w	ip, #1
 800c4ca:	e7f8      	b.n	800c4be <_strtod_l+0x27e>
 800c4cc:	080133a8 	.word	0x080133a8
 800c4d0:	08013384 	.word	0x08013384
 800c4d4:	7ff00000 	.word	0x7ff00000
 800c4d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4da:	1c51      	adds	r1, r2, #1
 800c4dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4de:	7852      	ldrb	r2, [r2, #1]
 800c4e0:	2a30      	cmp	r2, #48	@ 0x30
 800c4e2:	d0f9      	beq.n	800c4d8 <_strtod_l+0x298>
 800c4e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c4e8:	2908      	cmp	r1, #8
 800c4ea:	f63f af78 	bhi.w	800c3de <_strtod_l+0x19e>
 800c4ee:	3a30      	subs	r2, #48	@ 0x30
 800c4f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c4f6:	f04f 080a 	mov.w	r8, #10
 800c4fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4fc:	1c56      	adds	r6, r2, #1
 800c4fe:	9619      	str	r6, [sp, #100]	@ 0x64
 800c500:	7852      	ldrb	r2, [r2, #1]
 800c502:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c506:	f1be 0f09 	cmp.w	lr, #9
 800c50a:	d939      	bls.n	800c580 <_strtod_l+0x340>
 800c50c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c50e:	1a76      	subs	r6, r6, r1
 800c510:	2e08      	cmp	r6, #8
 800c512:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c516:	dc03      	bgt.n	800c520 <_strtod_l+0x2e0>
 800c518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c51a:	4588      	cmp	r8, r1
 800c51c:	bfa8      	it	ge
 800c51e:	4688      	movge	r8, r1
 800c520:	f1bc 0f00 	cmp.w	ip, #0
 800c524:	d001      	beq.n	800c52a <_strtod_l+0x2ea>
 800c526:	f1c8 0800 	rsb	r8, r8, #0
 800c52a:	2d00      	cmp	r5, #0
 800c52c:	d14e      	bne.n	800c5cc <_strtod_l+0x38c>
 800c52e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c530:	4308      	orrs	r0, r1
 800c532:	f47f aebe 	bne.w	800c2b2 <_strtod_l+0x72>
 800c536:	2b00      	cmp	r3, #0
 800c538:	f47f aed6 	bne.w	800c2e8 <_strtod_l+0xa8>
 800c53c:	2a69      	cmp	r2, #105	@ 0x69
 800c53e:	d028      	beq.n	800c592 <_strtod_l+0x352>
 800c540:	dc25      	bgt.n	800c58e <_strtod_l+0x34e>
 800c542:	2a49      	cmp	r2, #73	@ 0x49
 800c544:	d025      	beq.n	800c592 <_strtod_l+0x352>
 800c546:	2a4e      	cmp	r2, #78	@ 0x4e
 800c548:	f47f aece 	bne.w	800c2e8 <_strtod_l+0xa8>
 800c54c:	499b      	ldr	r1, [pc, #620]	@ (800c7bc <_strtod_l+0x57c>)
 800c54e:	a819      	add	r0, sp, #100	@ 0x64
 800c550:	f001 f9d8 	bl	800d904 <__match>
 800c554:	2800      	cmp	r0, #0
 800c556:	f43f aec7 	beq.w	800c2e8 <_strtod_l+0xa8>
 800c55a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b28      	cmp	r3, #40	@ 0x28
 800c560:	d12e      	bne.n	800c5c0 <_strtod_l+0x380>
 800c562:	4997      	ldr	r1, [pc, #604]	@ (800c7c0 <_strtod_l+0x580>)
 800c564:	aa1c      	add	r2, sp, #112	@ 0x70
 800c566:	a819      	add	r0, sp, #100	@ 0x64
 800c568:	f001 f9e0 	bl	800d92c <__hexnan>
 800c56c:	2805      	cmp	r0, #5
 800c56e:	d127      	bne.n	800c5c0 <_strtod_l+0x380>
 800c570:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c572:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c576:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c57a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c57e:	e698      	b.n	800c2b2 <_strtod_l+0x72>
 800c580:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c582:	fb08 2101 	mla	r1, r8, r1, r2
 800c586:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c58a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c58c:	e7b5      	b.n	800c4fa <_strtod_l+0x2ba>
 800c58e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c590:	e7da      	b.n	800c548 <_strtod_l+0x308>
 800c592:	498c      	ldr	r1, [pc, #560]	@ (800c7c4 <_strtod_l+0x584>)
 800c594:	a819      	add	r0, sp, #100	@ 0x64
 800c596:	f001 f9b5 	bl	800d904 <__match>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	f43f aea4 	beq.w	800c2e8 <_strtod_l+0xa8>
 800c5a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5a2:	4989      	ldr	r1, [pc, #548]	@ (800c7c8 <_strtod_l+0x588>)
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	a819      	add	r0, sp, #100	@ 0x64
 800c5a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c5aa:	f001 f9ab 	bl	800d904 <__match>
 800c5ae:	b910      	cbnz	r0, 800c5b6 <_strtod_l+0x376>
 800c5b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c5b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c7d8 <_strtod_l+0x598>
 800c5ba:	f04f 0a00 	mov.w	sl, #0
 800c5be:	e678      	b.n	800c2b2 <_strtod_l+0x72>
 800c5c0:	4882      	ldr	r0, [pc, #520]	@ (800c7cc <_strtod_l+0x58c>)
 800c5c2:	f7fe faf1 	bl	800aba8 <nan>
 800c5c6:	ec5b ab10 	vmov	sl, fp, d0
 800c5ca:	e672      	b.n	800c2b2 <_strtod_l+0x72>
 800c5cc:	eba8 0309 	sub.w	r3, r8, r9
 800c5d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c5d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5d4:	2f00      	cmp	r7, #0
 800c5d6:	bf08      	it	eq
 800c5d8:	462f      	moveq	r7, r5
 800c5da:	2d10      	cmp	r5, #16
 800c5dc:	462c      	mov	r4, r5
 800c5de:	bfa8      	it	ge
 800c5e0:	2410      	movge	r4, #16
 800c5e2:	f7f3 ffaf 	bl	8000544 <__aeabi_ui2d>
 800c5e6:	2d09      	cmp	r5, #9
 800c5e8:	4682      	mov	sl, r0
 800c5ea:	468b      	mov	fp, r1
 800c5ec:	dc13      	bgt.n	800c616 <_strtod_l+0x3d6>
 800c5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f43f ae5e 	beq.w	800c2b2 <_strtod_l+0x72>
 800c5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f8:	dd78      	ble.n	800c6ec <_strtod_l+0x4ac>
 800c5fa:	2b16      	cmp	r3, #22
 800c5fc:	dc5f      	bgt.n	800c6be <_strtod_l+0x47e>
 800c5fe:	4974      	ldr	r1, [pc, #464]	@ (800c7d0 <_strtod_l+0x590>)
 800c600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c604:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c608:	4652      	mov	r2, sl
 800c60a:	465b      	mov	r3, fp
 800c60c:	f7f4 f814 	bl	8000638 <__aeabi_dmul>
 800c610:	4682      	mov	sl, r0
 800c612:	468b      	mov	fp, r1
 800c614:	e64d      	b.n	800c2b2 <_strtod_l+0x72>
 800c616:	4b6e      	ldr	r3, [pc, #440]	@ (800c7d0 <_strtod_l+0x590>)
 800c618:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c61c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c620:	f7f4 f80a 	bl	8000638 <__aeabi_dmul>
 800c624:	4682      	mov	sl, r0
 800c626:	9808      	ldr	r0, [sp, #32]
 800c628:	468b      	mov	fp, r1
 800c62a:	f7f3 ff8b 	bl	8000544 <__aeabi_ui2d>
 800c62e:	4602      	mov	r2, r0
 800c630:	460b      	mov	r3, r1
 800c632:	4650      	mov	r0, sl
 800c634:	4659      	mov	r1, fp
 800c636:	f7f3 fe49 	bl	80002cc <__adddf3>
 800c63a:	2d0f      	cmp	r5, #15
 800c63c:	4682      	mov	sl, r0
 800c63e:	468b      	mov	fp, r1
 800c640:	ddd5      	ble.n	800c5ee <_strtod_l+0x3ae>
 800c642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c644:	1b2c      	subs	r4, r5, r4
 800c646:	441c      	add	r4, r3
 800c648:	2c00      	cmp	r4, #0
 800c64a:	f340 8096 	ble.w	800c77a <_strtod_l+0x53a>
 800c64e:	f014 030f 	ands.w	r3, r4, #15
 800c652:	d00a      	beq.n	800c66a <_strtod_l+0x42a>
 800c654:	495e      	ldr	r1, [pc, #376]	@ (800c7d0 <_strtod_l+0x590>)
 800c656:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c65a:	4652      	mov	r2, sl
 800c65c:	465b      	mov	r3, fp
 800c65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c662:	f7f3 ffe9 	bl	8000638 <__aeabi_dmul>
 800c666:	4682      	mov	sl, r0
 800c668:	468b      	mov	fp, r1
 800c66a:	f034 040f 	bics.w	r4, r4, #15
 800c66e:	d073      	beq.n	800c758 <_strtod_l+0x518>
 800c670:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c674:	dd48      	ble.n	800c708 <_strtod_l+0x4c8>
 800c676:	2400      	movs	r4, #0
 800c678:	46a0      	mov	r8, r4
 800c67a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c67c:	46a1      	mov	r9, r4
 800c67e:	9a05      	ldr	r2, [sp, #20]
 800c680:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c7d8 <_strtod_l+0x598>
 800c684:	2322      	movs	r3, #34	@ 0x22
 800c686:	6013      	str	r3, [r2, #0]
 800c688:	f04f 0a00 	mov.w	sl, #0
 800c68c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f43f ae0f 	beq.w	800c2b2 <_strtod_l+0x72>
 800c694:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c696:	9805      	ldr	r0, [sp, #20]
 800c698:	f001 fa36 	bl	800db08 <_Bfree>
 800c69c:	9805      	ldr	r0, [sp, #20]
 800c69e:	4649      	mov	r1, r9
 800c6a0:	f001 fa32 	bl	800db08 <_Bfree>
 800c6a4:	9805      	ldr	r0, [sp, #20]
 800c6a6:	4641      	mov	r1, r8
 800c6a8:	f001 fa2e 	bl	800db08 <_Bfree>
 800c6ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6ae:	9805      	ldr	r0, [sp, #20]
 800c6b0:	f001 fa2a 	bl	800db08 <_Bfree>
 800c6b4:	9805      	ldr	r0, [sp, #20]
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	f001 fa26 	bl	800db08 <_Bfree>
 800c6bc:	e5f9      	b.n	800c2b2 <_strtod_l+0x72>
 800c6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	dbbc      	blt.n	800c642 <_strtod_l+0x402>
 800c6c8:	4c41      	ldr	r4, [pc, #260]	@ (800c7d0 <_strtod_l+0x590>)
 800c6ca:	f1c5 050f 	rsb	r5, r5, #15
 800c6ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c6d2:	4652      	mov	r2, sl
 800c6d4:	465b      	mov	r3, fp
 800c6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6da:	f7f3 ffad 	bl	8000638 <__aeabi_dmul>
 800c6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e0:	1b5d      	subs	r5, r3, r5
 800c6e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c6e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c6ea:	e78f      	b.n	800c60c <_strtod_l+0x3cc>
 800c6ec:	3316      	adds	r3, #22
 800c6ee:	dba8      	blt.n	800c642 <_strtod_l+0x402>
 800c6f0:	4b37      	ldr	r3, [pc, #220]	@ (800c7d0 <_strtod_l+0x590>)
 800c6f2:	eba9 0808 	sub.w	r8, r9, r8
 800c6f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c6fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c6fe:	4650      	mov	r0, sl
 800c700:	4659      	mov	r1, fp
 800c702:	f7f4 f8c3 	bl	800088c <__aeabi_ddiv>
 800c706:	e783      	b.n	800c610 <_strtod_l+0x3d0>
 800c708:	4b32      	ldr	r3, [pc, #200]	@ (800c7d4 <_strtod_l+0x594>)
 800c70a:	9308      	str	r3, [sp, #32]
 800c70c:	2300      	movs	r3, #0
 800c70e:	1124      	asrs	r4, r4, #4
 800c710:	4650      	mov	r0, sl
 800c712:	4659      	mov	r1, fp
 800c714:	461e      	mov	r6, r3
 800c716:	2c01      	cmp	r4, #1
 800c718:	dc21      	bgt.n	800c75e <_strtod_l+0x51e>
 800c71a:	b10b      	cbz	r3, 800c720 <_strtod_l+0x4e0>
 800c71c:	4682      	mov	sl, r0
 800c71e:	468b      	mov	fp, r1
 800c720:	492c      	ldr	r1, [pc, #176]	@ (800c7d4 <_strtod_l+0x594>)
 800c722:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c726:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c72a:	4652      	mov	r2, sl
 800c72c:	465b      	mov	r3, fp
 800c72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c732:	f7f3 ff81 	bl	8000638 <__aeabi_dmul>
 800c736:	4b28      	ldr	r3, [pc, #160]	@ (800c7d8 <_strtod_l+0x598>)
 800c738:	460a      	mov	r2, r1
 800c73a:	400b      	ands	r3, r1
 800c73c:	4927      	ldr	r1, [pc, #156]	@ (800c7dc <_strtod_l+0x59c>)
 800c73e:	428b      	cmp	r3, r1
 800c740:	4682      	mov	sl, r0
 800c742:	d898      	bhi.n	800c676 <_strtod_l+0x436>
 800c744:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c748:	428b      	cmp	r3, r1
 800c74a:	bf86      	itte	hi
 800c74c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c7e0 <_strtod_l+0x5a0>
 800c750:	f04f 3aff 	movhi.w	sl, #4294967295
 800c754:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c758:	2300      	movs	r3, #0
 800c75a:	9308      	str	r3, [sp, #32]
 800c75c:	e07a      	b.n	800c854 <_strtod_l+0x614>
 800c75e:	07e2      	lsls	r2, r4, #31
 800c760:	d505      	bpl.n	800c76e <_strtod_l+0x52e>
 800c762:	9b08      	ldr	r3, [sp, #32]
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	f7f3 ff66 	bl	8000638 <__aeabi_dmul>
 800c76c:	2301      	movs	r3, #1
 800c76e:	9a08      	ldr	r2, [sp, #32]
 800c770:	3208      	adds	r2, #8
 800c772:	3601      	adds	r6, #1
 800c774:	1064      	asrs	r4, r4, #1
 800c776:	9208      	str	r2, [sp, #32]
 800c778:	e7cd      	b.n	800c716 <_strtod_l+0x4d6>
 800c77a:	d0ed      	beq.n	800c758 <_strtod_l+0x518>
 800c77c:	4264      	negs	r4, r4
 800c77e:	f014 020f 	ands.w	r2, r4, #15
 800c782:	d00a      	beq.n	800c79a <_strtod_l+0x55a>
 800c784:	4b12      	ldr	r3, [pc, #72]	@ (800c7d0 <_strtod_l+0x590>)
 800c786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c78a:	4650      	mov	r0, sl
 800c78c:	4659      	mov	r1, fp
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	f7f4 f87b 	bl	800088c <__aeabi_ddiv>
 800c796:	4682      	mov	sl, r0
 800c798:	468b      	mov	fp, r1
 800c79a:	1124      	asrs	r4, r4, #4
 800c79c:	d0dc      	beq.n	800c758 <_strtod_l+0x518>
 800c79e:	2c1f      	cmp	r4, #31
 800c7a0:	dd20      	ble.n	800c7e4 <_strtod_l+0x5a4>
 800c7a2:	2400      	movs	r4, #0
 800c7a4:	46a0      	mov	r8, r4
 800c7a6:	940a      	str	r4, [sp, #40]	@ 0x28
 800c7a8:	46a1      	mov	r9, r4
 800c7aa:	9a05      	ldr	r2, [sp, #20]
 800c7ac:	2322      	movs	r3, #34	@ 0x22
 800c7ae:	f04f 0a00 	mov.w	sl, #0
 800c7b2:	f04f 0b00 	mov.w	fp, #0
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	e768      	b.n	800c68c <_strtod_l+0x44c>
 800c7ba:	bf00      	nop
 800c7bc:	0801338f 	.word	0x0801338f
 800c7c0:	08013394 	.word	0x08013394
 800c7c4:	08013386 	.word	0x08013386
 800c7c8:	08013389 	.word	0x08013389
 800c7cc:	08013383 	.word	0x08013383
 800c7d0:	08013660 	.word	0x08013660
 800c7d4:	08013638 	.word	0x08013638
 800c7d8:	7ff00000 	.word	0x7ff00000
 800c7dc:	7ca00000 	.word	0x7ca00000
 800c7e0:	7fefffff 	.word	0x7fefffff
 800c7e4:	f014 0310 	ands.w	r3, r4, #16
 800c7e8:	bf18      	it	ne
 800c7ea:	236a      	movne	r3, #106	@ 0x6a
 800c7ec:	4ea9      	ldr	r6, [pc, #676]	@ (800ca94 <_strtod_l+0x854>)
 800c7ee:	9308      	str	r3, [sp, #32]
 800c7f0:	4650      	mov	r0, sl
 800c7f2:	4659      	mov	r1, fp
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	07e2      	lsls	r2, r4, #31
 800c7f8:	d504      	bpl.n	800c804 <_strtod_l+0x5c4>
 800c7fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7fe:	f7f3 ff1b 	bl	8000638 <__aeabi_dmul>
 800c802:	2301      	movs	r3, #1
 800c804:	1064      	asrs	r4, r4, #1
 800c806:	f106 0608 	add.w	r6, r6, #8
 800c80a:	d1f4      	bne.n	800c7f6 <_strtod_l+0x5b6>
 800c80c:	b10b      	cbz	r3, 800c812 <_strtod_l+0x5d2>
 800c80e:	4682      	mov	sl, r0
 800c810:	468b      	mov	fp, r1
 800c812:	9b08      	ldr	r3, [sp, #32]
 800c814:	b1b3      	cbz	r3, 800c844 <_strtod_l+0x604>
 800c816:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c81a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c81e:	2b00      	cmp	r3, #0
 800c820:	4659      	mov	r1, fp
 800c822:	dd0f      	ble.n	800c844 <_strtod_l+0x604>
 800c824:	2b1f      	cmp	r3, #31
 800c826:	dd55      	ble.n	800c8d4 <_strtod_l+0x694>
 800c828:	2b34      	cmp	r3, #52	@ 0x34
 800c82a:	bfde      	ittt	le
 800c82c:	f04f 33ff 	movle.w	r3, #4294967295
 800c830:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c834:	4093      	lslle	r3, r2
 800c836:	f04f 0a00 	mov.w	sl, #0
 800c83a:	bfcc      	ite	gt
 800c83c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c840:	ea03 0b01 	andle.w	fp, r3, r1
 800c844:	2200      	movs	r2, #0
 800c846:	2300      	movs	r3, #0
 800c848:	4650      	mov	r0, sl
 800c84a:	4659      	mov	r1, fp
 800c84c:	f7f4 f95c 	bl	8000b08 <__aeabi_dcmpeq>
 800c850:	2800      	cmp	r0, #0
 800c852:	d1a6      	bne.n	800c7a2 <_strtod_l+0x562>
 800c854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c85a:	9805      	ldr	r0, [sp, #20]
 800c85c:	462b      	mov	r3, r5
 800c85e:	463a      	mov	r2, r7
 800c860:	f001 f9ba 	bl	800dbd8 <__s2b>
 800c864:	900a      	str	r0, [sp, #40]	@ 0x28
 800c866:	2800      	cmp	r0, #0
 800c868:	f43f af05 	beq.w	800c676 <_strtod_l+0x436>
 800c86c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c86e:	2a00      	cmp	r2, #0
 800c870:	eba9 0308 	sub.w	r3, r9, r8
 800c874:	bfa8      	it	ge
 800c876:	2300      	movge	r3, #0
 800c878:	9312      	str	r3, [sp, #72]	@ 0x48
 800c87a:	2400      	movs	r4, #0
 800c87c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c880:	9316      	str	r3, [sp, #88]	@ 0x58
 800c882:	46a0      	mov	r8, r4
 800c884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c886:	9805      	ldr	r0, [sp, #20]
 800c888:	6859      	ldr	r1, [r3, #4]
 800c88a:	f001 f8fd 	bl	800da88 <_Balloc>
 800c88e:	4681      	mov	r9, r0
 800c890:	2800      	cmp	r0, #0
 800c892:	f43f aef4 	beq.w	800c67e <_strtod_l+0x43e>
 800c896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c898:	691a      	ldr	r2, [r3, #16]
 800c89a:	3202      	adds	r2, #2
 800c89c:	f103 010c 	add.w	r1, r3, #12
 800c8a0:	0092      	lsls	r2, r2, #2
 800c8a2:	300c      	adds	r0, #12
 800c8a4:	f000 fd4b 	bl	800d33e <memcpy>
 800c8a8:	ec4b ab10 	vmov	d0, sl, fp
 800c8ac:	9805      	ldr	r0, [sp, #20]
 800c8ae:	aa1c      	add	r2, sp, #112	@ 0x70
 800c8b0:	a91b      	add	r1, sp, #108	@ 0x6c
 800c8b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c8b6:	f001 fccb 	bl	800e250 <__d2b>
 800c8ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	f43f aede 	beq.w	800c67e <_strtod_l+0x43e>
 800c8c2:	9805      	ldr	r0, [sp, #20]
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	f001 fa1d 	bl	800dd04 <__i2b>
 800c8ca:	4680      	mov	r8, r0
 800c8cc:	b948      	cbnz	r0, 800c8e2 <_strtod_l+0x6a2>
 800c8ce:	f04f 0800 	mov.w	r8, #0
 800c8d2:	e6d4      	b.n	800c67e <_strtod_l+0x43e>
 800c8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8dc:	ea03 0a0a 	and.w	sl, r3, sl
 800c8e0:	e7b0      	b.n	800c844 <_strtod_l+0x604>
 800c8e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c8e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c8e6:	2d00      	cmp	r5, #0
 800c8e8:	bfab      	itete	ge
 800c8ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c8ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c8ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c8f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c8f2:	bfac      	ite	ge
 800c8f4:	18ef      	addge	r7, r5, r3
 800c8f6:	1b5e      	sublt	r6, r3, r5
 800c8f8:	9b08      	ldr	r3, [sp, #32]
 800c8fa:	1aed      	subs	r5, r5, r3
 800c8fc:	4415      	add	r5, r2
 800c8fe:	4b66      	ldr	r3, [pc, #408]	@ (800ca98 <_strtod_l+0x858>)
 800c900:	3d01      	subs	r5, #1
 800c902:	429d      	cmp	r5, r3
 800c904:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c908:	da50      	bge.n	800c9ac <_strtod_l+0x76c>
 800c90a:	1b5b      	subs	r3, r3, r5
 800c90c:	2b1f      	cmp	r3, #31
 800c90e:	eba2 0203 	sub.w	r2, r2, r3
 800c912:	f04f 0101 	mov.w	r1, #1
 800c916:	dc3d      	bgt.n	800c994 <_strtod_l+0x754>
 800c918:	fa01 f303 	lsl.w	r3, r1, r3
 800c91c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c91e:	2300      	movs	r3, #0
 800c920:	9310      	str	r3, [sp, #64]	@ 0x40
 800c922:	18bd      	adds	r5, r7, r2
 800c924:	9b08      	ldr	r3, [sp, #32]
 800c926:	42af      	cmp	r7, r5
 800c928:	4416      	add	r6, r2
 800c92a:	441e      	add	r6, r3
 800c92c:	463b      	mov	r3, r7
 800c92e:	bfa8      	it	ge
 800c930:	462b      	movge	r3, r5
 800c932:	42b3      	cmp	r3, r6
 800c934:	bfa8      	it	ge
 800c936:	4633      	movge	r3, r6
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bfc2      	ittt	gt
 800c93c:	1aed      	subgt	r5, r5, r3
 800c93e:	1af6      	subgt	r6, r6, r3
 800c940:	1aff      	subgt	r7, r7, r3
 800c942:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c944:	2b00      	cmp	r3, #0
 800c946:	dd16      	ble.n	800c976 <_strtod_l+0x736>
 800c948:	4641      	mov	r1, r8
 800c94a:	9805      	ldr	r0, [sp, #20]
 800c94c:	461a      	mov	r2, r3
 800c94e:	f001 fa99 	bl	800de84 <__pow5mult>
 800c952:	4680      	mov	r8, r0
 800c954:	2800      	cmp	r0, #0
 800c956:	d0ba      	beq.n	800c8ce <_strtod_l+0x68e>
 800c958:	4601      	mov	r1, r0
 800c95a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c95c:	9805      	ldr	r0, [sp, #20]
 800c95e:	f001 f9e7 	bl	800dd30 <__multiply>
 800c962:	900e      	str	r0, [sp, #56]	@ 0x38
 800c964:	2800      	cmp	r0, #0
 800c966:	f43f ae8a 	beq.w	800c67e <_strtod_l+0x43e>
 800c96a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c96c:	9805      	ldr	r0, [sp, #20]
 800c96e:	f001 f8cb 	bl	800db08 <_Bfree>
 800c972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c974:	931a      	str	r3, [sp, #104]	@ 0x68
 800c976:	2d00      	cmp	r5, #0
 800c978:	dc1d      	bgt.n	800c9b6 <_strtod_l+0x776>
 800c97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	dd23      	ble.n	800c9c8 <_strtod_l+0x788>
 800c980:	4649      	mov	r1, r9
 800c982:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c984:	9805      	ldr	r0, [sp, #20]
 800c986:	f001 fa7d 	bl	800de84 <__pow5mult>
 800c98a:	4681      	mov	r9, r0
 800c98c:	b9e0      	cbnz	r0, 800c9c8 <_strtod_l+0x788>
 800c98e:	f04f 0900 	mov.w	r9, #0
 800c992:	e674      	b.n	800c67e <_strtod_l+0x43e>
 800c994:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c998:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c99c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c9a0:	35e2      	adds	r5, #226	@ 0xe2
 800c9a2:	fa01 f305 	lsl.w	r3, r1, r5
 800c9a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c9a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c9aa:	e7ba      	b.n	800c922 <_strtod_l+0x6e2>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c9b4:	e7b5      	b.n	800c922 <_strtod_l+0x6e2>
 800c9b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9b8:	9805      	ldr	r0, [sp, #20]
 800c9ba:	462a      	mov	r2, r5
 800c9bc:	f001 fabc 	bl	800df38 <__lshift>
 800c9c0:	901a      	str	r0, [sp, #104]	@ 0x68
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d1d9      	bne.n	800c97a <_strtod_l+0x73a>
 800c9c6:	e65a      	b.n	800c67e <_strtod_l+0x43e>
 800c9c8:	2e00      	cmp	r6, #0
 800c9ca:	dd07      	ble.n	800c9dc <_strtod_l+0x79c>
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	9805      	ldr	r0, [sp, #20]
 800c9d0:	4632      	mov	r2, r6
 800c9d2:	f001 fab1 	bl	800df38 <__lshift>
 800c9d6:	4681      	mov	r9, r0
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d0d8      	beq.n	800c98e <_strtod_l+0x74e>
 800c9dc:	2f00      	cmp	r7, #0
 800c9de:	dd08      	ble.n	800c9f2 <_strtod_l+0x7b2>
 800c9e0:	4641      	mov	r1, r8
 800c9e2:	9805      	ldr	r0, [sp, #20]
 800c9e4:	463a      	mov	r2, r7
 800c9e6:	f001 faa7 	bl	800df38 <__lshift>
 800c9ea:	4680      	mov	r8, r0
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	f43f ae46 	beq.w	800c67e <_strtod_l+0x43e>
 800c9f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9f4:	9805      	ldr	r0, [sp, #20]
 800c9f6:	464a      	mov	r2, r9
 800c9f8:	f001 fb26 	bl	800e048 <__mdiff>
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f43f ae3d 	beq.w	800c67e <_strtod_l+0x43e>
 800ca04:	68c3      	ldr	r3, [r0, #12]
 800ca06:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca08:	2300      	movs	r3, #0
 800ca0a:	60c3      	str	r3, [r0, #12]
 800ca0c:	4641      	mov	r1, r8
 800ca0e:	f001 faff 	bl	800e010 <__mcmp>
 800ca12:	2800      	cmp	r0, #0
 800ca14:	da46      	bge.n	800caa4 <_strtod_l+0x864>
 800ca16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca18:	ea53 030a 	orrs.w	r3, r3, sl
 800ca1c:	d16c      	bne.n	800caf8 <_strtod_l+0x8b8>
 800ca1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d168      	bne.n	800caf8 <_strtod_l+0x8b8>
 800ca26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca2a:	0d1b      	lsrs	r3, r3, #20
 800ca2c:	051b      	lsls	r3, r3, #20
 800ca2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca32:	d961      	bls.n	800caf8 <_strtod_l+0x8b8>
 800ca34:	6963      	ldr	r3, [r4, #20]
 800ca36:	b913      	cbnz	r3, 800ca3e <_strtod_l+0x7fe>
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	dd5c      	ble.n	800caf8 <_strtod_l+0x8b8>
 800ca3e:	4621      	mov	r1, r4
 800ca40:	2201      	movs	r2, #1
 800ca42:	9805      	ldr	r0, [sp, #20]
 800ca44:	f001 fa78 	bl	800df38 <__lshift>
 800ca48:	4641      	mov	r1, r8
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	f001 fae0 	bl	800e010 <__mcmp>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	dd51      	ble.n	800caf8 <_strtod_l+0x8b8>
 800ca54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca58:	9a08      	ldr	r2, [sp, #32]
 800ca5a:	0d1b      	lsrs	r3, r3, #20
 800ca5c:	051b      	lsls	r3, r3, #20
 800ca5e:	2a00      	cmp	r2, #0
 800ca60:	d06b      	beq.n	800cb3a <_strtod_l+0x8fa>
 800ca62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca66:	d868      	bhi.n	800cb3a <_strtod_l+0x8fa>
 800ca68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ca6c:	f67f ae9d 	bls.w	800c7aa <_strtod_l+0x56a>
 800ca70:	4b0a      	ldr	r3, [pc, #40]	@ (800ca9c <_strtod_l+0x85c>)
 800ca72:	4650      	mov	r0, sl
 800ca74:	4659      	mov	r1, fp
 800ca76:	2200      	movs	r2, #0
 800ca78:	f7f3 fdde 	bl	8000638 <__aeabi_dmul>
 800ca7c:	4b08      	ldr	r3, [pc, #32]	@ (800caa0 <_strtod_l+0x860>)
 800ca7e:	400b      	ands	r3, r1
 800ca80:	4682      	mov	sl, r0
 800ca82:	468b      	mov	fp, r1
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f47f ae05 	bne.w	800c694 <_strtod_l+0x454>
 800ca8a:	9a05      	ldr	r2, [sp, #20]
 800ca8c:	2322      	movs	r3, #34	@ 0x22
 800ca8e:	6013      	str	r3, [r2, #0]
 800ca90:	e600      	b.n	800c694 <_strtod_l+0x454>
 800ca92:	bf00      	nop
 800ca94:	080133c0 	.word	0x080133c0
 800ca98:	fffffc02 	.word	0xfffffc02
 800ca9c:	39500000 	.word	0x39500000
 800caa0:	7ff00000 	.word	0x7ff00000
 800caa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800caa8:	d165      	bne.n	800cb76 <_strtod_l+0x936>
 800caaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800caac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cab0:	b35a      	cbz	r2, 800cb0a <_strtod_l+0x8ca>
 800cab2:	4a9f      	ldr	r2, [pc, #636]	@ (800cd30 <_strtod_l+0xaf0>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d12b      	bne.n	800cb10 <_strtod_l+0x8d0>
 800cab8:	9b08      	ldr	r3, [sp, #32]
 800caba:	4651      	mov	r1, sl
 800cabc:	b303      	cbz	r3, 800cb00 <_strtod_l+0x8c0>
 800cabe:	4b9d      	ldr	r3, [pc, #628]	@ (800cd34 <_strtod_l+0xaf4>)
 800cac0:	465a      	mov	r2, fp
 800cac2:	4013      	ands	r3, r2
 800cac4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cac8:	f04f 32ff 	mov.w	r2, #4294967295
 800cacc:	d81b      	bhi.n	800cb06 <_strtod_l+0x8c6>
 800cace:	0d1b      	lsrs	r3, r3, #20
 800cad0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cad4:	fa02 f303 	lsl.w	r3, r2, r3
 800cad8:	4299      	cmp	r1, r3
 800cada:	d119      	bne.n	800cb10 <_strtod_l+0x8d0>
 800cadc:	4b96      	ldr	r3, [pc, #600]	@ (800cd38 <_strtod_l+0xaf8>)
 800cade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d102      	bne.n	800caea <_strtod_l+0x8aa>
 800cae4:	3101      	adds	r1, #1
 800cae6:	f43f adca 	beq.w	800c67e <_strtod_l+0x43e>
 800caea:	4b92      	ldr	r3, [pc, #584]	@ (800cd34 <_strtod_l+0xaf4>)
 800caec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800caee:	401a      	ands	r2, r3
 800caf0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800caf4:	f04f 0a00 	mov.w	sl, #0
 800caf8:	9b08      	ldr	r3, [sp, #32]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1b8      	bne.n	800ca70 <_strtod_l+0x830>
 800cafe:	e5c9      	b.n	800c694 <_strtod_l+0x454>
 800cb00:	f04f 33ff 	mov.w	r3, #4294967295
 800cb04:	e7e8      	b.n	800cad8 <_strtod_l+0x898>
 800cb06:	4613      	mov	r3, r2
 800cb08:	e7e6      	b.n	800cad8 <_strtod_l+0x898>
 800cb0a:	ea53 030a 	orrs.w	r3, r3, sl
 800cb0e:	d0a1      	beq.n	800ca54 <_strtod_l+0x814>
 800cb10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb12:	b1db      	cbz	r3, 800cb4c <_strtod_l+0x90c>
 800cb14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb16:	4213      	tst	r3, r2
 800cb18:	d0ee      	beq.n	800caf8 <_strtod_l+0x8b8>
 800cb1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb1c:	9a08      	ldr	r2, [sp, #32]
 800cb1e:	4650      	mov	r0, sl
 800cb20:	4659      	mov	r1, fp
 800cb22:	b1bb      	cbz	r3, 800cb54 <_strtod_l+0x914>
 800cb24:	f7ff fb6e 	bl	800c204 <sulp>
 800cb28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb2c:	ec53 2b10 	vmov	r2, r3, d0
 800cb30:	f7f3 fbcc 	bl	80002cc <__adddf3>
 800cb34:	4682      	mov	sl, r0
 800cb36:	468b      	mov	fp, r1
 800cb38:	e7de      	b.n	800caf8 <_strtod_l+0x8b8>
 800cb3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cb3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cb42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb46:	f04f 3aff 	mov.w	sl, #4294967295
 800cb4a:	e7d5      	b.n	800caf8 <_strtod_l+0x8b8>
 800cb4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb4e:	ea13 0f0a 	tst.w	r3, sl
 800cb52:	e7e1      	b.n	800cb18 <_strtod_l+0x8d8>
 800cb54:	f7ff fb56 	bl	800c204 <sulp>
 800cb58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb5c:	ec53 2b10 	vmov	r2, r3, d0
 800cb60:	f7f3 fbb2 	bl	80002c8 <__aeabi_dsub>
 800cb64:	2200      	movs	r2, #0
 800cb66:	2300      	movs	r3, #0
 800cb68:	4682      	mov	sl, r0
 800cb6a:	468b      	mov	fp, r1
 800cb6c:	f7f3 ffcc 	bl	8000b08 <__aeabi_dcmpeq>
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d0c1      	beq.n	800caf8 <_strtod_l+0x8b8>
 800cb74:	e619      	b.n	800c7aa <_strtod_l+0x56a>
 800cb76:	4641      	mov	r1, r8
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f001 fbc1 	bl	800e300 <__ratio>
 800cb7e:	ec57 6b10 	vmov	r6, r7, d0
 800cb82:	2200      	movs	r2, #0
 800cb84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb88:	4630      	mov	r0, r6
 800cb8a:	4639      	mov	r1, r7
 800cb8c:	f7f3 ffd0 	bl	8000b30 <__aeabi_dcmple>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d06f      	beq.n	800cc74 <_strtod_l+0xa34>
 800cb94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d17a      	bne.n	800cc90 <_strtod_l+0xa50>
 800cb9a:	f1ba 0f00 	cmp.w	sl, #0
 800cb9e:	d158      	bne.n	800cc52 <_strtod_l+0xa12>
 800cba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d15a      	bne.n	800cc60 <_strtod_l+0xa20>
 800cbaa:	4b64      	ldr	r3, [pc, #400]	@ (800cd3c <_strtod_l+0xafc>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	4630      	mov	r0, r6
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	f7f3 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d159      	bne.n	800cc6e <_strtod_l+0xa2e>
 800cbba:	4630      	mov	r0, r6
 800cbbc:	4639      	mov	r1, r7
 800cbbe:	4b60      	ldr	r3, [pc, #384]	@ (800cd40 <_strtod_l+0xb00>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f7f3 fd39 	bl	8000638 <__aeabi_dmul>
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	460f      	mov	r7, r1
 800cbca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cbce:	9606      	str	r6, [sp, #24]
 800cbd0:	9307      	str	r3, [sp, #28]
 800cbd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbd6:	4d57      	ldr	r5, [pc, #348]	@ (800cd34 <_strtod_l+0xaf4>)
 800cbd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cbdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbde:	401d      	ands	r5, r3
 800cbe0:	4b58      	ldr	r3, [pc, #352]	@ (800cd44 <_strtod_l+0xb04>)
 800cbe2:	429d      	cmp	r5, r3
 800cbe4:	f040 80b2 	bne.w	800cd4c <_strtod_l+0xb0c>
 800cbe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cbee:	ec4b ab10 	vmov	d0, sl, fp
 800cbf2:	f001 fabd 	bl	800e170 <__ulp>
 800cbf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbfa:	ec51 0b10 	vmov	r0, r1, d0
 800cbfe:	f7f3 fd1b 	bl	8000638 <__aeabi_dmul>
 800cc02:	4652      	mov	r2, sl
 800cc04:	465b      	mov	r3, fp
 800cc06:	f7f3 fb61 	bl	80002cc <__adddf3>
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4949      	ldr	r1, [pc, #292]	@ (800cd34 <_strtod_l+0xaf4>)
 800cc0e:	4a4e      	ldr	r2, [pc, #312]	@ (800cd48 <_strtod_l+0xb08>)
 800cc10:	4019      	ands	r1, r3
 800cc12:	4291      	cmp	r1, r2
 800cc14:	4682      	mov	sl, r0
 800cc16:	d942      	bls.n	800cc9e <_strtod_l+0xa5e>
 800cc18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc1a:	4b47      	ldr	r3, [pc, #284]	@ (800cd38 <_strtod_l+0xaf8>)
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d103      	bne.n	800cc28 <_strtod_l+0x9e8>
 800cc20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc22:	3301      	adds	r3, #1
 800cc24:	f43f ad2b 	beq.w	800c67e <_strtod_l+0x43e>
 800cc28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cd38 <_strtod_l+0xaf8>
 800cc2c:	f04f 3aff 	mov.w	sl, #4294967295
 800cc30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc32:	9805      	ldr	r0, [sp, #20]
 800cc34:	f000 ff68 	bl	800db08 <_Bfree>
 800cc38:	9805      	ldr	r0, [sp, #20]
 800cc3a:	4649      	mov	r1, r9
 800cc3c:	f000 ff64 	bl	800db08 <_Bfree>
 800cc40:	9805      	ldr	r0, [sp, #20]
 800cc42:	4641      	mov	r1, r8
 800cc44:	f000 ff60 	bl	800db08 <_Bfree>
 800cc48:	9805      	ldr	r0, [sp, #20]
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	f000 ff5c 	bl	800db08 <_Bfree>
 800cc50:	e618      	b.n	800c884 <_strtod_l+0x644>
 800cc52:	f1ba 0f01 	cmp.w	sl, #1
 800cc56:	d103      	bne.n	800cc60 <_strtod_l+0xa20>
 800cc58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f43f ada5 	beq.w	800c7aa <_strtod_l+0x56a>
 800cc60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cd10 <_strtod_l+0xad0>
 800cc64:	4f35      	ldr	r7, [pc, #212]	@ (800cd3c <_strtod_l+0xafc>)
 800cc66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc6a:	2600      	movs	r6, #0
 800cc6c:	e7b1      	b.n	800cbd2 <_strtod_l+0x992>
 800cc6e:	4f34      	ldr	r7, [pc, #208]	@ (800cd40 <_strtod_l+0xb00>)
 800cc70:	2600      	movs	r6, #0
 800cc72:	e7aa      	b.n	800cbca <_strtod_l+0x98a>
 800cc74:	4b32      	ldr	r3, [pc, #200]	@ (800cd40 <_strtod_l+0xb00>)
 800cc76:	4630      	mov	r0, r6
 800cc78:	4639      	mov	r1, r7
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f7f3 fcdc 	bl	8000638 <__aeabi_dmul>
 800cc80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc82:	4606      	mov	r6, r0
 800cc84:	460f      	mov	r7, r1
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d09f      	beq.n	800cbca <_strtod_l+0x98a>
 800cc8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc8e:	e7a0      	b.n	800cbd2 <_strtod_l+0x992>
 800cc90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cd18 <_strtod_l+0xad8>
 800cc94:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc98:	ec57 6b17 	vmov	r6, r7, d7
 800cc9c:	e799      	b.n	800cbd2 <_strtod_l+0x992>
 800cc9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cca2:	9b08      	ldr	r3, [sp, #32]
 800cca4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1c1      	bne.n	800cc30 <_strtod_l+0x9f0>
 800ccac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccb0:	0d1b      	lsrs	r3, r3, #20
 800ccb2:	051b      	lsls	r3, r3, #20
 800ccb4:	429d      	cmp	r5, r3
 800ccb6:	d1bb      	bne.n	800cc30 <_strtod_l+0x9f0>
 800ccb8:	4630      	mov	r0, r6
 800ccba:	4639      	mov	r1, r7
 800ccbc:	f7f4 f86c 	bl	8000d98 <__aeabi_d2lz>
 800ccc0:	f7f3 fc8c 	bl	80005dc <__aeabi_l2d>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	4630      	mov	r0, r6
 800ccca:	4639      	mov	r1, r7
 800cccc:	f7f3 fafc 	bl	80002c8 <__aeabi_dsub>
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ccd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ccdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccde:	ea46 060a 	orr.w	r6, r6, sl
 800cce2:	431e      	orrs	r6, r3
 800cce4:	d06f      	beq.n	800cdc6 <_strtod_l+0xb86>
 800cce6:	a30e      	add	r3, pc, #56	@ (adr r3, 800cd20 <_strtod_l+0xae0>)
 800cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccec:	f7f3 ff16 	bl	8000b1c <__aeabi_dcmplt>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	f47f accf 	bne.w	800c694 <_strtod_l+0x454>
 800ccf6:	a30c      	add	r3, pc, #48	@ (adr r3, 800cd28 <_strtod_l+0xae8>)
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd00:	f7f3 ff2a 	bl	8000b58 <__aeabi_dcmpgt>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d093      	beq.n	800cc30 <_strtod_l+0x9f0>
 800cd08:	e4c4      	b.n	800c694 <_strtod_l+0x454>
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w
 800cd10:	00000000 	.word	0x00000000
 800cd14:	bff00000 	.word	0xbff00000
 800cd18:	00000000 	.word	0x00000000
 800cd1c:	3ff00000 	.word	0x3ff00000
 800cd20:	94a03595 	.word	0x94a03595
 800cd24:	3fdfffff 	.word	0x3fdfffff
 800cd28:	35afe535 	.word	0x35afe535
 800cd2c:	3fe00000 	.word	0x3fe00000
 800cd30:	000fffff 	.word	0x000fffff
 800cd34:	7ff00000 	.word	0x7ff00000
 800cd38:	7fefffff 	.word	0x7fefffff
 800cd3c:	3ff00000 	.word	0x3ff00000
 800cd40:	3fe00000 	.word	0x3fe00000
 800cd44:	7fe00000 	.word	0x7fe00000
 800cd48:	7c9fffff 	.word	0x7c9fffff
 800cd4c:	9b08      	ldr	r3, [sp, #32]
 800cd4e:	b323      	cbz	r3, 800cd9a <_strtod_l+0xb5a>
 800cd50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cd54:	d821      	bhi.n	800cd9a <_strtod_l+0xb5a>
 800cd56:	a328      	add	r3, pc, #160	@ (adr r3, 800cdf8 <_strtod_l+0xbb8>)
 800cd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	4639      	mov	r1, r7
 800cd60:	f7f3 fee6 	bl	8000b30 <__aeabi_dcmple>
 800cd64:	b1a0      	cbz	r0, 800cd90 <_strtod_l+0xb50>
 800cd66:	4639      	mov	r1, r7
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7f3 ff3d 	bl	8000be8 <__aeabi_d2uiz>
 800cd6e:	2801      	cmp	r0, #1
 800cd70:	bf38      	it	cc
 800cd72:	2001      	movcc	r0, #1
 800cd74:	f7f3 fbe6 	bl	8000544 <__aeabi_ui2d>
 800cd78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	b9fb      	cbnz	r3, 800cdc0 <_strtod_l+0xb80>
 800cd80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd84:	9014      	str	r0, [sp, #80]	@ 0x50
 800cd86:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cd8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cd96:	1b5b      	subs	r3, r3, r5
 800cd98:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cda2:	f001 f9e5 	bl	800e170 <__ulp>
 800cda6:	4650      	mov	r0, sl
 800cda8:	ec53 2b10 	vmov	r2, r3, d0
 800cdac:	4659      	mov	r1, fp
 800cdae:	f7f3 fc43 	bl	8000638 <__aeabi_dmul>
 800cdb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cdb6:	f7f3 fa89 	bl	80002cc <__adddf3>
 800cdba:	4682      	mov	sl, r0
 800cdbc:	468b      	mov	fp, r1
 800cdbe:	e770      	b.n	800cca2 <_strtod_l+0xa62>
 800cdc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cdc4:	e7e0      	b.n	800cd88 <_strtod_l+0xb48>
 800cdc6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce00 <_strtod_l+0xbc0>)
 800cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdcc:	f7f3 fea6 	bl	8000b1c <__aeabi_dcmplt>
 800cdd0:	e798      	b.n	800cd04 <_strtod_l+0xac4>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cdd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdda:	6013      	str	r3, [r2, #0]
 800cddc:	f7ff ba6d 	b.w	800c2ba <_strtod_l+0x7a>
 800cde0:	2a65      	cmp	r2, #101	@ 0x65
 800cde2:	f43f ab66 	beq.w	800c4b2 <_strtod_l+0x272>
 800cde6:	2a45      	cmp	r2, #69	@ 0x45
 800cde8:	f43f ab63 	beq.w	800c4b2 <_strtod_l+0x272>
 800cdec:	2301      	movs	r3, #1
 800cdee:	f7ff bb9e 	b.w	800c52e <_strtod_l+0x2ee>
 800cdf2:	bf00      	nop
 800cdf4:	f3af 8000 	nop.w
 800cdf8:	ffc00000 	.word	0xffc00000
 800cdfc:	41dfffff 	.word	0x41dfffff
 800ce00:	94a03595 	.word	0x94a03595
 800ce04:	3fcfffff 	.word	0x3fcfffff

0800ce08 <strtod>:
 800ce08:	460a      	mov	r2, r1
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	4802      	ldr	r0, [pc, #8]	@ (800ce18 <strtod+0x10>)
 800ce0e:	4b03      	ldr	r3, [pc, #12]	@ (800ce1c <strtod+0x14>)
 800ce10:	6800      	ldr	r0, [r0, #0]
 800ce12:	f7ff ba15 	b.w	800c240 <_strtod_l>
 800ce16:	bf00      	nop
 800ce18:	20000668 	.word	0x20000668
 800ce1c:	200004fc 	.word	0x200004fc

0800ce20 <std>:
 800ce20:	2300      	movs	r3, #0
 800ce22:	b510      	push	{r4, lr}
 800ce24:	4604      	mov	r4, r0
 800ce26:	e9c0 3300 	strd	r3, r3, [r0]
 800ce2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce2e:	6083      	str	r3, [r0, #8]
 800ce30:	8181      	strh	r1, [r0, #12]
 800ce32:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce34:	81c2      	strh	r2, [r0, #14]
 800ce36:	6183      	str	r3, [r0, #24]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	2208      	movs	r2, #8
 800ce3c:	305c      	adds	r0, #92	@ 0x5c
 800ce3e:	f000 f941 	bl	800d0c4 <memset>
 800ce42:	4b0d      	ldr	r3, [pc, #52]	@ (800ce78 <std+0x58>)
 800ce44:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce46:	4b0d      	ldr	r3, [pc, #52]	@ (800ce7c <std+0x5c>)
 800ce48:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce80 <std+0x60>)
 800ce4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce84 <std+0x64>)
 800ce50:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce52:	4b0d      	ldr	r3, [pc, #52]	@ (800ce88 <std+0x68>)
 800ce54:	6224      	str	r4, [r4, #32]
 800ce56:	429c      	cmp	r4, r3
 800ce58:	d006      	beq.n	800ce68 <std+0x48>
 800ce5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce5e:	4294      	cmp	r4, r2
 800ce60:	d002      	beq.n	800ce68 <std+0x48>
 800ce62:	33d0      	adds	r3, #208	@ 0xd0
 800ce64:	429c      	cmp	r4, r3
 800ce66:	d105      	bne.n	800ce74 <std+0x54>
 800ce68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce70:	f000 ba62 	b.w	800d338 <__retarget_lock_init_recursive>
 800ce74:	bd10      	pop	{r4, pc}
 800ce76:	bf00      	nop
 800ce78:	0800cfc9 	.word	0x0800cfc9
 800ce7c:	0800cfeb 	.word	0x0800cfeb
 800ce80:	0800d023 	.word	0x0800d023
 800ce84:	0800d047 	.word	0x0800d047
 800ce88:	20000a00 	.word	0x20000a00

0800ce8c <stdio_exit_handler>:
 800ce8c:	4a02      	ldr	r2, [pc, #8]	@ (800ce98 <stdio_exit_handler+0xc>)
 800ce8e:	4903      	ldr	r1, [pc, #12]	@ (800ce9c <stdio_exit_handler+0x10>)
 800ce90:	4803      	ldr	r0, [pc, #12]	@ (800cea0 <stdio_exit_handler+0x14>)
 800ce92:	f000 b87b 	b.w	800cf8c <_fwalk_sglue>
 800ce96:	bf00      	nop
 800ce98:	200004f0 	.word	0x200004f0
 800ce9c:	0800ed6d 	.word	0x0800ed6d
 800cea0:	2000066c 	.word	0x2000066c

0800cea4 <cleanup_stdio>:
 800cea4:	6841      	ldr	r1, [r0, #4]
 800cea6:	4b0c      	ldr	r3, [pc, #48]	@ (800ced8 <cleanup_stdio+0x34>)
 800cea8:	4299      	cmp	r1, r3
 800ceaa:	b510      	push	{r4, lr}
 800ceac:	4604      	mov	r4, r0
 800ceae:	d001      	beq.n	800ceb4 <cleanup_stdio+0x10>
 800ceb0:	f001 ff5c 	bl	800ed6c <_fflush_r>
 800ceb4:	68a1      	ldr	r1, [r4, #8]
 800ceb6:	4b09      	ldr	r3, [pc, #36]	@ (800cedc <cleanup_stdio+0x38>)
 800ceb8:	4299      	cmp	r1, r3
 800ceba:	d002      	beq.n	800cec2 <cleanup_stdio+0x1e>
 800cebc:	4620      	mov	r0, r4
 800cebe:	f001 ff55 	bl	800ed6c <_fflush_r>
 800cec2:	68e1      	ldr	r1, [r4, #12]
 800cec4:	4b06      	ldr	r3, [pc, #24]	@ (800cee0 <cleanup_stdio+0x3c>)
 800cec6:	4299      	cmp	r1, r3
 800cec8:	d004      	beq.n	800ced4 <cleanup_stdio+0x30>
 800ceca:	4620      	mov	r0, r4
 800cecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ced0:	f001 bf4c 	b.w	800ed6c <_fflush_r>
 800ced4:	bd10      	pop	{r4, pc}
 800ced6:	bf00      	nop
 800ced8:	20000a00 	.word	0x20000a00
 800cedc:	20000a68 	.word	0x20000a68
 800cee0:	20000ad0 	.word	0x20000ad0

0800cee4 <global_stdio_init.part.0>:
 800cee4:	b510      	push	{r4, lr}
 800cee6:	4b0b      	ldr	r3, [pc, #44]	@ (800cf14 <global_stdio_init.part.0+0x30>)
 800cee8:	4c0b      	ldr	r4, [pc, #44]	@ (800cf18 <global_stdio_init.part.0+0x34>)
 800ceea:	4a0c      	ldr	r2, [pc, #48]	@ (800cf1c <global_stdio_init.part.0+0x38>)
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	4620      	mov	r0, r4
 800cef0:	2200      	movs	r2, #0
 800cef2:	2104      	movs	r1, #4
 800cef4:	f7ff ff94 	bl	800ce20 <std>
 800cef8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cefc:	2201      	movs	r2, #1
 800cefe:	2109      	movs	r1, #9
 800cf00:	f7ff ff8e 	bl	800ce20 <std>
 800cf04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf08:	2202      	movs	r2, #2
 800cf0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf0e:	2112      	movs	r1, #18
 800cf10:	f7ff bf86 	b.w	800ce20 <std>
 800cf14:	20000b38 	.word	0x20000b38
 800cf18:	20000a00 	.word	0x20000a00
 800cf1c:	0800ce8d 	.word	0x0800ce8d

0800cf20 <__sfp_lock_acquire>:
 800cf20:	4801      	ldr	r0, [pc, #4]	@ (800cf28 <__sfp_lock_acquire+0x8>)
 800cf22:	f000 ba0a 	b.w	800d33a <__retarget_lock_acquire_recursive>
 800cf26:	bf00      	nop
 800cf28:	20000b41 	.word	0x20000b41

0800cf2c <__sfp_lock_release>:
 800cf2c:	4801      	ldr	r0, [pc, #4]	@ (800cf34 <__sfp_lock_release+0x8>)
 800cf2e:	f000 ba05 	b.w	800d33c <__retarget_lock_release_recursive>
 800cf32:	bf00      	nop
 800cf34:	20000b41 	.word	0x20000b41

0800cf38 <__sinit>:
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	f7ff fff0 	bl	800cf20 <__sfp_lock_acquire>
 800cf40:	6a23      	ldr	r3, [r4, #32]
 800cf42:	b11b      	cbz	r3, 800cf4c <__sinit+0x14>
 800cf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf48:	f7ff bff0 	b.w	800cf2c <__sfp_lock_release>
 800cf4c:	4b04      	ldr	r3, [pc, #16]	@ (800cf60 <__sinit+0x28>)
 800cf4e:	6223      	str	r3, [r4, #32]
 800cf50:	4b04      	ldr	r3, [pc, #16]	@ (800cf64 <__sinit+0x2c>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1f5      	bne.n	800cf44 <__sinit+0xc>
 800cf58:	f7ff ffc4 	bl	800cee4 <global_stdio_init.part.0>
 800cf5c:	e7f2      	b.n	800cf44 <__sinit+0xc>
 800cf5e:	bf00      	nop
 800cf60:	0800cea5 	.word	0x0800cea5
 800cf64:	20000b38 	.word	0x20000b38

0800cf68 <fiprintf>:
 800cf68:	b40e      	push	{r1, r2, r3}
 800cf6a:	b503      	push	{r0, r1, lr}
 800cf6c:	4601      	mov	r1, r0
 800cf6e:	ab03      	add	r3, sp, #12
 800cf70:	4805      	ldr	r0, [pc, #20]	@ (800cf88 <fiprintf+0x20>)
 800cf72:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf76:	6800      	ldr	r0, [r0, #0]
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	f001 fbcd 	bl	800e718 <_vfiprintf_r>
 800cf7e:	b002      	add	sp, #8
 800cf80:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf84:	b003      	add	sp, #12
 800cf86:	4770      	bx	lr
 800cf88:	20000668 	.word	0x20000668

0800cf8c <_fwalk_sglue>:
 800cf8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf90:	4607      	mov	r7, r0
 800cf92:	4688      	mov	r8, r1
 800cf94:	4614      	mov	r4, r2
 800cf96:	2600      	movs	r6, #0
 800cf98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf9c:	f1b9 0901 	subs.w	r9, r9, #1
 800cfa0:	d505      	bpl.n	800cfae <_fwalk_sglue+0x22>
 800cfa2:	6824      	ldr	r4, [r4, #0]
 800cfa4:	2c00      	cmp	r4, #0
 800cfa6:	d1f7      	bne.n	800cf98 <_fwalk_sglue+0xc>
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfae:	89ab      	ldrh	r3, [r5, #12]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d907      	bls.n	800cfc4 <_fwalk_sglue+0x38>
 800cfb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	d003      	beq.n	800cfc4 <_fwalk_sglue+0x38>
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	47c0      	blx	r8
 800cfc2:	4306      	orrs	r6, r0
 800cfc4:	3568      	adds	r5, #104	@ 0x68
 800cfc6:	e7e9      	b.n	800cf9c <_fwalk_sglue+0x10>

0800cfc8 <__sread>:
 800cfc8:	b510      	push	{r4, lr}
 800cfca:	460c      	mov	r4, r1
 800cfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd0:	f000 f940 	bl	800d254 <_read_r>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	bfab      	itete	ge
 800cfd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cfda:	89a3      	ldrhlt	r3, [r4, #12]
 800cfdc:	181b      	addge	r3, r3, r0
 800cfde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cfe2:	bfac      	ite	ge
 800cfe4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cfe6:	81a3      	strhlt	r3, [r4, #12]
 800cfe8:	bd10      	pop	{r4, pc}

0800cfea <__swrite>:
 800cfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfee:	461f      	mov	r7, r3
 800cff0:	898b      	ldrh	r3, [r1, #12]
 800cff2:	05db      	lsls	r3, r3, #23
 800cff4:	4605      	mov	r5, r0
 800cff6:	460c      	mov	r4, r1
 800cff8:	4616      	mov	r6, r2
 800cffa:	d505      	bpl.n	800d008 <__swrite+0x1e>
 800cffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d000:	2302      	movs	r3, #2
 800d002:	2200      	movs	r2, #0
 800d004:	f000 f914 	bl	800d230 <_lseek_r>
 800d008:	89a3      	ldrh	r3, [r4, #12]
 800d00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d00e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d012:	81a3      	strh	r3, [r4, #12]
 800d014:	4632      	mov	r2, r6
 800d016:	463b      	mov	r3, r7
 800d018:	4628      	mov	r0, r5
 800d01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d01e:	f000 b94f 	b.w	800d2c0 <_write_r>

0800d022 <__sseek>:
 800d022:	b510      	push	{r4, lr}
 800d024:	460c      	mov	r4, r1
 800d026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d02a:	f000 f901 	bl	800d230 <_lseek_r>
 800d02e:	1c43      	adds	r3, r0, #1
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	bf15      	itete	ne
 800d034:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d036:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d03a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d03e:	81a3      	strheq	r3, [r4, #12]
 800d040:	bf18      	it	ne
 800d042:	81a3      	strhne	r3, [r4, #12]
 800d044:	bd10      	pop	{r4, pc}

0800d046 <__sclose>:
 800d046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04a:	f000 b8e1 	b.w	800d210 <_close_r>
	...

0800d050 <_vsiprintf_r>:
 800d050:	b500      	push	{lr}
 800d052:	b09b      	sub	sp, #108	@ 0x6c
 800d054:	9100      	str	r1, [sp, #0]
 800d056:	9104      	str	r1, [sp, #16]
 800d058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d05c:	9105      	str	r1, [sp, #20]
 800d05e:	9102      	str	r1, [sp, #8]
 800d060:	4905      	ldr	r1, [pc, #20]	@ (800d078 <_vsiprintf_r+0x28>)
 800d062:	9103      	str	r1, [sp, #12]
 800d064:	4669      	mov	r1, sp
 800d066:	f001 fa31 	bl	800e4cc <_svfiprintf_r>
 800d06a:	9b00      	ldr	r3, [sp, #0]
 800d06c:	2200      	movs	r2, #0
 800d06e:	701a      	strb	r2, [r3, #0]
 800d070:	b01b      	add	sp, #108	@ 0x6c
 800d072:	f85d fb04 	ldr.w	pc, [sp], #4
 800d076:	bf00      	nop
 800d078:	ffff0208 	.word	0xffff0208

0800d07c <vsiprintf>:
 800d07c:	4613      	mov	r3, r2
 800d07e:	460a      	mov	r2, r1
 800d080:	4601      	mov	r1, r0
 800d082:	4802      	ldr	r0, [pc, #8]	@ (800d08c <vsiprintf+0x10>)
 800d084:	6800      	ldr	r0, [r0, #0]
 800d086:	f7ff bfe3 	b.w	800d050 <_vsiprintf_r>
 800d08a:	bf00      	nop
 800d08c:	20000668 	.word	0x20000668

0800d090 <memmove>:
 800d090:	4288      	cmp	r0, r1
 800d092:	b510      	push	{r4, lr}
 800d094:	eb01 0402 	add.w	r4, r1, r2
 800d098:	d902      	bls.n	800d0a0 <memmove+0x10>
 800d09a:	4284      	cmp	r4, r0
 800d09c:	4623      	mov	r3, r4
 800d09e:	d807      	bhi.n	800d0b0 <memmove+0x20>
 800d0a0:	1e43      	subs	r3, r0, #1
 800d0a2:	42a1      	cmp	r1, r4
 800d0a4:	d008      	beq.n	800d0b8 <memmove+0x28>
 800d0a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0ae:	e7f8      	b.n	800d0a2 <memmove+0x12>
 800d0b0:	4402      	add	r2, r0
 800d0b2:	4601      	mov	r1, r0
 800d0b4:	428a      	cmp	r2, r1
 800d0b6:	d100      	bne.n	800d0ba <memmove+0x2a>
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0c2:	e7f7      	b.n	800d0b4 <memmove+0x24>

0800d0c4 <memset>:
 800d0c4:	4402      	add	r2, r0
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d100      	bne.n	800d0ce <memset+0xa>
 800d0cc:	4770      	bx	lr
 800d0ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d0d2:	e7f9      	b.n	800d0c8 <memset+0x4>

0800d0d4 <strncmp>:
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	b16a      	cbz	r2, 800d0f4 <strncmp+0x20>
 800d0d8:	3901      	subs	r1, #1
 800d0da:	1884      	adds	r4, r0, r2
 800d0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d103      	bne.n	800d0f0 <strncmp+0x1c>
 800d0e8:	42a0      	cmp	r0, r4
 800d0ea:	d001      	beq.n	800d0f0 <strncmp+0x1c>
 800d0ec:	2a00      	cmp	r2, #0
 800d0ee:	d1f5      	bne.n	800d0dc <strncmp+0x8>
 800d0f0:	1ad0      	subs	r0, r2, r3
 800d0f2:	bd10      	pop	{r4, pc}
 800d0f4:	4610      	mov	r0, r2
 800d0f6:	e7fc      	b.n	800d0f2 <strncmp+0x1e>

0800d0f8 <strtok>:
 800d0f8:	4b16      	ldr	r3, [pc, #88]	@ (800d154 <strtok+0x5c>)
 800d0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fe:	681f      	ldr	r7, [r3, #0]
 800d100:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d102:	4605      	mov	r5, r0
 800d104:	460e      	mov	r6, r1
 800d106:	b9ec      	cbnz	r4, 800d144 <strtok+0x4c>
 800d108:	2050      	movs	r0, #80	@ 0x50
 800d10a:	f7fe ff8f 	bl	800c02c <malloc>
 800d10e:	4602      	mov	r2, r0
 800d110:	6478      	str	r0, [r7, #68]	@ 0x44
 800d112:	b920      	cbnz	r0, 800d11e <strtok+0x26>
 800d114:	4b10      	ldr	r3, [pc, #64]	@ (800d158 <strtok+0x60>)
 800d116:	4811      	ldr	r0, [pc, #68]	@ (800d15c <strtok+0x64>)
 800d118:	215b      	movs	r1, #91	@ 0x5b
 800d11a:	f7fe ff4d 	bl	800bfb8 <__assert_func>
 800d11e:	e9c0 4400 	strd	r4, r4, [r0]
 800d122:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d126:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d12a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d12e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d132:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d136:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d13a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d13e:	6184      	str	r4, [r0, #24]
 800d140:	7704      	strb	r4, [r0, #28]
 800d142:	6244      	str	r4, [r0, #36]	@ 0x24
 800d144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d146:	4631      	mov	r1, r6
 800d148:	4628      	mov	r0, r5
 800d14a:	2301      	movs	r3, #1
 800d14c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d150:	f000 b806 	b.w	800d160 <__strtok_r>
 800d154:	20000668 	.word	0x20000668
 800d158:	080134e9 	.word	0x080134e9
 800d15c:	08013500 	.word	0x08013500

0800d160 <__strtok_r>:
 800d160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d162:	4604      	mov	r4, r0
 800d164:	b908      	cbnz	r0, 800d16a <__strtok_r+0xa>
 800d166:	6814      	ldr	r4, [r2, #0]
 800d168:	b144      	cbz	r4, 800d17c <__strtok_r+0x1c>
 800d16a:	4620      	mov	r0, r4
 800d16c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d170:	460f      	mov	r7, r1
 800d172:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d176:	b91e      	cbnz	r6, 800d180 <__strtok_r+0x20>
 800d178:	b965      	cbnz	r5, 800d194 <__strtok_r+0x34>
 800d17a:	6015      	str	r5, [r2, #0]
 800d17c:	2000      	movs	r0, #0
 800d17e:	e005      	b.n	800d18c <__strtok_r+0x2c>
 800d180:	42b5      	cmp	r5, r6
 800d182:	d1f6      	bne.n	800d172 <__strtok_r+0x12>
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1f0      	bne.n	800d16a <__strtok_r+0xa>
 800d188:	6014      	str	r4, [r2, #0]
 800d18a:	7003      	strb	r3, [r0, #0]
 800d18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d18e:	461c      	mov	r4, r3
 800d190:	e00c      	b.n	800d1ac <__strtok_r+0x4c>
 800d192:	b915      	cbnz	r5, 800d19a <__strtok_r+0x3a>
 800d194:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d198:	460e      	mov	r6, r1
 800d19a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d19e:	42ab      	cmp	r3, r5
 800d1a0:	d1f7      	bne.n	800d192 <__strtok_r+0x32>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d0f3      	beq.n	800d18e <__strtok_r+0x2e>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d1ac:	6014      	str	r4, [r2, #0]
 800d1ae:	e7ed      	b.n	800d18c <__strtok_r+0x2c>

0800d1b0 <_raise_r>:
 800d1b0:	291f      	cmp	r1, #31
 800d1b2:	b538      	push	{r3, r4, r5, lr}
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	d904      	bls.n	800d1c4 <_raise_r+0x14>
 800d1ba:	2316      	movs	r3, #22
 800d1bc:	6003      	str	r3, [r0, #0]
 800d1be:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1c6:	b112      	cbz	r2, 800d1ce <_raise_r+0x1e>
 800d1c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1cc:	b94b      	cbnz	r3, 800d1e2 <_raise_r+0x32>
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	f000 f864 	bl	800d29c <_getpid_r>
 800d1d4:	4622      	mov	r2, r4
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	4628      	mov	r0, r5
 800d1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1de:	f000 b84b 	b.w	800d278 <_kill_r>
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d00a      	beq.n	800d1fc <_raise_r+0x4c>
 800d1e6:	1c59      	adds	r1, r3, #1
 800d1e8:	d103      	bne.n	800d1f2 <_raise_r+0x42>
 800d1ea:	2316      	movs	r3, #22
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	2001      	movs	r0, #1
 800d1f0:	e7e7      	b.n	800d1c2 <_raise_r+0x12>
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	4798      	blx	r3
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e7e0      	b.n	800d1c2 <_raise_r+0x12>

0800d200 <raise>:
 800d200:	4b02      	ldr	r3, [pc, #8]	@ (800d20c <raise+0xc>)
 800d202:	4601      	mov	r1, r0
 800d204:	6818      	ldr	r0, [r3, #0]
 800d206:	f7ff bfd3 	b.w	800d1b0 <_raise_r>
 800d20a:	bf00      	nop
 800d20c:	20000668 	.word	0x20000668

0800d210 <_close_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d06      	ldr	r5, [pc, #24]	@ (800d22c <_close_r+0x1c>)
 800d214:	2300      	movs	r3, #0
 800d216:	4604      	mov	r4, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	602b      	str	r3, [r5, #0]
 800d21c:	f7f8 f963 	bl	80054e6 <_close>
 800d220:	1c43      	adds	r3, r0, #1
 800d222:	d102      	bne.n	800d22a <_close_r+0x1a>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	b103      	cbz	r3, 800d22a <_close_r+0x1a>
 800d228:	6023      	str	r3, [r4, #0]
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	20000b3c 	.word	0x20000b3c

0800d230 <_lseek_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4d07      	ldr	r5, [pc, #28]	@ (800d250 <_lseek_r+0x20>)
 800d234:	4604      	mov	r4, r0
 800d236:	4608      	mov	r0, r1
 800d238:	4611      	mov	r1, r2
 800d23a:	2200      	movs	r2, #0
 800d23c:	602a      	str	r2, [r5, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	f7f8 f978 	bl	8005534 <_lseek>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d102      	bne.n	800d24e <_lseek_r+0x1e>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	b103      	cbz	r3, 800d24e <_lseek_r+0x1e>
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	20000b3c 	.word	0x20000b3c

0800d254 <_read_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	4d07      	ldr	r5, [pc, #28]	@ (800d274 <_read_r+0x20>)
 800d258:	4604      	mov	r4, r0
 800d25a:	4608      	mov	r0, r1
 800d25c:	4611      	mov	r1, r2
 800d25e:	2200      	movs	r2, #0
 800d260:	602a      	str	r2, [r5, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	f7f8 f906 	bl	8005474 <_read>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d102      	bne.n	800d272 <_read_r+0x1e>
 800d26c:	682b      	ldr	r3, [r5, #0]
 800d26e:	b103      	cbz	r3, 800d272 <_read_r+0x1e>
 800d270:	6023      	str	r3, [r4, #0]
 800d272:	bd38      	pop	{r3, r4, r5, pc}
 800d274:	20000b3c 	.word	0x20000b3c

0800d278 <_kill_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	4d07      	ldr	r5, [pc, #28]	@ (800d298 <_kill_r+0x20>)
 800d27c:	2300      	movs	r3, #0
 800d27e:	4604      	mov	r4, r0
 800d280:	4608      	mov	r0, r1
 800d282:	4611      	mov	r1, r2
 800d284:	602b      	str	r3, [r5, #0]
 800d286:	f7f8 f8da 	bl	800543e <_kill>
 800d28a:	1c43      	adds	r3, r0, #1
 800d28c:	d102      	bne.n	800d294 <_kill_r+0x1c>
 800d28e:	682b      	ldr	r3, [r5, #0]
 800d290:	b103      	cbz	r3, 800d294 <_kill_r+0x1c>
 800d292:	6023      	str	r3, [r4, #0]
 800d294:	bd38      	pop	{r3, r4, r5, pc}
 800d296:	bf00      	nop
 800d298:	20000b3c 	.word	0x20000b3c

0800d29c <_getpid_r>:
 800d29c:	f7f8 b8c7 	b.w	800542e <_getpid>

0800d2a0 <_sbrk_r>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4d06      	ldr	r5, [pc, #24]	@ (800d2bc <_sbrk_r+0x1c>)
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	4608      	mov	r0, r1
 800d2aa:	602b      	str	r3, [r5, #0]
 800d2ac:	f7f8 f950 	bl	8005550 <_sbrk>
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	d102      	bne.n	800d2ba <_sbrk_r+0x1a>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	b103      	cbz	r3, 800d2ba <_sbrk_r+0x1a>
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	bd38      	pop	{r3, r4, r5, pc}
 800d2bc:	20000b3c 	.word	0x20000b3c

0800d2c0 <_write_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4d07      	ldr	r5, [pc, #28]	@ (800d2e0 <_write_r+0x20>)
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	4608      	mov	r0, r1
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	602a      	str	r2, [r5, #0]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	f7f8 f8ed 	bl	80054ae <_write>
 800d2d4:	1c43      	adds	r3, r0, #1
 800d2d6:	d102      	bne.n	800d2de <_write_r+0x1e>
 800d2d8:	682b      	ldr	r3, [r5, #0]
 800d2da:	b103      	cbz	r3, 800d2de <_write_r+0x1e>
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	bd38      	pop	{r3, r4, r5, pc}
 800d2e0:	20000b3c 	.word	0x20000b3c

0800d2e4 <__errno>:
 800d2e4:	4b01      	ldr	r3, [pc, #4]	@ (800d2ec <__errno+0x8>)
 800d2e6:	6818      	ldr	r0, [r3, #0]
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	20000668 	.word	0x20000668

0800d2f0 <__libc_init_array>:
 800d2f0:	b570      	push	{r4, r5, r6, lr}
 800d2f2:	4d0d      	ldr	r5, [pc, #52]	@ (800d328 <__libc_init_array+0x38>)
 800d2f4:	4c0d      	ldr	r4, [pc, #52]	@ (800d32c <__libc_init_array+0x3c>)
 800d2f6:	1b64      	subs	r4, r4, r5
 800d2f8:	10a4      	asrs	r4, r4, #2
 800d2fa:	2600      	movs	r6, #0
 800d2fc:	42a6      	cmp	r6, r4
 800d2fe:	d109      	bne.n	800d314 <__libc_init_array+0x24>
 800d300:	4d0b      	ldr	r5, [pc, #44]	@ (800d330 <__libc_init_array+0x40>)
 800d302:	4c0c      	ldr	r4, [pc, #48]	@ (800d334 <__libc_init_array+0x44>)
 800d304:	f001 fe72 	bl	800efec <_init>
 800d308:	1b64      	subs	r4, r4, r5
 800d30a:	10a4      	asrs	r4, r4, #2
 800d30c:	2600      	movs	r6, #0
 800d30e:	42a6      	cmp	r6, r4
 800d310:	d105      	bne.n	800d31e <__libc_init_array+0x2e>
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	f855 3b04 	ldr.w	r3, [r5], #4
 800d318:	4798      	blx	r3
 800d31a:	3601      	adds	r6, #1
 800d31c:	e7ee      	b.n	800d2fc <__libc_init_array+0xc>
 800d31e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d322:	4798      	blx	r3
 800d324:	3601      	adds	r6, #1
 800d326:	e7f2      	b.n	800d30e <__libc_init_array+0x1e>
 800d328:	08013764 	.word	0x08013764
 800d32c:	08013764 	.word	0x08013764
 800d330:	08013764 	.word	0x08013764
 800d334:	08013770 	.word	0x08013770

0800d338 <__retarget_lock_init_recursive>:
 800d338:	4770      	bx	lr

0800d33a <__retarget_lock_acquire_recursive>:
 800d33a:	4770      	bx	lr

0800d33c <__retarget_lock_release_recursive>:
 800d33c:	4770      	bx	lr

0800d33e <memcpy>:
 800d33e:	440a      	add	r2, r1
 800d340:	4291      	cmp	r1, r2
 800d342:	f100 33ff 	add.w	r3, r0, #4294967295
 800d346:	d100      	bne.n	800d34a <memcpy+0xc>
 800d348:	4770      	bx	lr
 800d34a:	b510      	push	{r4, lr}
 800d34c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d350:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d354:	4291      	cmp	r1, r2
 800d356:	d1f9      	bne.n	800d34c <memcpy+0xe>
 800d358:	bd10      	pop	{r4, pc}
	...

0800d35c <_free_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4605      	mov	r5, r0
 800d360:	2900      	cmp	r1, #0
 800d362:	d041      	beq.n	800d3e8 <_free_r+0x8c>
 800d364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d368:	1f0c      	subs	r4, r1, #4
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bfb8      	it	lt
 800d36e:	18e4      	addlt	r4, r4, r3
 800d370:	f7fe ff0e 	bl	800c190 <__malloc_lock>
 800d374:	4a1d      	ldr	r2, [pc, #116]	@ (800d3ec <_free_r+0x90>)
 800d376:	6813      	ldr	r3, [r2, #0]
 800d378:	b933      	cbnz	r3, 800d388 <_free_r+0x2c>
 800d37a:	6063      	str	r3, [r4, #4]
 800d37c:	6014      	str	r4, [r2, #0]
 800d37e:	4628      	mov	r0, r5
 800d380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d384:	f7fe bf0a 	b.w	800c19c <__malloc_unlock>
 800d388:	42a3      	cmp	r3, r4
 800d38a:	d908      	bls.n	800d39e <_free_r+0x42>
 800d38c:	6820      	ldr	r0, [r4, #0]
 800d38e:	1821      	adds	r1, r4, r0
 800d390:	428b      	cmp	r3, r1
 800d392:	bf01      	itttt	eq
 800d394:	6819      	ldreq	r1, [r3, #0]
 800d396:	685b      	ldreq	r3, [r3, #4]
 800d398:	1809      	addeq	r1, r1, r0
 800d39a:	6021      	streq	r1, [r4, #0]
 800d39c:	e7ed      	b.n	800d37a <_free_r+0x1e>
 800d39e:	461a      	mov	r2, r3
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	b10b      	cbz	r3, 800d3a8 <_free_r+0x4c>
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d9fa      	bls.n	800d39e <_free_r+0x42>
 800d3a8:	6811      	ldr	r1, [r2, #0]
 800d3aa:	1850      	adds	r0, r2, r1
 800d3ac:	42a0      	cmp	r0, r4
 800d3ae:	d10b      	bne.n	800d3c8 <_free_r+0x6c>
 800d3b0:	6820      	ldr	r0, [r4, #0]
 800d3b2:	4401      	add	r1, r0
 800d3b4:	1850      	adds	r0, r2, r1
 800d3b6:	4283      	cmp	r3, r0
 800d3b8:	6011      	str	r1, [r2, #0]
 800d3ba:	d1e0      	bne.n	800d37e <_free_r+0x22>
 800d3bc:	6818      	ldr	r0, [r3, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	6053      	str	r3, [r2, #4]
 800d3c2:	4408      	add	r0, r1
 800d3c4:	6010      	str	r0, [r2, #0]
 800d3c6:	e7da      	b.n	800d37e <_free_r+0x22>
 800d3c8:	d902      	bls.n	800d3d0 <_free_r+0x74>
 800d3ca:	230c      	movs	r3, #12
 800d3cc:	602b      	str	r3, [r5, #0]
 800d3ce:	e7d6      	b.n	800d37e <_free_r+0x22>
 800d3d0:	6820      	ldr	r0, [r4, #0]
 800d3d2:	1821      	adds	r1, r4, r0
 800d3d4:	428b      	cmp	r3, r1
 800d3d6:	bf04      	itt	eq
 800d3d8:	6819      	ldreq	r1, [r3, #0]
 800d3da:	685b      	ldreq	r3, [r3, #4]
 800d3dc:	6063      	str	r3, [r4, #4]
 800d3de:	bf04      	itt	eq
 800d3e0:	1809      	addeq	r1, r1, r0
 800d3e2:	6021      	streq	r1, [r4, #0]
 800d3e4:	6054      	str	r4, [r2, #4]
 800d3e6:	e7ca      	b.n	800d37e <_free_r+0x22>
 800d3e8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ea:	bf00      	nop
 800d3ec:	200009fc 	.word	0x200009fc

0800d3f0 <rshift>:
 800d3f0:	6903      	ldr	r3, [r0, #16]
 800d3f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d3f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d3fe:	f100 0414 	add.w	r4, r0, #20
 800d402:	dd45      	ble.n	800d490 <rshift+0xa0>
 800d404:	f011 011f 	ands.w	r1, r1, #31
 800d408:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d40c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d410:	d10c      	bne.n	800d42c <rshift+0x3c>
 800d412:	f100 0710 	add.w	r7, r0, #16
 800d416:	4629      	mov	r1, r5
 800d418:	42b1      	cmp	r1, r6
 800d41a:	d334      	bcc.n	800d486 <rshift+0x96>
 800d41c:	1a9b      	subs	r3, r3, r2
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	1eea      	subs	r2, r5, #3
 800d422:	4296      	cmp	r6, r2
 800d424:	bf38      	it	cc
 800d426:	2300      	movcc	r3, #0
 800d428:	4423      	add	r3, r4
 800d42a:	e015      	b.n	800d458 <rshift+0x68>
 800d42c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d430:	f1c1 0820 	rsb	r8, r1, #32
 800d434:	40cf      	lsrs	r7, r1
 800d436:	f105 0e04 	add.w	lr, r5, #4
 800d43a:	46a1      	mov	r9, r4
 800d43c:	4576      	cmp	r6, lr
 800d43e:	46f4      	mov	ip, lr
 800d440:	d815      	bhi.n	800d46e <rshift+0x7e>
 800d442:	1a9a      	subs	r2, r3, r2
 800d444:	0092      	lsls	r2, r2, #2
 800d446:	3a04      	subs	r2, #4
 800d448:	3501      	adds	r5, #1
 800d44a:	42ae      	cmp	r6, r5
 800d44c:	bf38      	it	cc
 800d44e:	2200      	movcc	r2, #0
 800d450:	18a3      	adds	r3, r4, r2
 800d452:	50a7      	str	r7, [r4, r2]
 800d454:	b107      	cbz	r7, 800d458 <rshift+0x68>
 800d456:	3304      	adds	r3, #4
 800d458:	1b1a      	subs	r2, r3, r4
 800d45a:	42a3      	cmp	r3, r4
 800d45c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d460:	bf08      	it	eq
 800d462:	2300      	moveq	r3, #0
 800d464:	6102      	str	r2, [r0, #16]
 800d466:	bf08      	it	eq
 800d468:	6143      	streq	r3, [r0, #20]
 800d46a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d46e:	f8dc c000 	ldr.w	ip, [ip]
 800d472:	fa0c fc08 	lsl.w	ip, ip, r8
 800d476:	ea4c 0707 	orr.w	r7, ip, r7
 800d47a:	f849 7b04 	str.w	r7, [r9], #4
 800d47e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d482:	40cf      	lsrs	r7, r1
 800d484:	e7da      	b.n	800d43c <rshift+0x4c>
 800d486:	f851 cb04 	ldr.w	ip, [r1], #4
 800d48a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d48e:	e7c3      	b.n	800d418 <rshift+0x28>
 800d490:	4623      	mov	r3, r4
 800d492:	e7e1      	b.n	800d458 <rshift+0x68>

0800d494 <__hexdig_fun>:
 800d494:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d498:	2b09      	cmp	r3, #9
 800d49a:	d802      	bhi.n	800d4a2 <__hexdig_fun+0xe>
 800d49c:	3820      	subs	r0, #32
 800d49e:	b2c0      	uxtb	r0, r0
 800d4a0:	4770      	bx	lr
 800d4a2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d4a6:	2b05      	cmp	r3, #5
 800d4a8:	d801      	bhi.n	800d4ae <__hexdig_fun+0x1a>
 800d4aa:	3847      	subs	r0, #71	@ 0x47
 800d4ac:	e7f7      	b.n	800d49e <__hexdig_fun+0xa>
 800d4ae:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d4b2:	2b05      	cmp	r3, #5
 800d4b4:	d801      	bhi.n	800d4ba <__hexdig_fun+0x26>
 800d4b6:	3827      	subs	r0, #39	@ 0x27
 800d4b8:	e7f1      	b.n	800d49e <__hexdig_fun+0xa>
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	4770      	bx	lr
	...

0800d4c0 <__gethex>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	b085      	sub	sp, #20
 800d4c6:	468a      	mov	sl, r1
 800d4c8:	9302      	str	r3, [sp, #8]
 800d4ca:	680b      	ldr	r3, [r1, #0]
 800d4cc:	9001      	str	r0, [sp, #4]
 800d4ce:	4690      	mov	r8, r2
 800d4d0:	1c9c      	adds	r4, r3, #2
 800d4d2:	46a1      	mov	r9, r4
 800d4d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d4d8:	2830      	cmp	r0, #48	@ 0x30
 800d4da:	d0fa      	beq.n	800d4d2 <__gethex+0x12>
 800d4dc:	eba9 0303 	sub.w	r3, r9, r3
 800d4e0:	f1a3 0b02 	sub.w	fp, r3, #2
 800d4e4:	f7ff ffd6 	bl	800d494 <__hexdig_fun>
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d168      	bne.n	800d5c0 <__gethex+0x100>
 800d4ee:	49a0      	ldr	r1, [pc, #640]	@ (800d770 <__gethex+0x2b0>)
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	4648      	mov	r0, r9
 800d4f4:	f7ff fdee 	bl	800d0d4 <strncmp>
 800d4f8:	4607      	mov	r7, r0
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d167      	bne.n	800d5ce <__gethex+0x10e>
 800d4fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d502:	4626      	mov	r6, r4
 800d504:	f7ff ffc6 	bl	800d494 <__hexdig_fun>
 800d508:	2800      	cmp	r0, #0
 800d50a:	d062      	beq.n	800d5d2 <__gethex+0x112>
 800d50c:	4623      	mov	r3, r4
 800d50e:	7818      	ldrb	r0, [r3, #0]
 800d510:	2830      	cmp	r0, #48	@ 0x30
 800d512:	4699      	mov	r9, r3
 800d514:	f103 0301 	add.w	r3, r3, #1
 800d518:	d0f9      	beq.n	800d50e <__gethex+0x4e>
 800d51a:	f7ff ffbb 	bl	800d494 <__hexdig_fun>
 800d51e:	fab0 f580 	clz	r5, r0
 800d522:	096d      	lsrs	r5, r5, #5
 800d524:	f04f 0b01 	mov.w	fp, #1
 800d528:	464a      	mov	r2, r9
 800d52a:	4616      	mov	r6, r2
 800d52c:	3201      	adds	r2, #1
 800d52e:	7830      	ldrb	r0, [r6, #0]
 800d530:	f7ff ffb0 	bl	800d494 <__hexdig_fun>
 800d534:	2800      	cmp	r0, #0
 800d536:	d1f8      	bne.n	800d52a <__gethex+0x6a>
 800d538:	498d      	ldr	r1, [pc, #564]	@ (800d770 <__gethex+0x2b0>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	4630      	mov	r0, r6
 800d53e:	f7ff fdc9 	bl	800d0d4 <strncmp>
 800d542:	2800      	cmp	r0, #0
 800d544:	d13f      	bne.n	800d5c6 <__gethex+0x106>
 800d546:	b944      	cbnz	r4, 800d55a <__gethex+0x9a>
 800d548:	1c74      	adds	r4, r6, #1
 800d54a:	4622      	mov	r2, r4
 800d54c:	4616      	mov	r6, r2
 800d54e:	3201      	adds	r2, #1
 800d550:	7830      	ldrb	r0, [r6, #0]
 800d552:	f7ff ff9f 	bl	800d494 <__hexdig_fun>
 800d556:	2800      	cmp	r0, #0
 800d558:	d1f8      	bne.n	800d54c <__gethex+0x8c>
 800d55a:	1ba4      	subs	r4, r4, r6
 800d55c:	00a7      	lsls	r7, r4, #2
 800d55e:	7833      	ldrb	r3, [r6, #0]
 800d560:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d564:	2b50      	cmp	r3, #80	@ 0x50
 800d566:	d13e      	bne.n	800d5e6 <__gethex+0x126>
 800d568:	7873      	ldrb	r3, [r6, #1]
 800d56a:	2b2b      	cmp	r3, #43	@ 0x2b
 800d56c:	d033      	beq.n	800d5d6 <__gethex+0x116>
 800d56e:	2b2d      	cmp	r3, #45	@ 0x2d
 800d570:	d034      	beq.n	800d5dc <__gethex+0x11c>
 800d572:	1c71      	adds	r1, r6, #1
 800d574:	2400      	movs	r4, #0
 800d576:	7808      	ldrb	r0, [r1, #0]
 800d578:	f7ff ff8c 	bl	800d494 <__hexdig_fun>
 800d57c:	1e43      	subs	r3, r0, #1
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2b18      	cmp	r3, #24
 800d582:	d830      	bhi.n	800d5e6 <__gethex+0x126>
 800d584:	f1a0 0210 	sub.w	r2, r0, #16
 800d588:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d58c:	f7ff ff82 	bl	800d494 <__hexdig_fun>
 800d590:	f100 3cff 	add.w	ip, r0, #4294967295
 800d594:	fa5f fc8c 	uxtb.w	ip, ip
 800d598:	f1bc 0f18 	cmp.w	ip, #24
 800d59c:	f04f 030a 	mov.w	r3, #10
 800d5a0:	d91e      	bls.n	800d5e0 <__gethex+0x120>
 800d5a2:	b104      	cbz	r4, 800d5a6 <__gethex+0xe6>
 800d5a4:	4252      	negs	r2, r2
 800d5a6:	4417      	add	r7, r2
 800d5a8:	f8ca 1000 	str.w	r1, [sl]
 800d5ac:	b1ed      	cbz	r5, 800d5ea <__gethex+0x12a>
 800d5ae:	f1bb 0f00 	cmp.w	fp, #0
 800d5b2:	bf0c      	ite	eq
 800d5b4:	2506      	moveq	r5, #6
 800d5b6:	2500      	movne	r5, #0
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	b005      	add	sp, #20
 800d5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c0:	2500      	movs	r5, #0
 800d5c2:	462c      	mov	r4, r5
 800d5c4:	e7b0      	b.n	800d528 <__gethex+0x68>
 800d5c6:	2c00      	cmp	r4, #0
 800d5c8:	d1c7      	bne.n	800d55a <__gethex+0x9a>
 800d5ca:	4627      	mov	r7, r4
 800d5cc:	e7c7      	b.n	800d55e <__gethex+0x9e>
 800d5ce:	464e      	mov	r6, r9
 800d5d0:	462f      	mov	r7, r5
 800d5d2:	2501      	movs	r5, #1
 800d5d4:	e7c3      	b.n	800d55e <__gethex+0x9e>
 800d5d6:	2400      	movs	r4, #0
 800d5d8:	1cb1      	adds	r1, r6, #2
 800d5da:	e7cc      	b.n	800d576 <__gethex+0xb6>
 800d5dc:	2401      	movs	r4, #1
 800d5de:	e7fb      	b.n	800d5d8 <__gethex+0x118>
 800d5e0:	fb03 0002 	mla	r0, r3, r2, r0
 800d5e4:	e7ce      	b.n	800d584 <__gethex+0xc4>
 800d5e6:	4631      	mov	r1, r6
 800d5e8:	e7de      	b.n	800d5a8 <__gethex+0xe8>
 800d5ea:	eba6 0309 	sub.w	r3, r6, r9
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	4629      	mov	r1, r5
 800d5f2:	2b07      	cmp	r3, #7
 800d5f4:	dc0a      	bgt.n	800d60c <__gethex+0x14c>
 800d5f6:	9801      	ldr	r0, [sp, #4]
 800d5f8:	f000 fa46 	bl	800da88 <_Balloc>
 800d5fc:	4604      	mov	r4, r0
 800d5fe:	b940      	cbnz	r0, 800d612 <__gethex+0x152>
 800d600:	4b5c      	ldr	r3, [pc, #368]	@ (800d774 <__gethex+0x2b4>)
 800d602:	4602      	mov	r2, r0
 800d604:	21e4      	movs	r1, #228	@ 0xe4
 800d606:	485c      	ldr	r0, [pc, #368]	@ (800d778 <__gethex+0x2b8>)
 800d608:	f7fe fcd6 	bl	800bfb8 <__assert_func>
 800d60c:	3101      	adds	r1, #1
 800d60e:	105b      	asrs	r3, r3, #1
 800d610:	e7ef      	b.n	800d5f2 <__gethex+0x132>
 800d612:	f100 0a14 	add.w	sl, r0, #20
 800d616:	2300      	movs	r3, #0
 800d618:	4655      	mov	r5, sl
 800d61a:	469b      	mov	fp, r3
 800d61c:	45b1      	cmp	r9, r6
 800d61e:	d337      	bcc.n	800d690 <__gethex+0x1d0>
 800d620:	f845 bb04 	str.w	fp, [r5], #4
 800d624:	eba5 050a 	sub.w	r5, r5, sl
 800d628:	10ad      	asrs	r5, r5, #2
 800d62a:	6125      	str	r5, [r4, #16]
 800d62c:	4658      	mov	r0, fp
 800d62e:	f000 fb1d 	bl	800dc6c <__hi0bits>
 800d632:	016d      	lsls	r5, r5, #5
 800d634:	f8d8 6000 	ldr.w	r6, [r8]
 800d638:	1a2d      	subs	r5, r5, r0
 800d63a:	42b5      	cmp	r5, r6
 800d63c:	dd54      	ble.n	800d6e8 <__gethex+0x228>
 800d63e:	1bad      	subs	r5, r5, r6
 800d640:	4629      	mov	r1, r5
 800d642:	4620      	mov	r0, r4
 800d644:	f000 feb1 	bl	800e3aa <__any_on>
 800d648:	4681      	mov	r9, r0
 800d64a:	b178      	cbz	r0, 800d66c <__gethex+0x1ac>
 800d64c:	1e6b      	subs	r3, r5, #1
 800d64e:	1159      	asrs	r1, r3, #5
 800d650:	f003 021f 	and.w	r2, r3, #31
 800d654:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d658:	f04f 0901 	mov.w	r9, #1
 800d65c:	fa09 f202 	lsl.w	r2, r9, r2
 800d660:	420a      	tst	r2, r1
 800d662:	d003      	beq.n	800d66c <__gethex+0x1ac>
 800d664:	454b      	cmp	r3, r9
 800d666:	dc36      	bgt.n	800d6d6 <__gethex+0x216>
 800d668:	f04f 0902 	mov.w	r9, #2
 800d66c:	4629      	mov	r1, r5
 800d66e:	4620      	mov	r0, r4
 800d670:	f7ff febe 	bl	800d3f0 <rshift>
 800d674:	442f      	add	r7, r5
 800d676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d67a:	42bb      	cmp	r3, r7
 800d67c:	da42      	bge.n	800d704 <__gethex+0x244>
 800d67e:	9801      	ldr	r0, [sp, #4]
 800d680:	4621      	mov	r1, r4
 800d682:	f000 fa41 	bl	800db08 <_Bfree>
 800d686:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d688:	2300      	movs	r3, #0
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	25a3      	movs	r5, #163	@ 0xa3
 800d68e:	e793      	b.n	800d5b8 <__gethex+0xf8>
 800d690:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d694:	2a2e      	cmp	r2, #46	@ 0x2e
 800d696:	d012      	beq.n	800d6be <__gethex+0x1fe>
 800d698:	2b20      	cmp	r3, #32
 800d69a:	d104      	bne.n	800d6a6 <__gethex+0x1e6>
 800d69c:	f845 bb04 	str.w	fp, [r5], #4
 800d6a0:	f04f 0b00 	mov.w	fp, #0
 800d6a4:	465b      	mov	r3, fp
 800d6a6:	7830      	ldrb	r0, [r6, #0]
 800d6a8:	9303      	str	r3, [sp, #12]
 800d6aa:	f7ff fef3 	bl	800d494 <__hexdig_fun>
 800d6ae:	9b03      	ldr	r3, [sp, #12]
 800d6b0:	f000 000f 	and.w	r0, r0, #15
 800d6b4:	4098      	lsls	r0, r3
 800d6b6:	ea4b 0b00 	orr.w	fp, fp, r0
 800d6ba:	3304      	adds	r3, #4
 800d6bc:	e7ae      	b.n	800d61c <__gethex+0x15c>
 800d6be:	45b1      	cmp	r9, r6
 800d6c0:	d8ea      	bhi.n	800d698 <__gethex+0x1d8>
 800d6c2:	492b      	ldr	r1, [pc, #172]	@ (800d770 <__gethex+0x2b0>)
 800d6c4:	9303      	str	r3, [sp, #12]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	f7ff fd03 	bl	800d0d4 <strncmp>
 800d6ce:	9b03      	ldr	r3, [sp, #12]
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	d1e1      	bne.n	800d698 <__gethex+0x1d8>
 800d6d4:	e7a2      	b.n	800d61c <__gethex+0x15c>
 800d6d6:	1ea9      	subs	r1, r5, #2
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f000 fe66 	bl	800e3aa <__any_on>
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d0c2      	beq.n	800d668 <__gethex+0x1a8>
 800d6e2:	f04f 0903 	mov.w	r9, #3
 800d6e6:	e7c1      	b.n	800d66c <__gethex+0x1ac>
 800d6e8:	da09      	bge.n	800d6fe <__gethex+0x23e>
 800d6ea:	1b75      	subs	r5, r6, r5
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	9801      	ldr	r0, [sp, #4]
 800d6f0:	462a      	mov	r2, r5
 800d6f2:	f000 fc21 	bl	800df38 <__lshift>
 800d6f6:	1b7f      	subs	r7, r7, r5
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	f100 0a14 	add.w	sl, r0, #20
 800d6fe:	f04f 0900 	mov.w	r9, #0
 800d702:	e7b8      	b.n	800d676 <__gethex+0x1b6>
 800d704:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d708:	42bd      	cmp	r5, r7
 800d70a:	dd6f      	ble.n	800d7ec <__gethex+0x32c>
 800d70c:	1bed      	subs	r5, r5, r7
 800d70e:	42ae      	cmp	r6, r5
 800d710:	dc34      	bgt.n	800d77c <__gethex+0x2bc>
 800d712:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d716:	2b02      	cmp	r3, #2
 800d718:	d022      	beq.n	800d760 <__gethex+0x2a0>
 800d71a:	2b03      	cmp	r3, #3
 800d71c:	d024      	beq.n	800d768 <__gethex+0x2a8>
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d115      	bne.n	800d74e <__gethex+0x28e>
 800d722:	42ae      	cmp	r6, r5
 800d724:	d113      	bne.n	800d74e <__gethex+0x28e>
 800d726:	2e01      	cmp	r6, #1
 800d728:	d10b      	bne.n	800d742 <__gethex+0x282>
 800d72a:	9a02      	ldr	r2, [sp, #8]
 800d72c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d730:	6013      	str	r3, [r2, #0]
 800d732:	2301      	movs	r3, #1
 800d734:	6123      	str	r3, [r4, #16]
 800d736:	f8ca 3000 	str.w	r3, [sl]
 800d73a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d73c:	2562      	movs	r5, #98	@ 0x62
 800d73e:	601c      	str	r4, [r3, #0]
 800d740:	e73a      	b.n	800d5b8 <__gethex+0xf8>
 800d742:	1e71      	subs	r1, r6, #1
 800d744:	4620      	mov	r0, r4
 800d746:	f000 fe30 	bl	800e3aa <__any_on>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d1ed      	bne.n	800d72a <__gethex+0x26a>
 800d74e:	9801      	ldr	r0, [sp, #4]
 800d750:	4621      	mov	r1, r4
 800d752:	f000 f9d9 	bl	800db08 <_Bfree>
 800d756:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d758:	2300      	movs	r3, #0
 800d75a:	6013      	str	r3, [r2, #0]
 800d75c:	2550      	movs	r5, #80	@ 0x50
 800d75e:	e72b      	b.n	800d5b8 <__gethex+0xf8>
 800d760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1f3      	bne.n	800d74e <__gethex+0x28e>
 800d766:	e7e0      	b.n	800d72a <__gethex+0x26a>
 800d768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1dd      	bne.n	800d72a <__gethex+0x26a>
 800d76e:	e7ee      	b.n	800d74e <__gethex+0x28e>
 800d770:	08013384 	.word	0x08013384
 800d774:	08013562 	.word	0x08013562
 800d778:	08013573 	.word	0x08013573
 800d77c:	1e6f      	subs	r7, r5, #1
 800d77e:	f1b9 0f00 	cmp.w	r9, #0
 800d782:	d130      	bne.n	800d7e6 <__gethex+0x326>
 800d784:	b127      	cbz	r7, 800d790 <__gethex+0x2d0>
 800d786:	4639      	mov	r1, r7
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 fe0e 	bl	800e3aa <__any_on>
 800d78e:	4681      	mov	r9, r0
 800d790:	117a      	asrs	r2, r7, #5
 800d792:	2301      	movs	r3, #1
 800d794:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d798:	f007 071f 	and.w	r7, r7, #31
 800d79c:	40bb      	lsls	r3, r7
 800d79e:	4213      	tst	r3, r2
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	bf18      	it	ne
 800d7a6:	f049 0902 	orrne.w	r9, r9, #2
 800d7aa:	f7ff fe21 	bl	800d3f0 <rshift>
 800d7ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d7b2:	1b76      	subs	r6, r6, r5
 800d7b4:	2502      	movs	r5, #2
 800d7b6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ba:	d047      	beq.n	800d84c <__gethex+0x38c>
 800d7bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d015      	beq.n	800d7f0 <__gethex+0x330>
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	d017      	beq.n	800d7f8 <__gethex+0x338>
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d109      	bne.n	800d7e0 <__gethex+0x320>
 800d7cc:	f019 0f02 	tst.w	r9, #2
 800d7d0:	d006      	beq.n	800d7e0 <__gethex+0x320>
 800d7d2:	f8da 3000 	ldr.w	r3, [sl]
 800d7d6:	ea49 0903 	orr.w	r9, r9, r3
 800d7da:	f019 0f01 	tst.w	r9, #1
 800d7de:	d10e      	bne.n	800d7fe <__gethex+0x33e>
 800d7e0:	f045 0510 	orr.w	r5, r5, #16
 800d7e4:	e032      	b.n	800d84c <__gethex+0x38c>
 800d7e6:	f04f 0901 	mov.w	r9, #1
 800d7ea:	e7d1      	b.n	800d790 <__gethex+0x2d0>
 800d7ec:	2501      	movs	r5, #1
 800d7ee:	e7e2      	b.n	800d7b6 <__gethex+0x2f6>
 800d7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7f2:	f1c3 0301 	rsb	r3, r3, #1
 800d7f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d0f0      	beq.n	800d7e0 <__gethex+0x320>
 800d7fe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d802:	f104 0314 	add.w	r3, r4, #20
 800d806:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d80a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d80e:	f04f 0c00 	mov.w	ip, #0
 800d812:	4618      	mov	r0, r3
 800d814:	f853 2b04 	ldr.w	r2, [r3], #4
 800d818:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d81c:	d01b      	beq.n	800d856 <__gethex+0x396>
 800d81e:	3201      	adds	r2, #1
 800d820:	6002      	str	r2, [r0, #0]
 800d822:	2d02      	cmp	r5, #2
 800d824:	f104 0314 	add.w	r3, r4, #20
 800d828:	d13c      	bne.n	800d8a4 <__gethex+0x3e4>
 800d82a:	f8d8 2000 	ldr.w	r2, [r8]
 800d82e:	3a01      	subs	r2, #1
 800d830:	42b2      	cmp	r2, r6
 800d832:	d109      	bne.n	800d848 <__gethex+0x388>
 800d834:	1171      	asrs	r1, r6, #5
 800d836:	2201      	movs	r2, #1
 800d838:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d83c:	f006 061f 	and.w	r6, r6, #31
 800d840:	fa02 f606 	lsl.w	r6, r2, r6
 800d844:	421e      	tst	r6, r3
 800d846:	d13a      	bne.n	800d8be <__gethex+0x3fe>
 800d848:	f045 0520 	orr.w	r5, r5, #32
 800d84c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d84e:	601c      	str	r4, [r3, #0]
 800d850:	9b02      	ldr	r3, [sp, #8]
 800d852:	601f      	str	r7, [r3, #0]
 800d854:	e6b0      	b.n	800d5b8 <__gethex+0xf8>
 800d856:	4299      	cmp	r1, r3
 800d858:	f843 cc04 	str.w	ip, [r3, #-4]
 800d85c:	d8d9      	bhi.n	800d812 <__gethex+0x352>
 800d85e:	68a3      	ldr	r3, [r4, #8]
 800d860:	459b      	cmp	fp, r3
 800d862:	db17      	blt.n	800d894 <__gethex+0x3d4>
 800d864:	6861      	ldr	r1, [r4, #4]
 800d866:	9801      	ldr	r0, [sp, #4]
 800d868:	3101      	adds	r1, #1
 800d86a:	f000 f90d 	bl	800da88 <_Balloc>
 800d86e:	4681      	mov	r9, r0
 800d870:	b918      	cbnz	r0, 800d87a <__gethex+0x3ba>
 800d872:	4b1a      	ldr	r3, [pc, #104]	@ (800d8dc <__gethex+0x41c>)
 800d874:	4602      	mov	r2, r0
 800d876:	2184      	movs	r1, #132	@ 0x84
 800d878:	e6c5      	b.n	800d606 <__gethex+0x146>
 800d87a:	6922      	ldr	r2, [r4, #16]
 800d87c:	3202      	adds	r2, #2
 800d87e:	f104 010c 	add.w	r1, r4, #12
 800d882:	0092      	lsls	r2, r2, #2
 800d884:	300c      	adds	r0, #12
 800d886:	f7ff fd5a 	bl	800d33e <memcpy>
 800d88a:	4621      	mov	r1, r4
 800d88c:	9801      	ldr	r0, [sp, #4]
 800d88e:	f000 f93b 	bl	800db08 <_Bfree>
 800d892:	464c      	mov	r4, r9
 800d894:	6923      	ldr	r3, [r4, #16]
 800d896:	1c5a      	adds	r2, r3, #1
 800d898:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d89c:	6122      	str	r2, [r4, #16]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	615a      	str	r2, [r3, #20]
 800d8a2:	e7be      	b.n	800d822 <__gethex+0x362>
 800d8a4:	6922      	ldr	r2, [r4, #16]
 800d8a6:	455a      	cmp	r2, fp
 800d8a8:	dd0b      	ble.n	800d8c2 <__gethex+0x402>
 800d8aa:	2101      	movs	r1, #1
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	f7ff fd9f 	bl	800d3f0 <rshift>
 800d8b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8b6:	3701      	adds	r7, #1
 800d8b8:	42bb      	cmp	r3, r7
 800d8ba:	f6ff aee0 	blt.w	800d67e <__gethex+0x1be>
 800d8be:	2501      	movs	r5, #1
 800d8c0:	e7c2      	b.n	800d848 <__gethex+0x388>
 800d8c2:	f016 061f 	ands.w	r6, r6, #31
 800d8c6:	d0fa      	beq.n	800d8be <__gethex+0x3fe>
 800d8c8:	4453      	add	r3, sl
 800d8ca:	f1c6 0620 	rsb	r6, r6, #32
 800d8ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d8d2:	f000 f9cb 	bl	800dc6c <__hi0bits>
 800d8d6:	42b0      	cmp	r0, r6
 800d8d8:	dbe7      	blt.n	800d8aa <__gethex+0x3ea>
 800d8da:	e7f0      	b.n	800d8be <__gethex+0x3fe>
 800d8dc:	08013562 	.word	0x08013562

0800d8e0 <L_shift>:
 800d8e0:	f1c2 0208 	rsb	r2, r2, #8
 800d8e4:	0092      	lsls	r2, r2, #2
 800d8e6:	b570      	push	{r4, r5, r6, lr}
 800d8e8:	f1c2 0620 	rsb	r6, r2, #32
 800d8ec:	6843      	ldr	r3, [r0, #4]
 800d8ee:	6804      	ldr	r4, [r0, #0]
 800d8f0:	fa03 f506 	lsl.w	r5, r3, r6
 800d8f4:	432c      	orrs	r4, r5
 800d8f6:	40d3      	lsrs	r3, r2
 800d8f8:	6004      	str	r4, [r0, #0]
 800d8fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800d8fe:	4288      	cmp	r0, r1
 800d900:	d3f4      	bcc.n	800d8ec <L_shift+0xc>
 800d902:	bd70      	pop	{r4, r5, r6, pc}

0800d904 <__match>:
 800d904:	b530      	push	{r4, r5, lr}
 800d906:	6803      	ldr	r3, [r0, #0]
 800d908:	3301      	adds	r3, #1
 800d90a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d90e:	b914      	cbnz	r4, 800d916 <__match+0x12>
 800d910:	6003      	str	r3, [r0, #0]
 800d912:	2001      	movs	r0, #1
 800d914:	bd30      	pop	{r4, r5, pc}
 800d916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d91a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d91e:	2d19      	cmp	r5, #25
 800d920:	bf98      	it	ls
 800d922:	3220      	addls	r2, #32
 800d924:	42a2      	cmp	r2, r4
 800d926:	d0f0      	beq.n	800d90a <__match+0x6>
 800d928:	2000      	movs	r0, #0
 800d92a:	e7f3      	b.n	800d914 <__match+0x10>

0800d92c <__hexnan>:
 800d92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d930:	680b      	ldr	r3, [r1, #0]
 800d932:	6801      	ldr	r1, [r0, #0]
 800d934:	115e      	asrs	r6, r3, #5
 800d936:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d93a:	f013 031f 	ands.w	r3, r3, #31
 800d93e:	b087      	sub	sp, #28
 800d940:	bf18      	it	ne
 800d942:	3604      	addne	r6, #4
 800d944:	2500      	movs	r5, #0
 800d946:	1f37      	subs	r7, r6, #4
 800d948:	4682      	mov	sl, r0
 800d94a:	4690      	mov	r8, r2
 800d94c:	9301      	str	r3, [sp, #4]
 800d94e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d952:	46b9      	mov	r9, r7
 800d954:	463c      	mov	r4, r7
 800d956:	9502      	str	r5, [sp, #8]
 800d958:	46ab      	mov	fp, r5
 800d95a:	784a      	ldrb	r2, [r1, #1]
 800d95c:	1c4b      	adds	r3, r1, #1
 800d95e:	9303      	str	r3, [sp, #12]
 800d960:	b342      	cbz	r2, 800d9b4 <__hexnan+0x88>
 800d962:	4610      	mov	r0, r2
 800d964:	9105      	str	r1, [sp, #20]
 800d966:	9204      	str	r2, [sp, #16]
 800d968:	f7ff fd94 	bl	800d494 <__hexdig_fun>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d151      	bne.n	800da14 <__hexnan+0xe8>
 800d970:	9a04      	ldr	r2, [sp, #16]
 800d972:	9905      	ldr	r1, [sp, #20]
 800d974:	2a20      	cmp	r2, #32
 800d976:	d818      	bhi.n	800d9aa <__hexnan+0x7e>
 800d978:	9b02      	ldr	r3, [sp, #8]
 800d97a:	459b      	cmp	fp, r3
 800d97c:	dd13      	ble.n	800d9a6 <__hexnan+0x7a>
 800d97e:	454c      	cmp	r4, r9
 800d980:	d206      	bcs.n	800d990 <__hexnan+0x64>
 800d982:	2d07      	cmp	r5, #7
 800d984:	dc04      	bgt.n	800d990 <__hexnan+0x64>
 800d986:	462a      	mov	r2, r5
 800d988:	4649      	mov	r1, r9
 800d98a:	4620      	mov	r0, r4
 800d98c:	f7ff ffa8 	bl	800d8e0 <L_shift>
 800d990:	4544      	cmp	r4, r8
 800d992:	d952      	bls.n	800da3a <__hexnan+0x10e>
 800d994:	2300      	movs	r3, #0
 800d996:	f1a4 0904 	sub.w	r9, r4, #4
 800d99a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d99e:	f8cd b008 	str.w	fp, [sp, #8]
 800d9a2:	464c      	mov	r4, r9
 800d9a4:	461d      	mov	r5, r3
 800d9a6:	9903      	ldr	r1, [sp, #12]
 800d9a8:	e7d7      	b.n	800d95a <__hexnan+0x2e>
 800d9aa:	2a29      	cmp	r2, #41	@ 0x29
 800d9ac:	d157      	bne.n	800da5e <__hexnan+0x132>
 800d9ae:	3102      	adds	r1, #2
 800d9b0:	f8ca 1000 	str.w	r1, [sl]
 800d9b4:	f1bb 0f00 	cmp.w	fp, #0
 800d9b8:	d051      	beq.n	800da5e <__hexnan+0x132>
 800d9ba:	454c      	cmp	r4, r9
 800d9bc:	d206      	bcs.n	800d9cc <__hexnan+0xa0>
 800d9be:	2d07      	cmp	r5, #7
 800d9c0:	dc04      	bgt.n	800d9cc <__hexnan+0xa0>
 800d9c2:	462a      	mov	r2, r5
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f7ff ff8a 	bl	800d8e0 <L_shift>
 800d9cc:	4544      	cmp	r4, r8
 800d9ce:	d936      	bls.n	800da3e <__hexnan+0x112>
 800d9d0:	f1a8 0204 	sub.w	r2, r8, #4
 800d9d4:	4623      	mov	r3, r4
 800d9d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d9da:	f842 1f04 	str.w	r1, [r2, #4]!
 800d9de:	429f      	cmp	r7, r3
 800d9e0:	d2f9      	bcs.n	800d9d6 <__hexnan+0xaa>
 800d9e2:	1b3b      	subs	r3, r7, r4
 800d9e4:	f023 0303 	bic.w	r3, r3, #3
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	3401      	adds	r4, #1
 800d9ec:	3e03      	subs	r6, #3
 800d9ee:	42b4      	cmp	r4, r6
 800d9f0:	bf88      	it	hi
 800d9f2:	2304      	movhi	r3, #4
 800d9f4:	4443      	add	r3, r8
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f843 2b04 	str.w	r2, [r3], #4
 800d9fc:	429f      	cmp	r7, r3
 800d9fe:	d2fb      	bcs.n	800d9f8 <__hexnan+0xcc>
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	b91b      	cbnz	r3, 800da0c <__hexnan+0xe0>
 800da04:	4547      	cmp	r7, r8
 800da06:	d128      	bne.n	800da5a <__hexnan+0x12e>
 800da08:	2301      	movs	r3, #1
 800da0a:	603b      	str	r3, [r7, #0]
 800da0c:	2005      	movs	r0, #5
 800da0e:	b007      	add	sp, #28
 800da10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da14:	3501      	adds	r5, #1
 800da16:	2d08      	cmp	r5, #8
 800da18:	f10b 0b01 	add.w	fp, fp, #1
 800da1c:	dd06      	ble.n	800da2c <__hexnan+0x100>
 800da1e:	4544      	cmp	r4, r8
 800da20:	d9c1      	bls.n	800d9a6 <__hexnan+0x7a>
 800da22:	2300      	movs	r3, #0
 800da24:	f844 3c04 	str.w	r3, [r4, #-4]
 800da28:	2501      	movs	r5, #1
 800da2a:	3c04      	subs	r4, #4
 800da2c:	6822      	ldr	r2, [r4, #0]
 800da2e:	f000 000f 	and.w	r0, r0, #15
 800da32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800da36:	6020      	str	r0, [r4, #0]
 800da38:	e7b5      	b.n	800d9a6 <__hexnan+0x7a>
 800da3a:	2508      	movs	r5, #8
 800da3c:	e7b3      	b.n	800d9a6 <__hexnan+0x7a>
 800da3e:	9b01      	ldr	r3, [sp, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d0dd      	beq.n	800da00 <__hexnan+0xd4>
 800da44:	f1c3 0320 	rsb	r3, r3, #32
 800da48:	f04f 32ff 	mov.w	r2, #4294967295
 800da4c:	40da      	lsrs	r2, r3
 800da4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800da52:	4013      	ands	r3, r2
 800da54:	f846 3c04 	str.w	r3, [r6, #-4]
 800da58:	e7d2      	b.n	800da00 <__hexnan+0xd4>
 800da5a:	3f04      	subs	r7, #4
 800da5c:	e7d0      	b.n	800da00 <__hexnan+0xd4>
 800da5e:	2004      	movs	r0, #4
 800da60:	e7d5      	b.n	800da0e <__hexnan+0xe2>

0800da62 <__ascii_mbtowc>:
 800da62:	b082      	sub	sp, #8
 800da64:	b901      	cbnz	r1, 800da68 <__ascii_mbtowc+0x6>
 800da66:	a901      	add	r1, sp, #4
 800da68:	b142      	cbz	r2, 800da7c <__ascii_mbtowc+0x1a>
 800da6a:	b14b      	cbz	r3, 800da80 <__ascii_mbtowc+0x1e>
 800da6c:	7813      	ldrb	r3, [r2, #0]
 800da6e:	600b      	str	r3, [r1, #0]
 800da70:	7812      	ldrb	r2, [r2, #0]
 800da72:	1e10      	subs	r0, r2, #0
 800da74:	bf18      	it	ne
 800da76:	2001      	movne	r0, #1
 800da78:	b002      	add	sp, #8
 800da7a:	4770      	bx	lr
 800da7c:	4610      	mov	r0, r2
 800da7e:	e7fb      	b.n	800da78 <__ascii_mbtowc+0x16>
 800da80:	f06f 0001 	mvn.w	r0, #1
 800da84:	e7f8      	b.n	800da78 <__ascii_mbtowc+0x16>
	...

0800da88 <_Balloc>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	69c6      	ldr	r6, [r0, #28]
 800da8c:	4604      	mov	r4, r0
 800da8e:	460d      	mov	r5, r1
 800da90:	b976      	cbnz	r6, 800dab0 <_Balloc+0x28>
 800da92:	2010      	movs	r0, #16
 800da94:	f7fe faca 	bl	800c02c <malloc>
 800da98:	4602      	mov	r2, r0
 800da9a:	61e0      	str	r0, [r4, #28]
 800da9c:	b920      	cbnz	r0, 800daa8 <_Balloc+0x20>
 800da9e:	4b18      	ldr	r3, [pc, #96]	@ (800db00 <_Balloc+0x78>)
 800daa0:	4818      	ldr	r0, [pc, #96]	@ (800db04 <_Balloc+0x7c>)
 800daa2:	216b      	movs	r1, #107	@ 0x6b
 800daa4:	f7fe fa88 	bl	800bfb8 <__assert_func>
 800daa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800daac:	6006      	str	r6, [r0, #0]
 800daae:	60c6      	str	r6, [r0, #12]
 800dab0:	69e6      	ldr	r6, [r4, #28]
 800dab2:	68f3      	ldr	r3, [r6, #12]
 800dab4:	b183      	cbz	r3, 800dad8 <_Balloc+0x50>
 800dab6:	69e3      	ldr	r3, [r4, #28]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dabe:	b9b8      	cbnz	r0, 800daf0 <_Balloc+0x68>
 800dac0:	2101      	movs	r1, #1
 800dac2:	fa01 f605 	lsl.w	r6, r1, r5
 800dac6:	1d72      	adds	r2, r6, #5
 800dac8:	0092      	lsls	r2, r2, #2
 800daca:	4620      	mov	r0, r4
 800dacc:	f7fe fa9a 	bl	800c004 <_calloc_r>
 800dad0:	b160      	cbz	r0, 800daec <_Balloc+0x64>
 800dad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dad6:	e00e      	b.n	800daf6 <_Balloc+0x6e>
 800dad8:	2221      	movs	r2, #33	@ 0x21
 800dada:	2104      	movs	r1, #4
 800dadc:	4620      	mov	r0, r4
 800dade:	f7fe fa91 	bl	800c004 <_calloc_r>
 800dae2:	69e3      	ldr	r3, [r4, #28]
 800dae4:	60f0      	str	r0, [r6, #12]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d1e4      	bne.n	800dab6 <_Balloc+0x2e>
 800daec:	2000      	movs	r0, #0
 800daee:	bd70      	pop	{r4, r5, r6, pc}
 800daf0:	6802      	ldr	r2, [r0, #0]
 800daf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800daf6:	2300      	movs	r3, #0
 800daf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dafc:	e7f7      	b.n	800daee <_Balloc+0x66>
 800dafe:	bf00      	nop
 800db00:	080134e9 	.word	0x080134e9
 800db04:	080135d3 	.word	0x080135d3

0800db08 <_Bfree>:
 800db08:	b570      	push	{r4, r5, r6, lr}
 800db0a:	69c6      	ldr	r6, [r0, #28]
 800db0c:	4605      	mov	r5, r0
 800db0e:	460c      	mov	r4, r1
 800db10:	b976      	cbnz	r6, 800db30 <_Bfree+0x28>
 800db12:	2010      	movs	r0, #16
 800db14:	f7fe fa8a 	bl	800c02c <malloc>
 800db18:	4602      	mov	r2, r0
 800db1a:	61e8      	str	r0, [r5, #28]
 800db1c:	b920      	cbnz	r0, 800db28 <_Bfree+0x20>
 800db1e:	4b09      	ldr	r3, [pc, #36]	@ (800db44 <_Bfree+0x3c>)
 800db20:	4809      	ldr	r0, [pc, #36]	@ (800db48 <_Bfree+0x40>)
 800db22:	218f      	movs	r1, #143	@ 0x8f
 800db24:	f7fe fa48 	bl	800bfb8 <__assert_func>
 800db28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db2c:	6006      	str	r6, [r0, #0]
 800db2e:	60c6      	str	r6, [r0, #12]
 800db30:	b13c      	cbz	r4, 800db42 <_Bfree+0x3a>
 800db32:	69eb      	ldr	r3, [r5, #28]
 800db34:	6862      	ldr	r2, [r4, #4]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db3c:	6021      	str	r1, [r4, #0]
 800db3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	080134e9 	.word	0x080134e9
 800db48:	080135d3 	.word	0x080135d3

0800db4c <__multadd>:
 800db4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db50:	690d      	ldr	r5, [r1, #16]
 800db52:	4607      	mov	r7, r0
 800db54:	460c      	mov	r4, r1
 800db56:	461e      	mov	r6, r3
 800db58:	f101 0c14 	add.w	ip, r1, #20
 800db5c:	2000      	movs	r0, #0
 800db5e:	f8dc 3000 	ldr.w	r3, [ip]
 800db62:	b299      	uxth	r1, r3
 800db64:	fb02 6101 	mla	r1, r2, r1, r6
 800db68:	0c1e      	lsrs	r6, r3, #16
 800db6a:	0c0b      	lsrs	r3, r1, #16
 800db6c:	fb02 3306 	mla	r3, r2, r6, r3
 800db70:	b289      	uxth	r1, r1
 800db72:	3001      	adds	r0, #1
 800db74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db78:	4285      	cmp	r5, r0
 800db7a:	f84c 1b04 	str.w	r1, [ip], #4
 800db7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db82:	dcec      	bgt.n	800db5e <__multadd+0x12>
 800db84:	b30e      	cbz	r6, 800dbca <__multadd+0x7e>
 800db86:	68a3      	ldr	r3, [r4, #8]
 800db88:	42ab      	cmp	r3, r5
 800db8a:	dc19      	bgt.n	800dbc0 <__multadd+0x74>
 800db8c:	6861      	ldr	r1, [r4, #4]
 800db8e:	4638      	mov	r0, r7
 800db90:	3101      	adds	r1, #1
 800db92:	f7ff ff79 	bl	800da88 <_Balloc>
 800db96:	4680      	mov	r8, r0
 800db98:	b928      	cbnz	r0, 800dba6 <__multadd+0x5a>
 800db9a:	4602      	mov	r2, r0
 800db9c:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd0 <__multadd+0x84>)
 800db9e:	480d      	ldr	r0, [pc, #52]	@ (800dbd4 <__multadd+0x88>)
 800dba0:	21ba      	movs	r1, #186	@ 0xba
 800dba2:	f7fe fa09 	bl	800bfb8 <__assert_func>
 800dba6:	6922      	ldr	r2, [r4, #16]
 800dba8:	3202      	adds	r2, #2
 800dbaa:	f104 010c 	add.w	r1, r4, #12
 800dbae:	0092      	lsls	r2, r2, #2
 800dbb0:	300c      	adds	r0, #12
 800dbb2:	f7ff fbc4 	bl	800d33e <memcpy>
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	4638      	mov	r0, r7
 800dbba:	f7ff ffa5 	bl	800db08 <_Bfree>
 800dbbe:	4644      	mov	r4, r8
 800dbc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbc4:	3501      	adds	r5, #1
 800dbc6:	615e      	str	r6, [r3, #20]
 800dbc8:	6125      	str	r5, [r4, #16]
 800dbca:	4620      	mov	r0, r4
 800dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd0:	08013562 	.word	0x08013562
 800dbd4:	080135d3 	.word	0x080135d3

0800dbd8 <__s2b>:
 800dbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbdc:	460c      	mov	r4, r1
 800dbde:	4615      	mov	r5, r2
 800dbe0:	461f      	mov	r7, r3
 800dbe2:	2209      	movs	r2, #9
 800dbe4:	3308      	adds	r3, #8
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbec:	2100      	movs	r1, #0
 800dbee:	2201      	movs	r2, #1
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	db09      	blt.n	800dc08 <__s2b+0x30>
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	f7ff ff47 	bl	800da88 <_Balloc>
 800dbfa:	b940      	cbnz	r0, 800dc0e <__s2b+0x36>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	4b19      	ldr	r3, [pc, #100]	@ (800dc64 <__s2b+0x8c>)
 800dc00:	4819      	ldr	r0, [pc, #100]	@ (800dc68 <__s2b+0x90>)
 800dc02:	21d3      	movs	r1, #211	@ 0xd3
 800dc04:	f7fe f9d8 	bl	800bfb8 <__assert_func>
 800dc08:	0052      	lsls	r2, r2, #1
 800dc0a:	3101      	adds	r1, #1
 800dc0c:	e7f0      	b.n	800dbf0 <__s2b+0x18>
 800dc0e:	9b08      	ldr	r3, [sp, #32]
 800dc10:	6143      	str	r3, [r0, #20]
 800dc12:	2d09      	cmp	r5, #9
 800dc14:	f04f 0301 	mov.w	r3, #1
 800dc18:	6103      	str	r3, [r0, #16]
 800dc1a:	dd16      	ble.n	800dc4a <__s2b+0x72>
 800dc1c:	f104 0909 	add.w	r9, r4, #9
 800dc20:	46c8      	mov	r8, r9
 800dc22:	442c      	add	r4, r5
 800dc24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dc28:	4601      	mov	r1, r0
 800dc2a:	3b30      	subs	r3, #48	@ 0x30
 800dc2c:	220a      	movs	r2, #10
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f7ff ff8c 	bl	800db4c <__multadd>
 800dc34:	45a0      	cmp	r8, r4
 800dc36:	d1f5      	bne.n	800dc24 <__s2b+0x4c>
 800dc38:	f1a5 0408 	sub.w	r4, r5, #8
 800dc3c:	444c      	add	r4, r9
 800dc3e:	1b2d      	subs	r5, r5, r4
 800dc40:	1963      	adds	r3, r4, r5
 800dc42:	42bb      	cmp	r3, r7
 800dc44:	db04      	blt.n	800dc50 <__s2b+0x78>
 800dc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc4a:	340a      	adds	r4, #10
 800dc4c:	2509      	movs	r5, #9
 800dc4e:	e7f6      	b.n	800dc3e <__s2b+0x66>
 800dc50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc54:	4601      	mov	r1, r0
 800dc56:	3b30      	subs	r3, #48	@ 0x30
 800dc58:	220a      	movs	r2, #10
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f7ff ff76 	bl	800db4c <__multadd>
 800dc60:	e7ee      	b.n	800dc40 <__s2b+0x68>
 800dc62:	bf00      	nop
 800dc64:	08013562 	.word	0x08013562
 800dc68:	080135d3 	.word	0x080135d3

0800dc6c <__hi0bits>:
 800dc6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dc70:	4603      	mov	r3, r0
 800dc72:	bf36      	itet	cc
 800dc74:	0403      	lslcc	r3, r0, #16
 800dc76:	2000      	movcs	r0, #0
 800dc78:	2010      	movcc	r0, #16
 800dc7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc7e:	bf3c      	itt	cc
 800dc80:	021b      	lslcc	r3, r3, #8
 800dc82:	3008      	addcc	r0, #8
 800dc84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc88:	bf3c      	itt	cc
 800dc8a:	011b      	lslcc	r3, r3, #4
 800dc8c:	3004      	addcc	r0, #4
 800dc8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc92:	bf3c      	itt	cc
 800dc94:	009b      	lslcc	r3, r3, #2
 800dc96:	3002      	addcc	r0, #2
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	db05      	blt.n	800dca8 <__hi0bits+0x3c>
 800dc9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dca0:	f100 0001 	add.w	r0, r0, #1
 800dca4:	bf08      	it	eq
 800dca6:	2020      	moveq	r0, #32
 800dca8:	4770      	bx	lr

0800dcaa <__lo0bits>:
 800dcaa:	6803      	ldr	r3, [r0, #0]
 800dcac:	4602      	mov	r2, r0
 800dcae:	f013 0007 	ands.w	r0, r3, #7
 800dcb2:	d00b      	beq.n	800dccc <__lo0bits+0x22>
 800dcb4:	07d9      	lsls	r1, r3, #31
 800dcb6:	d421      	bmi.n	800dcfc <__lo0bits+0x52>
 800dcb8:	0798      	lsls	r0, r3, #30
 800dcba:	bf49      	itett	mi
 800dcbc:	085b      	lsrmi	r3, r3, #1
 800dcbe:	089b      	lsrpl	r3, r3, #2
 800dcc0:	2001      	movmi	r0, #1
 800dcc2:	6013      	strmi	r3, [r2, #0]
 800dcc4:	bf5c      	itt	pl
 800dcc6:	6013      	strpl	r3, [r2, #0]
 800dcc8:	2002      	movpl	r0, #2
 800dcca:	4770      	bx	lr
 800dccc:	b299      	uxth	r1, r3
 800dcce:	b909      	cbnz	r1, 800dcd4 <__lo0bits+0x2a>
 800dcd0:	0c1b      	lsrs	r3, r3, #16
 800dcd2:	2010      	movs	r0, #16
 800dcd4:	b2d9      	uxtb	r1, r3
 800dcd6:	b909      	cbnz	r1, 800dcdc <__lo0bits+0x32>
 800dcd8:	3008      	adds	r0, #8
 800dcda:	0a1b      	lsrs	r3, r3, #8
 800dcdc:	0719      	lsls	r1, r3, #28
 800dcde:	bf04      	itt	eq
 800dce0:	091b      	lsreq	r3, r3, #4
 800dce2:	3004      	addeq	r0, #4
 800dce4:	0799      	lsls	r1, r3, #30
 800dce6:	bf04      	itt	eq
 800dce8:	089b      	lsreq	r3, r3, #2
 800dcea:	3002      	addeq	r0, #2
 800dcec:	07d9      	lsls	r1, r3, #31
 800dcee:	d403      	bmi.n	800dcf8 <__lo0bits+0x4e>
 800dcf0:	085b      	lsrs	r3, r3, #1
 800dcf2:	f100 0001 	add.w	r0, r0, #1
 800dcf6:	d003      	beq.n	800dd00 <__lo0bits+0x56>
 800dcf8:	6013      	str	r3, [r2, #0]
 800dcfa:	4770      	bx	lr
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	4770      	bx	lr
 800dd00:	2020      	movs	r0, #32
 800dd02:	4770      	bx	lr

0800dd04 <__i2b>:
 800dd04:	b510      	push	{r4, lr}
 800dd06:	460c      	mov	r4, r1
 800dd08:	2101      	movs	r1, #1
 800dd0a:	f7ff febd 	bl	800da88 <_Balloc>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	b928      	cbnz	r0, 800dd1e <__i2b+0x1a>
 800dd12:	4b05      	ldr	r3, [pc, #20]	@ (800dd28 <__i2b+0x24>)
 800dd14:	4805      	ldr	r0, [pc, #20]	@ (800dd2c <__i2b+0x28>)
 800dd16:	f240 1145 	movw	r1, #325	@ 0x145
 800dd1a:	f7fe f94d 	bl	800bfb8 <__assert_func>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	6144      	str	r4, [r0, #20]
 800dd22:	6103      	str	r3, [r0, #16]
 800dd24:	bd10      	pop	{r4, pc}
 800dd26:	bf00      	nop
 800dd28:	08013562 	.word	0x08013562
 800dd2c:	080135d3 	.word	0x080135d3

0800dd30 <__multiply>:
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	4614      	mov	r4, r2
 800dd36:	690a      	ldr	r2, [r1, #16]
 800dd38:	6923      	ldr	r3, [r4, #16]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	bfa8      	it	ge
 800dd3e:	4623      	movge	r3, r4
 800dd40:	460f      	mov	r7, r1
 800dd42:	bfa4      	itt	ge
 800dd44:	460c      	movge	r4, r1
 800dd46:	461f      	movge	r7, r3
 800dd48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dd4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dd50:	68a3      	ldr	r3, [r4, #8]
 800dd52:	6861      	ldr	r1, [r4, #4]
 800dd54:	eb0a 0609 	add.w	r6, sl, r9
 800dd58:	42b3      	cmp	r3, r6
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	bfb8      	it	lt
 800dd5e:	3101      	addlt	r1, #1
 800dd60:	f7ff fe92 	bl	800da88 <_Balloc>
 800dd64:	b930      	cbnz	r0, 800dd74 <__multiply+0x44>
 800dd66:	4602      	mov	r2, r0
 800dd68:	4b44      	ldr	r3, [pc, #272]	@ (800de7c <__multiply+0x14c>)
 800dd6a:	4845      	ldr	r0, [pc, #276]	@ (800de80 <__multiply+0x150>)
 800dd6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dd70:	f7fe f922 	bl	800bfb8 <__assert_func>
 800dd74:	f100 0514 	add.w	r5, r0, #20
 800dd78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd7c:	462b      	mov	r3, r5
 800dd7e:	2200      	movs	r2, #0
 800dd80:	4543      	cmp	r3, r8
 800dd82:	d321      	bcc.n	800ddc8 <__multiply+0x98>
 800dd84:	f107 0114 	add.w	r1, r7, #20
 800dd88:	f104 0214 	add.w	r2, r4, #20
 800dd8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dd90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dd94:	9302      	str	r3, [sp, #8]
 800dd96:	1b13      	subs	r3, r2, r4
 800dd98:	3b15      	subs	r3, #21
 800dd9a:	f023 0303 	bic.w	r3, r3, #3
 800dd9e:	3304      	adds	r3, #4
 800dda0:	f104 0715 	add.w	r7, r4, #21
 800dda4:	42ba      	cmp	r2, r7
 800dda6:	bf38      	it	cc
 800dda8:	2304      	movcc	r3, #4
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	9b02      	ldr	r3, [sp, #8]
 800ddae:	9103      	str	r1, [sp, #12]
 800ddb0:	428b      	cmp	r3, r1
 800ddb2:	d80c      	bhi.n	800ddce <__multiply+0x9e>
 800ddb4:	2e00      	cmp	r6, #0
 800ddb6:	dd03      	ble.n	800ddc0 <__multiply+0x90>
 800ddb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d05b      	beq.n	800de78 <__multiply+0x148>
 800ddc0:	6106      	str	r6, [r0, #16]
 800ddc2:	b005      	add	sp, #20
 800ddc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc8:	f843 2b04 	str.w	r2, [r3], #4
 800ddcc:	e7d8      	b.n	800dd80 <__multiply+0x50>
 800ddce:	f8b1 a000 	ldrh.w	sl, [r1]
 800ddd2:	f1ba 0f00 	cmp.w	sl, #0
 800ddd6:	d024      	beq.n	800de22 <__multiply+0xf2>
 800ddd8:	f104 0e14 	add.w	lr, r4, #20
 800dddc:	46a9      	mov	r9, r5
 800ddde:	f04f 0c00 	mov.w	ip, #0
 800dde2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dde6:	f8d9 3000 	ldr.w	r3, [r9]
 800ddea:	fa1f fb87 	uxth.w	fp, r7
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	fb0a 330b 	mla	r3, sl, fp, r3
 800ddf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ddf8:	f8d9 7000 	ldr.w	r7, [r9]
 800ddfc:	4463      	add	r3, ip
 800ddfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de02:	fb0a c70b 	mla	r7, sl, fp, ip
 800de06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de10:	4572      	cmp	r2, lr
 800de12:	f849 3b04 	str.w	r3, [r9], #4
 800de16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800de1a:	d8e2      	bhi.n	800dde2 <__multiply+0xb2>
 800de1c:	9b01      	ldr	r3, [sp, #4]
 800de1e:	f845 c003 	str.w	ip, [r5, r3]
 800de22:	9b03      	ldr	r3, [sp, #12]
 800de24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800de28:	3104      	adds	r1, #4
 800de2a:	f1b9 0f00 	cmp.w	r9, #0
 800de2e:	d021      	beq.n	800de74 <__multiply+0x144>
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	f104 0c14 	add.w	ip, r4, #20
 800de36:	46ae      	mov	lr, r5
 800de38:	f04f 0a00 	mov.w	sl, #0
 800de3c:	f8bc b000 	ldrh.w	fp, [ip]
 800de40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800de44:	fb09 770b 	mla	r7, r9, fp, r7
 800de48:	4457      	add	r7, sl
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800de50:	f84e 3b04 	str.w	r3, [lr], #4
 800de54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de5c:	f8be 3000 	ldrh.w	r3, [lr]
 800de60:	fb09 330a 	mla	r3, r9, sl, r3
 800de64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800de68:	4562      	cmp	r2, ip
 800de6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de6e:	d8e5      	bhi.n	800de3c <__multiply+0x10c>
 800de70:	9f01      	ldr	r7, [sp, #4]
 800de72:	51eb      	str	r3, [r5, r7]
 800de74:	3504      	adds	r5, #4
 800de76:	e799      	b.n	800ddac <__multiply+0x7c>
 800de78:	3e01      	subs	r6, #1
 800de7a:	e79b      	b.n	800ddb4 <__multiply+0x84>
 800de7c:	08013562 	.word	0x08013562
 800de80:	080135d3 	.word	0x080135d3

0800de84 <__pow5mult>:
 800de84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de88:	4615      	mov	r5, r2
 800de8a:	f012 0203 	ands.w	r2, r2, #3
 800de8e:	4607      	mov	r7, r0
 800de90:	460e      	mov	r6, r1
 800de92:	d007      	beq.n	800dea4 <__pow5mult+0x20>
 800de94:	4c25      	ldr	r4, [pc, #148]	@ (800df2c <__pow5mult+0xa8>)
 800de96:	3a01      	subs	r2, #1
 800de98:	2300      	movs	r3, #0
 800de9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de9e:	f7ff fe55 	bl	800db4c <__multadd>
 800dea2:	4606      	mov	r6, r0
 800dea4:	10ad      	asrs	r5, r5, #2
 800dea6:	d03d      	beq.n	800df24 <__pow5mult+0xa0>
 800dea8:	69fc      	ldr	r4, [r7, #28]
 800deaa:	b97c      	cbnz	r4, 800decc <__pow5mult+0x48>
 800deac:	2010      	movs	r0, #16
 800deae:	f7fe f8bd 	bl	800c02c <malloc>
 800deb2:	4602      	mov	r2, r0
 800deb4:	61f8      	str	r0, [r7, #28]
 800deb6:	b928      	cbnz	r0, 800dec4 <__pow5mult+0x40>
 800deb8:	4b1d      	ldr	r3, [pc, #116]	@ (800df30 <__pow5mult+0xac>)
 800deba:	481e      	ldr	r0, [pc, #120]	@ (800df34 <__pow5mult+0xb0>)
 800debc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dec0:	f7fe f87a 	bl	800bfb8 <__assert_func>
 800dec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dec8:	6004      	str	r4, [r0, #0]
 800deca:	60c4      	str	r4, [r0, #12]
 800decc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ded0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ded4:	b94c      	cbnz	r4, 800deea <__pow5mult+0x66>
 800ded6:	f240 2171 	movw	r1, #625	@ 0x271
 800deda:	4638      	mov	r0, r7
 800dedc:	f7ff ff12 	bl	800dd04 <__i2b>
 800dee0:	2300      	movs	r3, #0
 800dee2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dee6:	4604      	mov	r4, r0
 800dee8:	6003      	str	r3, [r0, #0]
 800deea:	f04f 0900 	mov.w	r9, #0
 800deee:	07eb      	lsls	r3, r5, #31
 800def0:	d50a      	bpl.n	800df08 <__pow5mult+0x84>
 800def2:	4631      	mov	r1, r6
 800def4:	4622      	mov	r2, r4
 800def6:	4638      	mov	r0, r7
 800def8:	f7ff ff1a 	bl	800dd30 <__multiply>
 800defc:	4631      	mov	r1, r6
 800defe:	4680      	mov	r8, r0
 800df00:	4638      	mov	r0, r7
 800df02:	f7ff fe01 	bl	800db08 <_Bfree>
 800df06:	4646      	mov	r6, r8
 800df08:	106d      	asrs	r5, r5, #1
 800df0a:	d00b      	beq.n	800df24 <__pow5mult+0xa0>
 800df0c:	6820      	ldr	r0, [r4, #0]
 800df0e:	b938      	cbnz	r0, 800df20 <__pow5mult+0x9c>
 800df10:	4622      	mov	r2, r4
 800df12:	4621      	mov	r1, r4
 800df14:	4638      	mov	r0, r7
 800df16:	f7ff ff0b 	bl	800dd30 <__multiply>
 800df1a:	6020      	str	r0, [r4, #0]
 800df1c:	f8c0 9000 	str.w	r9, [r0]
 800df20:	4604      	mov	r4, r0
 800df22:	e7e4      	b.n	800deee <__pow5mult+0x6a>
 800df24:	4630      	mov	r0, r6
 800df26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df2a:	bf00      	nop
 800df2c:	0801362c 	.word	0x0801362c
 800df30:	080134e9 	.word	0x080134e9
 800df34:	080135d3 	.word	0x080135d3

0800df38 <__lshift>:
 800df38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df3c:	460c      	mov	r4, r1
 800df3e:	6849      	ldr	r1, [r1, #4]
 800df40:	6923      	ldr	r3, [r4, #16]
 800df42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	4607      	mov	r7, r0
 800df4a:	4691      	mov	r9, r2
 800df4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df50:	f108 0601 	add.w	r6, r8, #1
 800df54:	42b3      	cmp	r3, r6
 800df56:	db0b      	blt.n	800df70 <__lshift+0x38>
 800df58:	4638      	mov	r0, r7
 800df5a:	f7ff fd95 	bl	800da88 <_Balloc>
 800df5e:	4605      	mov	r5, r0
 800df60:	b948      	cbnz	r0, 800df76 <__lshift+0x3e>
 800df62:	4602      	mov	r2, r0
 800df64:	4b28      	ldr	r3, [pc, #160]	@ (800e008 <__lshift+0xd0>)
 800df66:	4829      	ldr	r0, [pc, #164]	@ (800e00c <__lshift+0xd4>)
 800df68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800df6c:	f7fe f824 	bl	800bfb8 <__assert_func>
 800df70:	3101      	adds	r1, #1
 800df72:	005b      	lsls	r3, r3, #1
 800df74:	e7ee      	b.n	800df54 <__lshift+0x1c>
 800df76:	2300      	movs	r3, #0
 800df78:	f100 0114 	add.w	r1, r0, #20
 800df7c:	f100 0210 	add.w	r2, r0, #16
 800df80:	4618      	mov	r0, r3
 800df82:	4553      	cmp	r3, sl
 800df84:	db33      	blt.n	800dfee <__lshift+0xb6>
 800df86:	6920      	ldr	r0, [r4, #16]
 800df88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df8c:	f104 0314 	add.w	r3, r4, #20
 800df90:	f019 091f 	ands.w	r9, r9, #31
 800df94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800df9c:	d02b      	beq.n	800dff6 <__lshift+0xbe>
 800df9e:	f1c9 0e20 	rsb	lr, r9, #32
 800dfa2:	468a      	mov	sl, r1
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	6818      	ldr	r0, [r3, #0]
 800dfa8:	fa00 f009 	lsl.w	r0, r0, r9
 800dfac:	4310      	orrs	r0, r2
 800dfae:	f84a 0b04 	str.w	r0, [sl], #4
 800dfb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb6:	459c      	cmp	ip, r3
 800dfb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dfbc:	d8f3      	bhi.n	800dfa6 <__lshift+0x6e>
 800dfbe:	ebac 0304 	sub.w	r3, ip, r4
 800dfc2:	3b15      	subs	r3, #21
 800dfc4:	f023 0303 	bic.w	r3, r3, #3
 800dfc8:	3304      	adds	r3, #4
 800dfca:	f104 0015 	add.w	r0, r4, #21
 800dfce:	4584      	cmp	ip, r0
 800dfd0:	bf38      	it	cc
 800dfd2:	2304      	movcc	r3, #4
 800dfd4:	50ca      	str	r2, [r1, r3]
 800dfd6:	b10a      	cbz	r2, 800dfdc <__lshift+0xa4>
 800dfd8:	f108 0602 	add.w	r6, r8, #2
 800dfdc:	3e01      	subs	r6, #1
 800dfde:	4638      	mov	r0, r7
 800dfe0:	612e      	str	r6, [r5, #16]
 800dfe2:	4621      	mov	r1, r4
 800dfe4:	f7ff fd90 	bl	800db08 <_Bfree>
 800dfe8:	4628      	mov	r0, r5
 800dfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfee:	f842 0f04 	str.w	r0, [r2, #4]!
 800dff2:	3301      	adds	r3, #1
 800dff4:	e7c5      	b.n	800df82 <__lshift+0x4a>
 800dff6:	3904      	subs	r1, #4
 800dff8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dffc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e000:	459c      	cmp	ip, r3
 800e002:	d8f9      	bhi.n	800dff8 <__lshift+0xc0>
 800e004:	e7ea      	b.n	800dfdc <__lshift+0xa4>
 800e006:	bf00      	nop
 800e008:	08013562 	.word	0x08013562
 800e00c:	080135d3 	.word	0x080135d3

0800e010 <__mcmp>:
 800e010:	690a      	ldr	r2, [r1, #16]
 800e012:	4603      	mov	r3, r0
 800e014:	6900      	ldr	r0, [r0, #16]
 800e016:	1a80      	subs	r0, r0, r2
 800e018:	b530      	push	{r4, r5, lr}
 800e01a:	d10e      	bne.n	800e03a <__mcmp+0x2a>
 800e01c:	3314      	adds	r3, #20
 800e01e:	3114      	adds	r1, #20
 800e020:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e024:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e028:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e02c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e030:	4295      	cmp	r5, r2
 800e032:	d003      	beq.n	800e03c <__mcmp+0x2c>
 800e034:	d205      	bcs.n	800e042 <__mcmp+0x32>
 800e036:	f04f 30ff 	mov.w	r0, #4294967295
 800e03a:	bd30      	pop	{r4, r5, pc}
 800e03c:	42a3      	cmp	r3, r4
 800e03e:	d3f3      	bcc.n	800e028 <__mcmp+0x18>
 800e040:	e7fb      	b.n	800e03a <__mcmp+0x2a>
 800e042:	2001      	movs	r0, #1
 800e044:	e7f9      	b.n	800e03a <__mcmp+0x2a>
	...

0800e048 <__mdiff>:
 800e048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	4689      	mov	r9, r1
 800e04e:	4606      	mov	r6, r0
 800e050:	4611      	mov	r1, r2
 800e052:	4648      	mov	r0, r9
 800e054:	4614      	mov	r4, r2
 800e056:	f7ff ffdb 	bl	800e010 <__mcmp>
 800e05a:	1e05      	subs	r5, r0, #0
 800e05c:	d112      	bne.n	800e084 <__mdiff+0x3c>
 800e05e:	4629      	mov	r1, r5
 800e060:	4630      	mov	r0, r6
 800e062:	f7ff fd11 	bl	800da88 <_Balloc>
 800e066:	4602      	mov	r2, r0
 800e068:	b928      	cbnz	r0, 800e076 <__mdiff+0x2e>
 800e06a:	4b3f      	ldr	r3, [pc, #252]	@ (800e168 <__mdiff+0x120>)
 800e06c:	f240 2137 	movw	r1, #567	@ 0x237
 800e070:	483e      	ldr	r0, [pc, #248]	@ (800e16c <__mdiff+0x124>)
 800e072:	f7fd ffa1 	bl	800bfb8 <__assert_func>
 800e076:	2301      	movs	r3, #1
 800e078:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e07c:	4610      	mov	r0, r2
 800e07e:	b003      	add	sp, #12
 800e080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e084:	bfbc      	itt	lt
 800e086:	464b      	movlt	r3, r9
 800e088:	46a1      	movlt	r9, r4
 800e08a:	4630      	mov	r0, r6
 800e08c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e090:	bfba      	itte	lt
 800e092:	461c      	movlt	r4, r3
 800e094:	2501      	movlt	r5, #1
 800e096:	2500      	movge	r5, #0
 800e098:	f7ff fcf6 	bl	800da88 <_Balloc>
 800e09c:	4602      	mov	r2, r0
 800e09e:	b918      	cbnz	r0, 800e0a8 <__mdiff+0x60>
 800e0a0:	4b31      	ldr	r3, [pc, #196]	@ (800e168 <__mdiff+0x120>)
 800e0a2:	f240 2145 	movw	r1, #581	@ 0x245
 800e0a6:	e7e3      	b.n	800e070 <__mdiff+0x28>
 800e0a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e0ac:	6926      	ldr	r6, [r4, #16]
 800e0ae:	60c5      	str	r5, [r0, #12]
 800e0b0:	f109 0310 	add.w	r3, r9, #16
 800e0b4:	f109 0514 	add.w	r5, r9, #20
 800e0b8:	f104 0e14 	add.w	lr, r4, #20
 800e0bc:	f100 0b14 	add.w	fp, r0, #20
 800e0c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e0c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	46d9      	mov	r9, fp
 800e0cc:	f04f 0c00 	mov.w	ip, #0
 800e0d0:	9b01      	ldr	r3, [sp, #4]
 800e0d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e0d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e0da:	9301      	str	r3, [sp, #4]
 800e0dc:	fa1f f38a 	uxth.w	r3, sl
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	b283      	uxth	r3, r0
 800e0e4:	1acb      	subs	r3, r1, r3
 800e0e6:	0c00      	lsrs	r0, r0, #16
 800e0e8:	4463      	add	r3, ip
 800e0ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e0ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e0f8:	4576      	cmp	r6, lr
 800e0fa:	f849 3b04 	str.w	r3, [r9], #4
 800e0fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e102:	d8e5      	bhi.n	800e0d0 <__mdiff+0x88>
 800e104:	1b33      	subs	r3, r6, r4
 800e106:	3b15      	subs	r3, #21
 800e108:	f023 0303 	bic.w	r3, r3, #3
 800e10c:	3415      	adds	r4, #21
 800e10e:	3304      	adds	r3, #4
 800e110:	42a6      	cmp	r6, r4
 800e112:	bf38      	it	cc
 800e114:	2304      	movcc	r3, #4
 800e116:	441d      	add	r5, r3
 800e118:	445b      	add	r3, fp
 800e11a:	461e      	mov	r6, r3
 800e11c:	462c      	mov	r4, r5
 800e11e:	4544      	cmp	r4, r8
 800e120:	d30e      	bcc.n	800e140 <__mdiff+0xf8>
 800e122:	f108 0103 	add.w	r1, r8, #3
 800e126:	1b49      	subs	r1, r1, r5
 800e128:	f021 0103 	bic.w	r1, r1, #3
 800e12c:	3d03      	subs	r5, #3
 800e12e:	45a8      	cmp	r8, r5
 800e130:	bf38      	it	cc
 800e132:	2100      	movcc	r1, #0
 800e134:	440b      	add	r3, r1
 800e136:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e13a:	b191      	cbz	r1, 800e162 <__mdiff+0x11a>
 800e13c:	6117      	str	r7, [r2, #16]
 800e13e:	e79d      	b.n	800e07c <__mdiff+0x34>
 800e140:	f854 1b04 	ldr.w	r1, [r4], #4
 800e144:	46e6      	mov	lr, ip
 800e146:	0c08      	lsrs	r0, r1, #16
 800e148:	fa1c fc81 	uxtah	ip, ip, r1
 800e14c:	4471      	add	r1, lr
 800e14e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e152:	b289      	uxth	r1, r1
 800e154:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e158:	f846 1b04 	str.w	r1, [r6], #4
 800e15c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e160:	e7dd      	b.n	800e11e <__mdiff+0xd6>
 800e162:	3f01      	subs	r7, #1
 800e164:	e7e7      	b.n	800e136 <__mdiff+0xee>
 800e166:	bf00      	nop
 800e168:	08013562 	.word	0x08013562
 800e16c:	080135d3 	.word	0x080135d3

0800e170 <__ulp>:
 800e170:	b082      	sub	sp, #8
 800e172:	ed8d 0b00 	vstr	d0, [sp]
 800e176:	9a01      	ldr	r2, [sp, #4]
 800e178:	4b0f      	ldr	r3, [pc, #60]	@ (800e1b8 <__ulp+0x48>)
 800e17a:	4013      	ands	r3, r2
 800e17c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e180:	2b00      	cmp	r3, #0
 800e182:	dc08      	bgt.n	800e196 <__ulp+0x26>
 800e184:	425b      	negs	r3, r3
 800e186:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e18a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e18e:	da04      	bge.n	800e19a <__ulp+0x2a>
 800e190:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e194:	4113      	asrs	r3, r2
 800e196:	2200      	movs	r2, #0
 800e198:	e008      	b.n	800e1ac <__ulp+0x3c>
 800e19a:	f1a2 0314 	sub.w	r3, r2, #20
 800e19e:	2b1e      	cmp	r3, #30
 800e1a0:	bfda      	itte	le
 800e1a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e1a6:	40da      	lsrle	r2, r3
 800e1a8:	2201      	movgt	r2, #1
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	ec41 0b10 	vmov	d0, r0, r1
 800e1b4:	b002      	add	sp, #8
 800e1b6:	4770      	bx	lr
 800e1b8:	7ff00000 	.word	0x7ff00000

0800e1bc <__b2d>:
 800e1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c0:	6906      	ldr	r6, [r0, #16]
 800e1c2:	f100 0814 	add.w	r8, r0, #20
 800e1c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e1ca:	1f37      	subs	r7, r6, #4
 800e1cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7ff fd4b 	bl	800dc6c <__hi0bits>
 800e1d6:	f1c0 0320 	rsb	r3, r0, #32
 800e1da:	280a      	cmp	r0, #10
 800e1dc:	600b      	str	r3, [r1, #0]
 800e1de:	491b      	ldr	r1, [pc, #108]	@ (800e24c <__b2d+0x90>)
 800e1e0:	dc15      	bgt.n	800e20e <__b2d+0x52>
 800e1e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800e1e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800e1ea:	45b8      	cmp	r8, r7
 800e1ec:	ea43 0501 	orr.w	r5, r3, r1
 800e1f0:	bf34      	ite	cc
 800e1f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e1f6:	2300      	movcs	r3, #0
 800e1f8:	3015      	adds	r0, #21
 800e1fa:	fa02 f000 	lsl.w	r0, r2, r0
 800e1fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800e202:	4303      	orrs	r3, r0
 800e204:	461c      	mov	r4, r3
 800e206:	ec45 4b10 	vmov	d0, r4, r5
 800e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e20e:	45b8      	cmp	r8, r7
 800e210:	bf3a      	itte	cc
 800e212:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e216:	f1a6 0708 	subcc.w	r7, r6, #8
 800e21a:	2300      	movcs	r3, #0
 800e21c:	380b      	subs	r0, #11
 800e21e:	d012      	beq.n	800e246 <__b2d+0x8a>
 800e220:	f1c0 0120 	rsb	r1, r0, #32
 800e224:	fa23 f401 	lsr.w	r4, r3, r1
 800e228:	4082      	lsls	r2, r0
 800e22a:	4322      	orrs	r2, r4
 800e22c:	4547      	cmp	r7, r8
 800e22e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e232:	bf8c      	ite	hi
 800e234:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e238:	2200      	movls	r2, #0
 800e23a:	4083      	lsls	r3, r0
 800e23c:	40ca      	lsrs	r2, r1
 800e23e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e242:	4313      	orrs	r3, r2
 800e244:	e7de      	b.n	800e204 <__b2d+0x48>
 800e246:	ea42 0501 	orr.w	r5, r2, r1
 800e24a:	e7db      	b.n	800e204 <__b2d+0x48>
 800e24c:	3ff00000 	.word	0x3ff00000

0800e250 <__d2b>:
 800e250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e254:	460f      	mov	r7, r1
 800e256:	2101      	movs	r1, #1
 800e258:	ec59 8b10 	vmov	r8, r9, d0
 800e25c:	4616      	mov	r6, r2
 800e25e:	f7ff fc13 	bl	800da88 <_Balloc>
 800e262:	4604      	mov	r4, r0
 800e264:	b930      	cbnz	r0, 800e274 <__d2b+0x24>
 800e266:	4602      	mov	r2, r0
 800e268:	4b23      	ldr	r3, [pc, #140]	@ (800e2f8 <__d2b+0xa8>)
 800e26a:	4824      	ldr	r0, [pc, #144]	@ (800e2fc <__d2b+0xac>)
 800e26c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e270:	f7fd fea2 	bl	800bfb8 <__assert_func>
 800e274:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e27c:	b10d      	cbz	r5, 800e282 <__d2b+0x32>
 800e27e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e282:	9301      	str	r3, [sp, #4]
 800e284:	f1b8 0300 	subs.w	r3, r8, #0
 800e288:	d023      	beq.n	800e2d2 <__d2b+0x82>
 800e28a:	4668      	mov	r0, sp
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	f7ff fd0c 	bl	800dcaa <__lo0bits>
 800e292:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e296:	b1d0      	cbz	r0, 800e2ce <__d2b+0x7e>
 800e298:	f1c0 0320 	rsb	r3, r0, #32
 800e29c:	fa02 f303 	lsl.w	r3, r2, r3
 800e2a0:	430b      	orrs	r3, r1
 800e2a2:	40c2      	lsrs	r2, r0
 800e2a4:	6163      	str	r3, [r4, #20]
 800e2a6:	9201      	str	r2, [sp, #4]
 800e2a8:	9b01      	ldr	r3, [sp, #4]
 800e2aa:	61a3      	str	r3, [r4, #24]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	bf0c      	ite	eq
 800e2b0:	2201      	moveq	r2, #1
 800e2b2:	2202      	movne	r2, #2
 800e2b4:	6122      	str	r2, [r4, #16]
 800e2b6:	b1a5      	cbz	r5, 800e2e2 <__d2b+0x92>
 800e2b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e2bc:	4405      	add	r5, r0
 800e2be:	603d      	str	r5, [r7, #0]
 800e2c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e2c4:	6030      	str	r0, [r6, #0]
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	b003      	add	sp, #12
 800e2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2ce:	6161      	str	r1, [r4, #20]
 800e2d0:	e7ea      	b.n	800e2a8 <__d2b+0x58>
 800e2d2:	a801      	add	r0, sp, #4
 800e2d4:	f7ff fce9 	bl	800dcaa <__lo0bits>
 800e2d8:	9b01      	ldr	r3, [sp, #4]
 800e2da:	6163      	str	r3, [r4, #20]
 800e2dc:	3020      	adds	r0, #32
 800e2de:	2201      	movs	r2, #1
 800e2e0:	e7e8      	b.n	800e2b4 <__d2b+0x64>
 800e2e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e2ea:	6038      	str	r0, [r7, #0]
 800e2ec:	6918      	ldr	r0, [r3, #16]
 800e2ee:	f7ff fcbd 	bl	800dc6c <__hi0bits>
 800e2f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2f6:	e7e5      	b.n	800e2c4 <__d2b+0x74>
 800e2f8:	08013562 	.word	0x08013562
 800e2fc:	080135d3 	.word	0x080135d3

0800e300 <__ratio>:
 800e300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e304:	b085      	sub	sp, #20
 800e306:	e9cd 1000 	strd	r1, r0, [sp]
 800e30a:	a902      	add	r1, sp, #8
 800e30c:	f7ff ff56 	bl	800e1bc <__b2d>
 800e310:	9800      	ldr	r0, [sp, #0]
 800e312:	a903      	add	r1, sp, #12
 800e314:	ec55 4b10 	vmov	r4, r5, d0
 800e318:	f7ff ff50 	bl	800e1bc <__b2d>
 800e31c:	9b01      	ldr	r3, [sp, #4]
 800e31e:	6919      	ldr	r1, [r3, #16]
 800e320:	9b00      	ldr	r3, [sp, #0]
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	1ac9      	subs	r1, r1, r3
 800e326:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e32a:	1a9b      	subs	r3, r3, r2
 800e32c:	ec5b ab10 	vmov	sl, fp, d0
 800e330:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e334:	2b00      	cmp	r3, #0
 800e336:	bfce      	itee	gt
 800e338:	462a      	movgt	r2, r5
 800e33a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e33e:	465a      	movle	r2, fp
 800e340:	462f      	mov	r7, r5
 800e342:	46d9      	mov	r9, fp
 800e344:	bfcc      	ite	gt
 800e346:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e34a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e34e:	464b      	mov	r3, r9
 800e350:	4652      	mov	r2, sl
 800e352:	4620      	mov	r0, r4
 800e354:	4639      	mov	r1, r7
 800e356:	f7f2 fa99 	bl	800088c <__aeabi_ddiv>
 800e35a:	ec41 0b10 	vmov	d0, r0, r1
 800e35e:	b005      	add	sp, #20
 800e360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e364 <__copybits>:
 800e364:	3901      	subs	r1, #1
 800e366:	b570      	push	{r4, r5, r6, lr}
 800e368:	1149      	asrs	r1, r1, #5
 800e36a:	6914      	ldr	r4, [r2, #16]
 800e36c:	3101      	adds	r1, #1
 800e36e:	f102 0314 	add.w	r3, r2, #20
 800e372:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e376:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e37a:	1f05      	subs	r5, r0, #4
 800e37c:	42a3      	cmp	r3, r4
 800e37e:	d30c      	bcc.n	800e39a <__copybits+0x36>
 800e380:	1aa3      	subs	r3, r4, r2
 800e382:	3b11      	subs	r3, #17
 800e384:	f023 0303 	bic.w	r3, r3, #3
 800e388:	3211      	adds	r2, #17
 800e38a:	42a2      	cmp	r2, r4
 800e38c:	bf88      	it	hi
 800e38e:	2300      	movhi	r3, #0
 800e390:	4418      	add	r0, r3
 800e392:	2300      	movs	r3, #0
 800e394:	4288      	cmp	r0, r1
 800e396:	d305      	bcc.n	800e3a4 <__copybits+0x40>
 800e398:	bd70      	pop	{r4, r5, r6, pc}
 800e39a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e39e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e3a2:	e7eb      	b.n	800e37c <__copybits+0x18>
 800e3a4:	f840 3b04 	str.w	r3, [r0], #4
 800e3a8:	e7f4      	b.n	800e394 <__copybits+0x30>

0800e3aa <__any_on>:
 800e3aa:	f100 0214 	add.w	r2, r0, #20
 800e3ae:	6900      	ldr	r0, [r0, #16]
 800e3b0:	114b      	asrs	r3, r1, #5
 800e3b2:	4298      	cmp	r0, r3
 800e3b4:	b510      	push	{r4, lr}
 800e3b6:	db11      	blt.n	800e3dc <__any_on+0x32>
 800e3b8:	dd0a      	ble.n	800e3d0 <__any_on+0x26>
 800e3ba:	f011 011f 	ands.w	r1, r1, #31
 800e3be:	d007      	beq.n	800e3d0 <__any_on+0x26>
 800e3c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e3c4:	fa24 f001 	lsr.w	r0, r4, r1
 800e3c8:	fa00 f101 	lsl.w	r1, r0, r1
 800e3cc:	428c      	cmp	r4, r1
 800e3ce:	d10b      	bne.n	800e3e8 <__any_on+0x3e>
 800e3d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d803      	bhi.n	800e3e0 <__any_on+0x36>
 800e3d8:	2000      	movs	r0, #0
 800e3da:	bd10      	pop	{r4, pc}
 800e3dc:	4603      	mov	r3, r0
 800e3de:	e7f7      	b.n	800e3d0 <__any_on+0x26>
 800e3e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3e4:	2900      	cmp	r1, #0
 800e3e6:	d0f5      	beq.n	800e3d4 <__any_on+0x2a>
 800e3e8:	2001      	movs	r0, #1
 800e3ea:	e7f6      	b.n	800e3da <__any_on+0x30>

0800e3ec <_malloc_usable_size_r>:
 800e3ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3f0:	1f18      	subs	r0, r3, #4
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	bfbc      	itt	lt
 800e3f6:	580b      	ldrlt	r3, [r1, r0]
 800e3f8:	18c0      	addlt	r0, r0, r3
 800e3fa:	4770      	bx	lr

0800e3fc <__ascii_wctomb>:
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	4608      	mov	r0, r1
 800e400:	b141      	cbz	r1, 800e414 <__ascii_wctomb+0x18>
 800e402:	2aff      	cmp	r2, #255	@ 0xff
 800e404:	d904      	bls.n	800e410 <__ascii_wctomb+0x14>
 800e406:	228a      	movs	r2, #138	@ 0x8a
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	f04f 30ff 	mov.w	r0, #4294967295
 800e40e:	4770      	bx	lr
 800e410:	700a      	strb	r2, [r1, #0]
 800e412:	2001      	movs	r0, #1
 800e414:	4770      	bx	lr

0800e416 <__ssputs_r>:
 800e416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e41a:	688e      	ldr	r6, [r1, #8]
 800e41c:	461f      	mov	r7, r3
 800e41e:	42be      	cmp	r6, r7
 800e420:	680b      	ldr	r3, [r1, #0]
 800e422:	4682      	mov	sl, r0
 800e424:	460c      	mov	r4, r1
 800e426:	4690      	mov	r8, r2
 800e428:	d82d      	bhi.n	800e486 <__ssputs_r+0x70>
 800e42a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e42e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e432:	d026      	beq.n	800e482 <__ssputs_r+0x6c>
 800e434:	6965      	ldr	r5, [r4, #20]
 800e436:	6909      	ldr	r1, [r1, #16]
 800e438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e43c:	eba3 0901 	sub.w	r9, r3, r1
 800e440:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e444:	1c7b      	adds	r3, r7, #1
 800e446:	444b      	add	r3, r9
 800e448:	106d      	asrs	r5, r5, #1
 800e44a:	429d      	cmp	r5, r3
 800e44c:	bf38      	it	cc
 800e44e:	461d      	movcc	r5, r3
 800e450:	0553      	lsls	r3, r2, #21
 800e452:	d527      	bpl.n	800e4a4 <__ssputs_r+0x8e>
 800e454:	4629      	mov	r1, r5
 800e456:	f7fd fe1b 	bl	800c090 <_malloc_r>
 800e45a:	4606      	mov	r6, r0
 800e45c:	b360      	cbz	r0, 800e4b8 <__ssputs_r+0xa2>
 800e45e:	6921      	ldr	r1, [r4, #16]
 800e460:	464a      	mov	r2, r9
 800e462:	f7fe ff6c 	bl	800d33e <memcpy>
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e46c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e470:	81a3      	strh	r3, [r4, #12]
 800e472:	6126      	str	r6, [r4, #16]
 800e474:	6165      	str	r5, [r4, #20]
 800e476:	444e      	add	r6, r9
 800e478:	eba5 0509 	sub.w	r5, r5, r9
 800e47c:	6026      	str	r6, [r4, #0]
 800e47e:	60a5      	str	r5, [r4, #8]
 800e480:	463e      	mov	r6, r7
 800e482:	42be      	cmp	r6, r7
 800e484:	d900      	bls.n	800e488 <__ssputs_r+0x72>
 800e486:	463e      	mov	r6, r7
 800e488:	6820      	ldr	r0, [r4, #0]
 800e48a:	4632      	mov	r2, r6
 800e48c:	4641      	mov	r1, r8
 800e48e:	f7fe fdff 	bl	800d090 <memmove>
 800e492:	68a3      	ldr	r3, [r4, #8]
 800e494:	1b9b      	subs	r3, r3, r6
 800e496:	60a3      	str	r3, [r4, #8]
 800e498:	6823      	ldr	r3, [r4, #0]
 800e49a:	4433      	add	r3, r6
 800e49c:	6023      	str	r3, [r4, #0]
 800e49e:	2000      	movs	r0, #0
 800e4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a4:	462a      	mov	r2, r5
 800e4a6:	f7fd fe7f 	bl	800c1a8 <_realloc_r>
 800e4aa:	4606      	mov	r6, r0
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d1e0      	bne.n	800e472 <__ssputs_r+0x5c>
 800e4b0:	6921      	ldr	r1, [r4, #16]
 800e4b2:	4650      	mov	r0, sl
 800e4b4:	f7fe ff52 	bl	800d35c <_free_r>
 800e4b8:	230c      	movs	r3, #12
 800e4ba:	f8ca 3000 	str.w	r3, [sl]
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4c4:	81a3      	strh	r3, [r4, #12]
 800e4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ca:	e7e9      	b.n	800e4a0 <__ssputs_r+0x8a>

0800e4cc <_svfiprintf_r>:
 800e4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d0:	4698      	mov	r8, r3
 800e4d2:	898b      	ldrh	r3, [r1, #12]
 800e4d4:	061b      	lsls	r3, r3, #24
 800e4d6:	b09d      	sub	sp, #116	@ 0x74
 800e4d8:	4607      	mov	r7, r0
 800e4da:	460d      	mov	r5, r1
 800e4dc:	4614      	mov	r4, r2
 800e4de:	d510      	bpl.n	800e502 <_svfiprintf_r+0x36>
 800e4e0:	690b      	ldr	r3, [r1, #16]
 800e4e2:	b973      	cbnz	r3, 800e502 <_svfiprintf_r+0x36>
 800e4e4:	2140      	movs	r1, #64	@ 0x40
 800e4e6:	f7fd fdd3 	bl	800c090 <_malloc_r>
 800e4ea:	6028      	str	r0, [r5, #0]
 800e4ec:	6128      	str	r0, [r5, #16]
 800e4ee:	b930      	cbnz	r0, 800e4fe <_svfiprintf_r+0x32>
 800e4f0:	230c      	movs	r3, #12
 800e4f2:	603b      	str	r3, [r7, #0]
 800e4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f8:	b01d      	add	sp, #116	@ 0x74
 800e4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4fe:	2340      	movs	r3, #64	@ 0x40
 800e500:	616b      	str	r3, [r5, #20]
 800e502:	2300      	movs	r3, #0
 800e504:	9309      	str	r3, [sp, #36]	@ 0x24
 800e506:	2320      	movs	r3, #32
 800e508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e50c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e510:	2330      	movs	r3, #48	@ 0x30
 800e512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e6b0 <_svfiprintf_r+0x1e4>
 800e516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e51a:	f04f 0901 	mov.w	r9, #1
 800e51e:	4623      	mov	r3, r4
 800e520:	469a      	mov	sl, r3
 800e522:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e526:	b10a      	cbz	r2, 800e52c <_svfiprintf_r+0x60>
 800e528:	2a25      	cmp	r2, #37	@ 0x25
 800e52a:	d1f9      	bne.n	800e520 <_svfiprintf_r+0x54>
 800e52c:	ebba 0b04 	subs.w	fp, sl, r4
 800e530:	d00b      	beq.n	800e54a <_svfiprintf_r+0x7e>
 800e532:	465b      	mov	r3, fp
 800e534:	4622      	mov	r2, r4
 800e536:	4629      	mov	r1, r5
 800e538:	4638      	mov	r0, r7
 800e53a:	f7ff ff6c 	bl	800e416 <__ssputs_r>
 800e53e:	3001      	adds	r0, #1
 800e540:	f000 80a7 	beq.w	800e692 <_svfiprintf_r+0x1c6>
 800e544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e546:	445a      	add	r2, fp
 800e548:	9209      	str	r2, [sp, #36]	@ 0x24
 800e54a:	f89a 3000 	ldrb.w	r3, [sl]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 809f 	beq.w	800e692 <_svfiprintf_r+0x1c6>
 800e554:	2300      	movs	r3, #0
 800e556:	f04f 32ff 	mov.w	r2, #4294967295
 800e55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e55e:	f10a 0a01 	add.w	sl, sl, #1
 800e562:	9304      	str	r3, [sp, #16]
 800e564:	9307      	str	r3, [sp, #28]
 800e566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e56a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e56c:	4654      	mov	r4, sl
 800e56e:	2205      	movs	r2, #5
 800e570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e574:	484e      	ldr	r0, [pc, #312]	@ (800e6b0 <_svfiprintf_r+0x1e4>)
 800e576:	f7f1 fe4b 	bl	8000210 <memchr>
 800e57a:	9a04      	ldr	r2, [sp, #16]
 800e57c:	b9d8      	cbnz	r0, 800e5b6 <_svfiprintf_r+0xea>
 800e57e:	06d0      	lsls	r0, r2, #27
 800e580:	bf44      	itt	mi
 800e582:	2320      	movmi	r3, #32
 800e584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e588:	0711      	lsls	r1, r2, #28
 800e58a:	bf44      	itt	mi
 800e58c:	232b      	movmi	r3, #43	@ 0x2b
 800e58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e592:	f89a 3000 	ldrb.w	r3, [sl]
 800e596:	2b2a      	cmp	r3, #42	@ 0x2a
 800e598:	d015      	beq.n	800e5c6 <_svfiprintf_r+0xfa>
 800e59a:	9a07      	ldr	r2, [sp, #28]
 800e59c:	4654      	mov	r4, sl
 800e59e:	2000      	movs	r0, #0
 800e5a0:	f04f 0c0a 	mov.w	ip, #10
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5aa:	3b30      	subs	r3, #48	@ 0x30
 800e5ac:	2b09      	cmp	r3, #9
 800e5ae:	d94b      	bls.n	800e648 <_svfiprintf_r+0x17c>
 800e5b0:	b1b0      	cbz	r0, 800e5e0 <_svfiprintf_r+0x114>
 800e5b2:	9207      	str	r2, [sp, #28]
 800e5b4:	e014      	b.n	800e5e0 <_svfiprintf_r+0x114>
 800e5b6:	eba0 0308 	sub.w	r3, r0, r8
 800e5ba:	fa09 f303 	lsl.w	r3, r9, r3
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	9304      	str	r3, [sp, #16]
 800e5c2:	46a2      	mov	sl, r4
 800e5c4:	e7d2      	b.n	800e56c <_svfiprintf_r+0xa0>
 800e5c6:	9b03      	ldr	r3, [sp, #12]
 800e5c8:	1d19      	adds	r1, r3, #4
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	9103      	str	r1, [sp, #12]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	bfbb      	ittet	lt
 800e5d2:	425b      	neglt	r3, r3
 800e5d4:	f042 0202 	orrlt.w	r2, r2, #2
 800e5d8:	9307      	strge	r3, [sp, #28]
 800e5da:	9307      	strlt	r3, [sp, #28]
 800e5dc:	bfb8      	it	lt
 800e5de:	9204      	strlt	r2, [sp, #16]
 800e5e0:	7823      	ldrb	r3, [r4, #0]
 800e5e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5e4:	d10a      	bne.n	800e5fc <_svfiprintf_r+0x130>
 800e5e6:	7863      	ldrb	r3, [r4, #1]
 800e5e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5ea:	d132      	bne.n	800e652 <_svfiprintf_r+0x186>
 800e5ec:	9b03      	ldr	r3, [sp, #12]
 800e5ee:	1d1a      	adds	r2, r3, #4
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	9203      	str	r2, [sp, #12]
 800e5f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5f8:	3402      	adds	r4, #2
 800e5fa:	9305      	str	r3, [sp, #20]
 800e5fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e6c0 <_svfiprintf_r+0x1f4>
 800e600:	7821      	ldrb	r1, [r4, #0]
 800e602:	2203      	movs	r2, #3
 800e604:	4650      	mov	r0, sl
 800e606:	f7f1 fe03 	bl	8000210 <memchr>
 800e60a:	b138      	cbz	r0, 800e61c <_svfiprintf_r+0x150>
 800e60c:	9b04      	ldr	r3, [sp, #16]
 800e60e:	eba0 000a 	sub.w	r0, r0, sl
 800e612:	2240      	movs	r2, #64	@ 0x40
 800e614:	4082      	lsls	r2, r0
 800e616:	4313      	orrs	r3, r2
 800e618:	3401      	adds	r4, #1
 800e61a:	9304      	str	r3, [sp, #16]
 800e61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e620:	4824      	ldr	r0, [pc, #144]	@ (800e6b4 <_svfiprintf_r+0x1e8>)
 800e622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e626:	2206      	movs	r2, #6
 800e628:	f7f1 fdf2 	bl	8000210 <memchr>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d036      	beq.n	800e69e <_svfiprintf_r+0x1d2>
 800e630:	4b21      	ldr	r3, [pc, #132]	@ (800e6b8 <_svfiprintf_r+0x1ec>)
 800e632:	bb1b      	cbnz	r3, 800e67c <_svfiprintf_r+0x1b0>
 800e634:	9b03      	ldr	r3, [sp, #12]
 800e636:	3307      	adds	r3, #7
 800e638:	f023 0307 	bic.w	r3, r3, #7
 800e63c:	3308      	adds	r3, #8
 800e63e:	9303      	str	r3, [sp, #12]
 800e640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e642:	4433      	add	r3, r6
 800e644:	9309      	str	r3, [sp, #36]	@ 0x24
 800e646:	e76a      	b.n	800e51e <_svfiprintf_r+0x52>
 800e648:	fb0c 3202 	mla	r2, ip, r2, r3
 800e64c:	460c      	mov	r4, r1
 800e64e:	2001      	movs	r0, #1
 800e650:	e7a8      	b.n	800e5a4 <_svfiprintf_r+0xd8>
 800e652:	2300      	movs	r3, #0
 800e654:	3401      	adds	r4, #1
 800e656:	9305      	str	r3, [sp, #20]
 800e658:	4619      	mov	r1, r3
 800e65a:	f04f 0c0a 	mov.w	ip, #10
 800e65e:	4620      	mov	r0, r4
 800e660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e664:	3a30      	subs	r2, #48	@ 0x30
 800e666:	2a09      	cmp	r2, #9
 800e668:	d903      	bls.n	800e672 <_svfiprintf_r+0x1a6>
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d0c6      	beq.n	800e5fc <_svfiprintf_r+0x130>
 800e66e:	9105      	str	r1, [sp, #20]
 800e670:	e7c4      	b.n	800e5fc <_svfiprintf_r+0x130>
 800e672:	fb0c 2101 	mla	r1, ip, r1, r2
 800e676:	4604      	mov	r4, r0
 800e678:	2301      	movs	r3, #1
 800e67a:	e7f0      	b.n	800e65e <_svfiprintf_r+0x192>
 800e67c:	ab03      	add	r3, sp, #12
 800e67e:	9300      	str	r3, [sp, #0]
 800e680:	462a      	mov	r2, r5
 800e682:	4b0e      	ldr	r3, [pc, #56]	@ (800e6bc <_svfiprintf_r+0x1f0>)
 800e684:	a904      	add	r1, sp, #16
 800e686:	4638      	mov	r0, r7
 800e688:	f3af 8000 	nop.w
 800e68c:	1c42      	adds	r2, r0, #1
 800e68e:	4606      	mov	r6, r0
 800e690:	d1d6      	bne.n	800e640 <_svfiprintf_r+0x174>
 800e692:	89ab      	ldrh	r3, [r5, #12]
 800e694:	065b      	lsls	r3, r3, #25
 800e696:	f53f af2d 	bmi.w	800e4f4 <_svfiprintf_r+0x28>
 800e69a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e69c:	e72c      	b.n	800e4f8 <_svfiprintf_r+0x2c>
 800e69e:	ab03      	add	r3, sp, #12
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	462a      	mov	r2, r5
 800e6a4:	4b05      	ldr	r3, [pc, #20]	@ (800e6bc <_svfiprintf_r+0x1f0>)
 800e6a6:	a904      	add	r1, sp, #16
 800e6a8:	4638      	mov	r0, r7
 800e6aa:	f000 f9bb 	bl	800ea24 <_printf_i>
 800e6ae:	e7ed      	b.n	800e68c <_svfiprintf_r+0x1c0>
 800e6b0:	08013728 	.word	0x08013728
 800e6b4:	08013732 	.word	0x08013732
 800e6b8:	00000000 	.word	0x00000000
 800e6bc:	0800e417 	.word	0x0800e417
 800e6c0:	0801372e 	.word	0x0801372e

0800e6c4 <__sfputc_r>:
 800e6c4:	6893      	ldr	r3, [r2, #8]
 800e6c6:	3b01      	subs	r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	b410      	push	{r4}
 800e6cc:	6093      	str	r3, [r2, #8]
 800e6ce:	da08      	bge.n	800e6e2 <__sfputc_r+0x1e>
 800e6d0:	6994      	ldr	r4, [r2, #24]
 800e6d2:	42a3      	cmp	r3, r4
 800e6d4:	db01      	blt.n	800e6da <__sfputc_r+0x16>
 800e6d6:	290a      	cmp	r1, #10
 800e6d8:	d103      	bne.n	800e6e2 <__sfputc_r+0x1e>
 800e6da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6de:	f000 bb6d 	b.w	800edbc <__swbuf_r>
 800e6e2:	6813      	ldr	r3, [r2, #0]
 800e6e4:	1c58      	adds	r0, r3, #1
 800e6e6:	6010      	str	r0, [r2, #0]
 800e6e8:	7019      	strb	r1, [r3, #0]
 800e6ea:	4608      	mov	r0, r1
 800e6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <__sfputs_r>:
 800e6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	460f      	mov	r7, r1
 800e6f8:	4614      	mov	r4, r2
 800e6fa:	18d5      	adds	r5, r2, r3
 800e6fc:	42ac      	cmp	r4, r5
 800e6fe:	d101      	bne.n	800e704 <__sfputs_r+0x12>
 800e700:	2000      	movs	r0, #0
 800e702:	e007      	b.n	800e714 <__sfputs_r+0x22>
 800e704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e708:	463a      	mov	r2, r7
 800e70a:	4630      	mov	r0, r6
 800e70c:	f7ff ffda 	bl	800e6c4 <__sfputc_r>
 800e710:	1c43      	adds	r3, r0, #1
 800e712:	d1f3      	bne.n	800e6fc <__sfputs_r+0xa>
 800e714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e718 <_vfiprintf_r>:
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	460d      	mov	r5, r1
 800e71e:	b09d      	sub	sp, #116	@ 0x74
 800e720:	4614      	mov	r4, r2
 800e722:	4698      	mov	r8, r3
 800e724:	4606      	mov	r6, r0
 800e726:	b118      	cbz	r0, 800e730 <_vfiprintf_r+0x18>
 800e728:	6a03      	ldr	r3, [r0, #32]
 800e72a:	b90b      	cbnz	r3, 800e730 <_vfiprintf_r+0x18>
 800e72c:	f7fe fc04 	bl	800cf38 <__sinit>
 800e730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e732:	07d9      	lsls	r1, r3, #31
 800e734:	d405      	bmi.n	800e742 <_vfiprintf_r+0x2a>
 800e736:	89ab      	ldrh	r3, [r5, #12]
 800e738:	059a      	lsls	r2, r3, #22
 800e73a:	d402      	bmi.n	800e742 <_vfiprintf_r+0x2a>
 800e73c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e73e:	f7fe fdfc 	bl	800d33a <__retarget_lock_acquire_recursive>
 800e742:	89ab      	ldrh	r3, [r5, #12]
 800e744:	071b      	lsls	r3, r3, #28
 800e746:	d501      	bpl.n	800e74c <_vfiprintf_r+0x34>
 800e748:	692b      	ldr	r3, [r5, #16]
 800e74a:	b99b      	cbnz	r3, 800e774 <_vfiprintf_r+0x5c>
 800e74c:	4629      	mov	r1, r5
 800e74e:	4630      	mov	r0, r6
 800e750:	f000 fb72 	bl	800ee38 <__swsetup_r>
 800e754:	b170      	cbz	r0, 800e774 <_vfiprintf_r+0x5c>
 800e756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e758:	07dc      	lsls	r4, r3, #31
 800e75a:	d504      	bpl.n	800e766 <_vfiprintf_r+0x4e>
 800e75c:	f04f 30ff 	mov.w	r0, #4294967295
 800e760:	b01d      	add	sp, #116	@ 0x74
 800e762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e766:	89ab      	ldrh	r3, [r5, #12]
 800e768:	0598      	lsls	r0, r3, #22
 800e76a:	d4f7      	bmi.n	800e75c <_vfiprintf_r+0x44>
 800e76c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e76e:	f7fe fde5 	bl	800d33c <__retarget_lock_release_recursive>
 800e772:	e7f3      	b.n	800e75c <_vfiprintf_r+0x44>
 800e774:	2300      	movs	r3, #0
 800e776:	9309      	str	r3, [sp, #36]	@ 0x24
 800e778:	2320      	movs	r3, #32
 800e77a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e782:	2330      	movs	r3, #48	@ 0x30
 800e784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e934 <_vfiprintf_r+0x21c>
 800e788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e78c:	f04f 0901 	mov.w	r9, #1
 800e790:	4623      	mov	r3, r4
 800e792:	469a      	mov	sl, r3
 800e794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e798:	b10a      	cbz	r2, 800e79e <_vfiprintf_r+0x86>
 800e79a:	2a25      	cmp	r2, #37	@ 0x25
 800e79c:	d1f9      	bne.n	800e792 <_vfiprintf_r+0x7a>
 800e79e:	ebba 0b04 	subs.w	fp, sl, r4
 800e7a2:	d00b      	beq.n	800e7bc <_vfiprintf_r+0xa4>
 800e7a4:	465b      	mov	r3, fp
 800e7a6:	4622      	mov	r2, r4
 800e7a8:	4629      	mov	r1, r5
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	f7ff ffa1 	bl	800e6f2 <__sfputs_r>
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	f000 80a7 	beq.w	800e904 <_vfiprintf_r+0x1ec>
 800e7b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7b8:	445a      	add	r2, fp
 800e7ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800e7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 809f 	beq.w	800e904 <_vfiprintf_r+0x1ec>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7d0:	f10a 0a01 	add.w	sl, sl, #1
 800e7d4:	9304      	str	r3, [sp, #16]
 800e7d6:	9307      	str	r3, [sp, #28]
 800e7d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e7dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7de:	4654      	mov	r4, sl
 800e7e0:	2205      	movs	r2, #5
 800e7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e6:	4853      	ldr	r0, [pc, #332]	@ (800e934 <_vfiprintf_r+0x21c>)
 800e7e8:	f7f1 fd12 	bl	8000210 <memchr>
 800e7ec:	9a04      	ldr	r2, [sp, #16]
 800e7ee:	b9d8      	cbnz	r0, 800e828 <_vfiprintf_r+0x110>
 800e7f0:	06d1      	lsls	r1, r2, #27
 800e7f2:	bf44      	itt	mi
 800e7f4:	2320      	movmi	r3, #32
 800e7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7fa:	0713      	lsls	r3, r2, #28
 800e7fc:	bf44      	itt	mi
 800e7fe:	232b      	movmi	r3, #43	@ 0x2b
 800e800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e804:	f89a 3000 	ldrb.w	r3, [sl]
 800e808:	2b2a      	cmp	r3, #42	@ 0x2a
 800e80a:	d015      	beq.n	800e838 <_vfiprintf_r+0x120>
 800e80c:	9a07      	ldr	r2, [sp, #28]
 800e80e:	4654      	mov	r4, sl
 800e810:	2000      	movs	r0, #0
 800e812:	f04f 0c0a 	mov.w	ip, #10
 800e816:	4621      	mov	r1, r4
 800e818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e81c:	3b30      	subs	r3, #48	@ 0x30
 800e81e:	2b09      	cmp	r3, #9
 800e820:	d94b      	bls.n	800e8ba <_vfiprintf_r+0x1a2>
 800e822:	b1b0      	cbz	r0, 800e852 <_vfiprintf_r+0x13a>
 800e824:	9207      	str	r2, [sp, #28]
 800e826:	e014      	b.n	800e852 <_vfiprintf_r+0x13a>
 800e828:	eba0 0308 	sub.w	r3, r0, r8
 800e82c:	fa09 f303 	lsl.w	r3, r9, r3
 800e830:	4313      	orrs	r3, r2
 800e832:	9304      	str	r3, [sp, #16]
 800e834:	46a2      	mov	sl, r4
 800e836:	e7d2      	b.n	800e7de <_vfiprintf_r+0xc6>
 800e838:	9b03      	ldr	r3, [sp, #12]
 800e83a:	1d19      	adds	r1, r3, #4
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	9103      	str	r1, [sp, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	bfbb      	ittet	lt
 800e844:	425b      	neglt	r3, r3
 800e846:	f042 0202 	orrlt.w	r2, r2, #2
 800e84a:	9307      	strge	r3, [sp, #28]
 800e84c:	9307      	strlt	r3, [sp, #28]
 800e84e:	bfb8      	it	lt
 800e850:	9204      	strlt	r2, [sp, #16]
 800e852:	7823      	ldrb	r3, [r4, #0]
 800e854:	2b2e      	cmp	r3, #46	@ 0x2e
 800e856:	d10a      	bne.n	800e86e <_vfiprintf_r+0x156>
 800e858:	7863      	ldrb	r3, [r4, #1]
 800e85a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e85c:	d132      	bne.n	800e8c4 <_vfiprintf_r+0x1ac>
 800e85e:	9b03      	ldr	r3, [sp, #12]
 800e860:	1d1a      	adds	r2, r3, #4
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	9203      	str	r2, [sp, #12]
 800e866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e86a:	3402      	adds	r4, #2
 800e86c:	9305      	str	r3, [sp, #20]
 800e86e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e944 <_vfiprintf_r+0x22c>
 800e872:	7821      	ldrb	r1, [r4, #0]
 800e874:	2203      	movs	r2, #3
 800e876:	4650      	mov	r0, sl
 800e878:	f7f1 fcca 	bl	8000210 <memchr>
 800e87c:	b138      	cbz	r0, 800e88e <_vfiprintf_r+0x176>
 800e87e:	9b04      	ldr	r3, [sp, #16]
 800e880:	eba0 000a 	sub.w	r0, r0, sl
 800e884:	2240      	movs	r2, #64	@ 0x40
 800e886:	4082      	lsls	r2, r0
 800e888:	4313      	orrs	r3, r2
 800e88a:	3401      	adds	r4, #1
 800e88c:	9304      	str	r3, [sp, #16]
 800e88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e892:	4829      	ldr	r0, [pc, #164]	@ (800e938 <_vfiprintf_r+0x220>)
 800e894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e898:	2206      	movs	r2, #6
 800e89a:	f7f1 fcb9 	bl	8000210 <memchr>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d03f      	beq.n	800e922 <_vfiprintf_r+0x20a>
 800e8a2:	4b26      	ldr	r3, [pc, #152]	@ (800e93c <_vfiprintf_r+0x224>)
 800e8a4:	bb1b      	cbnz	r3, 800e8ee <_vfiprintf_r+0x1d6>
 800e8a6:	9b03      	ldr	r3, [sp, #12]
 800e8a8:	3307      	adds	r3, #7
 800e8aa:	f023 0307 	bic.w	r3, r3, #7
 800e8ae:	3308      	adds	r3, #8
 800e8b0:	9303      	str	r3, [sp, #12]
 800e8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b4:	443b      	add	r3, r7
 800e8b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8b8:	e76a      	b.n	800e790 <_vfiprintf_r+0x78>
 800e8ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8be:	460c      	mov	r4, r1
 800e8c0:	2001      	movs	r0, #1
 800e8c2:	e7a8      	b.n	800e816 <_vfiprintf_r+0xfe>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	3401      	adds	r4, #1
 800e8c8:	9305      	str	r3, [sp, #20]
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	f04f 0c0a 	mov.w	ip, #10
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8d6:	3a30      	subs	r2, #48	@ 0x30
 800e8d8:	2a09      	cmp	r2, #9
 800e8da:	d903      	bls.n	800e8e4 <_vfiprintf_r+0x1cc>
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d0c6      	beq.n	800e86e <_vfiprintf_r+0x156>
 800e8e0:	9105      	str	r1, [sp, #20]
 800e8e2:	e7c4      	b.n	800e86e <_vfiprintf_r+0x156>
 800e8e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	e7f0      	b.n	800e8d0 <_vfiprintf_r+0x1b8>
 800e8ee:	ab03      	add	r3, sp, #12
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	462a      	mov	r2, r5
 800e8f4:	4b12      	ldr	r3, [pc, #72]	@ (800e940 <_vfiprintf_r+0x228>)
 800e8f6:	a904      	add	r1, sp, #16
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	f3af 8000 	nop.w
 800e8fe:	4607      	mov	r7, r0
 800e900:	1c78      	adds	r0, r7, #1
 800e902:	d1d6      	bne.n	800e8b2 <_vfiprintf_r+0x19a>
 800e904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e906:	07d9      	lsls	r1, r3, #31
 800e908:	d405      	bmi.n	800e916 <_vfiprintf_r+0x1fe>
 800e90a:	89ab      	ldrh	r3, [r5, #12]
 800e90c:	059a      	lsls	r2, r3, #22
 800e90e:	d402      	bmi.n	800e916 <_vfiprintf_r+0x1fe>
 800e910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e912:	f7fe fd13 	bl	800d33c <__retarget_lock_release_recursive>
 800e916:	89ab      	ldrh	r3, [r5, #12]
 800e918:	065b      	lsls	r3, r3, #25
 800e91a:	f53f af1f 	bmi.w	800e75c <_vfiprintf_r+0x44>
 800e91e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e920:	e71e      	b.n	800e760 <_vfiprintf_r+0x48>
 800e922:	ab03      	add	r3, sp, #12
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	462a      	mov	r2, r5
 800e928:	4b05      	ldr	r3, [pc, #20]	@ (800e940 <_vfiprintf_r+0x228>)
 800e92a:	a904      	add	r1, sp, #16
 800e92c:	4630      	mov	r0, r6
 800e92e:	f000 f879 	bl	800ea24 <_printf_i>
 800e932:	e7e4      	b.n	800e8fe <_vfiprintf_r+0x1e6>
 800e934:	08013728 	.word	0x08013728
 800e938:	08013732 	.word	0x08013732
 800e93c:	00000000 	.word	0x00000000
 800e940:	0800e6f3 	.word	0x0800e6f3
 800e944:	0801372e 	.word	0x0801372e

0800e948 <_printf_common>:
 800e948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e94c:	4616      	mov	r6, r2
 800e94e:	4698      	mov	r8, r3
 800e950:	688a      	ldr	r2, [r1, #8]
 800e952:	690b      	ldr	r3, [r1, #16]
 800e954:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e958:	4293      	cmp	r3, r2
 800e95a:	bfb8      	it	lt
 800e95c:	4613      	movlt	r3, r2
 800e95e:	6033      	str	r3, [r6, #0]
 800e960:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e964:	4607      	mov	r7, r0
 800e966:	460c      	mov	r4, r1
 800e968:	b10a      	cbz	r2, 800e96e <_printf_common+0x26>
 800e96a:	3301      	adds	r3, #1
 800e96c:	6033      	str	r3, [r6, #0]
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	0699      	lsls	r1, r3, #26
 800e972:	bf42      	ittt	mi
 800e974:	6833      	ldrmi	r3, [r6, #0]
 800e976:	3302      	addmi	r3, #2
 800e978:	6033      	strmi	r3, [r6, #0]
 800e97a:	6825      	ldr	r5, [r4, #0]
 800e97c:	f015 0506 	ands.w	r5, r5, #6
 800e980:	d106      	bne.n	800e990 <_printf_common+0x48>
 800e982:	f104 0a19 	add.w	sl, r4, #25
 800e986:	68e3      	ldr	r3, [r4, #12]
 800e988:	6832      	ldr	r2, [r6, #0]
 800e98a:	1a9b      	subs	r3, r3, r2
 800e98c:	42ab      	cmp	r3, r5
 800e98e:	dc26      	bgt.n	800e9de <_printf_common+0x96>
 800e990:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e994:	6822      	ldr	r2, [r4, #0]
 800e996:	3b00      	subs	r3, #0
 800e998:	bf18      	it	ne
 800e99a:	2301      	movne	r3, #1
 800e99c:	0692      	lsls	r2, r2, #26
 800e99e:	d42b      	bmi.n	800e9f8 <_printf_common+0xb0>
 800e9a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e9a4:	4641      	mov	r1, r8
 800e9a6:	4638      	mov	r0, r7
 800e9a8:	47c8      	blx	r9
 800e9aa:	3001      	adds	r0, #1
 800e9ac:	d01e      	beq.n	800e9ec <_printf_common+0xa4>
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	6922      	ldr	r2, [r4, #16]
 800e9b2:	f003 0306 	and.w	r3, r3, #6
 800e9b6:	2b04      	cmp	r3, #4
 800e9b8:	bf02      	ittt	eq
 800e9ba:	68e5      	ldreq	r5, [r4, #12]
 800e9bc:	6833      	ldreq	r3, [r6, #0]
 800e9be:	1aed      	subeq	r5, r5, r3
 800e9c0:	68a3      	ldr	r3, [r4, #8]
 800e9c2:	bf0c      	ite	eq
 800e9c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9c8:	2500      	movne	r5, #0
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	bfc4      	itt	gt
 800e9ce:	1a9b      	subgt	r3, r3, r2
 800e9d0:	18ed      	addgt	r5, r5, r3
 800e9d2:	2600      	movs	r6, #0
 800e9d4:	341a      	adds	r4, #26
 800e9d6:	42b5      	cmp	r5, r6
 800e9d8:	d11a      	bne.n	800ea10 <_printf_common+0xc8>
 800e9da:	2000      	movs	r0, #0
 800e9dc:	e008      	b.n	800e9f0 <_printf_common+0xa8>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	4652      	mov	r2, sl
 800e9e2:	4641      	mov	r1, r8
 800e9e4:	4638      	mov	r0, r7
 800e9e6:	47c8      	blx	r9
 800e9e8:	3001      	adds	r0, #1
 800e9ea:	d103      	bne.n	800e9f4 <_printf_common+0xac>
 800e9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9f4:	3501      	adds	r5, #1
 800e9f6:	e7c6      	b.n	800e986 <_printf_common+0x3e>
 800e9f8:	18e1      	adds	r1, r4, r3
 800e9fa:	1c5a      	adds	r2, r3, #1
 800e9fc:	2030      	movs	r0, #48	@ 0x30
 800e9fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea02:	4422      	add	r2, r4
 800ea04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ea08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ea0c:	3302      	adds	r3, #2
 800ea0e:	e7c7      	b.n	800e9a0 <_printf_common+0x58>
 800ea10:	2301      	movs	r3, #1
 800ea12:	4622      	mov	r2, r4
 800ea14:	4641      	mov	r1, r8
 800ea16:	4638      	mov	r0, r7
 800ea18:	47c8      	blx	r9
 800ea1a:	3001      	adds	r0, #1
 800ea1c:	d0e6      	beq.n	800e9ec <_printf_common+0xa4>
 800ea1e:	3601      	adds	r6, #1
 800ea20:	e7d9      	b.n	800e9d6 <_printf_common+0x8e>
	...

0800ea24 <_printf_i>:
 800ea24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea28:	7e0f      	ldrb	r7, [r1, #24]
 800ea2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea2c:	2f78      	cmp	r7, #120	@ 0x78
 800ea2e:	4691      	mov	r9, r2
 800ea30:	4680      	mov	r8, r0
 800ea32:	460c      	mov	r4, r1
 800ea34:	469a      	mov	sl, r3
 800ea36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ea3a:	d807      	bhi.n	800ea4c <_printf_i+0x28>
 800ea3c:	2f62      	cmp	r7, #98	@ 0x62
 800ea3e:	d80a      	bhi.n	800ea56 <_printf_i+0x32>
 800ea40:	2f00      	cmp	r7, #0
 800ea42:	f000 80d2 	beq.w	800ebea <_printf_i+0x1c6>
 800ea46:	2f58      	cmp	r7, #88	@ 0x58
 800ea48:	f000 80b9 	beq.w	800ebbe <_printf_i+0x19a>
 800ea4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ea54:	e03a      	b.n	800eacc <_printf_i+0xa8>
 800ea56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ea5a:	2b15      	cmp	r3, #21
 800ea5c:	d8f6      	bhi.n	800ea4c <_printf_i+0x28>
 800ea5e:	a101      	add	r1, pc, #4	@ (adr r1, 800ea64 <_printf_i+0x40>)
 800ea60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea64:	0800eabd 	.word	0x0800eabd
 800ea68:	0800ead1 	.word	0x0800ead1
 800ea6c:	0800ea4d 	.word	0x0800ea4d
 800ea70:	0800ea4d 	.word	0x0800ea4d
 800ea74:	0800ea4d 	.word	0x0800ea4d
 800ea78:	0800ea4d 	.word	0x0800ea4d
 800ea7c:	0800ead1 	.word	0x0800ead1
 800ea80:	0800ea4d 	.word	0x0800ea4d
 800ea84:	0800ea4d 	.word	0x0800ea4d
 800ea88:	0800ea4d 	.word	0x0800ea4d
 800ea8c:	0800ea4d 	.word	0x0800ea4d
 800ea90:	0800ebd1 	.word	0x0800ebd1
 800ea94:	0800eafb 	.word	0x0800eafb
 800ea98:	0800eb8b 	.word	0x0800eb8b
 800ea9c:	0800ea4d 	.word	0x0800ea4d
 800eaa0:	0800ea4d 	.word	0x0800ea4d
 800eaa4:	0800ebf3 	.word	0x0800ebf3
 800eaa8:	0800ea4d 	.word	0x0800ea4d
 800eaac:	0800eafb 	.word	0x0800eafb
 800eab0:	0800ea4d 	.word	0x0800ea4d
 800eab4:	0800ea4d 	.word	0x0800ea4d
 800eab8:	0800eb93 	.word	0x0800eb93
 800eabc:	6833      	ldr	r3, [r6, #0]
 800eabe:	1d1a      	adds	r2, r3, #4
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	6032      	str	r2, [r6, #0]
 800eac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eacc:	2301      	movs	r3, #1
 800eace:	e09d      	b.n	800ec0c <_printf_i+0x1e8>
 800ead0:	6833      	ldr	r3, [r6, #0]
 800ead2:	6820      	ldr	r0, [r4, #0]
 800ead4:	1d19      	adds	r1, r3, #4
 800ead6:	6031      	str	r1, [r6, #0]
 800ead8:	0606      	lsls	r6, r0, #24
 800eada:	d501      	bpl.n	800eae0 <_printf_i+0xbc>
 800eadc:	681d      	ldr	r5, [r3, #0]
 800eade:	e003      	b.n	800eae8 <_printf_i+0xc4>
 800eae0:	0645      	lsls	r5, r0, #25
 800eae2:	d5fb      	bpl.n	800eadc <_printf_i+0xb8>
 800eae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eae8:	2d00      	cmp	r5, #0
 800eaea:	da03      	bge.n	800eaf4 <_printf_i+0xd0>
 800eaec:	232d      	movs	r3, #45	@ 0x2d
 800eaee:	426d      	negs	r5, r5
 800eaf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eaf4:	4859      	ldr	r0, [pc, #356]	@ (800ec5c <_printf_i+0x238>)
 800eaf6:	230a      	movs	r3, #10
 800eaf8:	e011      	b.n	800eb1e <_printf_i+0xfa>
 800eafa:	6821      	ldr	r1, [r4, #0]
 800eafc:	6833      	ldr	r3, [r6, #0]
 800eafe:	0608      	lsls	r0, r1, #24
 800eb00:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb04:	d402      	bmi.n	800eb0c <_printf_i+0xe8>
 800eb06:	0649      	lsls	r1, r1, #25
 800eb08:	bf48      	it	mi
 800eb0a:	b2ad      	uxthmi	r5, r5
 800eb0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800eb0e:	4853      	ldr	r0, [pc, #332]	@ (800ec5c <_printf_i+0x238>)
 800eb10:	6033      	str	r3, [r6, #0]
 800eb12:	bf14      	ite	ne
 800eb14:	230a      	movne	r3, #10
 800eb16:	2308      	moveq	r3, #8
 800eb18:	2100      	movs	r1, #0
 800eb1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eb1e:	6866      	ldr	r6, [r4, #4]
 800eb20:	60a6      	str	r6, [r4, #8]
 800eb22:	2e00      	cmp	r6, #0
 800eb24:	bfa2      	ittt	ge
 800eb26:	6821      	ldrge	r1, [r4, #0]
 800eb28:	f021 0104 	bicge.w	r1, r1, #4
 800eb2c:	6021      	strge	r1, [r4, #0]
 800eb2e:	b90d      	cbnz	r5, 800eb34 <_printf_i+0x110>
 800eb30:	2e00      	cmp	r6, #0
 800eb32:	d04b      	beq.n	800ebcc <_printf_i+0x1a8>
 800eb34:	4616      	mov	r6, r2
 800eb36:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb3a:	fb03 5711 	mls	r7, r3, r1, r5
 800eb3e:	5dc7      	ldrb	r7, [r0, r7]
 800eb40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb44:	462f      	mov	r7, r5
 800eb46:	42bb      	cmp	r3, r7
 800eb48:	460d      	mov	r5, r1
 800eb4a:	d9f4      	bls.n	800eb36 <_printf_i+0x112>
 800eb4c:	2b08      	cmp	r3, #8
 800eb4e:	d10b      	bne.n	800eb68 <_printf_i+0x144>
 800eb50:	6823      	ldr	r3, [r4, #0]
 800eb52:	07df      	lsls	r7, r3, #31
 800eb54:	d508      	bpl.n	800eb68 <_printf_i+0x144>
 800eb56:	6923      	ldr	r3, [r4, #16]
 800eb58:	6861      	ldr	r1, [r4, #4]
 800eb5a:	4299      	cmp	r1, r3
 800eb5c:	bfde      	ittt	le
 800eb5e:	2330      	movle	r3, #48	@ 0x30
 800eb60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb64:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb68:	1b92      	subs	r2, r2, r6
 800eb6a:	6122      	str	r2, [r4, #16]
 800eb6c:	f8cd a000 	str.w	sl, [sp]
 800eb70:	464b      	mov	r3, r9
 800eb72:	aa03      	add	r2, sp, #12
 800eb74:	4621      	mov	r1, r4
 800eb76:	4640      	mov	r0, r8
 800eb78:	f7ff fee6 	bl	800e948 <_printf_common>
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	d14a      	bne.n	800ec16 <_printf_i+0x1f2>
 800eb80:	f04f 30ff 	mov.w	r0, #4294967295
 800eb84:	b004      	add	sp, #16
 800eb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	f043 0320 	orr.w	r3, r3, #32
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	4833      	ldr	r0, [pc, #204]	@ (800ec60 <_printf_i+0x23c>)
 800eb94:	2778      	movs	r7, #120	@ 0x78
 800eb96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	6831      	ldr	r1, [r6, #0]
 800eb9e:	061f      	lsls	r7, r3, #24
 800eba0:	f851 5b04 	ldr.w	r5, [r1], #4
 800eba4:	d402      	bmi.n	800ebac <_printf_i+0x188>
 800eba6:	065f      	lsls	r7, r3, #25
 800eba8:	bf48      	it	mi
 800ebaa:	b2ad      	uxthmi	r5, r5
 800ebac:	6031      	str	r1, [r6, #0]
 800ebae:	07d9      	lsls	r1, r3, #31
 800ebb0:	bf44      	itt	mi
 800ebb2:	f043 0320 	orrmi.w	r3, r3, #32
 800ebb6:	6023      	strmi	r3, [r4, #0]
 800ebb8:	b11d      	cbz	r5, 800ebc2 <_printf_i+0x19e>
 800ebba:	2310      	movs	r3, #16
 800ebbc:	e7ac      	b.n	800eb18 <_printf_i+0xf4>
 800ebbe:	4827      	ldr	r0, [pc, #156]	@ (800ec5c <_printf_i+0x238>)
 800ebc0:	e7e9      	b.n	800eb96 <_printf_i+0x172>
 800ebc2:	6823      	ldr	r3, [r4, #0]
 800ebc4:	f023 0320 	bic.w	r3, r3, #32
 800ebc8:	6023      	str	r3, [r4, #0]
 800ebca:	e7f6      	b.n	800ebba <_printf_i+0x196>
 800ebcc:	4616      	mov	r6, r2
 800ebce:	e7bd      	b.n	800eb4c <_printf_i+0x128>
 800ebd0:	6833      	ldr	r3, [r6, #0]
 800ebd2:	6825      	ldr	r5, [r4, #0]
 800ebd4:	6961      	ldr	r1, [r4, #20]
 800ebd6:	1d18      	adds	r0, r3, #4
 800ebd8:	6030      	str	r0, [r6, #0]
 800ebda:	062e      	lsls	r6, r5, #24
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	d501      	bpl.n	800ebe4 <_printf_i+0x1c0>
 800ebe0:	6019      	str	r1, [r3, #0]
 800ebe2:	e002      	b.n	800ebea <_printf_i+0x1c6>
 800ebe4:	0668      	lsls	r0, r5, #25
 800ebe6:	d5fb      	bpl.n	800ebe0 <_printf_i+0x1bc>
 800ebe8:	8019      	strh	r1, [r3, #0]
 800ebea:	2300      	movs	r3, #0
 800ebec:	6123      	str	r3, [r4, #16]
 800ebee:	4616      	mov	r6, r2
 800ebf0:	e7bc      	b.n	800eb6c <_printf_i+0x148>
 800ebf2:	6833      	ldr	r3, [r6, #0]
 800ebf4:	1d1a      	adds	r2, r3, #4
 800ebf6:	6032      	str	r2, [r6, #0]
 800ebf8:	681e      	ldr	r6, [r3, #0]
 800ebfa:	6862      	ldr	r2, [r4, #4]
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f7f1 fb06 	bl	8000210 <memchr>
 800ec04:	b108      	cbz	r0, 800ec0a <_printf_i+0x1e6>
 800ec06:	1b80      	subs	r0, r0, r6
 800ec08:	6060      	str	r0, [r4, #4]
 800ec0a:	6863      	ldr	r3, [r4, #4]
 800ec0c:	6123      	str	r3, [r4, #16]
 800ec0e:	2300      	movs	r3, #0
 800ec10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec14:	e7aa      	b.n	800eb6c <_printf_i+0x148>
 800ec16:	6923      	ldr	r3, [r4, #16]
 800ec18:	4632      	mov	r2, r6
 800ec1a:	4649      	mov	r1, r9
 800ec1c:	4640      	mov	r0, r8
 800ec1e:	47d0      	blx	sl
 800ec20:	3001      	adds	r0, #1
 800ec22:	d0ad      	beq.n	800eb80 <_printf_i+0x15c>
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	079b      	lsls	r3, r3, #30
 800ec28:	d413      	bmi.n	800ec52 <_printf_i+0x22e>
 800ec2a:	68e0      	ldr	r0, [r4, #12]
 800ec2c:	9b03      	ldr	r3, [sp, #12]
 800ec2e:	4298      	cmp	r0, r3
 800ec30:	bfb8      	it	lt
 800ec32:	4618      	movlt	r0, r3
 800ec34:	e7a6      	b.n	800eb84 <_printf_i+0x160>
 800ec36:	2301      	movs	r3, #1
 800ec38:	4632      	mov	r2, r6
 800ec3a:	4649      	mov	r1, r9
 800ec3c:	4640      	mov	r0, r8
 800ec3e:	47d0      	blx	sl
 800ec40:	3001      	adds	r0, #1
 800ec42:	d09d      	beq.n	800eb80 <_printf_i+0x15c>
 800ec44:	3501      	adds	r5, #1
 800ec46:	68e3      	ldr	r3, [r4, #12]
 800ec48:	9903      	ldr	r1, [sp, #12]
 800ec4a:	1a5b      	subs	r3, r3, r1
 800ec4c:	42ab      	cmp	r3, r5
 800ec4e:	dcf2      	bgt.n	800ec36 <_printf_i+0x212>
 800ec50:	e7eb      	b.n	800ec2a <_printf_i+0x206>
 800ec52:	2500      	movs	r5, #0
 800ec54:	f104 0619 	add.w	r6, r4, #25
 800ec58:	e7f5      	b.n	800ec46 <_printf_i+0x222>
 800ec5a:	bf00      	nop
 800ec5c:	08013739 	.word	0x08013739
 800ec60:	0801374a 	.word	0x0801374a

0800ec64 <__sflush_r>:
 800ec64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec6c:	0716      	lsls	r6, r2, #28
 800ec6e:	4605      	mov	r5, r0
 800ec70:	460c      	mov	r4, r1
 800ec72:	d454      	bmi.n	800ed1e <__sflush_r+0xba>
 800ec74:	684b      	ldr	r3, [r1, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	dc02      	bgt.n	800ec80 <__sflush_r+0x1c>
 800ec7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	dd48      	ble.n	800ed12 <__sflush_r+0xae>
 800ec80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec82:	2e00      	cmp	r6, #0
 800ec84:	d045      	beq.n	800ed12 <__sflush_r+0xae>
 800ec86:	2300      	movs	r3, #0
 800ec88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec8c:	682f      	ldr	r7, [r5, #0]
 800ec8e:	6a21      	ldr	r1, [r4, #32]
 800ec90:	602b      	str	r3, [r5, #0]
 800ec92:	d030      	beq.n	800ecf6 <__sflush_r+0x92>
 800ec94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec96:	89a3      	ldrh	r3, [r4, #12]
 800ec98:	0759      	lsls	r1, r3, #29
 800ec9a:	d505      	bpl.n	800eca8 <__sflush_r+0x44>
 800ec9c:	6863      	ldr	r3, [r4, #4]
 800ec9e:	1ad2      	subs	r2, r2, r3
 800eca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eca2:	b10b      	cbz	r3, 800eca8 <__sflush_r+0x44>
 800eca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eca6:	1ad2      	subs	r2, r2, r3
 800eca8:	2300      	movs	r3, #0
 800ecaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ecac:	6a21      	ldr	r1, [r4, #32]
 800ecae:	4628      	mov	r0, r5
 800ecb0:	47b0      	blx	r6
 800ecb2:	1c43      	adds	r3, r0, #1
 800ecb4:	89a3      	ldrh	r3, [r4, #12]
 800ecb6:	d106      	bne.n	800ecc6 <__sflush_r+0x62>
 800ecb8:	6829      	ldr	r1, [r5, #0]
 800ecba:	291d      	cmp	r1, #29
 800ecbc:	d82b      	bhi.n	800ed16 <__sflush_r+0xb2>
 800ecbe:	4a2a      	ldr	r2, [pc, #168]	@ (800ed68 <__sflush_r+0x104>)
 800ecc0:	410a      	asrs	r2, r1
 800ecc2:	07d6      	lsls	r6, r2, #31
 800ecc4:	d427      	bmi.n	800ed16 <__sflush_r+0xb2>
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	6062      	str	r2, [r4, #4]
 800ecca:	04d9      	lsls	r1, r3, #19
 800eccc:	6922      	ldr	r2, [r4, #16]
 800ecce:	6022      	str	r2, [r4, #0]
 800ecd0:	d504      	bpl.n	800ecdc <__sflush_r+0x78>
 800ecd2:	1c42      	adds	r2, r0, #1
 800ecd4:	d101      	bne.n	800ecda <__sflush_r+0x76>
 800ecd6:	682b      	ldr	r3, [r5, #0]
 800ecd8:	b903      	cbnz	r3, 800ecdc <__sflush_r+0x78>
 800ecda:	6560      	str	r0, [r4, #84]	@ 0x54
 800ecdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ecde:	602f      	str	r7, [r5, #0]
 800ece0:	b1b9      	cbz	r1, 800ed12 <__sflush_r+0xae>
 800ece2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ece6:	4299      	cmp	r1, r3
 800ece8:	d002      	beq.n	800ecf0 <__sflush_r+0x8c>
 800ecea:	4628      	mov	r0, r5
 800ecec:	f7fe fb36 	bl	800d35c <_free_r>
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecf4:	e00d      	b.n	800ed12 <__sflush_r+0xae>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	47b0      	blx	r6
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	1c50      	adds	r0, r2, #1
 800ed00:	d1c9      	bne.n	800ec96 <__sflush_r+0x32>
 800ed02:	682b      	ldr	r3, [r5, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d0c6      	beq.n	800ec96 <__sflush_r+0x32>
 800ed08:	2b1d      	cmp	r3, #29
 800ed0a:	d001      	beq.n	800ed10 <__sflush_r+0xac>
 800ed0c:	2b16      	cmp	r3, #22
 800ed0e:	d11e      	bne.n	800ed4e <__sflush_r+0xea>
 800ed10:	602f      	str	r7, [r5, #0]
 800ed12:	2000      	movs	r0, #0
 800ed14:	e022      	b.n	800ed5c <__sflush_r+0xf8>
 800ed16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed1a:	b21b      	sxth	r3, r3
 800ed1c:	e01b      	b.n	800ed56 <__sflush_r+0xf2>
 800ed1e:	690f      	ldr	r7, [r1, #16]
 800ed20:	2f00      	cmp	r7, #0
 800ed22:	d0f6      	beq.n	800ed12 <__sflush_r+0xae>
 800ed24:	0793      	lsls	r3, r2, #30
 800ed26:	680e      	ldr	r6, [r1, #0]
 800ed28:	bf08      	it	eq
 800ed2a:	694b      	ldreq	r3, [r1, #20]
 800ed2c:	600f      	str	r7, [r1, #0]
 800ed2e:	bf18      	it	ne
 800ed30:	2300      	movne	r3, #0
 800ed32:	eba6 0807 	sub.w	r8, r6, r7
 800ed36:	608b      	str	r3, [r1, #8]
 800ed38:	f1b8 0f00 	cmp.w	r8, #0
 800ed3c:	dde9      	ble.n	800ed12 <__sflush_r+0xae>
 800ed3e:	6a21      	ldr	r1, [r4, #32]
 800ed40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ed42:	4643      	mov	r3, r8
 800ed44:	463a      	mov	r2, r7
 800ed46:	4628      	mov	r0, r5
 800ed48:	47b0      	blx	r6
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	dc08      	bgt.n	800ed60 <__sflush_r+0xfc>
 800ed4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed56:	81a3      	strh	r3, [r4, #12]
 800ed58:	f04f 30ff 	mov.w	r0, #4294967295
 800ed5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed60:	4407      	add	r7, r0
 800ed62:	eba8 0800 	sub.w	r8, r8, r0
 800ed66:	e7e7      	b.n	800ed38 <__sflush_r+0xd4>
 800ed68:	dfbffffe 	.word	0xdfbffffe

0800ed6c <_fflush_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	690b      	ldr	r3, [r1, #16]
 800ed70:	4605      	mov	r5, r0
 800ed72:	460c      	mov	r4, r1
 800ed74:	b913      	cbnz	r3, 800ed7c <_fflush_r+0x10>
 800ed76:	2500      	movs	r5, #0
 800ed78:	4628      	mov	r0, r5
 800ed7a:	bd38      	pop	{r3, r4, r5, pc}
 800ed7c:	b118      	cbz	r0, 800ed86 <_fflush_r+0x1a>
 800ed7e:	6a03      	ldr	r3, [r0, #32]
 800ed80:	b90b      	cbnz	r3, 800ed86 <_fflush_r+0x1a>
 800ed82:	f7fe f8d9 	bl	800cf38 <__sinit>
 800ed86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d0f3      	beq.n	800ed76 <_fflush_r+0xa>
 800ed8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed90:	07d0      	lsls	r0, r2, #31
 800ed92:	d404      	bmi.n	800ed9e <_fflush_r+0x32>
 800ed94:	0599      	lsls	r1, r3, #22
 800ed96:	d402      	bmi.n	800ed9e <_fflush_r+0x32>
 800ed98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed9a:	f7fe face 	bl	800d33a <__retarget_lock_acquire_recursive>
 800ed9e:	4628      	mov	r0, r5
 800eda0:	4621      	mov	r1, r4
 800eda2:	f7ff ff5f 	bl	800ec64 <__sflush_r>
 800eda6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eda8:	07da      	lsls	r2, r3, #31
 800edaa:	4605      	mov	r5, r0
 800edac:	d4e4      	bmi.n	800ed78 <_fflush_r+0xc>
 800edae:	89a3      	ldrh	r3, [r4, #12]
 800edb0:	059b      	lsls	r3, r3, #22
 800edb2:	d4e1      	bmi.n	800ed78 <_fflush_r+0xc>
 800edb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edb6:	f7fe fac1 	bl	800d33c <__retarget_lock_release_recursive>
 800edba:	e7dd      	b.n	800ed78 <_fflush_r+0xc>

0800edbc <__swbuf_r>:
 800edbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edbe:	460e      	mov	r6, r1
 800edc0:	4614      	mov	r4, r2
 800edc2:	4605      	mov	r5, r0
 800edc4:	b118      	cbz	r0, 800edce <__swbuf_r+0x12>
 800edc6:	6a03      	ldr	r3, [r0, #32]
 800edc8:	b90b      	cbnz	r3, 800edce <__swbuf_r+0x12>
 800edca:	f7fe f8b5 	bl	800cf38 <__sinit>
 800edce:	69a3      	ldr	r3, [r4, #24]
 800edd0:	60a3      	str	r3, [r4, #8]
 800edd2:	89a3      	ldrh	r3, [r4, #12]
 800edd4:	071a      	lsls	r2, r3, #28
 800edd6:	d501      	bpl.n	800eddc <__swbuf_r+0x20>
 800edd8:	6923      	ldr	r3, [r4, #16]
 800edda:	b943      	cbnz	r3, 800edee <__swbuf_r+0x32>
 800eddc:	4621      	mov	r1, r4
 800edde:	4628      	mov	r0, r5
 800ede0:	f000 f82a 	bl	800ee38 <__swsetup_r>
 800ede4:	b118      	cbz	r0, 800edee <__swbuf_r+0x32>
 800ede6:	f04f 37ff 	mov.w	r7, #4294967295
 800edea:	4638      	mov	r0, r7
 800edec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edee:	6823      	ldr	r3, [r4, #0]
 800edf0:	6922      	ldr	r2, [r4, #16]
 800edf2:	1a98      	subs	r0, r3, r2
 800edf4:	6963      	ldr	r3, [r4, #20]
 800edf6:	b2f6      	uxtb	r6, r6
 800edf8:	4283      	cmp	r3, r0
 800edfa:	4637      	mov	r7, r6
 800edfc:	dc05      	bgt.n	800ee0a <__swbuf_r+0x4e>
 800edfe:	4621      	mov	r1, r4
 800ee00:	4628      	mov	r0, r5
 800ee02:	f7ff ffb3 	bl	800ed6c <_fflush_r>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	d1ed      	bne.n	800ede6 <__swbuf_r+0x2a>
 800ee0a:	68a3      	ldr	r3, [r4, #8]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	60a3      	str	r3, [r4, #8]
 800ee10:	6823      	ldr	r3, [r4, #0]
 800ee12:	1c5a      	adds	r2, r3, #1
 800ee14:	6022      	str	r2, [r4, #0]
 800ee16:	701e      	strb	r6, [r3, #0]
 800ee18:	6962      	ldr	r2, [r4, #20]
 800ee1a:	1c43      	adds	r3, r0, #1
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d004      	beq.n	800ee2a <__swbuf_r+0x6e>
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	07db      	lsls	r3, r3, #31
 800ee24:	d5e1      	bpl.n	800edea <__swbuf_r+0x2e>
 800ee26:	2e0a      	cmp	r6, #10
 800ee28:	d1df      	bne.n	800edea <__swbuf_r+0x2e>
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	4628      	mov	r0, r5
 800ee2e:	f7ff ff9d 	bl	800ed6c <_fflush_r>
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d0d9      	beq.n	800edea <__swbuf_r+0x2e>
 800ee36:	e7d6      	b.n	800ede6 <__swbuf_r+0x2a>

0800ee38 <__swsetup_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	4b29      	ldr	r3, [pc, #164]	@ (800eee0 <__swsetup_r+0xa8>)
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	6818      	ldr	r0, [r3, #0]
 800ee40:	460c      	mov	r4, r1
 800ee42:	b118      	cbz	r0, 800ee4c <__swsetup_r+0x14>
 800ee44:	6a03      	ldr	r3, [r0, #32]
 800ee46:	b90b      	cbnz	r3, 800ee4c <__swsetup_r+0x14>
 800ee48:	f7fe f876 	bl	800cf38 <__sinit>
 800ee4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee50:	0719      	lsls	r1, r3, #28
 800ee52:	d422      	bmi.n	800ee9a <__swsetup_r+0x62>
 800ee54:	06da      	lsls	r2, r3, #27
 800ee56:	d407      	bmi.n	800ee68 <__swsetup_r+0x30>
 800ee58:	2209      	movs	r2, #9
 800ee5a:	602a      	str	r2, [r5, #0]
 800ee5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee60:	81a3      	strh	r3, [r4, #12]
 800ee62:	f04f 30ff 	mov.w	r0, #4294967295
 800ee66:	e033      	b.n	800eed0 <__swsetup_r+0x98>
 800ee68:	0758      	lsls	r0, r3, #29
 800ee6a:	d512      	bpl.n	800ee92 <__swsetup_r+0x5a>
 800ee6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee6e:	b141      	cbz	r1, 800ee82 <__swsetup_r+0x4a>
 800ee70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee74:	4299      	cmp	r1, r3
 800ee76:	d002      	beq.n	800ee7e <__swsetup_r+0x46>
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f7fe fa6f 	bl	800d35c <_free_r>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee82:	89a3      	ldrh	r3, [r4, #12]
 800ee84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ee88:	81a3      	strh	r3, [r4, #12]
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	6063      	str	r3, [r4, #4]
 800ee8e:	6923      	ldr	r3, [r4, #16]
 800ee90:	6023      	str	r3, [r4, #0]
 800ee92:	89a3      	ldrh	r3, [r4, #12]
 800ee94:	f043 0308 	orr.w	r3, r3, #8
 800ee98:	81a3      	strh	r3, [r4, #12]
 800ee9a:	6923      	ldr	r3, [r4, #16]
 800ee9c:	b94b      	cbnz	r3, 800eeb2 <__swsetup_r+0x7a>
 800ee9e:	89a3      	ldrh	r3, [r4, #12]
 800eea0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eea8:	d003      	beq.n	800eeb2 <__swsetup_r+0x7a>
 800eeaa:	4621      	mov	r1, r4
 800eeac:	4628      	mov	r0, r5
 800eeae:	f000 f83f 	bl	800ef30 <__smakebuf_r>
 800eeb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeb6:	f013 0201 	ands.w	r2, r3, #1
 800eeba:	d00a      	beq.n	800eed2 <__swsetup_r+0x9a>
 800eebc:	2200      	movs	r2, #0
 800eebe:	60a2      	str	r2, [r4, #8]
 800eec0:	6962      	ldr	r2, [r4, #20]
 800eec2:	4252      	negs	r2, r2
 800eec4:	61a2      	str	r2, [r4, #24]
 800eec6:	6922      	ldr	r2, [r4, #16]
 800eec8:	b942      	cbnz	r2, 800eedc <__swsetup_r+0xa4>
 800eeca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eece:	d1c5      	bne.n	800ee5c <__swsetup_r+0x24>
 800eed0:	bd38      	pop	{r3, r4, r5, pc}
 800eed2:	0799      	lsls	r1, r3, #30
 800eed4:	bf58      	it	pl
 800eed6:	6962      	ldrpl	r2, [r4, #20]
 800eed8:	60a2      	str	r2, [r4, #8]
 800eeda:	e7f4      	b.n	800eec6 <__swsetup_r+0x8e>
 800eedc:	2000      	movs	r0, #0
 800eede:	e7f7      	b.n	800eed0 <__swsetup_r+0x98>
 800eee0:	20000668 	.word	0x20000668

0800eee4 <__swhatbuf_r>:
 800eee4:	b570      	push	{r4, r5, r6, lr}
 800eee6:	460c      	mov	r4, r1
 800eee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeec:	2900      	cmp	r1, #0
 800eeee:	b096      	sub	sp, #88	@ 0x58
 800eef0:	4615      	mov	r5, r2
 800eef2:	461e      	mov	r6, r3
 800eef4:	da0d      	bge.n	800ef12 <__swhatbuf_r+0x2e>
 800eef6:	89a3      	ldrh	r3, [r4, #12]
 800eef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eefc:	f04f 0100 	mov.w	r1, #0
 800ef00:	bf14      	ite	ne
 800ef02:	2340      	movne	r3, #64	@ 0x40
 800ef04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef08:	2000      	movs	r0, #0
 800ef0a:	6031      	str	r1, [r6, #0]
 800ef0c:	602b      	str	r3, [r5, #0]
 800ef0e:	b016      	add	sp, #88	@ 0x58
 800ef10:	bd70      	pop	{r4, r5, r6, pc}
 800ef12:	466a      	mov	r2, sp
 800ef14:	f000 f848 	bl	800efa8 <_fstat_r>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	dbec      	blt.n	800eef6 <__swhatbuf_r+0x12>
 800ef1c:	9901      	ldr	r1, [sp, #4]
 800ef1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ef22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ef26:	4259      	negs	r1, r3
 800ef28:	4159      	adcs	r1, r3
 800ef2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef2e:	e7eb      	b.n	800ef08 <__swhatbuf_r+0x24>

0800ef30 <__smakebuf_r>:
 800ef30:	898b      	ldrh	r3, [r1, #12]
 800ef32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef34:	079d      	lsls	r5, r3, #30
 800ef36:	4606      	mov	r6, r0
 800ef38:	460c      	mov	r4, r1
 800ef3a:	d507      	bpl.n	800ef4c <__smakebuf_r+0x1c>
 800ef3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ef40:	6023      	str	r3, [r4, #0]
 800ef42:	6123      	str	r3, [r4, #16]
 800ef44:	2301      	movs	r3, #1
 800ef46:	6163      	str	r3, [r4, #20]
 800ef48:	b003      	add	sp, #12
 800ef4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef4c:	ab01      	add	r3, sp, #4
 800ef4e:	466a      	mov	r2, sp
 800ef50:	f7ff ffc8 	bl	800eee4 <__swhatbuf_r>
 800ef54:	9f00      	ldr	r7, [sp, #0]
 800ef56:	4605      	mov	r5, r0
 800ef58:	4639      	mov	r1, r7
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f7fd f898 	bl	800c090 <_malloc_r>
 800ef60:	b948      	cbnz	r0, 800ef76 <__smakebuf_r+0x46>
 800ef62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef66:	059a      	lsls	r2, r3, #22
 800ef68:	d4ee      	bmi.n	800ef48 <__smakebuf_r+0x18>
 800ef6a:	f023 0303 	bic.w	r3, r3, #3
 800ef6e:	f043 0302 	orr.w	r3, r3, #2
 800ef72:	81a3      	strh	r3, [r4, #12]
 800ef74:	e7e2      	b.n	800ef3c <__smakebuf_r+0xc>
 800ef76:	89a3      	ldrh	r3, [r4, #12]
 800ef78:	6020      	str	r0, [r4, #0]
 800ef7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef7e:	81a3      	strh	r3, [r4, #12]
 800ef80:	9b01      	ldr	r3, [sp, #4]
 800ef82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ef86:	b15b      	cbz	r3, 800efa0 <__smakebuf_r+0x70>
 800ef88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f000 f81d 	bl	800efcc <_isatty_r>
 800ef92:	b128      	cbz	r0, 800efa0 <__smakebuf_r+0x70>
 800ef94:	89a3      	ldrh	r3, [r4, #12]
 800ef96:	f023 0303 	bic.w	r3, r3, #3
 800ef9a:	f043 0301 	orr.w	r3, r3, #1
 800ef9e:	81a3      	strh	r3, [r4, #12]
 800efa0:	89a3      	ldrh	r3, [r4, #12]
 800efa2:	431d      	orrs	r5, r3
 800efa4:	81a5      	strh	r5, [r4, #12]
 800efa6:	e7cf      	b.n	800ef48 <__smakebuf_r+0x18>

0800efa8 <_fstat_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4d07      	ldr	r5, [pc, #28]	@ (800efc8 <_fstat_r+0x20>)
 800efac:	2300      	movs	r3, #0
 800efae:	4604      	mov	r4, r0
 800efb0:	4608      	mov	r0, r1
 800efb2:	4611      	mov	r1, r2
 800efb4:	602b      	str	r3, [r5, #0]
 800efb6:	f7f6 faa2 	bl	80054fe <_fstat>
 800efba:	1c43      	adds	r3, r0, #1
 800efbc:	d102      	bne.n	800efc4 <_fstat_r+0x1c>
 800efbe:	682b      	ldr	r3, [r5, #0]
 800efc0:	b103      	cbz	r3, 800efc4 <_fstat_r+0x1c>
 800efc2:	6023      	str	r3, [r4, #0]
 800efc4:	bd38      	pop	{r3, r4, r5, pc}
 800efc6:	bf00      	nop
 800efc8:	20000b3c 	.word	0x20000b3c

0800efcc <_isatty_r>:
 800efcc:	b538      	push	{r3, r4, r5, lr}
 800efce:	4d06      	ldr	r5, [pc, #24]	@ (800efe8 <_isatty_r+0x1c>)
 800efd0:	2300      	movs	r3, #0
 800efd2:	4604      	mov	r4, r0
 800efd4:	4608      	mov	r0, r1
 800efd6:	602b      	str	r3, [r5, #0]
 800efd8:	f7f6 faa1 	bl	800551e <_isatty>
 800efdc:	1c43      	adds	r3, r0, #1
 800efde:	d102      	bne.n	800efe6 <_isatty_r+0x1a>
 800efe0:	682b      	ldr	r3, [r5, #0]
 800efe2:	b103      	cbz	r3, 800efe6 <_isatty_r+0x1a>
 800efe4:	6023      	str	r3, [r4, #0]
 800efe6:	bd38      	pop	{r3, r4, r5, pc}
 800efe8:	20000b3c 	.word	0x20000b3c

0800efec <_init>:
 800efec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efee:	bf00      	nop
 800eff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eff2:	bc08      	pop	{r3}
 800eff4:	469e      	mov	lr, r3
 800eff6:	4770      	bx	lr

0800eff8 <_fini>:
 800eff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effa:	bf00      	nop
 800effc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800effe:	bc08      	pop	{r3}
 800f000:	469e      	mov	lr, r3
 800f002:	4770      	bx	lr
