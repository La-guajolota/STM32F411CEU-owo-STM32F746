/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.03.2024 23:51:04

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1664;
#else
constexpr int kTensorArenaSize = 640;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,4 } };
const ALIGN(16) float tensor_data1[30] = { 0, 0.019756779074668884, -0.0055664083920419216, -0.022468436509370804, 0.030569931492209435, 0.026430720463395119, 0, -0.020813396200537682, -0.013712095096707344, -0.034353144466876984, -0.017754495143890381, 0, 0.031731199473142624, 0, 0.034658744931221008, 2.8574095267686062e-05, -0.004426965955644846, 0.0028993184678256512, 0.03002215176820755, 0, -0.0093918293714523315, -0.005505451001226902, 0, 0, 0, 0, 0, 0, -0.022634439170360565, -0.020206457003951073, };
const TfArray<1, int> tensor_dimension1 = { 1, { 30 } };
const ALIGN(16) float tensor_data2[50] = { -0.028634097427129745, 0, 0.024190250784158707, 0, -0.021160295233130455, 0, 0, -0.0023966659791767597, -0.022575931623578072, 0, 0.015395700931549072, 0, 0, 0.0091730523854494095, 0.038664955645799637, -0.012398828752338886, 0, 0.021979503333568573, 0, 0, 0, -0.012163827195763588, -0.014297564513981342, -0.017375724390149117, -0.0094824759289622307, -0.021460577845573425, 0, 0, -0.022125218063592911, 0, 0.029386201873421669, -0.019440345466136932, 0, 0, 0, -0.0088632525876164436, 0, -0.025934116914868355, 0, 0.019630597904324532, 0, 0.0067889881320297718, 0.025773050263524055, 0.023593641817569733, 0.0030654845759272575, 0.019708426669239998, 0.013301298022270203, -0.011537964455783367, -0.0045489352196455002, 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 50 } };
const ALIGN(8) float tensor_data3[3] = { 0.030687326565384865, 0.014270098879933357, -0.022369461134076118, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(16) float tensor_data4[50*4] = { 
  -0.027863003313541412, 0.1198330894112587, 0.15749216079711914, 0.081148386001586914, 
  -0.32271546125411987, 0.29378089308738708, 0.054635435342788696, -0.12997452914714813, 
  0.23354451358318329, 0.029175927862524986, -0.1669992208480835, -0.32443445920944214, 
  -0.27278909087181091, -0.18067798018455505, 0.19132640957832336, 0.30774202942848206, 
  0.24638679623603821, -0.2000095546245575, -0.26979678869247437, 0.089169718325138092, 
  -0.098442241549491882, -0.24607102572917938, -0.26121664047241211, 0.053858041763305664, 
  0.16043210029602051, -0.13143858313560486, -0.32265639305114746, -0.23918811976909637, 
  0.23529081046581268, 0.29974168539047241, 0.074014283716678619, 0.25295525789260864, 
  0.16254010796546936, 0.14917923510074615, 0.22475671768188477, 0.0026296412106603384, 
  -0.27627810835838318, 0.017416626214981079, 0.19630655646324158, -0.043824821710586548, 
  0.31572750210762024, 0.29582306742668152, -0.17511844635009766, 0.062289152294397354, 
  -0.045278459787368774, 0.041181236505508423, -0.29500079154968262, 0.14406466484069824, 
  -0.15190538763999939, -0.23341059684753418, -0.2854149341583252, 0.31445416808128357, 
  0.089624613523483276, 0.20038148760795593, 0.33998814225196838, 0.1862674206495285, 
  0.33071231842041016, -0.16938108205795288, -0.20233994722366333, -0.18147462606430054, 
  -0.01157792005687952, -0.025929270312190056, 0.08068200945854187, -0.13622601330280304, 
  0.004438251256942749, -0.18022124469280243, -0.079004198312759399, -0.11601758003234863, 
  -0.037772901356220245, 0.29781278967857361, -0.06381496787071228, -0.064405634999275208, 
  -0.27868050336837769, -0.05637812614440918, 0.028025001287460327, -0.026902198791503906, 
  -0.010754108428955078, -0.021468162536621094, -0.10883776843547821, -0.18105451762676239, 
  -0.046032756567001343, -0.31744909286499023, 0.094124406576156616, -0.020218223333358765, 
  -0.031207513064146042, -0.1109316423535347, 0.099166050553321838, 0.24287739396095276, 
  -0.058235980570316315, -0.12083633244037628, 0.18593423068523407, -0.28299099206924438, 
  0.15633571147918701, -0.035601232200860977, -0.042182788252830505, -0.051159750670194626, 
  0.059222660958766937, 0.054879996925592422, 0.27204564213752747, 0.15506084263324738, 
  0.22927030920982361, -0.33321061730384827, 0.028017677366733551, 0.12650704383850098, 
  -0.092980712652206421, -0.023939937353134155, -0.10821723937988281, 0.12030386924743652, 
  -0.32467460632324219, 0.23341670632362366, 0.089200258255004883, 0.11398038268089294, 
  0.29740330576896667, -0.3466227650642395, -0.046210557222366333, -0.0093647418543696404, 
  0.14834722876548767, -0.16228461265563965, -0.30135202407836914, 0.23820123076438904, 
  0.10079087316989899, 0.12336524575948715, 0.18551599979400635, -0.28497341275215149, 
  0.095730550587177277, -0.11531753093004227, 0.32299152016639709, 0.30714467167854309, 
  -0.31591606140136719, 0.14221486449241638, -0.19741162657737732, -0.028458833694458008, 
  -0.33191776275634766, -0.027217000722885132, -0.27894020080566406, -0.27830076217651367, 
  -0.27998870611190796, -0.26206988096237183, -0.14861664175987244, 0.19342508912086487, 
  0.26685810089111328, -0.11104804277420044, -0.061756577342748642, 0.049680206924676895, 
  -0.21253728866577148, -0.20389986038208008, -0.1112666130065918, 0.027519553899765015, 
  0.14363829791545868, 0.25787776708602905, -0.11976619064807892, 0.29735821485519409, 
  -0.084760189056396484, -0.28323984146118164, -0.21554216742515564, -0.052624136209487915, 
  0.26694583892822266, -0.17511181533336639, 0.11458554863929749, -0.31990006566047668, 
  -0.072779983282089233, -0.26097315549850464, -0.21085786819458008, 0.10968795418739319, 
  0.27414765954017639, -0.24918277561664581, 0.10549195110797882, -0.071711219847202301, 
  -0.25365757942199707, 0.22394856810569763, 0.30932462215423584, 0.19337141513824463, 
  -0.14656904339790344, 0.31440803408622742, 0.3521094024181366, 0.11317044496536255, 
  0.057866405695676804, 0.019215794280171394, -0.067332156002521515, 0.12093552947044373, 
  0.081437736749649048, -0.29151910543441772, 0.35856020450592041, 0.1425543874502182, 
  -0.10368429869413376, 0.273204505443573, 0.2513062059879303, -0.27541381120681763, 
  0.077535860240459442, 0.23520435392856598, 0.10888656973838806, -0.069072239100933075, 
  0.19116264581680298, 0.16044938564300537, -0.20941092073917389, -0.13190452754497528, 
  -0.28077888488769531, -0.056588262319564819, -0.0020197927951812744, 0.22475460171699524, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 50,4 } };
const ALIGN(16) float tensor_data5[30*50] = { 
  0.095034152269363403, 0.030068248510360718, 0.26602756977081299, -0.11931070685386658, 0.1485438346862793, -0.19342790544033051, -0.16527394950389862, -0.22547884285449982, -0.25654110312461853, 0.21744760870933533, 0.17087778449058533, -0.18358764052391052, -0.073256373405456543, -0.16378395259380341, -0.057577997446060181, -0.22368666529655457, -0.0090973079204559326, -0.18256324529647827, 0.0027452707290649414, -0.10398969054222107, 0.17632710933685303, 0.057787537574768066, -0.089263558387756348, 0.043618619441986084, 0.22602501511573792, -0.22506873309612274, -0.062732875347137451, -0.096379056572914124, 0.14457497000694275, -0.15112143754959106, -0.097502380609512329, 0.26287609338760376, -0.24313424527645111, -0.21005630493164062, -0.23395109176635742, -0.0018278360366821289, 0.057316035032272339, -0.15179768204689026, 0.25536948442459106, -0.16494429111480713, -0.12462958693504333, 0.26098001003265381, 0.19069588184356689, 0.094948232173919678, -0.25407001376152039, -0.22378480434417725, 0.18525418639183044, -0.038958683609962463, -0.15631800889968872, -0.037178903818130493, 
  -0.11903269588947296, 0.15719830989837646, -0.084604673087596893, 0.042788803577423096, 0.16380307078361511, 0.21008032560348511, -0.10371538996696472, -0.12448166310787201, 0.27429163455963135, -0.15606611967086792, 0.26262268424034119, -0.22814205288887024, -0.099812135100364685, 0.025340611115098, 0.024029092863202095, 0.012505044229328632, 0.24427348375320435, 0.14906632900238037, 0.039753437042236328, 0.060070842504501343, 0.0029473006725311279, 0.12264902144670486, 0.21224334836006165, 0.16100850701332092, 0.22751955687999725, -0.12022156268358231, -0.046125560998916626, 0.14649608731269836, 0.04670511931180954, -0.088797956705093384, 0.051367439329624176, -0.095626585185527802, 0.1302834153175354, -0.1975584477186203, 0.021798014640808105, -0.25672817230224609, -0.023828387260437012, 0.074976660311222076, -0.13265025615692139, 0.21068048477172852, -0.032496899366378784, 0.035561453551054001, -0.16424572467803955, -0.13152498006820679, -0.11712291091680527, -0.25490108132362366, 0.28457707166671753, -0.168669193983078, 0.28691959381103516, 0.16503942012786865, 
  -0.063030317425727844, 0.2468065619468689, -0.067362949252128601, -0.026767373085021973, -0.050222359597682953, -0.16329894959926605, -0.23467473685741425, 0.1524612158536911, 0.25393328070640564, 0.1341286301612854, 0.029121380299329758, 0.11809995770454407, -0.078041866421699524, 0.067477323114871979, 0.25506040453910828, 0.12652812898159027, 0.24380099773406982, -0.081982724368572235, 0.20660147070884705, -0.063545912504196167, -0.23304846882820129, 0.080103553831577301, 0.25634604692459106, 0.085440851747989655, 0.03204403817653656, -0.20471978187561035, -0.0068673193454742432, -0.13858780264854431, 0.13468706607818604, 0.14370504021644592, 0.25320237874984741, -0.1809314489364624, 0.22527983784675598, -0.10127633810043335, -0.015630364418029785, -0.057522546499967575, -0.045057103037834167, -0.18845948576927185, -0.12452583014965057, -0.12554050981998444, -0.1549505740404129, -0.2059645801782608, -0.19099991023540497, -0.18560633063316345, -0.26168841123580933, -0.27195397019386292, -0.22852616012096405, 0.20855933427810669, 0.23143613338470459, 0.16321849822998047, 
  0.12468902766704559, 0.0081677734851837158, -0.17180933058261871, 0.17207792401313782, -0.19423073530197144, -0.10509784519672394, 0.24780005216598511, 0.187074214220047, 0.06042248010635376, 0.04157644510269165, 0.14567582309246063, 0.18881407380104065, -0.20362997055053711, -0.06770632416009903, -0.033623188734054565, 0.12657089531421661, -0.20271018147468567, -0.015148959122598171, -0.18917226791381836, -0.24402366578578949, -0.14841090142726898, -0.1393178254365921, -0.040246162563562393, 0.2086450606584549, -0.11560503393411636, -0.030258988961577415, -0.1076115220785141, -0.26983869075775146, 0.16423813998699188, -0.15330654382705688, -0.15050320327281952, -0.18961724638938904, -0.17067751288414001, 0.076804429292678833, -0.058208093047142029, 0.20559167861938477, 0.22910284996032715, 0.17966394126415253, 0.10790431499481201, 0.1353730708360672, -0.23859548568725586, -0.18453824520111084, 0.28663155436515808, -0.18535023927688599, -0.24742154777050018, 0.033218417316675186, 0.18563792109489441, -0.018858326599001884, 0.16465310752391815, 0.045715600252151489, 
  -0.094376251101493835, -0.10025933384895325, -0.044588662683963776, 0.14365601539611816, -0.014867342077195644, -0.22273468971252441, 0.17024233937263489, 0.0060479221865534782, -0.034943070262670517, 0.12032133340835571, 0.12086296826601028, 0.045954614877700806, -0.14276215434074402, 0.018839228898286819, 0.30630895495414734, -0.24211908876895905, 0.24594694375991821, 0.00084533984772861004, 0.073113381862640381, 0.099907010793685913, -0.18120376765727997, 0.19306614995002747, -0.20477955043315887, -0.13422766327857971, -0.027403779327869415, -0.14279881119728088, 0.14655572175979614, 0.05404895544052124, -0.019029203802347183, 0.19101092219352722, 0.26264780759811401, -0.16436846554279327, -0.041889965534210205, 0.17059034109115601, 0.22643566131591797, 0.2145792692899704, -0.017608523368835449, -0.080600246787071228, -0.18816590309143066, -0.20659524202346802, -0.21729500591754913, 0.21672727167606354, 0.15316961705684662, 0.16604740917682648, -0.03130020946264267, -0.12576742470264435, 0.27903410792350769, -0.22353145480155945, 0.29738533496856689, 0.19902336597442627, 
  -0.19217580556869507, 0.11921131610870361, 0.025560546666383743, -0.11010149121284485, -0.090377449989318848, -0.15862575173377991, -0.15894640982151031, 0.22167885303497314, -0.057879116386175156, 0.0095222890377044678, -0.2324972003698349, -0.26011443138122559, -0.18706947565078735, 0.25906467437744141, -0.14134013652801514, 0.1995508223772049, -0.11533856391906738, 0.012264522723853588, 0.21057981252670288, -0.040024727582931519, 0.27351969480514526, -0.24094994366168976, 0.093540392816066742, 0.039138108491897583, 0.13798406720161438, 0.2236834317445755, -0.10398119688034058, -0.1296095997095108, -0.18106630444526672, -0.18392886221408844, 0.056922581046819687, 0.053977865725755692, 0.059873193502426147, -0.057004332542419434, -0.21253889799118042, 0.063304051756858826, -0.092219993472099304, 0.03475484624505043, -0.071660861372947693, -0.016248162835836411, -0.20935901999473572, -0.19873487949371338, 0.15341159701347351, 0.23399060964584351, 0.16301162540912628, -0.027169689536094666, -0.090858787298202515, 0.13729631900787354, -0.15021967887878418, -0.25014156103134155, 
  0.21554109454154968, -0.18396490812301636, 0.026454240083694458, 0.0058977007865905762, -0.16821986436843872, -0.041373372077941895, -0.03781166672706604, -0.073525846004486084, 0.15644672513008118, 0.17924723029136658, -0.15461719036102295, -0.12689311802387238, 0.0081875622272491455, -0.25129097700119019, -0.038482293486595154, -0.02724088728427887, -0.17610348761081696, -0.055479004979133606, -0.036631554365158081, -0.22265411913394928, 0.0092723369598388672, -0.085140138864517212, 0.24463266134262085, 0.031911671161651611, 0.042273908853530884, 0.033444702625274658, 0.13430911302566528, -0.035790830850601196, -0.085996657609939575, -0.11026309430599213, -0.2634357213973999, 0.24694699048995972, 0.16859236359596252, -0.12425735592842102, 0.041737765073776245, 0.10998553037643433, -0.12891709804534912, -0.21651038527488708, -0.25965678691864014, -0.18591704964637756, -0.21935541927814484, 0.2055056095123291, 0.070721030235290527, -0.22600910067558289, -0.23333288729190826, 0.064956694841384888, 0.065292507410049438, 0.036758214235305786, 0.26953238248825073, -0.11076168715953827, 
  -0.048571128398180008, 0.14398005604743958, 0.17175456881523132, -0.070260629057884216, 0.13568505644798279, 0.11691933870315552, 0.031650811433792114, 0.12169717997312546, 0.13819777965545654, 0.27009791135787964, -0.11727123707532883, -0.17476098239421844, 0.056285768747329712, -0.062197994440793991, 0.10175076872110367, -0.18221046030521393, 0.1598154604434967, -0.26342582702636719, -0.24548716843128204, -0.073753908276557922, 0.23976677656173706, 0.21123206615447998, -0.1549508273601532, 0.0086740320548415184, -0.2014370858669281, -0.0050424332730472088, 0.064280986785888672, -0.23206174373626709, -0.19790560007095337, -0.27011212706565857, 0.030953332781791687, 0.044842459261417389, 0.23904657363891602, 0.053817927837371826, -0.17902113497257233, 0.17873606085777283, -0.14628362655639648, 0.0214043278247118, 0.12746092677116394, -0.018968742340803146, -0.19497001171112061, 0.17565833032131195, 0.086548887193202972, 0.0046510421670973301, -0.02606939896941185, -0.096262224018573761, -0.15005543828010559, -0.10394049435853958, 0.22730307281017303, -0.26123833656311035, 
  0.14276379346847534, 0.095860123634338379, -0.28294923901557922, 0.028822034597396851, -0.029445674270391464, 0.22387143969535828, -0.11112242937088013, -0.23781991004943848, 0.24841789901256561, -0.25559675693511963, -0.13717906177043915, 0.023196876049041748, 0.043524801731109619, 0.24418140947818756, -0.10025205463171005, 0.057241562753915787, 0.16935878992080688, 0.23716320097446442, -0.017354786396026611, 0.20091134309768677, 0.23828607797622681, 0.079142153263092041, 0.08910650759935379, -0.017160777002573013, 0.15773153305053711, 0.2756500244140625, -0.1100003570318222, 0.077264219522476196, 0.15122605860233307, -0.10706809163093567, -0.12887187302112579, 0.23305490612983704, 0.1575513482093811, -0.10544142127037048, -0.069770544767379761, -0.027900166809558868, 0.003199458122253418, 0.11295895278453827, -0.067492440342903137, -0.0052111218683421612, -0.143149733543396, -0.21923373639583588, 0.10226035118103027, 0.2646816074848175, -0.014516396448016167, -0.034643184393644333, 0.18543730676174164, -0.24577941000461578, -0.017808202654123306, 0.10402593016624451, 
  0.075716935098171234, -0.0046990513801574707, -0.058652635663747787, -0.21830424666404724, -0.17320242524147034, -0.043904215097427368, 0.0062758922576904297, -0.29843547940254211, 0.066014066338539124, 0.0072135031223297119, 0.085510730743408203, -0.066091969609260559, -0.002177804708480835, 0.093710660934448242, -0.015863997861742973, 0.15636336803436279, -0.039353907108306885, -0.070641368627548218, 0.033647835254669189, -0.17147880792617798, 0.095346301794052124, 0.19036145508289337, -0.26960906386375427, -0.050683420151472092, 0.11744814366102219, 0.2221309095621109, 0.059501737356185913, -0.20546653866767883, 0.18647661805152893, 0.22039011120796204, 0.020833641290664673, 0.063441500067710876, -0.18961744010448456, -0.20577740669250488, 0.096067428588867188, 0.20308257639408112, 0.048620045185089111, -0.024363372474908829, 0.13234364986419678, -0.18269026279449463, -0.27260491251945496, 0.092668689787387848, -0.0011222980683669448, -0.27667143940925598, 0.0038172691129148006, 0.16397669911384583, 0.087067149579524994, -0.1579635888338089, -0.14667299389839172, -0.16171500086784363, 
  -0.19367466866970062, 0.23346036672592163, -0.27726483345031738, 0.054654538631439209, 0.25390329957008362, 0.00011765956878662109, 0.057608872652053833, 0.13820528984069824, 0.060395006090402603, -0.13299904763698578, 0.16991843283176422, 0.24863928556442261, -0.0018931329250335693, 0.11597193777561188, -0.088017061352729797, 0.062241338193416595, 0.18625390529632568, -0.037947423756122589, -0.23549188673496246, -0.24677664041519165, -0.17291414737701416, -0.058359164744615555, 0.18806345760822296, -0.046390559524297714, 0.051318075507879257, 0.089729763567447662, -0.12243728339672089, 0.056299418210983276, 0.1466115266084671, 0.054579317569732666, -0.15711124241352081, 0.024464771151542664, 0.081054270267486572, -0.14029476046562195, -0.21467150747776031, -0.27638885378837585, -0.2578338086605072, 0.25838810205459595, 0.1134166419506073, 0.017936570569872856, -0.044710725545883179, 0.032462973147630692, -0.030488539487123489, 0.26199275255203247, -0.099477849900722504, 0.082495220005512238, -0.27490878105163574, 0.075616545975208282, 0.21205428242683411, 0.055701136589050293, 
  -0.2673167884349823, 0.12588486075401306, -0.22647744417190552, -0.12292288243770599, 0.051744669675827026, -0.11752022802829742, -0.072100937366485596, -0.22557763755321503, 0.095674663782119751, -0.16140994429588318, -0.044753551483154297, 0.037372440099716187, 0.12227994203567505, 0.10936242341995239, 0.10608351230621338, 0.18477219343185425, 0.10178184509277344, -0.077955365180969238, 0.083501845598220825, 0.16925138235092163, 0.0088171064853668213, 0.19997254014015198, -0.038454800844192505, -0.24502965807914734, -0.1029384583234787, -0.17484423518180847, -0.22358553111553192, 0.12719139456748962, -0.097303688526153564, -0.17930352687835693, 0.051198363304138184, 0.086475789546966553, -0.10134530067443848, -0.241054967045784, -0.089567109942436218, -0.13419751822948456, 0.14442014694213867, -0.24582192301750183, 0.19512051343917847, 0.1426418125629425, 0.01584094762802124, -0.023158609867095947, 0.094685345888137817, -0.15035638213157654, -0.13747239112854004, 0.26062071323394775, 0.20457619428634644, -0.11444613337516785, 0.017364978790283203, 0.068977624177932739, 
  -0.20664501190185547, -0.11331126093864441, 0.088242322206497192, 0.07555660605430603, -0.17323136329650879, 0.19745135307312012, -0.18932002782821655, 0.012896852567791939, -0.065250307321548462, -0.017842918634414673, 0.17849083244800568, 0.051499754190444946, 0.054521799087524414, 0.217937171459198, 0.24198137223720551, -0.25478211045265198, 0.038995295763015747, 0.26205387711524963, -0.00034081935882568359, 0.1081860363483429, -0.23777011036872864, -0.076077885925769806, 0.24568630754947662, -0.16056311130523682, -0.12022896856069565, -0.089921794831752777, -0.23091095685958862, -0.21057486534118652, -0.12385909259319305, -0.11649857461452484, 0.15015096962451935, -0.054150387644767761, 0.017902076244354248, -0.24563322961330414, 0.20547217130661011, 0.23801378905773163, 0.2597917914390564, -0.17210471630096436, 0.10556405782699585, 0.25271061062812805, -0.055483117699623108, 0.26099711656570435, -0.23069216310977936, -0.10633368790149689, -0.12924806773662567, -0.21245484054088593, 0.25729361176490784, -0.11537213623523712, 0.013489468954503536, -0.23458319902420044, 
  0.031375408172607422, -0.15525034070014954, -0.10729360580444336, 0.23391914367675781, -0.22021912038326263, -0.062176048755645752, 0.19696232676506042, -0.16469655930995941, -0.20678222179412842, -0.028214678168296814, 0.2361530065536499, 0.08812907338142395, 0.16999560594558716, -0.16960436105728149, -0.072667419910430908, 0.033443719148635864, 0.031276702880859375, -0.11489906907081604, 0.2208636999130249, -0.12345260381698608, 0.19395712018013, -0.21126723289489746, -0.093704447150230408, -0.20125335454940796, -0.026480734348297119, -0.26629617810249329, 0.2626073956489563, 0.070565372705459595, 0.20775535702705383, -0.11479343473911285, -0.12912629544734955, 0.23316335678100586, 0.18958950042724609, -0.27283146977424622, 0.027686178684234619, 0.080027133226394653, -0.077236995100975037, 0.092658162117004395, -0.063326969742774963, -0.052468389272689819, 0.17222237586975098, 0.2099890410900116, 0.0024470090866088867, -0.03372742235660553, 0.24758726358413696, 0.19012215733528137, -0.16708377003669739, -0.24916717410087585, -0.063983827829360962, 0.086985796689987183, 
  0.14648911356925964, -0.19854164123535156, 0.1033998504281044, 0.21159937977790833, 0.1506238579750061, -0.11393037438392639, 0.13511645793914795, 0.23093217611312866, -0.16174258291721344, 0.14257261157035828, 0.17087490856647491, 0.13639125227928162, -0.20097988843917847, -0.12309274822473526, 0.060820695012807846, -0.076075479388237, 0.025252312421798706, 0.22197069227695465, 0.17709600925445557, 0.054351985454559326, 0.070596516132354736, -0.11920665204524994, 0.2621922492980957, 0.29361465573310852, 0.05130704864859581, 0.16279356181621552, -0.024620130658149719, -0.16081231832504272, 0.086683489382266998, -0.26585289835929871, 0.26947709918022156, -0.14496646821498871, 0.25925040245056152, 0.049532860517501831, -0.194559246301651, -0.20113053917884827, -0.14944508671760559, -0.1846252977848053, 0.21459636092185974, -0.24903400242328644, -0.09472191333770752, 0.072759263217449188, -0.27101680636405945, 0.062472674995660782, 0.25255289673805237, -0.19941301643848419, 0.038892172276973724, -0.015997558832168579, 0.29218724370002747, -0.25233450531959534, 
  0.17526206374168396, -0.071323812007904053, 0.15269407629966736, 0.18182000517845154, 0.11372717469930649, -0.086310401558876038, 0.0096518993377685547, 0.15576867759227753, 0.10274095833301544, 0.043447613716125488, 0.16720665991306305, 0.12026888132095337, 0.077956587076187134, 0.22716683149337769, -0.046403083950281143, -0.21846123039722443, -0.042916774749755859, -0.13236409425735474, -0.25231844186782837, 0.077591478824615479, 0.16334229707717896, 0.12670844793319702, 0.24265262484550476, -0.065125860273838043, 0.14950446784496307, 0.15864966809749603, -0.16421253979206085, -0.058535143733024597, -0.1176752895116806, -0.040979325771331787, -0.088331840932369232, -0.028339067474007607, 0.045993208885192871, -0.19348588585853577, -0.097802788019180298, -0.15060579776763916, -0.17495079338550568, -0.20149452984333038, -0.032532736659049988, 0.131031334400177, -0.14300602674484253, 0.11959146708250046, -0.2191893458366394, -0.12316440045833588, -0.1610017865896225, 0.05053764209151268, 0.26416662335395813, -0.014015472494065762, 0.21346086263656616, 0.038283675909042358, 
  0.12162801623344421, 0.18828395009040833, -0.11557993292808533, 0.14631927013397217, -0.13123758137226105, 0.14029443264007568, -0.081469789147377014, 0.0029474613256752491, 0.086429417133331299, -0.26382148265838623, 0.052699379622936249, 0.12255364656448364, -0.047669366002082825, -0.058789391070604324, 0.051000595092773438, 0.091963425278663635, -0.26390916109085083, 0.17687828838825226, -0.086496278643608093, -0.071634158492088318, -0.13478104770183563, 0.093413576483726501, 0.0367593914270401, 0.18908663094043732, 0.093745425343513489, 0.10643725842237473, -0.26073271036148071, 0.10244974493980408, 0.18180830776691437, -0.19891126453876495, 0.0035552836488932371, 0.28549093008041382, 0.043375998735427856, -0.01495969295501709, 0.26277005672454834, -0.1871478408575058, 0.015607267618179321, -0.036054361611604691, -0.23808279633522034, -0.044170081615447998, -0.086889088153839111, -0.035168915987014771, 0.1257539838552475, 0.2420165091753006, 0.13642612099647522, 0.01486232690513134, 0.084585040807723999, -0.063566185534000397, -0.14030803740024567, 0.15172213315963745, 
  0.2250770628452301, -0.026955559849739075, -0.29654452204704285, -0.13780191540718079, -0.089430861175060272, 0.20130473375320435, 0.19690179824829102, -0.14234346151351929, 0.23475606739521027, -0.21073731780052185, -0.014434468001127243, -0.24246041476726532, 0.23264342546463013, 0.25187826156616211, -0.077756389975547791, -0.17496837675571442, -0.10890525579452515, -0.094254657626152039, -0.26158314943313599, -0.1584765613079071, -0.14074300229549408, -0.21399082243442535, -0.046488415449857712, -0.10846845805644989, -0.23015458881855011, -0.08216104656457901, 0.14446389675140381, 0.23423755168914795, 0.030961869284510612, 0.21604529023170471, 0.077726922929286957, -0.07094118744134903, 0.12974855303764343, -0.11754594743251801, -0.1615949273109436, -0.16139011085033417, 0.19995751976966858, 0.18756598234176636, 0.031136184930801392, 0.15727132558822632, -0.25205597281455994, 0.14581429958343506, 0.032462991774082184, -0.093610554933547974, -0.046947021037340164, 0.24782635271549225, 0.2012019008398056, -0.14142163097858429, -0.091241903603076935, -0.012307524681091309, 
  0.10180149227380753, 0.20487812161445618, -0.016264870762825012, 0.22237673401832581, -0.20628400146961212, -0.2040119469165802, -0.076551541686058044, 0.093463897705078125, -0.18702159821987152, 0.060087352991104126, 0.29633563756942749, -0.25481358170509338, 0.25120937824249268, -0.26497796177864075, -0.058656614273786545, 0.16025310754776001, 0.19716957211494446, 0.027563819661736488, 0.10158112645149231, 0.074369221925735474, 0.22674000263214111, -0.26319596171379089, 0.20085963606834412, 0.28499060869216919, -0.062662623822689056, -0.2681807279586792, 0.153006911277771, -0.23118630051612854, -0.22734309732913971, -0.072470113635063171, -0.0071026533842086792, 0.053006906062364578, 0.076805531978607178, -0.20501673221588135, 0.009907066822052002, 0.18584853410720825, -0.089277267456054688, 0.21531675755977631, 0.11884954571723938, 0.1411551833152771, -0.25012156367301941, 0.10014865547418594, -0.3148442804813385, -0.15079015493392944, -0.075195580720901489, 0.17731425166130066, -0.15120533108711243, -0.12410086393356323, 0.16961568593978882, -0.13753519952297211, 
  -0.16772240400314331, 0.18776348233222961, 0.025160491466522217, -0.14078916609287262, -0.12677311897277832, -0.043154910206794739, 0.18081337213516235, -0.22795805335044861, -0.18082088232040405, 0.079221546649932861, -0.1778624951839447, -0.21487516164779663, -0.080189183354377747, 0.2627333402633667, -0.25668913125991821, -0.042174458503723145, -0.042649537324905396, 0.22762531042098999, 0.18018931150436401, -0.23335090279579163, -0.1268879622220993, -0.12268213927745819, -0.023612916469573975, -0.2681104838848114, 0.20752662420272827, -0.18831810355186462, -0.045766457915306091, 0.18809029459953308, -0.055334314703941345, 0.036273688077926636, -0.13347785174846649, 0.13949930667877197, -0.21820919215679169, -0.07060512900352478, 0.26134002208709717, -0.10410408675670624, -0.22283510863780975, -0.13908813893795013, 0.21438214182853699, -0.096780747175216675, 0.24450808763504028, -0.098785921931266785, 0.10642260313034058, 0.24151754379272461, 0.080193221569061279, -0.22925302386283875, -0.2311403900384903, 0.17035308480262756, 0.23222672939300537, -0.028179287910461426, 
  -0.13746990263462067, 0.036652565002441406, -0.049445107579231262, 0.044033676385879517, 0.097078472375869751, -0.061431959271430969, 0.21277317404747009, 0.064657248556613922, 0.14963018894195557, 0.12854015827178955, -0.23953557014465332, -0.23221440613269806, 0.14006975293159485, 0.094943150877952576, -0.039108246564865112, 0.11622466892004013, -0.14978101849555969, 0.21919834613800049, -0.0027323365211486816, 0.15923371911048889, 0.006416022777557373, 0.13037069141864777, -0.14066487550735474, 0.017057070508599281, 0.22099177539348602, 0.13977101445198059, -0.25176259875297546, -0.16054636240005493, 0.021399559453129768, 0.017075389623641968, -0.14480964839458466, -0.16675910353660583, -0.092553451657295227, 0.15829190611839294, 0.058608084917068481, 0.041576281189918518, 0.157012939453125, 0.16838370263576508, -0.049625694751739502, -0.15002666413784027, 0.20853796601295471, 0.15995010733604431, 0.20775917172431946, 0.042840112000703812, 0.18053728342056274, 0.13666503131389618, -0.068990610539913177, -0.20762854814529419, 0.0017828729469329119, -0.24605913460254669, 
  0.1475299745798111, -0.095816954970359802, -0.18066728115081787, -0.12390567362308502, 0.18939974904060364, 0.080443114042282104, 0.0078002512454986572, 0.11915473639965057, -0.17494088411331177, -0.10671478509902954, -0.13942226767539978, -0.037589073181152344, 0.16103729605674744, 0.18801011145114899, -0.18663959205150604, -0.12744544446468353, -0.23647376894950867, 0.0084926597774028778, 0.092846482992172241, -0.19367484748363495, 0.16164657473564148, -0.0018238842021673918, 0.1879248172044754, -0.056283798068761826, 0.042648572474718094, 0.096661418676376343, 0.21636706590652466, -0.20896393060684204, 0.011176775209605694, -0.10394097864627838, -0.081519722938537598, 0.13502997159957886, -0.22884415090084076, 0.20156577229499817, -0.1389533132314682, 0.24521063268184662, -0.010487139225006104, 0.15670864284038544, 0.036275625228881836, -0.11897125840187073, 0.21124410629272461, -0.25239866971969604, -0.1533455103635788, -0.18119686841964722, -0.076644912362098694, -0.1537601500749588, 0.24001871049404144, 0.20363768935203552, -0.0014600653667002916, 0.25403153896331787, 
  -0.0069973170757293701, -0.13845740258693695, -0.095998406410217285, 0.1187329888343811, -0.030918613076210022, -0.22824755311012268, -0.11883425712585449, -0.27276819944381714, -0.091715142130851746, 0.17995065450668335, -0.081834197044372559, 0.16412562131881714, -0.22129842638969421, -0.17650705575942993, 0.21538901329040527, -0.27237972617149353, -0.10139936208724976, 0.2691224217414856, -0.13444674015045166, -0.011296957731246948, 0.25822913646697998, 0.0069582760334014893, -0.24008254706859589, 0.070806503295898438, 0.22438758611679077, -0.13489837944507599, -0.059134334325790405, -0.096224114298820496, 0.26207315921783447, -0.0054686665534973145, 0.1417783796787262, -0.11554744839668274, 0.092237949371337891, 0.23989719152450562, -0.1781526505947113, 0.010077863931655884, -0.038077995181083679, -0.042766988277435303, -0.019737601280212402, 0.0081292390823364258, -0.075317949056625366, 0.097942769527435303, -0.23347006738185883, -0.18590588867664337, -0.040327891707420349, 0.047022193670272827, -0.25784802436828613, 0.16190505027770996, -0.0052629411220550537, 0.0008945167064666748, 
  0.22041121125221252, 0.17986655235290527, -0.065686032176017761, 0.11331328749656677, -0.010037988424301147, -0.12597574293613434, 0.26106369495391846, -0.078534454107284546, 0.038123369216918945, 0.13457211852073669, 0.12381014227867126, -0.006077200174331665, 0.11143314838409424, 0.022478371858596802, -0.21318353712558746, 0.21926283836364746, 0.15463057160377502, 0.063660353422164917, -0.12277936935424805, 0.10992199182510376, 0.040403038263320923, -0.14578831195831299, -0.09397260844707489, -0.064806655049324036, -0.17607991397380829, 0.068818181753158569, 0.21212220191955566, 0.26125526428222656, -0.26417133212089539, -0.16016212105751038, 0.0028255879878997803, 0.0090468227863311768, 0.037921696901321411, -0.13551710546016693, -0.050161302089691162, 0.07232820987701416, -0.23981869220733643, -0.076049432158470154, 0.16195717453956604, 0.25281214714050293, 0.14261740446090698, -0.056455671787261963, 0.22003811597824097, -0.076421216130256653, 0.23729455471038818, 0.098331987857818604, -0.19709447026252747, -0.25556150078773499, -0.2638700008392334, -0.26485827565193176, 
  -0.22618088126182556, 0.16353791952133179, -0.21602994203567505, 0.13387170433998108, 0.057973563671112061, 0.23555576801300049, -0.23506414890289307, -0.18816119432449341, -0.056072399020195007, -0.16946887969970703, -0.22287055850028992, 0.20584654808044434, 0.007127910852432251, -0.1159222275018692, -0.078427046537399292, 0.12777942419052124, -0.11855833232402802, -0.044488325715065002, -0.034736603498458862, -0.03564019501209259, -0.22410370409488678, -0.18212316930294037, 0.15965014696121216, 0.086024075746536255, 0.26032072305679321, 0.19469264149665833, -0.1185421347618103, -0.23790951073169708, 0.21347036957740784, -0.21307854354381561, -0.14761371910572052, -0.045108288526535034, -0.18548859655857086, 0.26593858003616333, 0.22795069217681885, 0.0059901773929595947, -0.091848015785217285, -0.029653161764144897, 0.16232725977897644, -0.09340311586856842, -0.04463660717010498, -0.26826894283294678, -0.25018960237503052, -0.20105524361133575, 0.12229898571968079, 0.13258194923400879, -0.23216366767883301, -0.0080330073833465576, 0.16310378909111023, 0.20163825154304504, 
  -0.16288524866104126, -0.27337706089019775, -0.27257975935935974, 0.14030951261520386, -0.056264623999595642, 0.14494845271110535, -0.26703014969825745, -0.016498923301696777, -0.019878506660461426, -0.16842705011367798, 0.013220340013504028, 0.16213181614875793, 0.041561156511306763, -0.12050348520278931, -0.23087587952613831, -0.1977287232875824, 0.19803738594055176, 0.16432777047157288, 0.12687093019485474, 0.10215511918067932, -0.23394612967967987, 0.18405377864837646, 0.1564318835735321, -0.24966053664684296, 0.10568276047706604, -0.15489029884338379, -0.21842086315155029, 0.18938106298446655, 0.011704206466674805, 0.27170699834823608, 0.069787323474884033, 0.048277437686920166, 0.041704028844833374, 0.083922028541564941, 0.091965079307556152, -0.23509776592254639, -0.13440802693367004, -0.16618093848228455, 0.17163571715354919, 0.14549088478088379, -0.17515340447425842, -0.18993568420410156, -0.22500671446323395, 0.21927300095558167, -0.11765420436859131, 0.0032441020011901855, -0.088894128799438477, 0.15164607763290405, -0.1915801614522934, 0.035240530967712402, 
  -0.1381680965423584, 0.18414321541786194, -0.061997205018997192, 0.095505833625793457, 0.021355181932449341, -0.041974589228630066, -0.026256784796714783, -0.22734050452709198, -0.14156870543956757, 0.19082081317901611, -0.045473873615264893, -0.086118564009666443, 0.23656415939331055, 0.2547919750213623, -0.10807327926158905, 0.14406716823577881, 0.18736448884010315, 0.15878984332084656, -0.25603213906288147, 0.27166187763214111, -0.21519085764884949, 0.20623591542243958, -0.12003377079963684, 0.04944223165512085, -0.18520861864089966, -0.00044041872024536133, 0.15418729186058044, -0.0482778400182724, -0.25074741244316101, 0.20039427280426025, -0.17605313658714294, 0.11827555298805237, 0.23605287075042725, 0.14888054132461548, -0.062480047345161438, -0.094686582684516907, -0.24834388494491577, 0.038542628288269043, -0.095983445644378662, -0.11178137362003326, 0.18474248051643372, 0.01519349217414856, -0.18700921535491943, 0.22334381937980652, -0.0011462271213531494, 0.088702946901321411, -0.11424091458320618, 0.16984423995018005, -0.048801690340042114, -0.18332704901695251, 
  0.1091867983341217, 0.20190146565437317, 0.26716244220733643, 0.26425915956497192, -0.23439306020736694, 0.012782663106918335, 0.026354342699050903, -0.14251357316970825, -0.075960114598274231, -0.11128827929496765, 0.2404213547706604, -0.18001274764537811, 0.2102547287940979, 0.15181934833526611, -0.16196677088737488, -0.14903262257575989, -0.25132244825363159, -0.18409347534179688, 0.21299406886100769, 0.14477801322937012, 0.24437743425369263, 0.056953728199005127, 0.22173961997032166, 0.13193660974502563, 0.10705679655075073, -0.21599926054477692, 0.036565810441970825, -0.24548056721687317, 0.10369417071342468, -0.12108740210533142, 0.0092546641826629639, -0.024327352643013, -0.0046857297420501709, 0.19454783201217651, -0.0015642940998077393, 0.20234328508377075, -0.097710207104682922, -0.26610669493675232, -0.13751482963562012, -0.15173935890197754, 0.23154568672180176, -0.19028559327125549, 0.10634541511535645, -0.12131227552890778, -0.19098155200481415, 0.11979988217353821, 0.0050574541091918945, -0.20902380347251892, 0.038538515567779541, -0.021601617336273193, 
  0.10868272930383682, 0.078289002180099487, -0.095180422067642212, 0.050082236528396606, -0.10124833136796951, 0.16615411639213562, 0.052341580390930176, 0.12503528594970703, 0.1239461749792099, -0.11004874110221863, 0.017547028139233589, -0.20282483100891113, -0.20996633172035217, -0.149112269282341, 0.13367882370948792, 0.2386610209941864, 0.079508304595947266, -0.27066412568092346, 0.00315818190574646, 0.18385624885559082, 0.083563357591629028, -0.25110125541687012, 0.13863793015480042, -0.024615807458758354, 0.015312651172280312, 0.16733331978321075, 0.21612226963043213, -0.21103459596633911, 0.025247897952795029, -0.18785136938095093, -0.033554274588823318, -0.1465417891740799, -0.006647944450378418, -0.1064101904630661, 0.13875240087509155, 0.21398749947547913, -0.073185861110687256, -0.20908881723880768, -0.11489547789096832, -0.22487820684909821, -0.10437361896038055, 0.2283063679933548, -0.19427068531513214, -0.27413362264633179, 0.24804534018039703, -0.080235205590724945, 0.078276827931404114, 0.10686486959457397, -0.019028529524803162, 0.044755905866622925, 
  -0.049787327647209167, 0.23646777868270874, 0.14723747968673706, 0.11399984359741211, 0.1114642471075058, 0.20787230134010315, 0.26203525066375732, 0.0087321819737553596, -0.13599035143852234, -0.21052831411361694, -0.093661069869995117, 0.24966889619827271, -0.082788780331611633, 0.11014300584793091, -0.29318913817405701, 0.24084962904453278, -0.008114159107208252, -0.0016452257987111807, -0.21674804389476776, 0.22476968169212341, 0.19712105393409729, 0.087801478803157806, -0.20389865338802338, 0.13325835764408112, 0.086042456328868866, -0.10918489098548889, -0.10956341028213501, 0.038931071758270264, -0.083743259310722351, -0.25046318769454956, -0.020313141867518425, 0.23322093486785889, -0.087071850895881653, -0.11570996046066284, 0.10445857048034668, -0.01660539023578167, 0.1280234158039093, 0.096484780311584473, 0.16402801871299744, -0.0036013694480061531, -0.16898536682128906, 0.049769412726163864, -0.12785540521144867, -0.027857000008225441, -0.098432622849941254, -0.020687274634838104, 0.12129773944616318, 0.034555330872535706, -0.14709295332431793, 0.1572604775428772, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 30,50 } };
const ALIGN(16) float tensor_data6[3*30] = { 
  0.24738812446594238, 0.085577256977558136, 0.39403200149536133, -0.29582503437995911, -0.10304706543684006, 0.14399029314517975, 0.29752802848815918, -0.3012562096118927, -0.46124464273452759, 0.26727423071861267, 0.23687422275543213, -0.15302035212516785, 0.2460733950138092, -0.39954477548599243, 0.19822625815868378, 0.10866053402423859, -0.19322428107261658, -0.4700411856174469, 0.10276694595813751, 0.12255674600601196, -0.4290335476398468, 0.41691279411315918, 0.40187913179397583, 0.078186213970184326, -0.34864756464958191, -0.35028594732284546, 0.24982935190200806, -0.30325660109519958, -0.32496434450149536, -0.27128812670707703, 
  0.23284792900085449, 0.25092411041259766, -0.087393045425415039, -0.25639739632606506, -0.41064310073852539, 0.048006586730480194, 0.12195426225662231, -0.32263937592506409, 0.05091586709022522, -0.069125182926654816, -0.10605008155107498, 0.22930550575256348, 0.035911008715629578, 0.20182138681411743, -0.086873911321163177, 0.21100364625453949, 0.26783406734466553, 0.39068901538848877, -0.28738805651664734, 0.16597992181777954, 0.18935351073741913, -0.095633938908576965, 0.055380791425704956, -0.1683499813079834, 0.11573517322540283, -0.026649594306945801, 0.40966969728469849, 0.38432586193084717, -0.055685978382825851, -0.28788653016090393, 
  -0.3425668478012085, -0.10808504372835159, 0.39423409104347229, -0.022117307409644127, -0.40261131525039673, -0.31933131814002991, -0.34411659836769104, -0.20788335800170898, 0.39125394821166992, 0.10479947179555893, 0.40273582935333252, -0.3469470739364624, -0.30006888508796692, 0.31581884622573853, -0.055878676474094391, 0.13086365163326263, 0.034173283725976944, -0.077647387981414795, -0.013851420022547245, 0.34587371349334717, 0.36280626058578491, 0.24018010497093201, 0.20177674293518066, -0.33008712530136108, -0.41460844874382019, 0.41646039485931396, 0.12469285726547241, 0.27586650848388672, 0.20033591985702515, 0.070877358317375183, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,30 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,50 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,30 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,1 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension0, 16, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 120, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 200, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 800, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 6000, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 360, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension7, 200, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension8, 120, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 12, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 12, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
