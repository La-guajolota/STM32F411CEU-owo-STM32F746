/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
#include <stdbool.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

//Constantes
#define pi 3.1416

//Frecuencias
#define f1 1 //hz

//Periodo de sampling
#define psampling (0.001)

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;

/* Definitions for signal0 */
osThreadId_t signal0Handle;
const osThreadAttr_t signal0_attributes = {
  .name = "signal0",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for signal1 */
osThreadId_t signal1Handle;
const osThreadAttr_t signal1_attributes = {
  .name = "signal1",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal1,
};
/* Definitions for signal2 */
osThreadId_t signal2Handle;
const osThreadAttr_t signal2_attributes = {
  .name = "signal2",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal2,
};
/* Definitions for signal3 */
osThreadId_t signal3Handle;
const osThreadAttr_t signal3_attributes = {
  .name = "signal3",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal3,
};
/* Definitions for mux */
osThreadId_t muxHandle;
const osThreadAttr_t mux_attributes = {
  .name = "mux",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime1,
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
void signal0_func(void *argument);
void signal1_func(void *argument);
void signal2_func(void *argument);
void signal3_func(void *argument);
void mux_signal(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */

  /*
   * INICIALIZAMOS EL PWM de todos los canales
   */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of signal0 */
  signal0Handle = osThreadNew(signal0_func, NULL, &signal0_attributes);

  /* creation of signal1 */
  signal1Handle = osThreadNew(signal1_func, NULL, &signal1_attributes);

  /* creation of signal2 */
  signal2Handle = osThreadNew(signal2_func, NULL, &signal2_attributes);

  /* creation of signal3 */
  signal3Handle = osThreadNew(signal3_func, NULL, &signal3_attributes);

  /* creation of mux */
  muxHandle = osThreadNew(mux_signal, NULL, &mux_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 12;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 10-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 255-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mux_0_Pin|mux_1_Pin|mux_en_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : mux_0_Pin mux_1_Pin mux_en_Pin */
  GPIO_InitStruct.Pin = mux_0_Pin|mux_1_Pin|mux_en_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_signal0_func */
/**
  * @brief  Function implementing the signal0 thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_signal0_func */
void signal0_func(void *argument)
{
  /* USER CODE BEGIN 5 */
	uint8_t val = 0;
	float t = 0.0;
	/* Infinite loop */
	for(;;)
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,val);

		if (t<=0.1) { //mayor a 1s
			t += 0.0001;
		}else{
			t = 0.0;
		}
		val = (uint8_t)(127.0*sinf(2*pi*10*t)+127.0);

		osDelay(30);
	}
	// In case we accidentally exit from task loop
	osThreadTerminate(NULL);
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_signal1_func */
/**
* @brief Function implementing the signal1 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_signal1_func */
void signal1_func(void *argument)
{
  /* USER CODE BEGIN signal1_func */
	uint8_t val = 0;
	float t = 0.0;
	/* Infinite loop */
	for(;;)
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,val);

		if (t<=0.1) { //mayor a 1s
			t += 0.0001;
		}else{
			t = 0.0;
		}
		val = (uint8_t)(127.0*cosf(2*pi*10*t)+127.0);

		osDelay(30);
		}
	// In case we accidentally exit from task loop
	osThreadTerminate(NULL);
  /* USER CODE END signal1_func */
}

/* USER CODE BEGIN Header_signal2_func */
/**
* @brief Function implementing the signal2 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_signal2_func */
void signal2_func(void *argument)
{
  /* USER CODE BEGIN signal2_func */
	uint8_t val = 0;
	float t = 0.0;
	/* Infinite loop */
	for(;;)
	{
		/*
		 * DIENTE DE SIERRA
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,val);
		if (val <= 255) {
			val++;
		}else{
			val = 0;
		}
		*/
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,val);
		if (t<=0.1) { //mayor a 1s
			t += 0.0001;
		}else{
			t = 0.0;
		}
		val = (uint8_t)(127.0*sinf(2*pi*10*t + pi)+127.0);
		osDelay(30);
	}
  // In case we accidentally exit from task loop
  osThreadTerminate(NULL);
  /* USER CODE END signal2_func */
}

/* USER CODE BEGIN Header_signal3_func */
/**
* @brief Function implementing the signal3 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_signal3_func */
void signal3_func(void *argument)
{
  /* USER CODE BEGIN signal3_func */
	uint8_t val = 0;
	bool up_dowm = false;
	float t = 0.0;
	/* Infinite loop */
	for(;;)
	{
		/*
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,val);
		if (val<=255 && up_dowm==false) {
			val++;
			if (val>=254) {
				up_dowm = true;
			}
		}else if (val>=1 && up_dowm==true)
		{
			val--;
			if (val<=1)
			{
				up_dowm = false;
			}
		}
		*/
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,val);
		if (t<=0.1) { //mayor a 1s
			t += 0.0001;
		}else{
			t = 0.0;
		}
		val = (uint8_t)(127.0*cosf(2*pi*10*t + pi)+127.0);
		osDelay(30);
	}
	// In case we accidentally exit from task loop
	osThreadTerminate(NULL);
  /* USER CODE END signal3_func */
}

/* USER CODE BEGIN Header_mux_signal */
/**
* @brief Function implementing the mux thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mux_signal */
void mux_signal(void *argument)
{
  /* USER CODE BEGIN mux_signal */
  /* Infinite loop */

	uint8_t canal = 0;
	for(;;)
	  {
		//Cortamos el paso
		HAL_GPIO_WritePin(mux_en_GPIO_Port,mux_en_Pin,0);
		osDelay(5);
		//Canal n
		HAL_GPIO_WritePin(mux_0_GPIO_Port,mux_0_Pin,(canal&0x01));
		HAL_GPIO_WritePin(mux_1_GPIO_Port,mux_1_Pin,(canal&0x02)>>1);
		//Habilitamos el paso
		HAL_GPIO_WritePin(mux_en_GPIO_Port,mux_en_Pin,1);
		osDelay(5);

		canal++;
	  }
	  // In case we accidentally exit from task loop
	  osThreadTerminate(NULL);

  /* USER CODE END mux_signal */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM11 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
