/*
 * ACS712.c
 *
 *  Created on: Apr 7, 2024
 *      Author: adria
 */

#include "ACS712.h"

/*
 * Defines del periferico en uso
 */
extern ADC_HandleTypeDef hadc3;
extern TIM_HandleTypeDef htim14;

#define timer &htim14
#define adc &hadc3

/*
 * Defines para los calculos
 */
#define ACS712_FF_SINUS           (1.0/sqrt(2))
#define ACS712_FF_SQUARE          (1.0)
#define ACS712_FF_TRIANGLE        (1.0/sqrt(3))
#define ACS712_FF_SAWTOOTH        (1.0/sqrt(3))

#define ACS712_DEFAULT_FREQ       60 //hz
#define ACS712_DEFAULT_NOISE      21 //hz

/*
 * Equivalente a millis()
 * Arduino
 *
 * __HAL_TIM_GET_COUNTER(&htim14)
 */

//  TYPE   mV per Ampere
//  5A        185.0
//  20A       100.0
//  30A        66.0

//  FREQUENCY DETECTION
//  uses oversampling and averaging to minimize variation
//  blocks for substantial amount of time, depending on minimalFrequency
float detectFrequency(float minimalFrequency)
{
  int maximum = 0;
  int minimum = 0;
  //maximum = minimum = _analogRead(_pin);
  maximum = minimum = HAL_ADC_GetValue(&hadc3);

  //  determine maxima
  uint32_t timeOut = round(1000000.0 / minimalFrequency);
  uint32_t start = __HAL_TIM_GET_COUNTER(&htim14);
  while (micros() - start < timeOut)
  {
    int value = _analogRead(_pin);
    if (value > maximum) maximum = value;
    if (value < minimum) minimum = value;
  }

  //  calculate quarter points
  //  using quarter points is less noise prone than using one single midpoint
  int Q1 = (3 * minimum + maximum ) / 4;
  int Q3 = (minimum + 3 * maximum ) / 4;

  //  10x passing Quantile points
  //  wait for the right moment to start
  //  to prevent endless loop a timeout is checked.
  timeOut *= 10;
  start = micros();
  //  casting to int to keep compiler happy.
  while ((int(_analogRead(_pin)) >  Q1) && ((micros() - start) < timeOut));
  while ((int(_analogRead(_pin)) <= Q3) && ((micros() - start) < timeOut));
  start = micros();
  for (int i = 0; i < 10; i++)
  {
    while ((int(_analogRead(_pin)) >  Q1) && ((micros() - start) < timeOut));
    while ((int(_analogRead(_pin)) <= Q3) && ((micros() - start) < timeOut));
  }
  uint32_t stop = micros();

  //  calculate frequency
  float wavelength = stop - start;
  float frequency = 1e7 / wavelength;
  if (_microsAdjust != 1.0) frequency *= _microsAdjust;
  return frequency;
}

void ACS712_sens(ACS712* modulo){



}
