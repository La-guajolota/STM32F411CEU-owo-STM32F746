/*
 * Seg7_mux.c
 *
 *  Created on: Apr 21, 2024
 *      Author: adria
 */

#include "Seg7_mux.h"

/*
 * DEFINICIONES DE LOS PINES PARA
 * CADA SELECTOR DE DIGITOS MULTIPLEXADO
 */
#define dig_0_port   0x08
#define dig_0_pin    0x08

#define dig_1_port   0x09
#define dig_1_pin    0x09

#define dig_2_port   0x00
#define dig_2_pin    0x00

#define dig_3_port   0x00
#define dig_3_pin    0x00

/*
 * DEFINICIONES DE LOS PINES
 * PARA CADA SEGMENTO
 */
#define SEG_A_port   0x01
#define SEG_A_pin    0x01

#define SEG_B_port   0x02
#define SEG_B_pin    0x02

#define SEG_C_port   0x03
#define SEG_C_pin    0x03

#define SEG_D_port   0x04
#define SEG_D_pin    0x04

#define SEG_E_port   0x05
#define SEG_E_pin    0x05

#define SEG_F_port   0x06
#define SEG_F_pin    0x06

#define SEG_G_port   0x07
#define SEG_G_pin    0x07


/******************************************
 * YA NO HAY NADA QUE MODIFICAR
 ******************************************/

/*
 * Tabla para decodificacion
 * de digitos para 7 segmentos

Dígito | a | b | c | d | e | f | g |
-------|---|---|---|---|---|---|---|
   0   | 1 | 1 | 1 | 1 | 1 | 1 | 0 |
   1   | 0 | 1 | 1 | 0 | 0 | 0 | 0 |
   2   | 1 | 1 | 0 | 1 | 1 | 0 | 1 |
   3   | 1 | 1 | 1 | 1 | 0 | 0 | 1 |
   4   | 0 | 1 | 1 | 0 | 0 | 1 | 1 |
   5   | 1 | 0 | 1 | 1 | 0 | 1 | 1 |
   6   | 1 | 0 | 1 | 1 | 1 | 1 | 1 |
   7   | 1 | 1 | 1 | 0 | 0 | 0 | 0 |
   8   | 1 | 1 | 1 | 1 | 1 | 1 | 1 |
   9   | 1 | 1 | 1 | 1 | 0 | 1 | 1 |
 */
const uint8_t nums_bin[10] = {
	0x3F, // 0
	0x06, // 1
	0x5B, // 2
	0x4F, // 3
	0x66, // 4
	0x6D, // 5
	0x7D, // 6
	0x07, // 7
	0x7F, // 8
	0x6F  // 9
};

void show_num(uint16_t num){

	uint8_t digitos[N_dig] = {0};

	//Separamos los digitos
	digitos[0] = num / 1000;          // Obtener el primer dígito (miles)
	digitos[1] = (num % 1000) / 100;  // Obtener el segundo dígito (centenas)
	digitos[2] = (num % 100) / 10;    // Obtener el tercer dígito (decenas)
	digitos[3] = num % 10;            // Obtener el cuarto dígito (unidades)

	//Ejecutamos la multiplexacoion
	int dig;
	for (dig = 0; dig < N_dig; ++dig){

		//ESCOGEMOS EL DIGITO A MOSTRAR
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);

		//MOSTRAMOS EL DIGITO A MOSTRAR
		HAL_GPIO_WritePin(SEG_A_port, SEG_A_pin, (nums_bin[digitos[dig]] & 0x40) >> 6); // A
		HAL_GPIO_WritePin(SEG_B_port, SEG_B_pin, (nums_bin[digitos[dig]] & 0x20) >> 5); // B
		HAL_GPIO_WritePin(SEG_C_port, SEG_C_pin, (nums_bin[digitos[dig]] & 0x10) >> 4); // C
		HAL_GPIO_WritePin(SEG_D_port, SEG_D_pin, (nums_bin[digitos[dig]] & 0x08) >> 3); // D
		HAL_GPIO_WritePin(SEG_E_port, SEG_E_pin, (nums_bin[digitos[dig]] & 0x04) >> 2); // E
		HAL_GPIO_WritePin(SEG_F_port, SEG_F_pin, (nums_bin[digitos[dig]] & 0x02) >> 1); // F
		HAL_GPIO_WritePin(SEG_G_port, SEG_G_pin, (nums_bin[digitos[dig]] & 0x01) >> 0); // G

	}
}
