
STM32746G-DISCOVERY_USBD-FS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005e90  08005e90  00006e90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f24  08005f24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f2c  08005f2c  00006f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b0  20000000  08005f34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d80  200001b0  080060e4  000071b0  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20000f30  080060e4  00007f30  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000071b0  2**0
                  CONTENTS, READONLY
 10 .debug_line   0001f339  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000a2  00000000  00000000  00026519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0001fd9a  00000000  00000000  000265bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b60  00000000  00000000  00046355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0004aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000f94fe  00000000  00000000  0004c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ac  00000000  00000000  00145626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000bac0  00000000  00000000  001468d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029959  00000000  00000000  00152392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bceb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034bc  00000000  00000000  0017bd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001b0 	.word	0x200001b0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005e78 	.word	0x08005e78

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001b4 	.word	0x200001b4
 8000204:	08005e78 	.word	0x08005e78

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000540 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800050c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800050e:	e003      	b.n	8000518 <LoopCopyDataInit>

08000510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000516:	3104      	adds	r1, #4

08000518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000518:	480b      	ldr	r0, [pc, #44]	@ (8000548 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800051c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800051e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000520:	d3f6      	bcc.n	8000510 <CopyDataInit>
  ldr  r2, =_sbss
 8000522:	4a0b      	ldr	r2, [pc, #44]	@ (8000550 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000524:	e002      	b.n	800052c <LoopFillZerobss>

08000526 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000526:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000528:	f842 3b04 	str.w	r3, [r2], #4

0800052c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800052e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000530:	d3f9      	bcc.n	8000526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000532:	f001 fa6f 	bl	8001a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000536:	f005 fc21 	bl	8005d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800053a:	f000 f80f 	bl	800055c <main>
  bx  lr    
 800053e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000540:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000544:	08005f34 	.word	0x08005f34
  ldr  r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800054c:	200001b0 	.word	0x200001b0
  ldr  r2, =_sbss
 8000550:	200001b0 	.word	0x200001b0
  ldr  r3, = _ebss
 8000554:	20000f30 	.word	0x20000f30

08000558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC_IRQHandler>
	...

0800055c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800055c:	b500      	push	{lr}
 800055e:	b093      	sub	sp, #76	@ 0x4c
  HAL_MPU_Disable();

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000560:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000562:	f001 fb41 	bl	8001be8 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000566:	2301      	movs	r3, #1
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000568:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800056a:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800056e:	f248 731f 	movw	r3, #34591	@ 0x871f
 8000572:	e9cd 4307 	strd	r4, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000576:	f240 1301 	movw	r3, #257	@ 0x101
 800057a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800057c:	f001 fb52 	bl	8001c24 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000580:	2004      	movs	r0, #4
 8000582:	f001 fb3f 	bl	8001c04 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000586:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800058a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800058e:	4a42      	ldr	r2, [pc, #264]	@ (8000698 <main+0x13c>)
 8000590:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000594:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000598:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800059c:	6953      	ldr	r3, [r2, #20]
 800059e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005a8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005ac:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005b0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005b4:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005bc:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005c0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80005c4:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ca:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005cc:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d0:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005d2:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80005d6:	d2f9      	bcs.n	80005cc <main+0x70>
    } while(sets-- != 0U);
 80005d8:	3b20      	subs	r3, #32
 80005da:	f113 0f20 	cmn.w	r3, #32
 80005de:	d1f2      	bne.n	80005c6 <main+0x6a>
 80005e0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e4:	6953      	ldr	r3, [r2, #20]
 80005e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80005f4:	f001 fa58 	bl	8001aa8 <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fc:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8000600:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	9410      	str	r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000608:	2300      	movs	r3, #0
 800060a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000610:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8000614:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000618:	e9cd 030e 	strd	r0, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800061c:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000620:	9311      	str	r3, [sp, #68]	@ 0x44
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f002 ff0d 	bl	8003440 <HAL_RCC_OscConfig>
 8000626:	b100      	cbz	r0, 800062a <main+0xce>
 8000628:	e7fe      	b.n	8000628 <main+0xcc>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800062a:	f002 fed1 	bl	80033d0 <HAL_PWREx_EnableOverDrive>
 800062e:	b100      	cbz	r0, 8000632 <main+0xd6>
 8000630:	e7fe      	b.n	8000630 <main+0xd4>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000632:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	9003      	str	r0, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800063a:	2107      	movs	r1, #7
 800063c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000646:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800064a:	f003 f8e1 	bl	8003810 <HAL_RCC_ClockConfig>
 800064e:	4604      	mov	r4, r0
 8000650:	b100      	cbz	r0, 8000654 <main+0xf8>
 8000652:	e7fe      	b.n	8000652 <main+0xf6>
  BSP_LED_Init(LED1);
 8000654:	f000 ffc6 	bl	80015e4 <BSP_LED_Init>
  USBD_Init(&USBD_Device, &AUDIO_Desc, 0);
 8000658:	4622      	mov	r2, r4
 800065a:	4910      	ldr	r1, [pc, #64]	@ (800069c <main+0x140>)
 800065c:	4810      	ldr	r0, [pc, #64]	@ (80006a0 <main+0x144>)
 800065e:	f004 fe9c 	bl	800539a <USBD_Init>
  USBD_RegisterClass(&USBD_Device, USBD_AUDIO_CLASS);
 8000662:	4910      	ldr	r1, [pc, #64]	@ (80006a4 <main+0x148>)
 8000664:	480e      	ldr	r0, [pc, #56]	@ (80006a0 <main+0x144>)
 8000666:	f004 feab 	bl	80053c0 <USBD_RegisterClass>
  USBD_AUDIO_RegisterInterface(&USBD_Device, &USBD_AUDIO_fops);
 800066a:	4d0d      	ldr	r5, [pc, #52]	@ (80006a0 <main+0x144>)
 800066c:	490e      	ldr	r1, [pc, #56]	@ (80006a8 <main+0x14c>)
 800066e:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <main+0x144>)
 8000670:	f004 fe88 	bl	8005384 <USBD_AUDIO_RegisterInterface>
  USBD_Start(&USBD_Device);
 8000674:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <main+0x144>)
 8000676:	f004 febc 	bl	80053f2 <USBD_Start>
 800067a:	f8d5 32dc 	ldr.w	r3, [r5, #732]	@ 0x2dc
  if(ticks++ == 0xfffff)
 800067e:	3301      	adds	r3, #1
 8000680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000684:	d1fb      	bne.n	800067e <main+0x122>
    BSP_LED_Toggle(LED1);
 8000686:	2000      	movs	r0, #0
 8000688:	f8c5 32dc 	str.w	r3, [r5, #732]	@ 0x2dc
 800068c:	f000 ffce 	bl	800162c <BSP_LED_Toggle>
    ticks = 0;
 8000690:	f8c5 42dc 	str.w	r4, [r5, #732]	@ 0x2dc
 8000694:	e7f1      	b.n	800067a <main+0x11e>
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00
 800069c:	20000050 	.word	0x20000050
 80006a0:	200001cc 	.word	0x200001cc
 80006a4:	20000128 	.word	0x20000128
 80006a8:	20000000 	.word	0x20000000

080006ac <BSP_AUDIO_OUT_ClockConfig>:
{
 80006ac:	b510      	push	{r4, lr}
 80006ae:	b0a2      	sub	sp, #136	@ 0x88
 80006b0:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 80006b2:	a801      	add	r0, sp, #4
 80006b4:	f003 fbda 	bl	8003e6c <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80006b8:	f642 3311 	movw	r3, #11025	@ 0x2b11
 80006bc:	429c      	cmp	r4, r3
 80006be:	d007      	beq.n	80006d0 <BSP_AUDIO_OUT_ClockConfig+0x24>
 80006c0:	f245 6322 	movw	r3, #22050	@ 0x5622
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d003      	beq.n	80006d0 <BSP_AUDIO_OUT_ClockConfig+0x24>
 80006c8:	f64a 4344 	movw	r3, #44100	@ 0xac44
 80006cc:	429c      	cmp	r4, r3
 80006ce:	d113      	bne.n	80006f8 <BSP_AUDIO_OUT_ClockConfig+0x4c>
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80006d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80006d4:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006da:	9311      	str	r3, [sp, #68]	@ 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 429;
 80006e0:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80006e4:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 19;
 80006ea:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
 80006ec:	a801      	add	r0, sp, #4
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
 80006ee:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct);
 80006f0:	f003 f932 	bl	8003958 <HAL_RCCEx_PeriphCLKConfig>
}
 80006f4:	b022      	add	sp, #136	@ 0x88
 80006f6:	bd10      	pop	{r4, pc}
    RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80006f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80006fc:	9301      	str	r3, [sp, #4]
    RCC_ExCLKInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000702:	9311      	str	r3, [sp, #68]	@ 0x44
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SP = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	9305      	str	r3, [sp, #20]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 344;
 8000708:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800070c:	9302      	str	r3, [sp, #8]
    RCC_ExCLKInitStruct.PLLI2S.PLLI2SQ = 7;
 800070e:	2307      	movs	r3, #7
 8000710:	9304      	str	r3, [sp, #16]
    RCC_ExCLKInitStruct.PLLI2SDivQ = 1;
 8000712:	2301      	movs	r3, #1
 8000714:	e7ea      	b.n	80006ec <BSP_AUDIO_OUT_ClockConfig+0x40>

08000716 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000716:	4770      	bx	lr

08000718 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000718:	e7fe      	b.n	8000718 <HardFault_Handler>

0800071a <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800071a:	e7fe      	b.n	800071a <MemManage_Handler>

0800071c <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800071c:	e7fe      	b.n	800071c <BusFault_Handler>

0800071e <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800071e:	e7fe      	b.n	800071e <UsageFault_Handler>

08000720 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8000720:	4770      	bx	lr

08000722 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8000722:	4770      	bx	lr

08000724 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8000724:	4770      	bx	lr

08000726 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000726:	f001 b9d5 	b.w	8001ad4 <HAL_IncTick>
	...

0800072c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 800072c:	4801      	ldr	r0, [pc, #4]	@ (8000734 <OTG_FS_IRQHandler+0x8>)
 800072e:	f002 bab1 	b.w	8002c94 <HAL_PCD_IRQHandler>
 8000732:	bf00      	nop
 8000734:	200004ac 	.word	0x200004ac

08000738 <DMA2_Stream4_IRQHandler>:
  * @param None
  * @retval None
  */
void DMA2_Stream4_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8000738:	4b01      	ldr	r3, [pc, #4]	@ (8000740 <DMA2_Stream4_IRQHandler+0x8>)
 800073a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800073c:	f001 bbd8 	b.w	8001ef0 <HAL_DMA_IRQHandler>
 8000740:	20000b64 	.word	0x20000b64

08000744 <Audio_PeriodicTC>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t Audio_PeriodicTC(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
  return 0;
}
 8000744:	2000      	movs	r0, #0
 8000746:	4770      	bx	lr

08000748 <Audio_GetState>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t Audio_GetState(void)
{
  return 0;
}
 8000748:	2000      	movs	r0, #0
 800074a:	4770      	bx	lr

0800074c <Audio_MuteCtl>:
{
 800074c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_SetMute(cmd);
 800074e:	f001 f807 	bl	8001760 <BSP_AUDIO_OUT_SetMute>
}
 8000752:	2000      	movs	r0, #0
 8000754:	bd08      	pop	{r3, pc}

08000756 <Audio_VolumeCtl>:
{
 8000756:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_SetVolume(vol);
 8000758:	f000 fff4 	bl	8001744 <BSP_AUDIO_OUT_SetVolume>
}
 800075c:	2000      	movs	r0, #0
 800075e:	bd08      	pop	{r3, pc}

08000760 <Audio_PlaybackCmd>:
  switch(cmd)
 8000760:	2a01      	cmp	r2, #1
{
 8000762:	b508      	push	{r3, lr}
  switch(cmd)
 8000764:	d003      	beq.n	800076e <Audio_PlaybackCmd+0xe>
 8000766:	2a02      	cmp	r2, #2
 8000768:	d005      	beq.n	8000776 <Audio_PlaybackCmd+0x16>
}
 800076a:	2000      	movs	r0, #0
 800076c:	bd08      	pop	{r3, pc}
    BSP_AUDIO_OUT_Play((uint16_t *)pbuf, 2*size);
 800076e:	0049      	lsls	r1, r1, #1
 8000770:	f000 ffaa 	bl	80016c8 <BSP_AUDIO_OUT_Play>
    break;
 8000774:	e7f9      	b.n	800076a <Audio_PlaybackCmd+0xa>
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t *)pbuf, 2*size);
 8000776:	0049      	lsls	r1, r1, #1
 8000778:	b289      	uxth	r1, r1
 800077a:	f000 ffc3 	bl	8001704 <BSP_AUDIO_OUT_ChangeBuffer>
    break;
 800077e:	e7f4      	b.n	800076a <Audio_PlaybackCmd+0xa>

08000780 <Audio_DeInit>:
{
 8000780:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8000782:	2002      	movs	r0, #2
 8000784:	f000 ffc6 	bl	8001714 <BSP_AUDIO_OUT_Stop>
}
 8000788:	2000      	movs	r0, #0
 800078a:	bd08      	pop	{r3, pc}

0800078c <Audio_Init>:
{
 800078c:	4602      	mov	r2, r0
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AudioFreq);
 800078e:	b2c9      	uxtb	r1, r1
 8000790:	2004      	movs	r0, #4
{
 8000792:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AudioFreq);
 8000794:	f001 f8b8 	bl	8001908 <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8000798:	2005      	movs	r0, #5
 800079a:	f000 ffef 	bl	800177c <BSP_AUDIO_OUT_SetAudioFrameSlot>
}
 800079e:	2000      	movs	r0, #0
 80007a0:	bd08      	pop	{r3, pc}
	...

080007a4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_FULL);
 80007a4:	2102      	movs	r1, #2
 80007a6:	4801      	ldr	r0, [pc, #4]	@ (80007ac <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8>)
 80007a8:	f004 bda6 	b.w	80052f8 <USBD_AUDIO_Sync>
 80007ac:	200001cc 	.word	0x200001cc

080007b0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
  USBD_AUDIO_Sync(&USBD_Device, AUDIO_OFFSET_HALF);
 80007b0:	2101      	movs	r1, #1
 80007b2:	4801      	ldr	r0, [pc, #4]	@ (80007b8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 80007b4:	f004 bda0 	b.w	80052f8 <USBD_AUDIO_Sync>
 80007b8:	200001cc 	.word	0x200001cc

080007bc <HAL_PCD_MspInit>:
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hpcd->Instance == USB_OTG_FS)
 80007bc:	6803      	ldr	r3, [r0, #0]
 80007be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
{
 80007c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007c6:	b08e      	sub	sp, #56	@ 0x38
  if(hpcd->Instance == USB_OTG_FS)
 80007c8:	d135      	bne.n	8000836 <HAL_PCD_MspInit+0x7a>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4c5a      	ldr	r4, [pc, #360]	@ (8000934 <HAL_PCD_MspInit+0x178>)
    
    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80007d0:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80007d2:	a909      	add	r1, sp, #36	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80007d6:	4858      	ldr	r0, [pc, #352]	@ (8000938 <HAL_PCD_MspInit+0x17c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80007de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	e9cd 530b 	strd	r5, r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007f4:	230a      	movs	r3, #10
 80007f6:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80007f8:	f001 fc38 	bl	800206c <HAL_GPIO_Init>
    
    /* Enable USB FS Clock */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80007fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    
    /* Set USBFS Interrupt priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80007fe:	2043      	movs	r0, #67	@ 0x43
 8000800:	462a      	mov	r2, r5
 8000802:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	6363      	str	r3, [r4, #52]	@ 0x34
 800080a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800080c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	9b01      	ldr	r3, [sp, #4]
 8000814:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081a:	6463      	str	r3, [r4, #68]	@ 0x44
 800081c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000822:	9302      	str	r3, [sp, #8]
 8000824:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000826:	f001 f98b 	bl	8001b40 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800082a:	2043      	movs	r0, #67	@ 0x43
    
    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
    
    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800082c:	f001 f9ba 	bl	8001ba4 <HAL_NVIC_EnableIRQ>
  }   
}
 8000830:	b00e      	add	sp, #56	@ 0x38
 8000832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hpcd->Instance == USB_OTG_HS)
 8000836:	4a41      	ldr	r2, [pc, #260]	@ (800093c <HAL_PCD_MspInit+0x180>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d1f9      	bne.n	8000830 <HAL_PCD_MspInit+0x74>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4c3d      	ldr	r4, [pc, #244]	@ (8000934 <HAL_PCD_MspInit+0x178>)
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800083e:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000842:	260a      	movs	r6, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000846:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	a909      	add	r1, sp, #36	@ 0x24
 800084c:	483a      	ldr	r0, [pc, #232]	@ (8000938 <HAL_PCD_MspInit+0x17c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6323      	str	r3, [r4, #48]	@ 0x30
 8000854:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6323      	str	r3, [r4, #48]	@ 0x30
 8000866:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	9304      	str	r3, [sp, #16]
 800086e:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000870:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6323      	str	r3, [r4, #48]	@ 0x30
 8000878:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6323      	str	r3, [r4, #48]	@ 0x30
 800088a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800088c:	960d      	str	r6, [sp, #52]	@ 0x34
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	9306      	str	r3, [sp, #24]
 8000894:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000898:	e9cd 580b 	strd	r5, r8, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f001 fbe4 	bl	800206c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008a4:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	a909      	add	r1, sp, #36	@ 0x24
 80008a8:	4823      	ldr	r0, [pc, #140]	@ (8000938 <HAL_PCD_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008aa:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80008b0:	e9cd 580b 	strd	r5, r8, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f001 fbda 	bl	800206c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_5 |\
 80008b8:	f643 4323 	movw	r3, #15395	@ 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	a909      	add	r1, sp, #36	@ 0x24
 80008be:	4820      	ldr	r0, [pc, #128]	@ (8000940 <HAL_PCD_MspInit+0x184>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008c2:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f001 fbd0 	bl	800206c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008cc:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	a909      	add	r1, sp, #36	@ 0x24
 80008d0:	481c      	ldr	r0, [pc, #112]	@ (8000944 <HAL_PCD_MspInit+0x188>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008d4:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f001 fbc7 	bl	800206c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008de:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008e0:	a909      	add	r1, sp, #36	@ 0x24
 80008e2:	4819      	ldr	r0, [pc, #100]	@ (8000948 <HAL_PCD_MspInit+0x18c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008e6:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008ec:	f001 fbbe 	bl	800206c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	a909      	add	r1, sp, #36	@ 0x24
 80008f4:	4813      	ldr	r0, [pc, #76]	@ (8000944 <HAL_PCD_MspInit+0x188>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008f8:	960d      	str	r6, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f001 fbb5 	bl	800206c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8000902:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8000904:	204d      	movs	r0, #77	@ 0x4d
 8000906:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8000908:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800090c:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800090e:	6323      	str	r3, [r4, #48]	@ 0x30
 8000910:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000912:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000916:	9307      	str	r3, [sp, #28]
 8000918:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800091a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800091c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000920:	6323      	str	r3, [r4, #48]	@ 0x30
 8000922:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000928:	9308      	str	r3, [sp, #32]
 800092a:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800092c:	f001 f908 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000930:	204d      	movs	r0, #77	@ 0x4d
 8000932:	e77b      	b.n	800082c <HAL_PCD_MspInit+0x70>
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000
 800093c:	40040000 	.word	0x40040000
 8000940:	40020400 	.word	0x40020400
 8000944:	40020800 	.word	0x40020800
 8000948:	40021c00 	.word	0x40021c00

0800094c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800094c:	f200 41c4 	addw	r1, r0, #1220	@ 0x4c4
 8000950:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 8000954:	f004 bd5f 	b.w	8005416 <USBD_LL_SetupStage>

08000958 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000958:	2324      	movs	r3, #36	@ 0x24
 800095a:	fb03 0301 	mla	r3, r3, r1, r0
 800095e:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 8000962:	f8d3 228c 	ldr.w	r2, [r3, #652]	@ 0x28c
 8000966:	f004 bd86 	b.w	8005476 <USBD_LL_DataOutStage>

0800096a <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800096a:	2324      	movs	r3, #36	@ 0x24
 800096c:	fb03 0301 	mla	r3, r3, r1, r0
 8000970:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 8000974:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000976:	f004 bdb3 	b.w	80054e0 <USBD_LL_DataInStage>

0800097a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 800097a:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 800097e:	f004 be49 	b.w	8005614 <USBD_LL_SOF>

08000982 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
  
  /* Set USB Current Speed */
  switch(hpcd->Init.speed)
 8000982:	68c1      	ldr	r1, [r0, #12]
{   
 8000984:	b538      	push	{r3, r4, r5, lr}
  switch(hpcd->Init.speed)
 8000986:	1e0d      	subs	r5, r1, #0
{   
 8000988:	4604      	mov	r4, r0
    speed = USBD_SPEED_FULL;
    break;
  }
  
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800098a:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
  switch(hpcd->Init.speed)
 800098e:	bf18      	it	ne
 8000990:	2501      	movne	r5, #1
  USBD_LL_Reset(hpcd->pData);
 8000992:	f004 fdf8 	bl	8005586 <USBD_LL_Reset>
  
  USBD_LL_SetSpeed(hpcd->pData, speed);
 8000996:	f8d4 0504 	ldr.w	r0, [r4, #1284]	@ 0x504
 800099a:	4629      	mov	r1, r5
}
 800099c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  USBD_LL_SetSpeed(hpcd->pData, speed);
 80009a0:	f004 be20 	b.w	80055e4 <USBD_LL_SetSpeed>

080009a4 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Suspend(hpcd->pData);
 80009a4:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 80009a8:	f004 be1f 	b.w	80055ea <USBD_LL_Suspend>

080009ac <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 80009ac:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 80009b0:	f004 be25 	b.w	80055fe <USBD_LL_Resume>

080009b4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 80009b4:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 80009b8:	f004 be4c 	b.w	8005654 <USBD_LL_IsoOUTIncomplete>

080009bc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 80009bc:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 80009c0:	f004 be35 	b.w	800562e <USBD_LL_IsoINIncomplete>

080009c4 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 80009c4:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 80009c8:	f004 be57 	b.w	800567a <USBD_LL_DevConnected>

080009cc <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 80009cc:	f8d0 0504 	ldr.w	r0, [r0, #1284]	@ 0x504
 80009d0:	f004 be55 	b.w	800567e <USBD_LL_DevDisconnected>

080009d4 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80009d4:	b538      	push	{r3, r4, r5, lr}
#ifdef USE_USB_FS
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
  hpcd.Init.dev_endpoints = 6;
 80009d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hpcd.Instance = USB_OTG_FS;
 80009da:	4c10      	ldr	r4, [pc, #64]	@ (8000a1c <USBD_LL_Init+0x48>)
  hpcd.Init.dev_endpoints = 6;
 80009dc:	2306      	movs	r3, #6
  hpcd.Init.use_dedicated_ep1 = 0;
 80009de:	2500      	movs	r5, #0
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  hpcd.Init.lpm_enable = 0;
  
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 80009e0:	f8c4 0504 	str.w	r0, [r4, #1284]	@ 0x504
  pdev->pData = &hpcd;
 80009e4:	f8c0 42c8 	str.w	r4, [r0, #712]	@ 0x2c8
  
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 80009e8:	4620      	mov	r0, r4
  hpcd.Init.use_dedicated_ep1 = 0;
 80009ea:	6325      	str	r5, [r4, #48]	@ 0x30
  hpcd.Init.dma_enable = 0;
 80009ec:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 80009ee:	6225      	str	r5, [r4, #32]
  hpcd.Init.vbus_sensing_enable = 0;
 80009f0:	62e5      	str	r5, [r4, #44]	@ 0x2c
  hpcd.Init.lpm_enable = 0;
 80009f2:	6265      	str	r5, [r4, #36]	@ 0x24
  hpcd.Init.dev_endpoints = 6;
 80009f4:	e9c4 2300 	strd	r2, r3, [r4]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f8:	2302      	movs	r3, #2
  hpcd.Init.Sof_enable = 0;
 80009fa:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hpcd.Init.speed = PCD_SPEED_FULL;
 80009fe:	60e3      	str	r3, [r4, #12]
  HAL_PCD_Init(&hpcd);
 8000a00:	f001 ff67 	bl	80028d2 <HAL_PCD_Init>
  
  HAL_PCDEx_SetRxFiFo(&hpcd, 0x80);
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	4620      	mov	r0, r4
 8000a08:	f002 fcc9 	bl	800339e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd, 0, 0x60);
 8000a0c:	2260      	movs	r2, #96	@ 0x60
 8000a0e:	4629      	mov	r1, r5
 8000a10:	4620      	mov	r0, r4
 8000a12:	f002 fca5 	bl	8003360 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetRxFiFo(&hpcd, 0x100);
  HAL_PCDEx_SetTxFiFo(&hpcd, 0, 0x200);
#endif
  
  return USBD_OK;
}
 8000a16:	4628      	mov	r0, r5
 8000a18:	bd38      	pop	{r3, r4, r5, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200004ac 	.word	0x200004ac

08000a20 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000a20:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8000a22:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8000a26:	f001 ffda 	bl	80029de <HAL_PCD_Start>
  return USBD_OK;
}
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	bd08      	pop	{r3, pc}

08000a2e <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8000a2e:	b510      	push	{r4, lr}
 8000a30:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 8000a32:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
{
 8000a36:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 8000a38:	4623      	mov	r3, r4
 8000a3a:	f001 fff9 	bl	8002a30 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8000a3e:	2000      	movs	r0, #0
 8000a40:	bd10      	pop	{r4, pc}

08000a42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000a42:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000a44:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8000a48:	f002 f82a 	bl	8002aa0 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	bd08      	pop	{r3, pc}

08000a50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000a50:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000a52:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8000a56:	f002 f89e 	bl	8002b96 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	bd08      	pop	{r3, pc}

08000a5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000a5e:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000a60:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8000a64:	f002 f8cf 	bl	8002c06 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8000a68:	2000      	movs	r0, #0
 8000a6a:	bd08      	pop	{r3, pc}

08000a6c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8000a6c:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  
  if((ep_addr & 0x80) == 0x80)
 8000a70:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    return hpcd->IN_ep[ep_addr & 0xF].is_stall;
 8000a74:	f001 020f 	and.w	r2, r1, #15
 8000a78:	f04f 0124 	mov.w	r1, #36	@ 0x24
 8000a7c:	fb01 3302 	mla	r3, r1, r2, r3
 8000a80:	bf14      	ite	ne
 8000a82:	f893 003e 	ldrbne.w	r0, [r3, #62]	@ 0x3e
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0xF].is_stall;
 8000a86:	f893 027e 	ldrbeq.w	r0, [r3, #638]	@ 0x27e
  }
}
 8000a8a:	4770      	bx	lr

08000a8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000a8c:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000a8e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8000a92:	f001 ffb9 	bl	8002a08 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8000a96:	2000      	movs	r0, #0
 8000a98:	bd08      	pop	{r3, pc}

08000a9a <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8000a9a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000a9c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8000aa0:	f002 f859 	bl	8002b56 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	bd08      	pop	{r3, pc}

08000aa8 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8000aa8:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000aaa:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8000aae:	f002 f826 	bl	8002afe <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	bd08      	pop	{r3, pc}

08000ab6 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint Number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8000ab6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8000aba:	f002 b844 	b.w	8002b46 <HAL_PCD_EP_GetRxCount>
	...

08000ac0 <USBD_AUDIO_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8000ac0:	2312      	movs	r3, #18
  return (uint8_t*)USBD_DeviceDesc;
}
 8000ac2:	4801      	ldr	r0, [pc, #4]	@ (8000ac8 <USBD_AUDIO_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 8000ac4:	800b      	strh	r3, [r1, #0]
}
 8000ac6:	4770      	bx	lr
 8000ac8:	2000001c 	.word	0x2000001c

08000acc <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8000acc:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 8000ace:	4801      	ldr	r0, [pc, #4]	@ (8000ad4 <USBD_AUDIO_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 8000ad0:	800b      	strh	r3, [r1, #0]
}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000030 	.word	0x20000030

08000ad8 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0; idx < len; idx ++)
 8000ad8:	2300      	movs	r3, #0
{
 8000ada:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8000adc:	1c4d      	adds	r5, r1, #1
 8000ade:	461e      	mov	r6, r3
  for( idx = 0; idx < len; idx ++)
 8000ae0:	b2dc      	uxtb	r4, r3
 8000ae2:	42a2      	cmp	r2, r4
 8000ae4:	d800      	bhi.n	8000ae8 <IntToUnicode+0x10>
  }
}
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000ae8:	0f04      	lsrs	r4, r0, #28
    if( ((value >> 28)) < 0xA )
 8000aea:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
    value = value << 4;
 8000aee:	ea4f 1000 	mov.w	r0, r0, lsl #4
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000af2:	bf34      	ite	cc
 8000af4:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8000af6:	3437      	addcs	r4, #55	@ 0x37
      pbuf[ 2* idx] = (value >> 28) + '0';
 8000af8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 8000afc:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for( idx = 0; idx < len; idx ++)
 8000b00:	3301      	adds	r3, #1
 8000b02:	e7ed      	b.n	8000ae0 <IntToUnicode+0x8>

08000b04 <USBD_AUDIO_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8000b04:	231a      	movs	r3, #26
{
 8000b06:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8000b08:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <USBD_AUDIO_SerialStrDescriptor+0x30>)
 8000b0c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	@ 0xa10
  deviceserial0 += deviceserial2;
 8000b10:	f8d3 2a18 	ldr.w	r2, [r3, #2584]	@ 0xa18
  if (deviceserial0 != 0)
 8000b14:	1880      	adds	r0, r0, r2
 8000b16:	d00a      	beq.n	8000b2e <USBD_AUDIO_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8000b18:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	@ 0xa14
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	4906      	ldr	r1, [pc, #24]	@ (8000b38 <USBD_AUDIO_SerialStrDescriptor+0x34>)
 8000b20:	f7ff ffda 	bl	8000ad8 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8000b24:	2204      	movs	r2, #4
 8000b26:	3110      	adds	r1, #16
 8000b28:	4620      	mov	r0, r4
 8000b2a:	f7ff ffd5 	bl	8000ad8 <IntToUnicode>
}
 8000b2e:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <USBD_AUDIO_SerialStrDescriptor+0x38>)
 8000b30:	bd10      	pop	{r4, pc}
 8000b32:	bf00      	nop
 8000b34:	1fff7000 	.word	0x1fff7000
 8000b38:	20000036 	.word	0x20000036
 8000b3c:	20000034 	.word	0x20000034

08000b40 <USBD_AUDIO_ManufacturerStrDescriptor>:
{
 8000b40:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000b42:	4c04      	ldr	r4, [pc, #16]	@ (8000b54 <USBD_AUDIO_ManufacturerStrDescriptor+0x14>)
{
 8000b44:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000b46:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <USBD_AUDIO_ManufacturerStrDescriptor+0x18>)
 8000b48:	4621      	mov	r1, r4
 8000b4a:	f004 ffe5 	bl	8005b18 <USBD_GetString>
}
 8000b4e:	4620      	mov	r0, r4
 8000b50:	bd10      	pop	{r4, pc}
 8000b52:	bf00      	nop
 8000b54:	200009b4 	.word	0x200009b4
 8000b58:	08005eb0 	.word	0x08005eb0

08000b5c <USBD_AUDIO_ProductStrDescriptor>:
{
 8000b5c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8000b5e:	4905      	ldr	r1, [pc, #20]	@ (8000b74 <USBD_AUDIO_ProductStrDescriptor+0x18>)
{
 8000b60:	b508      	push	{r3, lr}
  if(speed == USBD_SPEED_HIGH)
 8000b62:	b920      	cbnz	r0, 8000b6e <USBD_AUDIO_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8000b66:	f004 ffd7 	bl	8005b18 <USBD_GetString>
}
 8000b6a:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <USBD_AUDIO_ProductStrDescriptor+0x18>)
 8000b6c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8000b6e:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <USBD_AUDIO_ProductStrDescriptor+0x20>)
 8000b70:	e7f9      	b.n	8000b66 <USBD_AUDIO_ProductStrDescriptor+0xa>
 8000b72:	bf00      	nop
 8000b74:	200009b4 	.word	0x200009b4
 8000b78:	08005ec3 	.word	0x08005ec3
 8000b7c:	08005ee4 	.word	0x08005ee4

08000b80 <USBD_AUDIO_ConfigStrDescriptor>:
{
 8000b80:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8000b82:	4c04      	ldr	r4, [pc, #16]	@ (8000b94 <USBD_AUDIO_ConfigStrDescriptor+0x14>)
{
 8000b84:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8000b86:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <USBD_AUDIO_ConfigStrDescriptor+0x18>)
 8000b88:	4621      	mov	r1, r4
 8000b8a:	f004 ffc5 	bl	8005b18 <USBD_GetString>
}
 8000b8e:	4620      	mov	r0, r4
 8000b90:	bd10      	pop	{r4, pc}
 8000b92:	bf00      	nop
 8000b94:	200009b4 	.word	0x200009b4
 8000b98:	08005f05 	.word	0x08005f05

08000b9c <USBD_AUDIO_InterfaceStrDescriptor>:
{
 8000b9c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8000b9e:	4c04      	ldr	r4, [pc, #16]	@ (8000bb0 <USBD_AUDIO_InterfaceStrDescriptor+0x14>)
{
 8000ba0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8000ba2:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <USBD_AUDIO_InterfaceStrDescriptor+0x18>)
 8000ba4:	4621      	mov	r1, r4
 8000ba6:	f004 ffb7 	bl	8005b18 <USBD_GetString>
}
 8000baa:	4620      	mov	r0, r4
 8000bac:	bd10      	pop	{r4, pc}
 8000bae:	bf00      	nop
 8000bb0:	200009b4 	.word	0x200009b4
 8000bb4:	08005f12 	.word	0x08005f12

08000bb8 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 8000bb8:	2901      	cmp	r1, #1
{
 8000bba:	b510      	push	{r4, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000bbc:	b2c4      	uxtb	r4, r0
  switch (Output) 
 8000bbe:	d00f      	beq.n	8000be0 <wm8994_SetOutputMode+0x28>
 8000bc0:	2903      	cmp	r1, #3
 8000bc2:	d12d      	bne.n	8000c20 <wm8994_SetOutputMode+0x68>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8000bc4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000bc8:	2105      	movs	r1, #5
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f000 fd3e 	bl	800164c <AUDIO_IO_Write>
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f240 6101 	movw	r1, #1537	@ 0x601
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f000 fd38 	bl	800164c <AUDIO_IO_Write>
 8000bdc:	2201      	movs	r2, #1
 8000bde:	e00c      	b.n	8000bfa <wm8994_SetOutputMode+0x42>
 8000be0:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8000be4:	2105      	movs	r1, #5
 8000be6:	4620      	mov	r0, r4
 8000be8:	f000 fd30 	bl	800164c <AUDIO_IO_Write>
 8000bec:	2200      	movs	r2, #0
 8000bee:	f240 6101 	movw	r1, #1537	@ 0x601
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f000 fd2a 	bl	800164c <AUDIO_IO_Write>
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f240 6102 	movw	r1, #1538	@ 0x602
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f000 fd24 	bl	800164c <AUDIO_IO_Write>
 8000c04:	2202      	movs	r2, #2
 8000c06:	f240 6104 	movw	r1, #1540	@ 0x604
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f000 fd1e 	bl	800164c <AUDIO_IO_Write>
 8000c10:	2202      	movs	r2, #2
 8000c12:	4620      	mov	r0, r4
 8000c14:	f240 6105 	movw	r1, #1541	@ 0x605
 8000c18:	f000 fd18 	bl	800164c <AUDIO_IO_Write>
}
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000c20:	f240 3203 	movw	r2, #771	@ 0x303
 8000c24:	2105      	movs	r1, #5
 8000c26:	4620      	mov	r0, r4
 8000c28:	f000 fd10 	bl	800164c <AUDIO_IO_Write>
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f240 6101 	movw	r1, #1537	@ 0x601
 8000c32:	4620      	mov	r0, r4
 8000c34:	f000 fd0a 	bl	800164c <AUDIO_IO_Write>
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f240 6102 	movw	r1, #1538	@ 0x602
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f000 fd04 	bl	800164c <AUDIO_IO_Write>
 8000c44:	2200      	movs	r2, #0
 8000c46:	f240 6104 	movw	r1, #1540	@ 0x604
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f000 fcfe 	bl	800164c <AUDIO_IO_Write>
 8000c50:	2200      	movs	r2, #0
 8000c52:	e7de      	b.n	8000c12 <wm8994_SetOutputMode+0x5a>

08000c54 <wm8994_SetFrequency>:
{
 8000c54:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8000c56:	f245 6322 	movw	r3, #22050	@ 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000c5a:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d025      	beq.n	8000cac <wm8994_SetFrequency+0x58>
 8000c60:	d80b      	bhi.n	8000c7a <wm8994_SetFrequency+0x26>
 8000c62:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d01e      	beq.n	8000ca8 <wm8994_SetFrequency+0x54>
 8000c6a:	f5b1 5f7a 	cmp.w	r1, #16000	@ 0x3e80
 8000c6e:	d017      	beq.n	8000ca0 <wm8994_SetFrequency+0x4c>
 8000c70:	f5b1 5ffa 	cmp.w	r1, #8000	@ 0x1f40
 8000c74:	d00d      	beq.n	8000c92 <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000c76:	2283      	movs	r2, #131	@ 0x83
 8000c78:	e00c      	b.n	8000c94 <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
 8000c7a:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d016      	beq.n	8000cb0 <wm8994_SetFrequency+0x5c>
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <wm8994_SetFrequency+0x60>)
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d00d      	beq.n	8000ca4 <wm8994_SetFrequency+0x50>
 8000c88:	f5b1 4ffa 	cmp.w	r1, #32000	@ 0x7d00
 8000c8c:	d1f3      	bne.n	8000c76 <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000c8e:	2263      	movs	r2, #99	@ 0x63
 8000c90:	e000      	b.n	8000c94 <wm8994_SetFrequency+0x40>
 8000c92:	2203      	movs	r2, #3
 8000c94:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8000c98:	f000 fcd8 	bl	800164c <AUDIO_IO_Write>
}
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000ca0:	2233      	movs	r2, #51	@ 0x33
 8000ca2:	e7f7      	b.n	8000c94 <wm8994_SetFrequency+0x40>
 8000ca4:	22a3      	movs	r2, #163	@ 0xa3
 8000ca6:	e7f5      	b.n	8000c94 <wm8994_SetFrequency+0x40>
 8000ca8:	2213      	movs	r2, #19
 8000caa:	e7f3      	b.n	8000c94 <wm8994_SetFrequency+0x40>
 8000cac:	2243      	movs	r2, #67	@ 0x43
 8000cae:	e7f1      	b.n	8000c94 <wm8994_SetFrequency+0x40>
 8000cb0:	2273      	movs	r2, #115	@ 0x73
 8000cb2:	e7ef      	b.n	8000c94 <wm8994_SetFrequency+0x40>
 8000cb4:	00017700 	.word	0x00017700

08000cb8 <wm8994_Reset>:
 8000cb8:	2200      	movs	r2, #0
 8000cba:	b2c0      	uxtb	r0, r0
{
 8000cbc:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	f000 fcc4 	bl	800164c <AUDIO_IO_Write>
  outputEnabled = 0;
 8000cc4:	4b02      	ldr	r3, [pc, #8]	@ (8000cd0 <wm8994_Reset+0x18>)
 8000cc6:	2000      	movs	r0, #0
  inputEnabled=0;
 8000cc8:	e9c3 0000 	strd	r0, r0, [r3]
}
 8000ccc:	bd08      	pop	{r3, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000ab4 	.word	0x20000ab4

08000cd4 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 8000cd4:	f000 bcb8 	b.w	8001648 <AUDIO_IO_DeInit>

08000cd8 <wm8994_ReadID>:
{
 8000cd8:	b510      	push	{r4, lr}
 8000cda:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8000cdc:	f000 fcae 	bl	800163c <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	b2e0      	uxtb	r0, r4
 8000ce4:	f000 fcc6 	bl	8001674 <AUDIO_IO_Read>
}
 8000ce8:	bd10      	pop	{r4, pc}
	...

08000cec <wm8994_SetMute>:
  if (outputEnabled != 0)
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <wm8994_SetMute+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
{
 8000cf0:	b510      	push	{r4, lr}
  if (outputEnabled != 0)
 8000cf2:	b183      	cbz	r3, 8000d16 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 8000cf4:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000cf6:	b2c4      	uxtb	r4, r0
    if(Cmd == AUDIO_MUTE_ON)
 8000cf8:	d10f      	bne.n	8000d1a <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cfe:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000d02:	4620      	mov	r0, r4
 8000d04:	f000 fca2 	bl	800164c <AUDIO_IO_Write>
 8000d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d0c:	f240 4122 	movw	r1, #1058	@ 0x422
 8000d10:	4620      	mov	r0, r4
 8000d12:	f000 fc9b 	bl	800164c <AUDIO_IO_Write>
}
 8000d16:	2000      	movs	r0, #0
 8000d18:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000d20:	4620      	mov	r0, r4
 8000d22:	f000 fc93 	bl	800164c <AUDIO_IO_Write>
 8000d26:	2210      	movs	r2, #16
 8000d28:	e7f0      	b.n	8000d0c <wm8994_SetMute+0x20>
 8000d2a:	bf00      	nop
 8000d2c:	20000ab4 	.word	0x20000ab4

08000d30 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d30:	2100      	movs	r1, #0
 8000d32:	f7ff bfdb 	b.w	8000cec <wm8994_SetMute>

08000d36 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d36:	2100      	movs	r1, #0
 8000d38:	f7ff bfd8 	b.w	8000cec <wm8994_SetMute>

08000d3c <wm8994_Pause>:
{  
 8000d3c:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000d3e:	2101      	movs	r1, #1
{  
 8000d40:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000d42:	f7ff ffd3 	bl	8000cec <wm8994_SetMute>
 8000d46:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	b2e8      	uxtb	r0, r5
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	f000 fc7d 	bl	800164c <AUDIO_IO_Write>
}
 8000d52:	4620      	mov	r0, r4
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
	...

08000d58 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000d58:	2964      	cmp	r1, #100	@ 0x64
{
 8000d5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d5e:	f04f 0764 	mov.w	r7, #100	@ 0x64
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000d62:	bf98      	it	ls
 8000d64:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
  if (outputEnabled != 0)
 8000d68:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8000e58 <wm8994_SetVolume+0x100>
{
 8000d6c:	4605      	mov	r5, r0
 8000d6e:	460c      	mov	r4, r1
  if (outputEnabled != 0)
 8000d70:	f8d9 6000 	ldr.w	r6, [r9]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000d74:	bf9c      	itt	ls
 8000d76:	fbb3 f3f7 	udivls	r3, r3, r7
 8000d7a:	b2df      	uxtbls	r7, r3
  if (outputEnabled != 0)
 8000d7c:	b326      	cbz	r6, 8000dc8 <wm8994_SetVolume+0x70>
    if(convertedvol > 0x3E)
 8000d7e:	2f3e      	cmp	r7, #62	@ 0x3e
 8000d80:	d91d      	bls.n	8000dbe <wm8994_SetVolume+0x66>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8000d82:	b2ef      	uxtb	r7, r5
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d84:	2100      	movs	r1, #0
 8000d86:	f7ff ffb1 	bl	8000cec <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d8a:	f240 127f 	movw	r2, #383	@ 0x17f
 8000d8e:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d90:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d92:	4638      	mov	r0, r7
 8000d94:	f000 fc5a 	bl	800164c <AUDIO_IO_Write>
 8000d98:	f240 127f 	movw	r2, #383	@ 0x17f
 8000d9c:	211d      	movs	r1, #29
 8000d9e:	4638      	mov	r0, r7
 8000da0:	f000 fc54 	bl	800164c <AUDIO_IO_Write>
 8000da4:	f240 127f 	movw	r2, #383	@ 0x17f
 8000da8:	2126      	movs	r1, #38	@ 0x26
 8000daa:	4638      	mov	r0, r7
 8000dac:	f000 fc4e 	bl	800164c <AUDIO_IO_Write>
 8000db0:	f240 127f 	movw	r2, #383	@ 0x17f
 8000db4:	2127      	movs	r1, #39	@ 0x27
 8000db6:	4638      	mov	r0, r7
 8000db8:	f000 fc48 	bl	800164c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8000dbc:	e004      	b.n	8000dc8 <wm8994_SetVolume+0x70>
    else if (Volume == 0)
 8000dbe:	bb79      	cbnz	r1, 8000e20 <wm8994_SetVolume+0xc8>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	f7ff ff93 	bl	8000cec <wm8994_SetMute>
 8000dc6:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 8000dc8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000dcc:	b32b      	cbz	r3, 8000e1a <wm8994_SetVolume+0xc2>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000dce:	2c63      	cmp	r4, #99	@ 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8000dd0:	b2ed      	uxtb	r5, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 8000dd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000dd6:	bf9a      	itte	ls
 8000dd8:	ebc4 1404 	rsbls	r4, r4, r4, lsl #4
 8000ddc:	2364      	movls	r3, #100	@ 0x64
 8000dde:	24ef      	movhi	r4, #239	@ 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 8000de0:	4628      	mov	r0, r5
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000de2:	bf9e      	ittt	ls
 8000de4:	0124      	lslls	r4, r4, #4
 8000de6:	fbb4 f4f3 	udivls	r4, r4, r3
 8000dea:	b2e4      	uxtbls	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8000dec:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 8000df0:	4622      	mov	r2, r4
 8000df2:	f000 fc2b 	bl	800164c <AUDIO_IO_Write>
 8000df6:	4622      	mov	r2, r4
 8000df8:	f240 4101 	movw	r1, #1025	@ 0x401
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	f000 fc25 	bl	800164c <AUDIO_IO_Write>
 8000e02:	4622      	mov	r2, r4
 8000e04:	f240 4104 	movw	r1, #1028	@ 0x404
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f000 fc1f 	bl	800164c <AUDIO_IO_Write>
 8000e0e:	4622      	mov	r2, r4
 8000e10:	f240 4105 	movw	r1, #1029	@ 0x405
 8000e14:	4628      	mov	r0, r5
 8000e16:	f000 fc19 	bl	800164c <AUDIO_IO_Write>
}
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8000e20:	fa5f f885 	uxtb.w	r8, r5
 8000e24:	f447 77a0 	orr.w	r7, r7, #320	@ 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f7ff ff5f 	bl	8000cec <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000e2e:	463a      	mov	r2, r7
 8000e30:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000e32:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8000e34:	4640      	mov	r0, r8
 8000e36:	f000 fc09 	bl	800164c <AUDIO_IO_Write>
 8000e3a:	463a      	mov	r2, r7
 8000e3c:	211d      	movs	r1, #29
 8000e3e:	4640      	mov	r0, r8
 8000e40:	f000 fc04 	bl	800164c <AUDIO_IO_Write>
 8000e44:	463a      	mov	r2, r7
 8000e46:	2126      	movs	r1, #38	@ 0x26
 8000e48:	4640      	mov	r0, r8
 8000e4a:	f000 fbff 	bl	800164c <AUDIO_IO_Write>
 8000e4e:	463a      	mov	r2, r7
 8000e50:	2127      	movs	r1, #39	@ 0x27
 8000e52:	4640      	mov	r0, r8
 8000e54:	e7b0      	b.n	8000db8 <wm8994_SetVolume+0x60>
 8000e56:	bf00      	nop
 8000e58:	20000ab4 	.word	0x20000ab4

08000e5c <wm8994_Init>:
{
 8000e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e60:	4681      	mov	r9, r0
 8000e62:	461f      	mov	r7, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000e64:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
{
 8000e68:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000e6a:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000e6e:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 8000e70:	f000 fbe4 	bl	800163c <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000e74:	2203      	movs	r2, #3
 8000e76:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f000 fbe6 	bl	800164c <AUDIO_IO_Write>
 8000e80:	2200      	movs	r2, #0
 8000e82:	f640 0117 	movw	r1, #2071	@ 0x817
 8000e86:	4620      	mov	r0, r4
 8000e88:	f000 fbe0 	bl	800164c <AUDIO_IO_Write>
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000e92:	4620      	mov	r0, r4
 8000e94:	f000 fbda 	bl	800164c <AUDIO_IO_Write>
 8000e98:	226c      	movs	r2, #108	@ 0x6c
 8000e9a:	2139      	movs	r1, #57	@ 0x39
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f000 fbd5 	bl	800164c <AUDIO_IO_Write>
  if (input_device > 0)
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d062      	beq.n	8000f6c <wm8994_Init+0x110>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000ea6:	2213      	movs	r2, #19
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f000 fbce 	bl	800164c <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 8000eb0:	2032      	movs	r0, #50	@ 0x32
 8000eb2:	f8df b504 	ldr.w	fp, [pc, #1284]	@ 80013b8 <wm8994_Init+0x55c>
 8000eb6:	f000 fbf5 	bl	80016a4 <AUDIO_IO_Delay>
  if (output_device > 0)
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	f000 80ce 	beq.w	800105c <wm8994_Init+0x200>
    outputEnabled = 1;
 8000ec0:	f04f 0801 	mov.w	r8, #1
    switch (output_device)
 8000ec4:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 8000ec6:	f8cb 8000 	str.w	r8, [fp]
    switch (output_device)
 8000eca:	f000 80ad 	beq.w	8001028 <wm8994_Init+0x1cc>
 8000ece:	2e03      	cmp	r6, #3
 8000ed0:	d04e      	beq.n	8000f70 <wm8994_Init+0x114>
 8000ed2:	4546      	cmp	r6, r8
 8000ed4:	f040 80a8 	bne.w	8001028 <wm8994_Init+0x1cc>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000ed8:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8000edc:	2105      	movs	r1, #5
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f000 fbb4 	bl	800164c <AUDIO_IO_Write>
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f240 6101 	movw	r1, #1537	@ 0x601
 8000eea:	4620      	mov	r0, r4
 8000eec:	f000 fbae 	bl	800164c <AUDIO_IO_Write>
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f240 6102 	movw	r1, #1538	@ 0x602
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f000 fba8 	bl	800164c <AUDIO_IO_Write>
 8000efc:	2202      	movs	r2, #2
 8000efe:	f240 6104 	movw	r1, #1540	@ 0x604
 8000f02:	4620      	mov	r0, r4
 8000f04:	f000 fba2 	bl	800164c <AUDIO_IO_Write>
 8000f08:	2202      	movs	r2, #2
 8000f0a:	f240 6105 	movw	r1, #1541	@ 0x605
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f000 fb9c 	bl	800164c <AUDIO_IO_Write>
  if (input_device > 0)
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	f000 8101 	beq.w	800111c <wm8994_Init+0x2c0>
    inputEnabled = 1;
 8000f1a:	f04f 0801 	mov.w	r8, #1
    switch (input_device)
 8000f1e:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
    inputEnabled = 1;
 8000f22:	f8cb 8004 	str.w	r8, [fp, #4]
    switch (input_device)
 8000f26:	f000 80c7 	beq.w	80010b8 <wm8994_Init+0x25c>
 8000f2a:	f200 809a 	bhi.w	8001062 <wm8994_Init+0x206>
 8000f2e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8000f32:	f000 80f0 	beq.w	8001116 <wm8994_Init+0x2ba>
 8000f36:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8000f3a:	f000 8096 	beq.w	800106a <wm8994_Init+0x20e>
  switch (AudioFreq)
 8000f3e:	f5b7 4ffa 	cmp.w	r7, #32000	@ 0x7d00
 8000f42:	f000 81f8 	beq.w	8001336 <wm8994_Init+0x4da>
 8000f46:	f200 80f3 	bhi.w	8001130 <wm8994_Init+0x2d4>
 8000f4a:	f5b7 5f7a 	cmp.w	r7, #16000	@ 0x3e80
 8000f4e:	f000 81f0 	beq.w	8001332 <wm8994_Init+0x4d6>
 8000f52:	f200 80e6 	bhi.w	8001122 <wm8994_Init+0x2c6>
 8000f56:	f5b7 5ffa 	cmp.w	r7, #8000	@ 0x1f40
 8000f5a:	f000 80f9 	beq.w	8001150 <wm8994_Init+0x2f4>
 8000f5e:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8000f62:	429f      	cmp	r7, r3
 8000f64:	f000 81eb 	beq.w	800133e <wm8994_Init+0x4e2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f68:	2283      	movs	r2, #131	@ 0x83
 8000f6a:	e0f2      	b.n	8001152 <wm8994_Init+0x2f6>
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	e79b      	b.n	8000ea8 <wm8994_Init+0x4c>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000f70:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f74:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000f78:	f04f 0105 	mov.w	r1, #5
 8000f7c:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000f7e:	d149      	bne.n	8001014 <wm8994_Init+0x1b8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f80:	f000 fb64 	bl	800164c <AUDIO_IO_Write>
 8000f84:	4632      	mov	r2, r6
 8000f86:	f240 6101 	movw	r1, #1537	@ 0x601
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 fb5e 	bl	800164c <AUDIO_IO_Write>
 8000f90:	4632      	mov	r2, r6
 8000f92:	f240 6102 	movw	r1, #1538	@ 0x602
 8000f96:	4620      	mov	r0, r4
 8000f98:	f000 fb58 	bl	800164c <AUDIO_IO_Write>
 8000f9c:	4632      	mov	r2, r6
 8000f9e:	f240 6104 	movw	r1, #1540	@ 0x604
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f000 fb52 	bl	800164c <AUDIO_IO_Write>
 8000fa8:	4632      	mov	r2, r6
 8000faa:	f240 6105 	movw	r1, #1541	@ 0x605
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f000 fb4c 	bl	800164c <AUDIO_IO_Write>
    inputEnabled = 1;
 8000fb4:	f8cb 8004 	str.w	r8, [fp, #4]
 AUDIO_IO_Write(Addr, Reg, Value);
 8000fb8:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f000 fb44 	bl	800164c <AUDIO_IO_Write>
 8000fc4:	22db      	movs	r2, #219	@ 0xdb
 8000fc6:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f000 fb3e 	bl	800164c <AUDIO_IO_Write>
 8000fd0:	22db      	movs	r2, #219	@ 0xdb
 8000fd2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f000 fb38 	bl	800164c <AUDIO_IO_Write>
 8000fdc:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f000 fb32 	bl	800164c <AUDIO_IO_Write>
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f240 6106 	movw	r1, #1542	@ 0x606
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f000 fb2c 	bl	800164c <AUDIO_IO_Write>
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	f240 6107 	movw	r1, #1543	@ 0x607
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f000 fb26 	bl	800164c <AUDIO_IO_Write>
 8001000:	2202      	movs	r2, #2
 8001002:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8001006:	4620      	mov	r0, r4
 8001008:	f000 fb20 	bl	800164c <AUDIO_IO_Write>
 800100c:	2202      	movs	r2, #2
 800100e:	f240 6109 	movw	r1, #1545	@ 0x609
 8001012:	e07b      	b.n	800110c <wm8994_Init+0x2b0>
 8001014:	f000 fb1a 	bl	800164c <AUDIO_IO_Write>
 8001018:	4642      	mov	r2, r8
 800101a:	f240 6101 	movw	r1, #1537	@ 0x601
 800101e:	4620      	mov	r0, r4
 8001020:	f000 fb14 	bl	800164c <AUDIO_IO_Write>
 8001024:	4642      	mov	r2, r8
 8001026:	e764      	b.n	8000ef2 <wm8994_Init+0x96>
 8001028:	f240 3203 	movw	r2, #771	@ 0x303
 800102c:	2105      	movs	r1, #5
 800102e:	4620      	mov	r0, r4
 8001030:	f000 fb0c 	bl	800164c <AUDIO_IO_Write>
 8001034:	4642      	mov	r2, r8
 8001036:	f240 6101 	movw	r1, #1537	@ 0x601
 800103a:	4620      	mov	r0, r4
 800103c:	f000 fb06 	bl	800164c <AUDIO_IO_Write>
 8001040:	4642      	mov	r2, r8
 8001042:	f240 6102 	movw	r1, #1538	@ 0x602
 8001046:	4620      	mov	r0, r4
 8001048:	f000 fb00 	bl	800164c <AUDIO_IO_Write>
 800104c:	2200      	movs	r2, #0
 800104e:	f240 6104 	movw	r1, #1540	@ 0x604
 8001052:	4620      	mov	r0, r4
 8001054:	f000 fafa 	bl	800164c <AUDIO_IO_Write>
 8001058:	2200      	movs	r2, #0
 800105a:	e756      	b.n	8000f0a <wm8994_Init+0xae>
    outputEnabled = 0;
 800105c:	f8cb 6000 	str.w	r6, [fp]
 8001060:	e758      	b.n	8000f14 <wm8994_Init+0xb8>
    switch (input_device)
 8001062:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8001066:	d0a7      	beq.n	8000fb8 <wm8994_Init+0x15c>
 8001068:	e769      	b.n	8000f3e <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 800106a:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 800106e:	2104      	movs	r1, #4
 8001070:	4620      	mov	r0, r4
 8001072:	f000 faeb 	bl	800164c <AUDIO_IO_Write>
 8001076:	22db      	movs	r2, #219	@ 0xdb
 8001078:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800107c:	4620      	mov	r0, r4
 800107e:	f000 fae5 	bl	800164c <AUDIO_IO_Write>
 8001082:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8001086:	2102      	movs	r1, #2
 8001088:	4620      	mov	r0, r4
 800108a:	f000 fadf 	bl	800164c <AUDIO_IO_Write>
 800108e:	2202      	movs	r2, #2
 8001090:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8001094:	4620      	mov	r0, r4
 8001096:	f000 fad9 	bl	800164c <AUDIO_IO_Write>
 800109a:	2202      	movs	r2, #2
 800109c:	f240 6109 	movw	r1, #1545	@ 0x609
 80010a0:	4620      	mov	r0, r4
 80010a2:	f000 fad3 	bl	800164c <AUDIO_IO_Write>
 80010a6:	220e      	movs	r2, #14
 80010a8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80010ac:	4620      	mov	r0, r4
 80010ae:	f000 facd 	bl	800164c <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80010b2:	f04f 0800 	mov.w	r8, #0
 80010b6:	e742      	b.n	8000f3e <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 80010b8:	2211      	movs	r2, #17
 80010ba:	2128      	movs	r1, #40	@ 0x28
 80010bc:	4620      	mov	r0, r4
 80010be:	f000 fac5 	bl	800164c <AUDIO_IO_Write>
 80010c2:	2235      	movs	r2, #53	@ 0x35
 80010c4:	2129      	movs	r1, #41	@ 0x29
 80010c6:	4620      	mov	r0, r4
 80010c8:	f000 fac0 	bl	800164c <AUDIO_IO_Write>
 80010cc:	2235      	movs	r2, #53	@ 0x35
 80010ce:	212a      	movs	r1, #42	@ 0x2a
 80010d0:	4620      	mov	r0, r4
 80010d2:	f000 fabb 	bl	800164c <AUDIO_IO_Write>
 80010d6:	f240 3203 	movw	r2, #771	@ 0x303
 80010da:	2104      	movs	r1, #4
 80010dc:	4620      	mov	r0, r4
 80010de:	f000 fab5 	bl	800164c <AUDIO_IO_Write>
 80010e2:	22db      	movs	r2, #219	@ 0xdb
 80010e4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80010e8:	4620      	mov	r0, r4
 80010ea:	f000 faaf 	bl	800164c <AUDIO_IO_Write>
 80010ee:	f246 3250 	movw	r2, #25424	@ 0x6350
 80010f2:	2102      	movs	r1, #2
 80010f4:	4620      	mov	r0, r4
 80010f6:	f000 faa9 	bl	800164c <AUDIO_IO_Write>
 80010fa:	2202      	movs	r2, #2
 80010fc:	f240 6106 	movw	r1, #1542	@ 0x606
 8001100:	4620      	mov	r0, r4
 8001102:	f000 faa3 	bl	800164c <AUDIO_IO_Write>
 8001106:	2202      	movs	r2, #2
 8001108:	f240 6107 	movw	r1, #1543	@ 0x607
 800110c:	4620      	mov	r0, r4
 800110e:	f000 fa9d 	bl	800164c <AUDIO_IO_Write>
 8001112:	220d      	movs	r2, #13
 8001114:	e7c8      	b.n	80010a8 <wm8994_Init+0x24c>
 8001116:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 800111a:	e7de      	b.n	80010da <wm8994_Init+0x27e>
    inputEnabled = 0;
 800111c:	f8cb 5004 	str.w	r5, [fp, #4]
 8001120:	e7c7      	b.n	80010b2 <wm8994_Init+0x256>
  switch (AudioFreq)
 8001122:	f245 6322 	movw	r3, #22050	@ 0x5622
 8001126:	429f      	cmp	r7, r3
 8001128:	f47f af1e 	bne.w	8000f68 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 800112c:	2243      	movs	r2, #67	@ 0x43
 800112e:	e010      	b.n	8001152 <wm8994_Init+0x2f6>
  switch (AudioFreq)
 8001130:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8001134:	429f      	cmp	r7, r3
 8001136:	f43f af17 	beq.w	8000f68 <wm8994_Init+0x10c>
 800113a:	4b9d      	ldr	r3, [pc, #628]	@ (80013b0 <wm8994_Init+0x554>)
 800113c:	429f      	cmp	r7, r3
 800113e:	f000 80fc 	beq.w	800133a <wm8994_Init+0x4de>
 8001142:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8001146:	429f      	cmp	r7, r3
 8001148:	f47f af0e 	bne.w	8000f68 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 800114c:	2273      	movs	r2, #115	@ 0x73
 800114e:	e000      	b.n	8001152 <wm8994_Init+0x2f6>
 8001150:	2203      	movs	r2, #3
 8001152:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001156:	4620      	mov	r0, r4
 8001158:	f000 fa78 	bl	800164c <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800115c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8001160:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001164:	4620      	mov	r0, r4
 8001166:	bf0c      	ite	eq
 8001168:	f244 0218 	movweq	r2, #16408	@ 0x4018
 800116c:	f244 0210 	movwne	r2, #16400	@ 0x4010
 8001170:	f000 fa6c 	bl	800164c <AUDIO_IO_Write>
 8001174:	2200      	movs	r2, #0
 8001176:	f240 3102 	movw	r1, #770	@ 0x302
 800117a:	4620      	mov	r0, r4
 800117c:	f000 fa66 	bl	800164c <AUDIO_IO_Write>
 8001180:	220a      	movs	r2, #10
 8001182:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8001186:	4620      	mov	r0, r4
 8001188:	f000 fa60 	bl	800164c <AUDIO_IO_Write>
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001192:	4620      	mov	r0, r4
 8001194:	f000 fa5a 	bl	800164c <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 8001198:	2e00      	cmp	r6, #0
 800119a:	f000 80a9 	beq.w	80012f0 <wm8994_Init+0x494>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800119e:	2e02      	cmp	r6, #2
 80011a0:	d123      	bne.n	80011ea <wm8994_Init+0x38e>
 AUDIO_IO_Write(Addr, Reg, Value);
 80011a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011a6:	212d      	movs	r1, #45	@ 0x2d
 80011a8:	4620      	mov	r0, r4
      if(ColdStartup)
 80011aa:	4e82      	ldr	r6, [pc, #520]	@ (80013b4 <wm8994_Init+0x558>)
 AUDIO_IO_Write(Addr, Reg, Value);
 80011ac:	f000 fa4e 	bl	800164c <AUDIO_IO_Write>
 80011b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011b4:	212e      	movs	r1, #46	@ 0x2e
 80011b6:	4620      	mov	r0, r4
 80011b8:	f000 fa48 	bl	800164c <AUDIO_IO_Write>
      if(ColdStartup)
 80011bc:	7833      	ldrb	r3, [r6, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80bf 	beq.w	8001342 <wm8994_Init+0x4e6>
 AUDIO_IO_Write(Addr, Reg, Value);
 80011c4:	4620      	mov	r0, r4
 80011c6:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 80011ca:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80011ce:	f000 fa3d 	bl	800164c <AUDIO_IO_Write>
        ColdStartup=0;
 80011d2:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
 80011d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
        ColdStartup=0;
 80011d8:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
 80011da:	f000 fa63 	bl	80016a4 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80011e4:	4620      	mov	r0, r4
 80011e6:	f000 fa31 	bl	800164c <AUDIO_IO_Write>
 80011ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011ee:	2103      	movs	r1, #3
 80011f0:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80011f2:	f243 3603 	movw	r6, #13059	@ 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 80011f6:	f000 fa29 	bl	800164c <AUDIO_IO_Write>
 80011fa:	2200      	movs	r2, #0
 80011fc:	2122      	movs	r1, #34	@ 0x22
 80011fe:	4620      	mov	r0, r4
 8001200:	f000 fa24 	bl	800164c <AUDIO_IO_Write>
 8001204:	2200      	movs	r2, #0
 8001206:	2123      	movs	r1, #35	@ 0x23
 8001208:	4620      	mov	r0, r4
 800120a:	f000 fa1f 	bl	800164c <AUDIO_IO_Write>
 800120e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001212:	2136      	movs	r1, #54	@ 0x36
 8001214:	4620      	mov	r0, r4
 8001216:	f000 fa19 	bl	800164c <AUDIO_IO_Write>
 800121a:	f243 0203 	movw	r2, #12291	@ 0x3003
 800121e:	2101      	movs	r1, #1
 8001220:	4620      	mov	r0, r4
 8001222:	f000 fa13 	bl	800164c <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001226:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 800122a:	f04f 0151 	mov.w	r1, #81	@ 0x51
 800122e:	4620      	mov	r0, r4
 8001230:	bf0c      	ite	eq
 8001232:	f240 2205 	movweq	r2, #517	@ 0x205
 8001236:	2205      	movne	r2, #5
 8001238:	f000 fa08 	bl	800164c <AUDIO_IO_Write>
 800123c:	f243 3203 	movw	r2, #13059	@ 0x3303
 8001240:	2101      	movs	r1, #1
 8001242:	4620      	mov	r0, r4
 8001244:	f000 fa02 	bl	800164c <AUDIO_IO_Write>
 8001248:	2222      	movs	r2, #34	@ 0x22
 800124a:	2160      	movs	r1, #96	@ 0x60
 800124c:	4620      	mov	r0, r4
 800124e:	f000 f9fd 	bl	800164c <AUDIO_IO_Write>
 8001252:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8001256:	214c      	movs	r1, #76	@ 0x4c
 8001258:	4620      	mov	r0, r4
 800125a:	f000 f9f7 	bl	800164c <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 800125e:	200f      	movs	r0, #15
 8001260:	f000 fa20 	bl	80016a4 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001264:	2201      	movs	r2, #1
 8001266:	212d      	movs	r1, #45	@ 0x2d
 8001268:	4620      	mov	r0, r4
 800126a:	f000 f9ef 	bl	800164c <AUDIO_IO_Write>
 800126e:	2201      	movs	r2, #1
 8001270:	212e      	movs	r1, #46	@ 0x2e
 8001272:	4620      	mov	r0, r4
 8001274:	f000 f9ea 	bl	800164c <AUDIO_IO_Write>
 8001278:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800127c:	2103      	movs	r1, #3
 800127e:	4620      	mov	r0, r4
 8001280:	f000 f9e4 	bl	800164c <AUDIO_IO_Write>
 8001284:	2233      	movs	r2, #51	@ 0x33
 8001286:	2154      	movs	r1, #84	@ 0x54
 8001288:	4620      	mov	r0, r4
 800128a:	f000 f9df 	bl	800164c <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
 800128e:	f240 1001 	movw	r0, #257	@ 0x101
 8001292:	f000 fa07 	bl	80016a4 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001296:	22ee      	movs	r2, #238	@ 0xee
 8001298:	2160      	movs	r1, #96	@ 0x60
 800129a:	4620      	mov	r0, r4
 800129c:	f000 f9d6 	bl	800164c <AUDIO_IO_Write>
 80012a0:	22c0      	movs	r2, #192	@ 0xc0
 80012a2:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80012a6:	4620      	mov	r0, r4
 80012a8:	f000 f9d0 	bl	800164c <AUDIO_IO_Write>
 80012ac:	22c0      	movs	r2, #192	@ 0xc0
 80012ae:	f240 6111 	movw	r1, #1553	@ 0x611
 80012b2:	4620      	mov	r0, r4
 80012b4:	f000 f9ca 	bl	800164c <AUDIO_IO_Write>
 80012b8:	2210      	movs	r2, #16
 80012ba:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80012be:	4620      	mov	r0, r4
 80012c0:	f000 f9c4 	bl	800164c <AUDIO_IO_Write>
 80012c4:	22c0      	movs	r2, #192	@ 0xc0
 80012c6:	f240 6112 	movw	r1, #1554	@ 0x612
 80012ca:	4620      	mov	r0, r4
 80012cc:	f000 f9be 	bl	800164c <AUDIO_IO_Write>
 80012d0:	22c0      	movs	r2, #192	@ 0xc0
 80012d2:	f240 6113 	movw	r1, #1555	@ 0x613
 80012d6:	4620      	mov	r0, r4
 80012d8:	f000 f9b8 	bl	800164c <AUDIO_IO_Write>
 80012dc:	2210      	movs	r2, #16
 80012de:	f240 4122 	movw	r1, #1058	@ 0x422
 80012e2:	4620      	mov	r0, r4
 80012e4:	f000 f9b2 	bl	800164c <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 80012e8:	4651      	mov	r1, sl
 80012ea:	4648      	mov	r0, r9
 80012ec:	f7ff fd34 	bl	8000d58 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 80012f0:	b1e5      	cbz	r5, 800132c <wm8994_Init+0x4d0>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80012f2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80012f6:	d002      	beq.n	80012fe <wm8994_Init+0x4a2>
 80012f8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80012fc:	d12a      	bne.n	8001354 <wm8994_Init+0x4f8>
 AUDIO_IO_Write(Addr, Reg, Value);
 80012fe:	f046 0213 	orr.w	r2, r6, #19
 8001302:	2101      	movs	r1, #1
 8001304:	4620      	mov	r0, r4
 8001306:	f000 f9a1 	bl	800164c <AUDIO_IO_Write>
 800130a:	2202      	movs	r2, #2
 800130c:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001310:	4620      	mov	r0, r4
 8001312:	f000 f99b 	bl	800164c <AUDIO_IO_Write>
 8001316:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800131a:	f240 4111 	movw	r1, #1041	@ 0x411
 800131e:	4620      	mov	r0, r4
 8001320:	f000 f994 	bl	800164c <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8001324:	4651      	mov	r1, sl
 8001326:	4648      	mov	r0, r9
 8001328:	f7ff fd16 	bl	8000d58 <wm8994_SetVolume>
}
 800132c:	4640      	mov	r0, r8
 800132e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001332:	2233      	movs	r2, #51	@ 0x33
 8001334:	e70d      	b.n	8001152 <wm8994_Init+0x2f6>
 8001336:	2263      	movs	r2, #99	@ 0x63
 8001338:	e70b      	b.n	8001152 <wm8994_Init+0x2f6>
 800133a:	22a3      	movs	r2, #163	@ 0xa3
 800133c:	e709      	b.n	8001152 <wm8994_Init+0x2f6>
 800133e:	2213      	movs	r2, #19
 8001340:	e707      	b.n	8001152 <wm8994_Init+0x2f6>
 8001342:	4620      	mov	r0, r4
 8001344:	f248 1208 	movw	r2, #33032	@ 0x8108
 8001348:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800134c:	f000 f97e 	bl	800164c <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
 8001350:	2032      	movs	r0, #50	@ 0x32
 8001352:	e742      	b.n	80011da <wm8994_Init+0x37e>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001354:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8001358:	d115      	bne.n	8001386 <wm8994_Init+0x52a>
 AUDIO_IO_Write(Addr, Reg, Value);
 800135a:	f046 0213 	orr.w	r2, r6, #19
 800135e:	2101      	movs	r1, #1
 8001360:	4620      	mov	r0, r4
 8001362:	f000 f973 	bl	800164c <AUDIO_IO_Write>
 8001366:	2202      	movs	r2, #2
 8001368:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800136c:	4620      	mov	r0, r4
 800136e:	f000 f96d 	bl	800164c <AUDIO_IO_Write>
 8001372:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001376:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800137a:	4620      	mov	r0, r4
 800137c:	f000 f966 	bl	800164c <AUDIO_IO_Write>
 8001380:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001384:	e7c9      	b.n	800131a <wm8994_Init+0x4be>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001386:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
 800138a:	d002      	beq.n	8001392 <wm8994_Init+0x536>
 800138c:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8001390:	d1c8      	bne.n	8001324 <wm8994_Init+0x4c8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001392:	220b      	movs	r2, #11
 8001394:	2118      	movs	r1, #24
 8001396:	4620      	mov	r0, r4
 8001398:	f000 f958 	bl	800164c <AUDIO_IO_Write>
 800139c:	220b      	movs	r2, #11
 800139e:	211a      	movs	r1, #26
 80013a0:	4620      	mov	r0, r4
 80013a2:	f000 f953 	bl	800164c <AUDIO_IO_Write>
 80013a6:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80013aa:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80013ae:	e7b6      	b.n	800131e <wm8994_Init+0x4c2>
 80013b0:	00017700 	.word	0x00017700
 80013b4:	2000006c 	.word	0x2000006c
 80013b8:	20000ab4 	.word	0x20000ab4

080013bc <wm8994_Stop>:
{
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 80013be:	4f19      	ldr	r7, [pc, #100]	@ (8001424 <wm8994_Stop+0x68>)
{
 80013c0:	4604      	mov	r4, r0
 80013c2:	460e      	mov	r6, r1
  if (outputEnabled != 0)
 80013c4:	683d      	ldr	r5, [r7, #0]
 80013c6:	b355      	cbz	r5, 800141e <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80013c8:	2101      	movs	r1, #1
 80013ca:	f7ff fc8f 	bl	8000cec <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 80013ce:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80013d0:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 80013d2:	d024      	beq.n	800141e <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80013d4:	b2e4      	uxtb	r4, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 80013d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013da:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80013de:	4620      	mov	r0, r4
 80013e0:	f000 f934 	bl	800164c <AUDIO_IO_Write>
 80013e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e8:	f240 4122 	movw	r1, #1058	@ 0x422
 80013ec:	4620      	mov	r0, r4
 80013ee:	f000 f92d 	bl	800164c <AUDIO_IO_Write>
 80013f2:	2200      	movs	r2, #0
 80013f4:	212d      	movs	r1, #45	@ 0x2d
 80013f6:	4620      	mov	r0, r4
 80013f8:	f000 f928 	bl	800164c <AUDIO_IO_Write>
 80013fc:	2200      	movs	r2, #0
 80013fe:	212e      	movs	r1, #46	@ 0x2e
 8001400:	4620      	mov	r0, r4
 8001402:	f000 f923 	bl	800164c <AUDIO_IO_Write>
 8001406:	2200      	movs	r2, #0
 8001408:	2105      	movs	r1, #5
 800140a:	4620      	mov	r0, r4
 800140c:	f000 f91e 	bl	800164c <AUDIO_IO_Write>
 8001410:	2200      	movs	r2, #0
 8001412:	4620      	mov	r0, r4
 8001414:	4611      	mov	r1, r2
 8001416:	f000 f919 	bl	800164c <AUDIO_IO_Write>
      outputEnabled = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
}
 800141e:	4628      	mov	r0, r5
 8001420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001422:	bf00      	nop
 8001424:	20000ab4 	.word	0x20000ab4

08001428 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800142e:	f001 fa4d 	bl	80028cc <HAL_I2C_GetState>
 8001432:	2800      	cmp	r0, #0
 8001434:	f040 8096 	bne.w	8001564 <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001438:	4b4b      	ldr	r3, [pc, #300]	@ (8001568 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 800143a:	2600      	movs	r6, #0
 800143c:	4c4b      	ldr	r4, [pc, #300]	@ (800156c <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800143e:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8001440:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001442:	bf0c      	ite	eq
 8001444:	4a4a      	ldreq	r2, [pc, #296]	@ (8001570 <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001446:	4a4b      	ldrne	r2, [pc, #300]	@ (8001574 <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001448:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800144a:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 800144c:	4a4a      	ldr	r2, [pc, #296]	@ (8001578 <I2Cx_Init+0x150>)
 800144e:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001452:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001456:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800145a:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800145e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001460:	d143      	bne.n	80014ea <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001466:	2080      	movs	r0, #128	@ 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001468:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800146c:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800146e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001470:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001472:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001482:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001484:	483d      	ldr	r0, [pc, #244]	@ (800157c <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001486:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800148a:	f000 fdef 	bl	800206c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800148e:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001492:	a905      	add	r1, sp, #20
 8001494:	4839      	ldr	r0, [pc, #228]	@ (800157c <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001496:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001498:	f000 fde8 	bl	800206c <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800149c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800149e:	4632      	mov	r2, r6
 80014a0:	210f      	movs	r1, #15
 80014a2:	2048      	movs	r0, #72	@ 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80014a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014a8:	6423      	str	r3, [r4, #64]	@ 0x40
 80014aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80014b4:	6a23      	ldr	r3, [r4, #32]
 80014b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014ba:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80014bc:	6a23      	ldr	r3, [r4, #32]
 80014be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014c2:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80014c4:	f000 fb3c 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80014c8:	2048      	movs	r0, #72	@ 0x48
 80014ca:	f000 fb6b 	bl	8001ba4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80014ce:	2049      	movs	r0, #73	@ 0x49
 80014d0:	4632      	mov	r2, r6
 80014d2:	210f      	movs	r1, #15
 80014d4:	f000 fb34 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80014d8:	2049      	movs	r0, #73	@ 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80014da:	f000 fb63 	bl	8001ba4 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 80014de:	4628      	mov	r0, r5
  }
}
 80014e0:	b00a      	add	sp, #40	@ 0x28
 80014e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
 80014e6:	f000 bfce 	b.w	8002486 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80014ea:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80014ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80014f2:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80014f4:	4822      	ldr	r0, [pc, #136]	@ (8001580 <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80014f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80014f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 80014fa:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	9303      	str	r3, [sp, #12]
 8001502:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800150a:	2304      	movs	r3, #4
 800150c:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001510:	a905      	add	r1, sp, #20
 8001512:	f000 fdab 	bl	800206c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001516:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800151a:	a905      	add	r1, sp, #20
 800151c:	4818      	ldr	r0, [pc, #96]	@ (8001580 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800151e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001520:	f000 fda4 	bl	800206c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001524:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001526:	4632      	mov	r2, r6
 8001528:	210f      	movs	r1, #15
 800152a:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800152c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001530:	6423      	str	r3, [r4, #64]	@ 0x40
 8001532:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001538:	9304      	str	r3, [sp, #16]
 800153a:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800153c:	6a23      	ldr	r3, [r4, #32]
 800153e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001542:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001544:	6a23      	ldr	r3, [r4, #32]
 8001546:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800154a:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800154c:	f000 faf8 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001550:	201f      	movs	r0, #31
 8001552:	f000 fb27 	bl	8001ba4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001556:	2020      	movs	r0, #32
 8001558:	4632      	mov	r2, r6
 800155a:	210f      	movs	r1, #15
 800155c:	f000 faf0 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001560:	2020      	movs	r0, #32
 8001562:	e7ba      	b.n	80014da <I2Cx_Init+0xb2>
}
 8001564:	b00a      	add	sp, #40	@ 0x28
 8001566:	bd70      	pop	{r4, r5, r6, pc}
 8001568:	20000abc 	.word	0x20000abc
 800156c:	40023800 	.word	0x40023800
 8001570:	40005c00 	.word	0x40005c00
 8001574:	40005400 	.word	0x40005400
 8001578:	40912732 	.word	0x40912732
 800157c:	40021c00 	.word	0x40021c00
 8001580:	40020400 	.word	0x40020400

08001584 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001584:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001586:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 800158a:	b085      	sub	sp, #20
 800158c:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800158e:	9402      	str	r4, [sp, #8]
 8001590:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8001594:	9401      	str	r4, [sp, #4]
 8001596:	9c08      	ldr	r4, [sp, #32]
 8001598:	9400      	str	r4, [sp, #0]
 800159a:	f000 ffdf 	bl	800255c <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 800159e:	4604      	mov	r4, r0
 80015a0:	b128      	cbz	r0, 80015ae <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80015a2:	4628      	mov	r0, r5
 80015a4:	f000 ffc1 	bl	800252a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80015a8:	4628      	mov	r0, r5
 80015aa:	f7ff ff3d 	bl	8001428 <I2Cx_Init>
}
 80015ae:	4620      	mov	r0, r4
 80015b0:	b005      	add	sp, #20
 80015b2:	bd30      	pop	{r4, r5, pc}

080015b4 <I2Cx_ReadMultiple>:
{
 80015b4:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80015b6:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 80015ba:	b085      	sub	sp, #20
 80015bc:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80015be:	9402      	str	r4, [sp, #8]
 80015c0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80015c4:	9401      	str	r4, [sp, #4]
 80015c6:	9c08      	ldr	r4, [sp, #32]
 80015c8:	9400      	str	r4, [sp, #0]
 80015ca:	f001 f8a1 	bl	8002710 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80015ce:	4604      	mov	r4, r0
 80015d0:	b128      	cbz	r0, 80015de <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 80015d2:	4628      	mov	r0, r5
 80015d4:	f000 ffa9 	bl	800252a <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80015d8:	4628      	mov	r0, r5
 80015da:	f7ff ff25 	bl	8001428 <I2Cx_Init>
}
 80015de:	4620      	mov	r0, r4
 80015e0:	b005      	add	sp, #20
 80015e2:	bd30      	pop	{r4, r5, pc}

080015e4 <BSP_LED_Init>:
{
 80015e4:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 80015e6:	4604      	mov	r4, r0
{
 80015e8:	b087      	sub	sp, #28
  if (Led == LED1)
 80015ea:	b9c8      	cbnz	r0, 8001620 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 80015ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80015f0:	a901      	add	r1, sp, #4
 80015f2:	480d      	ldr	r0, [pc, #52]	@ (8001628 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 80015f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800160c:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001612:	f000 fd2b 	bl	800206c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8001616:	4622      	mov	r2, r4
 8001618:	4629      	mov	r1, r5
 800161a:	4803      	ldr	r0, [pc, #12]	@ (8001628 <BSP_LED_Init+0x44>)
 800161c:	f000 fe0a 	bl	8002234 <HAL_GPIO_WritePin>
}
 8001620:	b007      	add	sp, #28
 8001622:	bd30      	pop	{r4, r5, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	40022000 	.word	0x40022000

0800162c <BSP_LED_Toggle>:
  if (Led == LED1)	/* Toggle LED connected to GPIO */
 800162c:	b918      	cbnz	r0, 8001636 <BSP_LED_Toggle+0xa>
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 800162e:	2102      	movs	r1, #2
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <BSP_LED_Toggle+0xc>)
 8001632:	f000 be04 	b.w	800223e <HAL_GPIO_TogglePin>
}
 8001636:	4770      	bx	lr
 8001638:	40022000 	.word	0x40022000

0800163c <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 800163c:	4801      	ldr	r0, [pc, #4]	@ (8001644 <AUDIO_IO_Init+0x8>)
 800163e:	f7ff bef3 	b.w	8001428 <I2Cx_Init>
 8001642:	bf00      	nop
 8001644:	20000abc 	.word	0x20000abc

08001648 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 8001648:	4770      	bx	lr
	...

0800164c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800164c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800164e:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001650:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001652:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001656:	f10d 020e 	add.w	r2, sp, #14
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	9200      	str	r2, [sp, #0]
 800165e:	460a      	mov	r2, r1
 8001660:	4601      	mov	r1, r0
 8001662:	4803      	ldr	r0, [pc, #12]	@ (8001670 <AUDIO_IO_Write+0x24>)
 8001664:	f7ff ff8e 	bl	8001584 <I2Cx_WriteMultiple>
}
 8001668:	b005      	add	sp, #20
 800166a:	f85d fb04 	ldr.w	pc, [sp], #4
 800166e:	bf00      	nop
 8001670:	20000abc 	.word	0x20000abc

08001674 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8001676:	2300      	movs	r3, #0
{
 8001678:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800167a:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
 800167e:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001682:	2302      	movs	r3, #2
 8001684:	9100      	str	r1, [sp, #0]
 8001686:	4601      	mov	r1, r0
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <AUDIO_IO_Read+0x2c>)
 800168c:	f7ff ff92 	bl	80015b4 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001690:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001694:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
 8001696:	b280      	uxth	r0, r0
 8001698:	b005      	add	sp, #20
 800169a:	f85d fb04 	ldr.w	pc, [sp], #4
 800169e:	bf00      	nop
 80016a0:	20000abc 	.word	0x20000abc

080016a4 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80016a4:	f000 ba28 	b.w	8001af8 <HAL_Delay>

080016a8 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80016ac:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <SAIx_Out_DeInit+0x1c>)
 80016ae:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80016b0:	6853      	ldr	r3, [r2, #4]
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b6:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
 80016b8:	f002 bdfd 	b.w	80042b6 <HAL_SAI_DeInit>
 80016bc:	40015c04 	.word	0x40015c04
 80016c0:	40015c00 	.word	0x40015c00
 80016c4:	20000b64 	.word	0x20000b64

080016c8 <BSP_AUDIO_OUT_Play>:
{
 80016c8:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <BSP_AUDIO_OUT_Play+0x38>)
{
 80016cc:	4605      	mov	r5, r0
 80016ce:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80016d0:	b28a      	uxth	r2, r1
 80016d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016d6:	4601      	mov	r1, r0
 80016d8:	2034      	movs	r0, #52	@ 0x34
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4798      	blx	r3
 80016de:	b960      	cbnz	r0, 80016fa <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 80016e0:	f5b4 3f00 	cmp.w	r4, #131072	@ 0x20000
 80016e4:	4629      	mov	r1, r5
 80016e6:	4806      	ldr	r0, [pc, #24]	@ (8001700 <BSP_AUDIO_OUT_Play+0x38>)
 80016e8:	bf34      	ite	cc
 80016ea:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 80016ee:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
 80016f2:	f002 fe49 	bl	8004388 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 80016f6:	2000      	movs	r0, #0
}
 80016f8:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80016fa:	2001      	movs	r0, #1
 80016fc:	e7fc      	b.n	80016f8 <BSP_AUDIO_OUT_Play+0x30>
 80016fe:	bf00      	nop
 8001700:	20000b64 	.word	0x20000b64

08001704 <BSP_AUDIO_OUT_ChangeBuffer>:
{
 8001704:	460a      	mov	r2, r1
   HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pData, Size);
 8001706:	4601      	mov	r1, r0
 8001708:	4801      	ldr	r0, [pc, #4]	@ (8001710 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 800170a:	f002 be3d 	b.w	8004388 <HAL_SAI_Transmit_DMA>
 800170e:	bf00      	nop
 8001710:	20000b64 	.word	0x20000b64

08001714 <BSP_AUDIO_OUT_Stop>:
{
 8001714:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_out_sai);
 8001716:	4d0a      	ldr	r5, [pc, #40]	@ (8001740 <BSP_AUDIO_OUT_Stop+0x2c>)
{
 8001718:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 800171a:	4628      	mov	r0, r5
 800171c:	f002 fde9 	bl	80042f2 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001720:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 8001724:	4621      	mov	r1, r4
 8001726:	2034      	movs	r0, #52	@ 0x34
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	4798      	blx	r3
 800172c:	b930      	cbnz	r0, 800173c <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 800172e:	2c01      	cmp	r4, #1
 8001730:	d102      	bne.n	8001738 <BSP_AUDIO_OUT_Stop+0x24>
      HAL_Delay(1);
 8001732:	4620      	mov	r0, r4
 8001734:	f000 f9e0 	bl	8001af8 <HAL_Delay>
    return AUDIO_OK;
 8001738:	2000      	movs	r0, #0
}
 800173a:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800173c:	2001      	movs	r0, #1
 800173e:	e7fc      	b.n	800173a <BSP_AUDIO_OUT_Stop+0x26>
 8001740:	20000b64 	.word	0x20000b64

08001744 <BSP_AUDIO_OUT_SetVolume>:
{
 8001744:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8001746:	4b05      	ldr	r3, [pc, #20]	@ (800175c <BSP_AUDIO_OUT_SetVolume+0x18>)
{
 8001748:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800174a:	2034      	movs	r0, #52	@ 0x34
 800174c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4798      	blx	r3
}
 8001754:	3800      	subs	r0, #0
 8001756:	bf18      	it	ne
 8001758:	2001      	movne	r0, #1
 800175a:	bd08      	pop	{r3, pc}
 800175c:	20000b64 	.word	0x20000b64

08001760 <BSP_AUDIO_OUT_SetMute>:
{ 
 8001760:	b508      	push	{r3, lr}
  if(audio_drv->SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0)
 8001762:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <BSP_AUDIO_OUT_SetMute+0x18>)
{ 
 8001764:	4601      	mov	r1, r0
  if(audio_drv->SetMute(AUDIO_I2C_ADDRESS, Cmd) != 0)
 8001766:	2034      	movs	r0, #52	@ 0x34
 8001768:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	4798      	blx	r3
}
 8001770:	3800      	subs	r0, #0
 8001772:	bf18      	it	ne
 8001774:	2001      	movne	r0, #1
 8001776:	bd08      	pop	{r3, pc}
 8001778:	20000b64 	.word	0x20000b64

0800177c <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
 800177c:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800177e:	4c08      	ldr	r4, [pc, #32]	@ (80017a0 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 8001780:	6822      	ldr	r2, [r4, #0]
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001788:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 800178a:	6620      	str	r0, [r4, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800178c:	4620      	mov	r0, r4
 800178e:	f002 fcb5 	bl	80040fc <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	6813      	ldr	r3, [r2, #0]
 8001796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bd10      	pop	{r4, pc}
 800179e:	bf00      	nop
 80017a0:	20000b64 	.word	0x20000b64

080017a4 <HAL_SAI_TxCpltCallback>:
{
 80017a4:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80017a6:	f7fe fffd 	bl	80007a4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80017aa:	bd08      	pop	{r3, pc}

080017ac <HAL_SAI_TxHalfCpltCallback>:
{
 80017ac:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80017ae:	f7fe ffff 	bl	80007b0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80017b2:	bd08      	pop	{r3, pc}

080017b4 <BSP_AUDIO_OUT_Error_CallBack>:
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
 80017b4:	4770      	bx	lr
	...

080017b8 <BSP_AUDIO_OUT_MspInit>:
{ 
 80017b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80017bc:	4c4d      	ldr	r4, [pc, #308]	@ (80018f4 <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
 80017be:	b08a      	sub	sp, #40	@ 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80017c0:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80017c4:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80017c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80017c8:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80017ca:	f04f 080a 	mov.w	r8, #10
{ 
 80017ce:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80017d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80017d4:	a905      	add	r1, sp, #20
 80017d6:	4848      	ldr	r0, [pc, #288]	@ (80018f8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80017d8:	f04f 0a40 	mov.w	sl, #64	@ 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80017dc:	6463      	str	r3, [r4, #68]	@ 0x44
 80017de:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80017e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80017e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80017f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80017f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80017fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80017fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001800:	6323      	str	r3, [r4, #48]	@ 0x30
 8001802:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800180c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800180e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001812:	6323      	str	r3, [r4, #48]	@ 0x30
 8001814:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001816:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
 800181a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181e:	9303      	str	r3, [sp, #12]
 8001820:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001822:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001824:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001828:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800182c:	f000 fc1e 	bl	800206c <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001830:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001832:	a905      	add	r1, sp, #20
 8001834:	4830      	ldr	r0, [pc, #192]	@ (80018f8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8001836:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800183a:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800183e:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001842:	f000 fc13 	bl	800206c <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001846:	a905      	add	r1, sp, #20
 8001848:	482b      	ldr	r0, [pc, #172]	@ (80018f8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800184a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800184e:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001852:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001856:	f000 fc09 	bl	800206c <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800185a:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800185c:	a905      	add	r1, sp, #20
 800185e:	4826      	ldr	r0, [pc, #152]	@ (80018f8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001860:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001864:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001868:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800186c:	f000 fbfe 	bl	800206c <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001870:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001872:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001874:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001878:	6323      	str	r3, [r4, #48]	@ 0x30
 800187a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800187c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001880:	9304      	str	r3, [sp, #16]
 8001882:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001884:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <BSP_AUDIO_OUT_MspInit+0x144>)
 8001886:	429a      	cmp	r2, r3
 8001888:	d129      	bne.n	80018de <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800188a:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <BSP_AUDIO_OUT_MspInit+0x148>)
 800188c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001890:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001894:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001898:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800189c:	f8c3 5118 	str.w	r5, [r3, #280]	@ 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80018a0:	f8c3 513c 	str.w	r5, [r3, #316]	@ 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80018a4:	f8c3 6144 	str.w	r6, [r3, #324]	@ 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80018a8:	e9c3 2a44 	strd	r2, sl, [r3, #272]	@ 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80018ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018b0:	e9c3 1247 	strd	r1, r2, [r3, #284]	@ 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80018b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018b8:	e9c3 0249 	strd	r0, r2, [r3, #292]	@ 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80018bc:	2204      	movs	r2, #4
 80018be:	e9c3 424b 	strd	r4, r2, [r3, #300]	@ 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80018c2:	f503 7486 	add.w	r4, r3, #268	@ 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80018c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001904 <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
 80018c8:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80018ca:	66f4      	str	r4, [r6, #108]	@ 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80018cc:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80018d0:	e9c3 754d 	strd	r7, r5, [r3, #308]	@ 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
 80018d4:	f000 fa66 	bl	8001da4 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 80018d8:	4620      	mov	r0, r4
 80018da:	f000 f9e5 	bl	8001ca8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	210e      	movs	r1, #14
 80018e2:	203c      	movs	r0, #60	@ 0x3c
 80018e4:	f000 f92c 	bl	8001b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80018e8:	203c      	movs	r0, #60	@ 0x3c
 80018ea:	f000 f95b 	bl	8001ba4 <HAL_NVIC_EnableIRQ>
}
 80018ee:	b00a      	add	sp, #40	@ 0x28
 80018f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40015c04 	.word	0x40015c04
 8001900:	20000b64 	.word	0x20000b64
 8001904:	40026470 	.word	0x40026470

08001908 <BSP_AUDIO_OUT_Init>:
{ 
 8001908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800190c:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800190e:	4c2f      	ldr	r4, [pc, #188]	@ (80019cc <BSP_AUDIO_OUT_Init+0xc4>)
{ 
 8001910:	4681      	mov	r9, r0
 8001912:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001914:	4d2e      	ldr	r5, [pc, #184]	@ (80019d0 <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
 8001916:	f7ff fec7 	bl	80016a8 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800191a:	4639      	mov	r1, r7
 800191c:	2200      	movs	r2, #0
 800191e:	4620      	mov	r0, r4
 8001920:	f7fe fec4 	bl	80006ac <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001924:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001926:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001928:	f002 fddb 	bl	80044e2 <HAL_SAI_GetState>
 800192c:	4601      	mov	r1, r0
 800192e:	b910      	cbnz	r0, 8001936 <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff ff41 	bl	80017b8 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001936:	4a27      	ldr	r2, [pc, #156]	@ (80019d4 <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001938:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800193a:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 800193c:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800193e:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001940:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
 8001942:	4822      	ldr	r0, [pc, #136]	@ (80019cc <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001948:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 80019d8 <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800194c:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800194e:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001950:	2240      	movs	r2, #64	@ 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001952:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001954:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001956:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001958:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800195a:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800195c:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800195e:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001960:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001962:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001966:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800196a:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800196c:	2320      	movs	r3, #32
 800196e:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001972:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001976:	e9c4 3512 	strd	r3, r5, [r4, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800197a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800197e:	e9c4 3514 	strd	r3, r5, [r4, #80]	@ 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001982:	230f      	movs	r3, #15
 8001984:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 8001988:	f002 fbb8 	bl	80040fc <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800198c:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800198e:	2034      	movs	r0, #52	@ 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001990:	6813      	ldr	r3, [r2, #0]
 8001992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001996:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001998:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800199c:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 800199e:	f648 1394 	movw	r3, #35220	@ 0x8994
 80019a2:	4298      	cmp	r0, r3
 80019a4:	d10f      	bne.n	80019c6 <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80019a6:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 80019aa:	2034      	movs	r0, #52	@ 0x34
 80019ac:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 80019ae:	f8c4 8108 	str.w	r8, [r4, #264]	@ 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80019b2:	463b      	mov	r3, r7
 80019b4:	f8d8 4000 	ldr.w	r4, [r8]
 80019b8:	4652      	mov	r2, sl
 80019ba:	4649      	mov	r1, r9
 80019bc:	2034      	movs	r0, #52	@ 0x34
 80019be:	47a0      	blx	r4
    ret = AUDIO_OK;
 80019c0:	4628      	mov	r0, r5
}
 80019c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
 80019c6:	4630      	mov	r0, r6
 80019c8:	e7fb      	b.n	80019c2 <BSP_AUDIO_OUT_Init+0xba>
 80019ca:	bf00      	nop
 80019cc:	20000b64 	.word	0x20000b64
 80019d0:	40015c04 	.word	0x40015c04
 80019d4:	40015c00 	.word	0x40015c00
 80019d8:	20000070 	.word	0x20000070

080019dc <BSP_AUDIO_IN_Error_CallBack>:

/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_SAI_ErrorCallback>:
{
 80019e0:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80019e2:	480a      	ldr	r0, [pc, #40]	@ (8001a0c <HAL_SAI_ErrorCallback+0x2c>)
 80019e4:	f002 fd7d 	bl	80044e2 <HAL_SAI_GetState>
 80019e8:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80019ea:	4809      	ldr	r0, [pc, #36]	@ (8001a10 <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80019ec:	f005 05ef 	and.w	r5, r5, #239	@ 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80019f0:	f002 fd77 	bl	80044e2 <HAL_SAI_GetState>
 80019f4:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80019f6:	2d02      	cmp	r5, #2
 80019f8:	d101      	bne.n	80019fe <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
 80019fa:	f7ff fedb 	bl	80017b4 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 80019fe:	f004 04df 	and.w	r4, r4, #223	@ 0xdf
 8001a02:	2c02      	cmp	r4, #2
 8001a04:	d101      	bne.n	8001a0a <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
 8001a06:	f7ff ffe9 	bl	80019dc <BSP_AUDIO_IN_Error_CallBack>
}
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}
 8001a0c:	20000b64 	.word	0x20000b64
 8001a10:	20000be8 	.word	0x20000be8

08001a14 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	490f      	ldr	r1, [pc, #60]	@ (8001a54 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a16:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a18:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <SystemInit+0x44>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a2e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8001a36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a3c:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <SystemInit+0x48>)
 8001a3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a46:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a48:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001a4e:	608b      	str	r3, [r1, #8]
#endif
}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	24003010 	.word	0x24003010

08001a60 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a66:	4e0e      	ldr	r6, [pc, #56]	@ (8001aa0 <HAL_InitTick+0x3c>)
 8001a68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8001a6c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6e:	7832      	ldrb	r2, [r6, #0]
 8001a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a74:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa4 <HAL_InitTick+0x40>)
 8001a76:	6810      	ldr	r0, [r2, #0]
 8001a78:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a7c:	f000 f8a0 	bl	8001bc0 <HAL_SYSTICK_Config>
 8001a80:	4604      	mov	r4, r0
 8001a82:	b950      	cbnz	r0, 8001a9a <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a84:	2d0f      	cmp	r5, #15
 8001a86:	d808      	bhi.n	8001a9a <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f856 	bl	8001b40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4620      	mov	r0, r4
 8001a96:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001a98:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	e7fc      	b.n	8001a98 <HAL_InitTick+0x34>
 8001a9e:	bf00      	nop
 8001aa0:	200000a4 	.word	0x200000a4
 8001aa4:	200000a0 	.word	0x200000a0

08001aa8 <HAL_Init>:
{
 8001aa8:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ab4:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001abc:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abe:	f000 f82d 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff ffce 	bl	8001a64 <HAL_InitTick>
  HAL_MspInit();
 8001ac8:	f7ff ffca 	bl	8001a60 <HAL_MspInit>
}
 8001acc:	2000      	movs	r0, #0
 8001ace:	bd08      	pop	{r3, pc}
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ad4:	4a03      	ldr	r2, [pc, #12]	@ (8001ae4 <HAL_IncTick+0x10>)
 8001ad6:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <HAL_IncTick+0x14>)
 8001ad8:	6811      	ldr	r1, [r2, #0]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	440b      	add	r3, r1
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000ddc 	.word	0x20000ddc
 8001ae8:	200000a4 	.word	0x200000a4

08001aec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001aec:	4b01      	ldr	r3, [pc, #4]	@ (8001af4 <HAL_GetTick+0x8>)
 8001aee:	6818      	ldr	r0, [r3, #0]
}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000ddc 	.word	0x20000ddc

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff fff6 	bl	8001aec <HAL_GetTick>
 8001b00:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001b04:	bf1e      	ittt	ne
 8001b06:	4b04      	ldrne	r3, [pc, #16]	@ (8001b18 <HAL_Delay+0x20>)
 8001b08:	781b      	ldrbne	r3, [r3, #0]
 8001b0a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0c:	f7ff ffee 	bl	8001aec <HAL_GetTick>
 8001b10:	1b43      	subs	r3, r0, r5
 8001b12:	42a3      	cmp	r3, r4
 8001b14:	d3fa      	bcc.n	8001b0c <HAL_Delay+0x14>
  {
  }
}
 8001b16:	bd38      	pop	{r3, r4, r5, pc}
 8001b18:	200000a4 	.word	0x200000a4

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4907      	ldr	r1, [pc, #28]	@ (8001b3c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b22:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b2a:	0412      	lsls	r2, r2, #16
 8001b2c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001b38:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b530      	push	{r4, r5, lr}
 8001b44:	68dc      	ldr	r4, [r3, #12]
 8001b46:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	bf28      	it	cs
 8001b54:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5c:	bf8c      	ite	hi
 8001b5e:	3c03      	subhi	r4, #3
 8001b60:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b62:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001b66:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	fa03 f304 	lsl.w	r3, r3, r4
 8001b78:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001b80:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001b82:	db06      	blt.n	8001b92 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001b88:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001b8c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b90:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	f000 000f 	and.w	r0, r0, #15
 8001b96:	4a02      	ldr	r2, [pc, #8]	@ (8001ba0 <HAL_NVIC_SetPriority+0x60>)
 8001b98:	5413      	strb	r3, [r2, r0]
 8001b9a:	e7f9      	b.n	8001b90 <HAL_NVIC_SetPriority+0x50>
 8001b9c:	e000ed00 	.word	0xe000ed00
 8001ba0:	e000ed14 	.word	0xe000ed14

08001ba4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	db07      	blt.n	8001bb8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba8:	0941      	lsrs	r1, r0, #5
 8001baa:	2301      	movs	r3, #1
 8001bac:	f000 001f 	and.w	r0, r0, #31
 8001bb0:	4a02      	ldr	r2, [pc, #8]	@ (8001bbc <HAL_NVIC_EnableIRQ+0x18>)
 8001bb2:	4083      	lsls	r3, r0
 8001bb4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	3801      	subs	r0, #1
 8001bc2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001bc6:	d20b      	bcs.n	8001be0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <HAL_SYSTICK_Config+0x24>)
 8001bce:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd0:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd2:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bda:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bdc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bde:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001be0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001be8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001bec:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <HAL_MPU_Disable+0x18>)
 8001bee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bf0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_MPU_Enable+0x1c>)
 8001c06:	f040 0001 	orr.w	r0, r0, #1
 8001c0a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c10:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c1a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c24:	7843      	ldrb	r3, [r0, #1]
 8001c26:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <HAL_MPU_ConfigRegion+0x54>)
{
 8001c28:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8001c2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 8001c2e:	7801      	ldrb	r1, [r0, #0]
 8001c30:	b1e9      	cbz	r1, 8001c6e <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001c32:	6843      	ldr	r3, [r0, #4]
 8001c34:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c38:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c3a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c3c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c3e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c42:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c44:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c46:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c4a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c4c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c50:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c52:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c56:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c5c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c62:	7a01      	ldrb	r1, [r0, #8]
 8001c64:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c68:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c6c:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8001c6e:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 8001c72:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 8001c76:	e7f9      	b.n	8001c6c <HAL_MPU_ConfigRegion+0x48>
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c7c:	6803      	ldr	r3, [r0, #0]
{
 8001c7e:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c80:	2018      	movs	r0, #24
 8001c82:	b2d9      	uxtb	r1, r3
 8001c84:	3910      	subs	r1, #16
 8001c86:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8001c8a:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c8c:	4c05      	ldr	r4, [pc, #20]	@ (8001ca4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001c8e:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c90:	5c20      	ldrb	r0, [r4, r0]
 8001c92:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c94:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8001c98:	f020 0003 	bic.w	r0, r0, #3
 8001c9c:	bf88      	it	hi
 8001c9e:	3004      	addhi	r0, #4
 8001ca0:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001ca2:	bd10      	pop	{r4, pc}
 8001ca4:	08005ea8 	.word	0x08005ea8

08001ca8 <HAL_DMA_Init>:
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ff1e 	bl	8001aec <HAL_GetTick>
 8001cb0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001cb2:	2c00      	cmp	r4, #0
 8001cb4:	d060      	beq.n	8001d78 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cb6:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8001cb8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cba:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001cc4:	6813      	ldr	r3, [r2, #0]
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ccc:	6822      	ldr	r2, [r4, #0]
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	07d8      	lsls	r0, r3, #31
 8001cd2:	d42e      	bmi.n	8001d32 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8001cd4:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd6:	4832      	ldr	r0, [pc, #200]	@ (8001da0 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd8:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cda:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cdc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001ce0:	432b      	orrs	r3, r5
 8001ce2:	68e5      	ldr	r5, [r4, #12]
 8001ce4:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce6:	6925      	ldr	r5, [r4, #16]
 8001ce8:	432b      	orrs	r3, r5
 8001cea:	6965      	ldr	r5, [r4, #20]
 8001cec:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	69e5      	ldr	r5, [r4, #28]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf4:	6a25      	ldr	r5, [r4, #32]
 8001cf6:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf8:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cfa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001cfc:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cfe:	bf02      	ittt	eq
 8001d00:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8001d04:	4335      	orreq	r5, r6
 8001d06:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d08:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8001d0a:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8001d0c:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001d12:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d16:	d135      	bne.n	8001d84 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8001d18:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d1a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001d1c:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d1e:	b38d      	cbz	r5, 8001d84 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d20:	b991      	cbnz	r1, 8001d48 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8001d22:	2801      	cmp	r0, #1
 8001d24:	d020      	beq.n	8001d68 <HAL_DMA_Init+0xc0>
 8001d26:	f030 0102 	bics.w	r1, r0, #2
 8001d2a:	d12b      	bne.n	8001d84 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d2c:	01e9      	lsls	r1, r5, #7
 8001d2e:	d529      	bpl.n	8001d84 <HAL_DMA_Init+0xdc>
 8001d30:	e01d      	b.n	8001d6e <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d32:	f7ff fedb 	bl	8001aec <HAL_GetTick>
 8001d36:	1b40      	subs	r0, r0, r5
 8001d38:	2805      	cmp	r0, #5
 8001d3a:	d9c7      	bls.n	8001ccc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d3c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d3e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d40:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d42:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001d46:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d48:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001d4c:	d116      	bne.n	8001d7c <HAL_DMA_Init+0xd4>
    switch (tmp)
 8001d4e:	2803      	cmp	r0, #3
 8001d50:	d818      	bhi.n	8001d84 <HAL_DMA_Init+0xdc>
 8001d52:	a101      	add	r1, pc, #4	@ (adr r1, 8001d58 <HAL_DMA_Init+0xb0>)
 8001d54:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001d58:	08001d6f 	.word	0x08001d6f
 8001d5c:	08001d2d 	.word	0x08001d2d
 8001d60:	08001d6f 	.word	0x08001d6f
 8001d64:	08001d69 	.word	0x08001d69
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d68:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8001d6c:	d10a      	bne.n	8001d84 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d6e:	2340      	movs	r3, #64	@ 0x40
 8001d70:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
 8001d7a:	e7e4      	b.n	8001d46 <HAL_DMA_Init+0x9e>
    switch (tmp)
 8001d7c:	2802      	cmp	r0, #2
 8001d7e:	d9f6      	bls.n	8001d6e <HAL_DMA_Init+0xc6>
 8001d80:	2803      	cmp	r0, #3
 8001d82:	d0d3      	beq.n	8001d2c <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8001d84:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7ff ff78 	bl	8001c7c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d8e:	233f      	movs	r3, #63	@ 0x3f
 8001d90:	4093      	lsls	r3, r2
 8001d92:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d94:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001d96:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d98:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001d9e:	e7d2      	b.n	8001d46 <HAL_DMA_Init+0x9e>
 8001da0:	f010803f 	.word	0xf010803f

08001da4 <HAL_DMA_DeInit>:
{
 8001da4:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001da6:	4605      	mov	r5, r0
 8001da8:	b320      	cbz	r0, 8001df4 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001daa:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	b2dc      	uxtb	r4, r3
 8001db2:	d01d      	beq.n	8001df0 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001db4:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8001db6:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001dc0:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 8001dc2:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001dc4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001dc6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001dc8:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001dca:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001dcc:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dce:	f7ff ff55 	bl	8001c7c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd2:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001dd4:	233f      	movs	r3, #63	@ 0x3f
 8001dd6:	4093      	lsls	r3, r2
 8001dd8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dda:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8001ddc:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001de0:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001de4:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001de8:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 8001dec:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 8001df0:	4620      	mov	r0, r4
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001df4:	2401      	movs	r4, #1
 8001df6:	e7fb      	b.n	8001df0 <HAL_DMA_DeInit+0x4c>

08001df8 <HAL_DMA_Start_IT>:
{
 8001df8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001dfa:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfe:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001e00:	2c01      	cmp	r4, #1
 8001e02:	d034      	beq.n	8001e6e <HAL_DMA_Start_IT+0x76>
 8001e04:	2401      	movs	r4, #1
 8001e06:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e0a:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8001e0e:	2c01      	cmp	r4, #1
 8001e10:	f04f 0400 	mov.w	r4, #0
 8001e14:	d129      	bne.n	8001e6a <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e16:	2502      	movs	r5, #2
 8001e18:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1c:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e1e:	6804      	ldr	r4, [r0, #0]
 8001e20:	6825      	ldr	r5, [r4, #0]
 8001e22:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8001e26:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001e28:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e2a:	6883      	ldr	r3, [r0, #8]
 8001e2c:	2b40      	cmp	r3, #64	@ 0x40
 8001e2e:	d119      	bne.n	8001e64 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8001e30:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001e32:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e34:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8001e36:	233f      	movs	r3, #63	@ 0x3f
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	f043 0316 	orr.w	r3, r3, #22
 8001e42:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e44:	6963      	ldr	r3, [r4, #20]
 8001e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e4a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001e4c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001e4e:	b11b      	cbz	r3, 8001e58 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	f043 0308 	orr.w	r3, r3, #8
 8001e56:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e58:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6023      	str	r3, [r4, #0]
}
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8001e64:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e66:	60e2      	str	r2, [r4, #12]
 8001e68:	e7e4      	b.n	8001e34 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8001e6a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8001e6e:	2002      	movs	r0, #2
 8001e70:	e7f7      	b.n	8001e62 <HAL_DMA_Start_IT+0x6a>

08001e72 <HAL_DMA_Abort>:
{
 8001e72:	b570      	push	{r4, r5, r6, lr}
 8001e74:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff fe38 	bl	8001aec <HAL_GetTick>
 8001e7c:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7e:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d006      	beq.n	8001e94 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 8001e88:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8a:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	f022 0216 	bic.w	r2, r2, #22
 8001e9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea4:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001ea8:	b90a      	cbnz	r2, 8001eae <HAL_DMA_Abort+0x3c>
 8001eaa:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001eac:	b11a      	cbz	r2, 8001eb6 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	f022 0208 	bic.w	r2, r2, #8
 8001eb4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	f010 0001 	ands.w	r0, r0, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_DMA_Abort+0x66>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001eca:	233f      	movs	r3, #63	@ 0x3f
 8001ecc:	4093      	lsls	r3, r2
 8001ece:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001ed6:	e7d9      	b.n	8001e8c <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed8:	f7ff fe08 	bl	8001aec <HAL_GetTick>
 8001edc:	1b40      	subs	r0, r0, r5
 8001ede:	2805      	cmp	r0, #5
 8001ee0:	d9ed      	bls.n	8001ebe <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee2:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee4:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee6:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee8:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 8001eec:	e7ce      	b.n	8001e8c <HAL_DMA_Abort+0x1a>
	...

08001ef0 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8001ef0:	2300      	movs	r3, #0
{
 8001ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001ef4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef6:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8002068 <HAL_DMA_IRQHandler+0x178>)
{
 8001efa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efc:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001efe:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f00:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8001f02:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f04:	409a      	lsls	r2, r3
 8001f06:	4232      	tst	r2, r6
 8001f08:	d00c      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0a:	6801      	ldr	r1, [r0, #0]
 8001f0c:	6808      	ldr	r0, [r1, #0]
 8001f0e:	0740      	lsls	r0, r0, #29
 8001f10:	d508      	bpl.n	8001f24 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f12:	6808      	ldr	r0, [r1, #0]
 8001f14:	f020 0004 	bic.w	r0, r0, #4
 8001f18:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f1a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f24:	2201      	movs	r2, #1
 8001f26:	409a      	lsls	r2, r3
 8001f28:	4232      	tst	r2, r6
 8001f2a:	d008      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f2c:	6821      	ldr	r1, [r4, #0]
 8001f2e:	6949      	ldr	r1, [r1, #20]
 8001f30:	0609      	lsls	r1, r1, #24
 8001f32:	d504      	bpl.n	8001f3e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f34:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f38:	f042 0202 	orr.w	r2, r2, #2
 8001f3c:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3e:	2204      	movs	r2, #4
 8001f40:	409a      	lsls	r2, r3
 8001f42:	4232      	tst	r2, r6
 8001f44:	d008      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f46:	6821      	ldr	r1, [r4, #0]
 8001f48:	6809      	ldr	r1, [r1, #0]
 8001f4a:	0788      	lsls	r0, r1, #30
 8001f4c:	d504      	bpl.n	8001f58 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f4e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f52:	f042 0204 	orr.w	r2, r2, #4
 8001f56:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f58:	2210      	movs	r2, #16
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	4232      	tst	r2, r6
 8001f5e:	d010      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	0709      	lsls	r1, r1, #28
 8001f66:	d50c      	bpl.n	8001f82 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f68:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	0350      	lsls	r0, r2, #13
 8001f6e:	d537      	bpl.n	8001fe0 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0319      	lsls	r1, r3, #12
 8001f74:	d401      	bmi.n	8001f7a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001f76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f78:	e000      	b.n	8001f7c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f7a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001f7c:	b10b      	cbz	r3, 8001f82 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f82:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001f84:	2220      	movs	r2, #32
 8001f86:	408a      	lsls	r2, r1
 8001f88:	4232      	tst	r2, r6
 8001f8a:	d03a      	beq.n	8002002 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	06c6      	lsls	r6, r0, #27
 8001f92:	d536      	bpl.n	8002002 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f94:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f96:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8001f9a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f9c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f9e:	d127      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fa0:	f022 0216 	bic.w	r2, r2, #22
 8001fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fac:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001fb0:	b90a      	cbnz	r2, 8001fb6 <HAL_DMA_IRQHandler+0xc6>
 8001fb2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001fb4:	b11a      	cbz	r2, 8001fbe <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	f022 0208 	bic.w	r2, r2, #8
 8001fbc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbe:	233f      	movs	r3, #63	@ 0x3f
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001fd0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d045      	beq.n	8002062 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001fd6:	4620      	mov	r0, r4
}
 8001fd8:	b003      	add	sp, #12
 8001fda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001fde:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	05d2      	lsls	r2, r2, #23
 8001fe4:	d4c7      	bmi.n	8001f76 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	f022 0208 	bic.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e7c2      	b.n	8001f76 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff0:	0350      	lsls	r0, r2, #13
 8001ff2:	d527      	bpl.n	8002044 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0319      	lsls	r1, r3, #12
 8001ff8:	d431      	bmi.n	800205e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001ffa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 8001ffc:	b10b      	cbz	r3, 8002002 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001ffe:	4620      	mov	r0, r4
 8002000:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002002:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002004:	b36b      	cbz	r3, 8002062 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002006:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002008:	07da      	lsls	r2, r3, #31
 800200a:	d519      	bpl.n	8002040 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 800200c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 8002010:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002012:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8002016:	2305      	movs	r3, #5
 8002018:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002024:	9b01      	ldr	r3, [sp, #4]
 8002026:	3301      	adds	r3, #1
 8002028:	42bb      	cmp	r3, r7
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	d802      	bhi.n	8002034 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800202e:	6813      	ldr	r3, [r2, #0]
 8002030:	07db      	lsls	r3, r3, #31
 8002032:	d4f7      	bmi.n	8002024 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002034:	2301      	movs	r3, #1
 8002036:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800203a:	2300      	movs	r3, #0
 800203c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002040:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002042:	e7c6      	b.n	8001fd2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 800204a:	d108      	bne.n	800205e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	f021 0110 	bic.w	r1, r1, #16
 8002052:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002054:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002056:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800205a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 800205e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002060:	e7cc      	b.n	8001ffc <HAL_DMA_IRQHandler+0x10c>
}
 8002062:	b003      	add	sp, #12
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002066:	bf00      	nop
 8002068:	200000a0 	.word	0x200000a0

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002070:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8002230 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002076:	4a6c      	ldr	r2, [pc, #432]	@ (8002228 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002078:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800207c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207e:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8002082:	43ac      	bics	r4, r5
 8002084:	f040 80b7 	bne.w	80021f6 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002088:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800208a:	2703      	movs	r7, #3
 800208c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002090:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002094:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002098:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800209a:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800209e:	2f01      	cmp	r7, #1
 80020a0:	d834      	bhi.n	800210c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80020a2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020a4:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 80020a8:	68cf      	ldr	r7, [r1, #12]
 80020aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80020ae:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 80020b2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80020b4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b6:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ba:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80020be:	409f      	lsls	r7, r3
 80020c0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80020c4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80020c6:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c8:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020ca:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020ce:	688f      	ldr	r7, [r1, #8]
 80020d0:	fa07 f70e 	lsl.w	r7, r7, lr
 80020d4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 80020d8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020da:	d119      	bne.n	8002110 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 80020dc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020e0:	f003 0a07 	and.w	sl, r3, #7
 80020e4:	f04f 0b0f 	mov.w	fp, #15
 80020e8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80020ec:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80020f0:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020f4:	fa0b fb0a 	lsl.w	fp, fp, sl
 80020f8:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020fc:	690f      	ldr	r7, [r1, #16]
 80020fe:	fa07 f70a 	lsl.w	r7, r7, sl
 8002102:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8002106:	f8c8 7020 	str.w	r7, [r8, #32]
 800210a:	e001      	b.n	8002110 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	2c03      	cmp	r4, #3
 800210e:	d1da      	bne.n	80020c6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002110:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002112:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800211a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800211e:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8002122:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002124:	d067      	beq.n	80021f6 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800212a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800212e:	f003 0c03 	and.w	ip, r3, #3
 8002132:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800213a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800213e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8002146:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800214a:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800214e:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8002156:	9401      	str	r4, [sp, #4]
 8002158:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800215a:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800215c:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002160:	4c32      	ldr	r4, [pc, #200]	@ (800222c <HAL_GPIO_Init+0x1c0>)
 8002162:	42a0      	cmp	r0, r4
 8002164:	d04e      	beq.n	8002204 <HAL_GPIO_Init+0x198>
 8002166:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800216a:	42a0      	cmp	r0, r4
 800216c:	d04c      	beq.n	8002208 <HAL_GPIO_Init+0x19c>
 800216e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002172:	42a0      	cmp	r0, r4
 8002174:	d04a      	beq.n	800220c <HAL_GPIO_Init+0x1a0>
 8002176:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800217a:	42a0      	cmp	r0, r4
 800217c:	d048      	beq.n	8002210 <HAL_GPIO_Init+0x1a4>
 800217e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002182:	42a0      	cmp	r0, r4
 8002184:	d046      	beq.n	8002214 <HAL_GPIO_Init+0x1a8>
 8002186:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800218a:	42a0      	cmp	r0, r4
 800218c:	d044      	beq.n	8002218 <HAL_GPIO_Init+0x1ac>
 800218e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002192:	42a0      	cmp	r0, r4
 8002194:	d042      	beq.n	800221c <HAL_GPIO_Init+0x1b0>
 8002196:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800219a:	42a0      	cmp	r0, r4
 800219c:	d040      	beq.n	8002220 <HAL_GPIO_Init+0x1b4>
 800219e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80021a2:	42a0      	cmp	r0, r4
 80021a4:	d03e      	beq.n	8002224 <HAL_GPIO_Init+0x1b8>
 80021a6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80021aa:	42a0      	cmp	r0, r4
 80021ac:	bf14      	ite	ne
 80021ae:	240a      	movne	r4, #10
 80021b0:	2409      	moveq	r4, #9
 80021b2:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b6:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021ba:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80021be:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 80021c4:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	bf0c      	ite	eq
 80021c8:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80021ca:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021cc:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 80021d0:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80021d2:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80021d4:	bf0c      	ite	eq
 80021d6:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80021d8:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021da:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 80021de:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80021e0:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	bf0c      	ite	eq
 80021e4:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80021e6:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021e8:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80021ea:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80021ec:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	bf54      	ite	pl
 80021f0:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80021f2:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 80021f4:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021f6:	3301      	adds	r3, #1
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	f47f af3d 	bne.w	8002078 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80021fe:	b003      	add	sp, #12
 8002200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002204:	2400      	movs	r4, #0
 8002206:	e7d4      	b.n	80021b2 <HAL_GPIO_Init+0x146>
 8002208:	2401      	movs	r4, #1
 800220a:	e7d2      	b.n	80021b2 <HAL_GPIO_Init+0x146>
 800220c:	2402      	movs	r4, #2
 800220e:	e7d0      	b.n	80021b2 <HAL_GPIO_Init+0x146>
 8002210:	2403      	movs	r4, #3
 8002212:	e7ce      	b.n	80021b2 <HAL_GPIO_Init+0x146>
 8002214:	2404      	movs	r4, #4
 8002216:	e7cc      	b.n	80021b2 <HAL_GPIO_Init+0x146>
 8002218:	2405      	movs	r4, #5
 800221a:	e7ca      	b.n	80021b2 <HAL_GPIO_Init+0x146>
 800221c:	2406      	movs	r4, #6
 800221e:	e7c8      	b.n	80021b2 <HAL_GPIO_Init+0x146>
 8002220:	2407      	movs	r4, #7
 8002222:	e7c6      	b.n	80021b2 <HAL_GPIO_Init+0x146>
 8002224:	2408      	movs	r4, #8
 8002226:	e7c4      	b.n	80021b2 <HAL_GPIO_Init+0x146>
 8002228:	40013c00 	.word	0x40013c00
 800222c:	40020000 	.word	0x40020000
 8002230:	40023800 	.word	0x40023800

08002234 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	b10a      	cbz	r2, 800223a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002236:	6181      	str	r1, [r0, #24]
  }
}
 8002238:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800223a:	0409      	lsls	r1, r1, #16
 800223c:	e7fb      	b.n	8002236 <HAL_GPIO_WritePin+0x2>

0800223e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800223e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002240:	ea01 0203 	and.w	r2, r1, r3
 8002244:	ea21 0103 	bic.w	r1, r1, r3
 8002248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800224c:	6181      	str	r1, [r0, #24]
}
 800224e:	4770      	bx	lr

08002250 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002250:	6803      	ldr	r3, [r0, #0]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	0791      	lsls	r1, r2, #30
 8002256:	d501      	bpl.n	800225c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002258:	2200      	movs	r2, #0
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	07d2      	lsls	r2, r2, #31
 8002260:	d403      	bmi.n	800226a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	619a      	str	r2, [r3, #24]
  }
}
 800226a:	4770      	bx	lr

0800226c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800226c:	b530      	push	{r4, r5, lr}
 800226e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002270:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002274:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002276:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8002278:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800227a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002280:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002282:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002286:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800228a:	ea20 0002 	bic.w	r0, r0, r2
 800228e:	4303      	orrs	r3, r0
 8002290:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002292:	bd30      	pop	{r4, r5, pc}
 8002294:	03ff63ff 	.word	0x03ff63ff

08002298 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8002298:	6803      	ldr	r3, [r0, #0]
{
 800229a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800229e:	699c      	ldr	r4, [r3, #24]
{
 80022a0:	4605      	mov	r5, r0
 80022a2:	460f      	mov	r7, r1
 80022a4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022a6:	f014 0410 	ands.w	r4, r4, #16
 80022aa:	d06f      	beq.n	800238c <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 80022ac:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ae:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022b4:	682b      	ldr	r3, [r5, #0]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	0690      	lsls	r0, r2, #26
 80022ba:	d461      	bmi.n	8002380 <I2C_IsErrorOccurred+0xe8>
 80022bc:	f1b8 0f00 	cmp.w	r8, #0
 80022c0:	d035      	beq.n	800232e <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80022c2:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80022c8:	682e      	ldr	r6, [r5, #0]
 80022ca:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022cc:	05d9      	lsls	r1, r3, #23
 80022ce:	d505      	bpl.n	80022dc <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80022d4:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80022d8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022da:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022dc:	055a      	lsls	r2, r3, #21
 80022de:	d505      	bpl.n	80022ec <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80022e4:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022ea:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022ec:	059b      	lsls	r3, r3, #22
 80022ee:	d54f      	bpl.n	8002390 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80022f4:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022f8:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80022fa:	4628      	mov	r0, r5
 80022fc:	f7ff ffa8 	bl	8002250 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002300:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8002302:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002304:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002308:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800230c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8002316:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002318:	4323      	orrs	r3, r4
 800231a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800231c:	2320      	movs	r3, #32
 800231e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002322:	2300      	movs	r3, #0
 8002324:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002328:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800232c:	e032      	b.n	8002394 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800232e:	1c7a      	adds	r2, r7, #1
 8002330:	d0c1      	beq.n	80022b6 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002332:	f7ff fbdb 	bl	8001aec <HAL_GetTick>
 8002336:	1b80      	subs	r0, r0, r6
 8002338:	42b8      	cmp	r0, r7
 800233a:	d801      	bhi.n	8002340 <I2C_IsErrorOccurred+0xa8>
 800233c:	2f00      	cmp	r7, #0
 800233e:	d1b9      	bne.n	80022b4 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002340:	682b      	ldr	r3, [r5, #0]
 8002342:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8002344:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002348:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800234a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800234c:	0400      	lsls	r0, r0, #16
 800234e:	d50a      	bpl.n	8002366 <I2C_IsErrorOccurred+0xce>
 8002350:	0449      	lsls	r1, r1, #17
 8002352:	d408      	bmi.n	8002366 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8002354:	2a20      	cmp	r2, #32
 8002356:	d006      	beq.n	8002366 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800235e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002360:	f7ff fbc4 	bl	8001aec <HAL_GetTick>
 8002364:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002366:	682b      	ldr	r3, [r5, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	069b      	lsls	r3, r3, #26
 800236c:	d4a2      	bmi.n	80022b4 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800236e:	f7ff fbbd 	bl	8001aec <HAL_GetTick>
 8002372:	1b80      	subs	r0, r0, r6
 8002374:	2819      	cmp	r0, #25
 8002376:	d9f6      	bls.n	8002366 <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002378:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800237a:	f04f 0801 	mov.w	r8, #1
 800237e:	e799      	b.n	80022b4 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8002380:	f1b8 0f00 	cmp.w	r8, #0
 8002384:	d19d      	bne.n	80022c2 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002386:	2220      	movs	r2, #32
 8002388:	61da      	str	r2, [r3, #28]
 800238a:	e79a      	b.n	80022c2 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	4620      	mov	r0, r4
 800238e:	e79b      	b.n	80022c8 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8002390:	2800      	cmp	r0, #0
 8002392:	d1b2      	bne.n	80022fa <I2C_IsErrorOccurred+0x62>
}
 8002394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002398 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002398:	b570      	push	{r4, r5, r6, lr}
 800239a:	4604      	mov	r4, r0
 800239c:	460d      	mov	r5, r1
 800239e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	079b      	lsls	r3, r3, #30
 80023a6:	d501      	bpl.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80023a8:	2000      	movs	r0, #0
 80023aa:	e01b      	b.n	80023e4 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ac:	4632      	mov	r2, r6
 80023ae:	4629      	mov	r1, r5
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7ff ff71 	bl	8002298 <I2C_IsErrorOccurred>
 80023b6:	b9a0      	cbnz	r0, 80023e2 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	1c6a      	adds	r2, r5, #1
 80023ba:	d0f1      	beq.n	80023a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023bc:	f7ff fb96 	bl	8001aec <HAL_GetTick>
 80023c0:	1b80      	subs	r0, r0, r6
 80023c2:	42a8      	cmp	r0, r5
 80023c4:	d801      	bhi.n	80023ca <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	d1ea      	bne.n	80023a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80023cc:	f043 0320 	orr.w	r3, r3, #32
 80023d0:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	2320      	movs	r3, #32
 80023d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	2300      	movs	r3, #0
 80023da:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80023de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80023e2:	2001      	movs	r0, #1
}
 80023e4:	bd70      	pop	{r4, r5, r6, pc}

080023e6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80023e6:	b570      	push	{r4, r5, r6, lr}
 80023e8:	4604      	mov	r4, r0
 80023ea:	460d      	mov	r5, r1
 80023ec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	d501      	bpl.n	80023fa <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80023f6:	2000      	movs	r0, #0
 80023f8:	e019      	b.n	800242e <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fa:	4632      	mov	r2, r6
 80023fc:	4629      	mov	r1, r5
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff ff4a 	bl	8002298 <I2C_IsErrorOccurred>
 8002404:	b990      	cbnz	r0, 800242c <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002406:	f7ff fb71 	bl	8001aec <HAL_GetTick>
 800240a:	1b80      	subs	r0, r0, r6
 800240c:	42a8      	cmp	r0, r5
 800240e:	d801      	bhi.n	8002414 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002410:	2d00      	cmp	r5, #0
 8002412:	d1ec      	bne.n	80023ee <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002416:	f043 0320 	orr.w	r3, r3, #32
 800241a:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800241c:	2320      	movs	r3, #32
 800241e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002422:	2300      	movs	r3, #0
 8002424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002428:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800242c:	2001      	movs	r0, #1
}
 800242e:	bd70      	pop	{r4, r5, r6, pc}

08002430 <I2C_WaitOnFlagUntilTimeout>:
{
 8002430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002434:	9f06      	ldr	r7, [sp, #24]
 8002436:	4604      	mov	r4, r0
 8002438:	4688      	mov	r8, r1
 800243a:	4616      	mov	r6, r2
 800243c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243e:	6822      	ldr	r2, [r4, #0]
 8002440:	6993      	ldr	r3, [r2, #24]
 8002442:	ea38 0303 	bics.w	r3, r8, r3
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	42b3      	cmp	r3, r6
 800244e:	d001      	beq.n	8002454 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8002450:	2000      	movs	r0, #0
 8002452:	e015      	b.n	8002480 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002454:	1c6b      	adds	r3, r5, #1
 8002456:	d0f3      	beq.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7ff fb48 	bl	8001aec <HAL_GetTick>
 800245c:	1bc0      	subs	r0, r0, r7
 800245e:	42a8      	cmp	r0, r5
 8002460:	d801      	bhi.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x36>
 8002462:	2d00      	cmp	r5, #0
 8002464:	d1eb      	bne.n	800243e <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002466:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8002468:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800246a:	f043 0320 	orr.w	r3, r3, #32
 800246e:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002470:	2320      	movs	r3, #32
 8002472:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002476:	2300      	movs	r3, #0
 8002478:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800247c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8002480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002484 <HAL_I2C_MspInit>:
}
 8002484:	4770      	bx	lr

08002486 <HAL_I2C_Init>:
{
 8002486:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002488:	4604      	mov	r4, r0
 800248a:	2800      	cmp	r0, #0
 800248c:	d04a      	beq.n	8002524 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002492:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002496:	b91b      	cbnz	r3, 80024a0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002498:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800249c:	f7ff fff2 	bl	8002484 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a0:	2324      	movs	r3, #36	@ 0x24
 80024a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024b0:	6862      	ldr	r2, [r4, #4]
 80024b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024b6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024be:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c4:	2901      	cmp	r1, #1
 80024c6:	d124      	bne.n	8002512 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024cc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024ce:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d0:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024d2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80024d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024da:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024e2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024e4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80024e8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024ea:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024f0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024f2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002502:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002506:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800250a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8002510:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002512:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002516:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002518:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800251a:	d1d8      	bne.n	80024ce <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800251c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	e7d4      	b.n	80024ce <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
 8002526:	e7f3      	b.n	8002510 <HAL_I2C_Init+0x8a>

08002528 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8002528:	4770      	bx	lr

0800252a <HAL_I2C_DeInit>:
{
 800252a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800252c:	4604      	mov	r4, r0
 800252e:	b198      	cbz	r0, 8002558 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8002530:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002532:	2324      	movs	r3, #36	@ 0x24
 8002534:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002538:	6813      	ldr	r3, [r2, #0]
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002540:	f7ff fff2 	bl	8002528 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	2000      	movs	r0, #0
 8002546:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8002548:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800254c:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002550:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8002556:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002558:	2001      	movs	r0, #1
 800255a:	e7fc      	b.n	8002556 <HAL_I2C_DeInit+0x2c>

0800255c <HAL_I2C_Mem_Write>:
{
 800255c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002560:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002562:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8002566:	4604      	mov	r4, r0
 8002568:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800256a:	2b20      	cmp	r3, #32
{
 800256c:	4616      	mov	r6, r2
 800256e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8002572:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002576:	f040 80c6 	bne.w	8002706 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800257a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800257c:	b113      	cbz	r3, 8002584 <HAL_I2C_Mem_Write+0x28>
 800257e:	f1ba 0f00 	cmp.w	sl, #0
 8002582:	d106      	bne.n	8002592 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002588:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800258a:	2001      	movs	r0, #1
}
 800258c:	b003      	add	sp, #12
 800258e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002592:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002596:	2b01      	cmp	r3, #1
 8002598:	f000 80b5 	beq.w	8002706 <HAL_I2C_Mem_Write+0x1aa>
 800259c:	f04f 0b01 	mov.w	fp, #1
 80025a0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80025a4:	f7ff faa2 	bl	8001aec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025a8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80025aa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ac:	9000      	str	r0, [sp, #0]
 80025ae:	465a      	mov	r2, fp
 80025b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff ff3b 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d1e5      	bne.n	800258a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025be:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 80025c0:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025c2:	fa5f f289 	uxtb.w	r2, r9
 80025c6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025c8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025cc:	2340      	movs	r3, #64	@ 0x40
 80025ce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80025d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d4:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025d6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80025d8:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025da:	4b4c      	ldr	r3, [pc, #304]	@ (800270c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80025dc:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025e6:	f7ff fe41 	bl	800226c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	462a      	mov	r2, r5
 80025ec:	4641      	mov	r1, r8
 80025ee:	4620      	mov	r0, r4
 80025f0:	f7ff fed2 	bl	8002398 <I2C_WaitOnTXISFlagUntilTimeout>
 80025f4:	bb18      	cbnz	r0, 800263e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025fa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025fc:	d115      	bne.n	800262a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025fe:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002600:	2200      	movs	r2, #0
 8002602:	2180      	movs	r1, #128	@ 0x80
 8002604:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002606:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	4643      	mov	r3, r8
 800260a:	9500      	str	r5, [sp, #0]
 800260c:	f7ff ff10 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8002610:	b9a8      	cbnz	r0, 800263e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002612:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	2bff      	cmp	r3, #255	@ 0xff
 8002618:	d815      	bhi.n	8002646 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800261a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800261c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8002620:	b292      	uxth	r2, r2
 8002622:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	9000      	str	r0, [sp, #0]
 8002628:	e012      	b.n	8002650 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800262a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800262c:	4641      	mov	r1, r8
 800262e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	462a      	mov	r2, r5
 8002634:	f7ff feb0 	bl	8002398 <I2C_WaitOnTXISFlagUntilTimeout>
 8002638:	b908      	cbnz	r0, 800263e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	e7df      	b.n	80025fe <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002644:	e7a1      	b.n	800258a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002646:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002648:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800264e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002650:	4639      	mov	r1, r7
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff fe0a 	bl	800226c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002658:	462a      	mov	r2, r5
 800265a:	4641      	mov	r1, r8
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff fe9b 	bl	8002398 <I2C_WaitOnTXISFlagUntilTimeout>
 8002662:	2800      	cmp	r0, #0
 8002664:	d191      	bne.n	800258a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002666:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002668:	6822      	ldr	r2, [r4, #0]
 800266a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800266e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002670:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002672:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002674:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002676:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002678:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800267a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800267c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800267e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002680:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002682:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002684:	b29b      	uxth	r3, r3
 8002686:	b1b3      	cbz	r3, 80026b6 <HAL_I2C_Mem_Write+0x15a>
 8002688:	b9aa      	cbnz	r2, 80026b6 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800268a:	4643      	mov	r3, r8
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	4620      	mov	r0, r4
 8002690:	9500      	str	r5, [sp, #0]
 8002692:	f7ff fecd 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8002696:	2800      	cmp	r0, #0
 8002698:	f47f af77 	bne.w	800258a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800269c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2bff      	cmp	r3, #255	@ 0xff
 80026a2:	d928      	bls.n	80026f6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a4:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026aa:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ac:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ae:	4639      	mov	r1, r7
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff fddb 	bl	800226c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80026b6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1cc      	bne.n	8002658 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026be:	462a      	mov	r2, r5
 80026c0:	4641      	mov	r1, r8
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff fe8f 	bl	80023e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	f47f af5e 	bne.w	800258a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	2120      	movs	r1, #32
 80026d2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80026da:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80026de:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80026ec:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026f0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80026f4:	e74a      	b.n	800258c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80026f6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80026fc:	b292      	uxth	r2, r2
 80026fe:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	9000      	str	r0, [sp, #0]
 8002704:	e7d3      	b.n	80026ae <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8002706:	2002      	movs	r0, #2
 8002708:	e740      	b.n	800258c <HAL_I2C_Mem_Write+0x30>
 800270a:	bf00      	nop
 800270c:	80002000 	.word	0x80002000

08002710 <HAL_I2C_Mem_Read>:
{
 8002710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002714:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002716:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800271a:	4604      	mov	r4, r0
 800271c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	2b20      	cmp	r3, #32
{
 8002720:	4616      	mov	r6, r2
 8002722:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8002726:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800272a:	f040 80c9 	bne.w	80028c0 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800272e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002730:	b113      	cbz	r3, 8002738 <HAL_I2C_Mem_Read+0x28>
 8002732:	f1ba 0f00 	cmp.w	sl, #0
 8002736:	d106      	bne.n	8002746 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800273c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800273e:	2001      	movs	r0, #1
}
 8002740:	b003      	add	sp, #12
 8002742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002746:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800274a:	2b01      	cmp	r3, #1
 800274c:	f000 80b8 	beq.w	80028c0 <HAL_I2C_Mem_Read+0x1b0>
 8002750:	f04f 0b01 	mov.w	fp, #1
 8002754:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8002758:	f7ff f9c8 	bl	8001aec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800275c:	2319      	movs	r3, #25
 800275e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002760:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002762:	465a      	mov	r2, fp
 8002764:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002768:	4620      	mov	r0, r4
 800276a:	f7ff fe61 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2800      	cmp	r0, #0
 8002772:	d1e4      	bne.n	800273e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002774:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8002776:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002778:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800277a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800277e:	2240      	movs	r2, #64	@ 0x40
 8002780:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8002784:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002786:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002788:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800278a:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800278c:	4a4d      	ldr	r2, [pc, #308]	@ (80028c4 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800278e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002792:	9200      	str	r2, [sp, #0]
 8002794:	fa5f f289 	uxtb.w	r2, r9
 8002798:	f7ff fd68 	bl	800226c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279c:	462a      	mov	r2, r5
 800279e:	4641      	mov	r1, r8
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fdf9 	bl	8002398 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a6:	bb20      	cbnz	r0, 80027f2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027a8:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ac:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ae:	d116      	bne.n	80027de <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027b0:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027b2:	2200      	movs	r2, #0
 80027b4:	2140      	movs	r1, #64	@ 0x40
 80027b6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027b8:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027ba:	4643      	mov	r3, r8
 80027bc:	9500      	str	r5, [sp, #0]
 80027be:	f7ff fe37 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	b9b0      	cbnz	r0, 80027f2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2bff      	cmp	r3, #255	@ 0xff
 80027ca:	4b3f      	ldr	r3, [pc, #252]	@ (80028c8 <HAL_I2C_Mem_Read+0x1b8>)
 80027cc:	d815      	bhi.n	80027fa <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80027ce:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80027d0:	b292      	uxth	r2, r2
 80027d2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027dc:	e012      	b.n	8002804 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027de:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e0:	4641      	mov	r1, r8
 80027e2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027e4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e6:	462a      	mov	r2, r5
 80027e8:	f7ff fdd6 	bl	8002398 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ec:	b908      	cbnz	r0, 80027f2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	e7de      	b.n	80027b0 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80027f8:	e7a1      	b.n	800273e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027fa:	22ff      	movs	r2, #255	@ 0xff
 80027fc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002804:	4639      	mov	r1, r7
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff fd30 	bl	800226c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800280c:	4643      	mov	r3, r8
 800280e:	2200      	movs	r2, #0
 8002810:	2104      	movs	r1, #4
 8002812:	4620      	mov	r0, r4
 8002814:	9500      	str	r5, [sp, #0]
 8002816:	f7ff fe0b 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 800281a:	2800      	cmp	r0, #0
 800281c:	d18f      	bne.n	800273e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002824:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002826:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002828:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800282a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800282c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800282e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002830:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002832:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8002834:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8002836:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002838:	b29b      	uxth	r3, r3
 800283a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800283c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	b1b3      	cbz	r3, 8002870 <HAL_I2C_Mem_Read+0x160>
 8002842:	b9aa      	cbnz	r2, 8002870 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002844:	4643      	mov	r3, r8
 8002846:	2180      	movs	r1, #128	@ 0x80
 8002848:	4620      	mov	r0, r4
 800284a:	9500      	str	r5, [sp, #0]
 800284c:	f7ff fdf0 	bl	8002430 <I2C_WaitOnFlagUntilTimeout>
 8002850:	2800      	cmp	r0, #0
 8002852:	f47f af74 	bne.w	800273e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002856:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2bff      	cmp	r3, #255	@ 0xff
 800285c:	d928      	bls.n	80028b0 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800285e:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002860:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002864:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002866:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002868:	4639      	mov	r1, r7
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff fcfe 	bl	800226c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002870:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1c9      	bne.n	800280c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002878:	462a      	mov	r2, r5
 800287a:	4641      	mov	r1, r8
 800287c:	4620      	mov	r0, r4
 800287e:	f7ff fdb2 	bl	80023e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002882:	2800      	cmp	r0, #0
 8002884:	f47f af5b 	bne.w	800273e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	2120      	movs	r1, #32
 800288c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8002894:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8002898:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80028a6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028aa:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80028ae:	e747      	b.n	8002740 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80028b0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80028b6:	b292      	uxth	r2, r2
 80028b8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	9000      	str	r0, [sp, #0]
 80028be:	e7d3      	b.n	8002868 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 80028c0:	2002      	movs	r0, #2
 80028c2:	e73d      	b.n	8002740 <HAL_I2C_Mem_Read+0x30>
 80028c4:	80002000 	.word	0x80002000
 80028c8:	80002400 	.word	0x80002400

080028cc <HAL_I2C_GetState>:
  return hi2c->State;
 80028cc:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 80028d0:	4770      	bx	lr

080028d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028d4:	4604      	mov	r4, r0
{
 80028d6:	b08b      	sub	sp, #44	@ 0x2c
  if (hpcd == NULL)
 80028d8:	b360      	cbz	r0, 8002934 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028da:	f890 34bd 	ldrb.w	r3, [r0, #1213]	@ 0x4bd
  USBx = hpcd->Instance;
 80028de:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028e0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80028e4:	b91b      	cbnz	r3, 80028ee <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028e6:	f880 24bc 	strb.w	r2, [r0, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028ea:	f7fd ff67 	bl	80007bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ee:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028f0:	466e      	mov	r6, sp
 80028f2:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80028f4:	f884 34bd 	strb.w	r3, [r4, #1213]	@ 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028f8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
  __HAL_PCD_DISABLE(hpcd);
 80028fa:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028fc:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
  __HAL_PCD_DISABLE(hpcd);
 8002900:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8002904:	bf08      	it	eq
 8002906:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002908:	f001 fec6 	bl	8004698 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002912:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002914:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002918:	4625      	mov	r5, r4
 800291a:	e886 0003 	stmia.w	r6, {r0, r1}
 800291e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002922:	f855 0b10 	ldr.w	r0, [r5], #16
 8002926:	f001 fe05 	bl	8004534 <USB_CoreInit>
 800292a:	4606      	mov	r6, r0
 800292c:	b130      	cbz	r0, 800293c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800292e:	2302      	movs	r3, #2
 8002930:	f884 34bd 	strb.w	r3, [r4, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002934:	2501      	movs	r5, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002936:	4628      	mov	r0, r5
 8002938:	b00b      	add	sp, #44	@ 0x2c
 800293a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800293c:	4601      	mov	r1, r0
 800293e:	6820      	ldr	r0, [r4, #0]
 8002940:	f001 feb0 	bl	80046a4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002944:	4631      	mov	r1, r6
 8002946:	f8d4 c004 	ldr.w	ip, [r4, #4]
    hpcd->IN_ep[i].is_in = 1U;
 800294a:	2624      	movs	r6, #36	@ 0x24
 800294c:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002950:	4608      	mov	r0, r1
 8002952:	b2ca      	uxtb	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002954:	3101      	adds	r1, #1
 8002956:	4594      	cmp	ip, r2
 8002958:	d826      	bhi.n	80029a8 <HAL_PCD_Init+0xd6>
 800295a:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800295c:	2624      	movs	r6, #36	@ 0x24
 800295e:	460a      	mov	r2, r1
 8002960:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002962:	3101      	adds	r1, #1
 8002964:	4584      	cmp	ip, r0
 8002966:	d82d      	bhi.n	80029c4 <HAL_PCD_Init+0xf2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002968:	466e      	mov	r6, sp
 800296a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800296e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002970:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002972:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002976:	e886 0003 	stmia.w	r6, {r0, r1}
 800297a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800297e:	6820      	ldr	r0, [r4, #0]
 8002980:	f001 ff10 	bl	80047a4 <USB_DevInit>
 8002984:	4605      	mov	r5, r0
 8002986:	2800      	cmp	r0, #0
 8002988:	d1d1      	bne.n	800292e <HAL_PCD_Init+0x5c>
  hpcd->State = HAL_PCD_STATE_READY;
 800298a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800298c:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002990:	f884 34bd 	strb.w	r3, [r4, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8002994:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_PCD_Init+0xce>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800299a:	4620      	mov	r0, r4
 800299c:	f000 fd03 	bl	80033a6 <HAL_PCDEx_ActivateLPM>
  (void)USB_DevDisconnect(hpcd->Instance);
 80029a0:	6820      	ldr	r0, [r4, #0]
 80029a2:	f002 faa3 	bl	8004eec <USB_DevDisconnect>
  return HAL_OK;
 80029a6:	e7c6      	b.n	8002936 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].is_in = 1U;
 80029a8:	fb06 4302 	mla	r3, r6, r2, r4
 80029ac:	f883 e03d 	strb.w	lr, [r3, #61]	@ 0x3d
    hpcd->IN_ep[i].num = i;
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029b8:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 80029bc:	6558      	str	r0, [r3, #84]	@ 0x54
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029be:	e9c3 0012 	strd	r0, r0, [r3, #72]	@ 0x48
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	e7c6      	b.n	8002952 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 80029c4:	fb06 4300 	mla	r3, r6, r0, r4
 80029c8:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
    hpcd->OUT_ep[i].num = i;
 80029cc:	f883 027c 	strb.w	r0, [r3, #636]	@ 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029d0:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029d8:	e9c3 22a2 	strd	r2, r2, [r3, #648]	@ 0x288
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029dc:	e7c0      	b.n	8002960 <HAL_PCD_Init+0x8e>

080029de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029de:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80029e0:	f890 34bc 	ldrb.w	r3, [r0, #1212]	@ 0x4bc
{
 80029e4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d00c      	beq.n	8002a04 <HAL_PCD_Start+0x26>
 80029ea:	2301      	movs	r3, #1
 80029ec:	f880 34bc 	strb.w	r3, [r0, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80029f0:	6800      	ldr	r0, [r0, #0]
 80029f2:	f001 fe4b 	bl	800468c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029f6:	6820      	ldr	r0, [r4, #0]
 80029f8:	f002 fa6a 	bl	8004ed0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc

  return HAL_OK;
}
 8002a02:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002a04:	2002      	movs	r0, #2
 8002a06:	e7fc      	b.n	8002a02 <HAL_PCD_Start+0x24>

08002a08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a08:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002a0a:	f890 24bc 	ldrb.w	r2, [r0, #1212]	@ 0x4bc
{
 8002a0e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002a10:	2a01      	cmp	r2, #1
 8002a12:	d00b      	beq.n	8002a2c <HAL_PCD_SetAddress+0x24>
 8002a14:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8002a16:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
  __HAL_LOCK(hpcd);
 8002a1a:	f880 24bc 	strb.w	r2, [r0, #1212]	@ 0x4bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a1e:	6800      	ldr	r0, [r0, #0]
 8002a20:	f002 fa46 	bl	8004eb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc

  return HAL_OK;
}
 8002a2a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	e7fc      	b.n	8002a2a <HAL_PCD_SetAddress+0x22>

08002a30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	f001 060f 	and.w	r6, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a36:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 8002a3a:	4605      	mov	r5, r0
 8002a3c:	f04f 0024 	mov.w	r0, #36	@ 0x24
 8002a40:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
 8002a44:	ea4f 0484 	mov.w	r4, r4, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8002a48:	d01f      	beq.n	8002a8a <HAL_PCD_EP_Open+0x5a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4a:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
    ep->is_in = 1U;
 8002a4e:	fb00 5006 	mla	r0, r0, r6, r5
 8002a52:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a54:	4429      	add	r1, r5
    ep->is_in = 1U;
 8002a56:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8002a5a:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8002a5c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5e:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 8002a60:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8002a62:	b102      	cbz	r2, 8002a66 <HAL_PCD_EP_Open+0x36>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a64:	810e      	strh	r6, [r1, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a66:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8002a68:	bf04      	itt	eq
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
 8002a6e:	f895 34bc 	ldrb.w	r3, [r5, #1212]	@ 0x4bc
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d012      	beq.n	8002a9c <HAL_PCD_EP_Open+0x6c>
 8002a76:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a78:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8002a7a:	f885 34bc 	strb.w	r3, [r5, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a7e:	f001 ff56 	bl	800492e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f885 04bc 	strb.w	r0, [r5, #1212]	@ 0x4bc

  return ret;
}
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a8a:	f504 711f 	add.w	r1, r4, #636	@ 0x27c
    ep->is_in = 0U;
 8002a8e:	fb00 5006 	mla	r0, r0, r6, r5
 8002a92:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a94:	4429      	add	r1, r5
    ep->is_in = 0U;
 8002a96:	f880 427d 	strb.w	r4, [r0, #637]	@ 0x27d
 8002a9a:	e7de      	b.n	8002a5a <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	e7f3      	b.n	8002a88 <HAL_PCD_EP_Open+0x58>

08002aa0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aa0:	b510      	push	{r4, lr}
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	f001 000f 	and.w	r0, r1, #15
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aa8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002aac:	f04f 0224 	mov.w	r2, #36	@ 0x24
 8002ab0:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002ab4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ab8:	d016      	beq.n	8002ae8 <HAL_PCD_EP_Close+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
    ep->is_in = 1U;
 8002abe:	fb02 4200 	mla	r2, r2, r0, r4
 8002ac2:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac4:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002ac6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002aca:	7008      	strb	r0, [r1, #0]

  __HAL_LOCK(hpcd);
 8002acc:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d012      	beq.n	8002afa <HAL_PCD_EP_Close+0x5a>
 8002ad4:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ad6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002ad8:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002adc:	f001 ff66 	bl	80049ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc
  return HAL_OK;
}
 8002ae6:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae8:	f503 711f 	add.w	r1, r3, #636	@ 0x27c
    ep->is_in = 0U;
 8002aec:	fb02 4200 	mla	r2, r2, r0, r4
 8002af0:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af2:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002af4:	f882 327d 	strb.w	r3, [r2, #637]	@ 0x27d
 8002af8:	e7e7      	b.n	8002aca <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8002afa:	2002      	movs	r0, #2
 8002afc:	e7f3      	b.n	8002ae6 <HAL_PCD_EP_Close+0x46>

08002afe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002afe:	b538      	push	{r3, r4, r5, lr}
 8002b00:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b04:	2424      	movs	r4, #36	@ 0x24
 8002b06:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b0a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0e:	f501 711f 	add.w	r1, r1, #636	@ 0x27c
  ep->xfer_len = len;
 8002b12:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  ep->xfer_count = 0U;
 8002b16:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8002b18:	f8c4 228c 	str.w	r2, [r4, #652]	@ 0x28c
  ep->xfer_count = 0U;
 8002b1c:	f8c4 329c 	str.w	r3, [r4, #668]	@ 0x29c
  ep->is_in = 0U;
 8002b20:	f884 327d 	strb.w	r3, [r4, #637]	@ 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b24:	f884 527c 	strb.w	r5, [r4, #636]	@ 0x27c

  if (hpcd->Init.dma_enable == 1U)
 8002b28:	6903      	ldr	r3, [r0, #16]
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b2a:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002b2c:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002b2e:	bf08      	it	eq
 8002b30:	f8c4 2290 	streq.w	r2, [r4, #656]	@ 0x290
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b34:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b36:	b91d      	cbnz	r5, 8002b40 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b38:	f001 ff8e 	bl	8004a58 <USB_EP0StartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }

  return HAL_OK;
}
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b40:	f002 f85a 	bl	8004bf8 <USB_EPStartXfer>
 8002b44:	e7fa      	b.n	8002b3c <HAL_PCD_EP_Receive+0x3e>

08002b46 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b46:	f001 010f 	and.w	r1, r1, #15
 8002b4a:	2324      	movs	r3, #36	@ 0x24
 8002b4c:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002b50:	f8d0 029c 	ldr.w	r0, [r0, #668]	@ 0x29c
 8002b54:	4770      	bx	lr

08002b56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b56:	b538      	push	{r3, r4, r5, lr}
 8002b58:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	2424      	movs	r4, #36	@ 0x24
 8002b5e:	fb04 0105 	mla	r1, r4, r5, r0

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b62:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b66:	313c      	adds	r1, #60	@ 0x3c
  ep->xfer_len = len;
 8002b68:	6563      	str	r3, [r4, #84]	@ 0x54
  ep->xfer_count = 0U;
 8002b6a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8002b6c:	64e2      	str	r2, [r4, #76]	@ 0x4c
  ep->xfer_count = 0U;
 8002b6e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  ep->is_in = 1U;
 8002b70:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b72:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  ep->is_in = 1U;
 8002b76:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  if (hpcd->Init.dma_enable == 1U)
 8002b7a:	6903      	ldr	r3, [r0, #16]
    ep->dma_addr = (uint32_t)pBuf;
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b7c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002b7e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002b80:	bf08      	it	eq
 8002b82:	6522      	streq	r2, [r4, #80]	@ 0x50
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b84:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b86:	b91d      	cbnz	r5, 8002b90 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b88:	f001 ff66 	bl	8004a58 <USB_EP0StartXfer>
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }

  return HAL_OK;
}
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b90:	f002 f832 	bl	8004bf8 <USB_EPStartXfer>
 8002b94:	e7fa      	b.n	8002b8c <HAL_PCD_EP_Transmit+0x36>

08002b96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b96:	b538      	push	{r3, r4, r5, lr}
 8002b98:	f001 050f 	and.w	r5, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b9c:	6843      	ldr	r3, [r0, #4]
{
 8002b9e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ba0:	429d      	cmp	r5, r3
 8002ba2:	d82c      	bhi.n	8002bfe <HAL_PCD_EP_SetStall+0x68>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ba4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002ba8:	f04f 0024 	mov.w	r0, #36	@ 0x24
 8002bac:	d01e      	beq.n	8002bec <HAL_PCD_EP_SetStall+0x56>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bae:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	fb00 4005 	mla	r0, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb8:	313c      	adds	r1, #60	@ 0x3c
    ep->is_in = 1U;
 8002bba:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
 8002bbe:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002bc2:	708b      	strb	r3, [r1, #2]

  __HAL_LOCK(hpcd);
 8002bc4:	f894 24bc 	ldrb.w	r2, [r4, #1212]	@ 0x4bc
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d01a      	beq.n	8002c02 <HAL_PCD_EP_SetStall+0x6c>

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bcc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002bce:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bd2:	f002 f919 	bl	8004e08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bd6:	b92d      	cbnz	r5, 8002be4 <HAL_PCD_EP_SetStall+0x4e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bd8:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8002bdc:	7c21      	ldrb	r1, [r4, #16]
 8002bde:	6820      	ldr	r0, [r4, #0]
 8002be0:	f002 f9d4 	bl	8004f8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f884 04bc 	strb.w	r0, [r4, #1212]	@ 0x4bc

  return HAL_OK;
}
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8002bec:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 8002bf0:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8002bf2:	f503 711f 	add.w	r1, r3, #636	@ 0x27c
    ep->is_in = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f882 327d 	strb.w	r3, [r2, #637]	@ 0x27d
 8002bfc:	e7df      	b.n	8002bbe <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
 8002c00:	e7f3      	b.n	8002bea <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8002c02:	2002      	movs	r0, #2
 8002c04:	e7f1      	b.n	8002bea <HAL_PCD_EP_SetStall+0x54>

08002c06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c06:	b538      	push	{r3, r4, r5, lr}
 8002c08:	f001 020f 	and.w	r2, r1, #15
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c0c:	6843      	ldr	r3, [r0, #4]
{
 8002c0e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d82a      	bhi.n	8002c6a <HAL_PCD_EP_ClrStall+0x64>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c14:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002c18:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002c1c:	f04f 0024 	mov.w	r0, #36	@ 0x24
 8002c20:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002c24:	d018      	beq.n	8002c58 <HAL_PCD_EP_ClrStall+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c26:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
    ep->is_in = 1U;
 8002c2a:	fb00 4002 	mla	r0, r0, r2, r4
 8002c2e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c30:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002c32:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->is_stall = 0U;
 8002c36:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c38:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8002c3a:	708d      	strb	r5, [r1, #2]

  __HAL_LOCK(hpcd);
 8002c3c:	f894 34bc 	ldrb.w	r3, [r4, #1212]	@ 0x4bc
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d014      	beq.n	8002c6e <HAL_PCD_EP_ClrStall+0x68>
 8002c44:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c46:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002c48:	f884 34bc 	strb.w	r3, [r4, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c4c:	f002 f907 	bl	8004e5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
 8002c50:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8002c52:	f884 54bc 	strb.w	r5, [r4, #1212]	@ 0x4bc
}
 8002c56:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c58:	f503 711f 	add.w	r1, r3, #636	@ 0x27c
    ep->is_in = 0U;
 8002c5c:	fb00 4002 	mla	r0, r0, r2, r4
 8002c60:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c62:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002c64:	f880 327d 	strb.w	r3, [r0, #637]	@ 0x27d
 8002c68:	e7e5      	b.n	8002c36 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	e7f3      	b.n	8002c56 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 8002c6e:	2002      	movs	r0, #2
 8002c70:	e7f1      	b.n	8002c56 <HAL_PCD_EP_ClrStall+0x50>

08002c72 <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c72:	f001 030f 	and.w	r3, r1, #15
 8002c76:	060a      	lsls	r2, r1, #24
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002c7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002c80:	bf4c      	ite	mi
 8002c82:	f103 013c 	addmi.w	r1, r3, #60	@ 0x3c
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c86:	f503 711f 	addpl.w	r1, r3, #636	@ 0x27c
 8002c8a:	4401      	add	r1, r0
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	f001 bf5d 	b.w	8004b4c <USB_EPStopXfer>
	...

08002c94 <HAL_PCD_IRQHandler>:
{
 8002c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c98:	6806      	ldr	r6, [r0, #0]
{
 8002c9a:	b089      	sub	sp, #36	@ 0x24
 8002c9c:	4604      	mov	r4, r0
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	f002 f960 	bl	8004f64 <USB_GetMode>
 8002ca4:	9003      	str	r0, [sp, #12]
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	f040 8170 	bne.w	8002f8c <HAL_PCD_IRQHandler+0x2f8>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cac:	6820      	ldr	r0, [r4, #0]
 8002cae:	f002 f92b 	bl	8004f08 <USB_ReadInterrupts>
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	f000 816a 	beq.w	8002f8c <HAL_PCD_IRQHandler+0x2f8>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002cb8:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
 8002cbc:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cc0:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002cc2:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002cc6:	f8c4 34fc 	str.w	r3, [r4, #1276]	@ 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cca:	f002 f91d 	bl	8004f08 <USB_ReadInterrupts>
 8002cce:	0787      	lsls	r7, r0, #30
 8002cd0:	d504      	bpl.n	8002cdc <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	6953      	ldr	r3, [r2, #20]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cdc:	6820      	ldr	r0, [r4, #0]
 8002cde:	f002 f913 	bl	8004f08 <USB_ReadInterrupts>
 8002ce2:	06c0      	lsls	r0, r0, #27
 8002ce4:	d52c      	bpl.n	8002d40 <HAL_PCD_IRQHandler+0xac>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	6993      	ldr	r3, [r2, #24]
 8002cea:	f023 0310 	bic.w	r3, r3, #16
 8002cee:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8002cf0:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cf4:	f3c8 4343 	ubfx	r3, r8, #17, #4
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002cf8:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	f040 8148 	bne.w	8002f92 <HAL_PCD_IRQHandler+0x2fe>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d02:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002d06:	ea18 0f03 	tst.w	r8, r3
 8002d0a:	d014      	beq.n	8002d36 <HAL_PCD_IRQHandler+0xa2>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d0c:	2324      	movs	r3, #36	@ 0x24
 8002d0e:	f3c8 190a 	ubfx	r9, r8, #4, #11
 8002d12:	4630      	mov	r0, r6
 8002d14:	fb03 4707 	mla	r7, r3, r7, r4
 8002d18:	464a      	mov	r2, r9
 8002d1a:	f8d7 128c 	ldr.w	r1, [r7, #652]	@ 0x28c
 8002d1e:	f002 f853 	bl	8004dc8 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d22:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8002d26:	444b      	add	r3, r9
 8002d28:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d2c:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8002d30:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d32:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d36:	6822      	ldr	r2, [r4, #0]
 8002d38:	6993      	ldr	r3, [r2, #24]
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d40:	6820      	ldr	r0, [r4, #0]
 8002d42:	f002 f8e1 	bl	8004f08 <USB_ReadInterrupts>
 8002d46:	0301      	lsls	r1, r0, #12
 8002d48:	f100 8135 	bmi.w	8002fb6 <HAL_PCD_IRQHandler+0x322>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d4c:	6820      	ldr	r0, [r4, #0]
 8002d4e:	f002 f8db 	bl	8004f08 <USB_ReadInterrupts>
 8002d52:	0342      	lsls	r2, r0, #13
 8002d54:	d50d      	bpl.n	8002d72 <HAL_PCD_IRQHandler+0xde>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d56:	4627      	mov	r7, r4
 8002d58:	f506 6b10 	add.w	fp, r6, #2304	@ 0x900
      epnum = 0U;
 8002d5c:	f04f 0a00 	mov.w	sl, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	f002 f8dd 	bl	8004f20 <USB_ReadDevAllInEpInterrupt>
 8002d66:	9004      	str	r0, [sp, #16]
      while (ep_intr != 0U)
 8002d68:	9b04      	ldr	r3, [sp, #16]
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d6a:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f040 81ea 	bne.w	8003146 <HAL_PCD_IRQHandler+0x4b2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d72:	6820      	ldr	r0, [r4, #0]
 8002d74:	f002 f8c8 	bl	8004f08 <USB_ReadInterrupts>
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	da13      	bge.n	8002da4 <HAL_PCD_IRQHandler+0x110>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d7c:	686b      	ldr	r3, [r5, #4]
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
 8002d84:	f894 34f4 	ldrb.w	r3, [r4, #1268]	@ 0x4f4
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f040 8284 	bne.w	8003296 <HAL_PCD_IRQHandler+0x602>
        hpcd->LPM_State = LPM_L0;
 8002d8e:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d90:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8002d92:	f884 14f4 	strb.w	r1, [r4, #1268]	@ 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d96:	f000 fb19 	bl	80033cc <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	6953      	ldr	r3, [r2, #20]
 8002d9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002da2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002da4:	6820      	ldr	r0, [r4, #0]
 8002da6:	f002 f8af 	bl	8004f08 <USB_ReadInterrupts>
 8002daa:	0500      	lsls	r0, r0, #20
 8002dac:	d50a      	bpl.n	8002dc4 <HAL_PCD_IRQHandler+0x130>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dae:	68ab      	ldr	r3, [r5, #8]
 8002db0:	07d9      	lsls	r1, r3, #31
 8002db2:	d502      	bpl.n	8002dba <HAL_PCD_IRQHandler+0x126>
        HAL_PCD_SuspendCallback(hpcd);
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7fd fdf5 	bl	80009a4 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	6953      	ldr	r3, [r2, #20]
 8002dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002dc4:	6820      	ldr	r0, [r4, #0]
 8002dc6:	f002 f89f 	bl	8004f08 <USB_ReadInterrupts>
 8002dca:	0102      	lsls	r2, r0, #4
 8002dcc:	d514      	bpl.n	8002df8 <HAL_PCD_IRQHandler+0x164>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002dd6:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
 8002dd8:	f894 24f4 	ldrb.w	r2, [r4, #1268]	@ 0x4f4
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	f040 825e 	bne.w	800329e <HAL_PCD_IRQHandler+0x60a>
        hpcd->LPM_State = LPM_L1;
 8002de2:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002de4:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8002de6:	f884 14f4 	strb.w	r1, [r4, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002df0:	f8c4 34f8 	str.w	r3, [r4, #1272]	@ 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002df4:	f000 faea 	bl	80033cc <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002df8:	6820      	ldr	r0, [r4, #0]
 8002dfa:	f002 f885 	bl	8004f08 <USB_ReadInterrupts>
 8002dfe:	04c3      	lsls	r3, r0, #19
 8002e00:	d533      	bpl.n	8002e6a <HAL_PCD_IRQHandler+0x1d6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e02:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e04:	2110      	movs	r1, #16
 8002e06:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e0e:	f001 fc77 	bl	8004700 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e12:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e16:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1a:	6862      	ldr	r2, [r4, #4]
 8002e1c:	9803      	ldr	r0, [sp, #12]
 8002e1e:	4282      	cmp	r2, r0
 8002e20:	f200 8246 	bhi.w	80032b0 <HAL_PCD_IRQHandler+0x61c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e24:	69eb      	ldr	r3, [r5, #28]
 8002e26:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e2a:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8258 	beq.w	80032e4 <HAL_PCD_IRQHandler+0x650>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e34:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8002e38:	f043 030b 	orr.w	r3, r3, #11
 8002e3c:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e40:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002e42:	f043 030b 	orr.w	r3, r3, #11
 8002e46:	646b      	str	r3, [r5, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e48:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e4c:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8002e50:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e56:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e58:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e5c:	f002 f896 	bl	8004f8c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e60:	6822      	ldr	r2, [r4, #0]
 8002e62:	6953      	ldr	r3, [r2, #20]
 8002e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e68:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e6a:	6820      	ldr	r0, [r4, #0]
 8002e6c:	f002 f84c 	bl	8004f08 <USB_ReadInterrupts>
 8002e70:	0487      	lsls	r7, r0, #18
 8002e72:	d516      	bpl.n	8002ea2 <HAL_PCD_IRQHandler+0x20e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	f002 f879 	bl	8004f6c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e7a:	6820      	ldr	r0, [r4, #0]
 8002e7c:	f001 fd4c 	bl	8004918 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e80:	6827      	ldr	r7, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e82:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e84:	f000 fd62 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8002e88:	7b22      	ldrb	r2, [r4, #12]
 8002e8a:	4601      	mov	r1, r0
 8002e8c:	4638      	mov	r0, r7
 8002e8e:	f001 fb8d 	bl	80045ac <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7fd fd75 	bl	8000982 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	6953      	ldr	r3, [r2, #20]
 8002e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ea2:	6820      	ldr	r0, [r4, #0]
 8002ea4:	f002 f830 	bl	8004f08 <USB_ReadInterrupts>
 8002ea8:	0700      	lsls	r0, r0, #28
 8002eaa:	d507      	bpl.n	8002ebc <HAL_PCD_IRQHandler+0x228>
      HAL_PCD_SOFCallback(hpcd);
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7fd fd64 	bl	800097a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	6953      	ldr	r3, [r2, #20]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ebc:	6820      	ldr	r0, [r4, #0]
 8002ebe:	f002 f823 	bl	8004f08 <USB_ReadInterrupts>
 8002ec2:	0601      	lsls	r1, r0, #24
 8002ec4:	f100 8219 	bmi.w	80032fa <HAL_PCD_IRQHandler+0x666>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ec8:	6820      	ldr	r0, [r4, #0]
 8002eca:	f002 f81d 	bl	8004f08 <USB_ReadInterrupts>
 8002ece:	02c2      	lsls	r2, r0, #11
 8002ed0:	d50c      	bpl.n	8002eec <HAL_PCD_IRQHandler+0x258>
 8002ed2:	46a0      	mov	r8, r4
 8002ed4:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed8:	2701      	movs	r7, #1
 8002eda:	6863      	ldr	r3, [r4, #4]
 8002edc:	42bb      	cmp	r3, r7
 8002ede:	f200 8225 	bhi.w	800332c <HAL_PCD_IRQHandler+0x698>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	6953      	ldr	r3, [r2, #20]
 8002ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eea:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eec:	6820      	ldr	r0, [r4, #0]
 8002eee:	f002 f80b 	bl	8004f08 <USB_ReadInterrupts>
 8002ef2:	0283      	lsls	r3, r0, #10
 8002ef4:	d52d      	bpl.n	8002f52 <HAL_PCD_IRQHandler+0x2be>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef6:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8002efa:	4623      	mov	r3, r4
 8002efc:	f506 6032 	add.w	r0, r6, #2848	@ 0xb20
 8002f00:	2101      	movs	r1, #1
 8002f02:	458e      	cmp	lr, r1
 8002f04:	d920      	bls.n	8002f48 <HAL_PCD_IRQHandler+0x2b4>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f06:	f893 c2a4 	ldrb.w	ip, [r3, #676]	@ 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f0a:	6802      	ldr	r2, [r0, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f0c:	f1bc 0f01 	cmp.w	ip, #1
 8002f10:	f040 8222 	bne.w	8003358 <HAL_PCD_IRQHandler+0x6c4>
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	f280 821f 	bge.w	8003358 <HAL_PCD_IRQHandler+0x6c4>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f1a:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	@ 0x4fc
 8002f1e:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8002f22:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f26:	42ba      	cmp	r2, r7
 8002f28:	f040 8216 	bne.w	8003358 <HAL_PCD_IRQHandler+0x6c4>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f2c:	f883 c2a3 	strb.w	ip, [r3, #675]	@ 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f30:	69b2      	ldr	r2, [r6, #24]
 8002f32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f36:	61b2      	str	r2, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f38:	6972      	ldr	r2, [r6, #20]
 8002f3a:	0617      	lsls	r7, r2, #24
 8002f3c:	f100 820c 	bmi.w	8003358 <HAL_PCD_IRQHandler+0x6c4>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f40:	686b      	ldr	r3, [r5, #4]
 8002f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f46:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	6953      	ldr	r3, [r2, #20]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f50:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f52:	6820      	ldr	r0, [r4, #0]
 8002f54:	f001 ffd8 	bl	8004f08 <USB_ReadInterrupts>
 8002f58:	0041      	lsls	r1, r0, #1
 8002f5a:	d507      	bpl.n	8002f6c <HAL_PCD_IRQHandler+0x2d8>
      HAL_PCD_ConnectCallback(hpcd);
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f7fd fd31 	bl	80009c4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	6953      	ldr	r3, [r2, #20]
 8002f66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f6a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	f001 ffcb 	bl	8004f08 <USB_ReadInterrupts>
 8002f72:	0742      	lsls	r2, r0, #29
 8002f74:	d50a      	bpl.n	8002f8c <HAL_PCD_IRQHandler+0x2f8>
      RegVal = hpcd->Instance->GOTGINT;
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f7a:	076b      	lsls	r3, r5, #29
 8002f7c:	d502      	bpl.n	8002f84 <HAL_PCD_IRQHandler+0x2f0>
        HAL_PCD_DisconnectCallback(hpcd);
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f7fd fd24 	bl	80009cc <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	6853      	ldr	r3, [r2, #4]
 8002f88:	432b      	orrs	r3, r5
 8002f8a:	6053      	str	r3, [r2, #4]
}
 8002f8c:	b009      	add	sp, #36	@ 0x24
 8002f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	f47f aecf 	bne.w	8002d36 <HAL_PCD_IRQHandler+0xa2>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f98:	2208      	movs	r2, #8
 8002f9a:	f204 41c4 	addw	r1, r4, #1220	@ 0x4c4
 8002f9e:	4630      	mov	r0, r6
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa0:	f3c8 180a 	ubfx	r8, r8, #4, #11
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fa4:	f001 ff10 	bl	8004dc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa8:	2324      	movs	r3, #36	@ 0x24
 8002faa:	fb03 4707 	mla	r7, r3, r7, r4
 8002fae:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8002fb2:	4443      	add	r3, r8
 8002fb4:	e6bd      	b.n	8002d32 <HAL_PCD_IRQHandler+0x9e>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fb6:	f506 6830 	add.w	r8, r6, #2816	@ 0xb00
 8002fba:	46a2      	mov	sl, r4
      epnum = 0U;
 8002fbc:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fbe:	6820      	ldr	r0, [r4, #0]
 8002fc0:	f001 ffa6 	bl	8004f10 <USB_ReadDevAllOutEpInterrupt>
 8002fc4:	9004      	str	r0, [sp, #16]
      while (ep_intr != 0U)
 8002fc6:	9b04      	ldr	r3, [sp, #16]
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fc8:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f43f aebe 	beq.w	8002d4c <HAL_PCD_IRQHandler+0xb8>
        if ((ep_intr & 0x1U) != 0U)
 8002fd0:	9b04      	ldr	r3, [sp, #16]
 8002fd2:	07db      	lsls	r3, r3, #31
 8002fd4:	d575      	bpl.n	80030c2 <HAL_PCD_IRQHandler+0x42e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fd6:	fa5f fb87 	uxtb.w	fp, r7
 8002fda:	4659      	mov	r1, fp
 8002fdc:	f001 ffa8 	bl	8004f30 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fe0:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fe4:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fe6:	d01c      	beq.n	8003022 <HAL_PCD_IRQHandler+0x38e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fe8:	2301      	movs	r3, #1
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fea:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8002fec:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fee:	f8c8 3008 	str.w	r3, [r8, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ff2:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8002ff6:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ff8:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ffc:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8003000:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8003002:	f040 808b 	bne.w	800311c <HAL_PCD_IRQHandler+0x488>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003006:	0711      	lsls	r1, r2, #28
 8003008:	d507      	bpl.n	800301a <HAL_PCD_IRQHandler+0x386>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800300a:	49a7      	ldr	r1, [pc, #668]	@ (80032a8 <HAL_PCD_IRQHandler+0x614>)
 800300c:	458c      	cmp	ip, r1
 800300e:	d908      	bls.n	8003022 <HAL_PCD_IRQHandler+0x38e>
 8003010:	0410      	lsls	r0, r2, #16
 8003012:	d506      	bpl.n	8003022 <HAL_PCD_IRQHandler+0x38e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003014:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003018:	e002      	b.n	8003020 <HAL_PCD_IRQHandler+0x38c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800301a:	0691      	lsls	r1, r2, #26
 800301c:	d55a      	bpl.n	80030d4 <HAL_PCD_IRQHandler+0x440>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800301e:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003020:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003022:	f019 0f08 	tst.w	r9, #8
 8003026:	d021      	beq.n	800306c <HAL_PCD_IRQHandler+0x3d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003028:	2308      	movs	r3, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302a:	499f      	ldr	r1, [pc, #636]	@ (80032a8 <HAL_PCD_IRQHandler+0x614>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800302c:	f8c8 3008 	str.w	r3, [r8, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003030:	6823      	ldr	r3, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003038:	428a      	cmp	r2, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800303a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 800303e:	6898      	ldr	r0, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003040:	d904      	bls.n	800304c <HAL_PCD_IRQHandler+0x3b8>
 8003042:	0401      	lsls	r1, r0, #16
 8003044:	d502      	bpl.n	800304c <HAL_PCD_IRQHandler+0x3b8>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003046:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800304a:	6098      	str	r0, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800304c:	4620      	mov	r0, r4
 800304e:	9205      	str	r2, [sp, #20]
 8003050:	f7fd fc7c 	bl	800094c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003054:	9a05      	ldr	r2, [sp, #20]
 8003056:	4994      	ldr	r1, [pc, #592]	@ (80032a8 <HAL_PCD_IRQHandler+0x614>)
 8003058:	428a      	cmp	r2, r1
 800305a:	d907      	bls.n	800306c <HAL_PCD_IRQHandler+0x3d8>
 800305c:	6921      	ldr	r1, [r4, #16]
 800305e:	2901      	cmp	r1, #1
 8003060:	d104      	bne.n	800306c <HAL_PCD_IRQHandler+0x3d8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003062:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8003066:	6820      	ldr	r0, [r4, #0]
 8003068:	f001 ff90 	bl	8004f8c <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800306c:	f019 0f10 	tst.w	r9, #16
 8003070:	d002      	beq.n	8003078 <HAL_PCD_IRQHandler+0x3e4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003072:	2310      	movs	r3, #16
 8003074:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003078:	f019 0f02 	tst.w	r9, #2
 800307c:	d014      	beq.n	80030a8 <HAL_PCD_IRQHandler+0x414>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800307e:	6973      	ldr	r3, [r6, #20]
 8003080:	061a      	lsls	r2, r3, #24
 8003082:	d503      	bpl.n	800308c <HAL_PCD_IRQHandler+0x3f8>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003084:	686b      	ldr	r3, [r5, #4]
 8003086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800308a:	606b      	str	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
 800308c:	f89a 327f 	ldrb.w	r3, [sl, #639]	@ 0x27f
 8003090:	2b01      	cmp	r3, #1
 8003092:	d106      	bne.n	80030a2 <HAL_PCD_IRQHandler+0x40e>
              ep->is_iso_incomplete = 0U;
 8003094:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003096:	4659      	mov	r1, fp
 8003098:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 800309a:	f88a 327f 	strb.w	r3, [sl, #639]	@ 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800309e:	f7fd fc89 	bl	80009b4 <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80030a2:	2302      	movs	r3, #2
 80030a4:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030a8:	f019 0f20 	tst.w	r9, #32
 80030ac:	d002      	beq.n	80030b4 <HAL_PCD_IRQHandler+0x420>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030ae:	2320      	movs	r3, #32
 80030b0:	f8c8 3008 	str.w	r3, [r8, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030b4:	f419 5f00 	tst.w	r9, #8192	@ 0x2000
 80030b8:	d003      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x42e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030be:	f8c8 3008 	str.w	r3, [r8, #8]
        ep_intr >>= 1U;
 80030c2:	9b04      	ldr	r3, [sp, #16]
        epnum++;
 80030c4:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 80030c6:	f108 0820 	add.w	r8, r8, #32
 80030ca:	f10a 0a24 	add.w	sl, sl, #36	@ 0x24
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	9304      	str	r3, [sp, #16]
 80030d2:	e778      	b.n	8002fc6 <HAL_PCD_IRQHandler+0x332>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030d4:	f012 0f28 	tst.w	r2, #40	@ 0x28
 80030d8:	d1a3      	bne.n	8003022 <HAL_PCD_IRQHandler+0x38e>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030da:	4973      	ldr	r1, [pc, #460]	@ (80032a8 <HAL_PCD_IRQHandler+0x614>)
 80030dc:	458c      	cmp	ip, r1
 80030de:	d901      	bls.n	80030e4 <HAL_PCD_IRQHandler+0x450>
 80030e0:	0412      	lsls	r2, r2, #16
 80030e2:	d497      	bmi.n	8003014 <HAL_PCD_IRQHandler+0x380>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	f8da 3298 	ldr.w	r3, [sl, #664]	@ 0x298
 80030ea:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	f8ca 329c 	str.w	r3, [sl, #668]	@ 0x29c
        if (epnum == 0U)
 80030f4:	b96f      	cbnz	r7, 8003112 <HAL_PCD_IRQHandler+0x47e>
          if (ep->xfer_len == 0U)
 80030f6:	f8d4 2294 	ldr.w	r2, [r4, #660]	@ 0x294
 80030fa:	b92a      	cbnz	r2, 8003108 <HAL_PCD_IRQHandler+0x474>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030fc:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8003100:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003102:	f001 ff43 	bl	8004f8c <USB_EP0_OutStart>
 8003106:	e004      	b.n	8003112 <HAL_PCD_IRQHandler+0x47e>
            ep->xfer_buff += ep->xfer_count;
 8003108:	f8d4 228c 	ldr.w	r2, [r4, #652]	@ 0x28c
 800310c:	441a      	add	r2, r3
 800310e:	f8c4 228c 	str.w	r2, [r4, #652]	@ 0x28c
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003112:	4659      	mov	r1, fp
 8003114:	4620      	mov	r0, r4
 8003116:	f7fd fc1f 	bl	8000958 <HAL_PCD_DataOutStageCallback>
 800311a:	e782      	b.n	8003022 <HAL_PCD_IRQHandler+0x38e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800311c:	4963      	ldr	r1, [pc, #396]	@ (80032ac <HAL_PCD_IRQHandler+0x618>)
 800311e:	458c      	cmp	ip, r1
 8003120:	d107      	bne.n	8003132 <HAL_PCD_IRQHandler+0x49e>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003122:	0411      	lsls	r1, r2, #16
 8003124:	f53f af76 	bmi.w	8003014 <HAL_PCD_IRQHandler+0x380>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003128:	0690      	lsls	r0, r2, #26
 800312a:	d5f2      	bpl.n	8003112 <HAL_PCD_IRQHandler+0x47e>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800312c:	2220      	movs	r2, #32
 800312e:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003130:	e7ef      	b.n	8003112 <HAL_PCD_IRQHandler+0x47e>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003132:	2f00      	cmp	r7, #0
 8003134:	d1ed      	bne.n	8003112 <HAL_PCD_IRQHandler+0x47e>
 8003136:	f8d4 3294 	ldr.w	r3, [r4, #660]	@ 0x294
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e9      	bne.n	8003112 <HAL_PCD_IRQHandler+0x47e>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800313e:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8003142:	4639      	mov	r1, r7
 8003144:	e7dd      	b.n	8003102 <HAL_PCD_IRQHandler+0x46e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003146:	9b04      	ldr	r3, [sp, #16]
 8003148:	07db      	lsls	r3, r3, #31
 800314a:	f140 809b 	bpl.w	8003284 <HAL_PCD_IRQHandler+0x5f0>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800314e:	fa5f f38a 	uxtb.w	r3, sl
 8003152:	4619      	mov	r1, r3
 8003154:	9305      	str	r3, [sp, #20]
 8003156:	f001 fef4 	bl	8004f42 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800315a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800315e:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003160:	d01f      	beq.n	80031a2 <HAL_PCD_IRQHandler+0x50e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003162:	2101      	movs	r1, #1
 8003164:	f00a 020f 	and.w	r2, sl, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003168:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800316a:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800316e:	ea23 0302 	bic.w	r3, r3, r2
 8003172:	636b      	str	r3, [r5, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003174:	f8cb 1008 	str.w	r1, [fp, #8]
            if (hpcd->Init.dma_enable == 1U)
 8003178:	6921      	ldr	r1, [r4, #16]
 800317a:	2901      	cmp	r1, #1
 800317c:	d10d      	bne.n	800319a <HAL_PCD_IRQHandler+0x506>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800317e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003182:	4413      	add	r3, r2
 8003184:	64fb      	str	r3, [r7, #76]	@ 0x4c
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003186:	f1ba 0f00 	cmp.w	sl, #0
 800318a:	d106      	bne.n	800319a <HAL_PCD_IRQHandler+0x506>
 800318c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800318e:	b923      	cbnz	r3, 800319a <HAL_PCD_IRQHandler+0x506>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003190:	f204 42c4 	addw	r2, r4, #1220	@ 0x4c4
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	f001 fef9 	bl	8004f8c <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800319a:	9905      	ldr	r1, [sp, #20]
 800319c:	4620      	mov	r0, r4
 800319e:	f7fd fbe4 	bl	800096a <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031a2:	f018 0f08 	tst.w	r8, #8
 80031a6:	d002      	beq.n	80031ae <HAL_PCD_IRQHandler+0x51a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031a8:	2308      	movs	r3, #8
 80031aa:	f8cb 3008 	str.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031ae:	f018 0f10 	tst.w	r8, #16
 80031b2:	d002      	beq.n	80031ba <HAL_PCD_IRQHandler+0x526>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031b4:	2310      	movs	r3, #16
 80031b6:	f8cb 3008 	str.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031ba:	f018 0f40 	tst.w	r8, #64	@ 0x40
 80031be:	d002      	beq.n	80031c6 <HAL_PCD_IRQHandler+0x532>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031c0:	2340      	movs	r3, #64	@ 0x40
 80031c2:	f8cb 3008 	str.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031c6:	f018 0f02 	tst.w	r8, #2
 80031ca:	d011      	beq.n	80031f0 <HAL_PCD_IRQHandler+0x55c>
            (void)USB_FlushTxFifo(USBx, epnum);
 80031cc:	4651      	mov	r1, sl
 80031ce:	4630      	mov	r0, r6
 80031d0:	f001 fa96 	bl	8004700 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80031d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d106      	bne.n	80031ea <HAL_PCD_IRQHandler+0x556>
              ep->is_iso_incomplete = 0U;
 80031dc:	2300      	movs	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031de:	9905      	ldr	r1, [sp, #20]
 80031e0:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 80031e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031e6:	f7fd fbe9 	bl	80009bc <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031ea:	2302      	movs	r3, #2
 80031ec:	f8cb 3008 	str.w	r3, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f0:	6823      	ldr	r3, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031f2:	f018 0f80 	tst.w	r8, #128	@ 0x80
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f6:	9306      	str	r3, [sp, #24]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031f8:	d044      	beq.n	8003284 <HAL_PCD_IRQHandler+0x5f0>
  if (ep->xfer_count > ep->xfer_len)
 80031fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80031fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fe:	429a      	cmp	r2, r3
 8003200:	d840      	bhi.n	8003284 <HAL_PCD_IRQHandler+0x5f0>
  len = ep->xfer_len - ep->xfer_count;
 8003202:	eba3 0802 	sub.w	r8, r3, r2
  len32b = (len + 3U) / 4U;
 8003206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003208:	4598      	cmp	r8, r3
 800320a:	bf28      	it	cs
 800320c:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800320e:	9b06      	ldr	r3, [sp, #24]
  len32b = (len + 3U) / 4U;
 8003210:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
  len32b = (len + 3U) / 4U;
 8003218:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800321c:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8003220:	9307      	str	r3, [sp, #28]
 8003222:	9b07      	ldr	r3, [sp, #28]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003224:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003226:	6999      	ldr	r1, [r3, #24]
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800322a:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800322c:	4541      	cmp	r1, r8
 800322e:	d327      	bcc.n	8003280 <HAL_PCD_IRQHandler+0x5ec>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003230:	4293      	cmp	r3, r2
 8003232:	d80b      	bhi.n	800324c <HAL_PCD_IRQHandler+0x5b8>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003234:	9b06      	ldr	r3, [sp, #24]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003236:	f00a 000f 	and.w	r0, sl, #15
 800323a:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800323c:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003240:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003242:	ea22 0201 	bic.w	r2, r2, r1
 8003246:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
 800324a:	e01b      	b.n	8003284 <HAL_PCD_IRQHandler+0x5f0>
    len = ep->xfer_len - ep->xfer_count;
 800324c:	eba3 0902 	sub.w	r9, r3, r2
 8003250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003252:	9a05      	ldr	r2, [sp, #20]
 8003254:	4599      	cmp	r9, r3
 8003256:	9806      	ldr	r0, [sp, #24]
 8003258:	bf28      	it	cs
 800325a:	4699      	movcs	r9, r3
 800325c:	7c23      	ldrb	r3, [r4, #16]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	fa1f f389 	uxth.w	r3, r9
 8003264:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
    len32b = (len + 3U) / 4U;
 8003266:	f109 0803 	add.w	r8, r9, #3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800326a:	f001 fcb1 	bl	8004bd0 <USB_WritePacket>
    ep->xfer_buff  += len;
 800326e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    len32b = (len + 3U) / 4U;
 8003270:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_buff  += len;
 8003274:	444b      	add	r3, r9
 8003276:	64fb      	str	r3, [r7, #76]	@ 0x4c
    ep->xfer_count += len;
 8003278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800327a:	444b      	add	r3, r9
 800327c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800327e:	e7d0      	b.n	8003222 <HAL_PCD_IRQHandler+0x58e>
  if (ep->xfer_len <= ep->xfer_count)
 8003280:	4293      	cmp	r3, r2
 8003282:	d9d7      	bls.n	8003234 <HAL_PCD_IRQHandler+0x5a0>
        ep_intr >>= 1U;
 8003284:	9b04      	ldr	r3, [sp, #16]
        epnum++;
 8003286:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 800328a:	3724      	adds	r7, #36	@ 0x24
 800328c:	f10b 0b20 	add.w	fp, fp, #32
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	9304      	str	r3, [sp, #16]
 8003294:	e568      	b.n	8002d68 <HAL_PCD_IRQHandler+0xd4>
        HAL_PCD_ResumeCallback(hpcd);
 8003296:	4620      	mov	r0, r4
 8003298:	f7fd fb88 	bl	80009ac <HAL_PCD_ResumeCallback>
 800329c:	e57d      	b.n	8002d9a <HAL_PCD_IRQHandler+0x106>
        HAL_PCD_SuspendCallback(hpcd);
 800329e:	4620      	mov	r0, r4
 80032a0:	f7fd fb80 	bl	80009a4 <HAL_PCD_SuspendCallback>
 80032a4:	e5a8      	b.n	8002df8 <HAL_PCD_IRQHandler+0x164>
 80032a6:	bf00      	nop
 80032a8:	4f54300a 	.word	0x4f54300a
 80032ac:	4f54310a 	.word	0x4f54310a
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032b0:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032b2:	3320      	adds	r3, #32
 80032b4:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80032b8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80032bc:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032c0:	f8c3 11e8 	str.w	r1, [r3, #488]	@ 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032c4:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 80032c8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80032cc:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032d0:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 80032d4:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80032d8:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032dc:	9a03      	ldr	r2, [sp, #12]
 80032de:	3201      	adds	r2, #1
 80032e0:	9203      	str	r2, [sp, #12]
 80032e2:	e59a      	b.n	8002e1a <HAL_PCD_IRQHandler+0x186>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032e4:	696b      	ldr	r3, [r5, #20]
 80032e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032ea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80032ee:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032f0:	692b      	ldr	r3, [r5, #16]
 80032f2:	f043 030b 	orr.w	r3, r3, #11
 80032f6:	612b      	str	r3, [r5, #16]
 80032f8:	e5a6      	b.n	8002e48 <HAL_PCD_IRQHandler+0x1b4>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032fa:	69b3      	ldr	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fc:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032fe:	f204 287f 	addw	r8, r4, #639	@ 0x27f
 8003302:	f04f 0924 	mov.w	r9, #36	@ 0x24
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800330a:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800330c:	6863      	ldr	r3, [r4, #4]
 800330e:	42bb      	cmp	r3, r7
 8003310:	f67f adda 	bls.w	8002ec8 <HAL_PCD_IRQHandler+0x234>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003314:	fb09 f307 	mul.w	r3, r9, r7
 8003318:	f818 3003 	ldrb.w	r3, [r8, r3]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d103      	bne.n	8003328 <HAL_PCD_IRQHandler+0x694>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003320:	b2f9      	uxtb	r1, r7
 8003322:	4620      	mov	r0, r4
 8003324:	f7ff fca5 	bl	8002c72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003328:	3701      	adds	r7, #1
 800332a:	e7ef      	b.n	800330c <HAL_PCD_IRQHandler+0x678>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800332c:	f898 3064 	ldrb.w	r3, [r8, #100]	@ 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003330:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003334:	2b01      	cmp	r3, #1
 8003336:	d109      	bne.n	800334c <HAL_PCD_IRQHandler+0x6b8>
 8003338:	2a00      	cmp	r2, #0
 800333a:	da07      	bge.n	800334c <HAL_PCD_IRQHandler+0x6b8>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800333c:	f067 017f 	orn	r1, r7, #127	@ 0x7f
 8003340:	4620      	mov	r0, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003342:	f888 3063 	strb.w	r3, [r8, #99]	@ 0x63
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003346:	b2c9      	uxtb	r1, r1
 8003348:	f7ff fc93 	bl	8002c72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800334c:	3701      	adds	r7, #1
 800334e:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 8003352:	f109 0920 	add.w	r9, r9, #32
 8003356:	e5c0      	b.n	8002eda <HAL_PCD_IRQHandler+0x246>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003358:	3101      	adds	r1, #1
 800335a:	3324      	adds	r3, #36	@ 0x24
 800335c:	3020      	adds	r0, #32
 800335e:	e5d0      	b.n	8002f02 <HAL_PCD_IRQHandler+0x26e>

08003360 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003360:	6803      	ldr	r3, [r0, #0]

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003362:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003364:	6a58      	ldr	r0, [r3, #36]	@ 0x24
{
 8003366:	b570      	push	{r4, r5, r6, lr}
  if (fifo == 0U)
 8003368:	b919      	cbnz	r1, 8003372 <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800336a:	4302      	orrs	r2, r0
 800336c:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800336e:	2000      	movs	r0, #0
 8003370:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003372:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003374:	1e4e      	subs	r6, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003376:	eb00 4014 	add.w	r0, r0, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800337a:	2400      	movs	r4, #0
 800337c:	42b4      	cmp	r4, r6
 800337e:	d305      	bcc.n	800338c <HAL_PCDEx_SetTxFiFo+0x2c>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003380:	313f      	adds	r1, #63	@ 0x3f
 8003382:	4302      	orrs	r2, r0
 8003384:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	e7f0      	b.n	800336e <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800338c:	f104 0540 	add.w	r5, r4, #64	@ 0x40
 8003390:	3401      	adds	r4, #1
 8003392:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003396:	686d      	ldr	r5, [r5, #4]
 8003398:	eb00 4015 	add.w	r0, r0, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800339c:	e7ee      	b.n	800337c <HAL_PCDEx_SetTxFiFo+0x1c>

0800339e <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800339e:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80033a0:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80033a2:	6259      	str	r1, [r3, #36]	@ 0x24
}
 80033a4:	4770      	bx	lr

080033a6 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 80033a6:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a8:	6802      	ldr	r2, [r0, #0]
{
 80033aa:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 80033ac:	f8c0 1500 	str.w	r1, [r0, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80033b0:	2000      	movs	r0, #0
 80033b2:	f883 04f4 	strb.w	r0, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033b6:	6993      	ldr	r3, [r2, #24]
 80033b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033bc:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033be:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	f043 0303 	orr.w	r3, r3, #3
 80033c8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 80033ca:	4770      	bx	lr

080033cc <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80033d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033d6:	4c19      	ldr	r4, [pc, #100]	@ (800343c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80033dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ee:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f0:	f7fe fb7c 	bl	8001aec <HAL_GetTick>
 80033f4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033f6:	6863      	ldr	r3, [r4, #4]
 80033f8:	03da      	lsls	r2, r3, #15
 80033fa:	d50c      	bpl.n	8003416 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033fc:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033fe:	4d0f      	ldr	r5, [pc, #60]	@ (800343c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003404:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003406:	f7fe fb71 	bl	8001aec <HAL_GetTick>
 800340a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800340c:	686b      	ldr	r3, [r5, #4]
 800340e:	039b      	lsls	r3, r3, #14
 8003410:	d50a      	bpl.n	8003428 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003412:	2000      	movs	r0, #0
 8003414:	e006      	b.n	8003424 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003416:	f7fe fb69 	bl	8001aec <HAL_GetTick>
 800341a:	1b40      	subs	r0, r0, r5
 800341c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003420:	d9e9      	bls.n	80033f6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8003422:	2003      	movs	r0, #3
}
 8003424:	b003      	add	sp, #12
 8003426:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003428:	f7fe fb60 	bl	8001aec <HAL_GetTick>
 800342c:	1b00      	subs	r0, r0, r4
 800342e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003432:	d9eb      	bls.n	800340c <HAL_PWREx_EnableOverDrive+0x3c>
 8003434:	e7f5      	b.n	8003422 <HAL_PWREx_EnableOverDrive+0x52>
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000

08003440 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003444:	4604      	mov	r4, r0
 8003446:	b340      	cbz	r0, 800349a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003448:	6803      	ldr	r3, [r0, #0]
 800344a:	07de      	lsls	r6, r3, #31
 800344c:	d410      	bmi.n	8003470 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	079d      	lsls	r5, r3, #30
 8003452:	d461      	bmi.n	8003518 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	0719      	lsls	r1, r3, #28
 8003458:	f100 80a6 	bmi.w	80035a8 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	075a      	lsls	r2, r3, #29
 8003460:	f100 80c7 	bmi.w	80035f2 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003464:	69a2      	ldr	r2, [r4, #24]
 8003466:	2a00      	cmp	r2, #0
 8003468:	f040 8130 	bne.w	80036cc <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800346c:	2000      	movs	r0, #0
 800346e:	e02c      	b.n	80034ca <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003470:	4b94      	ldr	r3, [pc, #592]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	f002 020c 	and.w	r2, r2, #12
 8003478:	2a04      	cmp	r2, #4
 800347a:	d007      	beq.n	800348c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	f002 020c 	and.w	r2, r2, #12
 8003482:	2a08      	cmp	r2, #8
 8003484:	d10b      	bne.n	800349e <HAL_RCC_OscConfig+0x5e>
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0259      	lsls	r1, r3, #9
 800348a:	d508      	bpl.n	800349e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	4b8d      	ldr	r3, [pc, #564]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	039a      	lsls	r2, r3, #14
 8003492:	d5dc      	bpl.n	800344e <HAL_RCC_OscConfig+0xe>
 8003494:	6863      	ldr	r3, [r4, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1d9      	bne.n	800344e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800349a:	2001      	movs	r0, #1
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349e:	6863      	ldr	r3, [r4, #4]
 80034a0:	4d88      	ldr	r5, [pc, #544]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 80034a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a6:	d113      	bne.n	80034d0 <HAL_RCC_OscConfig+0x90>
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034b0:	f7fe fb1c 	bl	8001aec <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b4:	4e83      	ldr	r6, [pc, #524]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 80034b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b8:	6833      	ldr	r3, [r6, #0]
 80034ba:	039b      	lsls	r3, r3, #14
 80034bc:	d4c7      	bmi.n	800344e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034be:	f7fe fb15 	bl	8001aec <HAL_GetTick>
 80034c2:	1b40      	subs	r0, r0, r5
 80034c4:	2864      	cmp	r0, #100	@ 0x64
 80034c6:	d9f7      	bls.n	80034b8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80034c8:	2003      	movs	r0, #3
}
 80034ca:	b002      	add	sp, #8
 80034cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d0:	b99b      	cbnz	r3, 80034fa <HAL_RCC_OscConfig+0xba>
 80034d2:	682b      	ldr	r3, [r5, #0]
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d8:	602b      	str	r3, [r5, #0]
 80034da:	682b      	ldr	r3, [r5, #0]
 80034dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034e2:	f7fe fb03 	bl	8001aec <HAL_GetTick>
 80034e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	039f      	lsls	r7, r3, #14
 80034ec:	d5af      	bpl.n	800344e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ee:	f7fe fafd 	bl	8001aec <HAL_GetTick>
 80034f2:	1b80      	subs	r0, r0, r6
 80034f4:	2864      	cmp	r0, #100	@ 0x64
 80034f6:	d9f7      	bls.n	80034e8 <HAL_RCC_OscConfig+0xa8>
 80034f8:	e7e6      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034fe:	682b      	ldr	r3, [r5, #0]
 8003500:	d103      	bne.n	800350a <HAL_RCC_OscConfig+0xca>
 8003502:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	e7ce      	b.n	80034a8 <HAL_RCC_OscConfig+0x68>
 800350a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800350e:	602b      	str	r3, [r5, #0]
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003516:	e7ca      	b.n	80034ae <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003518:	4b6a      	ldr	r3, [pc, #424]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	f012 0f0c 	tst.w	r2, #12
 8003520:	d007      	beq.n	8003532 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	f002 020c 	and.w	r2, r2, #12
 8003528:	2a08      	cmp	r2, #8
 800352a:	d111      	bne.n	8003550 <HAL_RCC_OscConfig+0x110>
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	025d      	lsls	r5, r3, #9
 8003530:	d40e      	bmi.n	8003550 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	4a64      	ldr	r2, [pc, #400]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 8003534:	6813      	ldr	r3, [r2, #0]
 8003536:	0799      	lsls	r1, r3, #30
 8003538:	d502      	bpl.n	8003540 <HAL_RCC_OscConfig+0x100>
 800353a:	68e3      	ldr	r3, [r4, #12]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d1ac      	bne.n	800349a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003540:	6813      	ldr	r3, [r2, #0]
 8003542:	6921      	ldr	r1, [r4, #16]
 8003544:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003548:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800354c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	e781      	b.n	8003454 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003550:	68e3      	ldr	r3, [r4, #12]
 8003552:	4d5c      	ldr	r5, [pc, #368]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 8003554:	b1bb      	cbz	r3, 8003586 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8003556:	682b      	ldr	r3, [r5, #0]
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800355e:	f7fe fac5 	bl	8001aec <HAL_GetTick>
 8003562:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	079b      	lsls	r3, r3, #30
 8003568:	d507      	bpl.n	800357a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356a:	682b      	ldr	r3, [r5, #0]
 800356c:	6922      	ldr	r2, [r4, #16]
 800356e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003572:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003576:	602b      	str	r3, [r5, #0]
 8003578:	e76c      	b.n	8003454 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357a:	f7fe fab7 	bl	8001aec <HAL_GetTick>
 800357e:	1b80      	subs	r0, r0, r6
 8003580:	2802      	cmp	r0, #2
 8003582:	d9ef      	bls.n	8003564 <HAL_RCC_OscConfig+0x124>
 8003584:	e7a0      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8003586:	682b      	ldr	r3, [r5, #0]
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800358e:	f7fe faad 	bl	8001aec <HAL_GetTick>
 8003592:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	079f      	lsls	r7, r3, #30
 8003598:	f57f af5c 	bpl.w	8003454 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359c:	f7fe faa6 	bl	8001aec <HAL_GetTick>
 80035a0:	1b80      	subs	r0, r0, r6
 80035a2:	2802      	cmp	r0, #2
 80035a4:	d9f6      	bls.n	8003594 <HAL_RCC_OscConfig+0x154>
 80035a6:	e78f      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035a8:	6963      	ldr	r3, [r4, #20]
 80035aa:	4d46      	ldr	r5, [pc, #280]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 80035ac:	b183      	cbz	r3, 80035d0 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 80035ae:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80035b6:	f7fe fa99 	bl	8001aec <HAL_GetTick>
 80035ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035bc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80035be:	079b      	lsls	r3, r3, #30
 80035c0:	f53f af4c 	bmi.w	800345c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fe fa92 	bl	8001aec <HAL_GetTick>
 80035c8:	1b80      	subs	r0, r0, r6
 80035ca:	2802      	cmp	r0, #2
 80035cc:	d9f6      	bls.n	80035bc <HAL_RCC_OscConfig+0x17c>
 80035ce:	e77b      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80035d0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80035d8:	f7fe fa88 	bl	8001aec <HAL_GetTick>
 80035dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035de:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80035e0:	079f      	lsls	r7, r3, #30
 80035e2:	f57f af3b 	bpl.w	800345c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fe fa81 	bl	8001aec <HAL_GetTick>
 80035ea:	1b80      	subs	r0, r0, r6
 80035ec:	2802      	cmp	r0, #2
 80035ee:	d9f6      	bls.n	80035de <HAL_RCC_OscConfig+0x19e>
 80035f0:	e76a      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b34      	ldr	r3, [pc, #208]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 80035f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035f6:	00d5      	lsls	r5, r2, #3
 80035f8:	d427      	bmi.n	800364a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 80035fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360e:	4d2e      	ldr	r5, [pc, #184]	@ (80036c8 <HAL_RCC_OscConfig+0x288>)
 8003610:	682b      	ldr	r3, [r5, #0]
 8003612:	05d8      	lsls	r0, r3, #23
 8003614:	d51b      	bpl.n	800364e <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003616:	68a3      	ldr	r3, [r4, #8]
 8003618:	4d2a      	ldr	r5, [pc, #168]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 800361a:	2b01      	cmp	r3, #1
 800361c:	d127      	bne.n	800366e <HAL_RCC_OscConfig+0x22e>
 800361e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800362a:	f7fe fa5f 	bl	8001aec <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	4e25      	ldr	r6, [pc, #148]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8003630:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003634:	079a      	lsls	r2, r3, #30
 8003636:	d53f      	bpl.n	80036b8 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8003638:	2f00      	cmp	r7, #0
 800363a:	f43f af13 	beq.w	8003464 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4a21      	ldr	r2, [pc, #132]	@ (80036c4 <HAL_RCC_OscConfig+0x284>)
 8003640:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003646:	6413      	str	r3, [r2, #64]	@ 0x40
 8003648:	e70c      	b.n	8003464 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800364a:	2700      	movs	r7, #0
 800364c:	e7df      	b.n	800360e <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800364e:	682b      	ldr	r3, [r5, #0]
 8003650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003654:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003656:	f7fe fa49 	bl	8001aec <HAL_GetTick>
 800365a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	05d9      	lsls	r1, r3, #23
 8003660:	d4d9      	bmi.n	8003616 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fe fa43 	bl	8001aec <HAL_GetTick>
 8003666:	1b80      	subs	r0, r0, r6
 8003668:	2864      	cmp	r0, #100	@ 0x64
 800366a:	d9f7      	bls.n	800365c <HAL_RCC_OscConfig+0x21c>
 800366c:	e72c      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366e:	b9ab      	cbnz	r3, 800369c <HAL_RCC_OscConfig+0x25c>
 8003670:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	672b      	str	r3, [r5, #112]	@ 0x70
 800367c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800367e:	f023 0304 	bic.w	r3, r3, #4
 8003682:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003684:	f7fe fa32 	bl	8001aec <HAL_GetTick>
 8003688:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800368c:	079b      	lsls	r3, r3, #30
 800368e:	d5d3      	bpl.n	8003638 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fe fa2c 	bl	8001aec <HAL_GetTick>
 8003694:	1b80      	subs	r0, r0, r6
 8003696:	4540      	cmp	r0, r8
 8003698:	d9f7      	bls.n	800368a <HAL_RCC_OscConfig+0x24a>
 800369a:	e715      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369c:	2b05      	cmp	r3, #5
 800369e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80036a0:	d103      	bne.n	80036aa <HAL_RCC_OscConfig+0x26a>
 80036a2:	f043 0304 	orr.w	r3, r3, #4
 80036a6:	672b      	str	r3, [r5, #112]	@ 0x70
 80036a8:	e7b9      	b.n	800361e <HAL_RCC_OscConfig+0x1de>
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	672b      	str	r3, [r5, #112]	@ 0x70
 80036b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80036b2:	f023 0304 	bic.w	r3, r3, #4
 80036b6:	e7b5      	b.n	8003624 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fe fa18 	bl	8001aec <HAL_GetTick>
 80036bc:	1b40      	subs	r0, r0, r5
 80036be:	4540      	cmp	r0, r8
 80036c0:	d9b7      	bls.n	8003632 <HAL_RCC_OscConfig+0x1f2>
 80036c2:	e701      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036cc:	4d38      	ldr	r5, [pc, #224]	@ (80037b0 <HAL_RCC_OscConfig+0x370>)
 80036ce:	68ab      	ldr	r3, [r5, #8]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d041      	beq.n	800375c <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 80036d8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036da:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80036dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e2:	d12e      	bne.n	8003742 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80036e4:	f7fe fa02 	bl	8001aec <HAL_GetTick>
 80036e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	682b      	ldr	r3, [r5, #0]
 80036ec:	0199      	lsls	r1, r3, #6
 80036ee:	d422      	bmi.n	8003736 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003700:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003702:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003706:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003708:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800370c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003710:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003712:	682b      	ldr	r3, [r5, #0]
 8003714:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003718:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800371a:	f7fe f9e7 	bl	8001aec <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371e:	4d24      	ldr	r5, [pc, #144]	@ (80037b0 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8003720:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	682b      	ldr	r3, [r5, #0]
 8003724:	019a      	lsls	r2, r3, #6
 8003726:	f53f aea1 	bmi.w	800346c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fe f9df 	bl	8001aec <HAL_GetTick>
 800372e:	1b00      	subs	r0, r0, r4
 8003730:	2802      	cmp	r0, #2
 8003732:	d9f6      	bls.n	8003722 <HAL_RCC_OscConfig+0x2e2>
 8003734:	e6c8      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003736:	f7fe f9d9 	bl	8001aec <HAL_GetTick>
 800373a:	1b80      	subs	r0, r0, r6
 800373c:	2802      	cmp	r0, #2
 800373e:	d9d4      	bls.n	80036ea <HAL_RCC_OscConfig+0x2aa>
 8003740:	e6c2      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8003742:	f7fe f9d3 	bl	8001aec <HAL_GetTick>
 8003746:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	019b      	lsls	r3, r3, #6
 800374c:	f57f ae8e 	bpl.w	800346c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe f9cc 	bl	8001aec <HAL_GetTick>
 8003754:	1b00      	subs	r0, r0, r4
 8003756:	2802      	cmp	r0, #2
 8003758:	d9f6      	bls.n	8003748 <HAL_RCC_OscConfig+0x308>
 800375a:	e6b5      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800375e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003760:	f43f ae9b 	beq.w	800349a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003764:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003768:	69e1      	ldr	r1, [r4, #28]
 800376a:	428a      	cmp	r2, r1
 800376c:	f47f ae95 	bne.w	800349a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003770:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003774:	6a21      	ldr	r1, [r4, #32]
 8003776:	428a      	cmp	r2, r1
 8003778:	f47f ae8f 	bne.w	800349a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800377c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003780:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003782:	401a      	ands	r2, r3
 8003784:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003788:	f47f ae87 	bne.w	800349a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800378c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800378e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003792:	0852      	lsrs	r2, r2, #1
 8003794:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003796:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800379a:	f47f ae7e 	bne.w	800349a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800379e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80037a0:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037a4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80037a8:	bf14      	ite	ne
 80037aa:	2001      	movne	r0, #1
 80037ac:	2000      	moveq	r0, #0
 80037ae:	e68c      	b.n	80034ca <HAL_RCC_OscConfig+0x8a>
 80037b0:	40023800 	.word	0x40023800

080037b4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b4:	4913      	ldr	r1, [pc, #76]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80037b6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b8:	688b      	ldr	r3, [r1, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d01b      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x46>
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d11b      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037c8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ca:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037d0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80037d8:	bf1a      	itte	ne
 80037da:	480b      	ldrne	r0, [pc, #44]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x54>)
 80037dc:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037de:	480b      	ldreq	r0, [pc, #44]	@ (800380c <HAL_RCC_GetSysClockFreq+0x58>)
 80037e0:	fba1 0100 	umull	r0, r1, r1, r0
 80037e4:	f7fc fd18 	bl	8000218 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x50>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80037f0:	3301      	adds	r3, #1
 80037f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80037f4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80037f8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037fa:	4803      	ldr	r0, [pc, #12]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x54>)
 80037fc:	e7fc      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80037fe:	4803      	ldr	r0, [pc, #12]	@ (800380c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003800:	e7fa      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x44>
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	017d7840 	.word	0x017d7840
 800380c:	00f42400 	.word	0x00f42400

08003810 <HAL_RCC_ClockConfig>:
{
 8003810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003814:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003816:	4604      	mov	r4, r0
 8003818:	b910      	cbnz	r0, 8003820 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800381a:	2001      	movs	r0, #1
}
 800381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4a45      	ldr	r2, [pc, #276]	@ (8003938 <HAL_RCC_ClockConfig+0x128>)
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	428b      	cmp	r3, r1
 800382a:	d328      	bcc.n	800387e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	6821      	ldr	r1, [r4, #0]
 800382e:	078f      	lsls	r7, r1, #30
 8003830:	d430      	bmi.n	8003894 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	07c8      	lsls	r0, r1, #31
 8003834:	d443      	bmi.n	80038be <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003836:	4a40      	ldr	r2, [pc, #256]	@ (8003938 <HAL_RCC_ClockConfig+0x128>)
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	42ab      	cmp	r3, r5
 8003840:	d866      	bhi.n	8003910 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	0751      	lsls	r1, r2, #29
 8003846:	d46f      	bmi.n	8003928 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	0713      	lsls	r3, r2, #28
 800384a:	d507      	bpl.n	800385c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800384c:	4a3b      	ldr	r2, [pc, #236]	@ (800393c <HAL_RCC_ClockConfig+0x12c>)
 800384e:	6921      	ldr	r1, [r4, #16]
 8003850:	6893      	ldr	r3, [r2, #8]
 8003852:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003856:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800385a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800385c:	f7ff ffaa 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003860:	4b36      	ldr	r3, [pc, #216]	@ (800393c <HAL_RCC_ClockConfig+0x12c>)
 8003862:	4a37      	ldr	r2, [pc, #220]	@ (8003940 <HAL_RCC_ClockConfig+0x130>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	40d8      	lsrs	r0, r3
 800386e:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <HAL_RCC_ClockConfig+0x134>)
 8003870:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003872:	4b35      	ldr	r3, [pc, #212]	@ (8003948 <HAL_RCC_ClockConfig+0x138>)
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	f7fe f8f5 	bl	8001a64 <HAL_InitTick>
  return HAL_OK;
 800387a:	2000      	movs	r0, #0
 800387c:	e7ce      	b.n	800381c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	f023 030f 	bic.w	r3, r3, #15
 8003884:	430b      	orrs	r3, r1
 8003886:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003888:	6813      	ldr	r3, [r2, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	428b      	cmp	r3, r1
 8003890:	d1c3      	bne.n	800381a <HAL_RCC_ClockConfig+0xa>
 8003892:	e7cb      	b.n	800382c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	f011 0f04 	tst.w	r1, #4
 8003898:	4b28      	ldr	r3, [pc, #160]	@ (800393c <HAL_RCC_ClockConfig+0x12c>)
 800389a:	d003      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80038a2:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a4:	070e      	lsls	r6, r1, #28
 80038a6:	d503      	bpl.n	80038b0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80038ae:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	68a0      	ldr	r0, [r4, #8]
 80038b4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80038b8:	4302      	orrs	r2, r0
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	e7b9      	b.n	8003832 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	6861      	ldr	r1, [r4, #4]
 80038c0:	4b1e      	ldr	r3, [pc, #120]	@ (800393c <HAL_RCC_ClockConfig+0x12c>)
 80038c2:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c6:	d11b      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	d0a5      	beq.n	800381a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d0:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d4:	4f19      	ldr	r7, [pc, #100]	@ (800393c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	f022 0203 	bic.w	r2, r2, #3
 80038da:	430a      	orrs	r2, r1
 80038dc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80038de:	f7fe f905 	bl	8001aec <HAL_GetTick>
 80038e2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	6862      	ldr	r2, [r4, #4]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80038f0:	d0a1      	beq.n	8003836 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f2:	f7fe f8fb 	bl	8001aec <HAL_GetTick>
 80038f6:	1b80      	subs	r0, r0, r6
 80038f8:	4540      	cmp	r0, r8
 80038fa:	d9f3      	bls.n	80038e4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80038fc:	2003      	movs	r0, #3
 80038fe:	e78d      	b.n	800381c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003900:	2902      	cmp	r1, #2
 8003902:	d102      	bne.n	800390a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003908:	e7e0      	b.n	80038cc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390a:	f012 0f02 	tst.w	r2, #2
 800390e:	e7dd      	b.n	80038cc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003910:	6813      	ldr	r3, [r2, #0]
 8003912:	f023 030f 	bic.w	r3, r3, #15
 8003916:	432b      	orrs	r3, r5
 8003918:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	42ab      	cmp	r3, r5
 8003922:	f47f af7a 	bne.w	800381a <HAL_RCC_ClockConfig+0xa>
 8003926:	e78c      	b.n	8003842 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4904      	ldr	r1, [pc, #16]	@ (800393c <HAL_RCC_ClockConfig+0x12c>)
 800392a:	68e0      	ldr	r0, [r4, #12]
 800392c:	688b      	ldr	r3, [r1, #8]
 800392e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003932:	4303      	orrs	r3, r0
 8003934:	608b      	str	r3, [r1, #8]
 8003936:	e787      	b.n	8003848 <HAL_RCC_ClockConfig+0x38>
 8003938:	40023c00 	.word	0x40023c00
 800393c:	40023800 	.word	0x40023800
 8003940:	08005e90 	.word	0x08005e90
 8003944:	200000a0 	.word	0x200000a0
 8003948:	200000a8 	.word	0x200000a8

0800394c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800394c:	4b01      	ldr	r3, [pc, #4]	@ (8003954 <HAL_RCC_GetHCLKFreq+0x8>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	200000a0 	.word	0x200000a0

08003958 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003958:	6803      	ldr	r3, [r0, #0]
{
 800395a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800395e:	f013 0601 	ands.w	r6, r3, #1
{
 8003962:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003964:	d00b      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003966:	4aad      	ldr	r2, [pc, #692]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003968:	6891      	ldr	r1, [r2, #8]
 800396a:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 800396e:	6091      	str	r1, [r2, #8]
 8003970:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8003972:	6891      	ldr	r1, [r2, #8]
 8003974:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003976:	fab6 f686 	clz	r6, r6
 800397a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800397c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800397e:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 8003982:	d012      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003984:	49a5      	ldr	r1, [pc, #660]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003986:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8003988:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800398c:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003990:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 8003994:	bf08      	it	eq
 8003996:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003998:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800399c:	bf16      	itet	ne
 800399e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80039a2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039a4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039a6:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039aa:	02d8      	lsls	r0, r3, #11
 80039ac:	d510      	bpl.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ae:	489b      	ldr	r0, [pc, #620]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039b0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80039b2:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039b6:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ba:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80039be:	ea42 0201 	orr.w	r2, r2, r1
 80039c2:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039c6:	f000 8186 	beq.w	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80039ca:	2900      	cmp	r1, #0
 80039cc:	bf08      	it	eq
 80039ce:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80039d0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80039d4:	bf18      	it	ne
 80039d6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039d8:	0699      	lsls	r1, r3, #26
 80039da:	d532      	bpl.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	4b8f      	ldr	r3, [pc, #572]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039de:	4f90      	ldr	r7, [pc, #576]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039e2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fa:	f7fe f877 	bl	8001aec <HAL_GetTick>
 80039fe:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	05da      	lsls	r2, r3, #23
 8003a04:	f140 8169 	bpl.w	8003cda <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a08:	4f84      	ldr	r7, [pc, #528]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a0a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a0e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003a12:	f040 816d 	bne.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a18:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8003a1c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8003a20:	4a7e      	ldr	r2, [pc, #504]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a22:	f040 818a 	bne.w	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003a26:	6891      	ldr	r1, [r2, #8]
 8003a28:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8003a2c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8003a30:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8003a34:	4301      	orrs	r1, r0
 8003a36:	6091      	str	r1, [r2, #8]
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	06d9      	lsls	r1, r3, #27
 8003a46:	d50c      	bpl.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a48:	4a74      	ldr	r2, [pc, #464]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a4a:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8003a4e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8003a52:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8003a56:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8003a5a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003a5c:	4301      	orrs	r1, r0
 8003a5e:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a62:	045a      	lsls	r2, r3, #17
 8003a64:	d508      	bpl.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a66:	496d      	ldr	r1, [pc, #436]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a68:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003a6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003a6e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003a72:	4302      	orrs	r2, r0
 8003a74:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a78:	041f      	lsls	r7, r3, #16
 8003a7a:	d508      	bpl.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a7c:	4967      	ldr	r1, [pc, #412]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a7e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003a80:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003a84:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003a88:	4302      	orrs	r2, r0
 8003a8a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a8e:	03d8      	lsls	r0, r3, #15
 8003a90:	d508      	bpl.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a92:	4962      	ldr	r1, [pc, #392]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a94:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003a96:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003a9a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003a9e:	4302      	orrs	r2, r0
 8003aa0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aa4:	0399      	lsls	r1, r3, #14
 8003aa6:	d508      	bpl.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aa8:	495c      	ldr	r1, [pc, #368]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aaa:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003aac:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003ab0:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003ab4:	4302      	orrs	r2, r0
 8003ab6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aba:	065a      	lsls	r2, r3, #25
 8003abc:	d508      	bpl.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003abe:	4957      	ldr	r1, [pc, #348]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ac0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003ac2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003ac6:	f022 0203 	bic.w	r2, r2, #3
 8003aca:	4302      	orrs	r2, r0
 8003acc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad0:	061f      	lsls	r7, r3, #24
 8003ad2:	d508      	bpl.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ad4:	4951      	ldr	r1, [pc, #324]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ad6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003ad8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003adc:	f022 020c 	bic.w	r2, r2, #12
 8003ae0:	4302      	orrs	r2, r0
 8003ae2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ae6:	05d8      	lsls	r0, r3, #23
 8003ae8:	d508      	bpl.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aea:	494c      	ldr	r1, [pc, #304]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aec:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003aee:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003af2:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003af6:	4302      	orrs	r2, r0
 8003af8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003afc:	0599      	lsls	r1, r3, #22
 8003afe:	d508      	bpl.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b00:	4946      	ldr	r1, [pc, #280]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b02:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003b04:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b08:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8003b0c:	4302      	orrs	r2, r0
 8003b0e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b12:	055a      	lsls	r2, r3, #21
 8003b14:	d508      	bpl.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b16:	4941      	ldr	r1, [pc, #260]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b18:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003b1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b1e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b22:	4302      	orrs	r2, r0
 8003b24:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b28:	051f      	lsls	r7, r3, #20
 8003b2a:	d508      	bpl.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b2c:	493b      	ldr	r1, [pc, #236]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b30:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b34:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b38:	4302      	orrs	r2, r0
 8003b3a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b3e:	04d8      	lsls	r0, r3, #19
 8003b40:	d508      	bpl.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b42:	4936      	ldr	r1, [pc, #216]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b44:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003b46:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b4a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003b4e:	4302      	orrs	r2, r0
 8003b50:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b54:	0499      	lsls	r1, r3, #18
 8003b56:	d508      	bpl.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b58:	4930      	ldr	r1, [pc, #192]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b5a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003b5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b60:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003b64:	4302      	orrs	r2, r0
 8003b66:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b6a:	025a      	lsls	r2, r3, #9
 8003b6c:	d508      	bpl.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b6e:	492b      	ldr	r1, [pc, #172]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b70:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003b72:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003b76:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b80:	029f      	lsls	r7, r3, #10
 8003b82:	d50c      	bpl.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b84:	4825      	ldr	r0, [pc, #148]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b86:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003b88:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003b8c:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b90:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8003b94:	bf08      	it	eq
 8003b96:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003b9e:	f013 0f08 	tst.w	r3, #8
 8003ba2:	bf18      	it	ne
 8003ba4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ba6:	0358      	lsls	r0, r3, #13
 8003ba8:	d508      	bpl.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003baa:	491c      	ldr	r1, [pc, #112]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bac:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003bae:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003bb2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003bb6:	4302      	orrs	r2, r0
 8003bb8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bbc:	0219      	lsls	r1, r3, #8
 8003bbe:	d509      	bpl.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bc0:	4916      	ldr	r1, [pc, #88]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bc2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003bc6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8003bca:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003bce:	4302      	orrs	r2, r0
 8003bd0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bd4:	2e01      	cmp	r6, #1
 8003bd6:	f000 80b4 	beq.w	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003bda:	019a      	lsls	r2, r3, #6
 8003bdc:	f100 80b1 	bmi.w	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003be0:	2d01      	cmp	r5, #1
 8003be2:	d176      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003be4:	4d0d      	ldr	r5, [pc, #52]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003be6:	682b      	ldr	r3, [r5, #0]
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bee:	f7fd ff7d 	bl	8001aec <HAL_GetTick>
 8003bf2:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	009f      	lsls	r7, r3, #2
 8003bf8:	f100 8127 	bmi.w	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bfc:	6821      	ldr	r1, [r4, #0]
 8003bfe:	030e      	lsls	r6, r1, #12
 8003c00:	d501      	bpl.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8003c02:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c04:	b11b      	cbz	r3, 8003c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8003c06:	02cd      	lsls	r5, r1, #11
 8003c08:	d523      	bpl.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c0c:	bb0b      	cbnz	r3, 8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c0e:	4a03      	ldr	r2, [pc, #12]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c10:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c14:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8003c18:	e004      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c28:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003c2c:	4303      	orrs	r3, r0
 8003c2e:	6960      	ldr	r0, [r4, #20]
 8003c30:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c34:	69a0      	ldr	r0, [r4, #24]
 8003c36:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003c3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c3e:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8003c42:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003c44:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8003c48:	3801      	subs	r0, #1
 8003c4a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003c4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c52:	0288      	lsls	r0, r1, #10
 8003c54:	d515      	bpl.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003c56:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8003c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c5c:	d111      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c5e:	4a82      	ldr	r2, [pc, #520]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003c60:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c64:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c68:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003c6c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003c70:	4303      	orrs	r3, r0
 8003c72:	6960      	ldr	r0, [r4, #20]
 8003c74:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c78:	6a20      	ldr	r0, [r4, #32]
 8003c7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003c7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c82:	070a      	lsls	r2, r1, #28
 8003c84:	d519      	bpl.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c86:	4a78      	ldr	r2, [pc, #480]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003c88:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c90:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8003c94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6961      	ldr	r1, [r4, #20]
 8003c9c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003ca0:	69e1      	ldr	r1, [r4, #28]
 8003ca2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003ca6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003caa:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8003cae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003cb0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cba:	4c6b      	ldr	r4, [pc, #428]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc4:	f7fd ff12 	bl	8001aec <HAL_GetTick>
 8003cc8:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	f140 80c3 	bpl.w	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	e009      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8003cd6:	2601      	movs	r6, #1
 8003cd8:	e67a      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cda:	f7fd ff07 	bl	8001aec <HAL_GetTick>
 8003cde:	eba0 0008 	sub.w	r0, r0, r8
 8003ce2:	2864      	cmp	r0, #100	@ 0x64
 8003ce4:	f67f ae8c 	bls.w	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8003ce8:	2003      	movs	r0, #3
}
 8003cea:	b003      	add	sp, #12
 8003cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cf0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	f43f ae8e 	beq.w	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cfc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d06:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d08:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003d0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d0e:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8003d10:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d14:	07db      	lsls	r3, r3, #31
 8003d16:	f57f ae7e 	bpl.w	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8003d1a:	f7fd fee7 	bl	8001aec <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003d22:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d26:	0798      	lsls	r0, r3, #30
 8003d28:	f53f ae75 	bmi.w	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7fd fede 	bl	8001aec <HAL_GetTick>
 8003d30:	eba0 0008 	sub.w	r0, r0, r8
 8003d34:	4548      	cmp	r0, r9
 8003d36:	d9f5      	bls.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003d38:	e7d6      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3a:	6891      	ldr	r1, [r2, #8]
 8003d3c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8003d40:	e679      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8003d42:	4e49      	ldr	r6, [pc, #292]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d44:	6833      	ldr	r3, [r6, #0]
 8003d46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d4a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003d4c:	f7fd fece 	bl	8001aec <HAL_GetTick>
 8003d50:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d52:	6833      	ldr	r3, [r6, #0]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	d472      	bmi.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d58:	6822      	ldr	r2, [r4, #0]
 8003d5a:	07d7      	lsls	r7, r2, #31
 8003d5c:	d512      	bpl.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003d5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d60:	b983      	cbnz	r3, 8003d84 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d62:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d66:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d6e:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8003d72:	430b      	orrs	r3, r1
 8003d74:	6861      	ldr	r1, [r4, #4]
 8003d76:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003d7a:	68a1      	ldr	r1, [r4, #8]
 8003d7c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003d80:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d84:	0316      	lsls	r6, r2, #12
 8003d86:	d503      	bpl.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8003d88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003d90:	02d0      	lsls	r0, r2, #11
 8003d92:	d51e      	bpl.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d9a:	d11a      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d9c:	4932      	ldr	r1, [pc, #200]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d9e:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003da2:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003da6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003daa:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003dae:	4303      	orrs	r3, r0
 8003db0:	6860      	ldr	r0, [r4, #4]
 8003db2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003db6:	68e0      	ldr	r0, [r4, #12]
 8003db8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003dbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dc0:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8003dc4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003dc6:	f020 001f 	bic.w	r0, r0, #31
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	4303      	orrs	r3, r0
 8003dce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dd2:	01d1      	lsls	r1, r2, #7
 8003dd4:	d511      	bpl.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dd6:	4924      	ldr	r1, [pc, #144]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003dd8:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ddc:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003de0:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8003de4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8003de8:	4303      	orrs	r3, r0
 8003dea:	6860      	ldr	r0, [r4, #4]
 8003dec:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003df0:	6920      	ldr	r0, [r4, #16]
 8003df2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003df6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dfa:	0192      	lsls	r2, r2, #6
 8003dfc:	d50d      	bpl.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dfe:	6923      	ldr	r3, [r4, #16]
 8003e00:	6862      	ldr	r2, [r4, #4]
 8003e02:	041b      	lsls	r3, r3, #16
 8003e04:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003e08:	68e2      	ldr	r2, [r4, #12]
 8003e0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e0e:	68a2      	ldr	r2, [r4, #8]
 8003e10:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003e14:	4a14      	ldr	r2, [pc, #80]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003e16:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003e1a:	4e13      	ldr	r6, [pc, #76]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003e1c:	6833      	ldr	r3, [r6, #0]
 8003e1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e22:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003e24:	f7fd fe62 	bl	8001aec <HAL_GetTick>
 8003e28:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e2a:	6833      	ldr	r3, [r6, #0]
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	f53f aed7 	bmi.w	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e32:	f7fd fe5b 	bl	8001aec <HAL_GetTick>
 8003e36:	1bc0      	subs	r0, r0, r7
 8003e38:	2864      	cmp	r0, #100	@ 0x64
 8003e3a:	d9f6      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e3c:	e754      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e3e:	f7fd fe55 	bl	8001aec <HAL_GetTick>
 8003e42:	1bc0      	subs	r0, r0, r7
 8003e44:	2864      	cmp	r0, #100	@ 0x64
 8003e46:	d984      	bls.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003e48:	e74e      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e4a:	f7fd fe4f 	bl	8001aec <HAL_GetTick>
 8003e4e:	1b80      	subs	r0, r0, r6
 8003e50:	2864      	cmp	r0, #100	@ 0x64
 8003e52:	f67f aecf 	bls.w	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003e56:	e747      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e58:	f7fd fe48 	bl	8001aec <HAL_GetTick>
 8003e5c:	1b40      	subs	r0, r0, r5
 8003e5e:	2864      	cmp	r0, #100	@ 0x64
 8003e60:	f67f af33 	bls.w	8003cca <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003e64:	e740      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800

08003e6c <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8003e6c:	4b53      	ldr	r3, [pc, #332]	@ (8003fbc <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
 8003e6e:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8003e70:	4b53      	ldr	r3, [pc, #332]	@ (8003fc0 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 8003e72:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003e76:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8003e7a:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e7c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003e80:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8003e84:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e86:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003e8a:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8003e8e:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e90:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003e94:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8003e98:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8003e9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003e9e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8003ea2:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ea4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ea8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8003eac:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003eb2:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8003eb6:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003eb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ebc:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8003ec0:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8003ec2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ec6:	f002 021f 	and.w	r2, r2, #31
 8003eca:	6242      	str	r2, [r0, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8003ecc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ed0:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8003ed4:	6282      	str	r2, [r0, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8003ed6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003eda:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8003ede:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8003ee0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ee4:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8003ee8:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8003eea:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003eee:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8003ef2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8003efa:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8003efc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f00:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8003f04:	6642      	str	r2, [r0, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8003f06:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f0a:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
 8003f0e:	6682      	str	r2, [r0, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8003f10:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f14:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8003f18:	66c2      	str	r2, [r0, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8003f1a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f1e:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8003f22:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8003f24:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f28:	f002 0203 	and.w	r2, r2, #3
 8003f2c:	6442      	str	r2, [r0, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8003f2e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f32:	f002 020c 	and.w	r2, r2, #12
 8003f36:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8003f38:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f3c:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8003f40:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8003f42:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f46:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8003f4a:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8003f4c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f50:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003f54:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8003f56:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f5a:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8003f5e:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8003f60:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f64:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 8003f68:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8003f6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f6e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8003f72:	6602      	str	r2, [r0, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003f74:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f78:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 8003f7c:	6742      	str	r2, [r0, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8003f7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f82:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8003f86:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8003f88:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f8c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003f90:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8003f92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003f96:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8003f9a:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003f9e:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003fa0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003fa2:	f401 11f8 	and.w	r1, r1, #2031616	@ 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003fa6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003faa:	430a      	orrs	r2, r1
 8003fac:	6302      	str	r2, [r0, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8003fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fb6:	6383      	str	r3, [r0, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	00fffff1 	.word	0x00fffff1
 8003fc0:	40023800 	.word	0x40023800

08003fc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003fc4:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8003fc8:	d140      	bne.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003fca:	4b2e      	ldr	r3, [pc, #184]	@ (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003fcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003fd0:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
    switch (saiclocksource)
 8003fd4:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8003fd8:	d046      	beq.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8003fda:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8003fde:	d04c      	beq.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003fe0:	2a00      	cmp	r2, #0
 8003fe2:	d14c      	bne.n	800407e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	bf08      	it	eq
 8003fee:	4b26      	ldreq	r3, [pc, #152]	@ (8004088 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003ff0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003ff4:	bf18      	it	ne
 8003ff6:	4b25      	ldrne	r3, [pc, #148]	@ (800408c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8003ff8:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003ffc:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003ffe:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004002:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8004006:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800400a:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800400c:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004010:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004014:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004018:	f3c3 2304 	ubfx	r3, r3, #8, #5
 800401c:	e012      	b.n	8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800401e:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8004020:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004024:	4a17      	ldr	r2, [pc, #92]	@ (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004026:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800402a:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 800402e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004032:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004034:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004038:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800403c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8004046:	fbb0 f0f3 	udiv	r0, r0, r3
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800404a:	4770      	bx	lr
 800404c:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8004050:	d115      	bne.n	800407e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
 8004052:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004054:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004058:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
    switch (saiclocksource)
 800405c:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8004060:	d002      	beq.n	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8004062:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004066:	e7ba      	b.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004074:	d1d3      	bne.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004076:	4b04      	ldr	r3, [pc, #16]	@ (8004088 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004078:	e7d2      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800407a:	4805      	ldr	r0, [pc, #20]	@ (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 800407c:	4770      	bx	lr
    switch (saiclocksource)
 800407e:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400
 800408c:	017d7840 	.word	0x017d7840
 8004090:	00bb8000 	.word	0x00bb8000

08004094 <SAI_InterruptFlag>:
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004094:	2901      	cmp	r1, #1
  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004096:	6b01      	ldr	r1, [r0, #48]	@ 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004098:	6842      	ldr	r2, [r0, #4]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800409a:	bf0c      	ite	eq
 800409c:	2309      	moveq	r3, #9
 800409e:	2301      	movne	r3, #1
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80040a0:	2908      	cmp	r1, #8
 80040a2:	d105      	bne.n	80040b0 <SAI_InterruptFlag+0x1c>
 80040a4:	f022 0102 	bic.w	r1, r2, #2
 80040a8:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 80040aa:	bf08      	it	eq
 80040ac:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80040b0:	3a02      	subs	r2, #2
 80040b2:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80040b4:	bf94      	ite	ls
 80040b6:	f043 0060 	orrls.w	r0, r3, #96	@ 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80040ba:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 80040be:	4770      	bx	lr

080040c0 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80040c0:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <SAI_Disable.isra.0+0x34>)
 80040c2:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80040cc:	6802      	ldr	r2, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80040ce:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80040d0:	6811      	ldr	r1, [r2, #0]
 80040d2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80040d6:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80040d8:	3b01      	subs	r3, #1
 80040da:	d206      	bcs.n	80040ea <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80040dc:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80040e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040e4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      status = HAL_TIMEOUT;
      break;
 80040e8:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80040ea:	6811      	ldr	r1, [r2, #0]
 80040ec:	03c9      	lsls	r1, r1, #15
 80040ee:	d4f3      	bmi.n	80040d8 <SAI_Disable.isra.0+0x18>

  return status;
}
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	200000a0 	.word	0x200000a0

080040f8 <HAL_SAI_MspInit>:
}
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_SAI_Init>:
{
 80040fc:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 80040fe:	4604      	mov	r4, r0
 8004100:	2800      	cmp	r0, #0
 8004102:	f000 80c8 	beq.w	8004296 <HAL_SAI_Init+0x19a>
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004106:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 800410a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800410e:	b91b      	cbnz	r3, 8004118 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8004110:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 8004114:	f7ff fff0 	bl	80040f8 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004118:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 800411a:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 800411c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 8004120:	f7ff ffce 	bl	80040c0 <SAI_Disable.isra.0>
  switch (hsai->Init.SynchroExt)
 8004124:	68e3      	ldr	r3, [r4, #12]
 8004126:	2b01      	cmp	r3, #1
 8004128:	f000 80a5 	beq.w	8004276 <HAL_SAI_Init+0x17a>
 800412c:	1e98      	subs	r0, r3, #2
 800412e:	4243      	negs	r3, r0
 8004130:	4143      	adcs	r3, r0
 8004132:	015b      	lsls	r3, r3, #5
  switch (hsai->Init.Synchro)
 8004134:	68a5      	ldr	r5, [r4, #8]
 8004136:	2d02      	cmp	r5, #2
 8004138:	f000 80a1 	beq.w	800427e <HAL_SAI_Init+0x182>
 800413c:	2d03      	cmp	r5, #3
 800413e:	f000 809c 	beq.w	800427a <HAL_SAI_Init+0x17e>
 8004142:	1e69      	subs	r1, r5, #1
 8004144:	424d      	negs	r5, r1
 8004146:	414d      	adcs	r5, r1
 8004148:	02ad      	lsls	r5, r5, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	4953      	ldr	r1, [pc, #332]	@ (800429c <HAL_SAI_Init+0x1a0>)
 800414e:	4854      	ldr	r0, [pc, #336]	@ (80042a0 <HAL_SAI_Init+0x1a4>)
 8004150:	428a      	cmp	r2, r1
 8004152:	d003      	beq.n	800415c <HAL_SAI_Init+0x60>
 8004154:	4e53      	ldr	r6, [pc, #332]	@ (80042a4 <HAL_SAI_Init+0x1a8>)
 8004156:	42b2      	cmp	r2, r6
 8004158:	f040 8094 	bne.w	8004284 <HAL_SAI_Init+0x188>
    SAI1->GCR = tmpregisterGCR;
 800415c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004160:	69e3      	ldr	r3, [r4, #28]
 8004162:	b33b      	cbz	r3, 80041b4 <HAL_SAI_Init+0xb8>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004164:	428a      	cmp	r2, r1
 8004166:	d003      	beq.n	8004170 <HAL_SAI_Init+0x74>
 8004168:	4b4e      	ldr	r3, [pc, #312]	@ (80042a4 <HAL_SAI_Init+0x1a8>)
 800416a:	429a      	cmp	r2, r3
 800416c:	f040 808d 	bne.w	800428a <HAL_SAI_Init+0x18e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004170:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004174:	f7ff ff26 	bl	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	4a4b      	ldr	r2, [pc, #300]	@ (80042a8 <HAL_SAI_Init+0x1ac>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d002      	beq.n	8004186 <HAL_SAI_Init+0x8a>
 8004180:	3220      	adds	r2, #32
 8004182:	4293      	cmp	r3, r2
 8004184:	d103      	bne.n	800418e <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004186:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800418a:	f7ff ff1b 	bl	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800418e:	220a      	movs	r2, #10
 8004190:	69e3      	ldr	r3, [r4, #28]
 8004192:	4350      	muls	r0, r2
 8004194:	025b      	lsls	r3, r3, #9
 8004196:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800419a:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 800419e:	fb02 0013 	mls	r0, r2, r3, r0
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80041a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    if ((tmpval % 10) > 8)
 80041a4:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 80041a6:	bf08      	it	eq
 80041a8:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80041aa:	2a04      	cmp	r2, #4
    hsai->Init.Mckdiv = tmpval / 10;
 80041ac:	6223      	str	r3, [r4, #32]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80041ae:	bf04      	itt	eq
 80041b0:	085b      	lsreq	r3, r3, #1
 80041b2:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041b4:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80041b6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041b8:	f033 0202 	bics.w	r2, r3, #2
 80041bc:	d167      	bne.n	800428e <HAL_SAI_Init+0x192>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80041be:	3901      	subs	r1, #1
 80041c0:	bf18      	it	ne
 80041c2:	2101      	movne	r1, #1
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80041c4:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80041c6:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80041c8:	4838      	ldr	r0, [pc, #224]	@ (80042ac <HAL_SAI_Init+0x1b0>)
 80041ca:	6816      	ldr	r6, [r2, #0]
 80041cc:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80041ce:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80041d0:	4333      	orrs	r3, r6
 80041d2:	6b66      	ldr	r6, [r4, #52]	@ 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80041d4:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80041d6:	4333      	orrs	r3, r6
 80041d8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80041da:	6810      	ldr	r0, [r2, #0]
 80041dc:	4333      	orrs	r3, r6
 80041de:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80041e0:	4333      	orrs	r3, r6
 80041e2:	6926      	ldr	r6, [r4, #16]
 80041e4:	4333      	orrs	r3, r6
 80041e6:	6966      	ldr	r6, [r4, #20]
 80041e8:	4333      	orrs	r3, r6
 80041ea:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80041ec:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80041ee:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80041f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80041f4:	432b      	orrs	r3, r5
 80041f6:	430b      	orrs	r3, r1
 80041f8:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80041fa:	6853      	ldr	r3, [r2, #4]
 80041fc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004200:	f023 030f 	bic.w	r3, r3, #15
 8004204:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004206:	69a3      	ldr	r3, [r4, #24]
 8004208:	6851      	ldr	r1, [r2, #4]
 800420a:	4303      	orrs	r3, r0
 800420c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800420e:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004210:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004212:	430b      	orrs	r3, r1
 8004214:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004216:	4b26      	ldr	r3, [pc, #152]	@ (80042b0 <HAL_SAI_Init+0x1b4>)
 8004218:	6891      	ldr	r1, [r2, #8]
 800421a:	400b      	ands	r3, r1
 800421c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800421e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004220:	6891      	ldr	r1, [r2, #8]
 8004222:	4303      	orrs	r3, r0
 8004224:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004226:	4303      	orrs	r3, r0
 8004228:	430b      	orrs	r3, r1
 800422a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800422c:	3901      	subs	r1, #1
 800422e:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004230:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004232:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004234:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004238:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800423a:	68d3      	ldr	r3, [r2, #12]
 800423c:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 8004240:	f023 030f 	bic.w	r3, r3, #15
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800424a:	68d1      	ldr	r1, [r2, #12]
 800424c:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	@ 0x54
 8004250:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004252:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004254:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004256:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800425c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800425e:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004260:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004264:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8004266:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004268:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 800426c:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8004270:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
}
 8004274:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 8004276:	2310      	movs	r3, #16
 8004278:	e75c      	b.n	8004134 <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800427a:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800427e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8004282:	e762      	b.n	800414a <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
 8004284:	f8c0 3c00 	str.w	r3, [r0, #3072]	@ 0xc00
 8004288:	e76a      	b.n	8004160 <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
 800428a:	2000      	movs	r0, #0
 800428c:	e774      	b.n	8004178 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800428e:	1e4a      	subs	r2, r1, #1
 8004290:	4251      	negs	r1, r2
 8004292:	4151      	adcs	r1, r2
 8004294:	e796      	b.n	80041c4 <HAL_SAI_Init+0xc8>
    return HAL_ERROR;
 8004296:	2001      	movs	r0, #1
 8004298:	e7ec      	b.n	8004274 <HAL_SAI_Init+0x178>
 800429a:	bf00      	nop
 800429c:	40015804 	.word	0x40015804
 80042a0:	40015000 	.word	0x40015000
 80042a4:	40015824 	.word	0x40015824
 80042a8:	40015c04 	.word	0x40015c04
 80042ac:	ff05c010 	.word	0xff05c010
 80042b0:	fff88000 	.word	0xfff88000

080042b4 <HAL_SAI_MspDeInit>:
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
 80042b4:	4770      	bx	lr

080042b6 <HAL_SAI_DeInit>:
{
 80042b6:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 80042b8:	4605      	mov	r5, r0
 80042ba:	b1c0      	cbz	r0, 80042ee <HAL_SAI_DeInit+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
 80042bc:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 80042be:	6806      	ldr	r6, [r0, #0]
 80042c0:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
 80042c2:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
 80042ca:	6134      	str	r4, [r6, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80042cc:	61b3      	str	r3, [r6, #24]
  SAI_Disable(hsai);
 80042ce:	f7ff fef7 	bl	80040c0 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80042d2:	6873      	ldr	r3, [r6, #4]
 80042d4:	f043 0308 	orr.w	r3, r3, #8
 80042d8:	6073      	str	r3, [r6, #4]
  HAL_SAI_MspDeInit(hsai);
 80042da:	f7ff ffeb 	bl	80042b4 <HAL_SAI_MspDeInit>
  return HAL_OK;
 80042de:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80042e0:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 80042e4:	f885 407c 	strb.w	r4, [r5, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 80042e8:	f885 407d 	strb.w	r4, [r5, #125]	@ 0x7d
}
 80042ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80042ee:	2001      	movs	r0, #1
 80042f0:	e7fc      	b.n	80042ec <HAL_SAI_DeInit+0x36>

080042f2 <HAL_SAI_DMAStop>:
{
 80042f2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 80042f4:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
{
 80042f8:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d041      	beq.n	8004382 <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80042fe:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 8004300:	2501      	movs	r5, #1
 8004302:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004306:	6813      	ldr	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004308:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800430a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800430e:	6013      	str	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004310:	bb20      	cbnz	r0, 800435c <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8004312:	2500      	movs	r5, #0
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8004314:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004316:	b188      	cbz	r0, 800433c <HAL_SAI_DMAStop+0x4a>
 8004318:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800431c:	2b22      	cmp	r3, #34	@ 0x22
 800431e:	d10d      	bne.n	800433c <HAL_SAI_DMAStop+0x4a>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8004320:	f7fd fda7 	bl	8001e72 <HAL_DMA_Abort>
 8004324:	b150      	cbz	r0, 800433c <HAL_SAI_DMAStop+0x4a>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004326:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432a:	2b80      	cmp	r3, #128	@ 0x80
 800432c:	d006      	beq.n	800433c <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800432e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 8004332:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004338:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  SAI_Disable(hsai);
 800433c:	4620      	mov	r0, r4
 800433e:	f7ff febf 	bl	80040c0 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	6853      	ldr	r3, [r2, #4]
 8004346:	f043 0308 	orr.w	r3, r3, #8
 800434a:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 800434c:	2301      	movs	r3, #1
 800434e:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 8004352:	2300      	movs	r3, #0
 8004354:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8004358:	4628      	mov	r0, r5
 800435a:	bd38      	pop	{r3, r4, r5, pc}
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800435c:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8004360:	2b12      	cmp	r3, #18
 8004362:	d1d6      	bne.n	8004312 <HAL_SAI_DMAStop+0x20>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8004364:	f7fd fd85 	bl	8001e72 <HAL_DMA_Abort>
 8004368:	2800      	cmp	r0, #0
 800436a:	d0d2      	beq.n	8004312 <HAL_SAI_DMAStop+0x20>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800436c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800436e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004370:	2b80      	cmp	r3, #128	@ 0x80
 8004372:	d0ce      	beq.n	8004312 <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004374:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8004378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800437c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8004380:	e7c8      	b.n	8004314 <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
 8004382:	2502      	movs	r5, #2
 8004384:	e7e8      	b.n	8004358 <HAL_SAI_DMAStop+0x66>
	...

08004388 <HAL_SAI_Transmit_DMA>:
{
 8004388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438c:	460e      	mov	r6, r1
 800438e:	4604      	mov	r4, r0
 8004390:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8004392:	f7fd fbab 	bl	8001aec <HAL_GetTick>
 8004396:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0))
 8004398:	b34e      	cbz	r6, 80043ee <HAL_SAI_Transmit_DMA+0x66>
 800439a:	b345      	cbz	r5, 80043ee <HAL_SAI_Transmit_DMA+0x66>
  if (hsai->State == HAL_SAI_STATE_READY)
 800439c:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	d153      	bne.n	800444e <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_LOCK(hsai);
 80043a6:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d04f      	beq.n	800444e <HAL_SAI_Transmit_DMA+0xc6>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80043ae:	f04f 0800 	mov.w	r8, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80043b2:	2312      	movs	r3, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80043b4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80043b6:	4631      	mov	r1, r6
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80043b8:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80043bc:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80043c0:	4b24      	ldr	r3, [pc, #144]	@ (8004454 <HAL_SAI_Transmit_DMA+0xcc>)
    __HAL_LOCK(hsai);
 80043c2:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->XferSize = Size;
 80043c6:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 80043ca:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
    hsai->pBuffPtr = pData;
 80043ce:	6666      	str	r6, [r4, #100]	@ 0x64
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80043d0:	6403      	str	r3, [r0, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80043d2:	4b21      	ldr	r3, [pc, #132]	@ (8004458 <HAL_SAI_Transmit_DMA+0xd0>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80043d4:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80043d6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80043d8:	4b20      	ldr	r3, [pc, #128]	@ (800445c <HAL_SAI_Transmit_DMA+0xd4>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80043da:	321c      	adds	r2, #28
    hsai->hdmatx->XferAbortCallback = NULL;
 80043dc:	e9c0 3813 	strd	r3, r8, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80043e0:	462b      	mov	r3, r5
 80043e2:	f7fd fd09 	bl	8001df8 <HAL_DMA_Start_IT>
 80043e6:	4605      	mov	r5, r0
 80043e8:	b128      	cbz	r0, 80043f6 <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 80043ea:	f884 807c 	strb.w	r8, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 80043ee:	2501      	movs	r5, #1
}
 80043f0:	4628      	mov	r0, r5
 80043f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80043f6:	4601      	mov	r1, r0
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff fe4b 	bl	8004094 <SAI_InterruptFlag>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	4302      	orrs	r2, r0
 8004404:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800440c:	601a      	str	r2, [r3, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	695e      	ldr	r6, [r3, #20]
 8004412:	f416 26e0 	ands.w	r6, r6, #458752	@ 0x70000
 8004416:	d00a      	beq.n	800442e <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	03d2      	lsls	r2, r2, #15
 800441c:	d403      	bmi.n	8004426 <HAL_SAI_Transmit_DMA+0x9e>
      __HAL_SAI_ENABLE(hsai);
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004424:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004426:	2300      	movs	r3, #0
 8004428:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800442c:	e7e0      	b.n	80043f0 <HAL_SAI_Transmit_DMA+0x68>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800442e:	f7fd fb5d 	bl	8001aec <HAL_GetTick>
 8004432:	1bc0      	subs	r0, r0, r7
 8004434:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004438:	d9e9      	bls.n	800440e <HAL_SAI_Transmit_DMA+0x86>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800443a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 800443e:	2503      	movs	r5, #3
        __HAL_UNLOCK(hsai);
 8004440:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004448:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 800444c:	e7d0      	b.n	80043f0 <HAL_SAI_Transmit_DMA+0x68>
    __HAL_LOCK(hsai);
 800444e:	2502      	movs	r5, #2
 8004450:	e7ce      	b.n	80043f0 <HAL_SAI_Transmit_DMA+0x68>
 8004452:	bf00      	nop
 8004454:	08004499 	.word	0x08004499
 8004458:	08004461 	.word	0x08004461
 800445c:	080044a3 	.word	0x080044a3

08004460 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004460:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004462:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004464:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446a:	d011      	beq.n	8004490 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800446c:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 800446e:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004470:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004472:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 8004474:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004478:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800447c:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800447e:	f7ff fe09 	bl	8004094 <SAI_InterruptFlag>
 8004482:	692b      	ldr	r3, [r5, #16]
 8004484:	ea23 0300 	bic.w	r3, r3, r0
 8004488:	612b      	str	r3, [r5, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800448a:	2301      	movs	r3, #1
 800448c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004490:	4620      	mov	r0, r4
 8004492:	f7fd f987 	bl	80017a4 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004496:	bd38      	pop	{r3, r4, r5, pc}

08004498 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004498:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800449a:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 800449c:	f7fd f986 	bl	80017ac <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80044a0:	bd08      	pop	{r3, pc}

080044a2 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80044a4:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80044a6:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80044aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ae:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80044b2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d003      	beq.n	80044c2 <SAI_DMAError+0x20>
 80044ba:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d10c      	bne.n	80044dc <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80044c2:	6802      	ldr	r2, [r0, #0]
 80044c4:	6813      	ldr	r3, [r2, #0]
 80044c6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80044ca:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80044cc:	f7ff fdf8 	bl	80040c0 <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80044dc:	f7fd fa80 	bl	80019e0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80044e0:	bd08      	pop	{r3, pc}

080044e2 <HAL_SAI_GetState>:
  return hsai->State;
 80044e2:	f890 007d 	ldrb.w	r0, [r0, #125]	@ 0x7d
}
 80044e6:	4770      	bx	lr

080044e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044e8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80044ea:	2300      	movs	r3, #0
{
 80044ec:	4602      	mov	r2, r0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 80044ee:	4910      	ldr	r1, [pc, #64]	@ (8004530 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 80044f0:	9301      	str	r3, [sp, #4]
    count++;
 80044f2:	9b01      	ldr	r3, [sp, #4]
 80044f4:	3301      	adds	r3, #1
 80044f6:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80044f8:	9b01      	ldr	r3, [sp, #4]
 80044fa:	428b      	cmp	r3, r1
 80044fc:	d815      	bhi.n	800452a <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044fe:	6913      	ldr	r3, [r2, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	daf6      	bge.n	80044f2 <USB_CoreReset+0xa>

  /* Core Soft Reset */
  count = 0U;
 8004504:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8004506:	490a      	ldr	r1, [pc, #40]	@ (8004530 <USB_CoreReset+0x48>)
  count = 0U;
 8004508:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800450a:	6913      	ldr	r3, [r2, #16]
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6113      	str	r3, [r2, #16]
    count++;
 8004512:	9b01      	ldr	r3, [sp, #4]
 8004514:	3301      	adds	r3, #1
 8004516:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004518:	9b01      	ldr	r3, [sp, #4]
 800451a:	428b      	cmp	r3, r1
 800451c:	d805      	bhi.n	800452a <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800451e:	6910      	ldr	r0, [r2, #16]
 8004520:	f010 0001 	ands.w	r0, r0, #1
 8004524:	d1f5      	bne.n	8004512 <USB_CoreReset+0x2a>

  return HAL_OK;
}
 8004526:	b002      	add	sp, #8
 8004528:	4770      	bx	lr
      return HAL_TIMEOUT;
 800452a:	2003      	movs	r0, #3
 800452c:	e7fb      	b.n	8004526 <USB_CoreReset+0x3e>
 800452e:	bf00      	nop
 8004530:	00030d40 	.word	0x00030d40

08004534 <USB_CoreInit>:
{
 8004534:	b084      	sub	sp, #16
 8004536:	b538      	push	{r3, r4, r5, lr}
 8004538:	ad05      	add	r5, sp, #20
 800453a:	4604      	mov	r4, r0
 800453c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004542:	2b01      	cmp	r3, #1
 8004544:	d126      	bne.n	8004594 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004546:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800454c:	6383      	str	r3, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800454e:	68c3      	ldr	r3, [r0, #12]
 8004550:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004558:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800455a:	68c3      	ldr	r3, [r0, #12]
 800455c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004560:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004562:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004564:	2b01      	cmp	r3, #1
 8004566:	d103      	bne.n	8004570 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004568:	68c3      	ldr	r3, [r0, #12]
 800456a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800456e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004570:	4620      	mov	r0, r4
 8004572:	f7ff ffb9 	bl	80044e8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004576:	9b08      	ldr	r3, [sp, #32]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d107      	bne.n	800458c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	f043 0306 	orr.w	r3, r3, #6
 8004582:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004584:	68a3      	ldr	r3, [r4, #8]
 8004586:	f043 0320 	orr.w	r3, r3, #32
 800458a:	60a3      	str	r3, [r4, #8]
}
 800458c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004590:	b004      	add	sp, #16
 8004592:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004594:	68c3      	ldr	r3, [r0, #12]
 8004596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800459a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800459c:	f7ff ffa4 	bl	80044e8 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80045a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80045a8:	e7e5      	b.n	8004576 <USB_CoreInit+0x42>
	...

080045ac <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80045ac:	2a02      	cmp	r2, #2
 80045ae:	d14a      	bne.n	8004646 <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045b0:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <USB_SetTurnaroundTime+0xa4>)
 80045b2:	4a28      	ldr	r2, [pc, #160]	@ (8004654 <USB_SetTurnaroundTime+0xa8>)
 80045b4:	440b      	add	r3, r1
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d939      	bls.n	800462e <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045ba:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <USB_SetTurnaroundTime+0xac>)
 80045bc:	4a27      	ldr	r2, [pc, #156]	@ (800465c <USB_SetTurnaroundTime+0xb0>)
 80045be:	440b      	add	r3, r1
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d936      	bls.n	8004632 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045c4:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 80045c8:	4a25      	ldr	r2, [pc, #148]	@ (8004660 <USB_SetTurnaroundTime+0xb4>)
 80045ca:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d931      	bls.n	8004636 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045d2:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 80045d6:	4a23      	ldr	r2, [pc, #140]	@ (8004664 <USB_SetTurnaroundTime+0xb8>)
 80045d8:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 80045dc:	4293      	cmp	r3, r2
 80045de:	d32c      	bcc.n	800463a <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045e0:	4b21      	ldr	r3, [pc, #132]	@ (8004668 <USB_SetTurnaroundTime+0xbc>)
 80045e2:	4a22      	ldr	r2, [pc, #136]	@ (800466c <USB_SetTurnaroundTime+0xc0>)
 80045e4:	440b      	add	r3, r1
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d929      	bls.n	800463e <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045ea:	4b21      	ldr	r3, [pc, #132]	@ (8004670 <USB_SetTurnaroundTime+0xc4>)
 80045ec:	4a21      	ldr	r2, [pc, #132]	@ (8004674 <USB_SetTurnaroundTime+0xc8>)
 80045ee:	440b      	add	r3, r1
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d326      	bcc.n	8004642 <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045f4:	4b20      	ldr	r3, [pc, #128]	@ (8004678 <USB_SetTurnaroundTime+0xcc>)
 80045f6:	4a21      	ldr	r2, [pc, #132]	@ (800467c <USB_SetTurnaroundTime+0xd0>)
 80045f8:	440b      	add	r3, r1
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d323      	bcc.n	8004646 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045fe:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 8004602:	4a1f      	ldr	r2, [pc, #124]	@ (8004680 <USB_SetTurnaroundTime+0xd4>)
 8004604:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 8004608:	4293      	cmp	r3, r2
 800460a:	d31e      	bcc.n	800464a <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800460c:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x7U;
 800460e:	4a1e      	ldr	r2, [pc, #120]	@ (8004688 <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004610:	440b      	add	r3, r1
      UsbTrd = 0x7U;
 8004612:	4293      	cmp	r3, r2
 8004614:	bf2c      	ite	cs
 8004616:	2306      	movcs	r3, #6
 8004618:	2307      	movcc	r3, #7
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800461a:	68c2      	ldr	r2, [r0, #12]
 800461c:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 8004620:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004622:	68c2      	ldr	r2, [r0, #12]
 8004624:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8004628:	60c3      	str	r3, [r0, #12]
}
 800462a:	2000      	movs	r0, #0
 800462c:	4770      	bx	lr
      UsbTrd = 0xFU;
 800462e:	230f      	movs	r3, #15
 8004630:	e7f3      	b.n	800461a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 8004632:	230e      	movs	r3, #14
 8004634:	e7f1      	b.n	800461a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 8004636:	230d      	movs	r3, #13
 8004638:	e7ef      	b.n	800461a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 800463a:	230c      	movs	r3, #12
 800463c:	e7ed      	b.n	800461a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 800463e:	230b      	movs	r3, #11
 8004640:	e7eb      	b.n	800461a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 8004642:	230a      	movs	r3, #10
 8004644:	e7e9      	b.n	800461a <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004646:	2309      	movs	r3, #9
 8004648:	e7e7      	b.n	800461a <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 800464a:	2308      	movs	r3, #8
 800464c:	e7e5      	b.n	800461a <USB_SetTurnaroundTime+0x6e>
 800464e:	bf00      	nop
 8004650:	ff275340 	.word	0xff275340
 8004654:	000c34ff 	.word	0x000c34ff
 8004658:	ff1b1e40 	.word	0xff1b1e40
 800465c:	000f423f 	.word	0x000f423f
 8004660:	00124f7f 	.word	0x00124f7f
 8004664:	0013d620 	.word	0x0013d620
 8004668:	fee5b660 	.word	0xfee5b660
 800466c:	0016e35f 	.word	0x0016e35f
 8004670:	feced300 	.word	0xfeced300
 8004674:	001b7740 	.word	0x001b7740
 8004678:	feb35bc0 	.word	0xfeb35bc0
 800467c:	002191c0 	.word	0x002191c0
 8004680:	00387520 	.word	0x00387520
 8004684:	fe5954e0 	.word	0xfe5954e0
 8004688:	00419ce0 	.word	0x00419ce0

0800468c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800468c:	6883      	ldr	r3, [r0, #8]
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6083      	str	r3, [r0, #8]
}
 8004694:	2000      	movs	r0, #0
 8004696:	4770      	bx	lr

08004698 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004698:	6883      	ldr	r3, [r0, #8]
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	6083      	str	r3, [r0, #8]
}
 80046a0:	2000      	movs	r0, #0
 80046a2:	4770      	bx	lr

080046a4 <USB_SetCurrentMode>:
{
 80046a4:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046a6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80046a8:	2901      	cmp	r1, #1
{
 80046aa:	4605      	mov	r5, r0
 80046ac:	460c      	mov	r4, r1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80046b2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80046b4:	d113      	bne.n	80046de <USB_SetCurrentMode+0x3a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046b6:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80046b8:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80046be:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 80046c0:	2001      	movs	r0, #1
      ms++;
 80046c2:	3401      	adds	r4, #1
      HAL_Delay(1U);
 80046c4:	f7fd fa18 	bl	8001af8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80046c8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046ca:	07d9      	lsls	r1, r3, #31
 80046cc:	d402      	bmi.n	80046d4 <USB_SetCurrentMode+0x30>
 80046ce:	2c32      	cmp	r4, #50	@ 0x32
 80046d0:	d1f6      	bne.n	80046c0 <USB_SetCurrentMode+0x1c>
      ms++;
 80046d2:	2432      	movs	r4, #50	@ 0x32
  if (ms == 50U)
 80046d4:	f1a4 0332 	sub.w	r3, r4, #50	@ 0x32
 80046d8:	4258      	negs	r0, r3
 80046da:	4158      	adcs	r0, r3
}
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 80046de:	b969      	cbnz	r1, 80046fc <USB_SetCurrentMode+0x58>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046e0:	68c3      	ldr	r3, [r0, #12]
 80046e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046e6:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 80046e8:	2001      	movs	r0, #1
      ms++;
 80046ea:	3401      	adds	r4, #1
      HAL_Delay(1U);
 80046ec:	f7fd fa04 	bl	8001af8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80046f0:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046f2:	07da      	lsls	r2, r3, #31
 80046f4:	d5ee      	bpl.n	80046d4 <USB_SetCurrentMode+0x30>
 80046f6:	2c32      	cmp	r4, #50	@ 0x32
 80046f8:	d1f6      	bne.n	80046e8 <USB_SetCurrentMode+0x44>
 80046fa:	e7ea      	b.n	80046d2 <USB_SetCurrentMode+0x2e>
    return HAL_ERROR;
 80046fc:	2001      	movs	r0, #1
 80046fe:	e7ed      	b.n	80046dc <USB_SetCurrentMode+0x38>

08004700 <USB_FlushTxFifo>:
{
 8004700:	b082      	sub	sp, #8
 8004702:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8004704:	2300      	movs	r3, #0
    if (count > 200000U)
 8004706:	4810      	ldr	r0, [pc, #64]	@ (8004748 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8004708:	9301      	str	r3, [sp, #4]
    count++;
 800470a:	9b01      	ldr	r3, [sp, #4]
 800470c:	3301      	adds	r3, #1
 800470e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004710:	9b01      	ldr	r3, [sp, #4]
 8004712:	4283      	cmp	r3, r0
 8004714:	d815      	bhi.n	8004742 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004716:	6913      	ldr	r3, [r2, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	daf6      	bge.n	800470a <USB_FlushTxFifo+0xa>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800471c:	0189      	lsls	r1, r1, #6
  count = 0U;
 800471e:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004720:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8004724:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004726:	6111      	str	r1, [r2, #16]
    if (count > 200000U)
 8004728:	4907      	ldr	r1, [pc, #28]	@ (8004748 <USB_FlushTxFifo+0x48>)
    count++;
 800472a:	9b01      	ldr	r3, [sp, #4]
 800472c:	3301      	adds	r3, #1
 800472e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004730:	9b01      	ldr	r3, [sp, #4]
 8004732:	428b      	cmp	r3, r1
 8004734:	d805      	bhi.n	8004742 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004736:	6910      	ldr	r0, [r2, #16]
 8004738:	f010 0020 	ands.w	r0, r0, #32
 800473c:	d1f5      	bne.n	800472a <USB_FlushTxFifo+0x2a>
}
 800473e:	b002      	add	sp, #8
 8004740:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004742:	2003      	movs	r0, #3
 8004744:	e7fb      	b.n	800473e <USB_FlushTxFifo+0x3e>
 8004746:	bf00      	nop
 8004748:	00030d40 	.word	0x00030d40

0800474c <USB_FlushRxFifo>:
{
 800474c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800474e:	2300      	movs	r3, #0
{
 8004750:	4602      	mov	r2, r0
    if (count > 200000U)
 8004752:	490f      	ldr	r1, [pc, #60]	@ (8004790 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8004754:	9301      	str	r3, [sp, #4]
    count++;
 8004756:	9b01      	ldr	r3, [sp, #4]
 8004758:	3301      	adds	r3, #1
 800475a:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800475c:	9b01      	ldr	r3, [sp, #4]
 800475e:	428b      	cmp	r3, r1
 8004760:	d813      	bhi.n	800478a <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004762:	6913      	ldr	r3, [r2, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	daf6      	bge.n	8004756 <USB_FlushRxFifo+0xa>
  count = 0U;
 8004768:	2300      	movs	r3, #0
    if (count > 200000U)
 800476a:	4909      	ldr	r1, [pc, #36]	@ (8004790 <USB_FlushRxFifo+0x44>)
  count = 0U;
 800476c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800476e:	2310      	movs	r3, #16
 8004770:	6113      	str	r3, [r2, #16]
    count++;
 8004772:	9b01      	ldr	r3, [sp, #4]
 8004774:	3301      	adds	r3, #1
 8004776:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004778:	9b01      	ldr	r3, [sp, #4]
 800477a:	428b      	cmp	r3, r1
 800477c:	d805      	bhi.n	800478a <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800477e:	6910      	ldr	r0, [r2, #16]
 8004780:	f010 0010 	ands.w	r0, r0, #16
 8004784:	d1f5      	bne.n	8004772 <USB_FlushRxFifo+0x26>
}
 8004786:	b002      	add	sp, #8
 8004788:	4770      	bx	lr
      return HAL_TIMEOUT;
 800478a:	2003      	movs	r0, #3
 800478c:	e7fb      	b.n	8004786 <USB_FlushRxFifo+0x3a>
 800478e:	bf00      	nop
 8004790:	00030d40 	.word	0x00030d40

08004794 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004794:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004798:	4319      	orrs	r1, r3
 800479a:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800479e:	2000      	movs	r0, #0
 80047a0:	4770      	bx	lr
	...

080047a4 <USB_DevInit>:
{
 80047a4:	b084      	sub	sp, #16
 80047a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047aa:	4604      	mov	r4, r0
 80047ac:	a809      	add	r0, sp, #36	@ 0x24
 80047ae:	460f      	mov	r7, r1
 80047b0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80047b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80047b6:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 80047b8:	4619      	mov	r1, r3
 80047ba:	f103 0240 	add.w	r2, r3, #64	@ 0x40
  for (i = 0U; i < 15U; i++)
 80047be:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80047c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80047c4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80047c6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80047c8:	d1f7      	bne.n	80047ba <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047ca:	f504 6800 	add.w	r8, r4, #2048	@ 0x800
  if (cfg.vbus_sensing_enable == 0U)
 80047ce:	2e00      	cmp	r6, #0
 80047d0:	d173      	bne.n	80048ba <USB_DevInit+0x116>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	f8c8 3004 	str.w	r3, [r8, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80047de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80047e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047e4:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047ec:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047fc:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 8004800:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004804:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004806:	2b01      	cmp	r3, #1
 8004808:	d15e      	bne.n	80048c8 <USB_DevInit+0x124>
    if (cfg.speed == USBD_HS_SPEED)
 800480a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800480c:	2900      	cmp	r1, #0
 800480e:	d159      	bne.n	80048c4 <USB_DevInit+0x120>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004810:	4620      	mov	r0, r4
 8004812:	f7ff ffbf 	bl	8004794 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004816:	2110      	movs	r1, #16
 8004818:	4620      	mov	r0, r4
 800481a:	f7ff ff71 	bl	8004700 <USB_FlushTxFifo>
 800481e:	4605      	mov	r5, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff ff93 	bl	800474c <USB_FlushRxFifo>
 8004826:	4328      	orrs	r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	f504 6210 	add.w	r2, r4, #2304	@ 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800482e:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004830:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8004834:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004836:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800483a:	3800      	subs	r0, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800483c:	f64f 3e7f 	movw	lr, #64383	@ 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8004840:	f8c8 3010 	str.w	r3, [r8, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004844:	bf18      	it	ne
 8004846:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 8004848:	f8c8 3014 	str.w	r3, [r8, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800484c:	f8c8 301c 	str.w	r3, [r8, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004850:	42bb      	cmp	r3, r7
 8004852:	d13b      	bne.n	80048cc <USB_DevInit+0x128>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004854:	2200      	movs	r2, #0
 8004856:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800485a:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800485e:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004862:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004864:	f64f 3e7f 	movw	lr, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004868:	42ba      	cmp	r2, r7
 800486a:	d141      	bne.n	80048f0 <USB_DevInit+0x14c>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800486c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004874:	f8c8 3010 	str.w	r3, [r8, #16]
  USBx->GINTMSK = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800487c:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8004880:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004884:	b91b      	cbnz	r3, 800488e <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004886:	69a3      	ldr	r3, [r4, #24]
 8004888:	f043 0310 	orr.w	r3, r3, #16
 800488c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800488e:	69a2      	ldr	r2, [r4, #24]
 8004890:	4b20      	ldr	r3, [pc, #128]	@ (8004914 <USB_DevInit+0x170>)
 8004892:	4313      	orrs	r3, r2
 8004894:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004896:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004898:	b11b      	cbz	r3, 80048a2 <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800489a:	69a3      	ldr	r3, [r4, #24]
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80048a2:	2e01      	cmp	r6, #1
 80048a4:	d105      	bne.n	80048b2 <USB_DevInit+0x10e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048a6:	69a3      	ldr	r3, [r4, #24]
 80048a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	61a3      	str	r3, [r4, #24]
}
 80048b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048b6:	b004      	add	sp, #16
 80048b8:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048ba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048c0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80048c2:	e798      	b.n	80047f6 <USB_DevInit+0x52>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048c4:	4619      	mov	r1, r3
 80048c6:	e7a3      	b.n	8004810 <USB_DevInit+0x6c>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048c8:	2103      	movs	r1, #3
 80048ca:	e7a1      	b.n	8004810 <USB_DevInit+0x6c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048cc:	f8d2 9000 	ldr.w	r9, [r2]
 80048d0:	f1b9 0f00 	cmp.w	r9, #0
 80048d4:	da0a      	bge.n	80048ec <USB_DevInit+0x148>
      if (i == 0U)
 80048d6:	b93b      	cbnz	r3, 80048e8 <USB_DevInit+0x144>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048d8:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048dc:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048de:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048e0:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e4:	3220      	adds	r2, #32
 80048e6:	e7b3      	b.n	8004850 <USB_DevInit+0xac>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048e8:	6015      	str	r5, [r2, #0]
 80048ea:	e7f7      	b.n	80048dc <USB_DevInit+0x138>
      USBx_INEP(i)->DIEPCTL = 0U;
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	e7f5      	b.n	80048dc <USB_DevInit+0x138>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048f0:	f8d3 9000 	ldr.w	r9, [r3]
 80048f4:	f1b9 0f00 	cmp.w	r9, #0
 80048f8:	da0a      	bge.n	8004910 <USB_DevInit+0x16c>
      if (i == 0U)
 80048fa:	b93a      	cbnz	r2, 800490c <USB_DevInit+0x168>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048fc:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004900:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004902:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004904:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004908:	3320      	adds	r3, #32
 800490a:	e7ad      	b.n	8004868 <USB_DevInit+0xc4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800490c:	601d      	str	r5, [r3, #0]
 800490e:	e7f7      	b.n	8004900 <USB_DevInit+0x15c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004910:	6019      	str	r1, [r3, #0]
 8004912:	e7f5      	b.n	8004900 <USB_DevInit+0x15c>
 8004914:	803c3800 	.word	0x803c3800

08004918 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004918:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800491c:	f013 0006 	ands.w	r0, r3, #6
 8004920:	d004      	beq.n	800492c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8004922:	f013 0f02 	tst.w	r3, #2
 8004926:	bf14      	ite	ne
 8004928:	2002      	movne	r0, #2
 800492a:	200f      	moveq	r0, #15
}
 800492c:	4770      	bx	lr

0800492e <USB_ActivateEndpoint>:
{
 800492e:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004930:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004932:	2201      	movs	r2, #1
 8004934:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
 8004938:	f004 050f 	and.w	r5, r4, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800493c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004940:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
 8004942:	784d      	ldrb	r5, [r1, #1]
 8004944:	2d01      	cmp	r5, #1
 8004946:	d119      	bne.n	800497c <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004948:	69dd      	ldr	r5, [r3, #28]
 800494a:	432a      	orrs	r2, r5
 800494c:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800494e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004952:	041a      	lsls	r2, r3, #16
 8004954:	d410      	bmi.n	8004978 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004956:	68ca      	ldr	r2, [r1, #12]
 8004958:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
 800495c:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004960:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004962:	432b      	orrs	r3, r5
 8004964:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8004968:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004974:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004978:	2000      	movs	r0, #0
 800497a:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800497c:	69dc      	ldr	r4, [r3, #28]
 800497e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8004982:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004984:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	d4f5      	bmi.n	8004978 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800498c:	68cb      	ldr	r3, [r1, #12]
 800498e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004996:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8004998:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800499a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800499e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049a6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 80049aa:	e7e5      	b.n	8004978 <USB_ActivateEndpoint+0x4a>

080049ac <USB_DeactivateEndpoint>:
{
 80049ac:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80049ae:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80049b0:	7849      	ldrb	r1, [r1, #1]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049b2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 80049b6:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  if (ep->is_in == 1U)
 80049ba:	2901      	cmp	r1, #1
 80049bc:	f002 020f 	and.w	r2, r2, #15
 80049c0:	d122      	bne.n	8004a08 <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049c2:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80049c6:	2900      	cmp	r1, #0
 80049c8:	da0b      	bge.n	80049e2 <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049ca:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80049ce:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 80049d2:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049d6:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80049da:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80049de:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049e2:	2101      	movs	r1, #1
 80049e4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80049e6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ea:	ea24 0402 	bic.w	r4, r4, r2
 80049ee:	63c4      	str	r4, [r0, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049f0:	69c1      	ldr	r1, [r0, #28]
 80049f2:	ea21 0202 	bic.w	r2, r1, r2
 80049f6:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049f8:	4a15      	ldr	r2, [pc, #84]	@ (8004a50 <USB_DeactivateEndpoint+0xa4>)
 80049fa:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 80049fe:	400a      	ands	r2, r1
 8004a00:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 8004a04:	2000      	movs	r0, #0
 8004a06:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a08:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	da0b      	bge.n	8004a28 <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a10:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004a14:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8004a18:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a1c:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004a20:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004a24:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a28:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8004a2c:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a32:	ea24 0402 	bic.w	r4, r4, r2
 8004a36:	63c4      	str	r4, [r0, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a38:	69c1      	ldr	r1, [r0, #28]
 8004a3a:	ea21 0202 	bic.w	r2, r1, r2
 8004a3e:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a40:	4a04      	ldr	r2, [pc, #16]	@ (8004a54 <USB_DeactivateEndpoint+0xa8>)
 8004a42:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8004a46:	400a      	ands	r2, r1
 8004a48:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8004a4c:	e7da      	b.n	8004a04 <USB_DeactivateEndpoint+0x58>
 8004a4e:	bf00      	nop
 8004a50:	ec337800 	.word	0xec337800
 8004a54:	eff37800 	.word	0xeff37800

08004a58 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8004a58:	784b      	ldrb	r3, [r1, #1]
 8004a5a:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8004b48 <USB_EP0StartXfer+0xf0>
 8004a5e:	2b01      	cmp	r3, #1
{
 8004a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004a62:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8004a64:	698d      	ldr	r5, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a66:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 8004a6a:	4f36      	ldr	r7, [pc, #216]	@ (8004b44 <USB_EP0StartXfer+0xec>)
  if (ep->is_in == 1U)
 8004a6c:	d146      	bne.n	8004afc <USB_EP0StartXfer+0xa4>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a6e:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 8004a72:	b9bd      	cbnz	r5, 8004aa4 <USB_EP0StartXfer+0x4c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a74:	691d      	ldr	r5, [r3, #16]
 8004a76:	403d      	ands	r5, r7
 8004a78:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a7a:	691d      	ldr	r5, [r3, #16]
 8004a7c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004a80:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a82:	691d      	ldr	r5, [r3, #16]
 8004a84:	ea05 050c 	and.w	r5, r5, ip
    if (dma == 1U)
 8004a88:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a8a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004a8c:	d123      	bne.n	8004ad6 <USB_EP0StartXfer+0x7e>
      if ((uint32_t)ep->dma_addr != 0U)
 8004a8e:	694a      	ldr	r2, [r1, #20]
 8004a90:	b102      	cbz	r2, 8004a94 <USB_EP0StartXfer+0x3c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a92:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a94:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004a98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a9c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
}
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aa4:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8004aa8:	ea0e 0c0c 	and.w	ip, lr, ip
 8004aac:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ab0:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8004ab4:	ea0c 0707 	and.w	r7, ip, r7
 8004ab8:	611f      	str	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004aba:	68cf      	ldr	r7, [r1, #12]
 8004abc:	42af      	cmp	r7, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004abe:	691d      	ldr	r5, [r3, #16]
 8004ac0:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
        ep->xfer_len = ep->maxpacket;
 8004ac4:	bf38      	it	cc
 8004ac6:	618f      	strcc	r7, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ac8:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004aca:	698d      	ldr	r5, [r1, #24]
 8004acc:	691f      	ldr	r7, [r3, #16]
 8004ace:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004ad2:	433d      	orrs	r5, r7
 8004ad4:	e7d8      	b.n	8004a88 <USB_EP0StartXfer+0x30>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ad6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004ada:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ade:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->xfer_len > 0U)
 8004ae2:	698b      	ldr	r3, [r1, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0db      	beq.n	8004aa0 <USB_EP0StartXfer+0x48>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ae8:	f006 060f 	and.w	r6, r6, #15
 8004aec:	2301      	movs	r3, #1
 8004aee:	f8d0 2834 	ldr.w	r2, [r0, #2100]	@ 0x834
 8004af2:	40b3      	lsls	r3, r6
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8004afa:	e7d1      	b.n	8004aa0 <USB_EP0StartXfer+0x48>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004afc:	f8d4 0b10 	ldr.w	r0, [r4, #2832]	@ 0xb10
 8004b00:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
 8004b04:	ea00 000c 	and.w	r0, r0, ip
 8004b08:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b0a:	6918      	ldr	r0, [r3, #16]
 8004b0c:	4038      	ands	r0, r7
 8004b0e:	6118      	str	r0, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 8004b10:	68c8      	ldr	r0, [r1, #12]
    if (ep->xfer_len > 0U)
 8004b12:	b105      	cbz	r5, 8004b16 <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8004b14:	6188      	str	r0, [r1, #24]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b16:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 8004b18:	2a01      	cmp	r2, #1
    ep->xfer_size = ep->maxpacket;
 8004b1a:	61c8      	str	r0, [r1, #28]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b1c:	f3c0 0012 	ubfx	r0, r0, #0, #19
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b20:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8004b24:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b26:	691d      	ldr	r5, [r3, #16]
 8004b28:	ea40 0005 	orr.w	r0, r0, r5
 8004b2c:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8004b2e:	d102      	bne.n	8004b36 <USB_EP0StartXfer+0xde>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b30:	690a      	ldr	r2, [r1, #16]
 8004b32:	b102      	cbz	r2, 8004b36 <USB_EP0StartXfer+0xde>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b34:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b36:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	@ 0xb00
 8004b3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b3e:	f8c4 3b00 	str.w	r3, [r4, #2816]	@ 0xb00
 8004b42:	e7ad      	b.n	8004aa0 <USB_EP0StartXfer+0x48>
 8004b44:	e007ffff 	.word	0xe007ffff
 8004b48:	fff80000 	.word	0xfff80000

08004b4c <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 8004b4c:	2300      	movs	r3, #0
{
 8004b4e:	b082      	sub	sp, #8
  if (ep->is_in == 1U)
 8004b50:	784a      	ldrb	r2, [r1, #1]
  __IO uint32_t count = 0U;
 8004b52:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8004b54:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b56:	780b      	ldrb	r3, [r1, #0]
 8004b58:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 8004b5c:	d11e      	bne.n	8004b9c <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b5e:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8004b62:	58c2      	ldr	r2, [r0, r3]
 8004b64:	18c1      	adds	r1, r0, r3
 8004b66:	2a00      	cmp	r2, #0
 8004b68:	db02      	blt.n	8004b70 <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
 8004b6a:	2000      	movs	r0, #0
}
 8004b6c:	b002      	add	sp, #8
 8004b6e:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b70:	58c2      	ldr	r2, [r0, r3]
 8004b72:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8004b76:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b78:	58c2      	ldr	r2, [r0, r3]
 8004b7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b7e:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
 8004b80:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 8004b84:	9b01      	ldr	r3, [sp, #4]
 8004b86:	3301      	adds	r3, #1
 8004b88:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004b8a:	9b01      	ldr	r3, [sp, #4]
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
 8004b90:	2001      	movs	r0, #1
 8004b92:	e7eb      	b.n	8004b6c <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b94:	680b      	ldr	r3, [r1, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	dbf4      	blt.n	8004b84 <USB_EPStopXfer+0x38>
 8004b9a:	e7e6      	b.n	8004b6a <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b9c:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 8004ba0:	58c2      	ldr	r2, [r0, r3]
 8004ba2:	18c1      	adds	r1, r0, r3
 8004ba4:	2a00      	cmp	r2, #0
 8004ba6:	dae0      	bge.n	8004b6a <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ba8:	58c2      	ldr	r2, [r0, r3]
 8004baa:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8004bae:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004bb0:	58c2      	ldr	r2, [r0, r3]
 8004bb2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004bb6:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
 8004bb8:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 8004bbc:	9b01      	ldr	r3, [sp, #4]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8004bc2:	9b01      	ldr	r3, [sp, #4]
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d8e3      	bhi.n	8004b90 <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bc8:	680b      	ldr	r3, [r1, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	dbf6      	blt.n	8004bbc <USB_EPStopXfer+0x70>
 8004bce:	e7cc      	b.n	8004b6a <USB_EPStopXfer+0x1e>

08004bd0 <USB_WritePacket>:
{
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8004bd6:	b944      	cbnz	r4, 8004bea <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004bd8:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bda:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8004bdc:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bde:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004be2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8004be6:	428b      	cmp	r3, r1
 8004be8:	d101      	bne.n	8004bee <USB_WritePacket+0x1e>
}
 8004bea:	2000      	movs	r0, #0
 8004bec:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bee:	f851 2b04 	ldr.w	r2, [r1], #4
 8004bf2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004bf4:	e7f7      	b.n	8004be6 <USB_WritePacket+0x16>
	...

08004bf8 <USB_EPStartXfer>:
{
 8004bf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8004bfc:	784d      	ldrb	r5, [r1, #1]
{
 8004bfe:	4616      	mov	r6, r2
  uint32_t epnum = (uint32_t)ep->num;
 8004c00:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8004c02:	2d01      	cmp	r5, #1
    if (ep->xfer_len == 0U)
 8004c04:	698b      	ldr	r3, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c06:	eb00 1442 	add.w	r4, r0, r2, lsl #5
      if (ep->type == EP_TYPE_ISOC)
 8004c0a:	790f      	ldrb	r7, [r1, #4]
 8004c0c:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8004dbc <USB_EPStartXfer+0x1c4>
 8004c10:	f8df e1ac 	ldr.w	lr, [pc, #428]	@ 8004dc0 <USB_EPStartXfer+0x1c8>
  if (ep->is_in == 1U)
 8004c14:	f040 808b 	bne.w	8004d2e <USB_EPStartXfer+0x136>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c18:	f504 6510 	add.w	r5, r4, #2304	@ 0x900
 8004c1c:	f8d5 8010 	ldr.w	r8, [r5, #16]
    if (ep->xfer_len == 0U)
 8004c20:	bb6b      	cbnz	r3, 8004c7e <USB_EPStartXfer+0x86>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c22:	ea08 0c0c 	and.w	ip, r8, ip
 8004c26:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c2a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8004c2e:	f44c 2c00 	orr.w	ip, ip, #524288	@ 0x80000
 8004c32:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c36:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8004c3a:	ea0c 0c0e 	and.w	ip, ip, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c3e:	f8c5 c010 	str.w	ip, [r5, #16]
    if (dma == 1U)
 8004c42:	2e01      	cmp	r6, #1
 8004c44:	d14c      	bne.n	8004ce0 <USB_EPStartXfer+0xe8>
      if ((uint32_t)ep->dma_addr != 0U)
 8004c46:	694b      	ldr	r3, [r1, #20]
 8004c48:	b103      	cbz	r3, 8004c4c <USB_EPStartXfer+0x54>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c4a:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 8004c4c:	2f01      	cmp	r7, #1
 8004c4e:	d10c      	bne.n	8004c6a <USB_EPStartXfer+0x72>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c50:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004c54:	f413 7f80 	tst.w	r3, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c58:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004c5c:	bf0c      	ite	eq
 8004c5e:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c62:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8004c66:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c6a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8004c6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c72:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
}
 8004c76:	2000      	movs	r0, #0
 8004c78:	b002      	add	sp, #8
 8004c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c7e:	ea08 0e0e 	and.w	lr, r8, lr
      if (ep->type == EP_TYPE_ISOC)
 8004c82:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c84:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c88:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8004c8c:	ea0e 0c0c 	and.w	ip, lr, ip
 8004c90:	f8c5 c010 	str.w	ip, [r5, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c94:	f8d1 c00c 	ldr.w	ip, [r1, #12]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c98:	f8d5 8010 	ldr.w	r8, [r5, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c9c:	eb0c 0e03 	add.w	lr, ip, r3
 8004ca0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004ca4:	fbbe fefc 	udiv	lr, lr, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ca8:	f8df c118 	ldr.w	ip, [pc, #280]	@ 8004dc4 <USB_EPStartXfer+0x1cc>
 8004cac:	ea0c 4cce 	and.w	ip, ip, lr, lsl #19
 8004cb0:	ea4c 0c08 	orr.w	ip, ip, r8
 8004cb4:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cb8:	f3c3 0c12 	ubfx	ip, r3, #0, #19
 8004cbc:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8004cc0:	ea4c 0c0e 	orr.w	ip, ip, lr
 8004cc4:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8004cc8:	d1bb      	bne.n	8004c42 <USB_EPStartXfer+0x4a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cca:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8004cce:	f02c 4cc0 	bic.w	ip, ip, #1610612736	@ 0x60000000
 8004cd2:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cd6:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8004cda:	f04c 5c00 	orr.w	ip, ip, #536870912	@ 0x20000000
 8004cde:	e7ae      	b.n	8004c3e <USB_EPStartXfer+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ce0:	f8d4 5900 	ldr.w	r5, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004ce4:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ce6:	f045 4504 	orr.w	r5, r5, #2214592512	@ 0x84000000
 8004cea:	f8c4 5900 	str.w	r5, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8004cee:	d00b      	beq.n	8004d08 <USB_EPStartXfer+0x110>
        if (ep->xfer_len > 0U)
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0c0      	beq.n	8004c76 <USB_EPStartXfer+0x7e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cf4:	f002 020f 	and.w	r2, r2, #15
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
 8004cfe:	4093      	lsls	r3, r2
 8004d00:	430b      	orrs	r3, r1
 8004d02:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8004d06:	e7b6      	b.n	8004c76 <USB_EPStartXfer+0x7e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d08:	f8d0 5808 	ldr.w	r5, [r0, #2056]	@ 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d0c:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d0e:	f415 7f80 	tst.w	r5, #256	@ 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d12:	f8d4 5900 	ldr.w	r5, [r4, #2304]	@ 0x900
 8004d16:	bf0c      	ite	eq
 8004d18:	f045 5500 	orreq.w	r5, r5, #536870912	@ 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d1c:	f045 5580 	orrne.w	r5, r5, #268435456	@ 0x10000000
 8004d20:	f8c4 5900 	str.w	r5, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d24:	9600      	str	r6, [sp, #0]
 8004d26:	6909      	ldr	r1, [r1, #16]
 8004d28:	f7ff ff52 	bl	8004bd0 <USB_WritePacket>
 8004d2c:	e7a3      	b.n	8004c76 <USB_EPStartXfer+0x7e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d2e:	f8d4 5b10 	ldr.w	r5, [r4, #2832]	@ 0xb10
 8004d32:	f504 6230 	add.w	r2, r4, #2816	@ 0xb00
 8004d36:	ea05 050e 	and.w	r5, r5, lr
 8004d3a:	6115      	str	r5, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d3c:	6915      	ldr	r5, [r2, #16]
 8004d3e:	ea05 050c 	and.w	r5, r5, ip
 8004d42:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d44:	68cd      	ldr	r5, [r1, #12]
    if (ep->xfer_len == 0U)
 8004d46:	bb1b      	cbnz	r3, 8004d90 <USB_EPStartXfer+0x198>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d48:	6913      	ldr	r3, [r2, #16]
 8004d4a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004d4e:	431d      	orrs	r5, r3
 8004d50:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d52:	6913      	ldr	r3, [r2, #16]
 8004d54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d58:	6113      	str	r3, [r2, #16]
    if (dma == 1U)
 8004d5a:	2e01      	cmp	r6, #1
 8004d5c:	d102      	bne.n	8004d64 <USB_EPStartXfer+0x16c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d5e:	690b      	ldr	r3, [r1, #16]
 8004d60:	b103      	cbz	r3, 8004d64 <USB_EPStartXfer+0x16c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d62:	6153      	str	r3, [r2, #20]
    if (ep->type == EP_TYPE_ISOC)
 8004d64:	2f01      	cmp	r7, #1
 8004d66:	d10c      	bne.n	8004d82 <USB_EPStartXfer+0x18a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d68:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8004d6c:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d70:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	@ 0xb00
 8004d74:	bf0c      	ite	eq
 8004d76:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d7a:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8004d7e:	f8c4 3b00 	str.w	r3, [r4, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d82:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	@ 0xb00
 8004d86:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d8a:	f8c4 3b00 	str.w	r3, [r4, #2816]	@ 0xb00
 8004d8e:	e772      	b.n	8004c76 <USB_EPStartXfer+0x7e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d90:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d92:	f8df c030 	ldr.w	ip, [pc, #48]	@ 8004dc4 <USB_EPStartXfer+0x1cc>
 8004d96:	f8d2 e010 	ldr.w	lr, [r2, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	fbb3 f3f5 	udiv	r3, r3, r5
 8004da0:	b29b      	uxth	r3, r3
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004da2:	435d      	muls	r5, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004da4:	ea0c 43c3 	and.w	r3, ip, r3, lsl #19
 8004da8:	ea43 030e 	orr.w	r3, r3, lr
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004dac:	61cd      	str	r5, [r1, #28]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004dae:	f3c5 0512 	ubfx	r5, r5, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004db2:	6113      	str	r3, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004db4:	6913      	ldr	r3, [r2, #16]
 8004db6:	431d      	orrs	r5, r3
 8004db8:	6115      	str	r5, [r2, #16]
 8004dba:	e7ce      	b.n	8004d5a <USB_EPStartXfer+0x162>
 8004dbc:	e007ffff 	.word	0xe007ffff
 8004dc0:	fff80000 	.word	0xfff80000
 8004dc4:	1ff80000 	.word	0x1ff80000

08004dc8 <USB_ReadPacket>:
{
 8004dc8:	4603      	mov	r3, r0
  for (i = 0U; i < count32b; i++)
 8004dca:	2000      	movs	r0, #0
{
 8004dcc:	b570      	push	{r4, r5, r6, lr}
  uint32_t count32b = (uint32_t)len >> 2U;
 8004dce:	0894      	lsrs	r4, r2, #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004dd0:	f503 5580 	add.w	r5, r3, #4096	@ 0x1000
  uint16_t remaining_bytes = len % 4U;
 8004dd4:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d310      	bcc.n	8004dfe <USB_ReadPacket+0x36>
 8004ddc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
  if (remaining_bytes != 0U)
 8004de0:	b162      	cbz	r2, 8004dfc <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de6:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 8004de8:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004dea:	00d9      	lsls	r1, r3, #3
 8004dec:	fa24 f101 	lsr.w	r1, r4, r1
 8004df0:	54c1      	strb	r1, [r0, r3]
      i++;
 8004df2:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 8004df4:	b299      	uxth	r1, r3
 8004df6:	428a      	cmp	r2, r1
 8004df8:	d1f7      	bne.n	8004dea <USB_ReadPacket+0x22>
      pDest++;
 8004dfa:	4410      	add	r0, r2
}
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004dfe:	682e      	ldr	r6, [r5, #0]
 8004e00:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
  for (i = 0U; i < count32b; i++)
 8004e04:	3001      	adds	r0, #1
 8004e06:	e7e7      	b.n	8004dd8 <USB_ReadPacket+0x10>

08004e08 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8004e08:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8004e0a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004e0c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e0e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8004e12:	d112      	bne.n	8004e3a <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e14:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8004e18:	2a00      	cmp	r2, #0
 8004e1a:	db06      	blt.n	8004e2a <USB_EPSetStall+0x22>
 8004e1c:	b12b      	cbz	r3, 8004e2a <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e1e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004e22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e26:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e2a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004e2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e32:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004e36:	2000      	movs	r0, #0
 8004e38:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e3a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	db06      	blt.n	8004e50 <USB_EPSetStall+0x48>
 8004e42:	b12b      	cbz	r3, 8004e50 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e44:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004e48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e4c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e50:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004e54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e58:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004e5c:	e7eb      	b.n	8004e36 <USB_EPSetStall+0x2e>

08004e5e <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e5e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8004e60:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e62:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e66:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 8004e68:	2a01      	cmp	r2, #1
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e6a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e6e:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 8004e70:	d10f      	bne.n	8004e92 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e72:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e76:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e78:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004e7c:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e80:	d805      	bhi.n	8004e8e <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e82:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 8004e8e:	2000      	movs	r0, #0
 8004e90:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e92:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e96:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e98:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004e9c:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ea0:	d8f5      	bhi.n	8004e8e <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ea2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8004eae:	e7ee      	b.n	8004e8e <USB_EPClearStall+0x30>

08004eb0 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004eb0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004eb4:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004eb6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004eba:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ebe:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ec2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8004ec6:	4319      	orrs	r1, r3
 8004ec8:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8004ecc:	2000      	movs	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ed0:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004ed4:	f023 0303 	bic.w	r3, r3, #3
 8004ed8:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004edc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004ee0:	f023 0302 	bic.w	r3, r3, #2
 8004ee4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004ee8:	2000      	movs	r0, #0
 8004eea:	4770      	bx	lr

08004eec <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004eec:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004ef0:	f023 0303 	bic.w	r3, r3, #3
 8004ef4:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ef8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004efc:	f043 0302 	orr.w	r3, r3, #2
 8004f00:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004f04:	2000      	movs	r0, #0
 8004f06:	4770      	bx	lr

08004f08 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004f08:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004f0a:	6980      	ldr	r0, [r0, #24]
}
 8004f0c:	4010      	ands	r0, r2
 8004f0e:	4770      	bx	lr

08004f10 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004f10:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004f14:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f18:	69c0      	ldr	r0, [r0, #28]
 8004f1a:	4018      	ands	r0, r3
}
 8004f1c:	0c00      	lsrs	r0, r0, #16
 8004f1e:	4770      	bx	lr

08004f20 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8004f20:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8004f24:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f28:	69c0      	ldr	r0, [r0, #28]
 8004f2a:	4018      	ands	r0, r3
}
 8004f2c:	b280      	uxth	r0, r0
 8004f2e:	4770      	bx	lr

08004f30 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f30:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f34:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f38:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f3c:	6940      	ldr	r0, [r0, #20]
}
 8004f3e:	4010      	ands	r0, r2
 8004f40:	4770      	bx	lr

08004f42 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8004f42:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f46:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f4a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f4e:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f52:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f56:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f58:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f5a:	01db      	lsls	r3, r3, #7
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	4313      	orrs	r3, r2
}
 8004f60:	4018      	ands	r0, r3
 8004f62:	4770      	bx	lr

08004f64 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004f64:	6940      	ldr	r0, [r0, #20]
}
 8004f66:	f000 0001 	and.w	r0, r0, #1
 8004f6a:	4770      	bx	lr

08004f6c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f6c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8004f70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f7c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f84:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004f88:	2000      	movs	r0, #0
 8004f8a:	4770      	bx	lr

08004f8c <USB_EP0_OutStart>:
{
 8004f8c:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f8e:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f90:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f94:	4c0f      	ldr	r4, [pc, #60]	@ (8004fd4 <USB_EP0_OutStart+0x48>)
 8004f96:	42a5      	cmp	r5, r4
 8004f98:	d903      	bls.n	8004fa2 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f9a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	@ 0xb00
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	db16      	blt.n	8004fd0 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fa2:	2400      	movs	r4, #0
  if (dma == 1U)
 8004fa4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fa6:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fa8:	691c      	ldr	r4, [r3, #16]
 8004faa:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8004fae:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fb0:	691c      	ldr	r4, [r3, #16]
 8004fb2:	f044 0418 	orr.w	r4, r4, #24
 8004fb6:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fb8:	691c      	ldr	r4, [r3, #16]
 8004fba:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8004fbe:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8004fc0:	d106      	bne.n	8004fd0 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004fc2:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004fc4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8004fc8:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004fcc:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	bd30      	pop	{r4, r5, pc}
 8004fd4:	4f54300a 	.word	0x4f54300a

08004fd8 <USBD_AUDIO_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8004fd8:	236d      	movs	r3, #109	@ 0x6d
 8004fda:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_CfgDesc;
}
 8004fdc:	4800      	ldr	r0, [pc, #0]	@ (8004fe0 <USBD_AUDIO_GetCfgDesc+0x8>)
 8004fde:	4770      	bx	lr
 8004fe0:	200000ac 	.word	0x200000ac

08004fe4 <USBD_AUDIO_DataIn>:
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
}
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	4770      	bx	lr

08004fe8 <USBD_AUDIO_EP0_RxReady>:
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fe8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8004fec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8004ff0:	b510      	push	{r4, lr}
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ff2:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0

  if (haudio == NULL)
 8004ff6:	b1bc      	cbz	r4, 8005028 <USBD_AUDIO_EP0_RxReady+0x40>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8004ff8:	f504 5440 	add.w	r4, r4, #12288	@ 0x3000
 8004ffc:	f894 3c0a 	ldrb.w	r3, [r4, #3082]	@ 0xc0a
 8005000:	2b01      	cmp	r3, #1
 8005002:	d103      	bne.n	800500c <USBD_AUDIO_EP0_RxReady+0x24>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8005004:	f894 3c4c 	ldrb.w	r3, [r4, #3148]	@ 0xc4c
 8005008:	2b02      	cmp	r3, #2
 800500a:	d001      	beq.n	8005010 <USBD_AUDIO_EP0_RxReady+0x28>
      haudio->control.cmd = 0U;
      haudio->control.len = 0U;
    }
  }

  return (uint8_t)USBD_OK;
 800500c:	2000      	movs	r0, #0
}
 800500e:	bd10      	pop	{r4, pc}
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8005010:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
 8005014:	f894 0c0b 	ldrb.w	r0, [r4, #3083]	@ 0xc0b
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	f884 3c0a 	strb.w	r3, [r4, #3082]	@ 0xc0a
      haudio->control.len = 0U;
 8005022:	f884 3c4b 	strb.w	r3, [r4, #3147]	@ 0xc4b
 8005026:	e7f1      	b.n	800500c <USBD_AUDIO_EP0_RxReady+0x24>
    return (uint8_t)USBD_FAIL;
 8005028:	2003      	movs	r0, #3
 800502a:	e7f0      	b.n	800500e <USBD_AUDIO_EP0_RxReady+0x26>

0800502c <USBD_AUDIO_EP0_TxReady>:
{
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
}
 800502c:	2000      	movs	r0, #0
 800502e:	4770      	bx	lr

08005030 <USBD_AUDIO_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8005030:	230a      	movs	r3, #10
 8005032:	8003      	strh	r3, [r0, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
}
 8005034:	4800      	ldr	r0, [pc, #0]	@ (8005038 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 8005036:	4770      	bx	lr
 8005038:	2000011c 	.word	0x2000011c

0800503c <USBD_AUDIO_DataOut>:
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800503c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8005040:	33b0      	adds	r3, #176	@ 0xb0
{
 8005042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005046:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
{
 800504a:	4604      	mov	r4, r0
 800504c:	4688      	mov	r8, r1
  if (haudio == NULL)
 800504e:	2f00      	cmp	r7, #0
 8005050:	d049      	beq.n	80050e6 <USBD_AUDIO_DataOut+0xaa>
  if (epnum == AUDIOOutEpAdd)
 8005052:	2901      	cmp	r1, #1
 8005054:	d002      	beq.n	800505c <USBD_AUDIO_DataOut+0x20>
  return (uint8_t)USBD_OK;
 8005056:	2000      	movs	r0, #0
}
 8005058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800505c:	f7fb fd2b 	bl	8000ab6 <USBD_LL_GetRxDataSize>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8005060:	f507 5540 	add.w	r5, r7, #12288	@ 0x3000
 8005064:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8005068:	4606      	mov	r6, r0
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800506a:	f8b5 0c08 	ldrh.w	r0, [r5, #3080]	@ 0xc08
 800506e:	4642      	mov	r2, r8
 8005070:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005074:	3004      	adds	r0, #4
 8005076:	b2b1      	uxth	r1, r6
 8005078:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800507c:	4438      	add	r0, r7
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	4798      	blx	r3
    haudio->wr_ptr += PacketSize;
 8005082:	f8b5 3c08 	ldrh.w	r3, [r5, #3080]	@ 0xc08
 8005086:	441e      	add	r6, r3
 8005088:	b2b6      	uxth	r6, r6
    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 800508a:	f5b6 5f70 	cmp.w	r6, #15360	@ 0x3c00
 800508e:	d214      	bcs.n	80050ba <USBD_AUDIO_DataOut+0x7e>
    haudio->wr_ptr += PacketSize;
 8005090:	f8a5 6c08 	strh.w	r6, [r5, #3080]	@ 0xc08
    if (haudio->rd_enable == 0U)
 8005094:	f895 3c05 	ldrb.w	r3, [r5, #3077]	@ 0xc05
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8005098:	f8b5 2c08 	ldrh.w	r2, [r5, #3080]	@ 0xc08
    if (haudio->rd_enable == 0U)
 800509c:	b92b      	cbnz	r3, 80050aa <USBD_AUDIO_DataOut+0x6e>
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800509e:	f5b2 5ff0 	cmp.w	r2, #7680	@ 0x1e00
        haudio->rd_enable = 1U;
 80050a2:	bf04      	itt	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	f885 3c05 	strbeq.w	r3, [r5, #3077]	@ 0xc05
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80050aa:	3204      	adds	r2, #4
 80050ac:	23c0      	movs	r3, #192	@ 0xc0
 80050ae:	2101      	movs	r1, #1
 80050b0:	4620      	mov	r0, r4
 80050b2:	443a      	add	r2, r7
 80050b4:	f7fb fcf8 	bl	8000aa8 <USBD_LL_PrepareReceive>
 80050b8:	e7cd      	b.n	8005056 <USBD_AUDIO_DataOut+0x1a>
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80050ba:	f895 3c04 	ldrb.w	r3, [r5, #3076]	@ 0xc04
      haudio->wr_ptr = 0U;
 80050be:	2600      	movs	r6, #0
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80050c0:	2b03      	cmp	r3, #3
      haudio->wr_ptr = 0U;
 80050c2:	f8a5 6c08 	strh.w	r6, [r5, #3080]	@ 0xc08
      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80050c6:	d1e5      	bne.n	8005094 <USBD_AUDIO_DataOut+0x58>
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 80050c8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80050cc:	4642      	mov	r2, r8
 80050ce:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80050d2:	1d38      	adds	r0, r7, #4
 80050d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80050d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4798      	blx	r3
        haudio->offset = AUDIO_OFFSET_NONE;
 80050e0:	f885 6c04 	strb.w	r6, [r5, #3076]	@ 0xc04
 80050e4:	e7d6      	b.n	8005094 <USBD_AUDIO_DataOut+0x58>
    return (uint8_t)USBD_FAIL;
 80050e6:	2003      	movs	r0, #3
 80050e8:	e7b6      	b.n	8005058 <USBD_AUDIO_DataOut+0x1c>
	...

080050ec <USBD_AUDIO_Setup>:
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050ec:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80050f0:	33b0      	adds	r3, #176	@ 0xb0
{
 80050f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050f4:	460d      	mov	r5, r1
  uint16_t status_info = 0U;
 80050f6:	2700      	movs	r7, #0
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050f8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
{
 80050fc:	4604      	mov	r4, r0
  uint16_t status_info = 0U;
 80050fe:	f8ad 7004 	strh.w	r7, [sp, #4]
  if (haudio == NULL)
 8005102:	2900      	cmp	r1, #0
 8005104:	d06f      	beq.n	80051e6 <USBD_AUDIO_Setup+0xfa>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005106:	782b      	ldrb	r3, [r5, #0]
 8005108:	f013 0360 	ands.w	r3, r3, #96	@ 0x60
 800510c:	d02f      	beq.n	800516e <USBD_AUDIO_Setup+0x82>
 800510e:	2b20      	cmp	r3, #32
 8005110:	d165      	bne.n	80051de <USBD_AUDIO_Setup+0xf2>
      switch (req->bRequest)
 8005112:	786e      	ldrb	r6, [r5, #1]
 8005114:	2e01      	cmp	r6, #1
 8005116:	d012      	beq.n	800513e <USBD_AUDIO_Setup+0x52>
 8005118:	2e81      	cmp	r6, #129	@ 0x81
 800511a:	d160      	bne.n	80051de <USBD_AUDIO_Setup+0xf2>
  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800511c:	f501 5370 	add.w	r3, r1, #15360	@ 0x3c00
 8005120:	2240      	movs	r2, #64	@ 0x40
 8005122:	4639      	mov	r1, r7
 8005124:	330b      	adds	r3, #11
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fe10 	bl	8005d4c <memset>
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800512c:	88ea      	ldrh	r2, [r5, #6]
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800512e:	4601      	mov	r1, r0
 8005130:	2a40      	cmp	r2, #64	@ 0x40
 8005132:	bf28      	it	cs
 8005134:	2240      	movcs	r2, #64	@ 0x40
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8005136:	4620      	mov	r0, r4
 8005138:	f000 fd0a 	bl	8005b50 <USBD_CtlSendData>
 800513c:	e001      	b.n	8005142 <USBD_AUDIO_Setup+0x56>
  if (req->wLength != 0U)
 800513e:	88ea      	ldrh	r2, [r5, #6]
 8005140:	b912      	cbnz	r2, 8005148 <USBD_AUDIO_Setup+0x5c>
  USBD_StatusTypeDef ret = USBD_OK;
 8005142:	2000      	movs	r0, #0
}
 8005144:	b003      	add	sp, #12
 8005146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8005148:	2a40      	cmp	r2, #64	@ 0x40
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800514a:	f501 5340 	add.w	r3, r1, #12288	@ 0x3000
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800514e:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8005152:	bf28      	it	cs
 8005154:	2240      	movcs	r2, #64	@ 0x40
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8005156:	f883 6c0a 	strb.w	r6, [r3, #3082]	@ 0xc0a
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800515a:	310b      	adds	r1, #11
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800515c:	f883 2c4b 	strb.w	r2, [r3, #3147]	@ 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8005160:	88ac      	ldrh	r4, [r5, #4]
 8005162:	0a24      	lsrs	r4, r4, #8
 8005164:	f883 4c4c 	strb.w	r4, [r3, #3148]	@ 0xc4c
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8005168:	f000 fd07 	bl	8005b7a <USBD_CtlPrepareRx>
 800516c:	e7e9      	b.n	8005142 <USBD_AUDIO_Setup+0x56>
      switch (req->bRequest)
 800516e:	786b      	ldrb	r3, [r5, #1]
 8005170:	2b0b      	cmp	r3, #11
 8005172:	d834      	bhi.n	80051de <USBD_AUDIO_Setup+0xf2>
 8005174:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <USBD_AUDIO_Setup+0x90>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	080051ad 	.word	0x080051ad
 8005180:	08005143 	.word	0x08005143
 8005184:	080051df 	.word	0x080051df
 8005188:	080051df 	.word	0x080051df
 800518c:	080051df 	.word	0x080051df
 8005190:	080051df 	.word	0x080051df
 8005194:	080051bb 	.word	0x080051bb
 8005198:	080051df 	.word	0x080051df
 800519c:	080051df 	.word	0x080051df
 80051a0:	080051df 	.word	0x080051df
 80051a4:	0800520b 	.word	0x0800520b
 80051a8:	08005217 	.word	0x08005217
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ac:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d114      	bne.n	80051de <USBD_AUDIO_Setup+0xf2>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80051b4:	2202      	movs	r2, #2
 80051b6:	a901      	add	r1, sp, #4
 80051b8:	e7bd      	b.n	8005136 <USBD_AUDIO_Setup+0x4a>
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80051ba:	886b      	ldrh	r3, [r5, #2]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	2b21      	cmp	r3, #33	@ 0x21
 80051c0:	d1bf      	bne.n	8005142 <USBD_AUDIO_Setup+0x56>
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 80051c2:	f8d0 62d0 	ldr.w	r6, [r0, #720]	@ 0x2d0
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  uint8_t *pAudioDesc =  NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80051c6:	7833      	ldrb	r3, [r6, #0]
 80051c8:	8872      	ldrh	r2, [r6, #2]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d907      	bls.n	80051de <USBD_AUDIO_Setup+0xf2>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 80051ce:	4630      	mov	r0, r6
    ptr = desc->bLength;
 80051d0:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 80051d4:	8872      	ldrh	r2, [r6, #2]
 80051d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d805      	bhi.n	80051ea <USBD_AUDIO_Setup+0xfe>
            USBD_CtlError(pdev, req);
 80051de:	4629      	mov	r1, r5
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 fc8e 	bl	8005b02 <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 80051e6:	2003      	movs	r0, #3
 80051e8:	e7ac      	b.n	8005144 <USBD_AUDIO_Setup+0x58>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80051ea:	f10d 0106 	add.w	r1, sp, #6
 80051ee:	f000 fa5a 	bl	80056a6 <USBD_GetNextDesc>
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80051f2:	7843      	ldrb	r3, [r0, #1]
 80051f4:	2b24      	cmp	r3, #36	@ 0x24
 80051f6:	d1ed      	bne.n	80051d4 <USBD_AUDIO_Setup+0xe8>
 80051f8:	7883      	ldrb	r3, [r0, #2]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d1ea      	bne.n	80051d4 <USBD_AUDIO_Setup+0xe8>
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 80051fe:	88ea      	ldrh	r2, [r5, #6]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8005200:	4601      	mov	r1, r0
 8005202:	2a09      	cmp	r2, #9
 8005204:	bf28      	it	cs
 8005206:	2209      	movcs	r2, #9
 8005208:	e795      	b.n	8005136 <USBD_AUDIO_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800520a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800520e:	2b03      	cmp	r3, #3
 8005210:	d1e5      	bne.n	80051de <USBD_AUDIO_Setup+0xf2>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8005212:	2201      	movs	r2, #1
 8005214:	e78f      	b.n	8005136 <USBD_AUDIO_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005216:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800521a:	2b03      	cmp	r3, #3
 800521c:	d1df      	bne.n	80051de <USBD_AUDIO_Setup+0xf2>
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 800521e:	78ab      	ldrb	r3, [r5, #2]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d8dc      	bhi.n	80051de <USBD_AUDIO_Setup+0xf2>
              haudio->alt_setting = (uint8_t)(req->wValue);
 8005224:	600b      	str	r3, [r1, #0]
 8005226:	e78c      	b.n	8005142 <USBD_AUDIO_Setup+0x56>

08005228 <USBD_AUDIO_DeInit>:
{
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 800522c:	2101      	movs	r1, #1
 800522e:	f7fb fc08 	bl	8000a42 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8005232:	2500      	movs	r5, #0
 8005234:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005238:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800523c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005240:	f8d3 22c0 	ldr.w	r2, [r3, #704]	@ 0x2c0
 8005244:	b192      	cbz	r2, 800526c <USBD_AUDIO_DeInit+0x44>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8005246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800524a:	4628      	mov	r0, r5
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005250:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005254:	33b0      	adds	r3, #176	@ 0xb0
 8005256:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800525a:	f000 fcc1 	bl	8005be0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800525e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005262:	33b0      	adds	r3, #176	@ 0xb0
 8005264:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8005268:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 800526c:	2000      	movs	r0, #0
 800526e:	bd38      	pop	{r3, r4, r5, pc}

08005270 <USBD_AUDIO_Init>:
{
 8005270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	4604      	mov	r4, r0
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8005276:	f643 4050 	movw	r0, #15440	@ 0x3c50
 800527a:	f000 fca9 	bl	8005bd0 <malloc>
  if (haudio == NULL)
 800527e:	4605      	mov	r5, r0
 8005280:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005284:	33b0      	adds	r3, #176	@ 0xb0
 8005286:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  if (haudio == NULL)
 800528a:	b910      	cbnz	r0, 8005292 <USBD_AUDIO_Init+0x22>
    return (uint8_t)USBD_EMEM;
 800528c:	2002      	movs	r0, #2
}
 800528e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005292:	2701      	movs	r7, #1
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8005294:	23c0      	movs	r3, #192	@ 0xc0
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005296:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800529a:	4620      	mov	r0, r4
 800529c:	463a      	mov	r2, r7
 800529e:	4639      	mov	r1, r7
 80052a0:	f8a4 717a 	strh.w	r7, [r4, #378]	@ 0x17a
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80052a4:	2603      	movs	r6, #3
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 80052a6:	f7fb fbc2 	bl	8000a2e <USBD_LL_OpenEP>
  haudio->alt_setting = 0U;
 80052aa:	2200      	movs	r2, #0
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80052ac:	f505 5340 	add.w	r3, r5, #12288	@ 0x3000
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 80052b0:	2146      	movs	r1, #70	@ 0x46
  haudio->alt_setting = 0U;
 80052b2:	602a      	str	r2, [r5, #0]
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 80052b4:	f64b 3080 	movw	r0, #48000	@ 0xbb80
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80052b8:	f8c3 6c04 	str.w	r6, [r3, #3076]	@ 0xc04
  haudio->wr_ptr = 0U;
 80052bc:	f8a3 2c08 	strh.w	r2, [r3, #3080]	@ 0xc08
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 80052c0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 80052c4:	f8a4 7178 	strh.w	r7, [r4, #376]	@ 0x178
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 80052c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4798      	blx	r3
 80052d4:	4680      	mov	r8, r0
 80052d6:	b938      	cbnz	r0, 80052e8 <USBD_AUDIO_Init+0x78>
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 80052d8:	23c0      	movs	r3, #192	@ 0xc0
 80052da:	1d2a      	adds	r2, r5, #4
 80052dc:	4639      	mov	r1, r7
 80052de:	4620      	mov	r0, r4
 80052e0:	f7fb fbe2 	bl	8000aa8 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80052e4:	4640      	mov	r0, r8
 80052e6:	e7d2      	b.n	800528e <USBD_AUDIO_Init+0x1e>
    return (uint8_t)USBD_FAIL;
 80052e8:	4630      	mov	r0, r6
 80052ea:	e7d0      	b.n	800528e <USBD_AUDIO_Init+0x1e>

080052ec <USBD_AUDIO_IsoINIncomplete>:
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 80052ec:	2000      	movs	r0, #0
 80052ee:	4770      	bx	lr

080052f0 <USBD_AUDIO_IsoOutIncomplete>:
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 80052f0:	2000      	movs	r0, #0
 80052f2:	4770      	bx	lr

080052f4 <USBD_AUDIO_SOF>:
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
 80052f4:	2000      	movs	r0, #0
 80052f6:	4770      	bx	lr

080052f8 <USBD_AUDIO_Sync>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052f8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
{
 80052fc:	460a      	mov	r2, r1
 80052fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005302:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005304:	f8d0 62c0 	ldr.w	r6, [r0, #704]	@ 0x2c0
 8005308:	b36e      	cbz	r6, 8005366 <USBD_AUDIO_Sync+0x6e>
  haudio->offset = offset;
 800530a:	f506 5440 	add.w	r4, r6, #12288	@ 0x3000
 800530e:	f884 1c04 	strb.w	r1, [r4, #3076]	@ 0xc04
  if (haudio->rd_enable == 1U)
 8005312:	f894 1c05 	ldrb.w	r1, [r4, #3077]	@ 0xc05
    haudio->rd_ptr += (uint16_t)BufferSize;
 8005316:	f8b4 3c06 	ldrh.w	r3, [r4, #3078]	@ 0xc06
  if (haudio->rd_enable == 1U)
 800531a:	2901      	cmp	r1, #1
 800531c:	d108      	bne.n	8005330 <USBD_AUDIO_Sync+0x38>
    haudio->rd_ptr += (uint16_t)BufferSize;
 800531e:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005322:	b29b      	uxth	r3, r3
    if (haudio->rd_ptr == AUDIO_TOTAL_BUF_SIZE)
 8005324:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
      haudio->rd_ptr = 0U;
 8005328:	bf08      	it	eq
 800532a:	2300      	moveq	r3, #0
 800532c:	f8a4 3c06 	strh.w	r3, [r4, #3078]	@ 0xc06
  if (haudio->rd_ptr > haudio->wr_ptr)
 8005330:	f8b4 5c06 	ldrh.w	r5, [r4, #3078]	@ 0xc06
 8005334:	f8b4 3c08 	ldrh.w	r3, [r4, #3080]	@ 0xc08
 8005338:	429d      	cmp	r5, r3
 800533a:	d915      	bls.n	8005368 <USBD_AUDIO_Sync+0x70>
    if ((haudio->rd_ptr - haudio->wr_ptr) < AUDIO_OUT_PACKET)
 800533c:	1aed      	subs	r5, r5, r3
 800533e:	2dbf      	cmp	r5, #191	@ 0xbf
 8005340:	dd1a      	ble.n	8005378 <USBD_AUDIO_Sync+0x80>
      BufferSize -= 4U;
 8005342:	f5b5 5f6d 	cmp.w	r5, #15168	@ 0x3b40
 8005346:	f641 53fc 	movw	r3, #7676	@ 0x1dfc
        BufferSize += 4U;
 800534a:	bfd4      	ite	le
 800534c:	f44f 51f0 	movle.w	r1, #7680	@ 0x1e00
 8005350:	4619      	movgt	r1, r3
  if (haudio->offset == AUDIO_OFFSET_FULL)
 8005352:	2a02      	cmp	r2, #2
 8005354:	d107      	bne.n	8005366 <USBD_AUDIO_Sync+0x6e>
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8005356:	f8d0 32c4 	ldr.w	r3, [r0, #708]	@ 0x2c4
 800535a:	1d30      	adds	r0, r6, #4
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	4798      	blx	r3
    haudio->offset = AUDIO_OFFSET_NONE;
 8005360:	2300      	movs	r3, #0
 8005362:	f884 3c04 	strb.w	r3, [r4, #3076]	@ 0xc04
}
 8005366:	bd70      	pop	{r4, r5, r6, pc}
    if ((haudio->wr_ptr - haudio->rd_ptr) < AUDIO_OUT_PACKET)
 8005368:	1b5b      	subs	r3, r3, r5
 800536a:	2bbf      	cmp	r3, #191	@ 0xbf
 800536c:	dd07      	ble.n	800537e <USBD_AUDIO_Sync+0x86>
        BufferSize += 4U;
 800536e:	f5b3 5f6d 	cmp.w	r3, #15168	@ 0x3b40
 8005372:	f641 6304 	movw	r3, #7684	@ 0x1e04
 8005376:	e7e8      	b.n	800534a <USBD_AUDIO_Sync+0x52>
 8005378:	f641 6104 	movw	r1, #7684	@ 0x1e04
 800537c:	e7e9      	b.n	8005352 <USBD_AUDIO_Sync+0x5a>
      BufferSize -= 4U;
 800537e:	f641 51fc 	movw	r1, #7676	@ 0x1dfc
 8005382:	e7e6      	b.n	8005352 <USBD_AUDIO_Sync+0x5a>

08005384 <USBD_AUDIO_RegisterInterface>:
  if (fops == NULL)
 8005384:	b139      	cbz	r1, 8005396 <USBD_AUDIO_RegisterInterface+0x12>
  pdev->pUserData[pdev->classId] = fops;
 8005386:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800538a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800538e:	f8c0 12c4 	str.w	r1, [r0, #708]	@ 0x2c4
  return (uint8_t)USBD_OK;
 8005392:	2000      	movs	r0, #0
 8005394:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005396:	2003      	movs	r0, #3
}
 8005398:	4770      	bx	lr

0800539a <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800539a:	b178      	cbz	r0, 80053bc <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80053a2:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80053a6:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053aa:	b109      	cbz	r1, 80053b0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80053ac:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053b0:	2301      	movs	r3, #1
  pdev->id = id;
 80053b2:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053b4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80053b8:	f7fb bb0c 	b.w	80009d4 <USBD_LL_Init>

  return ret;
}
 80053bc:	2003      	movs	r0, #3
 80053be:	4770      	bx	lr

080053c0 <USBD_RegisterClass>:
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  uint16_t len = 0U;
 80053c0:	2300      	movs	r3, #0
{
 80053c2:	b513      	push	{r0, r1, r4, lr}
 80053c4:	4604      	mov	r4, r0
  uint16_t len = 0U;
 80053c6:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 80053ca:	b181      	cbz	r1, 80053ee <USBD_RegisterClass+0x2e>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80053cc:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 80053ce:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80053d2:	b123      	cbz	r3, 80053de <USBD_RegisterClass+0x1e>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80053d4:	f10d 0006 	add.w	r0, sp, #6
 80053d8:	4798      	blx	r3
 80053da:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80053de:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 80053e2:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 80053e4:	3301      	adds	r3, #1
 80053e6:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
}
 80053ea:	b002      	add	sp, #8
 80053ec:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80053ee:	2003      	movs	r0, #3
 80053f0:	e7fb      	b.n	80053ea <USBD_RegisterClass+0x2a>

080053f2 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80053f2:	f7fb bb15 	b.w	8000a20 <USBD_LL_Start>

080053f6 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80053f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80053fa:	b10b      	cbz	r3, 8005400 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005400:	4618      	mov	r0, r3
 8005402:	4770      	bx	lr

08005404 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005404:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005406:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800540e:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8005410:	bf18      	it	ne
 8005412:	2003      	movne	r0, #3
 8005414:	bd08      	pop	{r3, pc}

08005416 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005416:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005418:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
{
 800541c:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800541e:	4628      	mov	r0, r5
 8005420:	f000 fb64 	bl	8005aec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005424:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005426:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800542a:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800542e:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8005432:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005436:	f001 031f 	and.w	r3, r1, #31
 800543a:	2b01      	cmp	r3, #1
 800543c:	d008      	beq.n	8005450 <USBD_LL_SetupStage+0x3a>
 800543e:	2b02      	cmp	r3, #2
 8005440:	d00c      	beq.n	800545c <USBD_LL_SetupStage+0x46>
 8005442:	b98b      	cbnz	r3, 8005468 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005444:	4629      	mov	r1, r5
 8005446:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8005448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800544c:	f000 b93c 	b.w	80056c8 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005450:	4629      	mov	r1, r5
 8005452:	4620      	mov	r0, r4
}
 8005454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005458:	f000 ba7c 	b.w	8005954 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800545c:	4629      	mov	r1, r5
 800545e:	4620      	mov	r0, r4
}
 8005460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005464:	f000 baa3 	b.w	80059ae <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005468:	4620      	mov	r0, r4
 800546a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
}
 800546e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005472:	f7fb baed 	b.w	8000a50 <USBD_LL_StallEP>

08005476 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005476:	b570      	push	{r4, r5, r6, lr}
 8005478:	4604      	mov	r4, r0
 800547a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800547c:	bb09      	cbnz	r1, 80054c2 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800547e:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8005482:	2b03      	cmp	r3, #3
 8005484:	d10c      	bne.n	80054a0 <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8005486:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	@ 0x15c
 800548a:	4293      	cmp	r3, r2
 800548c:	d90a      	bls.n	80054a4 <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 800548e:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005490:	4631      	mov	r1, r6
 8005492:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8005494:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005498:	bf28      	it	cs
 800549a:	461a      	movcs	r2, r3
 800549c:	f000 fb7a 	bl	8005b94 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 80054a0:	2000      	movs	r0, #0
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d106      	bne.n	80054ba <USBD_LL_DataOutStage+0x44>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80054ac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	b113      	cbz	r3, 80054ba <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 80054b4:	f8c0 12d4 	str.w	r1, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80054b8:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fb72 	bl	8005ba4 <USBD_CtlSendStatus>
 80054c0:	e7ee      	b.n	80054a0 <USBD_LL_DataOutStage+0x2a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d1ea      	bne.n	80054a0 <USBD_LL_DataOutStage+0x2a>
        if (pdev->pClass[idx]->DataOut != NULL)
 80054ca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0e5      	beq.n	80054a0 <USBD_LL_DataOutStage+0x2a>
          pdev->classId = idx;
 80054d4:	2200      	movs	r2, #0
}
 80054d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80054da:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80054de:	4718      	bx	r3

080054e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80054e0:	b570      	push	{r4, r5, r6, lr}
 80054e2:	4604      	mov	r4, r0
 80054e4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80054e6:	460d      	mov	r5, r1
 80054e8:	2900      	cmp	r1, #0
 80054ea:	d13d      	bne.n	8005568 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054ec:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d10e      	bne.n	8005512 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 80054f4:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d912      	bls.n	8005522 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 80054fc:	1a9a      	subs	r2, r3, r2

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054fe:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8005500:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005502:	f000 fb32 	bl	8005b6a <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005506:	462b      	mov	r3, r5
 8005508:	462a      	mov	r2, r5
 800550a:	4629      	mov	r1, r5
 800550c:	4620      	mov	r0, r4
 800550e:	f7fb facb 	bl	8000aa8 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005512:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005516:	b113      	cbz	r3, 800551e <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800551e:	2000      	movs	r0, #0
 8005520:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8005522:	d10c      	bne.n	800553e <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 8005524:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8005526:	4293      	cmp	r3, r2
 8005528:	d809      	bhi.n	800553e <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 800552a:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
 800552e:	429a      	cmp	r2, r3
 8005530:	d205      	bcs.n	800553e <USBD_LL_DataInStage+0x5e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005532:	460a      	mov	r2, r1
 8005534:	f000 fb19 	bl	8005b6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005538:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 800553c:	e7e3      	b.n	8005506 <USBD_LL_DataInStage+0x26>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800553e:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005542:	2b03      	cmp	r3, #3
 8005544:	d108      	bne.n	8005558 <USBD_LL_DataInStage+0x78>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005546:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	b123      	cbz	r3, 8005558 <USBD_LL_DataInStage+0x78>
              pdev->classId = 0U;
 800554e:	2200      	movs	r2, #0
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005550:	4620      	mov	r0, r4
              pdev->classId = 0U;
 8005552:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005556:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005558:	2180      	movs	r1, #128	@ 0x80
 800555a:	4620      	mov	r0, r4
 800555c:	f7fb fa78 	bl	8000a50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fb2a 	bl	8005bba <USBD_CtlReceiveStatus>
 8005566:	e7d4      	b.n	8005512 <USBD_LL_DataInStage+0x32>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005568:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800556c:	2b03      	cmp	r3, #3
 800556e:	d1d6      	bne.n	800551e <USBD_LL_DataInStage+0x3e>
        if (pdev->pClass[idx]->DataIn != NULL)
 8005570:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0d1      	beq.n	800551e <USBD_LL_DataInStage+0x3e>
          pdev->classId = idx;
 800557a:	2200      	movs	r2, #0
}
 800557c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8005580:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005584:	4718      	bx	r3

08005586 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005588:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 800558a:	2100      	movs	r1, #0
{
 800558c:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800558e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005592:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8005596:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 800559a:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800559c:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80055a0:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 80055a4:	b9b3      	cbnz	r3, 80055d4 <USBD_LL_Reset+0x4e>
  USBD_StatusTypeDef ret = USBD_OK;
 80055a6:	2600      	movs	r6, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055a8:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80055aa:	2540      	movs	r5, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80055ac:	2701      	movs	r7, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055ae:	2340      	movs	r3, #64	@ 0x40
 80055b0:	4611      	mov	r1, r2
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7fb fa3b 	bl	8000a2e <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055b8:	462b      	mov	r3, r5
 80055ba:	2200      	movs	r2, #0
 80055bc:	2180      	movs	r1, #128	@ 0x80
 80055be:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80055c0:	f8a4 7164 	strh.w	r7, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80055c4:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055c8:	f7fb fa31 	bl	8000a2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return ret;
}
 80055cc:	4630      	mov	r0, r6
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80055ce:	84a7      	strh	r7, [r4, #36]	@ 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80055d0:	6225      	str	r5, [r4, #32]
}
 80055d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdev->pClass[0]->DeInit != NULL)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0e5      	beq.n	80055a6 <USBD_LL_Reset+0x20>
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80055da:	4798      	blx	r3
 80055dc:	2800      	cmp	r0, #0
 80055de:	d0e2      	beq.n	80055a6 <USBD_LL_Reset+0x20>
        ret = USBD_FAIL;
 80055e0:	2603      	movs	r6, #3
 80055e2:	e7e1      	b.n	80055a8 <USBD_LL_Reset+0x22>

080055e4 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80055e4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80055e6:	2000      	movs	r0, #0
 80055e8:	4770      	bx	lr

080055ea <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80055ea:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80055f4:	2304      	movs	r3, #4
 80055f6:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80055fa:	2000      	movs	r0, #0
 80055fc:	4770      	bx	lr

080055fe <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80055fe:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005602:	2b04      	cmp	r3, #4
 8005604:	d104      	bne.n	8005610 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005606:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8005610:	2000      	movs	r0, #0
 8005612:	4770      	bx	lr

08005614 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005614:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005616:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800561a:	2a03      	cmp	r2, #3
 800561c:	d105      	bne.n	800562a <USBD_LL_SOF+0x16>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800561e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8005622:	b113      	cbz	r3, 800562a <USBD_LL_SOF+0x16>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	b103      	cbz	r3, 800562a <USBD_LL_SOF+0x16>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005628:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800562a:	2000      	movs	r0, #0
 800562c:	bd08      	pop	{r3, pc}

0800562e <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800562e:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005632:	32ae      	adds	r2, #174	@ 0xae
 8005634:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
{
 8005638:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800563a:	b14a      	cbz	r2, 8005650 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800563c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005640:	2b03      	cmp	r3, #3
 8005642:	d101      	bne.n	8005648 <USBD_LL_IsoINIncomplete+0x1a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005644:	6a13      	ldr	r3, [r2, #32]
 8005646:	b90b      	cbnz	r3, 800564c <USBD_LL_IsoINIncomplete+0x1e>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8005648:	2000      	movs	r0, #0
}
 800564a:	bd08      	pop	{r3, pc}
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800564c:	4798      	blx	r3
 800564e:	e7fb      	b.n	8005648 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 8005650:	2003      	movs	r0, #3
 8005652:	e7fa      	b.n	800564a <USBD_LL_IsoINIncomplete+0x1c>

08005654 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 8005654:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8005658:	32ae      	adds	r2, #174	@ 0xae
 800565a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
{
 800565e:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8005660:	b14a      	cbz	r2, 8005676 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005662:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005666:	2b03      	cmp	r3, #3
 8005668:	d101      	bne.n	800566e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800566a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800566c:	b90b      	cbnz	r3, 8005672 <USBD_LL_IsoOUTIncomplete+0x1e>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800566e:	2000      	movs	r0, #0
}
 8005670:	bd08      	pop	{r3, pc}
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005672:	4798      	blx	r3
 8005674:	e7fb      	b.n	800566e <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 8005676:	2003      	movs	r0, #3
 8005678:	e7fa      	b.n	8005670 <USBD_LL_IsoOUTIncomplete+0x1c>

0800567a <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 800567a:	2000      	movs	r0, #0
 800567c:	4770      	bx	lr

0800567e <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800567e:	2201      	movs	r2, #1
{
 8005680:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005682:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005686:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 800568a:	b90a      	cbnz	r2, 8005690 <USBD_LL_DevDisconnected+0x12>
  USBD_StatusTypeDef   ret = USBD_OK;
 800568c:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800568e:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005690:	6852      	ldr	r2, [r2, #4]
 8005692:	7901      	ldrb	r1, [r0, #4]
 8005694:	4790      	blx	r2
 8005696:	2800      	cmp	r0, #0
 8005698:	d0f8      	beq.n	800568c <USBD_LL_DevDisconnected+0xe>
      ret = USBD_FAIL;
 800569a:	2003      	movs	r0, #3
 800569c:	e7f7      	b.n	800568e <USBD_LL_DevDisconnected+0x10>

0800569e <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800569e:	2000      	movs	r0, #0
 80056a0:	4770      	bx	lr

080056a2 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 80056a2:	2000      	movs	r0, #0
 80056a4:	4770      	bx	lr

080056a6 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 80056a6:	7802      	ldrb	r2, [r0, #0]
 80056a8:	880b      	ldrh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);

  return (pnext);
}
 80056aa:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 80056ac:	4413      	add	r3, r2
 80056ae:	800b      	strh	r3, [r1, #0]
}
 80056b0:	4770      	bx	lr

080056b2 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 80056b2:	b510      	push	{r4, lr}
 80056b4:	4604      	mov	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80056b6:	2180      	movs	r1, #128	@ 0x80
 80056b8:	f7fb f9ca 	bl	8000a50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80056bc:	2100      	movs	r1, #0
 80056be:	4620      	mov	r0, r4
}
 80056c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80056c4:	f7fb b9c4 	b.w	8000a50 <USBD_LL_StallEP>

080056c8 <USBD_StdDevReq>:
{
 80056c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056ca:	780b      	ldrb	r3, [r1, #0]
 80056cc:	4604      	mov	r4, r0
 80056ce:	460d      	mov	r5, r1
 80056d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d012      	beq.n	80056fe <USBD_StdDevReq+0x36>
 80056d8:	2b40      	cmp	r3, #64	@ 0x40
 80056da:	d010      	beq.n	80056fe <USBD_StdDevReq+0x36>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d15a      	bne.n	8005796 <USBD_StdDevReq+0xce>
      switch (req->bRequest)
 80056e0:	784b      	ldrb	r3, [r1, #1]
 80056e2:	2b09      	cmp	r3, #9
 80056e4:	d857      	bhi.n	8005796 <USBD_StdDevReq+0xce>
 80056e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056ea:	0104      	.short	0x0104
 80056ec:	00560126 	.word	0x00560126
 80056f0:	00560118 	.word	0x00560118
 80056f4:	00160086 	.word	0x00160086
 80056f8:	00ee0056 	.word	0x00ee0056
 80056fc:	00a2      	.short	0x00a2
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80056fe:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8005702:	4629      	mov	r1, r5
 8005704:	4620      	mov	r0, r4
 8005706:	33ae      	adds	r3, #174	@ 0xae
 8005708:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800570c:	689b      	ldr	r3, [r3, #8]
}
 800570e:	b002      	add	sp, #8
 8005710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005714:	4718      	bx	r3
  uint16_t len = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800571c:	884b      	ldrh	r3, [r1, #2]
 800571e:	0a1a      	lsrs	r2, r3, #8
 8005720:	3a01      	subs	r2, #1
 8005722:	2a06      	cmp	r2, #6
 8005724:	d837      	bhi.n	8005796 <USBD_StdDevReq+0xce>
 8005726:	e8df f002 	tbb	[pc, r2]
 800572a:	1c04      	.short	0x1c04
 800572c:	51363629 	.word	0x51363629
 8005730:	5b          	.byte	0x5b
 8005731:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005732:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005736:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005738:	f10d 0106 	add.w	r1, sp, #6
 800573c:	7c20      	ldrb	r0, [r4, #16]
 800573e:	4798      	blx	r3
  if (req->wLength != 0U)
 8005740:	88ea      	ldrh	r2, [r5, #6]
 8005742:	2a00      	cmp	r2, #0
 8005744:	f000 80a2 	beq.w	800588c <USBD_StdDevReq+0x1c4>
    if (len != 0U)
 8005748:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800574c:	b31b      	cbz	r3, 8005796 <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 800574e:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005750:	4601      	mov	r1, r0
      len = MIN(len, req->wLength);
 8005752:	bf28      	it	cs
 8005754:	461a      	movcs	r2, r3
 8005756:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800575a:	4620      	mov	r0, r4
 800575c:	f000 f9f8 	bl	8005b50 <USBD_CtlSendData>
      break;
 8005760:	e01c      	b.n	800579c <USBD_StdDevReq+0xd4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005762:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005764:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005768:	b932      	cbnz	r2, 8005778 <USBD_StdDevReq+0xb0>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800576c:	f10d 0006 	add.w	r0, sp, #6
 8005770:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005772:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005774:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005776:	e7e3      	b.n	8005740 <USBD_StdDevReq+0x78>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	e7f7      	b.n	800576c <USBD_StdDevReq+0xa4>
      switch ((uint8_t)(req->wValue))
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b05      	cmp	r3, #5
 8005780:	d809      	bhi.n	8005796 <USBD_StdDevReq+0xce>
 8005782:	e8df f003 	tbb	[pc, r3]
 8005786:	0f03      	.short	0x0f03
 8005788:	1f1b1713 	.word	0x1f1b1713
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800578c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005790:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1d0      	bne.n	8005738 <USBD_StdDevReq+0x70>
      USBD_CtlError(pdev, req);
 8005796:	4620      	mov	r0, r4
 8005798:	f7ff ff8b 	bl	80056b2 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 800579c:	2500      	movs	r5, #0
}
 800579e:	4628      	mov	r0, r5
 80057a0:	b002      	add	sp, #8
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	e7f2      	b.n	8005792 <USBD_StdDevReq+0xca>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	e7ee      	b.n	8005792 <USBD_StdDevReq+0xca>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	e7ea      	b.n	8005792 <USBD_StdDevReq+0xca>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	e7e6      	b.n	8005792 <USBD_StdDevReq+0xca>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	e7e2      	b.n	8005792 <USBD_StdDevReq+0xca>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057cc:	7c03      	ldrb	r3, [r0, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e1      	bne.n	8005796 <USBD_StdDevReq+0xce>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80057d2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80057d6:	f10d 0006 	add.w	r0, sp, #6
 80057da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057dc:	4798      	blx	r3
  if (err != 0U)
 80057de:	e7af      	b.n	8005740 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057e0:	7c03      	ldrb	r3, [r0, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1d7      	bne.n	8005796 <USBD_StdDevReq+0xce>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80057e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80057ea:	f10d 0006 	add.w	r0, sp, #6
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057f2:	2307      	movs	r3, #7
 80057f4:	e7be      	b.n	8005774 <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80057f6:	888b      	ldrh	r3, [r1, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1cc      	bne.n	8005796 <USBD_StdDevReq+0xce>
 80057fc:	88cb      	ldrh	r3, [r1, #6]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1c9      	bne.n	8005796 <USBD_StdDevReq+0xce>
 8005802:	884d      	ldrh	r5, [r1, #2]
 8005804:	2d7f      	cmp	r5, #127	@ 0x7f
 8005806:	d8c6      	bhi.n	8005796 <USBD_StdDevReq+0xce>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005808:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800580c:	2b03      	cmp	r3, #3
 800580e:	d0c2      	beq.n	8005796 <USBD_StdDevReq+0xce>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005810:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005812:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005816:	f7fb f939 	bl	8000a8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800581a:	4620      	mov	r0, r4
 800581c:	f000 f9c2 	bl	8005ba4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005820:	b11d      	cbz	r5, 800582a <USBD_StdDevReq+0x162>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005822:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005824:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005828:	e7b8      	b.n	800579c <USBD_StdDevReq+0xd4>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800582a:	2301      	movs	r3, #1
 800582c:	e7fa      	b.n	8005824 <USBD_StdDevReq+0x15c>
  cfgidx = (uint8_t)(req->wValue);
 800582e:	7889      	ldrb	r1, [r1, #2]
 8005830:	4d47      	ldr	r5, [pc, #284]	@ (8005950 <USBD_StdDevReq+0x288>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005832:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005834:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005836:	d903      	bls.n	8005840 <USBD_StdDevReq+0x178>
    USBD_CtlError(pdev, req);
 8005838:	f7ff ff3b 	bl	80056b2 <USBD_CtlError.constprop.0>
    return USBD_FAIL;
 800583c:	2503      	movs	r5, #3
 800583e:	e7ae      	b.n	800579e <USBD_StdDevReq+0xd6>
  switch (pdev->dev_state)
 8005840:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005844:	2b02      	cmp	r3, #2
 8005846:	b2de      	uxtb	r6, r3
 8005848:	d008      	beq.n	800585c <USBD_StdDevReq+0x194>
 800584a:	2e03      	cmp	r6, #3
 800584c:	d017      	beq.n	800587e <USBD_StdDevReq+0x1b6>
      USBD_CtlError(pdev, req);
 800584e:	f7ff ff30 	bl	80056b2 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005852:	7829      	ldrb	r1, [r5, #0]
 8005854:	4620      	mov	r0, r4
 8005856:	f7ff fdd5 	bl	8005404 <USBD_ClrClassConfig>
      break;
 800585a:	e7ef      	b.n	800583c <USBD_StdDevReq+0x174>
      if (cfgidx != 0U)
 800585c:	b1b1      	cbz	r1, 800588c <USBD_StdDevReq+0x1c4>
        pdev->dev_config = cfgidx;
 800585e:	2101      	movs	r1, #1
 8005860:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005862:	f7ff fdc8 	bl	80053f6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8005866:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 8005868:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 800586a:	b125      	cbz	r5, 8005876 <USBD_StdDevReq+0x1ae>
          USBD_CtlError(pdev, req);
 800586c:	f7ff ff21 	bl	80056b2 <USBD_CtlError.constprop.0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005870:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 8005874:	e793      	b.n	800579e <USBD_StdDevReq+0xd6>
          (void)USBD_CtlSendStatus(pdev);
 8005876:	f000 f995 	bl	8005ba4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800587a:	2303      	movs	r3, #3
 800587c:	e7d2      	b.n	8005824 <USBD_StdDevReq+0x15c>
      if (cfgidx == 0U)
 800587e:	b949      	cbnz	r1, 8005894 <USBD_StdDevReq+0x1cc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005880:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8005882:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005884:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005888:	f7ff fdbc 	bl	8005404 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800588c:	4620      	mov	r0, r4
 800588e:	f000 f989 	bl	8005ba4 <USBD_CtlSendStatus>
 8005892:	e783      	b.n	800579c <USBD_StdDevReq+0xd4>
      else if (cfgidx != pdev->dev_config)
 8005894:	6841      	ldr	r1, [r0, #4]
 8005896:	2901      	cmp	r1, #1
 8005898:	d0f8      	beq.n	800588c <USBD_StdDevReq+0x1c4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800589a:	b2c9      	uxtb	r1, r1
 800589c:	f7ff fdb2 	bl	8005404 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80058a0:	7829      	ldrb	r1, [r5, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058a2:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 80058a4:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058a6:	f7ff fda6 	bl	80053f6 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80058aa:	4605      	mov	r5, r0
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d0ed      	beq.n	800588c <USBD_StdDevReq+0x1c4>
          USBD_CtlError(pdev, req);
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7ff fefe 	bl	80056b2 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058b6:	7921      	ldrb	r1, [r4, #4]
 80058b8:	4620      	mov	r0, r4
 80058ba:	f7ff fda3 	bl	8005404 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80058be:	2302      	movs	r3, #2
 80058c0:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80058c4:	e76b      	b.n	800579e <USBD_StdDevReq+0xd6>
  if (req->wLength != 1U)
 80058c6:	88ca      	ldrh	r2, [r1, #6]
 80058c8:	2a01      	cmp	r2, #1
 80058ca:	f47f af64 	bne.w	8005796 <USBD_StdDevReq+0xce>
    switch (pdev->dev_state)
 80058ce:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 80058d2:	2902      	cmp	r1, #2
 80058d4:	b2cb      	uxtb	r3, r1
 80058d6:	d807      	bhi.n	80058e8 <USBD_StdDevReq+0x220>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f43f af5c 	beq.w	8005796 <USBD_StdDevReq+0xce>
        pdev->dev_default_config = 0U;
 80058de:	4601      	mov	r1, r0
 80058e0:	2300      	movs	r3, #0
 80058e2:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80058e6:	e738      	b.n	800575a <USBD_StdDevReq+0x92>
    switch (pdev->dev_state)
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	f47f af54 	bne.w	8005796 <USBD_StdDevReq+0xce>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80058ee:	1d01      	adds	r1, r0, #4
 80058f0:	e733      	b.n	800575a <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 80058f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80058f6:	3b01      	subs	r3, #1
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	f63f af4c 	bhi.w	8005796 <USBD_StdDevReq+0xce>
      if (req->wLength != 0x2U)
 80058fe:	88ca      	ldrh	r2, [r1, #6]
 8005900:	2a02      	cmp	r2, #2
 8005902:	f47f af48 	bne.w	8005796 <USBD_StdDevReq+0xce>
      if (pdev->dev_remote_wakeup != 0U)
 8005906:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800590a:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf0c      	ite	eq
 8005910:	2301      	moveq	r3, #1
 8005912:	2303      	movne	r3, #3
 8005914:	f841 3f0c 	str.w	r3, [r1, #12]!
 8005918:	e71f      	b.n	800575a <USBD_StdDevReq+0x92>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800591a:	884b      	ldrh	r3, [r1, #2]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d102      	bne.n	8005926 <USBD_StdDevReq+0x25e>
        pdev->dev_remote_wakeup = 0U;
 8005920:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8005924:	e7b2      	b.n	800588c <USBD_StdDevReq+0x1c4>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005926:	2b02      	cmp	r3, #2
 8005928:	f47f af35 	bne.w	8005796 <USBD_StdDevReq+0xce>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800592c:	888b      	ldrh	r3, [r1, #4]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005934:	e7aa      	b.n	800588c <USBD_StdDevReq+0x1c4>
  switch (pdev->dev_state)
 8005936:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800593a:	3b01      	subs	r3, #1
 800593c:	2b02      	cmp	r3, #2
 800593e:	f63f af2a 	bhi.w	8005796 <USBD_StdDevReq+0xce>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005942:	884b      	ldrh	r3, [r1, #2]
 8005944:	2b01      	cmp	r3, #1
 8005946:	f47f af29 	bne.w	800579c <USBD_StdDevReq+0xd4>
        pdev->dev_remote_wakeup = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	e7e8      	b.n	8005920 <USBD_StdDevReq+0x258>
 800594e:	bf00      	nop
 8005950:	20000de0 	.word	0x20000de0

08005954 <USBD_StdItfReq>:
{
 8005954:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005956:	780b      	ldrb	r3, [r1, #0]
{
 8005958:	4604      	mov	r4, r0
 800595a:	460d      	mov	r5, r1
 800595c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005960:	065b      	lsls	r3, r3, #25
 8005962:	d501      	bpl.n	8005968 <USBD_StdItfReq+0x14>
 8005964:	2a40      	cmp	r2, #64	@ 0x40
 8005966:	d11e      	bne.n	80059a6 <USBD_StdItfReq+0x52>
      switch (pdev->dev_state)
 8005968:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800596c:	3b01      	subs	r3, #1
 800596e:	2b02      	cmp	r3, #2
 8005970:	d819      	bhi.n	80059a6 <USBD_StdItfReq+0x52>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005972:	7929      	ldrb	r1, [r5, #4]
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005974:	4620      	mov	r0, r4
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005976:	2901      	cmp	r1, #1
 8005978:	d816      	bhi.n	80059a8 <USBD_StdItfReq+0x54>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800597a:	f7ff fe90 	bl	800569e <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800597e:	b980      	cbnz	r0, 80059a2 <USBD_StdItfReq+0x4e>
              if (pdev->pClass[idx]->Setup != NULL)
 8005980:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	b163      	cbz	r3, 80059a2 <USBD_StdItfReq+0x4e>
                pdev->classId = idx;
 8005988:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800598c:	4629      	mov	r1, r5
 800598e:	4620      	mov	r0, r4
 8005990:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005992:	88eb      	ldrh	r3, [r5, #6]
 8005994:	b923      	cbnz	r3, 80059a0 <USBD_StdItfReq+0x4c>
 8005996:	b918      	cbnz	r0, 80059a0 <USBD_StdItfReq+0x4c>
              (void)USBD_CtlSendStatus(pdev);
 8005998:	4620      	mov	r0, r4
 800599a:	f000 f903 	bl	8005ba4 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800599e:	2000      	movs	r0, #0
}
 80059a0:	bd38      	pop	{r3, r4, r5, pc}
                ret = USBD_FAIL;
 80059a2:	2003      	movs	r0, #3
 80059a4:	e7f5      	b.n	8005992 <USBD_StdItfReq+0x3e>
          USBD_CtlError(pdev, req);
 80059a6:	4620      	mov	r0, r4
            USBD_CtlError(pdev, req);
 80059a8:	f7ff fe83 	bl	80056b2 <USBD_CtlError.constprop.0>
 80059ac:	e7f7      	b.n	800599e <USBD_StdItfReq+0x4a>

080059ae <USBD_StdEPReq>:
{
 80059ae:	b570      	push	{r4, r5, r6, lr}
 80059b0:	780b      	ldrb	r3, [r1, #0]
 80059b2:	4604      	mov	r4, r0
 80059b4:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 80059b6:	888a      	ldrh	r2, [r1, #4]
 80059b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80059bc:	790e      	ldrb	r6, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d053      	beq.n	8005a6a <USBD_StdEPReq+0xbc>
 80059c2:	2b40      	cmp	r3, #64	@ 0x40
 80059c4:	d051      	beq.n	8005a6a <USBD_StdEPReq+0xbc>
 80059c6:	bb63      	cbnz	r3, 8005a22 <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 80059c8:	784b      	ldrb	r3, [r1, #1]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d03b      	beq.n	8005a46 <USBD_StdEPReq+0x98>
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d020      	beq.n	8005a14 <USBD_StdEPReq+0x66>
 80059d2:	bb33      	cbnz	r3, 8005a22 <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 80059d4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80059d8:	2b02      	cmp	r3, #2
 80059da:	b2d9      	uxtb	r1, r3
 80059dc:	d061      	beq.n	8005aa2 <USBD_StdEPReq+0xf4>
 80059de:	2903      	cmp	r1, #3
 80059e0:	d11f      	bne.n	8005a22 <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059e2:	f006 030f 	and.w	r3, r6, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80059e6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80059ea:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059ee:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80059f2:	d067      	beq.n	8005ac4 <USBD_StdEPReq+0x116>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80059f6:	b1a3      	cbz	r3, 8005a22 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059f8:	f006 057f 	and.w	r5, r6, #127	@ 0x7f
 80059fc:	3501      	adds	r5, #1
 80059fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005a02:	eb00 0585 	add.w	r5, r0, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a06:	0673      	lsls	r3, r6, #25
 8005a08:	d168      	bne.n	8005adc <USBD_StdEPReq+0x12e>
{
 8005a0a:	2300      	movs	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 8005a10:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a12:	e053      	b.n	8005abc <USBD_StdEPReq+0x10e>
          switch (pdev->dev_state)
 8005a14:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	d037      	beq.n	8005a8e <USBD_StdEPReq+0xe0>
 8005a1e:	2a03      	cmp	r2, #3
 8005a20:	d003      	beq.n	8005a2a <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7ff fe45 	bl	80056b2 <USBD_CtlError.constprop.0>
              break;
 8005a28:	e00b      	b.n	8005a42 <USBD_StdEPReq+0x94>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a2a:	884b      	ldrh	r3, [r1, #2]
 8005a2c:	b933      	cbnz	r3, 8005a3c <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a2e:	0671      	lsls	r1, r6, #25
 8005a30:	d004      	beq.n	8005a3c <USBD_StdEPReq+0x8e>
 8005a32:	88eb      	ldrh	r3, [r5, #6]
 8005a34:	b913      	cbnz	r3, 8005a3c <USBD_StdEPReq+0x8e>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a36:	4631      	mov	r1, r6
 8005a38:	f7fb f80a 	bl	8000a50 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f000 f8b1 	bl	8005ba4 <USBD_CtlSendStatus>
}
 8005a42:	2000      	movs	r0, #0
 8005a44:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8005a46:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	d01e      	beq.n	8005a8e <USBD_StdEPReq+0xe0>
 8005a50:	2a03      	cmp	r2, #3
 8005a52:	d1e6      	bne.n	8005a22 <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a54:	884b      	ldrh	r3, [r1, #2]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f3      	bne.n	8005a42 <USBD_StdEPReq+0x94>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a5a:	0673      	lsls	r3, r6, #25
 8005a5c:	d002      	beq.n	8005a64 <USBD_StdEPReq+0xb6>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a5e:	4631      	mov	r1, r6
 8005a60:	f7fa fffd 	bl	8000a5e <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 f89d 	bl	8005ba4 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f7ff fe18 	bl	80056a2 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d1e5      	bne.n	8005a42 <USBD_StdEPReq+0x94>
                  if (pdev->pClass[idx]->Setup != NULL)
 8005a76:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
                  pdev->classId = idx;
 8005a7a:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0de      	beq.n	8005a42 <USBD_StdEPReq+0x94>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a84:	4629      	mov	r1, r5
 8005a86:	4620      	mov	r0, r4
}
 8005a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a8c:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a8e:	0672      	lsls	r2, r6, #25
 8005a90:	d0c7      	beq.n	8005a22 <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a92:	4631      	mov	r1, r6
 8005a94:	f7fa ffdc 	bl	8000a50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a98:	2180      	movs	r1, #128	@ 0x80
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f7fa ffd8 	bl	8000a50 <USBD_LL_StallEP>
 8005aa0:	e7cf      	b.n	8005a42 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aa2:	0671      	lsls	r1, r6, #25
 8005aa4:	d1bd      	bne.n	8005a22 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aa6:	0612      	lsls	r2, r2, #24
              pep->status = 0x0000U;
 8005aa8:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005aac:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ab0:	bf4c      	ite	mi
 8005ab2:	f100 0114 	addmi.w	r1, r0, #20
 8005ab6:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8005aba:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 f847 	bl	8005b50 <USBD_CtlSendData>
              break;
 8005ac2:	e7be      	b.n	8005a42 <USBD_StdEPReq+0x94>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ac4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0aa      	beq.n	8005a22 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005acc:	f006 057f 	and.w	r5, r6, #127	@ 0x7f
 8005ad0:	2314      	movs	r3, #20
 8005ad2:	fb03 0505 	mla	r5, r3, r5, r0
 8005ad6:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 8005ada:	e794      	b.n	8005a06 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005adc:	4631      	mov	r1, r6
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f7fa ffc4 	bl	8000a6c <USBD_LL_IsStallEP>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d090      	beq.n	8005a0a <USBD_StdEPReq+0x5c>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e78f      	b.n	8005a0c <USBD_StdEPReq+0x5e>

08005aec <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8005aec:	780b      	ldrb	r3, [r1, #0]
 8005aee:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8005af0:	784b      	ldrb	r3, [r1, #1]
 8005af2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8005af4:	884b      	ldrh	r3, [r1, #2]
 8005af6:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8005af8:	888b      	ldrh	r3, [r1, #4]
 8005afa:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8005afc:	88cb      	ldrh	r3, [r1, #6]
 8005afe:	80c3      	strh	r3, [r0, #6]
}
 8005b00:	4770      	bx	lr

08005b02 <USBD_CtlError>:
{
 8005b02:	b510      	push	{r4, lr}
 8005b04:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b06:	2180      	movs	r1, #128	@ 0x80
 8005b08:	f7fa ffa2 	bl	8000a50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4620      	mov	r0, r4
}
 8005b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b14:	f7fa bf9c 	b.w	8000a50 <USBD_LL_StallEP>

08005b18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	460d      	mov	r5, r1
 8005b1c:	4616      	mov	r6, r2
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8005b1e:	4604      	mov	r4, r0
 8005b20:	b170      	cbz	r0, 8005b40 <USBD_GetString+0x28>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8005b22:	f7fa fb71 	bl	8000208 <strlen>
  {
    len++;
    pbuff++;
  }

  return len;
 8005b26:	3c01      	subs	r4, #1
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005b28:	b2c3      	uxtb	r3, r0
    unicode[idx] = 0U;
 8005b2a:	2100      	movs	r1, #0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8005b32:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005b34:	2303      	movs	r3, #3
 8005b36:	706b      	strb	r3, [r5, #1]
  idx++;
 8005b38:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8005b3a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8005b3e:	b902      	cbnz	r2, 8005b42 <USBD_GetString+0x2a>
}
 8005b40:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx] = *pdesc;
 8005b42:	54ea      	strb	r2, [r5, r3]
    idx++;
 8005b44:	1c5a      	adds	r2, r3, #1
    idx++;
 8005b46:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8005b48:	b2d2      	uxtb	r2, r2
    idx++;
 8005b4a:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8005b4c:	54a9      	strb	r1, [r5, r2]
    idx++;
 8005b4e:	e7f4      	b.n	8005b3a <USBD_GetString+0x22>

08005b50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005b50:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005b52:	2202      	movs	r2, #2
{
 8005b54:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005b56:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length = len;
 8005b5e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b62:	f7fa ff9a 	bl	8000a9a <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b66:	2000      	movs	r0, #0
 8005b68:	bd10      	pop	{r4, pc}

08005b6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005b6a:	b508      	push	{r3, lr}
 8005b6c:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b6e:	460a      	mov	r2, r1
 8005b70:	2100      	movs	r1, #0
 8005b72:	f7fa ff92 	bl	8000a9a <USBD_LL_Transmit>

  return USBD_OK;
}
 8005b76:	2000      	movs	r0, #0
 8005b78:	bd08      	pop	{r3, pc}

08005b7a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005b7a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b7c:	2203      	movs	r2, #3
{
 8005b7e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b80:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b84:	460a      	mov	r2, r1
 8005b86:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length = len;
 8005b88:	e9c0 3356 	strd	r3, r3, [r0, #344]	@ 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b8c:	f7fa ff8c 	bl	8000aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005b90:	2000      	movs	r0, #0
 8005b92:	bd10      	pop	{r4, pc}

08005b94 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005b94:	b508      	push	{r3, lr}
 8005b96:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b98:	460a      	mov	r2, r1
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	f7fa ff84 	bl	8000aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	bd08      	pop	{r3, pc}

08005ba4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005ba4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ba6:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ba8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005baa:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005bae:	4619      	mov	r1, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f7fa ff72 	bl	8000a9a <USBD_LL_Transmit>

  return USBD_OK;
}
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	bd08      	pop	{r3, pc}

08005bba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005bba:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005bbc:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bbe:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005bc0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f7fa ff6e 	bl	8000aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005bcc:	2000      	movs	r0, #0
 8005bce:	bd08      	pop	{r3, pc}

08005bd0 <malloc>:
 8005bd0:	4b02      	ldr	r3, [pc, #8]	@ (8005bdc <malloc+0xc>)
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	f000 b82d 	b.w	8005c34 <_malloc_r>
 8005bda:	bf00      	nop
 8005bdc:	20000160 	.word	0x20000160

08005be0 <free>:
 8005be0:	4b02      	ldr	r3, [pc, #8]	@ (8005bec <free+0xc>)
 8005be2:	4601      	mov	r1, r0
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	f000 b8ef 	b.w	8005dc8 <_free_r>
 8005bea:	bf00      	nop
 8005bec:	20000160 	.word	0x20000160

08005bf0 <sbrk_aligned>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4e0f      	ldr	r6, [pc, #60]	@ (8005c30 <sbrk_aligned+0x40>)
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	6831      	ldr	r1, [r6, #0]
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	b911      	cbnz	r1, 8005c02 <sbrk_aligned+0x12>
 8005bfc:	f000 f8ae 	bl	8005d5c <_sbrk_r>
 8005c00:	6030      	str	r0, [r6, #0]
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 f8a9 	bl	8005d5c <_sbrk_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d103      	bne.n	8005c16 <sbrk_aligned+0x26>
 8005c0e:	f04f 34ff 	mov.w	r4, #4294967295
 8005c12:	4620      	mov	r0, r4
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	1cc4      	adds	r4, r0, #3
 8005c18:	f024 0403 	bic.w	r4, r4, #3
 8005c1c:	42a0      	cmp	r0, r4
 8005c1e:	d0f8      	beq.n	8005c12 <sbrk_aligned+0x22>
 8005c20:	1a21      	subs	r1, r4, r0
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 f89a 	bl	8005d5c <_sbrk_r>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d1f2      	bne.n	8005c12 <sbrk_aligned+0x22>
 8005c2c:	e7ef      	b.n	8005c0e <sbrk_aligned+0x1e>
 8005c2e:	bf00      	nop
 8005c30:	20000de4 	.word	0x20000de4

08005c34 <_malloc_r>:
 8005c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	1ccd      	adds	r5, r1, #3
 8005c3a:	f025 0503 	bic.w	r5, r5, #3
 8005c3e:	3508      	adds	r5, #8
 8005c40:	2d0c      	cmp	r5, #12
 8005c42:	bf38      	it	cc
 8005c44:	250c      	movcc	r5, #12
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	4606      	mov	r6, r0
 8005c4a:	db01      	blt.n	8005c50 <_malloc_r+0x1c>
 8005c4c:	42a9      	cmp	r1, r5
 8005c4e:	d904      	bls.n	8005c5a <_malloc_r+0x26>
 8005c50:	230c      	movs	r3, #12
 8005c52:	6033      	str	r3, [r6, #0]
 8005c54:	2000      	movs	r0, #0
 8005c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d30 <_malloc_r+0xfc>
 8005c5e:	f000 f869 	bl	8005d34 <__malloc_lock>
 8005c62:	f8d8 3000 	ldr.w	r3, [r8]
 8005c66:	461c      	mov	r4, r3
 8005c68:	bb44      	cbnz	r4, 8005cbc <_malloc_r+0x88>
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f7ff ffbf 	bl	8005bf0 <sbrk_aligned>
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	4604      	mov	r4, r0
 8005c76:	d158      	bne.n	8005d2a <_malloc_r+0xf6>
 8005c78:	f8d8 4000 	ldr.w	r4, [r8]
 8005c7c:	4627      	mov	r7, r4
 8005c7e:	2f00      	cmp	r7, #0
 8005c80:	d143      	bne.n	8005d0a <_malloc_r+0xd6>
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	d04b      	beq.n	8005d1e <_malloc_r+0xea>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	eb04 0903 	add.w	r9, r4, r3
 8005c90:	f000 f864 	bl	8005d5c <_sbrk_r>
 8005c94:	4581      	cmp	r9, r0
 8005c96:	d142      	bne.n	8005d1e <_malloc_r+0xea>
 8005c98:	6821      	ldr	r1, [r4, #0]
 8005c9a:	1a6d      	subs	r5, r5, r1
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f7ff ffa6 	bl	8005bf0 <sbrk_aligned>
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d03a      	beq.n	8005d1e <_malloc_r+0xea>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	442b      	add	r3, r5
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	bb62      	cbnz	r2, 8005d10 <_malloc_r+0xdc>
 8005cb6:	f8c8 7000 	str.w	r7, [r8]
 8005cba:	e00f      	b.n	8005cdc <_malloc_r+0xa8>
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	1b52      	subs	r2, r2, r5
 8005cc0:	d420      	bmi.n	8005d04 <_malloc_r+0xd0>
 8005cc2:	2a0b      	cmp	r2, #11
 8005cc4:	d917      	bls.n	8005cf6 <_malloc_r+0xc2>
 8005cc6:	1961      	adds	r1, r4, r5
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	6025      	str	r5, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	6059      	strne	r1, [r3, #4]
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	bf08      	it	eq
 8005cd4:	f8c8 1000 	streq.w	r1, [r8]
 8005cd8:	5162      	str	r2, [r4, r5]
 8005cda:	604b      	str	r3, [r1, #4]
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f000 f82f 	bl	8005d40 <__malloc_unlock>
 8005ce2:	f104 000b 	add.w	r0, r4, #11
 8005ce6:	1d23      	adds	r3, r4, #4
 8005ce8:	f020 0007 	bic.w	r0, r0, #7
 8005cec:	1ac2      	subs	r2, r0, r3
 8005cee:	bf1c      	itt	ne
 8005cf0:	1a1b      	subne	r3, r3, r0
 8005cf2:	50a3      	strne	r3, [r4, r2]
 8005cf4:	e7af      	b.n	8005c56 <_malloc_r+0x22>
 8005cf6:	6862      	ldr	r2, [r4, #4]
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	bf0c      	ite	eq
 8005cfc:	f8c8 2000 	streq.w	r2, [r8]
 8005d00:	605a      	strne	r2, [r3, #4]
 8005d02:	e7eb      	b.n	8005cdc <_malloc_r+0xa8>
 8005d04:	4623      	mov	r3, r4
 8005d06:	6864      	ldr	r4, [r4, #4]
 8005d08:	e7ae      	b.n	8005c68 <_malloc_r+0x34>
 8005d0a:	463c      	mov	r4, r7
 8005d0c:	687f      	ldr	r7, [r7, #4]
 8005d0e:	e7b6      	b.n	8005c7e <_malloc_r+0x4a>
 8005d10:	461a      	mov	r2, r3
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	d1fb      	bne.n	8005d10 <_malloc_r+0xdc>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6053      	str	r3, [r2, #4]
 8005d1c:	e7de      	b.n	8005cdc <_malloc_r+0xa8>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	4630      	mov	r0, r6
 8005d24:	f000 f80c 	bl	8005d40 <__malloc_unlock>
 8005d28:	e794      	b.n	8005c54 <_malloc_r+0x20>
 8005d2a:	6005      	str	r5, [r0, #0]
 8005d2c:	e7d6      	b.n	8005cdc <_malloc_r+0xa8>
 8005d2e:	bf00      	nop
 8005d30:	20000de8 	.word	0x20000de8

08005d34 <__malloc_lock>:
 8005d34:	4801      	ldr	r0, [pc, #4]	@ (8005d3c <__malloc_lock+0x8>)
 8005d36:	f000 b845 	b.w	8005dc4 <__retarget_lock_acquire_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	20000f28 	.word	0x20000f28

08005d40 <__malloc_unlock>:
 8005d40:	4801      	ldr	r0, [pc, #4]	@ (8005d48 <__malloc_unlock+0x8>)
 8005d42:	f000 b840 	b.w	8005dc6 <__retarget_lock_release_recursive>
 8005d46:	bf00      	nop
 8005d48:	20000f28 	.word	0x20000f28

08005d4c <memset>:
 8005d4c:	4402      	add	r2, r0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d100      	bne.n	8005d56 <memset+0xa>
 8005d54:	4770      	bx	lr
 8005d56:	f803 1b01 	strb.w	r1, [r3], #1
 8005d5a:	e7f9      	b.n	8005d50 <memset+0x4>

08005d5c <_sbrk_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4d06      	ldr	r5, [pc, #24]	@ (8005d78 <_sbrk_r+0x1c>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	f000 f878 	bl	8005e5c <_sbrk>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_sbrk_r+0x1a>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_sbrk_r+0x1a>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	20000f24 	.word	0x20000f24

08005d7c <__libc_init_array>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005db4 <__libc_init_array+0x38>)
 8005d80:	4c0d      	ldr	r4, [pc, #52]	@ (8005db8 <__libc_init_array+0x3c>)
 8005d82:	1b64      	subs	r4, r4, r5
 8005d84:	10a4      	asrs	r4, r4, #2
 8005d86:	2600      	movs	r6, #0
 8005d88:	42a6      	cmp	r6, r4
 8005d8a:	d109      	bne.n	8005da0 <__libc_init_array+0x24>
 8005d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005dbc <__libc_init_array+0x40>)
 8005d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc0 <__libc_init_array+0x44>)
 8005d90:	f000 f872 	bl	8005e78 <_init>
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	2600      	movs	r6, #0
 8005d9a:	42a6      	cmp	r6, r4
 8005d9c:	d105      	bne.n	8005daa <__libc_init_array+0x2e>
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da4:	4798      	blx	r3
 8005da6:	3601      	adds	r6, #1
 8005da8:	e7ee      	b.n	8005d88 <__libc_init_array+0xc>
 8005daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dae:	4798      	blx	r3
 8005db0:	3601      	adds	r6, #1
 8005db2:	e7f2      	b.n	8005d9a <__libc_init_array+0x1e>
 8005db4:	08005f2c 	.word	0x08005f2c
 8005db8:	08005f2c 	.word	0x08005f2c
 8005dbc:	08005f2c 	.word	0x08005f2c
 8005dc0:	08005f30 	.word	0x08005f30

08005dc4 <__retarget_lock_acquire_recursive>:
 8005dc4:	4770      	bx	lr

08005dc6 <__retarget_lock_release_recursive>:
 8005dc6:	4770      	bx	lr

08005dc8 <_free_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4605      	mov	r5, r0
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	d041      	beq.n	8005e54 <_free_r+0x8c>
 8005dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd4:	1f0c      	subs	r4, r1, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	bfb8      	it	lt
 8005dda:	18e4      	addlt	r4, r4, r3
 8005ddc:	f7ff ffaa 	bl	8005d34 <__malloc_lock>
 8005de0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e58 <_free_r+0x90>)
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	b933      	cbnz	r3, 8005df4 <_free_r+0x2c>
 8005de6:	6063      	str	r3, [r4, #4]
 8005de8:	6014      	str	r4, [r2, #0]
 8005dea:	4628      	mov	r0, r5
 8005dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005df0:	f7ff bfa6 	b.w	8005d40 <__malloc_unlock>
 8005df4:	42a3      	cmp	r3, r4
 8005df6:	d908      	bls.n	8005e0a <_free_r+0x42>
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	1821      	adds	r1, r4, r0
 8005dfc:	428b      	cmp	r3, r1
 8005dfe:	bf01      	itttt	eq
 8005e00:	6819      	ldreq	r1, [r3, #0]
 8005e02:	685b      	ldreq	r3, [r3, #4]
 8005e04:	1809      	addeq	r1, r1, r0
 8005e06:	6021      	streq	r1, [r4, #0]
 8005e08:	e7ed      	b.n	8005de6 <_free_r+0x1e>
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	b10b      	cbz	r3, 8005e14 <_free_r+0x4c>
 8005e10:	42a3      	cmp	r3, r4
 8005e12:	d9fa      	bls.n	8005e0a <_free_r+0x42>
 8005e14:	6811      	ldr	r1, [r2, #0]
 8005e16:	1850      	adds	r0, r2, r1
 8005e18:	42a0      	cmp	r0, r4
 8005e1a:	d10b      	bne.n	8005e34 <_free_r+0x6c>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	4401      	add	r1, r0
 8005e20:	1850      	adds	r0, r2, r1
 8005e22:	4283      	cmp	r3, r0
 8005e24:	6011      	str	r1, [r2, #0]
 8005e26:	d1e0      	bne.n	8005dea <_free_r+0x22>
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	6053      	str	r3, [r2, #4]
 8005e2e:	4408      	add	r0, r1
 8005e30:	6010      	str	r0, [r2, #0]
 8005e32:	e7da      	b.n	8005dea <_free_r+0x22>
 8005e34:	d902      	bls.n	8005e3c <_free_r+0x74>
 8005e36:	230c      	movs	r3, #12
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	e7d6      	b.n	8005dea <_free_r+0x22>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	1821      	adds	r1, r4, r0
 8005e40:	428b      	cmp	r3, r1
 8005e42:	bf04      	itt	eq
 8005e44:	6819      	ldreq	r1, [r3, #0]
 8005e46:	685b      	ldreq	r3, [r3, #4]
 8005e48:	6063      	str	r3, [r4, #4]
 8005e4a:	bf04      	itt	eq
 8005e4c:	1809      	addeq	r1, r1, r0
 8005e4e:	6021      	streq	r1, [r4, #0]
 8005e50:	6054      	str	r4, [r2, #4]
 8005e52:	e7ca      	b.n	8005dea <_free_r+0x22>
 8005e54:	bd38      	pop	{r3, r4, r5, pc}
 8005e56:	bf00      	nop
 8005e58:	20000de8 	.word	0x20000de8

08005e5c <_sbrk>:
 8005e5c:	4a04      	ldr	r2, [pc, #16]	@ (8005e70 <_sbrk+0x14>)
 8005e5e:	6811      	ldr	r1, [r2, #0]
 8005e60:	4603      	mov	r3, r0
 8005e62:	b909      	cbnz	r1, 8005e68 <_sbrk+0xc>
 8005e64:	4903      	ldr	r1, [pc, #12]	@ (8005e74 <_sbrk+0x18>)
 8005e66:	6011      	str	r1, [r2, #0]
 8005e68:	6810      	ldr	r0, [r2, #0]
 8005e6a:	4403      	add	r3, r0
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	4770      	bx	lr
 8005e70:	20000f2c 	.word	0x20000f2c
 8005e74:	20000f30 	.word	0x20000f30

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
