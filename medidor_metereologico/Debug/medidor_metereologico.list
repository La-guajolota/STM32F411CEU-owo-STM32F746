
medidor_metereologico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ebc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08008fd0  08008fd0  00018fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009490  08009490  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08009490  08009490  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009490  08009490  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009498  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  200001f0  08009688  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  08009688  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed93  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fe  00000000  00000000  0002efef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  000317f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc4  00000000  00000000  00032708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e7b  00000000  00000000  000332cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121c3  00000000  00000000  00037147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092210  00000000  00000000  0004930a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052b8  00000000  00000000  000db51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e07d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008fb4 	.word	0x08008fb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08008fb4 	.word	0x08008fb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <LCD_Start>:
static void LCD_WriteControl(unsigned char cByte);
static void LCD_WriteData(unsigned char dByte);
static void LCD_WriteControlNibble(unsigned char nibble);
static void LCD_WriteDataNibble(unsigned char nibble);

void LCD_Start(void) {    // Funcion de inicializacion del modulo de display (16x2 o 20x4)
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    /* INIT CODE */
    HAL_Delay(80);                                                        /* Delay 40 ms */
 8000b2c:	2050      	movs	r0, #80	; 0x50
 8000b2e:	f001 ff7d 	bl	8002a2c <HAL_Delay>
    LCD_WriteControlNibble(LCD_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
 8000b32:	2003      	movs	r0, #3
 8000b34:	f000 f922 	bl	8000d7c <LCD_WriteControlNibble>
    HAL_Delay(10);                                                         /* Delay 5 ms */
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f001 ff77 	bl	8002a2c <HAL_Delay>
    LCD_WriteControlNibble(LCD_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f000 f91c 	bl	8000d7c <LCD_WriteControlNibble>
    HAL_Delay(30);                                                        /* Delay 15 ms */
 8000b44:	201e      	movs	r0, #30
 8000b46:	f001 ff71 	bl	8002a2c <HAL_Delay>
    LCD_WriteControlNibble(LCD_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f000 f916 	bl	8000d7c <LCD_WriteControlNibble>
    HAL_Delay(2);                                                         /* Delay 1 ms */
 8000b50:	2002      	movs	r0, #2
 8000b52:	f001 ff6b 	bl	8002a2c <HAL_Delay>
    LCD_WriteControlNibble(LCD_DISPLAY_4_BIT_INIT);    /* Selects 4-bit mode */
 8000b56:	2002      	movs	r0, #2
 8000b58:	f000 f910 	bl	8000d7c <LCD_WriteControlNibble>
    HAL_Delay(10);                                                         /* Delay 5 ms */
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	f001 ff65 	bl	8002a2c <HAL_Delay>

    LCD_WriteControl(LCD_CURSOR_AUTO_INCR_ON);    /* Incr Cursor After Writes */
 8000b62:	2006      	movs	r0, #6
 8000b64:	f000 f8ca 	bl	8000cfc <LCD_WriteControl>
    LCD_WriteControl(LCD_DISPLAY_CURSOR_ON);      /* Turn Display, Cursor ON */
 8000b68:	200e      	movs	r0, #14
 8000b6a:	f000 f8c7 	bl	8000cfc <LCD_WriteControl>
    LCD_WriteControl(LCD_DISPLAY_2_LINES_5x10);   /* 2 Lines by 5x10 Characters */
 8000b6e:	2028      	movs	r0, #40	; 0x28
 8000b70:	f000 f8c4 	bl	8000cfc <LCD_WriteControl>
    LCD_WriteControl(LCD_DISPLAY_CURSOR_OFF);     /* Turn Display, Cursor OFF */
 8000b74:	2008      	movs	r0, #8
 8000b76:	f000 f8c1 	bl	8000cfc <LCD_WriteControl>

    LCD_WriteControl(LCD_CLEAR_DISPLAY);          /* Clear LCD Screen */
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f000 f8be 	bl	8000cfc <LCD_WriteControl>
    LCD_WriteControl(LCD_DISPLAY_ON_CURSOR_OFF);  /* Turn Display ON, Cursor OFF */
 8000b80:	200c      	movs	r0, #12
 8000b82:	f000 f8bb 	bl	8000cfc <LCD_WriteControl>
    LCD_WriteControl(LCD_RESET_CURSOR_POSITION);  /* Set Cursor to 0,0 */
 8000b86:	2003      	movs	r0, #3
 8000b88:	f000 f8b8 	bl	8000cfc <LCD_WriteControl>
    HAL_Delay(10);
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f001 ff4d 	bl	8002a2c <HAL_Delay>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <LCD_ClearDisplay>:

void LCD_ClearDisplay(void) {    // Funcion de limpieza total de la pantalla
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
    LCD_WriteControl(LCD_CLEAR_DISPLAY);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f000 f8ae 	bl	8000cfc <LCD_WriteControl>
    HAL_Delay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f001 ff43 	bl	8002a2c <HAL_Delay>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <LCD_Position>:

void LCD_Position(unsigned char row, unsigned char column) {    // Funcion de posicionamiento de cursor en pantalla
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
 * row      -> Fila donde va a empezar a escribir       (0-3)
 * column   -> Columna donde va a empezar a escribir    (0-15)

 * LCD_Position(1,6);
 */
    row = (LCD_ROW_MASK & row);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	71fb      	strb	r3, [r7, #7]

    switch(row) {
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d826      	bhi.n	8000c18 <LCD_Position+0x6c>
 8000bca:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <LCD_Position+0x24>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000be1 	.word	0x08000be1
 8000bd4:	08000bef 	.word	0x08000bef
 8000bd8:	08000bfd 	.word	0x08000bfd
 8000bdc:	08000c0b 	.word	0x08000c0b
        case 0:
            LCD_WriteControl(LCD_ROW_0_START + column);
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	3b80      	subs	r3, #128	; 0x80
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f888 	bl	8000cfc <LCD_WriteControl>
            break;
 8000bec:	e015      	b.n	8000c1a <LCD_Position+0x6e>
        case 1:
            LCD_WriteControl(LCD_ROW_1_START + column);
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	3b40      	subs	r3, #64	; 0x40
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f881 	bl	8000cfc <LCD_WriteControl>
            break;
 8000bfa:	e00e      	b.n	8000c1a <LCD_Position+0x6e>
        case 2:
            LCD_WriteControl(LCD_ROW_2_START + column);
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	3b6c      	subs	r3, #108	; 0x6c
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f87a 	bl	8000cfc <LCD_WriteControl>
            break;
 8000c08:	e007      	b.n	8000c1a <LCD_Position+0x6e>
        case 3:
            LCD_WriteControl(LCD_ROW_3_START + column);
 8000c0a:	79bb      	ldrb	r3, [r7, #6]
 8000c0c:	3b2c      	subs	r3, #44	; 0x2c
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f873 	bl	8000cfc <LCD_WriteControl>
            break;
 8000c16:	e000      	b.n	8000c1a <LCD_Position+0x6e>
        default:
            break;
 8000c18:	bf00      	nop
    }
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop

08000c24 <LCD_PrintString>:

    /* Print out number */
    LCD_PrintString(&number[digIndex]);
}

void LCD_PrintString(char const string[]) {    // Funcion de impresion en pantalla de cadena alfanumerica
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
/*
 * text -> Texto entre comillas a imprimir

 * LCD_PrintString("Hello, World!");
 */
    unsigned char indexU8 = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
    char current = *string;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	73bb      	strb	r3, [r7, #14]

    /* Until null is reached, print next character */
    while((char) '\0' != current)
 8000c36:	e00b      	b.n	8000c50 <LCD_PrintString+0x2c>
    {
        LCD_WriteData((unsigned char)current);
 8000c38:	7bbb      	ldrb	r3, [r7, #14]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f87e 	bl	8000d3c <LCD_WriteData>
        current = string[indexU8];
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	73bb      	strb	r3, [r7, #14]
        indexU8++;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
    while((char) '\0' != current)
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f0      	bne.n	8000c38 <LCD_PrintString+0x14>
    }
}
 8000c56:	bf00      	nop
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <LCD_Write>:
    BIT7 BIT8 BIT7 BIT6 BIT5 BIT4 BIT3 BIT2 BIT1 BIT0
       X    X    X   RW   RS    E   D7   D6   D5   D4

*/
//Rutina para sacar la trama en paralelo
static void LCD_Write(unsigned char nible){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_PIN, ((nible>>5)&0x01));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	095b      	lsrs	r3, r3, #5
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <LCD_Write+0x94>)
 8000c7c:	f002 fd64 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_PIN, ((nible>>4)&0x01));
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4819      	ldr	r0, [pc, #100]	; (8000cf8 <LCD_Write+0x98>)
 8000c92:	f002 fd59 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((nible>>3)&0x01));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	08db      	lsrs	r3, r3, #3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <LCD_Write+0x94>)
 8000ca8:	f002 fd4e 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((nible>>2)&0x01));
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	2120      	movs	r1, #32
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LCD_Write+0x94>)
 8000cbe:	f002 fd43 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((nible>>1)&0x01));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	085b      	lsrs	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	2110      	movs	r1, #16
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <LCD_Write+0x94>)
 8000cd4:	f002 fd38 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((nible>>0)&0x01));
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <LCD_Write+0x94>)
 8000ce6:	f002 fd2f 	bl	8003748 <HAL_GPIO_WritePin>

}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	40010c00 	.word	0x40010c00

08000cfc <LCD_WriteControl>:

//Rutinas de escitura en los registros de instrucciones y de datos
static void LCD_WriteControl(unsigned char cByte) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
    // CYBYTE = 0xABCDEFGH
    static unsigned char nibble;

    //HAL_Delay(10); // 10
    nibble = cByte >> LCD_NIBBLE_SHIFT; // 0Xabcdefg << 4 --> nimble = 0X0000abcd
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <LCD_WriteControl+0x3c>)
 8000d0e:	701a      	strb	r2, [r3, #0]

    // Escribir nibble m�s significativo
    LCD_WriteControlNibble(nibble);//ALGORITMO PARA ESCRIBIRLE AL LCD UN COMANDO
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <LCD_WriteControl+0x3c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f831 	bl	8000d7c <LCD_WriteControlNibble>
    nibble = cByte & LCD_NIBBLE_MASK; // 0Xabcdefg AND 0x0F  --> nimble = 0X0000efgh
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 030f 	and.w	r3, r3, #15
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <LCD_WriteControl+0x3c>)
 8000d24:	701a      	strb	r2, [r3, #0]

    // Escribir nibble menos significativo
    LCD_WriteControlNibble(nibble);//ALGORITMO PARA ESCRIBIRLE AL LCD UN COMANDO
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <LCD_WriteControl+0x3c>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f826 	bl	8000d7c <LCD_WriteControlNibble>
    //HAL_Delay(5); // 5

}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000020c 	.word	0x2000020c

08000d3c <LCD_WriteData>:

static void LCD_WriteData(unsigned char dByte) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
    // CYBYTE = 0xABCDEFGH
    static unsigned char nibble;

    //HAL_Delay(10); // 10
    nibble = dByte >> LCD_NIBBLE_SHIFT;// abcdefg << 4 --> nimble = 0000abcd
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <LCD_WriteData+0x3c>)
 8000d4e:	701a      	strb	r2, [r3, #0]

    // Escribir nibble m�s significativo
    LCD_WriteDataNibble(nibble);//ALGORITMO PARA ESCRIBIRLE AL LCD INFO
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <LCD_WriteData+0x3c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f835 	bl	8000dc4 <LCD_WriteDataNibble>
    nibble = dByte & LCD_NIBBLE_MASK; // abcdefg AND 0x0F  --> nimble = 0000efgh
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <LCD_WriteData+0x3c>)
 8000d64:	701a      	strb	r2, [r3, #0]

    // Escribir nibble menos significativo
    LCD_WriteDataNibble(nibble);//ALGORITMO PARA ESCRIBIRLE AL LCD INFO
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <LCD_WriteData+0x3c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f82a 	bl	8000dc4 <LCD_WriteDataNibble>
    //HAL_Delay(5); // 5

}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000020d 	.word	0x2000020d

08000d7c <LCD_WriteControlNibble>:

//Subrutinas de escitura en los registros de instrucciones y de datos
static void LCD_WriteControlNibble(unsigned char nibble) {//RS=0
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]

    //PASO1
    nibble &= ~RS;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f023 0320 	bic.w	r3, r3, #32
 8000d8c:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//RW es 0 constante
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff65 	bl	8000c60 <LCD_Write>

    //PASO2
    nibble |= E;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//E=1
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <LCD_Write>
    HAL_Delay(2);    // 2
 8000da6:	2002      	movs	r0, #2
 8000da8:	f001 fe40 	bl	8002a2c <HAL_Delay>
    nibble &= (~E);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f023 0310 	bic.w	r3, r3, #16
 8000db2:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//E=0
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff52 	bl	8000c60 <LCD_Write>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LCD_WriteDataNibble>:

static void LCD_WriteDataNibble(unsigned char nibble) {//RS=1
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]

    //PASO1
    nibble |= RS;
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f043 0320 	orr.w	r3, r3, #32
 8000dd4:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//RW es 1 constante
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff41 	bl	8000c60 <LCD_Write>

    //PASO2
    nibble |= E;
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//E=1
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff39 	bl	8000c60 <LCD_Write>
    HAL_Delay(2);    // 2
 8000dee:	2002      	movs	r0, #2
 8000df0:	f001 fe1c 	bl	8002a2c <HAL_Delay>
    nibble &= (~E);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f023 0310 	bic.w	r3, r3, #16
 8000dfa:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//E=0
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff2e 	bl	8000c60 <LCD_Write>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000e0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e10:	b08c      	sub	sp, #48	; 0x30
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000e18:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <decodeGGA+0x17c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000e22:	e004      	b.n	8000e2e <decodeGGA+0x22>
 8000e24:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <decodeGGA+0x17c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a57      	ldr	r2, [pc, #348]	; (8000f88 <decodeGGA+0x17c>)
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b56      	ldr	r3, [pc, #344]	; (8000f88 <decodeGGA+0x17c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b2c      	cmp	r3, #44	; 0x2c
 8000e3c:	d1f2      	bne.n	8000e24 <decodeGGA+0x18>
	inx++;
 8000e3e:	4b52      	ldr	r3, [pc, #328]	; (8000f88 <decodeGGA+0x17c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a50      	ldr	r2, [pc, #320]	; (8000f88 <decodeGGA+0x17c>)
 8000e46:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000e48:	e004      	b.n	8000e54 <decodeGGA+0x48>
 8000e4a:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <decodeGGA+0x17c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a4d      	ldr	r2, [pc, #308]	; (8000f88 <decodeGGA+0x17c>)
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <decodeGGA+0x17c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b2c      	cmp	r3, #44	; 0x2c
 8000e62:	d1f2      	bne.n	8000e4a <decodeGGA+0x3e>
	inx++;
 8000e64:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <decodeGGA+0x17c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a47      	ldr	r2, [pc, #284]	; (8000f88 <decodeGGA+0x17c>)
 8000e6c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000e6e:	e004      	b.n	8000e7a <decodeGGA+0x6e>
 8000e70:	4b45      	ldr	r3, [pc, #276]	; (8000f88 <decodeGGA+0x17c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <decodeGGA+0x17c>)
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <decodeGGA+0x17c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b2c      	cmp	r3, #44	; 0x2c
 8000e88:	d1f2      	bne.n	8000e70 <decodeGGA+0x64>
	inx++;
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <decodeGGA+0x17c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <decodeGGA+0x17c>)
 8000e92:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000e94:	e004      	b.n	8000ea0 <decodeGGA+0x94>
 8000e96:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <decodeGGA+0x17c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <decodeGGA+0x17c>)
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <decodeGGA+0x17c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b2c      	cmp	r3, #44	; 0x2c
 8000eae:	d1f2      	bne.n	8000e96 <decodeGGA+0x8a>
	inx++;
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <decodeGGA+0x17c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <decodeGGA+0x17c>)
 8000eb8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000eba:	e004      	b.n	8000ec6 <decodeGGA+0xba>
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <decodeGGA+0x17c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <decodeGGA+0x17c>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <decodeGGA+0x17c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ed4:	d1f2      	bne.n	8000ebc <decodeGGA+0xb0>
	inx++;
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <decodeGGA+0x17c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a2a      	ldr	r2, [pc, #168]	; (8000f88 <decodeGGA+0x17c>)
 8000ede:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000ee0:	e004      	b.n	8000eec <decodeGGA+0xe0>
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <decodeGGA+0x17c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <decodeGGA+0x17c>)
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <decodeGGA+0x17c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b2c      	cmp	r3, #44	; 0x2c
 8000efa:	d1f2      	bne.n	8000ee2 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <decodeGGA+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <decodeGGA+0x17c>)
 8000f04:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <decodeGGA+0x17c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b31      	cmp	r3, #49	; 0x31
 8000f14:	d00f      	beq.n	8000f36 <decodeGGA+0x12a>
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <decodeGGA+0x17c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b32      	cmp	r3, #50	; 0x32
 8000f24:	d007      	beq.n	8000f36 <decodeGGA+0x12a>
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <decodeGGA+0x17c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b36      	cmp	r3, #54	; 0x36
 8000f34:	d106      	bne.n	8000f44 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <decodeGGA+0x17c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000f42:	e009      	b.n	8000f58 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e2f2      	b.n	8001534 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <decodeGGA+0x17c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <decodeGGA+0x17c>)
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <decodeGGA+0x17c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b2c      	cmp	r3, #44	; 0x2c
 8000f66:	d1f2      	bne.n	8000f4e <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <decodeGGA+0x17c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <decodeGGA+0x17c>)
 8000f70:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	220c      	movs	r2, #12
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 f829 	bl	8005fd2 <memset>
	i=0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000f84:	e016      	b.n	8000fb4 <decodeGGA+0x1a8>
 8000f86:	bf00      	nop
 8000f88:	20000210 	.word	0x20000210
	{
		buffer[i] = GGAbuffer[inx];
 8000f8c:	4ba7      	ldr	r3, [pc, #668]	; (800122c <decodeGGA+0x420>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	7819      	ldrb	r1, [r3, #0]
 8000f98:	f107 020c 	add.w	r2, r7, #12
 8000f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9e:	4413      	add	r3, r2
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	701a      	strb	r2, [r3, #0]
		i++;
 8000fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000faa:	4ba0      	ldr	r3, [pc, #640]	; (800122c <decodeGGA+0x420>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a9e      	ldr	r2, [pc, #632]	; (800122c <decodeGGA+0x420>)
 8000fb2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000fb4:	4b9d      	ldr	r3, [pc, #628]	; (800122c <decodeGGA+0x420>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b2c      	cmp	r3, #44	; 0x2c
 8000fc2:	d1e3      	bne.n	8000f8c <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 f9f3 	bl	80053b4 <atoi>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a97      	ldr	r2, [pc, #604]	; (8001230 <decodeGGA+0x424>)
 8000fd2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd6:	1312      	asrs	r2, r2, #12
 8000fd8:	17db      	asrs	r3, r3, #31
 8000fda:	1ad2      	subs	r2, r2, r3
 8000fdc:	4b95      	ldr	r3, [pc, #596]	; (8001234 <decodeGGA+0x428>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4995      	ldr	r1, [pc, #596]	; (8001238 <decodeGGA+0x42c>)
 8000fe2:	fb81 0103 	smull	r0, r1, r1, r3
 8000fe6:	1149      	asrs	r1, r1, #5
 8000fe8:	17db      	asrs	r3, r3, #31
 8000fea:	1acb      	subs	r3, r1, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	4a93      	ldr	r2, [pc, #588]	; (800123c <decodeGGA+0x430>)
 8000ff0:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 f9dc 	bl	80053b4 <atoi>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4a8e      	ldr	r2, [pc, #568]	; (8001238 <decodeGGA+0x42c>)
 8001000:	fb82 1203 	smull	r1, r2, r2, r3
 8001004:	1152      	asrs	r2, r2, #5
 8001006:	17db      	asrs	r3, r3, #31
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	4a8b      	ldr	r2, [pc, #556]	; (8001238 <decodeGGA+0x42c>)
 800100c:	fb82 1203 	smull	r1, r2, r2, r3
 8001010:	1151      	asrs	r1, r2, #5
 8001012:	17da      	asrs	r2, r3, #31
 8001014:	1a8a      	subs	r2, r1, r2
 8001016:	2164      	movs	r1, #100	; 0x64
 8001018:	fb01 f202 	mul.w	r2, r1, r2
 800101c:	1a9a      	subs	r2, r3, r2
 800101e:	4b85      	ldr	r3, [pc, #532]	; (8001234 <decodeGGA+0x428>)
 8001020:	6819      	ldr	r1, [r3, #0]
 8001022:	4b85      	ldr	r3, [pc, #532]	; (8001238 <decodeGGA+0x42c>)
 8001024:	fb83 0301 	smull	r0, r3, r3, r1
 8001028:	1158      	asrs	r0, r3, #5
 800102a:	17cb      	asrs	r3, r1, #31
 800102c:	1ac3      	subs	r3, r0, r3
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	fb00 f303 	mul.w	r3, r0, r3
 8001034:	1acb      	subs	r3, r1, r3
 8001036:	4413      	add	r3, r2
 8001038:	4a81      	ldr	r2, [pc, #516]	; (8001240 <decodeGGA+0x434>)
 800103a:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 800103c:	4b80      	ldr	r3, [pc, #512]	; (8001240 <decodeGGA+0x434>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b3b      	cmp	r3, #59	; 0x3b
 8001042:	dd09      	ble.n	8001058 <decodeGGA+0x24c>
	{
		min = min-60;
 8001044:	4b7e      	ldr	r3, [pc, #504]	; (8001240 <decodeGGA+0x434>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3b3c      	subs	r3, #60	; 0x3c
 800104a:	4a7d      	ldr	r2, [pc, #500]	; (8001240 <decodeGGA+0x434>)
 800104c:	6013      	str	r3, [r2, #0]
		hr++;
 800104e:	4b7b      	ldr	r3, [pc, #492]	; (800123c <decodeGGA+0x430>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	4a79      	ldr	r2, [pc, #484]	; (800123c <decodeGGA+0x430>)
 8001056:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001058:	4b78      	ldr	r3, [pc, #480]	; (800123c <decodeGGA+0x430>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	da09      	bge.n	8001074 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001060:	4b76      	ldr	r3, [pc, #472]	; (800123c <decodeGGA+0x430>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3318      	adds	r3, #24
 8001066:	4a75      	ldr	r2, [pc, #468]	; (800123c <decodeGGA+0x430>)
 8001068:	6013      	str	r3, [r2, #0]
		daychange--;
 800106a:	4b76      	ldr	r3, [pc, #472]	; (8001244 <decodeGGA+0x438>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3b01      	subs	r3, #1
 8001070:	4a74      	ldr	r2, [pc, #464]	; (8001244 <decodeGGA+0x438>)
 8001072:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001074:	4b71      	ldr	r3, [pc, #452]	; (800123c <decodeGGA+0x430>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b17      	cmp	r3, #23
 800107a:	dd09      	ble.n	8001090 <decodeGGA+0x284>
	{
		hr=hr-24;
 800107c:	4b6f      	ldr	r3, [pc, #444]	; (800123c <decodeGGA+0x430>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3b18      	subs	r3, #24
 8001082:	4a6e      	ldr	r2, [pc, #440]	; (800123c <decodeGGA+0x430>)
 8001084:	6013      	str	r3, [r2, #0]
		daychange++;
 8001086:	4b6f      	ldr	r3, [pc, #444]	; (8001244 <decodeGGA+0x438>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a6d      	ldr	r2, [pc, #436]	; (8001244 <decodeGGA+0x438>)
 800108e:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001090:	4b6a      	ldr	r3, [pc, #424]	; (800123c <decodeGGA+0x430>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8001098:	4b69      	ldr	r3, [pc, #420]	; (8001240 <decodeGGA+0x434>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 f985 	bl	80053b4 <atoi>
 80010aa:	4602      	mov	r2, r0
 80010ac:	4b62      	ldr	r3, [pc, #392]	; (8001238 <decodeGGA+0x42c>)
 80010ae:	fb83 1302 	smull	r1, r3, r3, r2
 80010b2:	1159      	asrs	r1, r3, #5
 80010b4:	17d3      	asrs	r3, r2, #31
 80010b6:	1acb      	subs	r3, r1, r3
 80010b8:	2164      	movs	r1, #100	; 0x64
 80010ba:	fb01 f303 	mul.w	r3, r1, r3
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80010c4:	4b59      	ldr	r3, [pc, #356]	; (800122c <decodeGGA+0x420>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a58      	ldr	r2, [pc, #352]	; (800122c <decodeGGA+0x420>)
 80010cc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	220c      	movs	r2, #12
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 ff7b 	bl	8005fd2 <memset>
	i=0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80010e0:	e013      	b.n	800110a <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 80010e2:	4b52      	ldr	r3, [pc, #328]	; (800122c <decodeGGA+0x420>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	7819      	ldrb	r1, [r3, #0]
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f4:	4413      	add	r3, r2
 80010f6:	460a      	mov	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
		i++;
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	3301      	adds	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001100:	4b4a      	ldr	r3, [pc, #296]	; (800122c <decodeGGA+0x420>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a49      	ldr	r2, [pc, #292]	; (800122c <decodeGGA+0x420>)
 8001108:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800110a:	4b48      	ldr	r3, [pc, #288]	; (800122c <decodeGGA+0x420>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b2c      	cmp	r3, #44	; 0x2c
 8001118:	d1e3      	bne.n	80010e2 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f816 	bl	8000150 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	2b05      	cmp	r3, #5
 8001128:	d801      	bhi.n	800112e <decodeGGA+0x322>
 800112a:	2302      	movs	r3, #2
 800112c:	e202      	b.n	8001534 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4618      	mov	r0, r3
 8001134:	f004 f93e 	bl	80053b4 <atoi>
 8001138:	4603      	mov	r3, r0
 800113a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001140:	e002      	b.n	8001148 <decodeGGA+0x33c>
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	3301      	adds	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
 8001148:	f107 020c 	add.w	r2, r7, #12
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	4413      	add	r3, r2
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b2e      	cmp	r3, #46	; 0x2e
 8001154:	d1f5      	bne.n	8001142 <decodeGGA+0x336>
	j++;
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	3301      	adds	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4618      	mov	r0, r3
 8001162:	f7fe fff5 	bl	8000150 <strlen>
 8001166:	4602      	mov	r2, r0
 8001168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	f107 020c 	add.w	r2, r7, #12
 8001174:	4413      	add	r3, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f004 f91c 	bl	80053b4 <atoi>
 800117c:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800117e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f93e 	bl	8000404 <__aeabi_i2d>
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <decodeGGA+0x43c>)
 800118e:	f7ff facd 	bl	800072c <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4690      	mov	r8, r2
 8001198:	4699      	mov	r9, r3
 800119a:	69f8      	ldr	r0, [r7, #28]
 800119c:	f7ff f932 	bl	8000404 <__aeabi_i2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	3302      	adds	r3, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f92b 	bl	8000404 <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4925      	ldr	r1, [pc, #148]	; (800124c <decodeGGA+0x440>)
 80011b8:	f006 fff4 	bl	80081a4 <pow>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff fab2 	bl	800072c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4640      	mov	r0, r8
 80011ce:	4649      	mov	r1, r9
 80011d0:	f7fe ffcc 	bl	800016c <__adddf3>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fc54 	bl	8000a88 <__aeabi_d2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	601a      	str	r2, [r3, #0]
	inx++;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <decodeGGA+0x420>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <decodeGGA+0x420>)
 80011f2:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <decodeGGA+0x420>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <decodeGGA+0x420>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <decodeGGA+0x420>)
 800120c:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <decodeGGA+0x420>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <decodeGGA+0x420>)
 8001216:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	220c      	movs	r2, #12
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f004 fed6 	bl	8005fd2 <memset>
	i=0;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800122a:	e025      	b.n	8001278 <decodeGGA+0x46c>
 800122c:	20000210 	.word	0x20000210
 8001230:	68db8bad 	.word	0x68db8bad
 8001234:	20000000 	.word	0x20000000
 8001238:	51eb851f 	.word	0x51eb851f
 800123c:	20000214 	.word	0x20000214
 8001240:	20000218 	.word	0x20000218
 8001244:	20000228 	.word	0x20000228
 8001248:	40590000 	.word	0x40590000
 800124c:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8001250:	4b88      	ldr	r3, [pc, #544]	; (8001474 <decodeGGA+0x668>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	7819      	ldrb	r1, [r3, #0]
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	4413      	add	r3, r2
 8001264:	460a      	mov	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
		i++;
 8001268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126a:	3301      	adds	r3, #1
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800126e:	4b81      	ldr	r3, [pc, #516]	; (8001474 <decodeGGA+0x668>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	4a7f      	ldr	r2, [pc, #508]	; (8001474 <decodeGGA+0x668>)
 8001276:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001278:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <decodeGGA+0x668>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b2c      	cmp	r3, #44	; 0x2c
 8001286:	d1e3      	bne.n	8001250 <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	4618      	mov	r0, r3
 800128e:	f004 f891 	bl	80053b4 <atoi>
 8001292:	4603      	mov	r3, r0
 8001294:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 800129a:	e002      	b.n	80012a2 <decodeGGA+0x496>
 800129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129e:	3301      	adds	r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b2e      	cmp	r3, #46	; 0x2e
 80012ae:	d1f5      	bne.n	800129c <decodeGGA+0x490>
	j++;
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	3301      	adds	r3, #1
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff48 	bl	8000150 <strlen>
 80012c0:	4602      	mov	r2, r0
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	4413      	add	r3, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 f86f 	bl	80053b4 <atoi>
 80012d6:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80012d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f891 	bl	8000404 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b64      	ldr	r3, [pc, #400]	; (8001478 <decodeGGA+0x66c>)
 80012e8:	f7ff fa20 	bl	800072c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4690      	mov	r8, r2
 80012f2:	4699      	mov	r9, r3
 80012f4:	69f8      	ldr	r0, [r7, #28]
 80012f6:	f7ff f885 	bl	8000404 <__aeabi_i2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	3302      	adds	r3, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f87e 	bl	8000404 <__aeabi_i2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	f04f 0000 	mov.w	r0, #0
 8001310:	495a      	ldr	r1, [pc, #360]	; (800147c <decodeGGA+0x670>)
 8001312:	f006 ff47 	bl	80081a4 <pow>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7ff fa05 	bl	800072c <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4640      	mov	r0, r8
 8001328:	4649      	mov	r1, r9
 800132a:	f7fe ff1f 	bl	800016c <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fba7 	bl	8000a88 <__aeabi_d2f>
 800133a:	4603      	mov	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	609a      	str	r2, [r3, #8]
	inx++;
 8001344:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <decodeGGA+0x668>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <decodeGGA+0x668>)
 800134c:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800134e:	4b49      	ldr	r3, [pc, #292]	; (8001474 <decodeGGA+0x668>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800135e:	4b45      	ldr	r3, [pc, #276]	; (8001474 <decodeGGA+0x668>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a43      	ldr	r2, [pc, #268]	; (8001474 <decodeGGA+0x668>)
 8001366:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001368:	4b42      	ldr	r3, [pc, #264]	; (8001474 <decodeGGA+0x668>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a41      	ldr	r2, [pc, #260]	; (8001474 <decodeGGA+0x668>)
 8001370:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8001372:	4b40      	ldr	r3, [pc, #256]	; (8001474 <decodeGGA+0x668>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a3e      	ldr	r2, [pc, #248]	; (8001474 <decodeGGA+0x668>)
 800137a:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 800137c:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <decodeGGA+0x668>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a3c      	ldr	r2, [pc, #240]	; (8001474 <decodeGGA+0x668>)
 8001384:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	220c      	movs	r2, #12
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f004 fe1f 	bl	8005fd2 <memset>
	i=0;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001398:	e013      	b.n	80013c2 <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <decodeGGA+0x668>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	7819      	ldrb	r1, [r3, #0]
 80013a6:	f107 020c 	add.w	r2, r7, #12
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	4413      	add	r3, r2
 80013ae:	460a      	mov	r2, r1
 80013b0:	701a      	strb	r2, [r3, #0]
		i++;
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	3301      	adds	r3, #1
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <decodeGGA+0x668>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	4a2d      	ldr	r2, [pc, #180]	; (8001474 <decodeGGA+0x668>)
 80013c0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <decodeGGA+0x668>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b2c      	cmp	r3, #44	; 0x2c
 80013d0:	d1e3      	bne.n	800139a <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 ffec 	bl	80053b4 <atoi>
 80013dc:	4602      	mov	r2, r0
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <decodeGGA+0x668>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a22      	ldr	r2, [pc, #136]	; (8001474 <decodeGGA+0x668>)
 80013ea:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80013ec:	e004      	b.n	80013f8 <decodeGGA+0x5ec>
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <decodeGGA+0x668>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <decodeGGA+0x668>)
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <decodeGGA+0x668>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b2c      	cmp	r3, #44	; 0x2c
 8001406:	d1f2      	bne.n	80013ee <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <decodeGGA+0x668>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a19      	ldr	r2, [pc, #100]	; (8001474 <decodeGGA+0x668>)
 8001410:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	220c      	movs	r2, #12
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f004 fdd9 	bl	8005fd2 <memset>
	i=0;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001424:	e013      	b.n	800144e <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <decodeGGA+0x668>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	7819      	ldrb	r1, [r3, #0]
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	4413      	add	r3, r2
 800143a:	460a      	mov	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
		i++;
 800143e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001440:	3301      	adds	r3, #1
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <decodeGGA+0x668>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <decodeGGA+0x668>)
 800144c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <decodeGGA+0x668>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b2c      	cmp	r3, #44	; 0x2c
 800145c:	d1e3      	bne.n	8001426 <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4618      	mov	r0, r3
 8001464:	f003 ffa6 	bl	80053b4 <atoi>
 8001468:	4603      	mov	r3, r0
 800146a:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8001470:	e009      	b.n	8001486 <decodeGGA+0x67a>
 8001472:	bf00      	nop
 8001474:	20000210 	.word	0x20000210
 8001478:	40590000 	.word	0x40590000
 800147c:	40240000 	.word	0x40240000
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	3301      	adds	r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
 8001486:	f107 020c 	add.w	r2, r7, #12
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b2e      	cmp	r3, #46	; 0x2e
 8001492:	d1f5      	bne.n	8001480 <decodeGGA+0x674>
	j++;
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	3301      	adds	r3, #1
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe fe56 	bl	8000150 <strlen>
 80014a4:	4602      	mov	r2, r0
 80014a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	f107 020c 	add.w	r2, r7, #12
 80014b2:	4413      	add	r3, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 ff7d 	bl	80053b4 <atoi>
 80014ba:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80014bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ff9f 	bl	8000404 <__aeabi_i2d>
 80014c6:	4604      	mov	r4, r0
 80014c8:	460d      	mov	r5, r1
 80014ca:	69f8      	ldr	r0, [r7, #28]
 80014cc:	f7fe ff9a 	bl	8000404 <__aeabi_i2d>
 80014d0:	4680      	mov	r8, r0
 80014d2:	4689      	mov	r9, r1
 80014d4:	6a38      	ldr	r0, [r7, #32]
 80014d6:	f7fe ff95 	bl	8000404 <__aeabi_i2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	f04f 0000 	mov.w	r0, #0
 80014e2:	4917      	ldr	r1, [pc, #92]	; (8001540 <decodeGGA+0x734>)
 80014e4:	f006 fe5e 	bl	80081a4 <pow>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4640      	mov	r0, r8
 80014ee:	4649      	mov	r1, r9
 80014f0:	f7ff f91c 	bl	800072c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7fe fe36 	bl	800016c <__adddf3>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fabe 	bl	8000a88 <__aeabi_d2f>
 800150c:	4603      	mov	r3, r0
 800150e:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	621a      	str	r2, [r3, #32]

	inx++;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <decodeGGA+0x738>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	4a09      	ldr	r2, [pc, #36]	; (8001544 <decodeGGA+0x738>)
 800151e:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <decodeGGA+0x738>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8001532:	2300      	movs	r3, #0

}
 8001534:	4618      	mov	r0, r3
 8001536:	3730      	adds	r7, #48	; 0x30
 8001538:	46bd      	mov	sp, r7
 800153a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800153e:	bf00      	nop
 8001540:	40240000 	.word	0x40240000
 8001544:	20000210 	.word	0x20000210

08001548 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800154c:	b090      	sub	sp, #64	; 0x40
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001554:	4b92      	ldr	r3, [pc, #584]	; (80017a0 <decodeRMC+0x258>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800155e:	e004      	b.n	800156a <decodeRMC+0x22>
 8001560:	4b8f      	ldr	r3, [pc, #572]	; (80017a0 <decodeRMC+0x258>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a8e      	ldr	r2, [pc, #568]	; (80017a0 <decodeRMC+0x258>)
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b8d      	ldr	r3, [pc, #564]	; (80017a0 <decodeRMC+0x258>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b2c      	cmp	r3, #44	; 0x2c
 8001578:	d1f2      	bne.n	8001560 <decodeRMC+0x18>
	inx++;
 800157a:	4b89      	ldr	r3, [pc, #548]	; (80017a0 <decodeRMC+0x258>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	4a87      	ldr	r2, [pc, #540]	; (80017a0 <decodeRMC+0x258>)
 8001582:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001584:	e004      	b.n	8001590 <decodeRMC+0x48>
 8001586:	4b86      	ldr	r3, [pc, #536]	; (80017a0 <decodeRMC+0x258>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a84      	ldr	r2, [pc, #528]	; (80017a0 <decodeRMC+0x258>)
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b83      	ldr	r3, [pc, #524]	; (80017a0 <decodeRMC+0x258>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b2c      	cmp	r3, #44	; 0x2c
 800159e:	d1f2      	bne.n	8001586 <decodeRMC+0x3e>
	inx++;
 80015a0:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <decodeRMC+0x258>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4a7e      	ldr	r2, [pc, #504]	; (80017a0 <decodeRMC+0x258>)
 80015a8:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80015aa:	4b7d      	ldr	r3, [pc, #500]	; (80017a0 <decodeRMC+0x258>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b41      	cmp	r3, #65	; 0x41
 80015b8:	d10d      	bne.n	80015d6 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80015c0:	4b77      	ldr	r3, [pc, #476]	; (80017a0 <decodeRMC+0x258>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a76      	ldr	r2, [pc, #472]	; (80017a0 <decodeRMC+0x258>)
 80015c8:	6013      	str	r3, [r2, #0]
	inx++;
 80015ca:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <decodeRMC+0x258>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	4a73      	ldr	r2, [pc, #460]	; (80017a0 <decodeRMC+0x258>)
 80015d2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80015d4:	e009      	b.n	80015ea <decodeRMC+0xa2>
		rmc->isValid =0;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
		return 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	e1d5      	b.n	800198c <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80015e0:	4b6f      	ldr	r3, [pc, #444]	; (80017a0 <decodeRMC+0x258>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <decodeRMC+0x258>)
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b6d      	ldr	r3, [pc, #436]	; (80017a0 <decodeRMC+0x258>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b2c      	cmp	r3, #44	; 0x2c
 80015f8:	d1f2      	bne.n	80015e0 <decodeRMC+0x98>
	inx++;
 80015fa:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <decodeRMC+0x258>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a67      	ldr	r2, [pc, #412]	; (80017a0 <decodeRMC+0x258>)
 8001602:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8001604:	e004      	b.n	8001610 <decodeRMC+0xc8>
 8001606:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <decodeRMC+0x258>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a64      	ldr	r2, [pc, #400]	; (80017a0 <decodeRMC+0x258>)
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <decodeRMC+0x258>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b2c      	cmp	r3, #44	; 0x2c
 800161e:	d1f2      	bne.n	8001606 <decodeRMC+0xbe>
	inx++;
 8001620:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <decodeRMC+0x258>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4a5e      	ldr	r2, [pc, #376]	; (80017a0 <decodeRMC+0x258>)
 8001628:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 800162a:	e004      	b.n	8001636 <decodeRMC+0xee>
 800162c:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <decodeRMC+0x258>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	4a5b      	ldr	r2, [pc, #364]	; (80017a0 <decodeRMC+0x258>)
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <decodeRMC+0x258>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b2c      	cmp	r3, #44	; 0x2c
 8001644:	d1f2      	bne.n	800162c <decodeRMC+0xe4>
	inx++;
 8001646:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <decodeRMC+0x258>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a54      	ldr	r2, [pc, #336]	; (80017a0 <decodeRMC+0x258>)
 800164e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001650:	e004      	b.n	800165c <decodeRMC+0x114>
 8001652:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <decodeRMC+0x258>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <decodeRMC+0x258>)
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <decodeRMC+0x258>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b2c      	cmp	r3, #44	; 0x2c
 800166a:	d1f2      	bne.n	8001652 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <decodeRMC+0x258>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a4b      	ldr	r2, [pc, #300]	; (80017a0 <decodeRMC+0x258>)
 8001674:	6013      	str	r3, [r2, #0]
	i=0;
 8001676:	2300      	movs	r3, #0
 8001678:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	220c      	movs	r2, #12
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f004 fca5 	bl	8005fd2 <memset>
	while (RMCbuffer[inx] != ',')
 8001688:	e013      	b.n	80016b2 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <decodeRMC+0x258>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	7819      	ldrb	r1, [r3, #0]
 8001696:	f107 0208 	add.w	r2, r7, #8
 800169a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800169c:	4413      	add	r3, r2
 800169e:	460a      	mov	r2, r1
 80016a0:	701a      	strb	r2, [r3, #0]
		i++;
 80016a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016a4:	3301      	adds	r3, #1
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80016a8:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <decodeRMC+0x258>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a3c      	ldr	r2, [pc, #240]	; (80017a0 <decodeRMC+0x258>)
 80016b0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <decodeRMC+0x258>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b2c      	cmp	r3, #44	; 0x2c
 80016c0:	d1e3      	bne.n	800168a <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d055      	beq.n	8001778 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fe6f 	bl	80053b4 <atoi>
 80016d6:	4603      	mov	r3, r0
 80016d8:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80016de:	e002      	b.n	80016e6 <decodeRMC+0x19e>
 80016e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e2:	3301      	adds	r3, #1
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80016e6:	f107 0208 	add.w	r2, r7, #8
 80016ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b2e      	cmp	r3, #46	; 0x2e
 80016f2:	d1f5      	bne.n	80016e0 <decodeRMC+0x198>
		j++;
 80016f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016f6:	3301      	adds	r3, #1
 80016f8:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fd26 	bl	8000150 <strlen>
 8001704:	4602      	mov	r2, r0
 8001706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 800170c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170e:	f107 0208 	add.w	r2, r7, #8
 8001712:	4413      	add	r3, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f003 fe4d 	bl	80053b4 <atoi>
 800171a:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 800171c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fe6f 	bl	8000404 <__aeabi_i2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800172c:	f7fe fe6a 	bl	8000404 <__aeabi_i2d>
 8001730:	4680      	mov	r8, r0
 8001732:	4689      	mov	r9, r1
 8001734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001736:	f7fe fe65 	bl	8000404 <__aeabi_i2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	f04f 0000 	mov.w	r0, #0
 8001742:	4918      	ldr	r1, [pc, #96]	; (80017a4 <decodeRMC+0x25c>)
 8001744:	f006 fd2e 	bl	80081a4 <pow>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4640      	mov	r0, r8
 800174e:	4649      	mov	r1, r9
 8001750:	f7fe ffec 	bl	800072c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe fd06 	bl	800016c <__adddf3>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f98e 	bl	8000a88 <__aeabi_d2f>
 800176c:	4603      	mov	r3, r0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	e003      	b.n	8001780 <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <decodeRMC+0x258>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <decodeRMC+0x258>)
 8001788:	6013      	str	r3, [r2, #0]
	i=0;
 800178a:	2300      	movs	r3, #0
 800178c:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	220c      	movs	r2, #12
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f004 fc1b 	bl	8005fd2 <memset>
	while (RMCbuffer[inx] != ',')
 800179c:	e018      	b.n	80017d0 <decodeRMC+0x288>
 800179e:	bf00      	nop
 80017a0:	20000210 	.word	0x20000210
 80017a4:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 80017a8:	4b7b      	ldr	r3, [pc, #492]	; (8001998 <decodeRMC+0x450>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	7819      	ldrb	r1, [r3, #0]
 80017b4:	f107 0208 	add.w	r2, r7, #8
 80017b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017ba:	4413      	add	r3, r2
 80017bc:	460a      	mov	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
		i++;
 80017c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c2:	3301      	adds	r3, #1
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80017c6:	4b74      	ldr	r3, [pc, #464]	; (8001998 <decodeRMC+0x450>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	4a72      	ldr	r2, [pc, #456]	; (8001998 <decodeRMC+0x450>)
 80017ce:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80017d0:	4b71      	ldr	r3, [pc, #452]	; (8001998 <decodeRMC+0x450>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b2c      	cmp	r3, #44	; 0x2c
 80017de:	d1e3      	bne.n	80017a8 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d055      	beq.n	8001896 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fde0 	bl	80053b4 <atoi>
 80017f4:	4603      	mov	r3, r0
 80017f6:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80017fc:	e002      	b.n	8001804 <decodeRMC+0x2bc>
 80017fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001800:	3301      	adds	r3, #1
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b2e      	cmp	r3, #46	; 0x2e
 8001810:	d1f5      	bne.n	80017fe <decodeRMC+0x2b6>
		j++;
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	3301      	adds	r3, #1
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fc97 	bl	8000150 <strlen>
 8001822:	4602      	mov	r2, r0
 8001824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	f107 0208 	add.w	r2, r7, #8
 8001830:	4413      	add	r3, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fdbe 	bl	80053b4 <atoi>
 8001838:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 800183a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fde0 	bl	8000404 <__aeabi_i2d>
 8001844:	4604      	mov	r4, r0
 8001846:	460d      	mov	r5, r1
 8001848:	69b8      	ldr	r0, [r7, #24]
 800184a:	f7fe fddb 	bl	8000404 <__aeabi_i2d>
 800184e:	4680      	mov	r8, r0
 8001850:	4689      	mov	r9, r1
 8001852:	69f8      	ldr	r0, [r7, #28]
 8001854:	f7fe fdd6 	bl	8000404 <__aeabi_i2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	f04f 0000 	mov.w	r0, #0
 8001860:	494e      	ldr	r1, [pc, #312]	; (800199c <decodeRMC+0x454>)
 8001862:	f006 fc9f 	bl	80081a4 <pow>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4640      	mov	r0, r8
 800186c:	4649      	mov	r1, r9
 800186e:	f7fe ff5d 	bl	800072c <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7fe fc77 	bl	800016c <__adddf3>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f8ff 	bl	8000a88 <__aeabi_d2f>
 800188a:	4603      	mov	r3, r0
 800188c:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	e003      	b.n	800189e <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800189e:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <decodeRMC+0x450>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	4a3c      	ldr	r2, [pc, #240]	; (8001998 <decodeRMC+0x450>)
 80018a6:	6013      	str	r3, [r2, #0]
	i=0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	220c      	movs	r2, #12
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 fb8c 	bl	8005fd2 <memset>
	while (RMCbuffer[inx] != ',')
 80018ba:	e013      	b.n	80018e4 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <decodeRMC+0x450>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	7819      	ldrb	r1, [r3, #0]
 80018c8:	f107 0208 	add.w	r2, r7, #8
 80018cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ce:	4413      	add	r3, r2
 80018d0:	460a      	mov	r2, r1
 80018d2:	701a      	strb	r2, [r3, #0]
		i++;
 80018d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d6:	3301      	adds	r3, #1
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <decodeRMC+0x450>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a2d      	ldr	r2, [pc, #180]	; (8001998 <decodeRMC+0x450>)
 80018e2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <decodeRMC+0x450>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b2c      	cmp	r3, #44	; 0x2c
 80018f2:	d1e3      	bne.n	80018bc <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fd5b 	bl	80053b4 <atoi>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <decodeRMC+0x458>)
 8001902:	fb82 1203 	smull	r1, r2, r2, r3
 8001906:	1312      	asrs	r2, r2, #12
 8001908:	17db      	asrs	r3, r3, #31
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4a25      	ldr	r2, [pc, #148]	; (80019a4 <decodeRMC+0x45c>)
 800190e:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fd4d 	bl	80053b4 <atoi>
 800191a:	4603      	mov	r3, r0
 800191c:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <decodeRMC+0x460>)
 800191e:	fb82 1203 	smull	r1, r2, r2, r3
 8001922:	1152      	asrs	r2, r2, #5
 8001924:	17db      	asrs	r3, r3, #31
 8001926:	1ad2      	subs	r2, r2, r3
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <decodeRMC+0x460>)
 800192a:	fb83 1302 	smull	r1, r3, r3, r2
 800192e:	1159      	asrs	r1, r3, #5
 8001930:	17d3      	asrs	r3, r2, #31
 8001932:	1acb      	subs	r3, r1, r3
 8001934:	2164      	movs	r1, #100	; 0x64
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <decodeRMC+0x464>)
 800193e:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4618      	mov	r0, r3
 8001946:	f003 fd35 	bl	80053b4 <atoi>
 800194a:	4602      	mov	r2, r0
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <decodeRMC+0x460>)
 800194e:	fb83 1302 	smull	r1, r3, r3, r2
 8001952:	1159      	asrs	r1, r3, #5
 8001954:	17d3      	asrs	r3, r2, #31
 8001956:	1acb      	subs	r3, r1, r3
 8001958:	2164      	movs	r1, #100	; 0x64
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <decodeRMC+0x468>)
 8001962:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <decodeRMC+0x45c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <decodeRMC+0x46c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4413      	add	r3, r2
 800196e:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <decodeRMC+0x45c>)
 8001970:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <decodeRMC+0x45c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <decodeRMC+0x464>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <decodeRMC+0x468>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	609a      	str	r2, [r3, #8]

	return 0;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3740      	adds	r7, #64	; 0x40
 8001990:	46bd      	mov	sp, r7
 8001992:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001996:	bf00      	nop
 8001998:	20000210 	.word	0x20000210
 800199c:	40240000 	.word	0x40240000
 80019a0:	68db8bad 	.word	0x68db8bad
 80019a4:	2000021c 	.word	0x2000021c
 80019a8:	51eb851f 	.word	0x51eb851f
 80019ac:	20000220 	.word	0x20000220
 80019b0:	20000224 	.word	0x20000224
 80019b4:	20000228 	.word	0x20000228

080019b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019be:	f000 ffd3 	bl	8002968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c2:	f000 f97b 	bl	8001cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c6:	f000 fadf 	bl	8001f88 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019ca:	f000 fab3 	bl	8001f34 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80019ce:	f000 f9d1 	bl	8001d74 <MX_ADC1_Init>
  MX_TIM1_Init();
 80019d2:	f000 fa0d 	bl	8001df0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019d6:	f000 fa61 	bl	8001e9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*
   * Inicializamos el encoder
   */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80019da:	213c      	movs	r1, #60	; 0x3c
 80019dc:	4899      	ldr	r0, [pc, #612]	; (8001c44 <main+0x28c>)
 80019de:	f002 fce7 	bl	80043b0 <HAL_TIM_Encoder_Start>
  /*
   * Inicializamos el timer dos para la funcion de delay en us
   */
  HAL_TIM_Base_Start(&htim2);
 80019e2:	4899      	ldr	r0, [pc, #612]	; (8001c48 <main+0x290>)
 80019e4:	f002 fbf8 	bl	80041d8 <HAL_TIM_Base_Start>

  /*
   * Inicio del ADC
   */
  HAL_ADC_Start(&hadc1);
 80019e8:	4898      	ldr	r0, [pc, #608]	; (8001c4c <main+0x294>)
 80019ea:	f001 f91b 	bl	8002c24 <HAL_ADC_Start>

  /*
   * SALUDO AL USUARIO
   * DEBUG DEL LCD
   */
  LCD_PrintString("Hail Lechuga");
 80019ee:	4898      	ldr	r0, [pc, #608]	; (8001c50 <main+0x298>)
 80019f0:	f7ff f918 	bl	8000c24 <LCD_PrintString>
  HAL_Delay(1000);
 80019f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f8:	f001 f818 	bl	8002a2c <HAL_Delay>
  LCD_ClearDisplay();
 80019fc:	f7ff f8cb 	bl	8000b96 <LCD_ClearDisplay>
  LCD_PrintString("COOP de lechugas");
 8001a00:	4894      	ldr	r0, [pc, #592]	; (8001c54 <main+0x29c>)
 8001a02:	f7ff f90f 	bl	8000c24 <LCD_PrintString>
  LCD_Position(1, 0);
 8001a06:	2100      	movs	r1, #0
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff f8cf 	bl	8000bac <LCD_Position>
  LCD_PrintString("GUAJOLOTERA");
 8001a0e:	4892      	ldr	r0, [pc, #584]	; (8001c58 <main+0x2a0>)
 8001a10:	f7ff f908 	bl	8000c24 <LCD_PrintString>
  HAL_Delay(1000);
 8001a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a18:	f001 f808 	bl	8002a2c <HAL_Delay>
  LCD_ClearDisplay();
 8001a1c:	f7ff f8bb 	bl	8000b96 <LCD_ClearDisplay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LCD_Start();
 8001a20:	f7ff f882 	bl	8000b28 <LCD_Start>
  Ringbuf_init();
 8001a24:	f000 fd6a 	bl	80024fc <Ringbuf_init>
  HAL_Delay(500);
 8001a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a2c:	f000 fffe 	bl	8002a2c <HAL_Delay>
    /* USER CODE BEGIN 3 */

	  /*
	   * Interfaz con el usuraio
	   */
	  std = TIM1->CNT/4;
 8001a30:	4b8a      	ldr	r3, [pc, #552]	; (8001c5c <main+0x2a4>)
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <main+0x2a8>)
 8001a3a:	701a      	strb	r2, [r3, #0]

	  if (std == 0)
 8001a3c:	4b88      	ldr	r3, [pc, #544]	; (8001c60 <main+0x2a8>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f040 80c4 	bne.w	8001bce <main+0x216>
	  {
		  if (Wait_for("GGA") == 1)
 8001a46:	4887      	ldr	r0, [pc, #540]	; (8001c64 <main+0x2ac>)
 8001a48:	f000 fe82 	bl	8002750 <Wait_for>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d115      	bne.n	8001a7e <main+0xc6>
			  {

				  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8001a52:	4b85      	ldr	r3, [pc, #532]	; (8001c68 <main+0x2b0>)
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	601a      	str	r2, [r3, #0]

				  Copy_upto("*", GGA);
 8001a5a:	4984      	ldr	r1, [pc, #528]	; (8001c6c <main+0x2b4>)
 8001a5c:	4884      	ldr	r0, [pc, #528]	; (8001c70 <main+0x2b8>)
 8001a5e:	f000 fdf7 	bl	8002650 <Copy_upto>
				  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8001a62:	4984      	ldr	r1, [pc, #528]	; (8001c74 <main+0x2bc>)
 8001a64:	4881      	ldr	r0, [pc, #516]	; (8001c6c <main+0x2b4>)
 8001a66:	f7ff f9d1 	bl	8000e0c <decodeGGA>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <main+0xc0>
 8001a70:	4b81      	ldr	r3, [pc, #516]	; (8001c78 <main+0x2c0>)
 8001a72:	2202      	movs	r2, #2
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e002      	b.n	8001a7e <main+0xc6>
				  else flagGGA = 1;  // 1 indicates the data is invalid
 8001a78:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <main+0x2c0>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
			  }

			  if (Wait_for("RMC") == 1)
 8001a7e:	487f      	ldr	r0, [pc, #508]	; (8001c7c <main+0x2c4>)
 8001a80:	f000 fe66 	bl	8002750 <Wait_for>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d115      	bne.n	8001ab6 <main+0xfe>
			  {

				  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 8001a8a:	4b77      	ldr	r3, [pc, #476]	; (8001c68 <main+0x2b0>)
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	601a      	str	r2, [r3, #0]

				  Copy_upto("*", RMC);
 8001a92:	497b      	ldr	r1, [pc, #492]	; (8001c80 <main+0x2c8>)
 8001a94:	4876      	ldr	r0, [pc, #472]	; (8001c70 <main+0x2b8>)
 8001a96:	f000 fddb 	bl	8002650 <Copy_upto>
				  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 8001a9a:	497a      	ldr	r1, [pc, #488]	; (8001c84 <main+0x2cc>)
 8001a9c:	4878      	ldr	r0, [pc, #480]	; (8001c80 <main+0x2c8>)
 8001a9e:	f7ff fd53 	bl	8001548 <decodeRMC>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d103      	bne.n	8001ab0 <main+0xf8>
 8001aa8:	4b77      	ldr	r3, [pc, #476]	; (8001c88 <main+0x2d0>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e002      	b.n	8001ab6 <main+0xfe>
				  else flagRMC = 1;  // 1 indicates the data is invalid
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <main+0x2d0>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
			  }

			  if ((flagGGA == 2) | (flagRMC == 2))
 8001ab6:	4b70      	ldr	r3, [pc, #448]	; (8001c78 <main+0x2c0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b70      	ldr	r3, [pc, #448]	; (8001c88 <main+0x2d0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03c      	beq.n	8001b54 <main+0x19c>
				  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
						  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
				  lcd_send_string(lcdBuffer);
				  */

				  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8001ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ade:	486b      	ldr	r0, [pc, #428]	; (8001c8c <main+0x2d4>)
 8001ae0:	f001 fe4a 	bl	8003778 <HAL_GPIO_TogglePin>

				  LCD_Position(0, 0);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff f860 	bl	8000bac <LCD_Position>
				  sprintf (msg, "%02d / %02d / %02d",gpsData.rmcstruct.date.Day, \
 8001aec:	4b61      	ldr	r3, [pc, #388]	; (8001c74 <main+0x2bc>)
 8001aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af0:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <main+0x2bc>)
 8001af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af4:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <main+0x2bc>)
 8001af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	460b      	mov	r3, r1
 8001afc:	4964      	ldr	r1, [pc, #400]	; (8001c90 <main+0x2d8>)
 8001afe:	4865      	ldr	r0, [pc, #404]	; (8001c94 <main+0x2dc>)
 8001b00:	f004 fa04 	bl	8005f0c <siprintf>
				  						  	  gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
				  LCD_PrintString(msg);
 8001b04:	4863      	ldr	r0, [pc, #396]	; (8001c94 <main+0x2dc>)
 8001b06:	f7ff f88d 	bl	8000c24 <LCD_PrintString>
				  LCD_Position(1, 0);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff f84d 	bl	8000bac <LCD_Position>
				  sprintf (msg,"%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001b12:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <main+0x2bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fc86 	bl	8000428 <__aeabi_f2d>
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	460d      	mov	r5, r1
 8001b20:	4b54      	ldr	r3, [pc, #336]	; (8001c74 <main+0x2bc>)
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	461e      	mov	r6, r3
						  	  	  	  	  	  	  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001b26:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <main+0x2bc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
				  sprintf (msg,"%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fc7c 	bl	8000428 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
						  	  	  	  	  	  	  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001b34:	494f      	ldr	r1, [pc, #316]	; (8001c74 <main+0x2bc>)
 8001b36:	7b09      	ldrb	r1, [r1, #12]
				  sprintf (msg,"%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001b38:	9104      	str	r1, [sp, #16]
 8001b3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b3e:	9600      	str	r6, [sp, #0]
 8001b40:	4622      	mov	r2, r4
 8001b42:	462b      	mov	r3, r5
 8001b44:	4954      	ldr	r1, [pc, #336]	; (8001c98 <main+0x2e0>)
 8001b46:	4853      	ldr	r0, [pc, #332]	; (8001c94 <main+0x2dc>)
 8001b48:	f004 f9e0 	bl	8005f0c <siprintf>
				  LCD_PrintString(msg);
 8001b4c:	4851      	ldr	r0, [pc, #324]	; (8001c94 <main+0x2dc>)
 8001b4e:	f7ff f869 	bl	8000c24 <LCD_PrintString>
 8001b52:	e01f      	b.n	8001b94 <main+0x1dc>
			  }

			  else if ((flagGGA == 1) | (flagRMC == 1))
 8001b54:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <main+0x2c0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <main+0x2d0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00d      	beq.n	8001b94 <main+0x1dc>
				  lcd_send_string("   NO FIX YET   ");
				  lcd_put_cur(1, 0);
				  lcd_send_string("   Please wait  ");
				  */

				  LCD_Position(0,0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff f816 	bl	8000bac <LCD_Position>
				  LCD_PrintString("No se encuentra ");
 8001b80:	4846      	ldr	r0, [pc, #280]	; (8001c9c <main+0x2e4>)
 8001b82:	f7ff f84f 	bl	8000c24 <LCD_PrintString>
				  LCD_Position(1,0);
 8001b86:	2100      	movs	r1, #0
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7ff f80f 	bl	8000bac <LCD_Position>
				  LCD_PrintString("satelite...     ");
 8001b8e:	4844      	ldr	r0, [pc, #272]	; (8001ca0 <main+0x2e8>)
 8001b90:	f7ff f848 	bl	8000c24 <LCD_PrintString>

			  }

			  if (VCCTimeout <= 0)
 8001b94:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <main+0x2b0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	dc18      	bgt.n	8001bce <main+0x216>
			  {
				  VCCTimeout = 5000;  // Reset the timeout
 8001b9c:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <main+0x2b0>)
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	601a      	str	r2, [r3, #0]

				  //reset flags
				  flagGGA =flagRMC =0;
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <main+0x2d0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <main+0x2d0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a32      	ldr	r2, [pc, #200]	; (8001c78 <main+0x2c0>)
 8001bb0:	6013      	str	r3, [r2, #0]
				  lcd_put_cur(0, 0);
				  lcd_send_string("    VCC Issue   ");
				  lcd_put_cur(1, 0);
				  lcd_send_string("Check Connection");
				  */
				  LCD_Position(0,0);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7fe fff9 	bl	8000bac <LCD_Position>
				  LCD_PrintString("    VCC  bajo   ");
 8001bba:	483a      	ldr	r0, [pc, #232]	; (8001ca4 <main+0x2ec>)
 8001bbc:	f7ff f832 	bl	8000c24 <LCD_PrintString>
				  LCD_Position(1,0);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f7fe fff2 	bl	8000bac <LCD_Position>
				  LCD_PrintString("Checar conexion ");
 8001bc8:	4837      	ldr	r0, [pc, #220]	; (8001ca8 <main+0x2f0>)
 8001bca:	f7ff f82b 	bl	8000c24 <LCD_PrintString>
			  }

	  }
	  if (std == 1)
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <main+0x2a8>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d11b      	bne.n	8001c0e <main+0x256>
	  {
		  //Cantidad de luz
		  sensores.light = HAL_ADC_GetValue(&hadc1);
 8001bd6:	481d      	ldr	r0, [pc, #116]	; (8001c4c <main+0x294>)
 8001bd8:	f001 f8d2 	bl	8002d80 <HAL_ADC_GetValue>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <main+0x2f4>)
 8001be2:	705a      	strb	r2, [r3, #1]

		  LCD_Position(0,0);
 8001be4:	2100      	movs	r1, #0
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7fe ffe0 	bl	8000bac <LCD_Position>
		  LCD_PrintString("LUMINICIDAD:    ");
 8001bec:	4830      	ldr	r0, [pc, #192]	; (8001cb0 <main+0x2f8>)
 8001bee:	f7ff f819 	bl	8000c24 <LCD_PrintString>
		  sprintf(msg,"%d           ",sensores.light);
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <main+0x2f4>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	492e      	ldr	r1, [pc, #184]	; (8001cb4 <main+0x2fc>)
 8001bfa:	4826      	ldr	r0, [pc, #152]	; (8001c94 <main+0x2dc>)
 8001bfc:	f004 f986 	bl	8005f0c <siprintf>
		  LCD_Position(1,0);
 8001c00:	2100      	movs	r1, #0
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7fe ffd2 	bl	8000bac <LCD_Position>
		  LCD_PrintString(msg);
 8001c08:	4822      	ldr	r0, [pc, #136]	; (8001c94 <main+0x2dc>)
 8001c0a:	f7ff f80b 	bl	8000c24 <LCD_PrintString>
	  }
	  if (std == 2)
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <main+0x2a8>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	f47f af0c 	bne.w	8001a30 <main+0x78>
	  {
		  //Nivel de humedad
		  LCD_Position(0,0);
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7fe ffc6 	bl	8000bac <LCD_Position>
		  LCD_PrintString("HUMEDAD         ");
 8001c20:	4825      	ldr	r0, [pc, #148]	; (8001cb8 <main+0x300>)
 8001c22:	f7fe ffff 	bl	8000c24 <LCD_PrintString>
		  sprintf(msg,"%d           ",sensores.humedad);
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <main+0x2f4>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4921      	ldr	r1, [pc, #132]	; (8001cb4 <main+0x2fc>)
 8001c2e:	4819      	ldr	r0, [pc, #100]	; (8001c94 <main+0x2dc>)
 8001c30:	f004 f96c 	bl	8005f0c <siprintf>
		  LCD_Position(1,0);
 8001c34:	2100      	movs	r1, #0
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7fe ffb8 	bl	8000bac <LCD_Position>
		  LCD_PrintString(msg);
 8001c3c:	4815      	ldr	r0, [pc, #84]	; (8001c94 <main+0x2dc>)
 8001c3e:	f7fe fff1 	bl	8000c24 <LCD_PrintString>
	  std = TIM1->CNT/4;
 8001c42:	e6f5      	b.n	8001a30 <main+0x78>
 8001c44:	20000260 	.word	0x20000260
 8001c48:	200002a8 	.word	0x200002a8
 8001c4c:	20000230 	.word	0x20000230
 8001c50:	08008fd0 	.word	0x08008fd0
 8001c54:	08008fe0 	.word	0x08008fe0
 8001c58:	08008ff4 	.word	0x08008ff4
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	20000338 	.word	0x20000338
 8001c64:	08009000 	.word	0x08009000
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	200003b0 	.word	0x200003b0
 8001c70:	08009004 	.word	0x08009004
 8001c74:	20000414 	.word	0x20000414
 8001c78:	20000458 	.word	0x20000458
 8001c7c:	08009008 	.word	0x08009008
 8001c80:	2000034c 	.word	0x2000034c
 8001c84:	20000440 	.word	0x20000440
 8001c88:	2000045c 	.word	0x2000045c
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	0800900c 	.word	0x0800900c
 8001c94:	2000033c 	.word	0x2000033c
 8001c98:	08009020 	.word	0x08009020
 8001c9c:	08009034 	.word	0x08009034
 8001ca0:	08009048 	.word	0x08009048
 8001ca4:	0800905c 	.word	0x0800905c
 8001ca8:	08009070 	.word	0x08009070
 8001cac:	2000022c 	.word	0x2000022c
 8001cb0:	08009084 	.word	0x08009084
 8001cb4:	08009098 	.word	0x08009098
 8001cb8:	080090a8 	.word	0x080090a8

08001cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b094      	sub	sp, #80	; 0x50
 8001cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc6:	2228      	movs	r2, #40	; 0x28
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 f981 	bl	8005fd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cec:	2301      	movs	r3, #1
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d08:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	4618      	mov	r0, r3
 8001d14:	f001 fd4a 	bl	80037ac <HAL_RCC_OscConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d1e:	f000 f9b5 	bl	800208c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d22:	230f      	movs	r3, #15
 8001d24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 ffb6 	bl	8003cb0 <HAL_RCC_ClockConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d4a:	f000 f99f 	bl	800208c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d56:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 f936 	bl	8003fcc <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d66:	f000 f991 	bl	800208c <Error_Handler>
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3750      	adds	r7, #80	; 0x50
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <MX_ADC1_Init+0x74>)
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <MX_ADC1_Init+0x78>)
 8001d88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <MX_ADC1_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <MX_ADC1_Init+0x74>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <MX_ADC1_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <MX_ADC1_Init+0x74>)
 8001d9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001da2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <MX_ADC1_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_ADC1_Init+0x74>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <MX_ADC1_Init+0x74>)
 8001db2:	f000 fe5f 	bl	8002a74 <HAL_ADC_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001dbc:	f000 f966 	bl	800208c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_ADC1_Init+0x74>)
 8001dd2:	f000 ffe1 	bl	8002d98 <HAL_ADC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ddc:	f000 f956 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000230 	.word	0x20000230
 8001dec:	40012400 	.word	0x40012400

08001df0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	2224      	movs	r2, #36	; 0x24
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 f8e7 	bl	8005fd2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <MX_TIM1_Init+0xa4>)
 8001e0e:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <MX_TIM1_Init+0xa8>)
 8001e10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <MX_TIM1_Init+0xa4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <MX_TIM1_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MX_TIM1_Init+0xa4>)
 8001e20:	220a      	movs	r2, #10
 8001e22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_TIM1_Init+0xa4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_TIM1_Init+0xa4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_TIM1_Init+0xa4>)
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e36:	2303      	movs	r3, #3
 8001e38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e46:	230a      	movs	r3, #10
 8001e48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001e56:	230a      	movs	r3, #10
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <MX_TIM1_Init+0xa4>)
 8001e62:	f002 fa03 	bl	800426c <HAL_TIM_Encoder_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001e6c:	f000 f90e 	bl	800208c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_TIM1_Init+0xa4>)
 8001e7e:	f002 fd09 	bl	8004894 <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001e88:	f000 f900 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	3730      	adds	r7, #48	; 0x30
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000260 	.word	0x20000260
 8001e98:	40012c00 	.word	0x40012c00

08001e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_TIM2_Init+0x94>)
 8001eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <MX_TIM2_Init+0x94>)
 8001ec2:	2247      	movs	r2, #71	; 0x47
 8001ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <MX_TIM2_Init+0x94>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_TIM2_Init+0x94>)
 8001ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MX_TIM2_Init+0x94>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <MX_TIM2_Init+0x94>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee0:	4813      	ldr	r0, [pc, #76]	; (8001f30 <MX_TIM2_Init+0x94>)
 8001ee2:	f002 f929 	bl	8004138 <HAL_TIM_Base_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001eec:	f000 f8ce 	bl	800208c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <MX_TIM2_Init+0x94>)
 8001efe:	f002 fae5 	bl	80044cc <HAL_TIM_ConfigClockSource>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f08:	f000 f8c0 	bl	800208c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f14:	463b      	mov	r3, r7
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_TIM2_Init+0x94>)
 8001f1a:	f002 fcbb 	bl	8004894 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f24:	f000 f8b2 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200002a8 	.word	0x200002a8

08001f34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <MX_USART1_UART_Init+0x50>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f6c:	f002 fcf0 	bl	8004950 <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f76:	f000 f889 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200002f0 	.word	0x200002f0
 8001f84:	40013800 	.word	0x40013800

08001f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9c:	4b37      	ldr	r3, [pc, #220]	; (800207c <MX_GPIO_Init+0xf4>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a36      	ldr	r2, [pc, #216]	; (800207c <MX_GPIO_Init+0xf4>)
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b34      	ldr	r3, [pc, #208]	; (800207c <MX_GPIO_Init+0xf4>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb4:	4b31      	ldr	r3, [pc, #196]	; (800207c <MX_GPIO_Init+0xf4>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a30      	ldr	r2, [pc, #192]	; (800207c <MX_GPIO_Init+0xf4>)
 8001fba:	f043 0320 	orr.w	r3, r3, #32
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b2e      	ldr	r3, [pc, #184]	; (800207c <MX_GPIO_Init+0xf4>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	; (800207c <MX_GPIO_Init+0xf4>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a2a      	ldr	r2, [pc, #168]	; (800207c <MX_GPIO_Init+0xf4>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b28      	ldr	r3, [pc, #160]	; (800207c <MX_GPIO_Init+0xf4>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <MX_GPIO_Init+0xf4>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a24      	ldr	r2, [pc, #144]	; (800207c <MX_GPIO_Init+0xf4>)
 8001fea:	f043 0308 	orr.w	r3, r3, #8
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b22      	ldr	r3, [pc, #136]	; (800207c <MX_GPIO_Init+0xf4>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002002:	481f      	ldr	r0, [pc, #124]	; (8002080 <MX_GPIO_Init+0xf8>)
 8002004:	f001 fba0 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT11_DATA_Pin|D4_Pin|D5_Pin|D6_Pin
 8002008:	2200      	movs	r2, #0
 800200a:	21fa      	movs	r1, #250	; 0xfa
 800200c:	481d      	ldr	r0, [pc, #116]	; (8002084 <MX_GPIO_Init+0xfc>)
 800200e:	f001 fb9b 	bl	8003748 <HAL_GPIO_WritePin>
                          |D7_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	2101      	movs	r1, #1
 8002016:	481c      	ldr	r0, [pc, #112]	; (8002088 <MX_GPIO_Init+0x100>)
 8002018:	f001 fb96 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800201c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002022:	2301      	movs	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2302      	movs	r3, #2
 800202c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	4619      	mov	r1, r3
 8002034:	4812      	ldr	r0, [pc, #72]	; (8002080 <MX_GPIO_Init+0xf8>)
 8002036:	f001 fa03 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_DATA_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin RS_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin|D4_Pin|D5_Pin|D6_Pin
 800203a:	23fa      	movs	r3, #250	; 0xfa
 800203c:	613b      	str	r3, [r7, #16]
                          |D7_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203e:	2301      	movs	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2302      	movs	r3, #2
 8002048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0310 	add.w	r3, r7, #16
 800204e:	4619      	mov	r1, r3
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <MX_GPIO_Init+0xfc>)
 8002052:	f001 f9f5 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8002056:	2301      	movs	r3, #1
 8002058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	2301      	movs	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2302      	movs	r3, #2
 8002064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	4619      	mov	r1, r3
 800206c:	4806      	ldr	r0, [pc, #24]	; (8002088 <MX_GPIO_Init+0x100>)
 800206e:	f001 f9e7 	bl	8003440 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002072:	bf00      	nop
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	40011000 	.word	0x40011000
 8002084:	40010800 	.word	0x40010800
 8002088:	40010c00 	.word	0x40010c00

0800208c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002090:	b672      	cpsid	i
}
 8002092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002094:	e7fe      	b.n	8002094 <Error_Handler+0x8>
	...

08002098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_MspInit+0x5c>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_MspInit+0x5c>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6193      	str	r3, [r2, #24]
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_MspInit+0x5c>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_MspInit+0x5c>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_MspInit+0x5c>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_MspInit+0x5c>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_MspInit+0x60>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_MspInit+0x60>)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010000 	.word	0x40010000

080020fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_ADC_MspInit+0x6c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d121      	bne.n	8002160 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_ADC_MspInit+0x70>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_ADC_MspInit+0x70>)
 8002122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_ADC_MspInit+0x70>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_ADC_MspInit+0x70>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_ADC_MspInit+0x70>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_ADC_MspInit+0x70>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800214c:	2301      	movs	r3, #1
 800214e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002150:	2303      	movs	r3, #3
 8002152:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4619      	mov	r1, r3
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <HAL_ADC_MspInit+0x74>)
 800215c:	f001 f970 	bl	8003440 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40012400 	.word	0x40012400
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800

08002174 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x74>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d124      	bne.n	80021de <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_TIM_Encoder_MspInit+0x78>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_TIM_Encoder_MspInit+0x78>)
 800219a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800219e:	6193      	str	r3, [r2, #24]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_TIM_Encoder_MspInit+0x78>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_TIM_Encoder_MspInit+0x78>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_TIM_Encoder_MspInit+0x78>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_TIM_Encoder_MspInit+0x78>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x7c>)
 80021da:	f001 f931 	bl	8003440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021de:	bf00      	nop
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010800 	.word	0x40010800

080021f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d10b      	bne.n	800221e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_TIM_Base_MspInit+0x34>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_TIM_Base_MspInit+0x34>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_TIM_Base_MspInit+0x34>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <HAL_UART_MspInit+0xb4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d145      	bne.n	80022d8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_UART_MspInit+0xb8>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <HAL_UART_MspInit+0xb8>)
 8002252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <HAL_UART_MspInit+0xb8>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <HAL_UART_MspInit+0xb8>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_UART_MspInit+0xb8>)
 800226a:	f043 0308 	orr.w	r3, r3, #8
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <HAL_UART_MspInit+0xb8>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800227c:	2340      	movs	r3, #64	; 0x40
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	4816      	ldr	r0, [pc, #88]	; (80022e8 <HAL_UART_MspInit+0xbc>)
 8002290:	f001 f8d6 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	4810      	ldr	r0, [pc, #64]	; (80022e8 <HAL_UART_MspInit+0xbc>)
 80022a8:	f001 f8ca 	bl	8003440 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_UART_MspInit+0xc0>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_UART_MspInit+0xc0>)
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	2025      	movs	r0, #37	; 0x25
 80022ce:	f000 ffce 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022d2:	2025      	movs	r0, #37	; 0x25
 80022d4:	f000 ffe7 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40013800 	.word	0x40013800
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40010c00 	.word	0x40010c00
 80022ec:	40010000 	.word	0x40010000

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022f4:	e7fe      	b.n	80022f4 <NMI_Handler+0x4>

080022f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <MemManage_Handler+0x4>

08002302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <UsageFault_Handler+0x4>

0800230e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
	...

08002334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  if(timeout >0)  timeout--;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <SysTick_Handler+0x20>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <SysTick_Handler+0x18>
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <SysTick_Handler+0x20>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b02      	ldr	r3, [pc, #8]	; (8002354 <SysTick_Handler+0x20>)
 800234a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234c:	f000 fb52 	bl	80029f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000464 	.word	0x20000464

08002358 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr(&huart1);
 800235c:	4803      	ldr	r0, [pc, #12]	; (800236c <USART1_IRQHandler+0x14>)
 800235e:	f000 fa7f 	bl	8002860 <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002362:	4802      	ldr	r0, [pc, #8]	; (800236c <USART1_IRQHandler+0x14>)
 8002364:	f002 fb44 	bl	80049f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200002f0 	.word	0x200002f0

08002370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return 1;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <_kill>:

int _kill(int pid, int sig)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002388:	f003 fe76 	bl	8006078 <__errno>
 800238c:	4603      	mov	r3, r0
 800238e:	2216      	movs	r2, #22
 8002390:	601a      	str	r2, [r3, #0]
  return -1;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_exit>:

void _exit (int status)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a6:	f04f 31ff 	mov.w	r1, #4294967295
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffe7 	bl	800237e <_kill>
  while (1) {}    /* Make sure we hang here */
 80023b0:	e7fe      	b.n	80023b0 <_exit+0x12>

080023b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e00a      	b.n	80023da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c4:	f3af 8000 	nop.w
 80023c8:	4601      	mov	r1, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	60ba      	str	r2, [r7, #8]
 80023d0:	b2ca      	uxtb	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	dbf0      	blt.n	80023c4 <_read+0x12>
  }

  return len;
 80023e2:	687b      	ldr	r3, [r7, #4]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e009      	b.n	8002412 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	60ba      	str	r2, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	dbf1      	blt.n	80023fe <_write+0x12>
  }
  return len;
 800241a:	687b      	ldr	r3, [r7, #4]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_close>:

int _close(int file)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244a:	605a      	str	r2, [r3, #4]
  return 0;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <_isatty>:

int _isatty(int file)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002460:	2301      	movs	r3, #1
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <_sbrk+0x5c>)
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <_sbrk+0x60>)
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <_sbrk+0x64>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <_sbrk+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b4:	f003 fde0 	bl	8006078 <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	220c      	movs	r2, #12
 80024bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e009      	b.n	80024d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <_sbrk+0x64>)
 80024d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20005000 	.word	0x20005000
 80024e4:	00000400 	.word	0x00000400
 80024e8:	20000460 	.word	0x20000460
 80024ec:	200009d0 	.word	0x200009d0

080024f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <Ringbuf_init+0x38>)
 8002502:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <Ringbuf_init+0x3c>)
 8002504:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <Ringbuf_init+0x40>)
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <Ringbuf_init+0x44>)
 800250a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <Ringbuf_init+0x48>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <Ringbuf_init+0x48>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <Ringbuf_init+0x48>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <Ringbuf_init+0x48>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0220 	orr.w	r2, r2, #32
 800252a:	60da      	str	r2, [r3, #12]
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	20000878 	.word	0x20000878
 8002538:	20000468 	.word	0x20000468
 800253c:	2000087c 	.word	0x2000087c
 8002540:	20000670 	.word	0x20000670
 8002544:	200002f0 	.word	0x200002f0

08002548 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002560:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	429a      	cmp	r2, r3
 800256c:	d009      	beq.n	8002582 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	79f9      	ldrb	r1, [r7, #7]
 8002578:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <Uart_read+0x54>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <Uart_read+0x54>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d102      	bne.n	80025ac <Uart_read+0x20>
  {
    return -1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e013      	b.n	80025d4 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <Uart_read+0x54>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <Uart_read+0x54>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025b8:	5cd3      	ldrb	r3, [r2, r3]
 80025ba:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <Uart_read+0x54>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <Uart_read+0x54>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 80025d2:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000878 	.word	0x20000878

080025e4 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <IsDataAvailable+0x30>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <IsDataAvailable+0x30>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002604:	b29b      	uxth	r3, r3
 8002606:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000878 	.word	0x20000878

08002618 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <Uart_peek+0x34>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <Uart_peek+0x34>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800262c:	429a      	cmp	r2, r3
 800262e:	d102      	bne.n	8002636 <Uart_peek+0x1e>
  {
    return -1;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	e006      	b.n	8002644 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <Uart_peek+0x34>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <Uart_peek+0x34>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002642:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	20000878 	.word	0x20000878

08002650 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fd fd76 	bl	8000150 <strlen>
 8002664:	4603      	mov	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 800266c:	e01e      	b.n	80026ac <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <Copy_upto+0xf8>)
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	4b35      	ldr	r3, [pc, #212]	; (8002748 <Copy_upto+0xf8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	4403      	add	r3, r0
 8002680:	5c8a      	ldrb	r2, [r1, r2]
 8002682:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <Copy_upto+0xf8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <Copy_upto+0xf8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002696:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	3301      	adds	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80026a0:	bf00      	nop
 80026a2:	f7ff ff9f 	bl	80025e4 <IsDataAvailable>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0fa      	beq.n	80026a2 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80026ac:	f7ff ffb4 	bl	8002618 <Uart_peek>
 80026b0:	4601      	mov	r1, r0
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	4299      	cmp	r1, r3
 80026bc:	d1d7      	bne.n	800266e <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80026be:	e027      	b.n	8002710 <Copy_upto+0xc0>
	{
		so_far++;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80026c6:	f7ff ff61 	bl	800258c <Uart_read>
 80026ca:	4601      	mov	r1, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	613a      	str	r2, [r7, #16]
 80026d2:	461a      	mov	r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	b2ca      	uxtb	r2, r1
 80026da:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d101      	bne.n	80026e8 <Copy_upto+0x98>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e02a      	b.n	800273e <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <Copy_upto+0xfc>)
 80026ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026ee:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80026f0:	bf00      	nop
 80026f2:	f7ff ff77 	bl	80025e4 <IsDataAvailable>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <Copy_upto+0xb4>
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <Copy_upto+0xfc>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f6      	bne.n	80026f2 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <Copy_upto+0xfc>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <Copy_upto+0xc0>
 800270c:	2300      	movs	r3, #0
 800270e:	e016      	b.n	800273e <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002710:	f7ff ff82 	bl	8002618 <Uart_peek>
 8002714:	4601      	mov	r1, r0
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4299      	cmp	r1, r3
 8002720:	d0ce      	beq.n	80026c0 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	429a      	cmp	r2, r3
 8002728:	d002      	beq.n	8002730 <Copy_upto+0xe0>
	{
		so_far = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
		goto again;
 800272e:	e79d      	b.n	800266c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	d101      	bne.n	800273c <Copy_upto+0xec>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <Copy_upto+0xee>
	else return 0;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000878 	.word	0x20000878
 800274c:	20000464 	.word	0x20000464

08002750 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7fd fcf7 	bl	8000150 <strlen>
 8002762:	4603      	mov	r3, r0
 8002764:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002766:	4b3c      	ldr	r3, [pc, #240]	; (8002858 <Wait_for+0x108>)
 8002768:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800276c:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 800276e:	bf00      	nop
 8002770:	f7ff ff38 	bl	80025e4 <IsDataAvailable>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <Wait_for+0x32>
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <Wait_for+0x108>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f6      	bne.n	8002770 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <Wait_for+0x108>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d119      	bne.n	80027be <Wait_for+0x6e>
 800278a:	2300      	movs	r3, #0
 800278c:	e060      	b.n	8002850 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 800278e:	4b33      	ldr	r3, [pc, #204]	; (800285c <Wait_for+0x10c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002796:	4b31      	ldr	r3, [pc, #196]	; (800285c <Wait_for+0x10c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800279e:	429a      	cmp	r2, r3
 80027a0:	d00b      	beq.n	80027ba <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80027a2:	4b2e      	ldr	r3, [pc, #184]	; (800285c <Wait_for+0x10c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <Wait_for+0x10c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027b8:	e001      	b.n	80027be <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e048      	b.n	8002850 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80027be:	f7ff ff2b 	bl	8002618 <Uart_peek>
 80027c2:	4601      	mov	r1, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4299      	cmp	r1, r3
 80027ce:	d1de      	bne.n	800278e <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80027d0:	e027      	b.n	8002822 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <Wait_for+0x10c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	4b1e      	ldr	r3, [pc, #120]	; (800285c <Wait_for+0x10c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d101      	bne.n	80027fa <Wait_for+0xaa>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e02a      	b.n	8002850 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <Wait_for+0x108>)
 80027fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002800:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002802:	bf00      	nop
 8002804:	f7ff feee 	bl	80025e4 <IsDataAvailable>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <Wait_for+0xc6>
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <Wait_for+0x108>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f6      	bne.n	8002804 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <Wait_for+0x108>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <Wait_for+0xd2>
 800281e:	2300      	movs	r3, #0
 8002820:	e016      	b.n	8002850 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002822:	f7ff fef9 	bl	8002618 <Uart_peek>
 8002826:	4601      	mov	r1, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4299      	cmp	r1, r3
 8002832:	d0ce      	beq.n	80027d2 <Wait_for+0x82>
	}

	if (so_far != len)
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	d002      	beq.n	8002842 <Wait_for+0xf2>
	{
		so_far = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
		goto again;
 8002840:	e791      	b.n	8002766 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	429a      	cmp	r2, r3
 8002848:	d101      	bne.n	800284e <Wait_for+0xfe>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <Wait_for+0x100>
	else return 0;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000464 	.word	0x20000464
 800285c:	20000878 	.word	0x20000878

08002860 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d013      	beq.n	80028aa <Uart_isr+0x4a>
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00e      	beq.n	80028aa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <Uart_isr+0xb4>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fe50 	bl	8002548 <store_char>
        return;
 80028a8:	e031      	b.n	800290e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d02c      	beq.n	800290e <Uart_isr+0xae>
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d027      	beq.n	800290e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <Uart_isr+0xb8>)
 80028c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <Uart_isr+0xb8>)
 80028c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d108      	bne.n	80028e0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028dc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80028de:	e015      	b.n	800290c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80028e0:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <Uart_isr+0xb8>)
 80028e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028e6:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <Uart_isr+0xb8>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <Uart_isr+0xb8>)
 80028ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <Uart_isr+0xb8>)
 80028fa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	7bba      	ldrb	r2, [r7, #14]
 800290a:	605a      	str	r2, [r3, #4]
    	return;
 800290c:	bf00      	nop
    }
}
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000878 	.word	0x20000878
 8002918:	20000670 	.word	0x20000670

0800291c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
  bl  SystemInit
 800291c:	f7ff fde8 	bl	80024f0 <SystemInit>


/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002920:	480b      	ldr	r0, [pc, #44]	; (8002950 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002922:	490c      	ldr	r1, [pc, #48]	; (8002954 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002924:	4a0c      	ldr	r2, [pc, #48]	; (8002958 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002938:	4c09      	ldr	r4, [pc, #36]	; (8002960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002946:	f003 fb9d 	bl	8006084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800294a:	f7ff f835 	bl	80019b8 <main>
  bx lr
 800294e:	4770      	bx	lr
  ldr r0, =_sdata
 8002950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002954:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002958:	08009498 	.word	0x08009498
  ldr r2, =_sbss
 800295c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002960:	200009d0 	.word	0x200009d0

08002964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002964:	e7fe      	b.n	8002964 <ADC1_2_IRQHandler>
	...

08002968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_Init+0x28>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a07      	ldr	r2, [pc, #28]	; (8002990 <HAL_Init+0x28>)
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002978:	2003      	movs	r0, #3
 800297a:	f000 fc6d 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297e:	200f      	movs	r0, #15
 8002980:	f000 f808 	bl	8002994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002984:	f7ff fb88 	bl	8002098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40022000 	.word	0x40022000

08002994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x54>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x58>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fc85 	bl	80032c2 <HAL_SYSTICK_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e00e      	b.n	80029e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b0f      	cmp	r3, #15
 80029c6:	d80a      	bhi.n	80029de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c8:	2200      	movs	r2, #0
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f000 fc4d 	bl	800326e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d4:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <HAL_InitTick+0x5c>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000008 	.word	0x20000008
 80029ec:	20000010 	.word	0x20000010
 80029f0:	2000000c 	.word	0x2000000c

080029f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_IncTick+0x1c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_IncTick+0x20>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <HAL_IncTick+0x20>)
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000010 	.word	0x20000010
 8002a14:	20000880 	.word	0x20000880

08002a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b02      	ldr	r3, [pc, #8]	; (8002a28 <HAL_GetTick+0x10>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	20000880 	.word	0x20000880

08002a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d005      	beq.n	8002a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_Delay+0x44>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a52:	bf00      	nop
 8002a54:	f7ff ffe0 	bl	8002a18 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d8f7      	bhi.n	8002a54 <HAL_Delay+0x28>
  {
  }
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000010 	.word	0x20000010

08002a74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0be      	b.n	8002c14 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fb22 	bl	80020fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fabf 	bl	800303c <ADC_ConversionStop_Disable>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 8099 	bne.w	8002c02 <HAL_ADC_Init+0x18e>
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 8095 	bne.w	8002c02 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ae0:	f023 0302 	bic.w	r3, r3, #2
 8002ae4:	f043 0202 	orr.w	r2, r3, #2
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002af4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7b1b      	ldrb	r3, [r3, #12]
 8002afa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002afc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0c:	d003      	beq.n	8002b16 <HAL_ADC_Init+0xa2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d102      	bne.n	8002b1c <HAL_ADC_Init+0xa8>
 8002b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b1a:	e000      	b.n	8002b1e <HAL_ADC_Init+0xaa>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7d1b      	ldrb	r3, [r3, #20]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d119      	bne.n	8002b60 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7b1b      	ldrb	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	035a      	lsls	r2, r3, #13
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e00b      	b.n	8002b60 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <HAL_ADC_Init+0x1a8>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b90:	d003      	beq.n	8002b9a <HAL_ADC_Init+0x126>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d104      	bne.n	8002ba4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	051b      	lsls	r3, r3, #20
 8002ba2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <HAL_ADC_Init+0x1ac>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d10b      	bne.n	8002be0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bde:	e018      	b.n	8002c12 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	f023 0312 	bic.w	r3, r3, #18
 8002be8:	f043 0210 	orr.w	r2, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c00:	e007      	b.n	8002c12 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	ffe1f7fd 	.word	0xffe1f7fd
 8002c20:	ff1f0efe 	.word	0xff1f0efe

08002c24 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_Start+0x1a>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e098      	b.n	8002d70 <HAL_ADC_Start+0x14c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f99e 	bl	8002f88 <ADC_Enable>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 8087 	bne.w	8002d66 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a41      	ldr	r2, [pc, #260]	; (8002d78 <HAL_ADC_Start+0x154>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d105      	bne.n	8002c82 <HAL_ADC_Start+0x5e>
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <HAL_ADC_Start+0x158>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d115      	bne.n	8002cae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d026      	beq.n	8002cea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cac:	e01d      	b.n	8002cea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2f      	ldr	r2, [pc, #188]	; (8002d7c <HAL_ADC_Start+0x158>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_ADC_Start+0xaa>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <HAL_ADC_Start+0x154>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10d      	bne.n	8002cea <HAL_ADC_Start+0xc6>
 8002cce:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_ADC_Start+0x158>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ce2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f023 0206 	bic.w	r2, r3, #6
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d02:	e002      	b.n	8002d0a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f06f 0202 	mvn.w	r2, #2
 8002d1a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d2a:	d113      	bne.n	8002d54 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d30:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_ADC_Start+0x154>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d105      	bne.n	8002d42 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_ADC_Start+0x158>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	e00c      	b.n	8002d6e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	e003      	b.n	8002d6e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40012800 	.word	0x40012800
 8002d7c:	40012400 	.word	0x40012400

08002d80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x20>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0dc      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x1da>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d81c      	bhi.n	8002e02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b05      	subs	r3, #5
 8002dda:	221f      	movs	r2, #31
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	4019      	ands	r1, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	3b05      	subs	r3, #5
 8002df4:	fa00 f203 	lsl.w	r2, r0, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8002e00:	e03c      	b.n	8002e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d81c      	bhi.n	8002e44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	3b23      	subs	r3, #35	; 0x23
 8002e1c:	221f      	movs	r2, #31
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	4019      	ands	r1, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	3b23      	subs	r3, #35	; 0x23
 8002e36:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
 8002e42:	e01b      	b.n	8002e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	3b41      	subs	r3, #65	; 0x41
 8002e56:	221f      	movs	r2, #31
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	4019      	ands	r1, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3b41      	subs	r3, #65	; 0x41
 8002e70:	fa00 f203 	lsl.w	r2, r0, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b09      	cmp	r3, #9
 8002e82:	d91c      	bls.n	8002ebe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	3b1e      	subs	r3, #30
 8002e96:	2207      	movs	r2, #7
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	4019      	ands	r1, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6898      	ldr	r0, [r3, #8]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	3b1e      	subs	r3, #30
 8002eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	e019      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6919      	ldr	r1, [r3, #16]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	2207      	movs	r2, #7
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4019      	ands	r1, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6898      	ldr	r0, [r3, #8]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d003      	beq.n	8002f02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002efe:	2b11      	cmp	r3, #17
 8002f00:	d132      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_ADC_ConfigChannel+0x1e4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d125      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d126      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d11a      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	0c9a      	lsrs	r2, r3, #18
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f48:	e002      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f9      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x1b2>
 8002f56:	e007      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40012400 	.word	0x40012400
 8002f80:	20000008 	.word	0x20000008
 8002f84:	431bde83 	.word	0x431bde83

08002f88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d040      	beq.n	8003028 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <ADC_Enable+0xac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <ADC_Enable+0xb0>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0c9b      	lsrs	r3, r3, #18
 8002fc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fc4:	e002      	b.n	8002fcc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f9      	bne.n	8002fc6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fd2:	f7ff fd21 	bl	8002a18 <HAL_GetTick>
 8002fd6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fd8:	e01f      	b.n	800301a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fda:	f7ff fd1d 	bl	8002a18 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d918      	bls.n	800301a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d011      	beq.n	800301a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	f043 0210 	orr.w	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d1d8      	bne.n	8002fda <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000008 	.word	0x20000008
 8003038:	431bde83 	.word	0x431bde83

0800303c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d12e      	bne.n	80030b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003066:	f7ff fcd7 	bl	8002a18 <HAL_GetTick>
 800306a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800306c:	e01b      	b.n	80030a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800306e:	f7ff fcd3 	bl	8002a18 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d914      	bls.n	80030a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10d      	bne.n	80030a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	f043 0210 	orr.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e007      	b.n	80030b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d0dc      	beq.n	800306e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f2:	4a04      	ldr	r2, [pc, #16]	; (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60d3      	str	r3, [r2, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <__NVIC_GetPriorityGrouping+0x18>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0307 	and.w	r3, r3, #7
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	db0b      	blt.n	800314e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	4906      	ldr	r1, [pc, #24]	; (8003158 <__NVIC_EnableIRQ+0x34>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2001      	movs	r0, #1
 8003146:	fa00 f202 	lsl.w	r2, r0, r2
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	; (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f7ff ff90 	bl	800315c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff2d 	bl	80030c0 <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff42 	bl	8003108 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff90 	bl	80031b0 <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5f 	bl	800315c <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff35 	bl	8003124 <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffa2 	bl	8003214 <SysTick_Config>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d008      	beq.n	8003304 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2204      	movs	r2, #4
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e020      	b.n	8003346 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 020e 	bic.w	r2, r2, #14
 8003312:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d005      	beq.n	8003374 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2204      	movs	r2, #4
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	e051      	b.n	8003418 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 020e 	bic.w	r2, r2, #14
 8003382:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <HAL_DMA_Abort_IT+0xd4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d029      	beq.n	80033f2 <HAL_DMA_Abort_IT+0xa2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <HAL_DMA_Abort_IT+0xd8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_Abort_IT+0x9e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <HAL_DMA_Abort_IT+0xdc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01a      	beq.n	80033e8 <HAL_DMA_Abort_IT+0x98>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <HAL_DMA_Abort_IT+0xe0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d012      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x92>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <HAL_DMA_Abort_IT+0xe4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00a      	beq.n	80033dc <HAL_DMA_Abort_IT+0x8c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <HAL_DMA_Abort_IT+0xe8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <HAL_DMA_Abort_IT+0x86>
 80033d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033d4:	e00e      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033da:	e00b      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e0:	e008      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033e6:	e005      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ec:	e002      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033ee:	2310      	movs	r3, #16
 80033f0:	e000      	b.n	80033f4 <HAL_DMA_Abort_IT+0xa4>
 80033f2:	2301      	movs	r3, #1
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <HAL_DMA_Abort_IT+0xec>)
 80033f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
    } 
  }
  return status;
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40020008 	.word	0x40020008
 8003428:	4002001c 	.word	0x4002001c
 800342c:	40020030 	.word	0x40020030
 8003430:	40020044 	.word	0x40020044
 8003434:	40020058 	.word	0x40020058
 8003438:	4002006c 	.word	0x4002006c
 800343c:	40020000 	.word	0x40020000

08003440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003440:	b480      	push	{r7}
 8003442:	b08b      	sub	sp, #44	; 0x2c
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003452:	e169      	b.n	8003728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003454:	2201      	movs	r2, #1
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	429a      	cmp	r2, r3
 800346e:	f040 8158 	bne.w	8003722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a9a      	ldr	r2, [pc, #616]	; (80036e0 <HAL_GPIO_Init+0x2a0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d05e      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 800347c:	4a98      	ldr	r2, [pc, #608]	; (80036e0 <HAL_GPIO_Init+0x2a0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d875      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 8003482:	4a98      	ldr	r2, [pc, #608]	; (80036e4 <HAL_GPIO_Init+0x2a4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d058      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 8003488:	4a96      	ldr	r2, [pc, #600]	; (80036e4 <HAL_GPIO_Init+0x2a4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d86f      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 800348e:	4a96      	ldr	r2, [pc, #600]	; (80036e8 <HAL_GPIO_Init+0x2a8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d052      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 8003494:	4a94      	ldr	r2, [pc, #592]	; (80036e8 <HAL_GPIO_Init+0x2a8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d869      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 800349a:	4a94      	ldr	r2, [pc, #592]	; (80036ec <HAL_GPIO_Init+0x2ac>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d04c      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 80034a0:	4a92      	ldr	r2, [pc, #584]	; (80036ec <HAL_GPIO_Init+0x2ac>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d863      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 80034a6:	4a92      	ldr	r2, [pc, #584]	; (80036f0 <HAL_GPIO_Init+0x2b0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d046      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 80034ac:	4a90      	ldr	r2, [pc, #576]	; (80036f0 <HAL_GPIO_Init+0x2b0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d85d      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 80034b2:	2b12      	cmp	r3, #18
 80034b4:	d82a      	bhi.n	800350c <HAL_GPIO_Init+0xcc>
 80034b6:	2b12      	cmp	r3, #18
 80034b8:	d859      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <HAL_GPIO_Init+0x80>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	0800353b 	.word	0x0800353b
 80034c4:	08003515 	.word	0x08003515
 80034c8:	08003527 	.word	0x08003527
 80034cc:	08003569 	.word	0x08003569
 80034d0:	0800356f 	.word	0x0800356f
 80034d4:	0800356f 	.word	0x0800356f
 80034d8:	0800356f 	.word	0x0800356f
 80034dc:	0800356f 	.word	0x0800356f
 80034e0:	0800356f 	.word	0x0800356f
 80034e4:	0800356f 	.word	0x0800356f
 80034e8:	0800356f 	.word	0x0800356f
 80034ec:	0800356f 	.word	0x0800356f
 80034f0:	0800356f 	.word	0x0800356f
 80034f4:	0800356f 	.word	0x0800356f
 80034f8:	0800356f 	.word	0x0800356f
 80034fc:	0800356f 	.word	0x0800356f
 8003500:	0800356f 	.word	0x0800356f
 8003504:	0800351d 	.word	0x0800351d
 8003508:	08003531 	.word	0x08003531
 800350c:	4a79      	ldr	r2, [pc, #484]	; (80036f4 <HAL_GPIO_Init+0x2b4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003512:	e02c      	b.n	800356e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	623b      	str	r3, [r7, #32]
          break;
 800351a:	e029      	b.n	8003570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	3304      	adds	r3, #4
 8003522:	623b      	str	r3, [r7, #32]
          break;
 8003524:	e024      	b.n	8003570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	3308      	adds	r3, #8
 800352c:	623b      	str	r3, [r7, #32]
          break;
 800352e:	e01f      	b.n	8003570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	330c      	adds	r3, #12
 8003536:	623b      	str	r3, [r7, #32]
          break;
 8003538:	e01a      	b.n	8003570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003542:	2304      	movs	r3, #4
 8003544:	623b      	str	r3, [r7, #32]
          break;
 8003546:	e013      	b.n	8003570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003550:	2308      	movs	r3, #8
 8003552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	611a      	str	r2, [r3, #16]
          break;
 800355a:	e009      	b.n	8003570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800355c:	2308      	movs	r3, #8
 800355e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	615a      	str	r2, [r3, #20]
          break;
 8003566:	e003      	b.n	8003570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
          break;
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x130>
          break;
 800356e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d801      	bhi.n	800357a <HAL_GPIO_Init+0x13a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	e001      	b.n	800357e <HAL_GPIO_Init+0x13e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2bff      	cmp	r3, #255	; 0xff
 8003584:	d802      	bhi.n	800358c <HAL_GPIO_Init+0x14c>
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	e002      	b.n	8003592 <HAL_GPIO_Init+0x152>
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	3b08      	subs	r3, #8
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	210f      	movs	r1, #15
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	6a39      	ldr	r1, [r7, #32]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	431a      	orrs	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80b1 	beq.w	8003722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035c0:	4b4d      	ldr	r3, [pc, #308]	; (80036f8 <HAL_GPIO_Init+0x2b8>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	4a4c      	ldr	r2, [pc, #304]	; (80036f8 <HAL_GPIO_Init+0x2b8>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6193      	str	r3, [r2, #24]
 80035cc:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <HAL_GPIO_Init+0x2b8>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035d8:	4a48      	ldr	r2, [pc, #288]	; (80036fc <HAL_GPIO_Init+0x2bc>)
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	220f      	movs	r2, #15
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4013      	ands	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a40      	ldr	r2, [pc, #256]	; (8003700 <HAL_GPIO_Init+0x2c0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <HAL_GPIO_Init+0x1ec>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3f      	ldr	r2, [pc, #252]	; (8003704 <HAL_GPIO_Init+0x2c4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00d      	beq.n	8003628 <HAL_GPIO_Init+0x1e8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3e      	ldr	r2, [pc, #248]	; (8003708 <HAL_GPIO_Init+0x2c8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <HAL_GPIO_Init+0x1e4>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3d      	ldr	r2, [pc, #244]	; (800370c <HAL_GPIO_Init+0x2cc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_GPIO_Init+0x1e0>
 800361c:	2303      	movs	r3, #3
 800361e:	e006      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003620:	2304      	movs	r3, #4
 8003622:	e004      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003624:	2302      	movs	r3, #2
 8003626:	e002      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 800362c:	2300      	movs	r3, #0
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	f002 0203 	and.w	r2, r2, #3
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	4093      	lsls	r3, r2
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800363e:	492f      	ldr	r1, [pc, #188]	; (80036fc <HAL_GPIO_Init+0x2bc>)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3302      	adds	r3, #2
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003658:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	492c      	ldr	r1, [pc, #176]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]
 8003664:	e006      	b.n	8003674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003666:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	43db      	mvns	r3, r3
 800366e:	4928      	ldr	r1, [pc, #160]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003670:	4013      	ands	r3, r2
 8003672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	4922      	ldr	r1, [pc, #136]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
 800368c:	e006      	b.n	800369c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	43db      	mvns	r3, r3
 8003696:	491e      	ldr	r1, [pc, #120]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003698:	4013      	ands	r3, r2
 800369a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	4918      	ldr	r1, [pc, #96]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	43db      	mvns	r3, r3
 80036be:	4914      	ldr	r1, [pc, #80]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d021      	beq.n	8003714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	490e      	ldr	r1, [pc, #56]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e021      	b.n	8003722 <HAL_GPIO_Init+0x2e2>
 80036de:	bf00      	nop
 80036e0:	10320000 	.word	0x10320000
 80036e4:	10310000 	.word	0x10310000
 80036e8:	10220000 	.word	0x10220000
 80036ec:	10210000 	.word	0x10210000
 80036f0:	10120000 	.word	0x10120000
 80036f4:	10110000 	.word	0x10110000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010000 	.word	0x40010000
 8003700:	40010800 	.word	0x40010800
 8003704:	40010c00 	.word	0x40010c00
 8003708:	40011000 	.word	0x40011000
 800370c:	40011400 	.word	0x40011400
 8003710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_GPIO_Init+0x304>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	43db      	mvns	r3, r3
 800371c:	4909      	ldr	r1, [pc, #36]	; (8003744 <HAL_GPIO_Init+0x304>)
 800371e:	4013      	ands	r3, r2
 8003720:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	3301      	adds	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	f47f ae8e 	bne.w	8003454 <HAL_GPIO_Init+0x14>
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	372c      	adds	r7, #44	; 0x2c
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	40010400 	.word	0x40010400

08003748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
 8003754:	4613      	mov	r3, r2
 8003756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003764:	e003      	b.n	800376e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	041a      	lsls	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	041a      	lsls	r2, r3, #16
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	43d9      	mvns	r1, r3
 8003796:	887b      	ldrh	r3, [r7, #2]
 8003798:	400b      	ands	r3, r1
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	611a      	str	r2, [r3, #16]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e272      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8087 	beq.w	80038da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037cc:	4b92      	ldr	r3, [pc, #584]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d00c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037d8:	4b8f      	ldr	r3, [pc, #572]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d112      	bne.n	800380a <HAL_RCC_OscConfig+0x5e>
 80037e4:	4b8c      	ldr	r3, [pc, #560]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f0:	d10b      	bne.n	800380a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f2:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d06c      	beq.n	80038d8 <HAL_RCC_OscConfig+0x12c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d168      	bne.n	80038d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e24c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x76>
 8003814:	4b80      	ldr	r3, [pc, #512]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a7f      	ldr	r2, [pc, #508]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800381a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e02e      	b.n	8003880 <HAL_RCC_OscConfig+0xd4>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x98>
 800382a:	4b7b      	ldr	r3, [pc, #492]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7a      	ldr	r2, [pc, #488]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b78      	ldr	r3, [pc, #480]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a77      	ldr	r2, [pc, #476]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800383c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e01d      	b.n	8003880 <HAL_RCC_OscConfig+0xd4>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0xbc>
 800384e:	4b72      	ldr	r3, [pc, #456]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a71      	ldr	r2, [pc, #452]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b6f      	ldr	r3, [pc, #444]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6e      	ldr	r2, [pc, #440]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0xd4>
 8003868:	4b6b      	ldr	r3, [pc, #428]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6a      	ldr	r2, [pc, #424]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800386e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b68      	ldr	r3, [pc, #416]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a67      	ldr	r2, [pc, #412]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800387a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d013      	beq.n	80038b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7ff f8c6 	bl	8002a18 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003890:	f7ff f8c2 	bl	8002a18 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e200      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4b5d      	ldr	r3, [pc, #372]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0xe4>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7ff f8b2 	bl	8002a18 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b8:	f7ff f8ae 	bl	8002a18 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e1ec      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ca:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x10c>
 80038d6:	e000      	b.n	80038da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d063      	beq.n	80039ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038e6:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038f2:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d11c      	bne.n	8003938 <HAL_RCC_OscConfig+0x18c>
 80038fe:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d116      	bne.n	8003938 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390a:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_RCC_OscConfig+0x176>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d001      	beq.n	8003922 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e1c0      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4939      	ldr	r1, [pc, #228]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003936:	e03a      	b.n	80039ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d020      	beq.n	8003982 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003940:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7ff f867 	bl	8002a18 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394e:	f7ff f863 	bl	8002a18 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e1a1      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003960:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396c:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4927      	ldr	r1, [pc, #156]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]
 8003980:	e015      	b.n	80039ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003982:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <HAL_RCC_OscConfig+0x270>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7ff f846 	bl	8002a18 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003990:	f7ff f842 	bl	8002a18 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e180      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d03a      	beq.n	8003a30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d019      	beq.n	80039f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c8:	f7ff f826 	bl	8002a18 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d0:	f7ff f822 	bl	8002a18 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e160      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039ee:	2001      	movs	r0, #1
 80039f0:	f000 face 	bl	8003f90 <RCC_Delay>
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_OscConfig+0x274>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7ff f80c 	bl	8002a18 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a02:	e00f      	b.n	8003a24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a04:	f7ff f808 	bl	8002a18 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d908      	bls.n	8003a24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e146      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	42420000 	.word	0x42420000
 8003a20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	4b92      	ldr	r3, [pc, #584]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e9      	bne.n	8003a04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80a6 	beq.w	8003b8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a42:	4b8b      	ldr	r3, [pc, #556]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10d      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	4a87      	ldr	r2, [pc, #540]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	61d3      	str	r3, [r2, #28]
 8003a5a:	4b85      	ldr	r3, [pc, #532]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b82      	ldr	r3, [pc, #520]	; (8003c74 <HAL_RCC_OscConfig+0x4c8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d118      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x4c8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7e      	ldr	r2, [pc, #504]	; (8003c74 <HAL_RCC_OscConfig+0x4c8>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a82:	f7fe ffc9 	bl	8002a18 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8a:	f7fe ffc5 	bl	8002a18 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b64      	cmp	r3, #100	; 0x64
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e103      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4b75      	ldr	r3, [pc, #468]	; (8003c74 <HAL_RCC_OscConfig+0x4c8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x312>
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4a6e      	ldr	r2, [pc, #440]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6213      	str	r3, [r2, #32]
 8003abc:	e02d      	b.n	8003b1a <HAL_RCC_OscConfig+0x36e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x334>
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a69      	ldr	r2, [pc, #420]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	6213      	str	r3, [r2, #32]
 8003ad2:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4a66      	ldr	r2, [pc, #408]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	6213      	str	r3, [r2, #32]
 8003ade:	e01c      	b.n	8003b1a <HAL_RCC_OscConfig+0x36e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d10c      	bne.n	8003b02 <HAL_RCC_OscConfig+0x356>
 8003ae8:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4a60      	ldr	r2, [pc, #384]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	f043 0304 	orr.w	r3, r3, #4
 8003af2:	6213      	str	r3, [r2, #32]
 8003af4:	4b5e      	ldr	r3, [pc, #376]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4a5d      	ldr	r2, [pc, #372]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	6213      	str	r3, [r2, #32]
 8003b00:	e00b      	b.n	8003b1a <HAL_RCC_OscConfig+0x36e>
 8003b02:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4a5a      	ldr	r2, [pc, #360]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	6213      	str	r3, [r2, #32]
 8003b0e:	4b58      	ldr	r3, [pc, #352]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	4a57      	ldr	r2, [pc, #348]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d015      	beq.n	8003b4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b22:	f7fe ff79 	bl	8002a18 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b28:	e00a      	b.n	8003b40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7fe ff75 	bl	8002a18 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e0b1      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b40:	4b4b      	ldr	r3, [pc, #300]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ee      	beq.n	8003b2a <HAL_RCC_OscConfig+0x37e>
 8003b4c:	e014      	b.n	8003b78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4e:	f7fe ff63 	bl	8002a18 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fe ff5f 	bl	8002a18 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e09b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ee      	bne.n	8003b56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d105      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7e:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	4a3b      	ldr	r2, [pc, #236]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8087 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b94:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d061      	beq.n	8003c64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d146      	bne.n	8003c36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bae:	f7fe ff33 	bl	8002a18 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb6:	f7fe ff2f 	bl	8002a18 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e06d      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f0      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d108      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	4921      	ldr	r1, [pc, #132]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf0:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a19      	ldr	r1, [r3, #32]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	430b      	orrs	r3, r1
 8003c02:	491b      	ldr	r1, [pc, #108]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fe ff03 	bl	8002a18 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fe feff 	bl	8002a18 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e03d      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c28:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x46a>
 8003c34:	e035      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <HAL_RCC_OscConfig+0x4cc>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fe feec 	bl	8002a18 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c44:	f7fe fee8 	bl	8002a18 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e026      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x498>
 8003c62:	e01e      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d107      	bne.n	8003c7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e019      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40007000 	.word	0x40007000
 8003c78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_OscConfig+0x500>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d001      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000

08003cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0d0      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d910      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b67      	ldr	r3, [pc, #412]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 0207 	bic.w	r2, r3, #7
 8003cda:	4965      	ldr	r1, [pc, #404]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b63      	ldr	r3, [pc, #396]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0b8      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d0c:	4b59      	ldr	r3, [pc, #356]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a58      	ldr	r2, [pc, #352]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d24:	4b53      	ldr	r3, [pc, #332]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a52      	ldr	r2, [pc, #328]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d30:	4b50      	ldr	r3, [pc, #320]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	494d      	ldr	r1, [pc, #308]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d040      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b47      	ldr	r3, [pc, #284]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d115      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e07f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	4b41      	ldr	r3, [pc, #260]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e073      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7e:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e06b      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8e:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4936      	ldr	r1, [pc, #216]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da0:	f7fe fe3a 	bl	8002a18 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fe fe36 	bl	8002a18 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e053      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	4b2d      	ldr	r3, [pc, #180]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 020c 	and.w	r2, r3, #12
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d1eb      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d210      	bcs.n	8003e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 0207 	bic.w	r2, r3, #7
 8003de6:	4922      	ldr	r1, [pc, #136]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e032      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4916      	ldr	r1, [pc, #88]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	490e      	ldr	r1, [pc, #56]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e3e:	f000 f821 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e42:	4602      	mov	r2, r0
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	490a      	ldr	r1, [pc, #40]	; (8003e78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e50:	5ccb      	ldrb	r3, [r1, r3]
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	4a09      	ldr	r2, [pc, #36]	; (8003e7c <HAL_RCC_ClockConfig+0x1cc>)
 8003e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RCC_ClockConfig+0x1d0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fd98 	bl	8002994 <HAL_InitTick>

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40022000 	.word	0x40022000
 8003e74:	40021000 	.word	0x40021000
 8003e78:	080090bc 	.word	0x080090bc
 8003e7c:	20000008 	.word	0x20000008
 8003e80:	2000000c 	.word	0x2000000c

08003e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x30>
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0x36>
 8003eb2:	e027      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003eb6:	613b      	str	r3, [r7, #16]
      break;
 8003eb8:	e027      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	0c9b      	lsrs	r3, r3, #18
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ec4:	5cd3      	ldrb	r3, [r2, r3]
 8003ec6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d010      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	0c5b      	lsrs	r3, r3, #17
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
 8003ee0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ee6:	fb03 f202 	mul.w	r2, r3, r2
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e004      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a0c      	ldr	r2, [pc, #48]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	613b      	str	r3, [r7, #16]
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f06:	613b      	str	r3, [r7, #16]
      break;
 8003f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0a:	693b      	ldr	r3, [r7, #16]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	007a1200 	.word	0x007a1200
 8003f20:	080090d4 	.word	0x080090d4
 8003f24:	080090e4 	.word	0x080090e4
 8003f28:	003d0900 	.word	0x003d0900

08003f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f30:	4b02      	ldr	r3, [pc, #8]	; (8003f3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	20000008 	.word	0x20000008

08003f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f44:	f7ff fff2 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4903      	ldr	r1, [pc, #12]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000
 8003f64:	080090cc 	.word	0x080090cc

08003f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f6c:	f7ff ffde 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	0adb      	lsrs	r3, r3, #11
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	4903      	ldr	r1, [pc, #12]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f7e:	5ccb      	ldrb	r3, [r1, r3]
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	080090cc 	.word	0x080090cc

08003f90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <RCC_Delay+0x34>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <RCC_Delay+0x38>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	0a5b      	lsrs	r3, r3, #9
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fac:	bf00      	nop
  }
  while (Delay --);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	60fa      	str	r2, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f9      	bne.n	8003fac <RCC_Delay+0x1c>
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	20000008 	.word	0x20000008
 8003fc8:	10624dd3 	.word	0x10624dd3

08003fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d07d      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fec:	4b4f      	ldr	r3, [pc, #316]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4a4b      	ldr	r2, [pc, #300]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004002:	61d3      	str	r3, [r2, #28]
 8004004:	4b49      	ldr	r3, [pc, #292]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004010:	2301      	movs	r3, #1
 8004012:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d118      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004020:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a42      	ldr	r2, [pc, #264]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402c:	f7fe fcf4 	bl	8002a18 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004032:	e008      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004034:	f7fe fcf0 	bl	8002a18 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e06d      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	4b3a      	ldr	r3, [pc, #232]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004052:	4b36      	ldr	r3, [pc, #216]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d02e      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	429a      	cmp	r2, r3
 800406e:	d027      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004070:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004078:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407a:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004080:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004086:	4a29      	ldr	r2, [pc, #164]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d014      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fe fcbf 	bl	8002a18 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fe fcbb 	bl	8002a18 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e036      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ee      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4917      	ldr	r1, [pc, #92]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d8:	4b14      	ldr	r3, [pc, #80]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	4a13      	ldr	r2, [pc, #76]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040f0:	4b0e      	ldr	r3, [pc, #56]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	490b      	ldr	r1, [pc, #44]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	d008      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4904      	ldr	r1, [pc, #16]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
 8004134:	42420440 	.word	0x42420440

08004138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e041      	b.n	80041ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fe f848 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f000 fa70 	bl	800465c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d001      	beq.n	80041f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e032      	b.n	8004256 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a18      	ldr	r2, [pc, #96]	; (8004260 <HAL_TIM_Base_Start+0x88>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_TIM_Base_Start+0x48>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d009      	beq.n	8004220 <HAL_TIM_Base_Start+0x48>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a14      	ldr	r2, [pc, #80]	; (8004264 <HAL_TIM_Base_Start+0x8c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_TIM_Base_Start+0x48>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a13      	ldr	r2, [pc, #76]	; (8004268 <HAL_TIM_Base_Start+0x90>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d111      	bne.n	8004244 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b06      	cmp	r3, #6
 8004230:	d010      	beq.n	8004254 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	e007      	b.n	8004254 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800

0800426c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e093      	b.n	80043a8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d106      	bne.n	800429a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fd ff6d 	bl	8002174 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b0:	f023 0307 	bic.w	r3, r3, #7
 80042b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f000 f9cb 	bl	800465c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	4313      	orrs	r3, r2
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800430c:	f023 030c 	bic.w	r3, r3, #12
 8004310:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004318:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	4313      	orrs	r3, r2
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	011a      	lsls	r2, r3, #4
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	031b      	lsls	r3, r3, #12
 800433c:	4313      	orrs	r3, r2
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	4313      	orrs	r3, r2
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d110      	bne.n	8004402 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d102      	bne.n	80043ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043e6:	7b7b      	ldrb	r3, [r7, #13]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e069      	b.n	80044c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004400:	e031      	b.n	8004466 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d110      	bne.n	800442a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004408:	7bbb      	ldrb	r3, [r7, #14]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d102      	bne.n	8004414 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800440e:	7b3b      	ldrb	r3, [r7, #12]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d001      	beq.n	8004418 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e055      	b.n	80044c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004428:	e01d      	b.n	8004466 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d108      	bne.n	8004442 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004430:	7bbb      	ldrb	r3, [r7, #14]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004436:	7b7b      	ldrb	r3, [r7, #13]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d102      	bne.n	8004442 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800443c:	7b3b      	ldrb	r3, [r7, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e03e      	b.n	80044c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_TIM_Encoder_Start+0xc4>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d008      	beq.n	8004484 <HAL_TIM_Encoder_Start+0xd4>
 8004472:	e00f      	b.n	8004494 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2201      	movs	r2, #1
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f9e5 	bl	800484c <TIM_CCxChannelCmd>
      break;
 8004482:	e016      	b.n	80044b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2201      	movs	r2, #1
 800448a:	2104      	movs	r1, #4
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f9dd 	bl	800484c <TIM_CCxChannelCmd>
      break;
 8004492:	e00e      	b.n	80044b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2201      	movs	r2, #1
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f9d5 	bl	800484c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	2104      	movs	r1, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f9ce 	bl	800484c <TIM_CCxChannelCmd>
      break;
 80044b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0201 	orr.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_TIM_ConfigClockSource+0x1c>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e0b4      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x186>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800450e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004520:	d03e      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004526:	f200 8087 	bhi.w	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 800452a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452e:	f000 8086 	beq.w	800463e <HAL_TIM_ConfigClockSource+0x172>
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d87f      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b70      	cmp	r3, #112	; 0x70
 800453a:	d01a      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0xa6>
 800453c:	2b70      	cmp	r3, #112	; 0x70
 800453e:	d87b      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004540:	2b60      	cmp	r3, #96	; 0x60
 8004542:	d050      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004544:	2b60      	cmp	r3, #96	; 0x60
 8004546:	d877      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b50      	cmp	r3, #80	; 0x50
 800454a:	d03c      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0xfa>
 800454c:	2b50      	cmp	r3, #80	; 0x50
 800454e:	d873      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d058      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x13a>
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d86f      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d064      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 800455c:	2b30      	cmp	r3, #48	; 0x30
 800455e:	d86b      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d060      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 8004564:	2b20      	cmp	r3, #32
 8004566:	d867      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d05c      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 800456c:	2b10      	cmp	r3, #16
 800456e:	d05a      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 8004570:	e062      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004582:	f000 f944 	bl	800480e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	609a      	str	r2, [r3, #8]
      break;
 800459e:	e04f      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045b0:	f000 f92d 	bl	800480e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045c2:	609a      	str	r2, [r3, #8]
      break;
 80045c4:	e03c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d2:	461a      	mov	r2, r3
 80045d4:	f000 f8a4 	bl	8004720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2150      	movs	r1, #80	; 0x50
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f8fb 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 80045e4:	e02c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 f8c2 	bl	800477c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2160      	movs	r1, #96	; 0x60
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f8eb 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 8004604:	e01c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	461a      	mov	r2, r3
 8004614:	f000 f884 	bl	8004720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2140      	movs	r1, #64	; 0x40
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f8db 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 8004624:	e00c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f000 f8d2 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 8004636:	e003      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      break;
 800463c:	e000      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800463e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a29      	ldr	r2, [pc, #164]	; (8004714 <TIM_Base_SetConfig+0xb8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_Base_SetConfig+0x30>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467a:	d007      	beq.n	800468c <TIM_Base_SetConfig+0x30>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a26      	ldr	r2, [pc, #152]	; (8004718 <TIM_Base_SetConfig+0xbc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_Base_SetConfig+0x30>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a25      	ldr	r2, [pc, #148]	; (800471c <TIM_Base_SetConfig+0xc0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d108      	bne.n	800469e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <TIM_Base_SetConfig+0xb8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00b      	beq.n	80046be <TIM_Base_SetConfig+0x62>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ac:	d007      	beq.n	80046be <TIM_Base_SetConfig+0x62>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <TIM_Base_SetConfig+0xbc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_Base_SetConfig+0x62>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a18      	ldr	r2, [pc, #96]	; (800471c <TIM_Base_SetConfig+0xc0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d108      	bne.n	80046d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <TIM_Base_SetConfig+0xb8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800

08004720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f023 0201 	bic.w	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800474a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 030a 	bic.w	r3, r3, #10
 800475c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	f023 0210 	bic.w	r2, r3, #16
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	031b      	lsls	r3, r3, #12
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	621a      	str	r2, [r3, #32]
}
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f043 0307 	orr.w	r3, r3, #7
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800480e:	b480      	push	{r7}
 8004810:	b087      	sub	sp, #28
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004828:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	021a      	lsls	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	431a      	orrs	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4313      	orrs	r3, r2
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	609a      	str	r2, [r3, #8]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 031f 	and.w	r3, r3, #31
 800485e:	2201      	movs	r2, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1a      	ldr	r2, [r3, #32]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	43db      	mvns	r3, r3
 800486e:	401a      	ands	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1a      	ldr	r2, [r3, #32]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	431a      	orrs	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e046      	b.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a16      	ldr	r2, [pc, #88]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f8:	d009      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a12      	ldr	r2, [pc, #72]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a10      	ldr	r2, [pc, #64]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d10c      	bne.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	4313      	orrs	r3, r2
 800491e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800

08004950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e042      	b.n	80049e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fd fc58 	bl	800222c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	; 0x24
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fc7f 	bl	8005298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0ba      	sub	sp, #232	; 0xe8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10f      	bne.n	8004a56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_UART_IRQHandler+0x66>
 8004a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fb63 	bl	800511a <UART_Receive_IT>
      return;
 8004a54:	e25b      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80de 	beq.w	8004c1c <HAL_UART_IRQHandler+0x22c>
 8004a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80d1 	beq.w	8004c1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <HAL_UART_IRQHandler+0xae>
 8004a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	f043 0201 	orr.w	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_UART_IRQHandler+0xd2>
 8004aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	f043 0202 	orr.w	r2, r3, #2
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xf6>
 8004ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	f043 0204 	orr.w	r2, r3, #4
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d011      	beq.n	8004b16 <HAL_UART_IRQHandler+0x126>
 8004af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f043 0208 	orr.w	r2, r3, #8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 81f2 	beq.w	8004f04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_UART_IRQHandler+0x14e>
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 faee 	bl	800511a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <HAL_UART_IRQHandler+0x17a>
 8004b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d04f      	beq.n	8004c0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9f8 	bl	8004f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d041      	beq.n	8004c02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3314      	adds	r3, #20
 8004ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004baa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1d9      	bne.n	8004b7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d013      	beq.n	8004bfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	4a7e      	ldr	r2, [pc, #504]	; (8004dd0 <HAL_UART_IRQHandler+0x3e0>)
 8004bd8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe fbb6 	bl	8003350 <HAL_DMA_Abort_IT>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf8:	e00e      	b.n	8004c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f99c 	bl	8004f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c00:	e00a      	b.n	8004c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f998 	bl	8004f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	e006      	b.n	8004c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f994 	bl	8004f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004c16:	e175      	b.n	8004f04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c18:	bf00      	nop
    return;
 8004c1a:	e173      	b.n	8004f04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 814f 	bne.w	8004ec4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8148 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8141 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80b6 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8145 	beq.w	8004f08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c86:	429a      	cmp	r2, r3
 8004c88:	f080 813e 	bcs.w	8004f08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	f000 8088 	beq.w	8004db0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ccc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1d9      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3314      	adds	r3, #20
 8004cf2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3314      	adds	r3, #20
 8004d0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e1      	bne.n	8004cec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3314      	adds	r3, #20
 8004d2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3314      	adds	r3, #20
 8004d48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e3      	bne.n	8004d28 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d80:	f023 0310 	bic.w	r3, r3, #16
 8004d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e3      	bne.n	8004d6e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fa95 	bl	80032da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8bf 	bl	8004f4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dcc:	e09c      	b.n	8004f08 <HAL_UART_IRQHandler+0x518>
 8004dce:	bf00      	nop
 8004dd0:	08005025 	.word	0x08005025
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 808e 	beq.w	8004f0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8089 	beq.w	8004f0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e1e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e3      	bne.n	8004dfa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	623b      	str	r3, [r7, #32]
   return(result);
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e56:	633a      	str	r2, [r7, #48]	; 0x30
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e3      	bne.n	8004e32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0310 	bic.w	r3, r3, #16
 8004e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	330c      	adds	r3, #12
 8004e98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e9c:	61fa      	str	r2, [r7, #28]
 8004e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	69b9      	ldr	r1, [r7, #24]
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e3      	bne.n	8004e78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f844 	bl	8004f4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ec2:	e023      	b.n	8004f0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x4f4>
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f8b5 	bl	800504c <UART_Transmit_IT>
    return;
 8004ee2:	e014      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <HAL_UART_IRQHandler+0x51e>
 8004ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f8f4 	bl	80050ea <UART_EndTransmit_IT>
    return;
 8004f02:	e004      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
    return;
 8004f04:	bf00      	nop
 8004f06:	e002      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f08:	bf00      	nop
 8004f0a:	e000      	b.n	8004f0e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f0c:	bf00      	nop
  }
}
 8004f0e:	37e8      	adds	r7, #232	; 0xe8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	460b      	mov	r3, r1
 8004f54:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b095      	sub	sp, #84	; 0x54
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f88:	643a      	str	r2, [r7, #64]	; 0x40
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3314      	adds	r3, #20
 8004fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d119      	bne.n	800500c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f023 0310 	bic.w	r3, r3, #16
 8004fee:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff8:	61ba      	str	r2, [r7, #24]
 8004ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	613b      	str	r3, [r7, #16]
   return(result);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e5      	bne.n	8004fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800501a:	bf00      	nop
 800501c:	3754      	adds	r7, #84	; 0x54
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff ff7a 	bl	8004f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b21      	cmp	r3, #33	; 0x21
 800505e:	d13e      	bne.n	80050de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005068:	d114      	bne.n	8005094 <UART_Transmit_IT+0x48>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d110      	bne.n	8005094 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005086:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	1c9a      	adds	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]
 8005092:	e008      	b.n	80050a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	1c59      	adds	r1, r3, #1
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6211      	str	r1, [r2, #32]
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	4619      	mov	r1, r3
 80050b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050de:	2302      	movs	r3, #2
  }
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff ff02 	bl	8004f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b08c      	sub	sp, #48	; 0x30
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b22      	cmp	r3, #34	; 0x22
 800512c:	f040 80ae 	bne.w	800528c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d117      	bne.n	800516a <UART_Receive_IT+0x50>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d113      	bne.n	800516a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005158:	b29a      	uxth	r2, r3
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	629a      	str	r2, [r3, #40]	; 0x28
 8005168:	e026      	b.n	80051b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517c:	d007      	beq.n	800518e <UART_Receive_IT+0x74>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <UART_Receive_IT+0x82>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e008      	b.n	80051ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4619      	mov	r1, r3
 80051c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d15d      	bne.n	8005288 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0220 	bic.w	r2, r2, #32
 80051da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	2b01      	cmp	r3, #1
 8005210:	d135      	bne.n	800527e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	613b      	str	r3, [r7, #16]
   return(result);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f023 0310 	bic.w	r3, r3, #16
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005238:	623a      	str	r2, [r7, #32]
 800523a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	69f9      	ldr	r1, [r7, #28]
 800523e:	6a3a      	ldr	r2, [r7, #32]
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	61bb      	str	r3, [r7, #24]
   return(result);
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e5      	bne.n	8005218 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b10      	cmp	r3, #16
 8005258:	d10a      	bne.n	8005270 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fe67 	bl	8004f4a <HAL_UARTEx_RxEventCallback>
 800527c:	e002      	b.n	8005284 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fe51 	bl	8004f26 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	e002      	b.n	800528e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3730      	adds	r7, #48	; 0x30
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052d2:	f023 030c 	bic.w	r3, r3, #12
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	430b      	orrs	r3, r1
 80052de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <UART_SetConfig+0x114>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d103      	bne.n	8005308 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005300:	f7fe fe32 	bl	8003f68 <HAL_RCC_GetPCLK2Freq>
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	e002      	b.n	800530e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005308:	f7fe fe1a 	bl	8003f40 <HAL_RCC_GetPCLK1Freq>
 800530c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009a      	lsls	r2, r3, #2
 8005318:	441a      	add	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	4a22      	ldr	r2, [pc, #136]	; (80053b0 <UART_SetConfig+0x118>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	0119      	lsls	r1, r3, #4
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009a      	lsls	r2, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	fbb2 f2f3 	udiv	r2, r2, r3
 8005344:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <UART_SetConfig+0x118>)
 8005346:	fba3 0302 	umull	r0, r3, r3, r2
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	2064      	movs	r0, #100	; 0x64
 800534e:	fb00 f303 	mul.w	r3, r0, r3
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	3332      	adds	r3, #50	; 0x32
 8005358:	4a15      	ldr	r2, [pc, #84]	; (80053b0 <UART_SetConfig+0x118>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005364:	4419      	add	r1, r3
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009a      	lsls	r2, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	fbb2 f2f3 	udiv	r2, r2, r3
 800537c:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <UART_SetConfig+0x118>)
 800537e:	fba3 0302 	umull	r0, r3, r3, r2
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2064      	movs	r0, #100	; 0x64
 8005386:	fb00 f303 	mul.w	r3, r0, r3
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	3332      	adds	r3, #50	; 0x32
 8005390:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <UART_SetConfig+0x118>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	f003 020f 	and.w	r2, r3, #15
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	440a      	add	r2, r1
 80053a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40013800 	.word	0x40013800
 80053b0:	51eb851f 	.word	0x51eb851f

080053b4 <atoi>:
 80053b4:	220a      	movs	r2, #10
 80053b6:	2100      	movs	r1, #0
 80053b8:	f000 b87e 	b.w	80054b8 <strtol>

080053bc <_strtol_l.constprop.0>:
 80053bc:	2b01      	cmp	r3, #1
 80053be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c2:	4686      	mov	lr, r0
 80053c4:	4690      	mov	r8, r2
 80053c6:	d001      	beq.n	80053cc <_strtol_l.constprop.0+0x10>
 80053c8:	2b24      	cmp	r3, #36	; 0x24
 80053ca:	d906      	bls.n	80053da <_strtol_l.constprop.0+0x1e>
 80053cc:	f000 fe54 	bl	8006078 <__errno>
 80053d0:	2316      	movs	r3, #22
 80053d2:	6003      	str	r3, [r0, #0]
 80053d4:	2000      	movs	r0, #0
 80053d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053da:	460d      	mov	r5, r1
 80053dc:	4835      	ldr	r0, [pc, #212]	; (80054b4 <_strtol_l.constprop.0+0xf8>)
 80053de:	462a      	mov	r2, r5
 80053e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053e4:	5d06      	ldrb	r6, [r0, r4]
 80053e6:	f016 0608 	ands.w	r6, r6, #8
 80053ea:	d1f8      	bne.n	80053de <_strtol_l.constprop.0+0x22>
 80053ec:	2c2d      	cmp	r4, #45	; 0x2d
 80053ee:	d12e      	bne.n	800544e <_strtol_l.constprop.0+0x92>
 80053f0:	2601      	movs	r6, #1
 80053f2:	782c      	ldrb	r4, [r5, #0]
 80053f4:	1c95      	adds	r5, r2, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d057      	beq.n	80054aa <_strtol_l.constprop.0+0xee>
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d109      	bne.n	8005412 <_strtol_l.constprop.0+0x56>
 80053fe:	2c30      	cmp	r4, #48	; 0x30
 8005400:	d107      	bne.n	8005412 <_strtol_l.constprop.0+0x56>
 8005402:	782a      	ldrb	r2, [r5, #0]
 8005404:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005408:	2a58      	cmp	r2, #88	; 0x58
 800540a:	d149      	bne.n	80054a0 <_strtol_l.constprop.0+0xe4>
 800540c:	2310      	movs	r3, #16
 800540e:	786c      	ldrb	r4, [r5, #1]
 8005410:	3502      	adds	r5, #2
 8005412:	2200      	movs	r2, #0
 8005414:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005418:	f10c 3cff 	add.w	ip, ip, #4294967295
 800541c:	fbbc f9f3 	udiv	r9, ip, r3
 8005420:	4610      	mov	r0, r2
 8005422:	fb03 ca19 	mls	sl, r3, r9, ip
 8005426:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800542a:	2f09      	cmp	r7, #9
 800542c:	d814      	bhi.n	8005458 <_strtol_l.constprop.0+0x9c>
 800542e:	463c      	mov	r4, r7
 8005430:	42a3      	cmp	r3, r4
 8005432:	dd20      	ble.n	8005476 <_strtol_l.constprop.0+0xba>
 8005434:	1c57      	adds	r7, r2, #1
 8005436:	d007      	beq.n	8005448 <_strtol_l.constprop.0+0x8c>
 8005438:	4581      	cmp	r9, r0
 800543a:	d319      	bcc.n	8005470 <_strtol_l.constprop.0+0xb4>
 800543c:	d101      	bne.n	8005442 <_strtol_l.constprop.0+0x86>
 800543e:	45a2      	cmp	sl, r4
 8005440:	db16      	blt.n	8005470 <_strtol_l.constprop.0+0xb4>
 8005442:	2201      	movs	r2, #1
 8005444:	fb00 4003 	mla	r0, r0, r3, r4
 8005448:	f815 4b01 	ldrb.w	r4, [r5], #1
 800544c:	e7eb      	b.n	8005426 <_strtol_l.constprop.0+0x6a>
 800544e:	2c2b      	cmp	r4, #43	; 0x2b
 8005450:	bf04      	itt	eq
 8005452:	782c      	ldrbeq	r4, [r5, #0]
 8005454:	1c95      	addeq	r5, r2, #2
 8005456:	e7ce      	b.n	80053f6 <_strtol_l.constprop.0+0x3a>
 8005458:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800545c:	2f19      	cmp	r7, #25
 800545e:	d801      	bhi.n	8005464 <_strtol_l.constprop.0+0xa8>
 8005460:	3c37      	subs	r4, #55	; 0x37
 8005462:	e7e5      	b.n	8005430 <_strtol_l.constprop.0+0x74>
 8005464:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005468:	2f19      	cmp	r7, #25
 800546a:	d804      	bhi.n	8005476 <_strtol_l.constprop.0+0xba>
 800546c:	3c57      	subs	r4, #87	; 0x57
 800546e:	e7df      	b.n	8005430 <_strtol_l.constprop.0+0x74>
 8005470:	f04f 32ff 	mov.w	r2, #4294967295
 8005474:	e7e8      	b.n	8005448 <_strtol_l.constprop.0+0x8c>
 8005476:	1c53      	adds	r3, r2, #1
 8005478:	d108      	bne.n	800548c <_strtol_l.constprop.0+0xd0>
 800547a:	2322      	movs	r3, #34	; 0x22
 800547c:	4660      	mov	r0, ip
 800547e:	f8ce 3000 	str.w	r3, [lr]
 8005482:	f1b8 0f00 	cmp.w	r8, #0
 8005486:	d0a6      	beq.n	80053d6 <_strtol_l.constprop.0+0x1a>
 8005488:	1e69      	subs	r1, r5, #1
 800548a:	e006      	b.n	800549a <_strtol_l.constprop.0+0xde>
 800548c:	b106      	cbz	r6, 8005490 <_strtol_l.constprop.0+0xd4>
 800548e:	4240      	negs	r0, r0
 8005490:	f1b8 0f00 	cmp.w	r8, #0
 8005494:	d09f      	beq.n	80053d6 <_strtol_l.constprop.0+0x1a>
 8005496:	2a00      	cmp	r2, #0
 8005498:	d1f6      	bne.n	8005488 <_strtol_l.constprop.0+0xcc>
 800549a:	f8c8 1000 	str.w	r1, [r8]
 800549e:	e79a      	b.n	80053d6 <_strtol_l.constprop.0+0x1a>
 80054a0:	2430      	movs	r4, #48	; 0x30
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1b5      	bne.n	8005412 <_strtol_l.constprop.0+0x56>
 80054a6:	2308      	movs	r3, #8
 80054a8:	e7b3      	b.n	8005412 <_strtol_l.constprop.0+0x56>
 80054aa:	2c30      	cmp	r4, #48	; 0x30
 80054ac:	d0a9      	beq.n	8005402 <_strtol_l.constprop.0+0x46>
 80054ae:	230a      	movs	r3, #10
 80054b0:	e7af      	b.n	8005412 <_strtol_l.constprop.0+0x56>
 80054b2:	bf00      	nop
 80054b4:	080090e7 	.word	0x080090e7

080054b8 <strtol>:
 80054b8:	4613      	mov	r3, r2
 80054ba:	460a      	mov	r2, r1
 80054bc:	4601      	mov	r1, r0
 80054be:	4802      	ldr	r0, [pc, #8]	; (80054c8 <strtol+0x10>)
 80054c0:	6800      	ldr	r0, [r0, #0]
 80054c2:	f7ff bf7b 	b.w	80053bc <_strtol_l.constprop.0>
 80054c6:	bf00      	nop
 80054c8:	2000006c 	.word	0x2000006c

080054cc <__cvt>:
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d2:	461f      	mov	r7, r3
 80054d4:	bfbb      	ittet	lt
 80054d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80054da:	461f      	movlt	r7, r3
 80054dc:	2300      	movge	r3, #0
 80054de:	232d      	movlt	r3, #45	; 0x2d
 80054e0:	b088      	sub	sp, #32
 80054e2:	4614      	mov	r4, r2
 80054e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80054e8:	7013      	strb	r3, [r2, #0]
 80054ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80054f0:	f023 0820 	bic.w	r8, r3, #32
 80054f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054f8:	d005      	beq.n	8005506 <__cvt+0x3a>
 80054fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054fe:	d100      	bne.n	8005502 <__cvt+0x36>
 8005500:	3501      	adds	r5, #1
 8005502:	2302      	movs	r3, #2
 8005504:	e000      	b.n	8005508 <__cvt+0x3c>
 8005506:	2303      	movs	r3, #3
 8005508:	aa07      	add	r2, sp, #28
 800550a:	9204      	str	r2, [sp, #16]
 800550c:	aa06      	add	r2, sp, #24
 800550e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005512:	e9cd 3500 	strd	r3, r5, [sp]
 8005516:	4622      	mov	r2, r4
 8005518:	463b      	mov	r3, r7
 800551a:	f000 fe71 	bl	8006200 <_dtoa_r>
 800551e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005522:	4606      	mov	r6, r0
 8005524:	d102      	bne.n	800552c <__cvt+0x60>
 8005526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005528:	07db      	lsls	r3, r3, #31
 800552a:	d522      	bpl.n	8005572 <__cvt+0xa6>
 800552c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005530:	eb06 0905 	add.w	r9, r6, r5
 8005534:	d110      	bne.n	8005558 <__cvt+0x8c>
 8005536:	7833      	ldrb	r3, [r6, #0]
 8005538:	2b30      	cmp	r3, #48	; 0x30
 800553a:	d10a      	bne.n	8005552 <__cvt+0x86>
 800553c:	2200      	movs	r2, #0
 800553e:	2300      	movs	r3, #0
 8005540:	4620      	mov	r0, r4
 8005542:	4639      	mov	r1, r7
 8005544:	f7fb fa30 	bl	80009a8 <__aeabi_dcmpeq>
 8005548:	b918      	cbnz	r0, 8005552 <__cvt+0x86>
 800554a:	f1c5 0501 	rsb	r5, r5, #1
 800554e:	f8ca 5000 	str.w	r5, [sl]
 8005552:	f8da 3000 	ldr.w	r3, [sl]
 8005556:	4499      	add	r9, r3
 8005558:	2200      	movs	r2, #0
 800555a:	2300      	movs	r3, #0
 800555c:	4620      	mov	r0, r4
 800555e:	4639      	mov	r1, r7
 8005560:	f7fb fa22 	bl	80009a8 <__aeabi_dcmpeq>
 8005564:	b108      	cbz	r0, 800556a <__cvt+0x9e>
 8005566:	f8cd 901c 	str.w	r9, [sp, #28]
 800556a:	2230      	movs	r2, #48	; 0x30
 800556c:	9b07      	ldr	r3, [sp, #28]
 800556e:	454b      	cmp	r3, r9
 8005570:	d307      	bcc.n	8005582 <__cvt+0xb6>
 8005572:	4630      	mov	r0, r6
 8005574:	9b07      	ldr	r3, [sp, #28]
 8005576:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005578:	1b9b      	subs	r3, r3, r6
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	b008      	add	sp, #32
 800557e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005582:	1c59      	adds	r1, r3, #1
 8005584:	9107      	str	r1, [sp, #28]
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	e7f0      	b.n	800556c <__cvt+0xa0>

0800558a <__exponent>:
 800558a:	4603      	mov	r3, r0
 800558c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800558e:	2900      	cmp	r1, #0
 8005590:	f803 2b02 	strb.w	r2, [r3], #2
 8005594:	bfb6      	itet	lt
 8005596:	222d      	movlt	r2, #45	; 0x2d
 8005598:	222b      	movge	r2, #43	; 0x2b
 800559a:	4249      	neglt	r1, r1
 800559c:	2909      	cmp	r1, #9
 800559e:	7042      	strb	r2, [r0, #1]
 80055a0:	dd2a      	ble.n	80055f8 <__exponent+0x6e>
 80055a2:	f10d 0207 	add.w	r2, sp, #7
 80055a6:	4617      	mov	r7, r2
 80055a8:	260a      	movs	r6, #10
 80055aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80055ae:	4694      	mov	ip, r2
 80055b0:	fb06 1415 	mls	r4, r6, r5, r1
 80055b4:	3430      	adds	r4, #48	; 0x30
 80055b6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80055ba:	460c      	mov	r4, r1
 80055bc:	2c63      	cmp	r4, #99	; 0x63
 80055be:	4629      	mov	r1, r5
 80055c0:	f102 32ff 	add.w	r2, r2, #4294967295
 80055c4:	dcf1      	bgt.n	80055aa <__exponent+0x20>
 80055c6:	3130      	adds	r1, #48	; 0x30
 80055c8:	f1ac 0402 	sub.w	r4, ip, #2
 80055cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80055d0:	4622      	mov	r2, r4
 80055d2:	1c41      	adds	r1, r0, #1
 80055d4:	42ba      	cmp	r2, r7
 80055d6:	d30a      	bcc.n	80055ee <__exponent+0x64>
 80055d8:	f10d 0209 	add.w	r2, sp, #9
 80055dc:	eba2 020c 	sub.w	r2, r2, ip
 80055e0:	42bc      	cmp	r4, r7
 80055e2:	bf88      	it	hi
 80055e4:	2200      	movhi	r2, #0
 80055e6:	4413      	add	r3, r2
 80055e8:	1a18      	subs	r0, r3, r0
 80055ea:	b003      	add	sp, #12
 80055ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 80055f2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80055f6:	e7ed      	b.n	80055d4 <__exponent+0x4a>
 80055f8:	2330      	movs	r3, #48	; 0x30
 80055fa:	3130      	adds	r1, #48	; 0x30
 80055fc:	7083      	strb	r3, [r0, #2]
 80055fe:	70c1      	strb	r1, [r0, #3]
 8005600:	1d03      	adds	r3, r0, #4
 8005602:	e7f1      	b.n	80055e8 <__exponent+0x5e>

08005604 <_printf_float>:
 8005604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005608:	b091      	sub	sp, #68	; 0x44
 800560a:	460c      	mov	r4, r1
 800560c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005610:	4616      	mov	r6, r2
 8005612:	461f      	mov	r7, r3
 8005614:	4605      	mov	r5, r0
 8005616:	f000 fce5 	bl	8005fe4 <_localeconv_r>
 800561a:	6803      	ldr	r3, [r0, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	9309      	str	r3, [sp, #36]	; 0x24
 8005620:	f7fa fd96 	bl	8000150 <strlen>
 8005624:	2300      	movs	r3, #0
 8005626:	930e      	str	r3, [sp, #56]	; 0x38
 8005628:	f8d8 3000 	ldr.w	r3, [r8]
 800562c:	900a      	str	r0, [sp, #40]	; 0x28
 800562e:	3307      	adds	r3, #7
 8005630:	f023 0307 	bic.w	r3, r3, #7
 8005634:	f103 0208 	add.w	r2, r3, #8
 8005638:	f894 9018 	ldrb.w	r9, [r4, #24]
 800563c:	f8d4 b000 	ldr.w	fp, [r4]
 8005640:	f8c8 2000 	str.w	r2, [r8]
 8005644:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005648:	4652      	mov	r2, sl
 800564a:	4643      	mov	r3, r8
 800564c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005650:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005654:	930b      	str	r3, [sp, #44]	; 0x2c
 8005656:	f04f 32ff 	mov.w	r2, #4294967295
 800565a:	4650      	mov	r0, sl
 800565c:	4b9c      	ldr	r3, [pc, #624]	; (80058d0 <_printf_float+0x2cc>)
 800565e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005660:	f7fb f9d4 	bl	8000a0c <__aeabi_dcmpun>
 8005664:	bb70      	cbnz	r0, 80056c4 <_printf_float+0xc0>
 8005666:	f04f 32ff 	mov.w	r2, #4294967295
 800566a:	4650      	mov	r0, sl
 800566c:	4b98      	ldr	r3, [pc, #608]	; (80058d0 <_printf_float+0x2cc>)
 800566e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005670:	f7fb f9ae 	bl	80009d0 <__aeabi_dcmple>
 8005674:	bb30      	cbnz	r0, 80056c4 <_printf_float+0xc0>
 8005676:	2200      	movs	r2, #0
 8005678:	2300      	movs	r3, #0
 800567a:	4650      	mov	r0, sl
 800567c:	4641      	mov	r1, r8
 800567e:	f7fb f99d 	bl	80009bc <__aeabi_dcmplt>
 8005682:	b110      	cbz	r0, 800568a <_printf_float+0x86>
 8005684:	232d      	movs	r3, #45	; 0x2d
 8005686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800568a:	4a92      	ldr	r2, [pc, #584]	; (80058d4 <_printf_float+0x2d0>)
 800568c:	4b92      	ldr	r3, [pc, #584]	; (80058d8 <_printf_float+0x2d4>)
 800568e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005692:	bf94      	ite	ls
 8005694:	4690      	movls	r8, r2
 8005696:	4698      	movhi	r8, r3
 8005698:	2303      	movs	r3, #3
 800569a:	f04f 0a00 	mov.w	sl, #0
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	f02b 0304 	bic.w	r3, fp, #4
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	4633      	mov	r3, r6
 80056a8:	4621      	mov	r1, r4
 80056aa:	4628      	mov	r0, r5
 80056ac:	9700      	str	r7, [sp, #0]
 80056ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80056b0:	f000 f9d6 	bl	8005a60 <_printf_common>
 80056b4:	3001      	adds	r0, #1
 80056b6:	f040 8090 	bne.w	80057da <_printf_float+0x1d6>
 80056ba:	f04f 30ff 	mov.w	r0, #4294967295
 80056be:	b011      	add	sp, #68	; 0x44
 80056c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c4:	4652      	mov	r2, sl
 80056c6:	4643      	mov	r3, r8
 80056c8:	4650      	mov	r0, sl
 80056ca:	4641      	mov	r1, r8
 80056cc:	f7fb f99e 	bl	8000a0c <__aeabi_dcmpun>
 80056d0:	b148      	cbz	r0, 80056e6 <_printf_float+0xe2>
 80056d2:	f1b8 0f00 	cmp.w	r8, #0
 80056d6:	bfb8      	it	lt
 80056d8:	232d      	movlt	r3, #45	; 0x2d
 80056da:	4a80      	ldr	r2, [pc, #512]	; (80058dc <_printf_float+0x2d8>)
 80056dc:	bfb8      	it	lt
 80056de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056e2:	4b7f      	ldr	r3, [pc, #508]	; (80058e0 <_printf_float+0x2dc>)
 80056e4:	e7d3      	b.n	800568e <_printf_float+0x8a>
 80056e6:	6863      	ldr	r3, [r4, #4]
 80056e8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	d142      	bne.n	8005776 <_printf_float+0x172>
 80056f0:	2306      	movs	r3, #6
 80056f2:	6063      	str	r3, [r4, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	9206      	str	r2, [sp, #24]
 80056f8:	aa0e      	add	r2, sp, #56	; 0x38
 80056fa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80056fe:	aa0d      	add	r2, sp, #52	; 0x34
 8005700:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005704:	9203      	str	r2, [sp, #12]
 8005706:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800570a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800570e:	6023      	str	r3, [r4, #0]
 8005710:	6863      	ldr	r3, [r4, #4]
 8005712:	4652      	mov	r2, sl
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4628      	mov	r0, r5
 8005718:	4643      	mov	r3, r8
 800571a:	910b      	str	r1, [sp, #44]	; 0x2c
 800571c:	f7ff fed6 	bl	80054cc <__cvt>
 8005720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005722:	4680      	mov	r8, r0
 8005724:	2947      	cmp	r1, #71	; 0x47
 8005726:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005728:	d108      	bne.n	800573c <_printf_float+0x138>
 800572a:	1cc8      	adds	r0, r1, #3
 800572c:	db02      	blt.n	8005734 <_printf_float+0x130>
 800572e:	6863      	ldr	r3, [r4, #4]
 8005730:	4299      	cmp	r1, r3
 8005732:	dd40      	ble.n	80057b6 <_printf_float+0x1b2>
 8005734:	f1a9 0902 	sub.w	r9, r9, #2
 8005738:	fa5f f989 	uxtb.w	r9, r9
 800573c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005740:	d81f      	bhi.n	8005782 <_printf_float+0x17e>
 8005742:	464a      	mov	r2, r9
 8005744:	3901      	subs	r1, #1
 8005746:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800574a:	910d      	str	r1, [sp, #52]	; 0x34
 800574c:	f7ff ff1d 	bl	800558a <__exponent>
 8005750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005752:	4682      	mov	sl, r0
 8005754:	1813      	adds	r3, r2, r0
 8005756:	2a01      	cmp	r2, #1
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	dc02      	bgt.n	8005762 <_printf_float+0x15e>
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	07d2      	lsls	r2, r2, #31
 8005760:	d501      	bpl.n	8005766 <_printf_float+0x162>
 8005762:	3301      	adds	r3, #1
 8005764:	6123      	str	r3, [r4, #16]
 8005766:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800576a:	2b00      	cmp	r3, #0
 800576c:	d09b      	beq.n	80056a6 <_printf_float+0xa2>
 800576e:	232d      	movs	r3, #45	; 0x2d
 8005770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005774:	e797      	b.n	80056a6 <_printf_float+0xa2>
 8005776:	2947      	cmp	r1, #71	; 0x47
 8005778:	d1bc      	bne.n	80056f4 <_printf_float+0xf0>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1ba      	bne.n	80056f4 <_printf_float+0xf0>
 800577e:	2301      	movs	r3, #1
 8005780:	e7b7      	b.n	80056f2 <_printf_float+0xee>
 8005782:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005786:	d118      	bne.n	80057ba <_printf_float+0x1b6>
 8005788:	2900      	cmp	r1, #0
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	dd0b      	ble.n	80057a6 <_printf_float+0x1a2>
 800578e:	6121      	str	r1, [r4, #16]
 8005790:	b913      	cbnz	r3, 8005798 <_printf_float+0x194>
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	07d0      	lsls	r0, r2, #31
 8005796:	d502      	bpl.n	800579e <_printf_float+0x19a>
 8005798:	3301      	adds	r3, #1
 800579a:	440b      	add	r3, r1
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	f04f 0a00 	mov.w	sl, #0
 80057a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80057a4:	e7df      	b.n	8005766 <_printf_float+0x162>
 80057a6:	b913      	cbnz	r3, 80057ae <_printf_float+0x1aa>
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	07d2      	lsls	r2, r2, #31
 80057ac:	d501      	bpl.n	80057b2 <_printf_float+0x1ae>
 80057ae:	3302      	adds	r3, #2
 80057b0:	e7f4      	b.n	800579c <_printf_float+0x198>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e7f2      	b.n	800579c <_printf_float+0x198>
 80057b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80057ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057bc:	4299      	cmp	r1, r3
 80057be:	db05      	blt.n	80057cc <_printf_float+0x1c8>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	6121      	str	r1, [r4, #16]
 80057c4:	07d8      	lsls	r0, r3, #31
 80057c6:	d5ea      	bpl.n	800579e <_printf_float+0x19a>
 80057c8:	1c4b      	adds	r3, r1, #1
 80057ca:	e7e7      	b.n	800579c <_printf_float+0x198>
 80057cc:	2900      	cmp	r1, #0
 80057ce:	bfcc      	ite	gt
 80057d0:	2201      	movgt	r2, #1
 80057d2:	f1c1 0202 	rsble	r2, r1, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	e7e0      	b.n	800579c <_printf_float+0x198>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	055a      	lsls	r2, r3, #21
 80057de:	d407      	bmi.n	80057f0 <_printf_float+0x1ec>
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	4642      	mov	r2, r8
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	d12b      	bne.n	8005846 <_printf_float+0x242>
 80057ee:	e764      	b.n	80056ba <_printf_float+0xb6>
 80057f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057f4:	f240 80dd 	bls.w	80059b2 <_printf_float+0x3ae>
 80057f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057fc:	2200      	movs	r2, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	f7fb f8d2 	bl	80009a8 <__aeabi_dcmpeq>
 8005804:	2800      	cmp	r0, #0
 8005806:	d033      	beq.n	8005870 <_printf_float+0x26c>
 8005808:	2301      	movs	r3, #1
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	4a35      	ldr	r2, [pc, #212]	; (80058e4 <_printf_float+0x2e0>)
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f af51 	beq.w	80056ba <_printf_float+0xb6>
 8005818:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800581c:	429a      	cmp	r2, r3
 800581e:	db02      	blt.n	8005826 <_printf_float+0x222>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	07d8      	lsls	r0, r3, #31
 8005824:	d50f      	bpl.n	8005846 <_printf_float+0x242>
 8005826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800582a:	4631      	mov	r1, r6
 800582c:	4628      	mov	r0, r5
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	f43f af42 	beq.w	80056ba <_printf_float+0xb6>
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	f104 091a 	add.w	r9, r4, #26
 800583e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005840:	3b01      	subs	r3, #1
 8005842:	4543      	cmp	r3, r8
 8005844:	dc09      	bgt.n	800585a <_printf_float+0x256>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	079b      	lsls	r3, r3, #30
 800584a:	f100 8104 	bmi.w	8005a56 <_printf_float+0x452>
 800584e:	68e0      	ldr	r0, [r4, #12]
 8005850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005852:	4298      	cmp	r0, r3
 8005854:	bfb8      	it	lt
 8005856:	4618      	movlt	r0, r3
 8005858:	e731      	b.n	80056be <_printf_float+0xba>
 800585a:	2301      	movs	r3, #1
 800585c:	464a      	mov	r2, r9
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	f43f af28 	beq.w	80056ba <_printf_float+0xb6>
 800586a:	f108 0801 	add.w	r8, r8, #1
 800586e:	e7e6      	b.n	800583e <_printf_float+0x23a>
 8005870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005872:	2b00      	cmp	r3, #0
 8005874:	dc38      	bgt.n	80058e8 <_printf_float+0x2e4>
 8005876:	2301      	movs	r3, #1
 8005878:	4631      	mov	r1, r6
 800587a:	4628      	mov	r0, r5
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <_printf_float+0x2e0>)
 800587e:	47b8      	blx	r7
 8005880:	3001      	adds	r0, #1
 8005882:	f43f af1a 	beq.w	80056ba <_printf_float+0xb6>
 8005886:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800588a:	4313      	orrs	r3, r2
 800588c:	d102      	bne.n	8005894 <_printf_float+0x290>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	07d9      	lsls	r1, r3, #31
 8005892:	d5d8      	bpl.n	8005846 <_printf_float+0x242>
 8005894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005898:	4631      	mov	r1, r6
 800589a:	4628      	mov	r0, r5
 800589c:	47b8      	blx	r7
 800589e:	3001      	adds	r0, #1
 80058a0:	f43f af0b 	beq.w	80056ba <_printf_float+0xb6>
 80058a4:	f04f 0900 	mov.w	r9, #0
 80058a8:	f104 0a1a 	add.w	sl, r4, #26
 80058ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ae:	425b      	negs	r3, r3
 80058b0:	454b      	cmp	r3, r9
 80058b2:	dc01      	bgt.n	80058b8 <_printf_float+0x2b4>
 80058b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058b6:	e794      	b.n	80057e2 <_printf_float+0x1de>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4652      	mov	r2, sl
 80058bc:	4631      	mov	r1, r6
 80058be:	4628      	mov	r0, r5
 80058c0:	47b8      	blx	r7
 80058c2:	3001      	adds	r0, #1
 80058c4:	f43f aef9 	beq.w	80056ba <_printf_float+0xb6>
 80058c8:	f109 0901 	add.w	r9, r9, #1
 80058cc:	e7ee      	b.n	80058ac <_printf_float+0x2a8>
 80058ce:	bf00      	nop
 80058d0:	7fefffff 	.word	0x7fefffff
 80058d4:	080091e7 	.word	0x080091e7
 80058d8:	080091eb 	.word	0x080091eb
 80058dc:	080091ef 	.word	0x080091ef
 80058e0:	080091f3 	.word	0x080091f3
 80058e4:	080091f7 	.word	0x080091f7
 80058e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058ec:	429a      	cmp	r2, r3
 80058ee:	bfa8      	it	ge
 80058f0:	461a      	movge	r2, r3
 80058f2:	2a00      	cmp	r2, #0
 80058f4:	4691      	mov	r9, r2
 80058f6:	dc37      	bgt.n	8005968 <_printf_float+0x364>
 80058f8:	f04f 0b00 	mov.w	fp, #0
 80058fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005900:	f104 021a 	add.w	r2, r4, #26
 8005904:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005908:	ebaa 0309 	sub.w	r3, sl, r9
 800590c:	455b      	cmp	r3, fp
 800590e:	dc33      	bgt.n	8005978 <_printf_float+0x374>
 8005910:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005914:	429a      	cmp	r2, r3
 8005916:	db3b      	blt.n	8005990 <_printf_float+0x38c>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	07da      	lsls	r2, r3, #31
 800591c:	d438      	bmi.n	8005990 <_printf_float+0x38c>
 800591e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005922:	eba2 0903 	sub.w	r9, r2, r3
 8005926:	eba2 020a 	sub.w	r2, r2, sl
 800592a:	4591      	cmp	r9, r2
 800592c:	bfa8      	it	ge
 800592e:	4691      	movge	r9, r2
 8005930:	f1b9 0f00 	cmp.w	r9, #0
 8005934:	dc34      	bgt.n	80059a0 <_printf_float+0x39c>
 8005936:	f04f 0800 	mov.w	r8, #0
 800593a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800593e:	f104 0a1a 	add.w	sl, r4, #26
 8005942:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	eba3 0309 	sub.w	r3, r3, r9
 800594c:	4543      	cmp	r3, r8
 800594e:	f77f af7a 	ble.w	8005846 <_printf_float+0x242>
 8005952:	2301      	movs	r3, #1
 8005954:	4652      	mov	r2, sl
 8005956:	4631      	mov	r1, r6
 8005958:	4628      	mov	r0, r5
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	f43f aeac 	beq.w	80056ba <_printf_float+0xb6>
 8005962:	f108 0801 	add.w	r8, r8, #1
 8005966:	e7ec      	b.n	8005942 <_printf_float+0x33e>
 8005968:	4613      	mov	r3, r2
 800596a:	4631      	mov	r1, r6
 800596c:	4642      	mov	r2, r8
 800596e:	4628      	mov	r0, r5
 8005970:	47b8      	blx	r7
 8005972:	3001      	adds	r0, #1
 8005974:	d1c0      	bne.n	80058f8 <_printf_float+0x2f4>
 8005976:	e6a0      	b.n	80056ba <_printf_float+0xb6>
 8005978:	2301      	movs	r3, #1
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f ae99 	beq.w	80056ba <_printf_float+0xb6>
 8005988:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800598a:	f10b 0b01 	add.w	fp, fp, #1
 800598e:	e7b9      	b.n	8005904 <_printf_float+0x300>
 8005990:	4631      	mov	r1, r6
 8005992:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005996:	4628      	mov	r0, r5
 8005998:	47b8      	blx	r7
 800599a:	3001      	adds	r0, #1
 800599c:	d1bf      	bne.n	800591e <_printf_float+0x31a>
 800599e:	e68c      	b.n	80056ba <_printf_float+0xb6>
 80059a0:	464b      	mov	r3, r9
 80059a2:	4631      	mov	r1, r6
 80059a4:	4628      	mov	r0, r5
 80059a6:	eb08 020a 	add.w	r2, r8, sl
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	d1c2      	bne.n	8005936 <_printf_float+0x332>
 80059b0:	e683      	b.n	80056ba <_printf_float+0xb6>
 80059b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059b4:	2a01      	cmp	r2, #1
 80059b6:	dc01      	bgt.n	80059bc <_printf_float+0x3b8>
 80059b8:	07db      	lsls	r3, r3, #31
 80059ba:	d539      	bpl.n	8005a30 <_printf_float+0x42c>
 80059bc:	2301      	movs	r3, #1
 80059be:	4642      	mov	r2, r8
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f ae77 	beq.w	80056ba <_printf_float+0xb6>
 80059cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059d0:	4631      	mov	r1, r6
 80059d2:	4628      	mov	r0, r5
 80059d4:	47b8      	blx	r7
 80059d6:	3001      	adds	r0, #1
 80059d8:	f43f ae6f 	beq.w	80056ba <_printf_float+0xb6>
 80059dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059e0:	2200      	movs	r2, #0
 80059e2:	2300      	movs	r3, #0
 80059e4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80059e8:	f7fa ffde 	bl	80009a8 <__aeabi_dcmpeq>
 80059ec:	b9d8      	cbnz	r0, 8005a26 <_printf_float+0x422>
 80059ee:	f109 33ff 	add.w	r3, r9, #4294967295
 80059f2:	f108 0201 	add.w	r2, r8, #1
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	d10e      	bne.n	8005a1e <_printf_float+0x41a>
 8005a00:	e65b      	b.n	80056ba <_printf_float+0xb6>
 8005a02:	2301      	movs	r3, #1
 8005a04:	464a      	mov	r2, r9
 8005a06:	4631      	mov	r1, r6
 8005a08:	4628      	mov	r0, r5
 8005a0a:	47b8      	blx	r7
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f43f ae54 	beq.w	80056ba <_printf_float+0xb6>
 8005a12:	f108 0801 	add.w	r8, r8, #1
 8005a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	4543      	cmp	r3, r8
 8005a1c:	dcf1      	bgt.n	8005a02 <_printf_float+0x3fe>
 8005a1e:	4653      	mov	r3, sl
 8005a20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a24:	e6de      	b.n	80057e4 <_printf_float+0x1e0>
 8005a26:	f04f 0800 	mov.w	r8, #0
 8005a2a:	f104 091a 	add.w	r9, r4, #26
 8005a2e:	e7f2      	b.n	8005a16 <_printf_float+0x412>
 8005a30:	2301      	movs	r3, #1
 8005a32:	4642      	mov	r2, r8
 8005a34:	e7df      	b.n	80059f6 <_printf_float+0x3f2>
 8005a36:	2301      	movs	r3, #1
 8005a38:	464a      	mov	r2, r9
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	47b8      	blx	r7
 8005a40:	3001      	adds	r0, #1
 8005a42:	f43f ae3a 	beq.w	80056ba <_printf_float+0xb6>
 8005a46:	f108 0801 	add.w	r8, r8, #1
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a4e:	1a5b      	subs	r3, r3, r1
 8005a50:	4543      	cmp	r3, r8
 8005a52:	dcf0      	bgt.n	8005a36 <_printf_float+0x432>
 8005a54:	e6fb      	b.n	800584e <_printf_float+0x24a>
 8005a56:	f04f 0800 	mov.w	r8, #0
 8005a5a:	f104 0919 	add.w	r9, r4, #25
 8005a5e:	e7f4      	b.n	8005a4a <_printf_float+0x446>

08005a60 <_printf_common>:
 8005a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a64:	4616      	mov	r6, r2
 8005a66:	4699      	mov	r9, r3
 8005a68:	688a      	ldr	r2, [r1, #8]
 8005a6a:	690b      	ldr	r3, [r1, #16]
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	bfb8      	it	lt
 8005a72:	4613      	movlt	r3, r2
 8005a74:	6033      	str	r3, [r6, #0]
 8005a76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a80:	b10a      	cbz	r2, 8005a86 <_printf_common+0x26>
 8005a82:	3301      	adds	r3, #1
 8005a84:	6033      	str	r3, [r6, #0]
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	0699      	lsls	r1, r3, #26
 8005a8a:	bf42      	ittt	mi
 8005a8c:	6833      	ldrmi	r3, [r6, #0]
 8005a8e:	3302      	addmi	r3, #2
 8005a90:	6033      	strmi	r3, [r6, #0]
 8005a92:	6825      	ldr	r5, [r4, #0]
 8005a94:	f015 0506 	ands.w	r5, r5, #6
 8005a98:	d106      	bne.n	8005aa8 <_printf_common+0x48>
 8005a9a:	f104 0a19 	add.w	sl, r4, #25
 8005a9e:	68e3      	ldr	r3, [r4, #12]
 8005aa0:	6832      	ldr	r2, [r6, #0]
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	42ab      	cmp	r3, r5
 8005aa6:	dc2b      	bgt.n	8005b00 <_printf_common+0xa0>
 8005aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005aac:	1e13      	subs	r3, r2, #0
 8005aae:	6822      	ldr	r2, [r4, #0]
 8005ab0:	bf18      	it	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	0692      	lsls	r2, r2, #26
 8005ab6:	d430      	bmi.n	8005b1a <_printf_common+0xba>
 8005ab8:	4649      	mov	r1, r9
 8005aba:	4638      	mov	r0, r7
 8005abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac0:	47c0      	blx	r8
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d023      	beq.n	8005b0e <_printf_common+0xae>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	6922      	ldr	r2, [r4, #16]
 8005aca:	f003 0306 	and.w	r3, r3, #6
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	bf14      	ite	ne
 8005ad2:	2500      	movne	r5, #0
 8005ad4:	6833      	ldreq	r3, [r6, #0]
 8005ad6:	f04f 0600 	mov.w	r6, #0
 8005ada:	bf08      	it	eq
 8005adc:	68e5      	ldreq	r5, [r4, #12]
 8005ade:	f104 041a 	add.w	r4, r4, #26
 8005ae2:	bf08      	it	eq
 8005ae4:	1aed      	subeq	r5, r5, r3
 8005ae6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005aea:	bf08      	it	eq
 8005aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af0:	4293      	cmp	r3, r2
 8005af2:	bfc4      	itt	gt
 8005af4:	1a9b      	subgt	r3, r3, r2
 8005af6:	18ed      	addgt	r5, r5, r3
 8005af8:	42b5      	cmp	r5, r6
 8005afa:	d11a      	bne.n	8005b32 <_printf_common+0xd2>
 8005afc:	2000      	movs	r0, #0
 8005afe:	e008      	b.n	8005b12 <_printf_common+0xb2>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4652      	mov	r2, sl
 8005b04:	4649      	mov	r1, r9
 8005b06:	4638      	mov	r0, r7
 8005b08:	47c0      	blx	r8
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d103      	bne.n	8005b16 <_printf_common+0xb6>
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b16:	3501      	adds	r5, #1
 8005b18:	e7c1      	b.n	8005a9e <_printf_common+0x3e>
 8005b1a:	2030      	movs	r0, #48	; 0x30
 8005b1c:	18e1      	adds	r1, r4, r3
 8005b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b28:	4422      	add	r2, r4
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b30:	e7c2      	b.n	8005ab8 <_printf_common+0x58>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4622      	mov	r2, r4
 8005b36:	4649      	mov	r1, r9
 8005b38:	4638      	mov	r0, r7
 8005b3a:	47c0      	blx	r8
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d0e6      	beq.n	8005b0e <_printf_common+0xae>
 8005b40:	3601      	adds	r6, #1
 8005b42:	e7d9      	b.n	8005af8 <_printf_common+0x98>

08005b44 <_printf_i>:
 8005b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b48:	7e0f      	ldrb	r7, [r1, #24]
 8005b4a:	4691      	mov	r9, r2
 8005b4c:	2f78      	cmp	r7, #120	; 0x78
 8005b4e:	4680      	mov	r8, r0
 8005b50:	460c      	mov	r4, r1
 8005b52:	469a      	mov	sl, r3
 8005b54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b5a:	d807      	bhi.n	8005b6c <_printf_i+0x28>
 8005b5c:	2f62      	cmp	r7, #98	; 0x62
 8005b5e:	d80a      	bhi.n	8005b76 <_printf_i+0x32>
 8005b60:	2f00      	cmp	r7, #0
 8005b62:	f000 80d5 	beq.w	8005d10 <_printf_i+0x1cc>
 8005b66:	2f58      	cmp	r7, #88	; 0x58
 8005b68:	f000 80c1 	beq.w	8005cee <_printf_i+0x1aa>
 8005b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b74:	e03a      	b.n	8005bec <_printf_i+0xa8>
 8005b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b7a:	2b15      	cmp	r3, #21
 8005b7c:	d8f6      	bhi.n	8005b6c <_printf_i+0x28>
 8005b7e:	a101      	add	r1, pc, #4	; (adr r1, 8005b84 <_printf_i+0x40>)
 8005b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b84:	08005bdd 	.word	0x08005bdd
 8005b88:	08005bf1 	.word	0x08005bf1
 8005b8c:	08005b6d 	.word	0x08005b6d
 8005b90:	08005b6d 	.word	0x08005b6d
 8005b94:	08005b6d 	.word	0x08005b6d
 8005b98:	08005b6d 	.word	0x08005b6d
 8005b9c:	08005bf1 	.word	0x08005bf1
 8005ba0:	08005b6d 	.word	0x08005b6d
 8005ba4:	08005b6d 	.word	0x08005b6d
 8005ba8:	08005b6d 	.word	0x08005b6d
 8005bac:	08005b6d 	.word	0x08005b6d
 8005bb0:	08005cf7 	.word	0x08005cf7
 8005bb4:	08005c1d 	.word	0x08005c1d
 8005bb8:	08005cb1 	.word	0x08005cb1
 8005bbc:	08005b6d 	.word	0x08005b6d
 8005bc0:	08005b6d 	.word	0x08005b6d
 8005bc4:	08005d19 	.word	0x08005d19
 8005bc8:	08005b6d 	.word	0x08005b6d
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	08005b6d 	.word	0x08005b6d
 8005bd4:	08005b6d 	.word	0x08005b6d
 8005bd8:	08005cb9 	.word	0x08005cb9
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	1d1a      	adds	r2, r3, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	602a      	str	r2, [r5, #0]
 8005be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0a0      	b.n	8005d32 <_printf_i+0x1ee>
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	682b      	ldr	r3, [r5, #0]
 8005bf4:	0607      	lsls	r7, r0, #24
 8005bf6:	f103 0104 	add.w	r1, r3, #4
 8005bfa:	6029      	str	r1, [r5, #0]
 8005bfc:	d501      	bpl.n	8005c02 <_printf_i+0xbe>
 8005bfe:	681e      	ldr	r6, [r3, #0]
 8005c00:	e003      	b.n	8005c0a <_printf_i+0xc6>
 8005c02:	0646      	lsls	r6, r0, #25
 8005c04:	d5fb      	bpl.n	8005bfe <_printf_i+0xba>
 8005c06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c0a:	2e00      	cmp	r6, #0
 8005c0c:	da03      	bge.n	8005c16 <_printf_i+0xd2>
 8005c0e:	232d      	movs	r3, #45	; 0x2d
 8005c10:	4276      	negs	r6, r6
 8005c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c16:	230a      	movs	r3, #10
 8005c18:	4859      	ldr	r0, [pc, #356]	; (8005d80 <_printf_i+0x23c>)
 8005c1a:	e012      	b.n	8005c42 <_printf_i+0xfe>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	6029      	str	r1, [r5, #0]
 8005c24:	0605      	lsls	r5, r0, #24
 8005c26:	d501      	bpl.n	8005c2c <_printf_i+0xe8>
 8005c28:	681e      	ldr	r6, [r3, #0]
 8005c2a:	e002      	b.n	8005c32 <_printf_i+0xee>
 8005c2c:	0641      	lsls	r1, r0, #25
 8005c2e:	d5fb      	bpl.n	8005c28 <_printf_i+0xe4>
 8005c30:	881e      	ldrh	r6, [r3, #0]
 8005c32:	2f6f      	cmp	r7, #111	; 0x6f
 8005c34:	bf0c      	ite	eq
 8005c36:	2308      	moveq	r3, #8
 8005c38:	230a      	movne	r3, #10
 8005c3a:	4851      	ldr	r0, [pc, #324]	; (8005d80 <_printf_i+0x23c>)
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c42:	6865      	ldr	r5, [r4, #4]
 8005c44:	2d00      	cmp	r5, #0
 8005c46:	bfa8      	it	ge
 8005c48:	6821      	ldrge	r1, [r4, #0]
 8005c4a:	60a5      	str	r5, [r4, #8]
 8005c4c:	bfa4      	itt	ge
 8005c4e:	f021 0104 	bicge.w	r1, r1, #4
 8005c52:	6021      	strge	r1, [r4, #0]
 8005c54:	b90e      	cbnz	r6, 8005c5a <_printf_i+0x116>
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	d04b      	beq.n	8005cf2 <_printf_i+0x1ae>
 8005c5a:	4615      	mov	r5, r2
 8005c5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c60:	fb03 6711 	mls	r7, r3, r1, r6
 8005c64:	5dc7      	ldrb	r7, [r0, r7]
 8005c66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c6a:	4637      	mov	r7, r6
 8005c6c:	42bb      	cmp	r3, r7
 8005c6e:	460e      	mov	r6, r1
 8005c70:	d9f4      	bls.n	8005c5c <_printf_i+0x118>
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d10b      	bne.n	8005c8e <_printf_i+0x14a>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	07de      	lsls	r6, r3, #31
 8005c7a:	d508      	bpl.n	8005c8e <_printf_i+0x14a>
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	6861      	ldr	r1, [r4, #4]
 8005c80:	4299      	cmp	r1, r3
 8005c82:	bfde      	ittt	le
 8005c84:	2330      	movle	r3, #48	; 0x30
 8005c86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c8e:	1b52      	subs	r2, r2, r5
 8005c90:	6122      	str	r2, [r4, #16]
 8005c92:	464b      	mov	r3, r9
 8005c94:	4621      	mov	r1, r4
 8005c96:	4640      	mov	r0, r8
 8005c98:	f8cd a000 	str.w	sl, [sp]
 8005c9c:	aa03      	add	r2, sp, #12
 8005c9e:	f7ff fedf 	bl	8005a60 <_printf_common>
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d14a      	bne.n	8005d3c <_printf_i+0x1f8>
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	b004      	add	sp, #16
 8005cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	f043 0320 	orr.w	r3, r3, #32
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	2778      	movs	r7, #120	; 0x78
 8005cba:	4832      	ldr	r0, [pc, #200]	; (8005d84 <_printf_i+0x240>)
 8005cbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	6829      	ldr	r1, [r5, #0]
 8005cc4:	061f      	lsls	r7, r3, #24
 8005cc6:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cca:	d402      	bmi.n	8005cd2 <_printf_i+0x18e>
 8005ccc:	065f      	lsls	r7, r3, #25
 8005cce:	bf48      	it	mi
 8005cd0:	b2b6      	uxthmi	r6, r6
 8005cd2:	07df      	lsls	r7, r3, #31
 8005cd4:	bf48      	it	mi
 8005cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cda:	6029      	str	r1, [r5, #0]
 8005cdc:	bf48      	it	mi
 8005cde:	6023      	strmi	r3, [r4, #0]
 8005ce0:	b91e      	cbnz	r6, 8005cea <_printf_i+0x1a6>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	f023 0320 	bic.w	r3, r3, #32
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	2310      	movs	r3, #16
 8005cec:	e7a6      	b.n	8005c3c <_printf_i+0xf8>
 8005cee:	4824      	ldr	r0, [pc, #144]	; (8005d80 <_printf_i+0x23c>)
 8005cf0:	e7e4      	b.n	8005cbc <_printf_i+0x178>
 8005cf2:	4615      	mov	r5, r2
 8005cf4:	e7bd      	b.n	8005c72 <_printf_i+0x12e>
 8005cf6:	682b      	ldr	r3, [r5, #0]
 8005cf8:	6826      	ldr	r6, [r4, #0]
 8005cfa:	1d18      	adds	r0, r3, #4
 8005cfc:	6961      	ldr	r1, [r4, #20]
 8005cfe:	6028      	str	r0, [r5, #0]
 8005d00:	0635      	lsls	r5, r6, #24
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	d501      	bpl.n	8005d0a <_printf_i+0x1c6>
 8005d06:	6019      	str	r1, [r3, #0]
 8005d08:	e002      	b.n	8005d10 <_printf_i+0x1cc>
 8005d0a:	0670      	lsls	r0, r6, #25
 8005d0c:	d5fb      	bpl.n	8005d06 <_printf_i+0x1c2>
 8005d0e:	8019      	strh	r1, [r3, #0]
 8005d10:	2300      	movs	r3, #0
 8005d12:	4615      	mov	r5, r2
 8005d14:	6123      	str	r3, [r4, #16]
 8005d16:	e7bc      	b.n	8005c92 <_printf_i+0x14e>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	1d1a      	adds	r2, r3, #4
 8005d1e:	602a      	str	r2, [r5, #0]
 8005d20:	681d      	ldr	r5, [r3, #0]
 8005d22:	6862      	ldr	r2, [r4, #4]
 8005d24:	4628      	mov	r0, r5
 8005d26:	f000 f9d4 	bl	80060d2 <memchr>
 8005d2a:	b108      	cbz	r0, 8005d30 <_printf_i+0x1ec>
 8005d2c:	1b40      	subs	r0, r0, r5
 8005d2e:	6060      	str	r0, [r4, #4]
 8005d30:	6863      	ldr	r3, [r4, #4]
 8005d32:	6123      	str	r3, [r4, #16]
 8005d34:	2300      	movs	r3, #0
 8005d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d3a:	e7aa      	b.n	8005c92 <_printf_i+0x14e>
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4640      	mov	r0, r8
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	47d0      	blx	sl
 8005d46:	3001      	adds	r0, #1
 8005d48:	d0ad      	beq.n	8005ca6 <_printf_i+0x162>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	079b      	lsls	r3, r3, #30
 8005d4e:	d413      	bmi.n	8005d78 <_printf_i+0x234>
 8005d50:	68e0      	ldr	r0, [r4, #12]
 8005d52:	9b03      	ldr	r3, [sp, #12]
 8005d54:	4298      	cmp	r0, r3
 8005d56:	bfb8      	it	lt
 8005d58:	4618      	movlt	r0, r3
 8005d5a:	e7a6      	b.n	8005caa <_printf_i+0x166>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4632      	mov	r2, r6
 8005d60:	4649      	mov	r1, r9
 8005d62:	4640      	mov	r0, r8
 8005d64:	47d0      	blx	sl
 8005d66:	3001      	adds	r0, #1
 8005d68:	d09d      	beq.n	8005ca6 <_printf_i+0x162>
 8005d6a:	3501      	adds	r5, #1
 8005d6c:	68e3      	ldr	r3, [r4, #12]
 8005d6e:	9903      	ldr	r1, [sp, #12]
 8005d70:	1a5b      	subs	r3, r3, r1
 8005d72:	42ab      	cmp	r3, r5
 8005d74:	dcf2      	bgt.n	8005d5c <_printf_i+0x218>
 8005d76:	e7eb      	b.n	8005d50 <_printf_i+0x20c>
 8005d78:	2500      	movs	r5, #0
 8005d7a:	f104 0619 	add.w	r6, r4, #25
 8005d7e:	e7f5      	b.n	8005d6c <_printf_i+0x228>
 8005d80:	080091f9 	.word	0x080091f9
 8005d84:	0800920a 	.word	0x0800920a

08005d88 <std>:
 8005d88:	2300      	movs	r3, #0
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d96:	6083      	str	r3, [r0, #8]
 8005d98:	8181      	strh	r1, [r0, #12]
 8005d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d9c:	81c2      	strh	r2, [r0, #14]
 8005d9e:	6183      	str	r3, [r0, #24]
 8005da0:	4619      	mov	r1, r3
 8005da2:	2208      	movs	r2, #8
 8005da4:	305c      	adds	r0, #92	; 0x5c
 8005da6:	f000 f914 	bl	8005fd2 <memset>
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <std+0x58>)
 8005dac:	6224      	str	r4, [r4, #32]
 8005dae:	6263      	str	r3, [r4, #36]	; 0x24
 8005db0:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <std+0x5c>)
 8005db2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005db4:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <std+0x60>)
 8005db6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005db8:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <std+0x64>)
 8005dba:	6323      	str	r3, [r4, #48]	; 0x30
 8005dbc:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <std+0x68>)
 8005dbe:	429c      	cmp	r4, r3
 8005dc0:	d006      	beq.n	8005dd0 <std+0x48>
 8005dc2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005dc6:	4294      	cmp	r4, r2
 8005dc8:	d002      	beq.n	8005dd0 <std+0x48>
 8005dca:	33d0      	adds	r3, #208	; 0xd0
 8005dcc:	429c      	cmp	r4, r3
 8005dce:	d105      	bne.n	8005ddc <std+0x54>
 8005dd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd8:	f000 b978 	b.w	80060cc <__retarget_lock_init_recursive>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	bf00      	nop
 8005de0:	08005f4d 	.word	0x08005f4d
 8005de4:	08005f6f 	.word	0x08005f6f
 8005de8:	08005fa7 	.word	0x08005fa7
 8005dec:	08005fcb 	.word	0x08005fcb
 8005df0:	20000884 	.word	0x20000884

08005df4 <stdio_exit_handler>:
 8005df4:	4a02      	ldr	r2, [pc, #8]	; (8005e00 <stdio_exit_handler+0xc>)
 8005df6:	4903      	ldr	r1, [pc, #12]	; (8005e04 <stdio_exit_handler+0x10>)
 8005df8:	4803      	ldr	r0, [pc, #12]	; (8005e08 <stdio_exit_handler+0x14>)
 8005dfa:	f000 b869 	b.w	8005ed0 <_fwalk_sglue>
 8005dfe:	bf00      	nop
 8005e00:	20000014 	.word	0x20000014
 8005e04:	08007a65 	.word	0x08007a65
 8005e08:	20000020 	.word	0x20000020

08005e0c <cleanup_stdio>:
 8005e0c:	6841      	ldr	r1, [r0, #4]
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <cleanup_stdio+0x34>)
 8005e10:	b510      	push	{r4, lr}
 8005e12:	4299      	cmp	r1, r3
 8005e14:	4604      	mov	r4, r0
 8005e16:	d001      	beq.n	8005e1c <cleanup_stdio+0x10>
 8005e18:	f001 fe24 	bl	8007a64 <_fflush_r>
 8005e1c:	68a1      	ldr	r1, [r4, #8]
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <cleanup_stdio+0x38>)
 8005e20:	4299      	cmp	r1, r3
 8005e22:	d002      	beq.n	8005e2a <cleanup_stdio+0x1e>
 8005e24:	4620      	mov	r0, r4
 8005e26:	f001 fe1d 	bl	8007a64 <_fflush_r>
 8005e2a:	68e1      	ldr	r1, [r4, #12]
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <cleanup_stdio+0x3c>)
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	d004      	beq.n	8005e3c <cleanup_stdio+0x30>
 8005e32:	4620      	mov	r0, r4
 8005e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e38:	f001 be14 	b.w	8007a64 <_fflush_r>
 8005e3c:	bd10      	pop	{r4, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000884 	.word	0x20000884
 8005e44:	200008ec 	.word	0x200008ec
 8005e48:	20000954 	.word	0x20000954

08005e4c <global_stdio_init.part.0>:
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <global_stdio_init.part.0+0x30>)
 8005e50:	4c0b      	ldr	r4, [pc, #44]	; (8005e80 <global_stdio_init.part.0+0x34>)
 8005e52:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <global_stdio_init.part.0+0x38>)
 8005e54:	4620      	mov	r0, r4
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	2104      	movs	r1, #4
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f7ff ff94 	bl	8005d88 <std>
 8005e60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e64:	2201      	movs	r2, #1
 8005e66:	2109      	movs	r1, #9
 8005e68:	f7ff ff8e 	bl	8005d88 <std>
 8005e6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e70:	2202      	movs	r2, #2
 8005e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e76:	2112      	movs	r1, #18
 8005e78:	f7ff bf86 	b.w	8005d88 <std>
 8005e7c:	200009bc 	.word	0x200009bc
 8005e80:	20000884 	.word	0x20000884
 8005e84:	08005df5 	.word	0x08005df5

08005e88 <__sfp_lock_acquire>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__sfp_lock_acquire+0x8>)
 8005e8a:	f000 b920 	b.w	80060ce <__retarget_lock_acquire_recursive>
 8005e8e:	bf00      	nop
 8005e90:	200009c5 	.word	0x200009c5

08005e94 <__sfp_lock_release>:
 8005e94:	4801      	ldr	r0, [pc, #4]	; (8005e9c <__sfp_lock_release+0x8>)
 8005e96:	f000 b91b 	b.w	80060d0 <__retarget_lock_release_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	200009c5 	.word	0x200009c5

08005ea0 <__sinit>:
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	f7ff fff0 	bl	8005e88 <__sfp_lock_acquire>
 8005ea8:	6a23      	ldr	r3, [r4, #32]
 8005eaa:	b11b      	cbz	r3, 8005eb4 <__sinit+0x14>
 8005eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb0:	f7ff bff0 	b.w	8005e94 <__sfp_lock_release>
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <__sinit+0x28>)
 8005eb6:	6223      	str	r3, [r4, #32]
 8005eb8:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <__sinit+0x2c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f5      	bne.n	8005eac <__sinit+0xc>
 8005ec0:	f7ff ffc4 	bl	8005e4c <global_stdio_init.part.0>
 8005ec4:	e7f2      	b.n	8005eac <__sinit+0xc>
 8005ec6:	bf00      	nop
 8005ec8:	08005e0d 	.word	0x08005e0d
 8005ecc:	200009bc 	.word	0x200009bc

08005ed0 <_fwalk_sglue>:
 8005ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	4688      	mov	r8, r1
 8005ed8:	4614      	mov	r4, r2
 8005eda:	2600      	movs	r6, #0
 8005edc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ee0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ee4:	d505      	bpl.n	8005ef2 <_fwalk_sglue+0x22>
 8005ee6:	6824      	ldr	r4, [r4, #0]
 8005ee8:	2c00      	cmp	r4, #0
 8005eea:	d1f7      	bne.n	8005edc <_fwalk_sglue+0xc>
 8005eec:	4630      	mov	r0, r6
 8005eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d907      	bls.n	8005f08 <_fwalk_sglue+0x38>
 8005ef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005efc:	3301      	adds	r3, #1
 8005efe:	d003      	beq.n	8005f08 <_fwalk_sglue+0x38>
 8005f00:	4629      	mov	r1, r5
 8005f02:	4638      	mov	r0, r7
 8005f04:	47c0      	blx	r8
 8005f06:	4306      	orrs	r6, r0
 8005f08:	3568      	adds	r5, #104	; 0x68
 8005f0a:	e7e9      	b.n	8005ee0 <_fwalk_sglue+0x10>

08005f0c <siprintf>:
 8005f0c:	b40e      	push	{r1, r2, r3}
 8005f0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f12:	b500      	push	{lr}
 8005f14:	b09c      	sub	sp, #112	; 0x70
 8005f16:	ab1d      	add	r3, sp, #116	; 0x74
 8005f18:	9002      	str	r0, [sp, #8]
 8005f1a:	9006      	str	r0, [sp, #24]
 8005f1c:	9107      	str	r1, [sp, #28]
 8005f1e:	9104      	str	r1, [sp, #16]
 8005f20:	4808      	ldr	r0, [pc, #32]	; (8005f44 <siprintf+0x38>)
 8005f22:	4909      	ldr	r1, [pc, #36]	; (8005f48 <siprintf+0x3c>)
 8005f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f28:	9105      	str	r1, [sp, #20]
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	a902      	add	r1, sp, #8
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	f001 fc18 	bl	8007764 <_svfiprintf_r>
 8005f34:	2200      	movs	r2, #0
 8005f36:	9b02      	ldr	r3, [sp, #8]
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	b01c      	add	sp, #112	; 0x70
 8005f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f40:	b003      	add	sp, #12
 8005f42:	4770      	bx	lr
 8005f44:	2000006c 	.word	0x2000006c
 8005f48:	ffff0208 	.word	0xffff0208

08005f4c <__sread>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	460c      	mov	r4, r1
 8005f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f54:	f000 f86c 	bl	8006030 <_read_r>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	bfab      	itete	ge
 8005f5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f60:	181b      	addge	r3, r3, r0
 8005f62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f66:	bfac      	ite	ge
 8005f68:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f6a:	81a3      	strhlt	r3, [r4, #12]
 8005f6c:	bd10      	pop	{r4, pc}

08005f6e <__swrite>:
 8005f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	461f      	mov	r7, r3
 8005f74:	898b      	ldrh	r3, [r1, #12]
 8005f76:	4605      	mov	r5, r0
 8005f78:	05db      	lsls	r3, r3, #23
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	4616      	mov	r6, r2
 8005f7e:	d505      	bpl.n	8005f8c <__swrite+0x1e>
 8005f80:	2302      	movs	r3, #2
 8005f82:	2200      	movs	r2, #0
 8005f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f88:	f000 f840 	bl	800600c <_lseek_r>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	4632      	mov	r2, r6
 8005f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f94:	81a3      	strh	r3, [r4, #12]
 8005f96:	4628      	mov	r0, r5
 8005f98:	463b      	mov	r3, r7
 8005f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa2:	f000 b857 	b.w	8006054 <_write_r>

08005fa6 <__sseek>:
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	460c      	mov	r4, r1
 8005faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fae:	f000 f82d 	bl	800600c <_lseek_r>
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	bf15      	itete	ne
 8005fb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fc2:	81a3      	strheq	r3, [r4, #12]
 8005fc4:	bf18      	it	ne
 8005fc6:	81a3      	strhne	r3, [r4, #12]
 8005fc8:	bd10      	pop	{r4, pc}

08005fca <__sclose>:
 8005fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fce:	f000 b80d 	b.w	8005fec <_close_r>

08005fd2 <memset>:
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4402      	add	r2, r0
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d100      	bne.n	8005fdc <memset+0xa>
 8005fda:	4770      	bx	lr
 8005fdc:	f803 1b01 	strb.w	r1, [r3], #1
 8005fe0:	e7f9      	b.n	8005fd6 <memset+0x4>
	...

08005fe4 <_localeconv_r>:
 8005fe4:	4800      	ldr	r0, [pc, #0]	; (8005fe8 <_localeconv_r+0x4>)
 8005fe6:	4770      	bx	lr
 8005fe8:	20000160 	.word	0x20000160

08005fec <_close_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	2300      	movs	r3, #0
 8005ff0:	4d05      	ldr	r5, [pc, #20]	; (8006008 <_close_r+0x1c>)
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	f7fc fa14 	bl	8002424 <_close>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_close_r+0x1a>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_close_r+0x1a>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	200009c0 	.word	0x200009c0

0800600c <_lseek_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	2200      	movs	r2, #0
 8006016:	4d05      	ldr	r5, [pc, #20]	; (800602c <_lseek_r+0x20>)
 8006018:	602a      	str	r2, [r5, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	f7fc fa26 	bl	800246c <_lseek>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d102      	bne.n	800602a <_lseek_r+0x1e>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b103      	cbz	r3, 800602a <_lseek_r+0x1e>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	200009c0 	.word	0x200009c0

08006030 <_read_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	2200      	movs	r2, #0
 800603a:	4d05      	ldr	r5, [pc, #20]	; (8006050 <_read_r+0x20>)
 800603c:	602a      	str	r2, [r5, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	f7fc f9b7 	bl	80023b2 <_read>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d102      	bne.n	800604e <_read_r+0x1e>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	b103      	cbz	r3, 800604e <_read_r+0x1e>
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	200009c0 	.word	0x200009c0

08006054 <_write_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4604      	mov	r4, r0
 8006058:	4608      	mov	r0, r1
 800605a:	4611      	mov	r1, r2
 800605c:	2200      	movs	r2, #0
 800605e:	4d05      	ldr	r5, [pc, #20]	; (8006074 <_write_r+0x20>)
 8006060:	602a      	str	r2, [r5, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	f7fc f9c2 	bl	80023ec <_write>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d102      	bne.n	8006072 <_write_r+0x1e>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	b103      	cbz	r3, 8006072 <_write_r+0x1e>
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	200009c0 	.word	0x200009c0

08006078 <__errno>:
 8006078:	4b01      	ldr	r3, [pc, #4]	; (8006080 <__errno+0x8>)
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	2000006c 	.word	0x2000006c

08006084 <__libc_init_array>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	2600      	movs	r6, #0
 8006088:	4d0c      	ldr	r5, [pc, #48]	; (80060bc <__libc_init_array+0x38>)
 800608a:	4c0d      	ldr	r4, [pc, #52]	; (80060c0 <__libc_init_array+0x3c>)
 800608c:	1b64      	subs	r4, r4, r5
 800608e:	10a4      	asrs	r4, r4, #2
 8006090:	42a6      	cmp	r6, r4
 8006092:	d109      	bne.n	80060a8 <__libc_init_array+0x24>
 8006094:	f002 ff8e 	bl	8008fb4 <_init>
 8006098:	2600      	movs	r6, #0
 800609a:	4d0a      	ldr	r5, [pc, #40]	; (80060c4 <__libc_init_array+0x40>)
 800609c:	4c0a      	ldr	r4, [pc, #40]	; (80060c8 <__libc_init_array+0x44>)
 800609e:	1b64      	subs	r4, r4, r5
 80060a0:	10a4      	asrs	r4, r4, #2
 80060a2:	42a6      	cmp	r6, r4
 80060a4:	d105      	bne.n	80060b2 <__libc_init_array+0x2e>
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ac:	4798      	blx	r3
 80060ae:	3601      	adds	r6, #1
 80060b0:	e7ee      	b.n	8006090 <__libc_init_array+0xc>
 80060b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b6:	4798      	blx	r3
 80060b8:	3601      	adds	r6, #1
 80060ba:	e7f2      	b.n	80060a2 <__libc_init_array+0x1e>
 80060bc:	08009490 	.word	0x08009490
 80060c0:	08009490 	.word	0x08009490
 80060c4:	08009490 	.word	0x08009490
 80060c8:	08009494 	.word	0x08009494

080060cc <__retarget_lock_init_recursive>:
 80060cc:	4770      	bx	lr

080060ce <__retarget_lock_acquire_recursive>:
 80060ce:	4770      	bx	lr

080060d0 <__retarget_lock_release_recursive>:
 80060d0:	4770      	bx	lr

080060d2 <memchr>:
 80060d2:	4603      	mov	r3, r0
 80060d4:	b510      	push	{r4, lr}
 80060d6:	b2c9      	uxtb	r1, r1
 80060d8:	4402      	add	r2, r0
 80060da:	4293      	cmp	r3, r2
 80060dc:	4618      	mov	r0, r3
 80060de:	d101      	bne.n	80060e4 <memchr+0x12>
 80060e0:	2000      	movs	r0, #0
 80060e2:	e003      	b.n	80060ec <memchr+0x1a>
 80060e4:	7804      	ldrb	r4, [r0, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	428c      	cmp	r4, r1
 80060ea:	d1f6      	bne.n	80060da <memchr+0x8>
 80060ec:	bd10      	pop	{r4, pc}

080060ee <quorem>:
 80060ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f2:	6903      	ldr	r3, [r0, #16]
 80060f4:	690c      	ldr	r4, [r1, #16]
 80060f6:	4607      	mov	r7, r0
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	db7f      	blt.n	80061fc <quorem+0x10e>
 80060fc:	3c01      	subs	r4, #1
 80060fe:	f100 0514 	add.w	r5, r0, #20
 8006102:	f101 0814 	add.w	r8, r1, #20
 8006106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006110:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006114:	3301      	adds	r3, #1
 8006116:	429a      	cmp	r2, r3
 8006118:	fbb2 f6f3 	udiv	r6, r2, r3
 800611c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006120:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006124:	d331      	bcc.n	800618a <quorem+0x9c>
 8006126:	f04f 0e00 	mov.w	lr, #0
 800612a:	4640      	mov	r0, r8
 800612c:	46ac      	mov	ip, r5
 800612e:	46f2      	mov	sl, lr
 8006130:	f850 2b04 	ldr.w	r2, [r0], #4
 8006134:	b293      	uxth	r3, r2
 8006136:	fb06 e303 	mla	r3, r6, r3, lr
 800613a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800613e:	0c1a      	lsrs	r2, r3, #16
 8006140:	b29b      	uxth	r3, r3
 8006142:	fb06 220e 	mla	r2, r6, lr, r2
 8006146:	ebaa 0303 	sub.w	r3, sl, r3
 800614a:	f8dc a000 	ldr.w	sl, [ip]
 800614e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006152:	fa1f fa8a 	uxth.w	sl, sl
 8006156:	4453      	add	r3, sl
 8006158:	f8dc a000 	ldr.w	sl, [ip]
 800615c:	b292      	uxth	r2, r2
 800615e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006162:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006166:	b29b      	uxth	r3, r3
 8006168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800616c:	4581      	cmp	r9, r0
 800616e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006172:	f84c 3b04 	str.w	r3, [ip], #4
 8006176:	d2db      	bcs.n	8006130 <quorem+0x42>
 8006178:	f855 300b 	ldr.w	r3, [r5, fp]
 800617c:	b92b      	cbnz	r3, 800618a <quorem+0x9c>
 800617e:	9b01      	ldr	r3, [sp, #4]
 8006180:	3b04      	subs	r3, #4
 8006182:	429d      	cmp	r5, r3
 8006184:	461a      	mov	r2, r3
 8006186:	d32d      	bcc.n	80061e4 <quorem+0xf6>
 8006188:	613c      	str	r4, [r7, #16]
 800618a:	4638      	mov	r0, r7
 800618c:	f001 f992 	bl	80074b4 <__mcmp>
 8006190:	2800      	cmp	r0, #0
 8006192:	db23      	blt.n	80061dc <quorem+0xee>
 8006194:	4629      	mov	r1, r5
 8006196:	2000      	movs	r0, #0
 8006198:	3601      	adds	r6, #1
 800619a:	f858 2b04 	ldr.w	r2, [r8], #4
 800619e:	f8d1 c000 	ldr.w	ip, [r1]
 80061a2:	b293      	uxth	r3, r2
 80061a4:	1ac3      	subs	r3, r0, r3
 80061a6:	0c12      	lsrs	r2, r2, #16
 80061a8:	fa1f f08c 	uxth.w	r0, ip
 80061ac:	4403      	add	r3, r0
 80061ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80061b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061bc:	45c1      	cmp	r9, r8
 80061be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061c2:	f841 3b04 	str.w	r3, [r1], #4
 80061c6:	d2e8      	bcs.n	800619a <quorem+0xac>
 80061c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061d0:	b922      	cbnz	r2, 80061dc <quorem+0xee>
 80061d2:	3b04      	subs	r3, #4
 80061d4:	429d      	cmp	r5, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	d30a      	bcc.n	80061f0 <quorem+0x102>
 80061da:	613c      	str	r4, [r7, #16]
 80061dc:	4630      	mov	r0, r6
 80061de:	b003      	add	sp, #12
 80061e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e4:	6812      	ldr	r2, [r2, #0]
 80061e6:	3b04      	subs	r3, #4
 80061e8:	2a00      	cmp	r2, #0
 80061ea:	d1cd      	bne.n	8006188 <quorem+0x9a>
 80061ec:	3c01      	subs	r4, #1
 80061ee:	e7c8      	b.n	8006182 <quorem+0x94>
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	3b04      	subs	r3, #4
 80061f4:	2a00      	cmp	r2, #0
 80061f6:	d1f0      	bne.n	80061da <quorem+0xec>
 80061f8:	3c01      	subs	r4, #1
 80061fa:	e7eb      	b.n	80061d4 <quorem+0xe6>
 80061fc:	2000      	movs	r0, #0
 80061fe:	e7ee      	b.n	80061de <quorem+0xf0>

08006200 <_dtoa_r>:
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	4616      	mov	r6, r2
 8006206:	461f      	mov	r7, r3
 8006208:	69c4      	ldr	r4, [r0, #28]
 800620a:	b099      	sub	sp, #100	; 0x64
 800620c:	4605      	mov	r5, r0
 800620e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006212:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006216:	b974      	cbnz	r4, 8006236 <_dtoa_r+0x36>
 8006218:	2010      	movs	r0, #16
 800621a:	f000 fe1d 	bl	8006e58 <malloc>
 800621e:	4602      	mov	r2, r0
 8006220:	61e8      	str	r0, [r5, #28]
 8006222:	b920      	cbnz	r0, 800622e <_dtoa_r+0x2e>
 8006224:	21ef      	movs	r1, #239	; 0xef
 8006226:	4bac      	ldr	r3, [pc, #688]	; (80064d8 <_dtoa_r+0x2d8>)
 8006228:	48ac      	ldr	r0, [pc, #688]	; (80064dc <_dtoa_r+0x2dc>)
 800622a:	f001 fc7b 	bl	8007b24 <__assert_func>
 800622e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006232:	6004      	str	r4, [r0, #0]
 8006234:	60c4      	str	r4, [r0, #12]
 8006236:	69eb      	ldr	r3, [r5, #28]
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	b151      	cbz	r1, 8006252 <_dtoa_r+0x52>
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	2301      	movs	r3, #1
 8006240:	4093      	lsls	r3, r2
 8006242:	604a      	str	r2, [r1, #4]
 8006244:	608b      	str	r3, [r1, #8]
 8006246:	4628      	mov	r0, r5
 8006248:	f000 fefa 	bl	8007040 <_Bfree>
 800624c:	2200      	movs	r2, #0
 800624e:	69eb      	ldr	r3, [r5, #28]
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	1e3b      	subs	r3, r7, #0
 8006254:	bfaf      	iteee	ge
 8006256:	2300      	movge	r3, #0
 8006258:	2201      	movlt	r2, #1
 800625a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800625e:	9305      	strlt	r3, [sp, #20]
 8006260:	bfa8      	it	ge
 8006262:	f8c8 3000 	strge.w	r3, [r8]
 8006266:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800626a:	4b9d      	ldr	r3, [pc, #628]	; (80064e0 <_dtoa_r+0x2e0>)
 800626c:	bfb8      	it	lt
 800626e:	f8c8 2000 	strlt.w	r2, [r8]
 8006272:	ea33 0309 	bics.w	r3, r3, r9
 8006276:	d119      	bne.n	80062ac <_dtoa_r+0xac>
 8006278:	f242 730f 	movw	r3, #9999	; 0x270f
 800627c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006284:	4333      	orrs	r3, r6
 8006286:	f000 8589 	beq.w	8006d9c <_dtoa_r+0xb9c>
 800628a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800628c:	b953      	cbnz	r3, 80062a4 <_dtoa_r+0xa4>
 800628e:	4b95      	ldr	r3, [pc, #596]	; (80064e4 <_dtoa_r+0x2e4>)
 8006290:	e023      	b.n	80062da <_dtoa_r+0xda>
 8006292:	4b95      	ldr	r3, [pc, #596]	; (80064e8 <_dtoa_r+0x2e8>)
 8006294:	9303      	str	r3, [sp, #12]
 8006296:	3308      	adds	r3, #8
 8006298:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	9803      	ldr	r0, [sp, #12]
 800629e:	b019      	add	sp, #100	; 0x64
 80062a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a4:	4b8f      	ldr	r3, [pc, #572]	; (80064e4 <_dtoa_r+0x2e4>)
 80062a6:	9303      	str	r3, [sp, #12]
 80062a8:	3303      	adds	r3, #3
 80062aa:	e7f5      	b.n	8006298 <_dtoa_r+0x98>
 80062ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80062b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80062b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062b8:	2200      	movs	r2, #0
 80062ba:	2300      	movs	r3, #0
 80062bc:	f7fa fb74 	bl	80009a8 <__aeabi_dcmpeq>
 80062c0:	4680      	mov	r8, r0
 80062c2:	b160      	cbz	r0, 80062de <_dtoa_r+0xde>
 80062c4:	2301      	movs	r3, #1
 80062c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8562 	beq.w	8006d96 <_dtoa_r+0xb96>
 80062d2:	4b86      	ldr	r3, [pc, #536]	; (80064ec <_dtoa_r+0x2ec>)
 80062d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	3b01      	subs	r3, #1
 80062da:	9303      	str	r3, [sp, #12]
 80062dc:	e7de      	b.n	800629c <_dtoa_r+0x9c>
 80062de:	ab16      	add	r3, sp, #88	; 0x58
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	ab17      	add	r3, sp, #92	; 0x5c
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	4628      	mov	r0, r5
 80062e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062ec:	f001 f98a 	bl	8007604 <__d2b>
 80062f0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80062f4:	4682      	mov	sl, r0
 80062f6:	2c00      	cmp	r4, #0
 80062f8:	d07e      	beq.n	80063f8 <_dtoa_r+0x1f8>
 80062fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006300:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006308:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800630c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006310:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006314:	4619      	mov	r1, r3
 8006316:	2200      	movs	r2, #0
 8006318:	4b75      	ldr	r3, [pc, #468]	; (80064f0 <_dtoa_r+0x2f0>)
 800631a:	f7f9 ff25 	bl	8000168 <__aeabi_dsub>
 800631e:	a368      	add	r3, pc, #416	; (adr r3, 80064c0 <_dtoa_r+0x2c0>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7fa f8d8 	bl	80004d8 <__aeabi_dmul>
 8006328:	a367      	add	r3, pc, #412	; (adr r3, 80064c8 <_dtoa_r+0x2c8>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f7f9 ff1d 	bl	800016c <__adddf3>
 8006332:	4606      	mov	r6, r0
 8006334:	4620      	mov	r0, r4
 8006336:	460f      	mov	r7, r1
 8006338:	f7fa f864 	bl	8000404 <__aeabi_i2d>
 800633c:	a364      	add	r3, pc, #400	; (adr r3, 80064d0 <_dtoa_r+0x2d0>)
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f7fa f8c9 	bl	80004d8 <__aeabi_dmul>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4630      	mov	r0, r6
 800634c:	4639      	mov	r1, r7
 800634e:	f7f9 ff0d 	bl	800016c <__adddf3>
 8006352:	4606      	mov	r6, r0
 8006354:	460f      	mov	r7, r1
 8006356:	f7fa fb6f 	bl	8000a38 <__aeabi_d2iz>
 800635a:	2200      	movs	r2, #0
 800635c:	4683      	mov	fp, r0
 800635e:	2300      	movs	r3, #0
 8006360:	4630      	mov	r0, r6
 8006362:	4639      	mov	r1, r7
 8006364:	f7fa fb2a 	bl	80009bc <__aeabi_dcmplt>
 8006368:	b148      	cbz	r0, 800637e <_dtoa_r+0x17e>
 800636a:	4658      	mov	r0, fp
 800636c:	f7fa f84a 	bl	8000404 <__aeabi_i2d>
 8006370:	4632      	mov	r2, r6
 8006372:	463b      	mov	r3, r7
 8006374:	f7fa fb18 	bl	80009a8 <__aeabi_dcmpeq>
 8006378:	b908      	cbnz	r0, 800637e <_dtoa_r+0x17e>
 800637a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800637e:	f1bb 0f16 	cmp.w	fp, #22
 8006382:	d857      	bhi.n	8006434 <_dtoa_r+0x234>
 8006384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006388:	4b5a      	ldr	r3, [pc, #360]	; (80064f4 <_dtoa_r+0x2f4>)
 800638a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7fa fb13 	bl	80009bc <__aeabi_dcmplt>
 8006396:	2800      	cmp	r0, #0
 8006398:	d04e      	beq.n	8006438 <_dtoa_r+0x238>
 800639a:	2300      	movs	r3, #0
 800639c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80063a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80063a4:	1b1b      	subs	r3, r3, r4
 80063a6:	1e5a      	subs	r2, r3, #1
 80063a8:	bf46      	itte	mi
 80063aa:	f1c3 0901 	rsbmi	r9, r3, #1
 80063ae:	2300      	movmi	r3, #0
 80063b0:	f04f 0900 	movpl.w	r9, #0
 80063b4:	9209      	str	r2, [sp, #36]	; 0x24
 80063b6:	bf48      	it	mi
 80063b8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80063ba:	f1bb 0f00 	cmp.w	fp, #0
 80063be:	db3d      	blt.n	800643c <_dtoa_r+0x23c>
 80063c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80063c6:	445b      	add	r3, fp
 80063c8:	9309      	str	r3, [sp, #36]	; 0x24
 80063ca:	2300      	movs	r3, #0
 80063cc:	930a      	str	r3, [sp, #40]	; 0x28
 80063ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063d0:	2b09      	cmp	r3, #9
 80063d2:	d867      	bhi.n	80064a4 <_dtoa_r+0x2a4>
 80063d4:	2b05      	cmp	r3, #5
 80063d6:	bfc4      	itt	gt
 80063d8:	3b04      	subgt	r3, #4
 80063da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80063dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063de:	bfc8      	it	gt
 80063e0:	2400      	movgt	r4, #0
 80063e2:	f1a3 0302 	sub.w	r3, r3, #2
 80063e6:	bfd8      	it	le
 80063e8:	2401      	movle	r4, #1
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	f200 8086 	bhi.w	80064fc <_dtoa_r+0x2fc>
 80063f0:	e8df f003 	tbb	[pc, r3]
 80063f4:	5637392c 	.word	0x5637392c
 80063f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80063fc:	441c      	add	r4, r3
 80063fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006402:	2b20      	cmp	r3, #32
 8006404:	bfc1      	itttt	gt
 8006406:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800640a:	fa09 f903 	lslgt.w	r9, r9, r3
 800640e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006412:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006416:	bfd6      	itet	le
 8006418:	f1c3 0320 	rsble	r3, r3, #32
 800641c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006420:	fa06 f003 	lslle.w	r0, r6, r3
 8006424:	f7f9 ffde 	bl	80003e4 <__aeabi_ui2d>
 8006428:	2201      	movs	r2, #1
 800642a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800642e:	3c01      	subs	r4, #1
 8006430:	9213      	str	r2, [sp, #76]	; 0x4c
 8006432:	e76f      	b.n	8006314 <_dtoa_r+0x114>
 8006434:	2301      	movs	r3, #1
 8006436:	e7b3      	b.n	80063a0 <_dtoa_r+0x1a0>
 8006438:	900f      	str	r0, [sp, #60]	; 0x3c
 800643a:	e7b2      	b.n	80063a2 <_dtoa_r+0x1a2>
 800643c:	f1cb 0300 	rsb	r3, fp, #0
 8006440:	930a      	str	r3, [sp, #40]	; 0x28
 8006442:	2300      	movs	r3, #0
 8006444:	eba9 090b 	sub.w	r9, r9, fp
 8006448:	930e      	str	r3, [sp, #56]	; 0x38
 800644a:	e7c0      	b.n	80063ce <_dtoa_r+0x1ce>
 800644c:	2300      	movs	r3, #0
 800644e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006450:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006452:	2b00      	cmp	r3, #0
 8006454:	dc55      	bgt.n	8006502 <_dtoa_r+0x302>
 8006456:	2301      	movs	r3, #1
 8006458:	461a      	mov	r2, r3
 800645a:	9306      	str	r3, [sp, #24]
 800645c:	9308      	str	r3, [sp, #32]
 800645e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006460:	e00b      	b.n	800647a <_dtoa_r+0x27a>
 8006462:	2301      	movs	r3, #1
 8006464:	e7f3      	b.n	800644e <_dtoa_r+0x24e>
 8006466:	2300      	movs	r3, #0
 8006468:	930b      	str	r3, [sp, #44]	; 0x2c
 800646a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800646c:	445b      	add	r3, fp
 800646e:	9306      	str	r3, [sp, #24]
 8006470:	3301      	adds	r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	9308      	str	r3, [sp, #32]
 8006476:	bfb8      	it	lt
 8006478:	2301      	movlt	r3, #1
 800647a:	2100      	movs	r1, #0
 800647c:	2204      	movs	r2, #4
 800647e:	69e8      	ldr	r0, [r5, #28]
 8006480:	f102 0614 	add.w	r6, r2, #20
 8006484:	429e      	cmp	r6, r3
 8006486:	d940      	bls.n	800650a <_dtoa_r+0x30a>
 8006488:	6041      	str	r1, [r0, #4]
 800648a:	4628      	mov	r0, r5
 800648c:	f000 fd98 	bl	8006fc0 <_Balloc>
 8006490:	9003      	str	r0, [sp, #12]
 8006492:	2800      	cmp	r0, #0
 8006494:	d13c      	bne.n	8006510 <_dtoa_r+0x310>
 8006496:	4602      	mov	r2, r0
 8006498:	f240 11af 	movw	r1, #431	; 0x1af
 800649c:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <_dtoa_r+0x2f8>)
 800649e:	e6c3      	b.n	8006228 <_dtoa_r+0x28>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e7e1      	b.n	8006468 <_dtoa_r+0x268>
 80064a4:	2401      	movs	r4, #1
 80064a6:	2300      	movs	r3, #0
 80064a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80064aa:	9322      	str	r3, [sp, #136]	; 0x88
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
 80064b0:	2200      	movs	r2, #0
 80064b2:	9306      	str	r3, [sp, #24]
 80064b4:	9308      	str	r3, [sp, #32]
 80064b6:	2312      	movs	r3, #18
 80064b8:	e7d1      	b.n	800645e <_dtoa_r+0x25e>
 80064ba:	bf00      	nop
 80064bc:	f3af 8000 	nop.w
 80064c0:	636f4361 	.word	0x636f4361
 80064c4:	3fd287a7 	.word	0x3fd287a7
 80064c8:	8b60c8b3 	.word	0x8b60c8b3
 80064cc:	3fc68a28 	.word	0x3fc68a28
 80064d0:	509f79fb 	.word	0x509f79fb
 80064d4:	3fd34413 	.word	0x3fd34413
 80064d8:	08009228 	.word	0x08009228
 80064dc:	0800923f 	.word	0x0800923f
 80064e0:	7ff00000 	.word	0x7ff00000
 80064e4:	08009224 	.word	0x08009224
 80064e8:	0800921b 	.word	0x0800921b
 80064ec:	080091f8 	.word	0x080091f8
 80064f0:	3ff80000 	.word	0x3ff80000
 80064f4:	08009330 	.word	0x08009330
 80064f8:	08009297 	.word	0x08009297
 80064fc:	2301      	movs	r3, #1
 80064fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006500:	e7d4      	b.n	80064ac <_dtoa_r+0x2ac>
 8006502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006504:	9306      	str	r3, [sp, #24]
 8006506:	9308      	str	r3, [sp, #32]
 8006508:	e7b7      	b.n	800647a <_dtoa_r+0x27a>
 800650a:	3101      	adds	r1, #1
 800650c:	0052      	lsls	r2, r2, #1
 800650e:	e7b7      	b.n	8006480 <_dtoa_r+0x280>
 8006510:	69eb      	ldr	r3, [r5, #28]
 8006512:	9a03      	ldr	r2, [sp, #12]
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	9b08      	ldr	r3, [sp, #32]
 8006518:	2b0e      	cmp	r3, #14
 800651a:	f200 80a8 	bhi.w	800666e <_dtoa_r+0x46e>
 800651e:	2c00      	cmp	r4, #0
 8006520:	f000 80a5 	beq.w	800666e <_dtoa_r+0x46e>
 8006524:	f1bb 0f00 	cmp.w	fp, #0
 8006528:	dd34      	ble.n	8006594 <_dtoa_r+0x394>
 800652a:	4b9a      	ldr	r3, [pc, #616]	; (8006794 <_dtoa_r+0x594>)
 800652c:	f00b 020f 	and.w	r2, fp, #15
 8006530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006534:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006538:	e9d3 3400 	ldrd	r3, r4, [r3]
 800653c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006540:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006544:	d016      	beq.n	8006574 <_dtoa_r+0x374>
 8006546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800654a:	4b93      	ldr	r3, [pc, #588]	; (8006798 <_dtoa_r+0x598>)
 800654c:	2703      	movs	r7, #3
 800654e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006552:	f7fa f8eb 	bl	800072c <__aeabi_ddiv>
 8006556:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800655a:	f004 040f 	and.w	r4, r4, #15
 800655e:	4e8e      	ldr	r6, [pc, #568]	; (8006798 <_dtoa_r+0x598>)
 8006560:	b954      	cbnz	r4, 8006578 <_dtoa_r+0x378>
 8006562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800656a:	f7fa f8df 	bl	800072c <__aeabi_ddiv>
 800656e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006572:	e029      	b.n	80065c8 <_dtoa_r+0x3c8>
 8006574:	2702      	movs	r7, #2
 8006576:	e7f2      	b.n	800655e <_dtoa_r+0x35e>
 8006578:	07e1      	lsls	r1, r4, #31
 800657a:	d508      	bpl.n	800658e <_dtoa_r+0x38e>
 800657c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006580:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006584:	f7f9 ffa8 	bl	80004d8 <__aeabi_dmul>
 8006588:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800658c:	3701      	adds	r7, #1
 800658e:	1064      	asrs	r4, r4, #1
 8006590:	3608      	adds	r6, #8
 8006592:	e7e5      	b.n	8006560 <_dtoa_r+0x360>
 8006594:	f000 80a5 	beq.w	80066e2 <_dtoa_r+0x4e2>
 8006598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800659c:	f1cb 0400 	rsb	r4, fp, #0
 80065a0:	4b7c      	ldr	r3, [pc, #496]	; (8006794 <_dtoa_r+0x594>)
 80065a2:	f004 020f 	and.w	r2, r4, #15
 80065a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7f9 ff93 	bl	80004d8 <__aeabi_dmul>
 80065b2:	2702      	movs	r7, #2
 80065b4:	2300      	movs	r3, #0
 80065b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065ba:	4e77      	ldr	r6, [pc, #476]	; (8006798 <_dtoa_r+0x598>)
 80065bc:	1124      	asrs	r4, r4, #4
 80065be:	2c00      	cmp	r4, #0
 80065c0:	f040 8084 	bne.w	80066cc <_dtoa_r+0x4cc>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1d2      	bne.n	800656e <_dtoa_r+0x36e>
 80065c8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80065cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8087 	beq.w	80066e6 <_dtoa_r+0x4e6>
 80065d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065dc:	2200      	movs	r2, #0
 80065de:	4b6f      	ldr	r3, [pc, #444]	; (800679c <_dtoa_r+0x59c>)
 80065e0:	f7fa f9ec 	bl	80009bc <__aeabi_dcmplt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d07e      	beq.n	80066e6 <_dtoa_r+0x4e6>
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d07b      	beq.n	80066e6 <_dtoa_r+0x4e6>
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dd38      	ble.n	8006666 <_dtoa_r+0x466>
 80065f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065f8:	2200      	movs	r2, #0
 80065fa:	4b69      	ldr	r3, [pc, #420]	; (80067a0 <_dtoa_r+0x5a0>)
 80065fc:	f7f9 ff6c 	bl	80004d8 <__aeabi_dmul>
 8006600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006604:	9c06      	ldr	r4, [sp, #24]
 8006606:	f10b 38ff 	add.w	r8, fp, #4294967295
 800660a:	3701      	adds	r7, #1
 800660c:	4638      	mov	r0, r7
 800660e:	f7f9 fef9 	bl	8000404 <__aeabi_i2d>
 8006612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006616:	f7f9 ff5f 	bl	80004d8 <__aeabi_dmul>
 800661a:	2200      	movs	r2, #0
 800661c:	4b61      	ldr	r3, [pc, #388]	; (80067a4 <_dtoa_r+0x5a4>)
 800661e:	f7f9 fda5 	bl	800016c <__adddf3>
 8006622:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006626:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800662a:	9611      	str	r6, [sp, #68]	; 0x44
 800662c:	2c00      	cmp	r4, #0
 800662e:	d15d      	bne.n	80066ec <_dtoa_r+0x4ec>
 8006630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006634:	2200      	movs	r2, #0
 8006636:	4b5c      	ldr	r3, [pc, #368]	; (80067a8 <_dtoa_r+0x5a8>)
 8006638:	f7f9 fd96 	bl	8000168 <__aeabi_dsub>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006644:	4633      	mov	r3, r6
 8006646:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006648:	f7fa f9d6 	bl	80009f8 <__aeabi_dcmpgt>
 800664c:	2800      	cmp	r0, #0
 800664e:	f040 8295 	bne.w	8006b7c <_dtoa_r+0x97c>
 8006652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006656:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006658:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800665c:	f7fa f9ae 	bl	80009bc <__aeabi_dcmplt>
 8006660:	2800      	cmp	r0, #0
 8006662:	f040 8289 	bne.w	8006b78 <_dtoa_r+0x978>
 8006666:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800666a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800666e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006670:	2b00      	cmp	r3, #0
 8006672:	f2c0 8151 	blt.w	8006918 <_dtoa_r+0x718>
 8006676:	f1bb 0f0e 	cmp.w	fp, #14
 800667a:	f300 814d 	bgt.w	8006918 <_dtoa_r+0x718>
 800667e:	4b45      	ldr	r3, [pc, #276]	; (8006794 <_dtoa_r+0x594>)
 8006680:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006684:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006688:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800668c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800668e:	2b00      	cmp	r3, #0
 8006690:	f280 80da 	bge.w	8006848 <_dtoa_r+0x648>
 8006694:	9b08      	ldr	r3, [sp, #32]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f300 80d6 	bgt.w	8006848 <_dtoa_r+0x648>
 800669c:	f040 826b 	bne.w	8006b76 <_dtoa_r+0x976>
 80066a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066a4:	2200      	movs	r2, #0
 80066a6:	4b40      	ldr	r3, [pc, #256]	; (80067a8 <_dtoa_r+0x5a8>)
 80066a8:	f7f9 ff16 	bl	80004d8 <__aeabi_dmul>
 80066ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b0:	f7fa f998 	bl	80009e4 <__aeabi_dcmpge>
 80066b4:	9c08      	ldr	r4, [sp, #32]
 80066b6:	4626      	mov	r6, r4
 80066b8:	2800      	cmp	r0, #0
 80066ba:	f040 8241 	bne.w	8006b40 <_dtoa_r+0x940>
 80066be:	2331      	movs	r3, #49	; 0x31
 80066c0:	9f03      	ldr	r7, [sp, #12]
 80066c2:	f10b 0b01 	add.w	fp, fp, #1
 80066c6:	f807 3b01 	strb.w	r3, [r7], #1
 80066ca:	e23d      	b.n	8006b48 <_dtoa_r+0x948>
 80066cc:	07e2      	lsls	r2, r4, #31
 80066ce:	d505      	bpl.n	80066dc <_dtoa_r+0x4dc>
 80066d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066d4:	f7f9 ff00 	bl	80004d8 <__aeabi_dmul>
 80066d8:	2301      	movs	r3, #1
 80066da:	3701      	adds	r7, #1
 80066dc:	1064      	asrs	r4, r4, #1
 80066de:	3608      	adds	r6, #8
 80066e0:	e76d      	b.n	80065be <_dtoa_r+0x3be>
 80066e2:	2702      	movs	r7, #2
 80066e4:	e770      	b.n	80065c8 <_dtoa_r+0x3c8>
 80066e6:	46d8      	mov	r8, fp
 80066e8:	9c08      	ldr	r4, [sp, #32]
 80066ea:	e78f      	b.n	800660c <_dtoa_r+0x40c>
 80066ec:	9903      	ldr	r1, [sp, #12]
 80066ee:	4b29      	ldr	r3, [pc, #164]	; (8006794 <_dtoa_r+0x594>)
 80066f0:	4421      	add	r1, r4
 80066f2:	9112      	str	r1, [sp, #72]	; 0x48
 80066f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066fa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80066fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006702:	2900      	cmp	r1, #0
 8006704:	d054      	beq.n	80067b0 <_dtoa_r+0x5b0>
 8006706:	2000      	movs	r0, #0
 8006708:	4928      	ldr	r1, [pc, #160]	; (80067ac <_dtoa_r+0x5ac>)
 800670a:	f7fa f80f 	bl	800072c <__aeabi_ddiv>
 800670e:	463b      	mov	r3, r7
 8006710:	4632      	mov	r2, r6
 8006712:	f7f9 fd29 	bl	8000168 <__aeabi_dsub>
 8006716:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800671a:	9f03      	ldr	r7, [sp, #12]
 800671c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006720:	f7fa f98a 	bl	8000a38 <__aeabi_d2iz>
 8006724:	4604      	mov	r4, r0
 8006726:	f7f9 fe6d 	bl	8000404 <__aeabi_i2d>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006732:	f7f9 fd19 	bl	8000168 <__aeabi_dsub>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	3430      	adds	r4, #48	; 0x30
 800673c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006740:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006744:	f807 4b01 	strb.w	r4, [r7], #1
 8006748:	f7fa f938 	bl	80009bc <__aeabi_dcmplt>
 800674c:	2800      	cmp	r0, #0
 800674e:	d173      	bne.n	8006838 <_dtoa_r+0x638>
 8006750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006754:	2000      	movs	r0, #0
 8006756:	4911      	ldr	r1, [pc, #68]	; (800679c <_dtoa_r+0x59c>)
 8006758:	f7f9 fd06 	bl	8000168 <__aeabi_dsub>
 800675c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006760:	f7fa f92c 	bl	80009bc <__aeabi_dcmplt>
 8006764:	2800      	cmp	r0, #0
 8006766:	f040 80b6 	bne.w	80068d6 <_dtoa_r+0x6d6>
 800676a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800676c:	429f      	cmp	r7, r3
 800676e:	f43f af7a 	beq.w	8006666 <_dtoa_r+0x466>
 8006772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006776:	2200      	movs	r2, #0
 8006778:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <_dtoa_r+0x5a0>)
 800677a:	f7f9 fead 	bl	80004d8 <__aeabi_dmul>
 800677e:	2200      	movs	r2, #0
 8006780:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <_dtoa_r+0x5a0>)
 800678a:	f7f9 fea5 	bl	80004d8 <__aeabi_dmul>
 800678e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006792:	e7c3      	b.n	800671c <_dtoa_r+0x51c>
 8006794:	08009330 	.word	0x08009330
 8006798:	08009308 	.word	0x08009308
 800679c:	3ff00000 	.word	0x3ff00000
 80067a0:	40240000 	.word	0x40240000
 80067a4:	401c0000 	.word	0x401c0000
 80067a8:	40140000 	.word	0x40140000
 80067ac:	3fe00000 	.word	0x3fe00000
 80067b0:	4630      	mov	r0, r6
 80067b2:	4639      	mov	r1, r7
 80067b4:	f7f9 fe90 	bl	80004d8 <__aeabi_dmul>
 80067b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067be:	9c03      	ldr	r4, [sp, #12]
 80067c0:	9314      	str	r3, [sp, #80]	; 0x50
 80067c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067c6:	f7fa f937 	bl	8000a38 <__aeabi_d2iz>
 80067ca:	9015      	str	r0, [sp, #84]	; 0x54
 80067cc:	f7f9 fe1a 	bl	8000404 <__aeabi_i2d>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067d8:	f7f9 fcc6 	bl	8000168 <__aeabi_dsub>
 80067dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067de:	4606      	mov	r6, r0
 80067e0:	3330      	adds	r3, #48	; 0x30
 80067e2:	f804 3b01 	strb.w	r3, [r4], #1
 80067e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067e8:	460f      	mov	r7, r1
 80067ea:	429c      	cmp	r4, r3
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	d124      	bne.n	800683c <_dtoa_r+0x63c>
 80067f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067f6:	4baf      	ldr	r3, [pc, #700]	; (8006ab4 <_dtoa_r+0x8b4>)
 80067f8:	f7f9 fcb8 	bl	800016c <__adddf3>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4630      	mov	r0, r6
 8006802:	4639      	mov	r1, r7
 8006804:	f7fa f8f8 	bl	80009f8 <__aeabi_dcmpgt>
 8006808:	2800      	cmp	r0, #0
 800680a:	d163      	bne.n	80068d4 <_dtoa_r+0x6d4>
 800680c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006810:	2000      	movs	r0, #0
 8006812:	49a8      	ldr	r1, [pc, #672]	; (8006ab4 <_dtoa_r+0x8b4>)
 8006814:	f7f9 fca8 	bl	8000168 <__aeabi_dsub>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4630      	mov	r0, r6
 800681e:	4639      	mov	r1, r7
 8006820:	f7fa f8cc 	bl	80009bc <__aeabi_dcmplt>
 8006824:	2800      	cmp	r0, #0
 8006826:	f43f af1e 	beq.w	8006666 <_dtoa_r+0x466>
 800682a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800682c:	1e7b      	subs	r3, r7, #1
 800682e:	9314      	str	r3, [sp, #80]	; 0x50
 8006830:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	d0f8      	beq.n	800682a <_dtoa_r+0x62a>
 8006838:	46c3      	mov	fp, r8
 800683a:	e03b      	b.n	80068b4 <_dtoa_r+0x6b4>
 800683c:	4b9e      	ldr	r3, [pc, #632]	; (8006ab8 <_dtoa_r+0x8b8>)
 800683e:	f7f9 fe4b 	bl	80004d8 <__aeabi_dmul>
 8006842:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006846:	e7bc      	b.n	80067c2 <_dtoa_r+0x5c2>
 8006848:	9f03      	ldr	r7, [sp, #12]
 800684a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800684e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006852:	4640      	mov	r0, r8
 8006854:	4649      	mov	r1, r9
 8006856:	f7f9 ff69 	bl	800072c <__aeabi_ddiv>
 800685a:	f7fa f8ed 	bl	8000a38 <__aeabi_d2iz>
 800685e:	4604      	mov	r4, r0
 8006860:	f7f9 fdd0 	bl	8000404 <__aeabi_i2d>
 8006864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006868:	f7f9 fe36 	bl	80004d8 <__aeabi_dmul>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4640      	mov	r0, r8
 8006872:	4649      	mov	r1, r9
 8006874:	f7f9 fc78 	bl	8000168 <__aeabi_dsub>
 8006878:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800687c:	f807 6b01 	strb.w	r6, [r7], #1
 8006880:	9e03      	ldr	r6, [sp, #12]
 8006882:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006886:	1bbe      	subs	r6, r7, r6
 8006888:	45b4      	cmp	ip, r6
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	d136      	bne.n	80068fe <_dtoa_r+0x6fe>
 8006890:	f7f9 fc6c 	bl	800016c <__adddf3>
 8006894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006898:	4680      	mov	r8, r0
 800689a:	4689      	mov	r9, r1
 800689c:	f7fa f8ac 	bl	80009f8 <__aeabi_dcmpgt>
 80068a0:	bb58      	cbnz	r0, 80068fa <_dtoa_r+0x6fa>
 80068a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7fa f87d 	bl	80009a8 <__aeabi_dcmpeq>
 80068ae:	b108      	cbz	r0, 80068b4 <_dtoa_r+0x6b4>
 80068b0:	07e3      	lsls	r3, r4, #31
 80068b2:	d422      	bmi.n	80068fa <_dtoa_r+0x6fa>
 80068b4:	4651      	mov	r1, sl
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fbc2 	bl	8007040 <_Bfree>
 80068bc:	2300      	movs	r3, #0
 80068be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068c0:	703b      	strb	r3, [r7, #0]
 80068c2:	f10b 0301 	add.w	r3, fp, #1
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f43f ace6 	beq.w	800629c <_dtoa_r+0x9c>
 80068d0:	601f      	str	r7, [r3, #0]
 80068d2:	e4e3      	b.n	800629c <_dtoa_r+0x9c>
 80068d4:	4627      	mov	r7, r4
 80068d6:	463b      	mov	r3, r7
 80068d8:	461f      	mov	r7, r3
 80068da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068de:	2a39      	cmp	r2, #57	; 0x39
 80068e0:	d107      	bne.n	80068f2 <_dtoa_r+0x6f2>
 80068e2:	9a03      	ldr	r2, [sp, #12]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d1f7      	bne.n	80068d8 <_dtoa_r+0x6d8>
 80068e8:	2230      	movs	r2, #48	; 0x30
 80068ea:	9903      	ldr	r1, [sp, #12]
 80068ec:	f108 0801 	add.w	r8, r8, #1
 80068f0:	700a      	strb	r2, [r1, #0]
 80068f2:	781a      	ldrb	r2, [r3, #0]
 80068f4:	3201      	adds	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	e79e      	b.n	8006838 <_dtoa_r+0x638>
 80068fa:	46d8      	mov	r8, fp
 80068fc:	e7eb      	b.n	80068d6 <_dtoa_r+0x6d6>
 80068fe:	2200      	movs	r2, #0
 8006900:	4b6d      	ldr	r3, [pc, #436]	; (8006ab8 <_dtoa_r+0x8b8>)
 8006902:	f7f9 fde9 	bl	80004d8 <__aeabi_dmul>
 8006906:	2200      	movs	r2, #0
 8006908:	2300      	movs	r3, #0
 800690a:	4680      	mov	r8, r0
 800690c:	4689      	mov	r9, r1
 800690e:	f7fa f84b 	bl	80009a8 <__aeabi_dcmpeq>
 8006912:	2800      	cmp	r0, #0
 8006914:	d09b      	beq.n	800684e <_dtoa_r+0x64e>
 8006916:	e7cd      	b.n	80068b4 <_dtoa_r+0x6b4>
 8006918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800691a:	2a00      	cmp	r2, #0
 800691c:	f000 80c4 	beq.w	8006aa8 <_dtoa_r+0x8a8>
 8006920:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006922:	2a01      	cmp	r2, #1
 8006924:	f300 80a8 	bgt.w	8006a78 <_dtoa_r+0x878>
 8006928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800692a:	2a00      	cmp	r2, #0
 800692c:	f000 80a0 	beq.w	8006a70 <_dtoa_r+0x870>
 8006930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006934:	464f      	mov	r7, r9
 8006936:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800693a:	2101      	movs	r1, #1
 800693c:	441a      	add	r2, r3
 800693e:	4628      	mov	r0, r5
 8006940:	4499      	add	r9, r3
 8006942:	9209      	str	r2, [sp, #36]	; 0x24
 8006944:	f000 fc32 	bl	80071ac <__i2b>
 8006948:	4606      	mov	r6, r0
 800694a:	b15f      	cbz	r7, 8006964 <_dtoa_r+0x764>
 800694c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694e:	2b00      	cmp	r3, #0
 8006950:	dd08      	ble.n	8006964 <_dtoa_r+0x764>
 8006952:	42bb      	cmp	r3, r7
 8006954:	bfa8      	it	ge
 8006956:	463b      	movge	r3, r7
 8006958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800695a:	eba9 0903 	sub.w	r9, r9, r3
 800695e:	1aff      	subs	r7, r7, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	9309      	str	r3, [sp, #36]	; 0x24
 8006964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006966:	b1f3      	cbz	r3, 80069a6 <_dtoa_r+0x7a6>
 8006968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 80a0 	beq.w	8006ab0 <_dtoa_r+0x8b0>
 8006970:	2c00      	cmp	r4, #0
 8006972:	dd10      	ble.n	8006996 <_dtoa_r+0x796>
 8006974:	4631      	mov	r1, r6
 8006976:	4622      	mov	r2, r4
 8006978:	4628      	mov	r0, r5
 800697a:	f000 fcd5 	bl	8007328 <__pow5mult>
 800697e:	4652      	mov	r2, sl
 8006980:	4601      	mov	r1, r0
 8006982:	4606      	mov	r6, r0
 8006984:	4628      	mov	r0, r5
 8006986:	f000 fc27 	bl	80071d8 <__multiply>
 800698a:	4680      	mov	r8, r0
 800698c:	4651      	mov	r1, sl
 800698e:	4628      	mov	r0, r5
 8006990:	f000 fb56 	bl	8007040 <_Bfree>
 8006994:	46c2      	mov	sl, r8
 8006996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006998:	1b1a      	subs	r2, r3, r4
 800699a:	d004      	beq.n	80069a6 <_dtoa_r+0x7a6>
 800699c:	4651      	mov	r1, sl
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 fcc2 	bl	8007328 <__pow5mult>
 80069a4:	4682      	mov	sl, r0
 80069a6:	2101      	movs	r1, #1
 80069a8:	4628      	mov	r0, r5
 80069aa:	f000 fbff 	bl	80071ac <__i2b>
 80069ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069b0:	4604      	mov	r4, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f340 8082 	ble.w	8006abc <_dtoa_r+0x8bc>
 80069b8:	461a      	mov	r2, r3
 80069ba:	4601      	mov	r1, r0
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 fcb3 	bl	8007328 <__pow5mult>
 80069c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069c4:	4604      	mov	r4, r0
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	dd7b      	ble.n	8006ac2 <_dtoa_r+0x8c2>
 80069ca:	f04f 0800 	mov.w	r8, #0
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069d4:	6918      	ldr	r0, [r3, #16]
 80069d6:	f000 fb9b 	bl	8007110 <__hi0bits>
 80069da:	f1c0 0020 	rsb	r0, r0, #32
 80069de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e0:	4418      	add	r0, r3
 80069e2:	f010 001f 	ands.w	r0, r0, #31
 80069e6:	f000 8092 	beq.w	8006b0e <_dtoa_r+0x90e>
 80069ea:	f1c0 0320 	rsb	r3, r0, #32
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	f340 8085 	ble.w	8006afe <_dtoa_r+0x8fe>
 80069f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f6:	f1c0 001c 	rsb	r0, r0, #28
 80069fa:	4403      	add	r3, r0
 80069fc:	4481      	add	r9, r0
 80069fe:	4407      	add	r7, r0
 8006a00:	9309      	str	r3, [sp, #36]	; 0x24
 8006a02:	f1b9 0f00 	cmp.w	r9, #0
 8006a06:	dd05      	ble.n	8006a14 <_dtoa_r+0x814>
 8006a08:	4651      	mov	r1, sl
 8006a0a:	464a      	mov	r2, r9
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 fce5 	bl	80073dc <__lshift>
 8006a12:	4682      	mov	sl, r0
 8006a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	dd05      	ble.n	8006a26 <_dtoa_r+0x826>
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 fcdc 	bl	80073dc <__lshift>
 8006a24:	4604      	mov	r4, r0
 8006a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d072      	beq.n	8006b12 <_dtoa_r+0x912>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4650      	mov	r0, sl
 8006a30:	f000 fd40 	bl	80074b4 <__mcmp>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	da6c      	bge.n	8006b12 <_dtoa_r+0x912>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4651      	mov	r1, sl
 8006a3c:	220a      	movs	r2, #10
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 fb20 	bl	8007084 <__multadd>
 8006a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a46:	4682      	mov	sl, r0
 8006a48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 81ac 	beq.w	8006daa <_dtoa_r+0xbaa>
 8006a52:	2300      	movs	r3, #0
 8006a54:	4631      	mov	r1, r6
 8006a56:	220a      	movs	r2, #10
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 fb13 	bl	8007084 <__multadd>
 8006a5e:	9b06      	ldr	r3, [sp, #24]
 8006a60:	4606      	mov	r6, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f300 8093 	bgt.w	8006b8e <_dtoa_r+0x98e>
 8006a68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	dc59      	bgt.n	8006b22 <_dtoa_r+0x922>
 8006a6e:	e08e      	b.n	8006b8e <_dtoa_r+0x98e>
 8006a70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a76:	e75d      	b.n	8006934 <_dtoa_r+0x734>
 8006a78:	9b08      	ldr	r3, [sp, #32]
 8006a7a:	1e5c      	subs	r4, r3, #1
 8006a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a7e:	42a3      	cmp	r3, r4
 8006a80:	bfbf      	itttt	lt
 8006a82:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a84:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006a86:	1ae3      	sublt	r3, r4, r3
 8006a88:	18d2      	addlt	r2, r2, r3
 8006a8a:	bfa8      	it	ge
 8006a8c:	1b1c      	subge	r4, r3, r4
 8006a8e:	9b08      	ldr	r3, [sp, #32]
 8006a90:	bfbe      	ittt	lt
 8006a92:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006a94:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006a96:	2400      	movlt	r4, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	bfb5      	itete	lt
 8006a9c:	eba9 0703 	sublt.w	r7, r9, r3
 8006aa0:	464f      	movge	r7, r9
 8006aa2:	2300      	movlt	r3, #0
 8006aa4:	9b08      	ldrge	r3, [sp, #32]
 8006aa6:	e747      	b.n	8006938 <_dtoa_r+0x738>
 8006aa8:	464f      	mov	r7, r9
 8006aaa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006aac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006aae:	e74c      	b.n	800694a <_dtoa_r+0x74a>
 8006ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ab2:	e773      	b.n	800699c <_dtoa_r+0x79c>
 8006ab4:	3fe00000 	.word	0x3fe00000
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	dc18      	bgt.n	8006af4 <_dtoa_r+0x8f4>
 8006ac2:	9b04      	ldr	r3, [sp, #16]
 8006ac4:	b9b3      	cbnz	r3, 8006af4 <_dtoa_r+0x8f4>
 8006ac6:	9b05      	ldr	r3, [sp, #20]
 8006ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006acc:	b993      	cbnz	r3, 8006af4 <_dtoa_r+0x8f4>
 8006ace:	9b05      	ldr	r3, [sp, #20]
 8006ad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	0d1b      	lsrs	r3, r3, #20
 8006ad6:	051b      	lsls	r3, r3, #20
 8006ad8:	b17b      	cbz	r3, 8006afa <_dtoa_r+0x8fa>
 8006ada:	f04f 0801 	mov.w	r8, #1
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	f109 0901 	add.w	r9, r9, #1
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f47f af6f 	bne.w	80069ce <_dtoa_r+0x7ce>
 8006af0:	2001      	movs	r0, #1
 8006af2:	e774      	b.n	80069de <_dtoa_r+0x7de>
 8006af4:	f04f 0800 	mov.w	r8, #0
 8006af8:	e7f6      	b.n	8006ae8 <_dtoa_r+0x8e8>
 8006afa:	4698      	mov	r8, r3
 8006afc:	e7f4      	b.n	8006ae8 <_dtoa_r+0x8e8>
 8006afe:	d080      	beq.n	8006a02 <_dtoa_r+0x802>
 8006b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b02:	331c      	adds	r3, #28
 8006b04:	441a      	add	r2, r3
 8006b06:	4499      	add	r9, r3
 8006b08:	441f      	add	r7, r3
 8006b0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b0c:	e779      	b.n	8006a02 <_dtoa_r+0x802>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	e7f6      	b.n	8006b00 <_dtoa_r+0x900>
 8006b12:	9b08      	ldr	r3, [sp, #32]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dc34      	bgt.n	8006b82 <_dtoa_r+0x982>
 8006b18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	dd31      	ble.n	8006b82 <_dtoa_r+0x982>
 8006b1e:	9b08      	ldr	r3, [sp, #32]
 8006b20:	9306      	str	r3, [sp, #24]
 8006b22:	9b06      	ldr	r3, [sp, #24]
 8006b24:	b963      	cbnz	r3, 8006b40 <_dtoa_r+0x940>
 8006b26:	4621      	mov	r1, r4
 8006b28:	2205      	movs	r2, #5
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 faaa 	bl	8007084 <__multadd>
 8006b30:	4601      	mov	r1, r0
 8006b32:	4604      	mov	r4, r0
 8006b34:	4650      	mov	r0, sl
 8006b36:	f000 fcbd 	bl	80074b4 <__mcmp>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f73f adbf 	bgt.w	80066be <_dtoa_r+0x4be>
 8006b40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b42:	9f03      	ldr	r7, [sp, #12]
 8006b44:	ea6f 0b03 	mvn.w	fp, r3
 8006b48:	f04f 0800 	mov.w	r8, #0
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 fa76 	bl	8007040 <_Bfree>
 8006b54:	2e00      	cmp	r6, #0
 8006b56:	f43f aead 	beq.w	80068b4 <_dtoa_r+0x6b4>
 8006b5a:	f1b8 0f00 	cmp.w	r8, #0
 8006b5e:	d005      	beq.n	8006b6c <_dtoa_r+0x96c>
 8006b60:	45b0      	cmp	r8, r6
 8006b62:	d003      	beq.n	8006b6c <_dtoa_r+0x96c>
 8006b64:	4641      	mov	r1, r8
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 fa6a 	bl	8007040 <_Bfree>
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 fa66 	bl	8007040 <_Bfree>
 8006b74:	e69e      	b.n	80068b4 <_dtoa_r+0x6b4>
 8006b76:	2400      	movs	r4, #0
 8006b78:	4626      	mov	r6, r4
 8006b7a:	e7e1      	b.n	8006b40 <_dtoa_r+0x940>
 8006b7c:	46c3      	mov	fp, r8
 8006b7e:	4626      	mov	r6, r4
 8006b80:	e59d      	b.n	80066be <_dtoa_r+0x4be>
 8006b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80c8 	beq.w	8006d1a <_dtoa_r+0xb1a>
 8006b8a:	9b08      	ldr	r3, [sp, #32]
 8006b8c:	9306      	str	r3, [sp, #24]
 8006b8e:	2f00      	cmp	r7, #0
 8006b90:	dd05      	ble.n	8006b9e <_dtoa_r+0x99e>
 8006b92:	4631      	mov	r1, r6
 8006b94:	463a      	mov	r2, r7
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fc20 	bl	80073dc <__lshift>
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	f1b8 0f00 	cmp.w	r8, #0
 8006ba2:	d05b      	beq.n	8006c5c <_dtoa_r+0xa5c>
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	6871      	ldr	r1, [r6, #4]
 8006ba8:	f000 fa0a 	bl	8006fc0 <_Balloc>
 8006bac:	4607      	mov	r7, r0
 8006bae:	b928      	cbnz	r0, 8006bbc <_dtoa_r+0x9bc>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006bb6:	4b81      	ldr	r3, [pc, #516]	; (8006dbc <_dtoa_r+0xbbc>)
 8006bb8:	f7ff bb36 	b.w	8006228 <_dtoa_r+0x28>
 8006bbc:	6932      	ldr	r2, [r6, #16]
 8006bbe:	f106 010c 	add.w	r1, r6, #12
 8006bc2:	3202      	adds	r2, #2
 8006bc4:	0092      	lsls	r2, r2, #2
 8006bc6:	300c      	adds	r0, #12
 8006bc8:	f000 ff9e 	bl	8007b08 <memcpy>
 8006bcc:	2201      	movs	r2, #1
 8006bce:	4639      	mov	r1, r7
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 fc03 	bl	80073dc <__lshift>
 8006bd6:	46b0      	mov	r8, r6
 8006bd8:	4606      	mov	r6, r0
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	9a03      	ldr	r2, [sp, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	9308      	str	r3, [sp, #32]
 8006be2:	9b06      	ldr	r3, [sp, #24]
 8006be4:	4413      	add	r3, r2
 8006be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006be8:	9b04      	ldr	r3, [sp, #16]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	9304      	str	r3, [sp, #16]
 8006bfa:	f7ff fa78 	bl	80060ee <quorem>
 8006bfe:	4641      	mov	r1, r8
 8006c00:	9006      	str	r0, [sp, #24]
 8006c02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c06:	4650      	mov	r0, sl
 8006c08:	f000 fc54 	bl	80074b4 <__mcmp>
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	9009      	str	r0, [sp, #36]	; 0x24
 8006c10:	4621      	mov	r1, r4
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 fc6a 	bl	80074ec <__mdiff>
 8006c18:	68c2      	ldr	r2, [r0, #12]
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	bb02      	cbnz	r2, 8006c60 <_dtoa_r+0xa60>
 8006c1e:	4601      	mov	r1, r0
 8006c20:	4650      	mov	r0, sl
 8006c22:	f000 fc47 	bl	80074b4 <__mcmp>
 8006c26:	4602      	mov	r2, r0
 8006c28:	4639      	mov	r1, r7
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	920c      	str	r2, [sp, #48]	; 0x30
 8006c2e:	f000 fa07 	bl	8007040 <_Bfree>
 8006c32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c36:	9f08      	ldr	r7, [sp, #32]
 8006c38:	ea43 0102 	orr.w	r1, r3, r2
 8006c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3e:	4319      	orrs	r1, r3
 8006c40:	d110      	bne.n	8006c64 <_dtoa_r+0xa64>
 8006c42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c46:	d029      	beq.n	8006c9c <_dtoa_r+0xa9c>
 8006c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	dd02      	ble.n	8006c54 <_dtoa_r+0xa54>
 8006c4e:	9b06      	ldr	r3, [sp, #24]
 8006c50:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	f883 9000 	strb.w	r9, [r3]
 8006c5a:	e777      	b.n	8006b4c <_dtoa_r+0x94c>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	e7ba      	b.n	8006bd6 <_dtoa_r+0x9d6>
 8006c60:	2201      	movs	r2, #1
 8006c62:	e7e1      	b.n	8006c28 <_dtoa_r+0xa28>
 8006c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	db04      	blt.n	8006c74 <_dtoa_r+0xa74>
 8006c6a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c70:	430b      	orrs	r3, r1
 8006c72:	d120      	bne.n	8006cb6 <_dtoa_r+0xab6>
 8006c74:	2a00      	cmp	r2, #0
 8006c76:	dded      	ble.n	8006c54 <_dtoa_r+0xa54>
 8006c78:	4651      	mov	r1, sl
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f000 fbad 	bl	80073dc <__lshift>
 8006c82:	4621      	mov	r1, r4
 8006c84:	4682      	mov	sl, r0
 8006c86:	f000 fc15 	bl	80074b4 <__mcmp>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	dc03      	bgt.n	8006c96 <_dtoa_r+0xa96>
 8006c8e:	d1e1      	bne.n	8006c54 <_dtoa_r+0xa54>
 8006c90:	f019 0f01 	tst.w	r9, #1
 8006c94:	d0de      	beq.n	8006c54 <_dtoa_r+0xa54>
 8006c96:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c9a:	d1d8      	bne.n	8006c4e <_dtoa_r+0xa4e>
 8006c9c:	2339      	movs	r3, #57	; 0x39
 8006c9e:	9a04      	ldr	r2, [sp, #16]
 8006ca0:	7013      	strb	r3, [r2, #0]
 8006ca2:	463b      	mov	r3, r7
 8006ca4:	461f      	mov	r7, r3
 8006ca6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	2a39      	cmp	r2, #57	; 0x39
 8006cae:	d06b      	beq.n	8006d88 <_dtoa_r+0xb88>
 8006cb0:	3201      	adds	r2, #1
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	e74a      	b.n	8006b4c <_dtoa_r+0x94c>
 8006cb6:	2a00      	cmp	r2, #0
 8006cb8:	dd07      	ble.n	8006cca <_dtoa_r+0xaca>
 8006cba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cbe:	d0ed      	beq.n	8006c9c <_dtoa_r+0xa9c>
 8006cc0:	9a04      	ldr	r2, [sp, #16]
 8006cc2:	f109 0301 	add.w	r3, r9, #1
 8006cc6:	7013      	strb	r3, [r2, #0]
 8006cc8:	e740      	b.n	8006b4c <_dtoa_r+0x94c>
 8006cca:	9b08      	ldr	r3, [sp, #32]
 8006ccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cce:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d042      	beq.n	8006d5c <_dtoa_r+0xb5c>
 8006cd6:	4651      	mov	r1, sl
 8006cd8:	2300      	movs	r3, #0
 8006cda:	220a      	movs	r2, #10
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 f9d1 	bl	8007084 <__multadd>
 8006ce2:	45b0      	cmp	r8, r6
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	f04f 020a 	mov.w	r2, #10
 8006cee:	4641      	mov	r1, r8
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	d107      	bne.n	8006d04 <_dtoa_r+0xb04>
 8006cf4:	f000 f9c6 	bl	8007084 <__multadd>
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	9b08      	ldr	r3, [sp, #32]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	e775      	b.n	8006bf0 <_dtoa_r+0x9f0>
 8006d04:	f000 f9be 	bl	8007084 <__multadd>
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	220a      	movs	r2, #10
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 f9b7 	bl	8007084 <__multadd>
 8006d16:	4606      	mov	r6, r0
 8006d18:	e7f0      	b.n	8006cfc <_dtoa_r+0xafc>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	9306      	str	r3, [sp, #24]
 8006d1e:	9f03      	ldr	r7, [sp, #12]
 8006d20:	4621      	mov	r1, r4
 8006d22:	4650      	mov	r0, sl
 8006d24:	f7ff f9e3 	bl	80060ee <quorem>
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d2e:	f807 9b01 	strb.w	r9, [r7], #1
 8006d32:	1afa      	subs	r2, r7, r3
 8006d34:	9b06      	ldr	r3, [sp, #24]
 8006d36:	4293      	cmp	r3, r2
 8006d38:	dd07      	ble.n	8006d4a <_dtoa_r+0xb4a>
 8006d3a:	4651      	mov	r1, sl
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	220a      	movs	r2, #10
 8006d40:	4628      	mov	r0, r5
 8006d42:	f000 f99f 	bl	8007084 <__multadd>
 8006d46:	4682      	mov	sl, r0
 8006d48:	e7ea      	b.n	8006d20 <_dtoa_r+0xb20>
 8006d4a:	9b06      	ldr	r3, [sp, #24]
 8006d4c:	f04f 0800 	mov.w	r8, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bfcc      	ite	gt
 8006d54:	461f      	movgt	r7, r3
 8006d56:	2701      	movle	r7, #1
 8006d58:	9b03      	ldr	r3, [sp, #12]
 8006d5a:	441f      	add	r7, r3
 8006d5c:	4651      	mov	r1, sl
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4628      	mov	r0, r5
 8006d62:	f000 fb3b 	bl	80073dc <__lshift>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4682      	mov	sl, r0
 8006d6a:	f000 fba3 	bl	80074b4 <__mcmp>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	dc97      	bgt.n	8006ca2 <_dtoa_r+0xaa2>
 8006d72:	d102      	bne.n	8006d7a <_dtoa_r+0xb7a>
 8006d74:	f019 0f01 	tst.w	r9, #1
 8006d78:	d193      	bne.n	8006ca2 <_dtoa_r+0xaa2>
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	461f      	mov	r7, r3
 8006d7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d82:	2a30      	cmp	r2, #48	; 0x30
 8006d84:	d0fa      	beq.n	8006d7c <_dtoa_r+0xb7c>
 8006d86:	e6e1      	b.n	8006b4c <_dtoa_r+0x94c>
 8006d88:	9a03      	ldr	r2, [sp, #12]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d18a      	bne.n	8006ca4 <_dtoa_r+0xaa4>
 8006d8e:	2331      	movs	r3, #49	; 0x31
 8006d90:	f10b 0b01 	add.w	fp, fp, #1
 8006d94:	e797      	b.n	8006cc6 <_dtoa_r+0xac6>
 8006d96:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <_dtoa_r+0xbc0>)
 8006d98:	f7ff ba9f 	b.w	80062da <_dtoa_r+0xda>
 8006d9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f47f aa77 	bne.w	8006292 <_dtoa_r+0x92>
 8006da4:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <_dtoa_r+0xbc4>)
 8006da6:	f7ff ba98 	b.w	80062da <_dtoa_r+0xda>
 8006daa:	9b06      	ldr	r3, [sp, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dcb6      	bgt.n	8006d1e <_dtoa_r+0xb1e>
 8006db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	f73f aeb5 	bgt.w	8006b22 <_dtoa_r+0x922>
 8006db8:	e7b1      	b.n	8006d1e <_dtoa_r+0xb1e>
 8006dba:	bf00      	nop
 8006dbc:	08009297 	.word	0x08009297
 8006dc0:	080091f7 	.word	0x080091f7
 8006dc4:	0800921b 	.word	0x0800921b

08006dc8 <_free_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4605      	mov	r5, r0
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	d040      	beq.n	8006e52 <_free_r+0x8a>
 8006dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd4:	1f0c      	subs	r4, r1, #4
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bfb8      	it	lt
 8006dda:	18e4      	addlt	r4, r4, r3
 8006ddc:	f000 f8e4 	bl	8006fa8 <__malloc_lock>
 8006de0:	4a1c      	ldr	r2, [pc, #112]	; (8006e54 <_free_r+0x8c>)
 8006de2:	6813      	ldr	r3, [r2, #0]
 8006de4:	b933      	cbnz	r3, 8006df4 <_free_r+0x2c>
 8006de6:	6063      	str	r3, [r4, #4]
 8006de8:	6014      	str	r4, [r2, #0]
 8006dea:	4628      	mov	r0, r5
 8006dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006df0:	f000 b8e0 	b.w	8006fb4 <__malloc_unlock>
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	d908      	bls.n	8006e0a <_free_r+0x42>
 8006df8:	6820      	ldr	r0, [r4, #0]
 8006dfa:	1821      	adds	r1, r4, r0
 8006dfc:	428b      	cmp	r3, r1
 8006dfe:	bf01      	itttt	eq
 8006e00:	6819      	ldreq	r1, [r3, #0]
 8006e02:	685b      	ldreq	r3, [r3, #4]
 8006e04:	1809      	addeq	r1, r1, r0
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	e7ed      	b.n	8006de6 <_free_r+0x1e>
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	b10b      	cbz	r3, 8006e14 <_free_r+0x4c>
 8006e10:	42a3      	cmp	r3, r4
 8006e12:	d9fa      	bls.n	8006e0a <_free_r+0x42>
 8006e14:	6811      	ldr	r1, [r2, #0]
 8006e16:	1850      	adds	r0, r2, r1
 8006e18:	42a0      	cmp	r0, r4
 8006e1a:	d10b      	bne.n	8006e34 <_free_r+0x6c>
 8006e1c:	6820      	ldr	r0, [r4, #0]
 8006e1e:	4401      	add	r1, r0
 8006e20:	1850      	adds	r0, r2, r1
 8006e22:	4283      	cmp	r3, r0
 8006e24:	6011      	str	r1, [r2, #0]
 8006e26:	d1e0      	bne.n	8006dea <_free_r+0x22>
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4408      	add	r0, r1
 8006e2e:	6010      	str	r0, [r2, #0]
 8006e30:	6053      	str	r3, [r2, #4]
 8006e32:	e7da      	b.n	8006dea <_free_r+0x22>
 8006e34:	d902      	bls.n	8006e3c <_free_r+0x74>
 8006e36:	230c      	movs	r3, #12
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	e7d6      	b.n	8006dea <_free_r+0x22>
 8006e3c:	6820      	ldr	r0, [r4, #0]
 8006e3e:	1821      	adds	r1, r4, r0
 8006e40:	428b      	cmp	r3, r1
 8006e42:	bf01      	itttt	eq
 8006e44:	6819      	ldreq	r1, [r3, #0]
 8006e46:	685b      	ldreq	r3, [r3, #4]
 8006e48:	1809      	addeq	r1, r1, r0
 8006e4a:	6021      	streq	r1, [r4, #0]
 8006e4c:	6063      	str	r3, [r4, #4]
 8006e4e:	6054      	str	r4, [r2, #4]
 8006e50:	e7cb      	b.n	8006dea <_free_r+0x22>
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	200009c8 	.word	0x200009c8

08006e58 <malloc>:
 8006e58:	4b02      	ldr	r3, [pc, #8]	; (8006e64 <malloc+0xc>)
 8006e5a:	4601      	mov	r1, r0
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	f000 b823 	b.w	8006ea8 <_malloc_r>
 8006e62:	bf00      	nop
 8006e64:	2000006c 	.word	0x2000006c

08006e68 <sbrk_aligned>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	4e0e      	ldr	r6, [pc, #56]	; (8006ea4 <sbrk_aligned+0x3c>)
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	6831      	ldr	r1, [r6, #0]
 8006e70:	4605      	mov	r5, r0
 8006e72:	b911      	cbnz	r1, 8006e7a <sbrk_aligned+0x12>
 8006e74:	f000 fe38 	bl	8007ae8 <_sbrk_r>
 8006e78:	6030      	str	r0, [r6, #0]
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f000 fe33 	bl	8007ae8 <_sbrk_r>
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	d00a      	beq.n	8006e9c <sbrk_aligned+0x34>
 8006e86:	1cc4      	adds	r4, r0, #3
 8006e88:	f024 0403 	bic.w	r4, r4, #3
 8006e8c:	42a0      	cmp	r0, r4
 8006e8e:	d007      	beq.n	8006ea0 <sbrk_aligned+0x38>
 8006e90:	1a21      	subs	r1, r4, r0
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 fe28 	bl	8007ae8 <_sbrk_r>
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d101      	bne.n	8006ea0 <sbrk_aligned+0x38>
 8006e9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	200009cc 	.word	0x200009cc

08006ea8 <_malloc_r>:
 8006ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eac:	1ccd      	adds	r5, r1, #3
 8006eae:	f025 0503 	bic.w	r5, r5, #3
 8006eb2:	3508      	adds	r5, #8
 8006eb4:	2d0c      	cmp	r5, #12
 8006eb6:	bf38      	it	cc
 8006eb8:	250c      	movcc	r5, #12
 8006eba:	2d00      	cmp	r5, #0
 8006ebc:	4607      	mov	r7, r0
 8006ebe:	db01      	blt.n	8006ec4 <_malloc_r+0x1c>
 8006ec0:	42a9      	cmp	r1, r5
 8006ec2:	d905      	bls.n	8006ed0 <_malloc_r+0x28>
 8006ec4:	230c      	movs	r3, #12
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	603b      	str	r3, [r7, #0]
 8006eca:	4630      	mov	r0, r6
 8006ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fa4 <_malloc_r+0xfc>
 8006ed4:	f000 f868 	bl	8006fa8 <__malloc_lock>
 8006ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8006edc:	461c      	mov	r4, r3
 8006ede:	bb5c      	cbnz	r4, 8006f38 <_malloc_r+0x90>
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	f7ff ffc0 	bl	8006e68 <sbrk_aligned>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	4604      	mov	r4, r0
 8006eec:	d155      	bne.n	8006f9a <_malloc_r+0xf2>
 8006eee:	f8d8 4000 	ldr.w	r4, [r8]
 8006ef2:	4626      	mov	r6, r4
 8006ef4:	2e00      	cmp	r6, #0
 8006ef6:	d145      	bne.n	8006f84 <_malloc_r+0xdc>
 8006ef8:	2c00      	cmp	r4, #0
 8006efa:	d048      	beq.n	8006f8e <_malloc_r+0xe6>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	4631      	mov	r1, r6
 8006f00:	4638      	mov	r0, r7
 8006f02:	eb04 0903 	add.w	r9, r4, r3
 8006f06:	f000 fdef 	bl	8007ae8 <_sbrk_r>
 8006f0a:	4581      	cmp	r9, r0
 8006f0c:	d13f      	bne.n	8006f8e <_malloc_r+0xe6>
 8006f0e:	6821      	ldr	r1, [r4, #0]
 8006f10:	4638      	mov	r0, r7
 8006f12:	1a6d      	subs	r5, r5, r1
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7ff ffa7 	bl	8006e68 <sbrk_aligned>
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d037      	beq.n	8006f8e <_malloc_r+0xe6>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	442b      	add	r3, r5
 8006f22:	6023      	str	r3, [r4, #0]
 8006f24:	f8d8 3000 	ldr.w	r3, [r8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d038      	beq.n	8006f9e <_malloc_r+0xf6>
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	42a2      	cmp	r2, r4
 8006f30:	d12b      	bne.n	8006f8a <_malloc_r+0xe2>
 8006f32:	2200      	movs	r2, #0
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	e00f      	b.n	8006f58 <_malloc_r+0xb0>
 8006f38:	6822      	ldr	r2, [r4, #0]
 8006f3a:	1b52      	subs	r2, r2, r5
 8006f3c:	d41f      	bmi.n	8006f7e <_malloc_r+0xd6>
 8006f3e:	2a0b      	cmp	r2, #11
 8006f40:	d917      	bls.n	8006f72 <_malloc_r+0xca>
 8006f42:	1961      	adds	r1, r4, r5
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	6025      	str	r5, [r4, #0]
 8006f48:	bf18      	it	ne
 8006f4a:	6059      	strne	r1, [r3, #4]
 8006f4c:	6863      	ldr	r3, [r4, #4]
 8006f4e:	bf08      	it	eq
 8006f50:	f8c8 1000 	streq.w	r1, [r8]
 8006f54:	5162      	str	r2, [r4, r5]
 8006f56:	604b      	str	r3, [r1, #4]
 8006f58:	4638      	mov	r0, r7
 8006f5a:	f104 060b 	add.w	r6, r4, #11
 8006f5e:	f000 f829 	bl	8006fb4 <__malloc_unlock>
 8006f62:	f026 0607 	bic.w	r6, r6, #7
 8006f66:	1d23      	adds	r3, r4, #4
 8006f68:	1af2      	subs	r2, r6, r3
 8006f6a:	d0ae      	beq.n	8006eca <_malloc_r+0x22>
 8006f6c:	1b9b      	subs	r3, r3, r6
 8006f6e:	50a3      	str	r3, [r4, r2]
 8006f70:	e7ab      	b.n	8006eca <_malloc_r+0x22>
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	6862      	ldr	r2, [r4, #4]
 8006f76:	d1dd      	bne.n	8006f34 <_malloc_r+0x8c>
 8006f78:	f8c8 2000 	str.w	r2, [r8]
 8006f7c:	e7ec      	b.n	8006f58 <_malloc_r+0xb0>
 8006f7e:	4623      	mov	r3, r4
 8006f80:	6864      	ldr	r4, [r4, #4]
 8006f82:	e7ac      	b.n	8006ede <_malloc_r+0x36>
 8006f84:	4634      	mov	r4, r6
 8006f86:	6876      	ldr	r6, [r6, #4]
 8006f88:	e7b4      	b.n	8006ef4 <_malloc_r+0x4c>
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	e7cc      	b.n	8006f28 <_malloc_r+0x80>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	4638      	mov	r0, r7
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	f000 f80e 	bl	8006fb4 <__malloc_unlock>
 8006f98:	e797      	b.n	8006eca <_malloc_r+0x22>
 8006f9a:	6025      	str	r5, [r4, #0]
 8006f9c:	e7dc      	b.n	8006f58 <_malloc_r+0xb0>
 8006f9e:	605b      	str	r3, [r3, #4]
 8006fa0:	deff      	udf	#255	; 0xff
 8006fa2:	bf00      	nop
 8006fa4:	200009c8 	.word	0x200009c8

08006fa8 <__malloc_lock>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__malloc_lock+0x8>)
 8006faa:	f7ff b890 	b.w	80060ce <__retarget_lock_acquire_recursive>
 8006fae:	bf00      	nop
 8006fb0:	200009c4 	.word	0x200009c4

08006fb4 <__malloc_unlock>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	; (8006fbc <__malloc_unlock+0x8>)
 8006fb6:	f7ff b88b 	b.w	80060d0 <__retarget_lock_release_recursive>
 8006fba:	bf00      	nop
 8006fbc:	200009c4 	.word	0x200009c4

08006fc0 <_Balloc>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	69c6      	ldr	r6, [r0, #28]
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	b976      	cbnz	r6, 8006fe8 <_Balloc+0x28>
 8006fca:	2010      	movs	r0, #16
 8006fcc:	f7ff ff44 	bl	8006e58 <malloc>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	61e0      	str	r0, [r4, #28]
 8006fd4:	b920      	cbnz	r0, 8006fe0 <_Balloc+0x20>
 8006fd6:	216b      	movs	r1, #107	; 0x6b
 8006fd8:	4b17      	ldr	r3, [pc, #92]	; (8007038 <_Balloc+0x78>)
 8006fda:	4818      	ldr	r0, [pc, #96]	; (800703c <_Balloc+0x7c>)
 8006fdc:	f000 fda2 	bl	8007b24 <__assert_func>
 8006fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fe4:	6006      	str	r6, [r0, #0]
 8006fe6:	60c6      	str	r6, [r0, #12]
 8006fe8:	69e6      	ldr	r6, [r4, #28]
 8006fea:	68f3      	ldr	r3, [r6, #12]
 8006fec:	b183      	cbz	r3, 8007010 <_Balloc+0x50>
 8006fee:	69e3      	ldr	r3, [r4, #28]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ff6:	b9b8      	cbnz	r0, 8007028 <_Balloc+0x68>
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8006ffe:	1d72      	adds	r2, r6, #5
 8007000:	4620      	mov	r0, r4
 8007002:	0092      	lsls	r2, r2, #2
 8007004:	f000 fdac 	bl	8007b60 <_calloc_r>
 8007008:	b160      	cbz	r0, 8007024 <_Balloc+0x64>
 800700a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800700e:	e00e      	b.n	800702e <_Balloc+0x6e>
 8007010:	2221      	movs	r2, #33	; 0x21
 8007012:	2104      	movs	r1, #4
 8007014:	4620      	mov	r0, r4
 8007016:	f000 fda3 	bl	8007b60 <_calloc_r>
 800701a:	69e3      	ldr	r3, [r4, #28]
 800701c:	60f0      	str	r0, [r6, #12]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e4      	bne.n	8006fee <_Balloc+0x2e>
 8007024:	2000      	movs	r0, #0
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	6802      	ldr	r2, [r0, #0]
 800702a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800702e:	2300      	movs	r3, #0
 8007030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007034:	e7f7      	b.n	8007026 <_Balloc+0x66>
 8007036:	bf00      	nop
 8007038:	08009228 	.word	0x08009228
 800703c:	080092a8 	.word	0x080092a8

08007040 <_Bfree>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	69c6      	ldr	r6, [r0, #28]
 8007044:	4605      	mov	r5, r0
 8007046:	460c      	mov	r4, r1
 8007048:	b976      	cbnz	r6, 8007068 <_Bfree+0x28>
 800704a:	2010      	movs	r0, #16
 800704c:	f7ff ff04 	bl	8006e58 <malloc>
 8007050:	4602      	mov	r2, r0
 8007052:	61e8      	str	r0, [r5, #28]
 8007054:	b920      	cbnz	r0, 8007060 <_Bfree+0x20>
 8007056:	218f      	movs	r1, #143	; 0x8f
 8007058:	4b08      	ldr	r3, [pc, #32]	; (800707c <_Bfree+0x3c>)
 800705a:	4809      	ldr	r0, [pc, #36]	; (8007080 <_Bfree+0x40>)
 800705c:	f000 fd62 	bl	8007b24 <__assert_func>
 8007060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007064:	6006      	str	r6, [r0, #0]
 8007066:	60c6      	str	r6, [r0, #12]
 8007068:	b13c      	cbz	r4, 800707a <_Bfree+0x3a>
 800706a:	69eb      	ldr	r3, [r5, #28]
 800706c:	6862      	ldr	r2, [r4, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007074:	6021      	str	r1, [r4, #0]
 8007076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	08009228 	.word	0x08009228
 8007080:	080092a8 	.word	0x080092a8

08007084 <__multadd>:
 8007084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007088:	4607      	mov	r7, r0
 800708a:	460c      	mov	r4, r1
 800708c:	461e      	mov	r6, r3
 800708e:	2000      	movs	r0, #0
 8007090:	690d      	ldr	r5, [r1, #16]
 8007092:	f101 0c14 	add.w	ip, r1, #20
 8007096:	f8dc 3000 	ldr.w	r3, [ip]
 800709a:	3001      	adds	r0, #1
 800709c:	b299      	uxth	r1, r3
 800709e:	fb02 6101 	mla	r1, r2, r1, r6
 80070a2:	0c1e      	lsrs	r6, r3, #16
 80070a4:	0c0b      	lsrs	r3, r1, #16
 80070a6:	fb02 3306 	mla	r3, r2, r6, r3
 80070aa:	b289      	uxth	r1, r1
 80070ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070b0:	4285      	cmp	r5, r0
 80070b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070b6:	f84c 1b04 	str.w	r1, [ip], #4
 80070ba:	dcec      	bgt.n	8007096 <__multadd+0x12>
 80070bc:	b30e      	cbz	r6, 8007102 <__multadd+0x7e>
 80070be:	68a3      	ldr	r3, [r4, #8]
 80070c0:	42ab      	cmp	r3, r5
 80070c2:	dc19      	bgt.n	80070f8 <__multadd+0x74>
 80070c4:	6861      	ldr	r1, [r4, #4]
 80070c6:	4638      	mov	r0, r7
 80070c8:	3101      	adds	r1, #1
 80070ca:	f7ff ff79 	bl	8006fc0 <_Balloc>
 80070ce:	4680      	mov	r8, r0
 80070d0:	b928      	cbnz	r0, 80070de <__multadd+0x5a>
 80070d2:	4602      	mov	r2, r0
 80070d4:	21ba      	movs	r1, #186	; 0xba
 80070d6:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <__multadd+0x84>)
 80070d8:	480c      	ldr	r0, [pc, #48]	; (800710c <__multadd+0x88>)
 80070da:	f000 fd23 	bl	8007b24 <__assert_func>
 80070de:	6922      	ldr	r2, [r4, #16]
 80070e0:	f104 010c 	add.w	r1, r4, #12
 80070e4:	3202      	adds	r2, #2
 80070e6:	0092      	lsls	r2, r2, #2
 80070e8:	300c      	adds	r0, #12
 80070ea:	f000 fd0d 	bl	8007b08 <memcpy>
 80070ee:	4621      	mov	r1, r4
 80070f0:	4638      	mov	r0, r7
 80070f2:	f7ff ffa5 	bl	8007040 <_Bfree>
 80070f6:	4644      	mov	r4, r8
 80070f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070fc:	3501      	adds	r5, #1
 80070fe:	615e      	str	r6, [r3, #20]
 8007100:	6125      	str	r5, [r4, #16]
 8007102:	4620      	mov	r0, r4
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007108:	08009297 	.word	0x08009297
 800710c:	080092a8 	.word	0x080092a8

08007110 <__hi0bits>:
 8007110:	0c02      	lsrs	r2, r0, #16
 8007112:	0412      	lsls	r2, r2, #16
 8007114:	4603      	mov	r3, r0
 8007116:	b9ca      	cbnz	r2, 800714c <__hi0bits+0x3c>
 8007118:	0403      	lsls	r3, r0, #16
 800711a:	2010      	movs	r0, #16
 800711c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007120:	bf04      	itt	eq
 8007122:	021b      	lsleq	r3, r3, #8
 8007124:	3008      	addeq	r0, #8
 8007126:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800712a:	bf04      	itt	eq
 800712c:	011b      	lsleq	r3, r3, #4
 800712e:	3004      	addeq	r0, #4
 8007130:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007134:	bf04      	itt	eq
 8007136:	009b      	lsleq	r3, r3, #2
 8007138:	3002      	addeq	r0, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	db05      	blt.n	800714a <__hi0bits+0x3a>
 800713e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007142:	f100 0001 	add.w	r0, r0, #1
 8007146:	bf08      	it	eq
 8007148:	2020      	moveq	r0, #32
 800714a:	4770      	bx	lr
 800714c:	2000      	movs	r0, #0
 800714e:	e7e5      	b.n	800711c <__hi0bits+0xc>

08007150 <__lo0bits>:
 8007150:	6803      	ldr	r3, [r0, #0]
 8007152:	4602      	mov	r2, r0
 8007154:	f013 0007 	ands.w	r0, r3, #7
 8007158:	d00b      	beq.n	8007172 <__lo0bits+0x22>
 800715a:	07d9      	lsls	r1, r3, #31
 800715c:	d421      	bmi.n	80071a2 <__lo0bits+0x52>
 800715e:	0798      	lsls	r0, r3, #30
 8007160:	bf49      	itett	mi
 8007162:	085b      	lsrmi	r3, r3, #1
 8007164:	089b      	lsrpl	r3, r3, #2
 8007166:	2001      	movmi	r0, #1
 8007168:	6013      	strmi	r3, [r2, #0]
 800716a:	bf5c      	itt	pl
 800716c:	2002      	movpl	r0, #2
 800716e:	6013      	strpl	r3, [r2, #0]
 8007170:	4770      	bx	lr
 8007172:	b299      	uxth	r1, r3
 8007174:	b909      	cbnz	r1, 800717a <__lo0bits+0x2a>
 8007176:	2010      	movs	r0, #16
 8007178:	0c1b      	lsrs	r3, r3, #16
 800717a:	b2d9      	uxtb	r1, r3
 800717c:	b909      	cbnz	r1, 8007182 <__lo0bits+0x32>
 800717e:	3008      	adds	r0, #8
 8007180:	0a1b      	lsrs	r3, r3, #8
 8007182:	0719      	lsls	r1, r3, #28
 8007184:	bf04      	itt	eq
 8007186:	091b      	lsreq	r3, r3, #4
 8007188:	3004      	addeq	r0, #4
 800718a:	0799      	lsls	r1, r3, #30
 800718c:	bf04      	itt	eq
 800718e:	089b      	lsreq	r3, r3, #2
 8007190:	3002      	addeq	r0, #2
 8007192:	07d9      	lsls	r1, r3, #31
 8007194:	d403      	bmi.n	800719e <__lo0bits+0x4e>
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	f100 0001 	add.w	r0, r0, #1
 800719c:	d003      	beq.n	80071a6 <__lo0bits+0x56>
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	4770      	bx	lr
 80071a2:	2000      	movs	r0, #0
 80071a4:	4770      	bx	lr
 80071a6:	2020      	movs	r0, #32
 80071a8:	4770      	bx	lr
	...

080071ac <__i2b>:
 80071ac:	b510      	push	{r4, lr}
 80071ae:	460c      	mov	r4, r1
 80071b0:	2101      	movs	r1, #1
 80071b2:	f7ff ff05 	bl	8006fc0 <_Balloc>
 80071b6:	4602      	mov	r2, r0
 80071b8:	b928      	cbnz	r0, 80071c6 <__i2b+0x1a>
 80071ba:	f240 1145 	movw	r1, #325	; 0x145
 80071be:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <__i2b+0x24>)
 80071c0:	4804      	ldr	r0, [pc, #16]	; (80071d4 <__i2b+0x28>)
 80071c2:	f000 fcaf 	bl	8007b24 <__assert_func>
 80071c6:	2301      	movs	r3, #1
 80071c8:	6144      	str	r4, [r0, #20]
 80071ca:	6103      	str	r3, [r0, #16]
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	bf00      	nop
 80071d0:	08009297 	.word	0x08009297
 80071d4:	080092a8 	.word	0x080092a8

080071d8 <__multiply>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	4691      	mov	r9, r2
 80071de:	690a      	ldr	r2, [r1, #16]
 80071e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071e4:	460c      	mov	r4, r1
 80071e6:	429a      	cmp	r2, r3
 80071e8:	bfbe      	ittt	lt
 80071ea:	460b      	movlt	r3, r1
 80071ec:	464c      	movlt	r4, r9
 80071ee:	4699      	movlt	r9, r3
 80071f0:	6927      	ldr	r7, [r4, #16]
 80071f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071f6:	68a3      	ldr	r3, [r4, #8]
 80071f8:	6861      	ldr	r1, [r4, #4]
 80071fa:	eb07 060a 	add.w	r6, r7, sl
 80071fe:	42b3      	cmp	r3, r6
 8007200:	b085      	sub	sp, #20
 8007202:	bfb8      	it	lt
 8007204:	3101      	addlt	r1, #1
 8007206:	f7ff fedb 	bl	8006fc0 <_Balloc>
 800720a:	b930      	cbnz	r0, 800721a <__multiply+0x42>
 800720c:	4602      	mov	r2, r0
 800720e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007212:	4b43      	ldr	r3, [pc, #268]	; (8007320 <__multiply+0x148>)
 8007214:	4843      	ldr	r0, [pc, #268]	; (8007324 <__multiply+0x14c>)
 8007216:	f000 fc85 	bl	8007b24 <__assert_func>
 800721a:	f100 0514 	add.w	r5, r0, #20
 800721e:	462b      	mov	r3, r5
 8007220:	2200      	movs	r2, #0
 8007222:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007226:	4543      	cmp	r3, r8
 8007228:	d321      	bcc.n	800726e <__multiply+0x96>
 800722a:	f104 0314 	add.w	r3, r4, #20
 800722e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007232:	f109 0314 	add.w	r3, r9, #20
 8007236:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800723a:	9202      	str	r2, [sp, #8]
 800723c:	1b3a      	subs	r2, r7, r4
 800723e:	3a15      	subs	r2, #21
 8007240:	f022 0203 	bic.w	r2, r2, #3
 8007244:	3204      	adds	r2, #4
 8007246:	f104 0115 	add.w	r1, r4, #21
 800724a:	428f      	cmp	r7, r1
 800724c:	bf38      	it	cc
 800724e:	2204      	movcc	r2, #4
 8007250:	9201      	str	r2, [sp, #4]
 8007252:	9a02      	ldr	r2, [sp, #8]
 8007254:	9303      	str	r3, [sp, #12]
 8007256:	429a      	cmp	r2, r3
 8007258:	d80c      	bhi.n	8007274 <__multiply+0x9c>
 800725a:	2e00      	cmp	r6, #0
 800725c:	dd03      	ble.n	8007266 <__multiply+0x8e>
 800725e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007262:	2b00      	cmp	r3, #0
 8007264:	d05a      	beq.n	800731c <__multiply+0x144>
 8007266:	6106      	str	r6, [r0, #16]
 8007268:	b005      	add	sp, #20
 800726a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726e:	f843 2b04 	str.w	r2, [r3], #4
 8007272:	e7d8      	b.n	8007226 <__multiply+0x4e>
 8007274:	f8b3 a000 	ldrh.w	sl, [r3]
 8007278:	f1ba 0f00 	cmp.w	sl, #0
 800727c:	d023      	beq.n	80072c6 <__multiply+0xee>
 800727e:	46a9      	mov	r9, r5
 8007280:	f04f 0c00 	mov.w	ip, #0
 8007284:	f104 0e14 	add.w	lr, r4, #20
 8007288:	f85e 2b04 	ldr.w	r2, [lr], #4
 800728c:	f8d9 1000 	ldr.w	r1, [r9]
 8007290:	fa1f fb82 	uxth.w	fp, r2
 8007294:	b289      	uxth	r1, r1
 8007296:	fb0a 110b 	mla	r1, sl, fp, r1
 800729a:	4461      	add	r1, ip
 800729c:	f8d9 c000 	ldr.w	ip, [r9]
 80072a0:	0c12      	lsrs	r2, r2, #16
 80072a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80072a6:	fb0a c202 	mla	r2, sl, r2, ip
 80072aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072ae:	b289      	uxth	r1, r1
 80072b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072b4:	4577      	cmp	r7, lr
 80072b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072ba:	f849 1b04 	str.w	r1, [r9], #4
 80072be:	d8e3      	bhi.n	8007288 <__multiply+0xb0>
 80072c0:	9a01      	ldr	r2, [sp, #4]
 80072c2:	f845 c002 	str.w	ip, [r5, r2]
 80072c6:	9a03      	ldr	r2, [sp, #12]
 80072c8:	3304      	adds	r3, #4
 80072ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072ce:	f1b9 0f00 	cmp.w	r9, #0
 80072d2:	d021      	beq.n	8007318 <__multiply+0x140>
 80072d4:	46ae      	mov	lr, r5
 80072d6:	f04f 0a00 	mov.w	sl, #0
 80072da:	6829      	ldr	r1, [r5, #0]
 80072dc:	f104 0c14 	add.w	ip, r4, #20
 80072e0:	f8bc b000 	ldrh.w	fp, [ip]
 80072e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072e8:	b289      	uxth	r1, r1
 80072ea:	fb09 220b 	mla	r2, r9, fp, r2
 80072ee:	4452      	add	r2, sl
 80072f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072f4:	f84e 1b04 	str.w	r1, [lr], #4
 80072f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80072fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007300:	f8be 1000 	ldrh.w	r1, [lr]
 8007304:	4567      	cmp	r7, ip
 8007306:	fb09 110a 	mla	r1, r9, sl, r1
 800730a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800730e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007312:	d8e5      	bhi.n	80072e0 <__multiply+0x108>
 8007314:	9a01      	ldr	r2, [sp, #4]
 8007316:	50a9      	str	r1, [r5, r2]
 8007318:	3504      	adds	r5, #4
 800731a:	e79a      	b.n	8007252 <__multiply+0x7a>
 800731c:	3e01      	subs	r6, #1
 800731e:	e79c      	b.n	800725a <__multiply+0x82>
 8007320:	08009297 	.word	0x08009297
 8007324:	080092a8 	.word	0x080092a8

08007328 <__pow5mult>:
 8007328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800732c:	4615      	mov	r5, r2
 800732e:	f012 0203 	ands.w	r2, r2, #3
 8007332:	4606      	mov	r6, r0
 8007334:	460f      	mov	r7, r1
 8007336:	d007      	beq.n	8007348 <__pow5mult+0x20>
 8007338:	4c25      	ldr	r4, [pc, #148]	; (80073d0 <__pow5mult+0xa8>)
 800733a:	3a01      	subs	r2, #1
 800733c:	2300      	movs	r3, #0
 800733e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007342:	f7ff fe9f 	bl	8007084 <__multadd>
 8007346:	4607      	mov	r7, r0
 8007348:	10ad      	asrs	r5, r5, #2
 800734a:	d03d      	beq.n	80073c8 <__pow5mult+0xa0>
 800734c:	69f4      	ldr	r4, [r6, #28]
 800734e:	b97c      	cbnz	r4, 8007370 <__pow5mult+0x48>
 8007350:	2010      	movs	r0, #16
 8007352:	f7ff fd81 	bl	8006e58 <malloc>
 8007356:	4602      	mov	r2, r0
 8007358:	61f0      	str	r0, [r6, #28]
 800735a:	b928      	cbnz	r0, 8007368 <__pow5mult+0x40>
 800735c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007360:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <__pow5mult+0xac>)
 8007362:	481d      	ldr	r0, [pc, #116]	; (80073d8 <__pow5mult+0xb0>)
 8007364:	f000 fbde 	bl	8007b24 <__assert_func>
 8007368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800736c:	6004      	str	r4, [r0, #0]
 800736e:	60c4      	str	r4, [r0, #12]
 8007370:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007378:	b94c      	cbnz	r4, 800738e <__pow5mult+0x66>
 800737a:	f240 2171 	movw	r1, #625	; 0x271
 800737e:	4630      	mov	r0, r6
 8007380:	f7ff ff14 	bl	80071ac <__i2b>
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	f8c8 0008 	str.w	r0, [r8, #8]
 800738c:	6003      	str	r3, [r0, #0]
 800738e:	f04f 0900 	mov.w	r9, #0
 8007392:	07eb      	lsls	r3, r5, #31
 8007394:	d50a      	bpl.n	80073ac <__pow5mult+0x84>
 8007396:	4639      	mov	r1, r7
 8007398:	4622      	mov	r2, r4
 800739a:	4630      	mov	r0, r6
 800739c:	f7ff ff1c 	bl	80071d8 <__multiply>
 80073a0:	4680      	mov	r8, r0
 80073a2:	4639      	mov	r1, r7
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff fe4b 	bl	8007040 <_Bfree>
 80073aa:	4647      	mov	r7, r8
 80073ac:	106d      	asrs	r5, r5, #1
 80073ae:	d00b      	beq.n	80073c8 <__pow5mult+0xa0>
 80073b0:	6820      	ldr	r0, [r4, #0]
 80073b2:	b938      	cbnz	r0, 80073c4 <__pow5mult+0x9c>
 80073b4:	4622      	mov	r2, r4
 80073b6:	4621      	mov	r1, r4
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7ff ff0d 	bl	80071d8 <__multiply>
 80073be:	6020      	str	r0, [r4, #0]
 80073c0:	f8c0 9000 	str.w	r9, [r0]
 80073c4:	4604      	mov	r4, r0
 80073c6:	e7e4      	b.n	8007392 <__pow5mult+0x6a>
 80073c8:	4638      	mov	r0, r7
 80073ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ce:	bf00      	nop
 80073d0:	080093f8 	.word	0x080093f8
 80073d4:	08009228 	.word	0x08009228
 80073d8:	080092a8 	.word	0x080092a8

080073dc <__lshift>:
 80073dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e0:	460c      	mov	r4, r1
 80073e2:	4607      	mov	r7, r0
 80073e4:	4691      	mov	r9, r2
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	6849      	ldr	r1, [r1, #4]
 80073ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073ee:	68a3      	ldr	r3, [r4, #8]
 80073f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073f4:	f108 0601 	add.w	r6, r8, #1
 80073f8:	42b3      	cmp	r3, r6
 80073fa:	db0b      	blt.n	8007414 <__lshift+0x38>
 80073fc:	4638      	mov	r0, r7
 80073fe:	f7ff fddf 	bl	8006fc0 <_Balloc>
 8007402:	4605      	mov	r5, r0
 8007404:	b948      	cbnz	r0, 800741a <__lshift+0x3e>
 8007406:	4602      	mov	r2, r0
 8007408:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800740c:	4b27      	ldr	r3, [pc, #156]	; (80074ac <__lshift+0xd0>)
 800740e:	4828      	ldr	r0, [pc, #160]	; (80074b0 <__lshift+0xd4>)
 8007410:	f000 fb88 	bl	8007b24 <__assert_func>
 8007414:	3101      	adds	r1, #1
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	e7ee      	b.n	80073f8 <__lshift+0x1c>
 800741a:	2300      	movs	r3, #0
 800741c:	f100 0114 	add.w	r1, r0, #20
 8007420:	f100 0210 	add.w	r2, r0, #16
 8007424:	4618      	mov	r0, r3
 8007426:	4553      	cmp	r3, sl
 8007428:	db33      	blt.n	8007492 <__lshift+0xb6>
 800742a:	6920      	ldr	r0, [r4, #16]
 800742c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007430:	f104 0314 	add.w	r3, r4, #20
 8007434:	f019 091f 	ands.w	r9, r9, #31
 8007438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800743c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007440:	d02b      	beq.n	800749a <__lshift+0xbe>
 8007442:	468a      	mov	sl, r1
 8007444:	2200      	movs	r2, #0
 8007446:	f1c9 0e20 	rsb	lr, r9, #32
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	fa00 f009 	lsl.w	r0, r0, r9
 8007450:	4310      	orrs	r0, r2
 8007452:	f84a 0b04 	str.w	r0, [sl], #4
 8007456:	f853 2b04 	ldr.w	r2, [r3], #4
 800745a:	459c      	cmp	ip, r3
 800745c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007460:	d8f3      	bhi.n	800744a <__lshift+0x6e>
 8007462:	ebac 0304 	sub.w	r3, ip, r4
 8007466:	3b15      	subs	r3, #21
 8007468:	f023 0303 	bic.w	r3, r3, #3
 800746c:	3304      	adds	r3, #4
 800746e:	f104 0015 	add.w	r0, r4, #21
 8007472:	4584      	cmp	ip, r0
 8007474:	bf38      	it	cc
 8007476:	2304      	movcc	r3, #4
 8007478:	50ca      	str	r2, [r1, r3]
 800747a:	b10a      	cbz	r2, 8007480 <__lshift+0xa4>
 800747c:	f108 0602 	add.w	r6, r8, #2
 8007480:	3e01      	subs	r6, #1
 8007482:	4638      	mov	r0, r7
 8007484:	4621      	mov	r1, r4
 8007486:	612e      	str	r6, [r5, #16]
 8007488:	f7ff fdda 	bl	8007040 <_Bfree>
 800748c:	4628      	mov	r0, r5
 800748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007492:	f842 0f04 	str.w	r0, [r2, #4]!
 8007496:	3301      	adds	r3, #1
 8007498:	e7c5      	b.n	8007426 <__lshift+0x4a>
 800749a:	3904      	subs	r1, #4
 800749c:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a0:	459c      	cmp	ip, r3
 80074a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80074a6:	d8f9      	bhi.n	800749c <__lshift+0xc0>
 80074a8:	e7ea      	b.n	8007480 <__lshift+0xa4>
 80074aa:	bf00      	nop
 80074ac:	08009297 	.word	0x08009297
 80074b0:	080092a8 	.word	0x080092a8

080074b4 <__mcmp>:
 80074b4:	4603      	mov	r3, r0
 80074b6:	690a      	ldr	r2, [r1, #16]
 80074b8:	6900      	ldr	r0, [r0, #16]
 80074ba:	b530      	push	{r4, r5, lr}
 80074bc:	1a80      	subs	r0, r0, r2
 80074be:	d10d      	bne.n	80074dc <__mcmp+0x28>
 80074c0:	3314      	adds	r3, #20
 80074c2:	3114      	adds	r1, #20
 80074c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074d4:	4295      	cmp	r5, r2
 80074d6:	d002      	beq.n	80074de <__mcmp+0x2a>
 80074d8:	d304      	bcc.n	80074e4 <__mcmp+0x30>
 80074da:	2001      	movs	r0, #1
 80074dc:	bd30      	pop	{r4, r5, pc}
 80074de:	42a3      	cmp	r3, r4
 80074e0:	d3f4      	bcc.n	80074cc <__mcmp+0x18>
 80074e2:	e7fb      	b.n	80074dc <__mcmp+0x28>
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	e7f8      	b.n	80074dc <__mcmp+0x28>
	...

080074ec <__mdiff>:
 80074ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	460d      	mov	r5, r1
 80074f2:	4607      	mov	r7, r0
 80074f4:	4611      	mov	r1, r2
 80074f6:	4628      	mov	r0, r5
 80074f8:	4614      	mov	r4, r2
 80074fa:	f7ff ffdb 	bl	80074b4 <__mcmp>
 80074fe:	1e06      	subs	r6, r0, #0
 8007500:	d111      	bne.n	8007526 <__mdiff+0x3a>
 8007502:	4631      	mov	r1, r6
 8007504:	4638      	mov	r0, r7
 8007506:	f7ff fd5b 	bl	8006fc0 <_Balloc>
 800750a:	4602      	mov	r2, r0
 800750c:	b928      	cbnz	r0, 800751a <__mdiff+0x2e>
 800750e:	f240 2137 	movw	r1, #567	; 0x237
 8007512:	4b3a      	ldr	r3, [pc, #232]	; (80075fc <__mdiff+0x110>)
 8007514:	483a      	ldr	r0, [pc, #232]	; (8007600 <__mdiff+0x114>)
 8007516:	f000 fb05 	bl	8007b24 <__assert_func>
 800751a:	2301      	movs	r3, #1
 800751c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007520:	4610      	mov	r0, r2
 8007522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	bfa4      	itt	ge
 8007528:	4623      	movge	r3, r4
 800752a:	462c      	movge	r4, r5
 800752c:	4638      	mov	r0, r7
 800752e:	6861      	ldr	r1, [r4, #4]
 8007530:	bfa6      	itte	ge
 8007532:	461d      	movge	r5, r3
 8007534:	2600      	movge	r6, #0
 8007536:	2601      	movlt	r6, #1
 8007538:	f7ff fd42 	bl	8006fc0 <_Balloc>
 800753c:	4602      	mov	r2, r0
 800753e:	b918      	cbnz	r0, 8007548 <__mdiff+0x5c>
 8007540:	f240 2145 	movw	r1, #581	; 0x245
 8007544:	4b2d      	ldr	r3, [pc, #180]	; (80075fc <__mdiff+0x110>)
 8007546:	e7e5      	b.n	8007514 <__mdiff+0x28>
 8007548:	f102 0814 	add.w	r8, r2, #20
 800754c:	46c2      	mov	sl, r8
 800754e:	f04f 0c00 	mov.w	ip, #0
 8007552:	6927      	ldr	r7, [r4, #16]
 8007554:	60c6      	str	r6, [r0, #12]
 8007556:	692e      	ldr	r6, [r5, #16]
 8007558:	f104 0014 	add.w	r0, r4, #20
 800755c:	f105 0914 	add.w	r9, r5, #20
 8007560:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007564:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007568:	3410      	adds	r4, #16
 800756a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800756e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007572:	fa1f f18b 	uxth.w	r1, fp
 8007576:	4461      	add	r1, ip
 8007578:	fa1f fc83 	uxth.w	ip, r3
 800757c:	0c1b      	lsrs	r3, r3, #16
 800757e:	eba1 010c 	sub.w	r1, r1, ip
 8007582:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007586:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800758a:	b289      	uxth	r1, r1
 800758c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007590:	454e      	cmp	r6, r9
 8007592:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007596:	f84a 1b04 	str.w	r1, [sl], #4
 800759a:	d8e6      	bhi.n	800756a <__mdiff+0x7e>
 800759c:	1b73      	subs	r3, r6, r5
 800759e:	3b15      	subs	r3, #21
 80075a0:	f023 0303 	bic.w	r3, r3, #3
 80075a4:	3515      	adds	r5, #21
 80075a6:	3304      	adds	r3, #4
 80075a8:	42ae      	cmp	r6, r5
 80075aa:	bf38      	it	cc
 80075ac:	2304      	movcc	r3, #4
 80075ae:	4418      	add	r0, r3
 80075b0:	4443      	add	r3, r8
 80075b2:	461e      	mov	r6, r3
 80075b4:	4605      	mov	r5, r0
 80075b6:	4575      	cmp	r5, lr
 80075b8:	d30e      	bcc.n	80075d8 <__mdiff+0xec>
 80075ba:	f10e 0103 	add.w	r1, lr, #3
 80075be:	1a09      	subs	r1, r1, r0
 80075c0:	f021 0103 	bic.w	r1, r1, #3
 80075c4:	3803      	subs	r0, #3
 80075c6:	4586      	cmp	lr, r0
 80075c8:	bf38      	it	cc
 80075ca:	2100      	movcc	r1, #0
 80075cc:	440b      	add	r3, r1
 80075ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075d2:	b189      	cbz	r1, 80075f8 <__mdiff+0x10c>
 80075d4:	6117      	str	r7, [r2, #16]
 80075d6:	e7a3      	b.n	8007520 <__mdiff+0x34>
 80075d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80075dc:	fa1f f188 	uxth.w	r1, r8
 80075e0:	4461      	add	r1, ip
 80075e2:	140c      	asrs	r4, r1, #16
 80075e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075e8:	b289      	uxth	r1, r1
 80075ea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80075ee:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80075f2:	f846 1b04 	str.w	r1, [r6], #4
 80075f6:	e7de      	b.n	80075b6 <__mdiff+0xca>
 80075f8:	3f01      	subs	r7, #1
 80075fa:	e7e8      	b.n	80075ce <__mdiff+0xe2>
 80075fc:	08009297 	.word	0x08009297
 8007600:	080092a8 	.word	0x080092a8

08007604 <__d2b>:
 8007604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007606:	2101      	movs	r1, #1
 8007608:	4617      	mov	r7, r2
 800760a:	461c      	mov	r4, r3
 800760c:	9e08      	ldr	r6, [sp, #32]
 800760e:	f7ff fcd7 	bl	8006fc0 <_Balloc>
 8007612:	4605      	mov	r5, r0
 8007614:	b930      	cbnz	r0, 8007624 <__d2b+0x20>
 8007616:	4602      	mov	r2, r0
 8007618:	f240 310f 	movw	r1, #783	; 0x30f
 800761c:	4b22      	ldr	r3, [pc, #136]	; (80076a8 <__d2b+0xa4>)
 800761e:	4823      	ldr	r0, [pc, #140]	; (80076ac <__d2b+0xa8>)
 8007620:	f000 fa80 	bl	8007b24 <__assert_func>
 8007624:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007628:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800762c:	bb24      	cbnz	r4, 8007678 <__d2b+0x74>
 800762e:	2f00      	cmp	r7, #0
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	d026      	beq.n	8007682 <__d2b+0x7e>
 8007634:	4668      	mov	r0, sp
 8007636:	9700      	str	r7, [sp, #0]
 8007638:	f7ff fd8a 	bl	8007150 <__lo0bits>
 800763c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007640:	b1e8      	cbz	r0, 800767e <__d2b+0x7a>
 8007642:	f1c0 0320 	rsb	r3, r0, #32
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	430b      	orrs	r3, r1
 800764c:	40c2      	lsrs	r2, r0
 800764e:	616b      	str	r3, [r5, #20]
 8007650:	9201      	str	r2, [sp, #4]
 8007652:	9b01      	ldr	r3, [sp, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf14      	ite	ne
 8007658:	2102      	movne	r1, #2
 800765a:	2101      	moveq	r1, #1
 800765c:	61ab      	str	r3, [r5, #24]
 800765e:	6129      	str	r1, [r5, #16]
 8007660:	b1bc      	cbz	r4, 8007692 <__d2b+0x8e>
 8007662:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007666:	4404      	add	r4, r0
 8007668:	6034      	str	r4, [r6, #0]
 800766a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	6018      	str	r0, [r3, #0]
 8007672:	4628      	mov	r0, r5
 8007674:	b003      	add	sp, #12
 8007676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800767c:	e7d7      	b.n	800762e <__d2b+0x2a>
 800767e:	6169      	str	r1, [r5, #20]
 8007680:	e7e7      	b.n	8007652 <__d2b+0x4e>
 8007682:	a801      	add	r0, sp, #4
 8007684:	f7ff fd64 	bl	8007150 <__lo0bits>
 8007688:	9b01      	ldr	r3, [sp, #4]
 800768a:	2101      	movs	r1, #1
 800768c:	616b      	str	r3, [r5, #20]
 800768e:	3020      	adds	r0, #32
 8007690:	e7e5      	b.n	800765e <__d2b+0x5a>
 8007692:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007696:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800769a:	6030      	str	r0, [r6, #0]
 800769c:	6918      	ldr	r0, [r3, #16]
 800769e:	f7ff fd37 	bl	8007110 <__hi0bits>
 80076a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80076a6:	e7e2      	b.n	800766e <__d2b+0x6a>
 80076a8:	08009297 	.word	0x08009297
 80076ac:	080092a8 	.word	0x080092a8

080076b0 <__ssputs_r>:
 80076b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	461f      	mov	r7, r3
 80076b6:	688e      	ldr	r6, [r1, #8]
 80076b8:	4682      	mov	sl, r0
 80076ba:	42be      	cmp	r6, r7
 80076bc:	460c      	mov	r4, r1
 80076be:	4690      	mov	r8, r2
 80076c0:	680b      	ldr	r3, [r1, #0]
 80076c2:	d82c      	bhi.n	800771e <__ssputs_r+0x6e>
 80076c4:	898a      	ldrh	r2, [r1, #12]
 80076c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076ca:	d026      	beq.n	800771a <__ssputs_r+0x6a>
 80076cc:	6965      	ldr	r5, [r4, #20]
 80076ce:	6909      	ldr	r1, [r1, #16]
 80076d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076d4:	eba3 0901 	sub.w	r9, r3, r1
 80076d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076dc:	1c7b      	adds	r3, r7, #1
 80076de:	444b      	add	r3, r9
 80076e0:	106d      	asrs	r5, r5, #1
 80076e2:	429d      	cmp	r5, r3
 80076e4:	bf38      	it	cc
 80076e6:	461d      	movcc	r5, r3
 80076e8:	0553      	lsls	r3, r2, #21
 80076ea:	d527      	bpl.n	800773c <__ssputs_r+0x8c>
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7ff fbdb 	bl	8006ea8 <_malloc_r>
 80076f2:	4606      	mov	r6, r0
 80076f4:	b360      	cbz	r0, 8007750 <__ssputs_r+0xa0>
 80076f6:	464a      	mov	r2, r9
 80076f8:	6921      	ldr	r1, [r4, #16]
 80076fa:	f000 fa05 	bl	8007b08 <memcpy>
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	81a3      	strh	r3, [r4, #12]
 800770a:	6126      	str	r6, [r4, #16]
 800770c:	444e      	add	r6, r9
 800770e:	6026      	str	r6, [r4, #0]
 8007710:	463e      	mov	r6, r7
 8007712:	6165      	str	r5, [r4, #20]
 8007714:	eba5 0509 	sub.w	r5, r5, r9
 8007718:	60a5      	str	r5, [r4, #8]
 800771a:	42be      	cmp	r6, r7
 800771c:	d900      	bls.n	8007720 <__ssputs_r+0x70>
 800771e:	463e      	mov	r6, r7
 8007720:	4632      	mov	r2, r6
 8007722:	4641      	mov	r1, r8
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	f000 f9c5 	bl	8007ab4 <memmove>
 800772a:	2000      	movs	r0, #0
 800772c:	68a3      	ldr	r3, [r4, #8]
 800772e:	1b9b      	subs	r3, r3, r6
 8007730:	60a3      	str	r3, [r4, #8]
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	4433      	add	r3, r6
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773c:	462a      	mov	r2, r5
 800773e:	f000 fa35 	bl	8007bac <_realloc_r>
 8007742:	4606      	mov	r6, r0
 8007744:	2800      	cmp	r0, #0
 8007746:	d1e0      	bne.n	800770a <__ssputs_r+0x5a>
 8007748:	4650      	mov	r0, sl
 800774a:	6921      	ldr	r1, [r4, #16]
 800774c:	f7ff fb3c 	bl	8006dc8 <_free_r>
 8007750:	230c      	movs	r3, #12
 8007752:	f8ca 3000 	str.w	r3, [sl]
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007760:	81a3      	strh	r3, [r4, #12]
 8007762:	e7e9      	b.n	8007738 <__ssputs_r+0x88>

08007764 <_svfiprintf_r>:
 8007764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007768:	4698      	mov	r8, r3
 800776a:	898b      	ldrh	r3, [r1, #12]
 800776c:	4607      	mov	r7, r0
 800776e:	061b      	lsls	r3, r3, #24
 8007770:	460d      	mov	r5, r1
 8007772:	4614      	mov	r4, r2
 8007774:	b09d      	sub	sp, #116	; 0x74
 8007776:	d50e      	bpl.n	8007796 <_svfiprintf_r+0x32>
 8007778:	690b      	ldr	r3, [r1, #16]
 800777a:	b963      	cbnz	r3, 8007796 <_svfiprintf_r+0x32>
 800777c:	2140      	movs	r1, #64	; 0x40
 800777e:	f7ff fb93 	bl	8006ea8 <_malloc_r>
 8007782:	6028      	str	r0, [r5, #0]
 8007784:	6128      	str	r0, [r5, #16]
 8007786:	b920      	cbnz	r0, 8007792 <_svfiprintf_r+0x2e>
 8007788:	230c      	movs	r3, #12
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e0d0      	b.n	8007934 <_svfiprintf_r+0x1d0>
 8007792:	2340      	movs	r3, #64	; 0x40
 8007794:	616b      	str	r3, [r5, #20]
 8007796:	2300      	movs	r3, #0
 8007798:	9309      	str	r3, [sp, #36]	; 0x24
 800779a:	2320      	movs	r3, #32
 800779c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077a0:	2330      	movs	r3, #48	; 0x30
 80077a2:	f04f 0901 	mov.w	r9, #1
 80077a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800794c <_svfiprintf_r+0x1e8>
 80077ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077b2:	4623      	mov	r3, r4
 80077b4:	469a      	mov	sl, r3
 80077b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ba:	b10a      	cbz	r2, 80077c0 <_svfiprintf_r+0x5c>
 80077bc:	2a25      	cmp	r2, #37	; 0x25
 80077be:	d1f9      	bne.n	80077b4 <_svfiprintf_r+0x50>
 80077c0:	ebba 0b04 	subs.w	fp, sl, r4
 80077c4:	d00b      	beq.n	80077de <_svfiprintf_r+0x7a>
 80077c6:	465b      	mov	r3, fp
 80077c8:	4622      	mov	r2, r4
 80077ca:	4629      	mov	r1, r5
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff ff6f 	bl	80076b0 <__ssputs_r>
 80077d2:	3001      	adds	r0, #1
 80077d4:	f000 80a9 	beq.w	800792a <_svfiprintf_r+0x1c6>
 80077d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077da:	445a      	add	r2, fp
 80077dc:	9209      	str	r2, [sp, #36]	; 0x24
 80077de:	f89a 3000 	ldrb.w	r3, [sl]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80a1 	beq.w	800792a <_svfiprintf_r+0x1c6>
 80077e8:	2300      	movs	r3, #0
 80077ea:	f04f 32ff 	mov.w	r2, #4294967295
 80077ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077f2:	f10a 0a01 	add.w	sl, sl, #1
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	9307      	str	r3, [sp, #28]
 80077fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007800:	4654      	mov	r4, sl
 8007802:	2205      	movs	r2, #5
 8007804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007808:	4850      	ldr	r0, [pc, #320]	; (800794c <_svfiprintf_r+0x1e8>)
 800780a:	f7fe fc62 	bl	80060d2 <memchr>
 800780e:	9a04      	ldr	r2, [sp, #16]
 8007810:	b9d8      	cbnz	r0, 800784a <_svfiprintf_r+0xe6>
 8007812:	06d0      	lsls	r0, r2, #27
 8007814:	bf44      	itt	mi
 8007816:	2320      	movmi	r3, #32
 8007818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800781c:	0711      	lsls	r1, r2, #28
 800781e:	bf44      	itt	mi
 8007820:	232b      	movmi	r3, #43	; 0x2b
 8007822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007826:	f89a 3000 	ldrb.w	r3, [sl]
 800782a:	2b2a      	cmp	r3, #42	; 0x2a
 800782c:	d015      	beq.n	800785a <_svfiprintf_r+0xf6>
 800782e:	4654      	mov	r4, sl
 8007830:	2000      	movs	r0, #0
 8007832:	f04f 0c0a 	mov.w	ip, #10
 8007836:	9a07      	ldr	r2, [sp, #28]
 8007838:	4621      	mov	r1, r4
 800783a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800783e:	3b30      	subs	r3, #48	; 0x30
 8007840:	2b09      	cmp	r3, #9
 8007842:	d94d      	bls.n	80078e0 <_svfiprintf_r+0x17c>
 8007844:	b1b0      	cbz	r0, 8007874 <_svfiprintf_r+0x110>
 8007846:	9207      	str	r2, [sp, #28]
 8007848:	e014      	b.n	8007874 <_svfiprintf_r+0x110>
 800784a:	eba0 0308 	sub.w	r3, r0, r8
 800784e:	fa09 f303 	lsl.w	r3, r9, r3
 8007852:	4313      	orrs	r3, r2
 8007854:	46a2      	mov	sl, r4
 8007856:	9304      	str	r3, [sp, #16]
 8007858:	e7d2      	b.n	8007800 <_svfiprintf_r+0x9c>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	1d19      	adds	r1, r3, #4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	9103      	str	r1, [sp, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	bfbb      	ittet	lt
 8007866:	425b      	neglt	r3, r3
 8007868:	f042 0202 	orrlt.w	r2, r2, #2
 800786c:	9307      	strge	r3, [sp, #28]
 800786e:	9307      	strlt	r3, [sp, #28]
 8007870:	bfb8      	it	lt
 8007872:	9204      	strlt	r2, [sp, #16]
 8007874:	7823      	ldrb	r3, [r4, #0]
 8007876:	2b2e      	cmp	r3, #46	; 0x2e
 8007878:	d10c      	bne.n	8007894 <_svfiprintf_r+0x130>
 800787a:	7863      	ldrb	r3, [r4, #1]
 800787c:	2b2a      	cmp	r3, #42	; 0x2a
 800787e:	d134      	bne.n	80078ea <_svfiprintf_r+0x186>
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	3402      	adds	r4, #2
 8007884:	1d1a      	adds	r2, r3, #4
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	9203      	str	r2, [sp, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	bfb8      	it	lt
 800788e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007892:	9305      	str	r3, [sp, #20]
 8007894:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007950 <_svfiprintf_r+0x1ec>
 8007898:	2203      	movs	r2, #3
 800789a:	4650      	mov	r0, sl
 800789c:	7821      	ldrb	r1, [r4, #0]
 800789e:	f7fe fc18 	bl	80060d2 <memchr>
 80078a2:	b138      	cbz	r0, 80078b4 <_svfiprintf_r+0x150>
 80078a4:	2240      	movs	r2, #64	; 0x40
 80078a6:	9b04      	ldr	r3, [sp, #16]
 80078a8:	eba0 000a 	sub.w	r0, r0, sl
 80078ac:	4082      	lsls	r2, r0
 80078ae:	4313      	orrs	r3, r2
 80078b0:	3401      	adds	r4, #1
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b8:	2206      	movs	r2, #6
 80078ba:	4826      	ldr	r0, [pc, #152]	; (8007954 <_svfiprintf_r+0x1f0>)
 80078bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078c0:	f7fe fc07 	bl	80060d2 <memchr>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d038      	beq.n	800793a <_svfiprintf_r+0x1d6>
 80078c8:	4b23      	ldr	r3, [pc, #140]	; (8007958 <_svfiprintf_r+0x1f4>)
 80078ca:	bb1b      	cbnz	r3, 8007914 <_svfiprintf_r+0x1b0>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	3307      	adds	r3, #7
 80078d0:	f023 0307 	bic.w	r3, r3, #7
 80078d4:	3308      	adds	r3, #8
 80078d6:	9303      	str	r3, [sp, #12]
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078da:	4433      	add	r3, r6
 80078dc:	9309      	str	r3, [sp, #36]	; 0x24
 80078de:	e768      	b.n	80077b2 <_svfiprintf_r+0x4e>
 80078e0:	460c      	mov	r4, r1
 80078e2:	2001      	movs	r0, #1
 80078e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80078e8:	e7a6      	b.n	8007838 <_svfiprintf_r+0xd4>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f04f 0c0a 	mov.w	ip, #10
 80078f0:	4619      	mov	r1, r3
 80078f2:	3401      	adds	r4, #1
 80078f4:	9305      	str	r3, [sp, #20]
 80078f6:	4620      	mov	r0, r4
 80078f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078fc:	3a30      	subs	r2, #48	; 0x30
 80078fe:	2a09      	cmp	r2, #9
 8007900:	d903      	bls.n	800790a <_svfiprintf_r+0x1a6>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0c6      	beq.n	8007894 <_svfiprintf_r+0x130>
 8007906:	9105      	str	r1, [sp, #20]
 8007908:	e7c4      	b.n	8007894 <_svfiprintf_r+0x130>
 800790a:	4604      	mov	r4, r0
 800790c:	2301      	movs	r3, #1
 800790e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007912:	e7f0      	b.n	80078f6 <_svfiprintf_r+0x192>
 8007914:	ab03      	add	r3, sp, #12
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	462a      	mov	r2, r5
 800791a:	4638      	mov	r0, r7
 800791c:	4b0f      	ldr	r3, [pc, #60]	; (800795c <_svfiprintf_r+0x1f8>)
 800791e:	a904      	add	r1, sp, #16
 8007920:	f7fd fe70 	bl	8005604 <_printf_float>
 8007924:	1c42      	adds	r2, r0, #1
 8007926:	4606      	mov	r6, r0
 8007928:	d1d6      	bne.n	80078d8 <_svfiprintf_r+0x174>
 800792a:	89ab      	ldrh	r3, [r5, #12]
 800792c:	065b      	lsls	r3, r3, #25
 800792e:	f53f af2d 	bmi.w	800778c <_svfiprintf_r+0x28>
 8007932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007934:	b01d      	add	sp, #116	; 0x74
 8007936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793a:	ab03      	add	r3, sp, #12
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	462a      	mov	r2, r5
 8007940:	4638      	mov	r0, r7
 8007942:	4b06      	ldr	r3, [pc, #24]	; (800795c <_svfiprintf_r+0x1f8>)
 8007944:	a904      	add	r1, sp, #16
 8007946:	f7fe f8fd 	bl	8005b44 <_printf_i>
 800794a:	e7eb      	b.n	8007924 <_svfiprintf_r+0x1c0>
 800794c:	08009404 	.word	0x08009404
 8007950:	0800940a 	.word	0x0800940a
 8007954:	0800940e 	.word	0x0800940e
 8007958:	08005605 	.word	0x08005605
 800795c:	080076b1 	.word	0x080076b1

08007960 <__sflush_r>:
 8007960:	898a      	ldrh	r2, [r1, #12]
 8007962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007964:	4605      	mov	r5, r0
 8007966:	0710      	lsls	r0, r2, #28
 8007968:	460c      	mov	r4, r1
 800796a:	d457      	bmi.n	8007a1c <__sflush_r+0xbc>
 800796c:	684b      	ldr	r3, [r1, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dc04      	bgt.n	800797c <__sflush_r+0x1c>
 8007972:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007974:	2b00      	cmp	r3, #0
 8007976:	dc01      	bgt.n	800797c <__sflush_r+0x1c>
 8007978:	2000      	movs	r0, #0
 800797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800797c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800797e:	2e00      	cmp	r6, #0
 8007980:	d0fa      	beq.n	8007978 <__sflush_r+0x18>
 8007982:	2300      	movs	r3, #0
 8007984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007988:	682f      	ldr	r7, [r5, #0]
 800798a:	6a21      	ldr	r1, [r4, #32]
 800798c:	602b      	str	r3, [r5, #0]
 800798e:	d032      	beq.n	80079f6 <__sflush_r+0x96>
 8007990:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	075a      	lsls	r2, r3, #29
 8007996:	d505      	bpl.n	80079a4 <__sflush_r+0x44>
 8007998:	6863      	ldr	r3, [r4, #4]
 800799a:	1ac0      	subs	r0, r0, r3
 800799c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800799e:	b10b      	cbz	r3, 80079a4 <__sflush_r+0x44>
 80079a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079a2:	1ac0      	subs	r0, r0, r3
 80079a4:	2300      	movs	r3, #0
 80079a6:	4602      	mov	r2, r0
 80079a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079aa:	4628      	mov	r0, r5
 80079ac:	6a21      	ldr	r1, [r4, #32]
 80079ae:	47b0      	blx	r6
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	d106      	bne.n	80079c4 <__sflush_r+0x64>
 80079b6:	6829      	ldr	r1, [r5, #0]
 80079b8:	291d      	cmp	r1, #29
 80079ba:	d82b      	bhi.n	8007a14 <__sflush_r+0xb4>
 80079bc:	4a28      	ldr	r2, [pc, #160]	; (8007a60 <__sflush_r+0x100>)
 80079be:	410a      	asrs	r2, r1
 80079c0:	07d6      	lsls	r6, r2, #31
 80079c2:	d427      	bmi.n	8007a14 <__sflush_r+0xb4>
 80079c4:	2200      	movs	r2, #0
 80079c6:	6062      	str	r2, [r4, #4]
 80079c8:	6922      	ldr	r2, [r4, #16]
 80079ca:	04d9      	lsls	r1, r3, #19
 80079cc:	6022      	str	r2, [r4, #0]
 80079ce:	d504      	bpl.n	80079da <__sflush_r+0x7a>
 80079d0:	1c42      	adds	r2, r0, #1
 80079d2:	d101      	bne.n	80079d8 <__sflush_r+0x78>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b903      	cbnz	r3, 80079da <__sflush_r+0x7a>
 80079d8:	6560      	str	r0, [r4, #84]	; 0x54
 80079da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079dc:	602f      	str	r7, [r5, #0]
 80079de:	2900      	cmp	r1, #0
 80079e0:	d0ca      	beq.n	8007978 <__sflush_r+0x18>
 80079e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079e6:	4299      	cmp	r1, r3
 80079e8:	d002      	beq.n	80079f0 <__sflush_r+0x90>
 80079ea:	4628      	mov	r0, r5
 80079ec:	f7ff f9ec 	bl	8006dc8 <_free_r>
 80079f0:	2000      	movs	r0, #0
 80079f2:	6360      	str	r0, [r4, #52]	; 0x34
 80079f4:	e7c1      	b.n	800797a <__sflush_r+0x1a>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b0      	blx	r6
 80079fc:	1c41      	adds	r1, r0, #1
 80079fe:	d1c8      	bne.n	8007992 <__sflush_r+0x32>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0c5      	beq.n	8007992 <__sflush_r+0x32>
 8007a06:	2b1d      	cmp	r3, #29
 8007a08:	d001      	beq.n	8007a0e <__sflush_r+0xae>
 8007a0a:	2b16      	cmp	r3, #22
 8007a0c:	d101      	bne.n	8007a12 <__sflush_r+0xb2>
 8007a0e:	602f      	str	r7, [r5, #0]
 8007a10:	e7b2      	b.n	8007978 <__sflush_r+0x18>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	e7ae      	b.n	800797a <__sflush_r+0x1a>
 8007a1c:	690f      	ldr	r7, [r1, #16]
 8007a1e:	2f00      	cmp	r7, #0
 8007a20:	d0aa      	beq.n	8007978 <__sflush_r+0x18>
 8007a22:	0793      	lsls	r3, r2, #30
 8007a24:	bf18      	it	ne
 8007a26:	2300      	movne	r3, #0
 8007a28:	680e      	ldr	r6, [r1, #0]
 8007a2a:	bf08      	it	eq
 8007a2c:	694b      	ldreq	r3, [r1, #20]
 8007a2e:	1bf6      	subs	r6, r6, r7
 8007a30:	600f      	str	r7, [r1, #0]
 8007a32:	608b      	str	r3, [r1, #8]
 8007a34:	2e00      	cmp	r6, #0
 8007a36:	dd9f      	ble.n	8007978 <__sflush_r+0x18>
 8007a38:	4633      	mov	r3, r6
 8007a3a:	463a      	mov	r2, r7
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	6a21      	ldr	r1, [r4, #32]
 8007a40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a44:	47e0      	blx	ip
 8007a46:	2800      	cmp	r0, #0
 8007a48:	dc06      	bgt.n	8007a58 <__sflush_r+0xf8>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	e790      	b.n	800797a <__sflush_r+0x1a>
 8007a58:	4407      	add	r7, r0
 8007a5a:	1a36      	subs	r6, r6, r0
 8007a5c:	e7ea      	b.n	8007a34 <__sflush_r+0xd4>
 8007a5e:	bf00      	nop
 8007a60:	dfbffffe 	.word	0xdfbffffe

08007a64 <_fflush_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	690b      	ldr	r3, [r1, #16]
 8007a68:	4605      	mov	r5, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	b913      	cbnz	r3, 8007a74 <_fflush_r+0x10>
 8007a6e:	2500      	movs	r5, #0
 8007a70:	4628      	mov	r0, r5
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	b118      	cbz	r0, 8007a7e <_fflush_r+0x1a>
 8007a76:	6a03      	ldr	r3, [r0, #32]
 8007a78:	b90b      	cbnz	r3, 8007a7e <_fflush_r+0x1a>
 8007a7a:	f7fe fa11 	bl	8005ea0 <__sinit>
 8007a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0f3      	beq.n	8007a6e <_fflush_r+0xa>
 8007a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a88:	07d0      	lsls	r0, r2, #31
 8007a8a:	d404      	bmi.n	8007a96 <_fflush_r+0x32>
 8007a8c:	0599      	lsls	r1, r3, #22
 8007a8e:	d402      	bmi.n	8007a96 <_fflush_r+0x32>
 8007a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a92:	f7fe fb1c 	bl	80060ce <__retarget_lock_acquire_recursive>
 8007a96:	4628      	mov	r0, r5
 8007a98:	4621      	mov	r1, r4
 8007a9a:	f7ff ff61 	bl	8007960 <__sflush_r>
 8007a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	07da      	lsls	r2, r3, #31
 8007aa4:	d4e4      	bmi.n	8007a70 <_fflush_r+0xc>
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	059b      	lsls	r3, r3, #22
 8007aaa:	d4e1      	bmi.n	8007a70 <_fflush_r+0xc>
 8007aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aae:	f7fe fb0f 	bl	80060d0 <__retarget_lock_release_recursive>
 8007ab2:	e7dd      	b.n	8007a70 <_fflush_r+0xc>

08007ab4 <memmove>:
 8007ab4:	4288      	cmp	r0, r1
 8007ab6:	b510      	push	{r4, lr}
 8007ab8:	eb01 0402 	add.w	r4, r1, r2
 8007abc:	d902      	bls.n	8007ac4 <memmove+0x10>
 8007abe:	4284      	cmp	r4, r0
 8007ac0:	4623      	mov	r3, r4
 8007ac2:	d807      	bhi.n	8007ad4 <memmove+0x20>
 8007ac4:	1e43      	subs	r3, r0, #1
 8007ac6:	42a1      	cmp	r1, r4
 8007ac8:	d008      	beq.n	8007adc <memmove+0x28>
 8007aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ace:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ad2:	e7f8      	b.n	8007ac6 <memmove+0x12>
 8007ad4:	4601      	mov	r1, r0
 8007ad6:	4402      	add	r2, r0
 8007ad8:	428a      	cmp	r2, r1
 8007ada:	d100      	bne.n	8007ade <memmove+0x2a>
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ae6:	e7f7      	b.n	8007ad8 <memmove+0x24>

08007ae8 <_sbrk_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	2300      	movs	r3, #0
 8007aec:	4d05      	ldr	r5, [pc, #20]	; (8007b04 <_sbrk_r+0x1c>)
 8007aee:	4604      	mov	r4, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	f7fa fcc6 	bl	8002484 <_sbrk>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_sbrk_r+0x1a>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_sbrk_r+0x1a>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	200009c0 	.word	0x200009c0

08007b08 <memcpy>:
 8007b08:	440a      	add	r2, r1
 8007b0a:	4291      	cmp	r1, r2
 8007b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b10:	d100      	bne.n	8007b14 <memcpy+0xc>
 8007b12:	4770      	bx	lr
 8007b14:	b510      	push	{r4, lr}
 8007b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b20:	d1f9      	bne.n	8007b16 <memcpy+0xe>
 8007b22:	bd10      	pop	{r4, pc}

08007b24 <__assert_func>:
 8007b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b26:	4614      	mov	r4, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <__assert_func+0x2c>)
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68d8      	ldr	r0, [r3, #12]
 8007b32:	b14c      	cbz	r4, 8007b48 <__assert_func+0x24>
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <__assert_func+0x30>)
 8007b36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b3a:	9100      	str	r1, [sp, #0]
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	4906      	ldr	r1, [pc, #24]	; (8007b58 <__assert_func+0x34>)
 8007b40:	f000 f870 	bl	8007c24 <fiprintf>
 8007b44:	f000 f880 	bl	8007c48 <abort>
 8007b48:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <__assert_func+0x38>)
 8007b4a:	461c      	mov	r4, r3
 8007b4c:	e7f3      	b.n	8007b36 <__assert_func+0x12>
 8007b4e:	bf00      	nop
 8007b50:	2000006c 	.word	0x2000006c
 8007b54:	0800941f 	.word	0x0800941f
 8007b58:	0800942c 	.word	0x0800942c
 8007b5c:	0800945a 	.word	0x0800945a

08007b60 <_calloc_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	fba1 5402 	umull	r5, r4, r1, r2
 8007b66:	b934      	cbnz	r4, 8007b76 <_calloc_r+0x16>
 8007b68:	4629      	mov	r1, r5
 8007b6a:	f7ff f99d 	bl	8006ea8 <_malloc_r>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	b928      	cbnz	r0, 8007b7e <_calloc_r+0x1e>
 8007b72:	4630      	mov	r0, r6
 8007b74:	bd70      	pop	{r4, r5, r6, pc}
 8007b76:	220c      	movs	r2, #12
 8007b78:	2600      	movs	r6, #0
 8007b7a:	6002      	str	r2, [r0, #0]
 8007b7c:	e7f9      	b.n	8007b72 <_calloc_r+0x12>
 8007b7e:	462a      	mov	r2, r5
 8007b80:	4621      	mov	r1, r4
 8007b82:	f7fe fa26 	bl	8005fd2 <memset>
 8007b86:	e7f4      	b.n	8007b72 <_calloc_r+0x12>

08007b88 <__ascii_mbtowc>:
 8007b88:	b082      	sub	sp, #8
 8007b8a:	b901      	cbnz	r1, 8007b8e <__ascii_mbtowc+0x6>
 8007b8c:	a901      	add	r1, sp, #4
 8007b8e:	b142      	cbz	r2, 8007ba2 <__ascii_mbtowc+0x1a>
 8007b90:	b14b      	cbz	r3, 8007ba6 <__ascii_mbtowc+0x1e>
 8007b92:	7813      	ldrb	r3, [r2, #0]
 8007b94:	600b      	str	r3, [r1, #0]
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	1e10      	subs	r0, r2, #0
 8007b9a:	bf18      	it	ne
 8007b9c:	2001      	movne	r0, #1
 8007b9e:	b002      	add	sp, #8
 8007ba0:	4770      	bx	lr
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	e7fb      	b.n	8007b9e <__ascii_mbtowc+0x16>
 8007ba6:	f06f 0001 	mvn.w	r0, #1
 8007baa:	e7f8      	b.n	8007b9e <__ascii_mbtowc+0x16>

08007bac <_realloc_r>:
 8007bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	4614      	mov	r4, r2
 8007bb4:	460e      	mov	r6, r1
 8007bb6:	b921      	cbnz	r1, 8007bc2 <_realloc_r+0x16>
 8007bb8:	4611      	mov	r1, r2
 8007bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbe:	f7ff b973 	b.w	8006ea8 <_malloc_r>
 8007bc2:	b92a      	cbnz	r2, 8007bd0 <_realloc_r+0x24>
 8007bc4:	f7ff f900 	bl	8006dc8 <_free_r>
 8007bc8:	4625      	mov	r5, r4
 8007bca:	4628      	mov	r0, r5
 8007bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd0:	f000 f841 	bl	8007c56 <_malloc_usable_size_r>
 8007bd4:	4284      	cmp	r4, r0
 8007bd6:	4607      	mov	r7, r0
 8007bd8:	d802      	bhi.n	8007be0 <_realloc_r+0x34>
 8007bda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bde:	d812      	bhi.n	8007c06 <_realloc_r+0x5a>
 8007be0:	4621      	mov	r1, r4
 8007be2:	4640      	mov	r0, r8
 8007be4:	f7ff f960 	bl	8006ea8 <_malloc_r>
 8007be8:	4605      	mov	r5, r0
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d0ed      	beq.n	8007bca <_realloc_r+0x1e>
 8007bee:	42bc      	cmp	r4, r7
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	bf28      	it	cs
 8007bf6:	463a      	movcs	r2, r7
 8007bf8:	f7ff ff86 	bl	8007b08 <memcpy>
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4640      	mov	r0, r8
 8007c00:	f7ff f8e2 	bl	8006dc8 <_free_r>
 8007c04:	e7e1      	b.n	8007bca <_realloc_r+0x1e>
 8007c06:	4635      	mov	r5, r6
 8007c08:	e7df      	b.n	8007bca <_realloc_r+0x1e>

08007c0a <__ascii_wctomb>:
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	b141      	cbz	r1, 8007c22 <__ascii_wctomb+0x18>
 8007c10:	2aff      	cmp	r2, #255	; 0xff
 8007c12:	d904      	bls.n	8007c1e <__ascii_wctomb+0x14>
 8007c14:	228a      	movs	r2, #138	; 0x8a
 8007c16:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	4770      	bx	lr
 8007c1e:	2001      	movs	r0, #1
 8007c20:	700a      	strb	r2, [r1, #0]
 8007c22:	4770      	bx	lr

08007c24 <fiprintf>:
 8007c24:	b40e      	push	{r1, r2, r3}
 8007c26:	b503      	push	{r0, r1, lr}
 8007c28:	4601      	mov	r1, r0
 8007c2a:	ab03      	add	r3, sp, #12
 8007c2c:	4805      	ldr	r0, [pc, #20]	; (8007c44 <fiprintf+0x20>)
 8007c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c32:	6800      	ldr	r0, [r0, #0]
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	f000 f83d 	bl	8007cb4 <_vfiprintf_r>
 8007c3a:	b002      	add	sp, #8
 8007c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c40:	b003      	add	sp, #12
 8007c42:	4770      	bx	lr
 8007c44:	2000006c 	.word	0x2000006c

08007c48 <abort>:
 8007c48:	2006      	movs	r0, #6
 8007c4a:	b508      	push	{r3, lr}
 8007c4c:	f000 fa0a 	bl	8008064 <raise>
 8007c50:	2001      	movs	r0, #1
 8007c52:	f7fa fba4 	bl	800239e <_exit>

08007c56 <_malloc_usable_size_r>:
 8007c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c5a:	1f18      	subs	r0, r3, #4
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bfbc      	itt	lt
 8007c60:	580b      	ldrlt	r3, [r1, r0]
 8007c62:	18c0      	addlt	r0, r0, r3
 8007c64:	4770      	bx	lr

08007c66 <__sfputc_r>:
 8007c66:	6893      	ldr	r3, [r2, #8]
 8007c68:	b410      	push	{r4}
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	6093      	str	r3, [r2, #8]
 8007c70:	da07      	bge.n	8007c82 <__sfputc_r+0x1c>
 8007c72:	6994      	ldr	r4, [r2, #24]
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	db01      	blt.n	8007c7c <__sfputc_r+0x16>
 8007c78:	290a      	cmp	r1, #10
 8007c7a:	d102      	bne.n	8007c82 <__sfputc_r+0x1c>
 8007c7c:	bc10      	pop	{r4}
 8007c7e:	f000 b933 	b.w	8007ee8 <__swbuf_r>
 8007c82:	6813      	ldr	r3, [r2, #0]
 8007c84:	1c58      	adds	r0, r3, #1
 8007c86:	6010      	str	r0, [r2, #0]
 8007c88:	7019      	strb	r1, [r3, #0]
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	bc10      	pop	{r4}
 8007c8e:	4770      	bx	lr

08007c90 <__sfputs_r>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	4606      	mov	r6, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	4614      	mov	r4, r2
 8007c98:	18d5      	adds	r5, r2, r3
 8007c9a:	42ac      	cmp	r4, r5
 8007c9c:	d101      	bne.n	8007ca2 <__sfputs_r+0x12>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	e007      	b.n	8007cb2 <__sfputs_r+0x22>
 8007ca2:	463a      	mov	r2, r7
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007caa:	f7ff ffdc 	bl	8007c66 <__sfputc_r>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	d1f3      	bne.n	8007c9a <__sfputs_r+0xa>
 8007cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cb4 <_vfiprintf_r>:
 8007cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	460d      	mov	r5, r1
 8007cba:	4614      	mov	r4, r2
 8007cbc:	4698      	mov	r8, r3
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	b09d      	sub	sp, #116	; 0x74
 8007cc2:	b118      	cbz	r0, 8007ccc <_vfiprintf_r+0x18>
 8007cc4:	6a03      	ldr	r3, [r0, #32]
 8007cc6:	b90b      	cbnz	r3, 8007ccc <_vfiprintf_r+0x18>
 8007cc8:	f7fe f8ea 	bl	8005ea0 <__sinit>
 8007ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cce:	07d9      	lsls	r1, r3, #31
 8007cd0:	d405      	bmi.n	8007cde <_vfiprintf_r+0x2a>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	059a      	lsls	r2, r3, #22
 8007cd6:	d402      	bmi.n	8007cde <_vfiprintf_r+0x2a>
 8007cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cda:	f7fe f9f8 	bl	80060ce <__retarget_lock_acquire_recursive>
 8007cde:	89ab      	ldrh	r3, [r5, #12]
 8007ce0:	071b      	lsls	r3, r3, #28
 8007ce2:	d501      	bpl.n	8007ce8 <_vfiprintf_r+0x34>
 8007ce4:	692b      	ldr	r3, [r5, #16]
 8007ce6:	b99b      	cbnz	r3, 8007d10 <_vfiprintf_r+0x5c>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	f000 f93a 	bl	8007f64 <__swsetup_r>
 8007cf0:	b170      	cbz	r0, 8007d10 <_vfiprintf_r+0x5c>
 8007cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cf4:	07dc      	lsls	r4, r3, #31
 8007cf6:	d504      	bpl.n	8007d02 <_vfiprintf_r+0x4e>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfc:	b01d      	add	sp, #116	; 0x74
 8007cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	0598      	lsls	r0, r3, #22
 8007d06:	d4f7      	bmi.n	8007cf8 <_vfiprintf_r+0x44>
 8007d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d0a:	f7fe f9e1 	bl	80060d0 <__retarget_lock_release_recursive>
 8007d0e:	e7f3      	b.n	8007cf8 <_vfiprintf_r+0x44>
 8007d10:	2300      	movs	r3, #0
 8007d12:	9309      	str	r3, [sp, #36]	; 0x24
 8007d14:	2320      	movs	r3, #32
 8007d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d1a:	2330      	movs	r3, #48	; 0x30
 8007d1c:	f04f 0901 	mov.w	r9, #1
 8007d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d24:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007ed4 <_vfiprintf_r+0x220>
 8007d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d2c:	4623      	mov	r3, r4
 8007d2e:	469a      	mov	sl, r3
 8007d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d34:	b10a      	cbz	r2, 8007d3a <_vfiprintf_r+0x86>
 8007d36:	2a25      	cmp	r2, #37	; 0x25
 8007d38:	d1f9      	bne.n	8007d2e <_vfiprintf_r+0x7a>
 8007d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d3e:	d00b      	beq.n	8007d58 <_vfiprintf_r+0xa4>
 8007d40:	465b      	mov	r3, fp
 8007d42:	4622      	mov	r2, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	4630      	mov	r0, r6
 8007d48:	f7ff ffa2 	bl	8007c90 <__sfputs_r>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	f000 80a9 	beq.w	8007ea4 <_vfiprintf_r+0x1f0>
 8007d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d54:	445a      	add	r2, fp
 8007d56:	9209      	str	r2, [sp, #36]	; 0x24
 8007d58:	f89a 3000 	ldrb.w	r3, [sl]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 80a1 	beq.w	8007ea4 <_vfiprintf_r+0x1f0>
 8007d62:	2300      	movs	r3, #0
 8007d64:	f04f 32ff 	mov.w	r2, #4294967295
 8007d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d6c:	f10a 0a01 	add.w	sl, sl, #1
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	9307      	str	r3, [sp, #28]
 8007d74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d78:	931a      	str	r3, [sp, #104]	; 0x68
 8007d7a:	4654      	mov	r4, sl
 8007d7c:	2205      	movs	r2, #5
 8007d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d82:	4854      	ldr	r0, [pc, #336]	; (8007ed4 <_vfiprintf_r+0x220>)
 8007d84:	f7fe f9a5 	bl	80060d2 <memchr>
 8007d88:	9a04      	ldr	r2, [sp, #16]
 8007d8a:	b9d8      	cbnz	r0, 8007dc4 <_vfiprintf_r+0x110>
 8007d8c:	06d1      	lsls	r1, r2, #27
 8007d8e:	bf44      	itt	mi
 8007d90:	2320      	movmi	r3, #32
 8007d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d96:	0713      	lsls	r3, r2, #28
 8007d98:	bf44      	itt	mi
 8007d9a:	232b      	movmi	r3, #43	; 0x2b
 8007d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da0:	f89a 3000 	ldrb.w	r3, [sl]
 8007da4:	2b2a      	cmp	r3, #42	; 0x2a
 8007da6:	d015      	beq.n	8007dd4 <_vfiprintf_r+0x120>
 8007da8:	4654      	mov	r4, sl
 8007daa:	2000      	movs	r0, #0
 8007dac:	f04f 0c0a 	mov.w	ip, #10
 8007db0:	9a07      	ldr	r2, [sp, #28]
 8007db2:	4621      	mov	r1, r4
 8007db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007db8:	3b30      	subs	r3, #48	; 0x30
 8007dba:	2b09      	cmp	r3, #9
 8007dbc:	d94d      	bls.n	8007e5a <_vfiprintf_r+0x1a6>
 8007dbe:	b1b0      	cbz	r0, 8007dee <_vfiprintf_r+0x13a>
 8007dc0:	9207      	str	r2, [sp, #28]
 8007dc2:	e014      	b.n	8007dee <_vfiprintf_r+0x13a>
 8007dc4:	eba0 0308 	sub.w	r3, r0, r8
 8007dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	46a2      	mov	sl, r4
 8007dd0:	9304      	str	r3, [sp, #16]
 8007dd2:	e7d2      	b.n	8007d7a <_vfiprintf_r+0xc6>
 8007dd4:	9b03      	ldr	r3, [sp, #12]
 8007dd6:	1d19      	adds	r1, r3, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	9103      	str	r1, [sp, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	bfbb      	ittet	lt
 8007de0:	425b      	neglt	r3, r3
 8007de2:	f042 0202 	orrlt.w	r2, r2, #2
 8007de6:	9307      	strge	r3, [sp, #28]
 8007de8:	9307      	strlt	r3, [sp, #28]
 8007dea:	bfb8      	it	lt
 8007dec:	9204      	strlt	r2, [sp, #16]
 8007dee:	7823      	ldrb	r3, [r4, #0]
 8007df0:	2b2e      	cmp	r3, #46	; 0x2e
 8007df2:	d10c      	bne.n	8007e0e <_vfiprintf_r+0x15a>
 8007df4:	7863      	ldrb	r3, [r4, #1]
 8007df6:	2b2a      	cmp	r3, #42	; 0x2a
 8007df8:	d134      	bne.n	8007e64 <_vfiprintf_r+0x1b0>
 8007dfa:	9b03      	ldr	r3, [sp, #12]
 8007dfc:	3402      	adds	r4, #2
 8007dfe:	1d1a      	adds	r2, r3, #4
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	9203      	str	r2, [sp, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bfb8      	it	lt
 8007e08:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e0c:	9305      	str	r3, [sp, #20]
 8007e0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ed8 <_vfiprintf_r+0x224>
 8007e12:	2203      	movs	r2, #3
 8007e14:	4650      	mov	r0, sl
 8007e16:	7821      	ldrb	r1, [r4, #0]
 8007e18:	f7fe f95b 	bl	80060d2 <memchr>
 8007e1c:	b138      	cbz	r0, 8007e2e <_vfiprintf_r+0x17a>
 8007e1e:	2240      	movs	r2, #64	; 0x40
 8007e20:	9b04      	ldr	r3, [sp, #16]
 8007e22:	eba0 000a 	sub.w	r0, r0, sl
 8007e26:	4082      	lsls	r2, r0
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	3401      	adds	r4, #1
 8007e2c:	9304      	str	r3, [sp, #16]
 8007e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e32:	2206      	movs	r2, #6
 8007e34:	4829      	ldr	r0, [pc, #164]	; (8007edc <_vfiprintf_r+0x228>)
 8007e36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e3a:	f7fe f94a 	bl	80060d2 <memchr>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d03f      	beq.n	8007ec2 <_vfiprintf_r+0x20e>
 8007e42:	4b27      	ldr	r3, [pc, #156]	; (8007ee0 <_vfiprintf_r+0x22c>)
 8007e44:	bb1b      	cbnz	r3, 8007e8e <_vfiprintf_r+0x1da>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	3307      	adds	r3, #7
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	3308      	adds	r3, #8
 8007e50:	9303      	str	r3, [sp, #12]
 8007e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e54:	443b      	add	r3, r7
 8007e56:	9309      	str	r3, [sp, #36]	; 0x24
 8007e58:	e768      	b.n	8007d2c <_vfiprintf_r+0x78>
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e62:	e7a6      	b.n	8007db2 <_vfiprintf_r+0xfe>
 8007e64:	2300      	movs	r3, #0
 8007e66:	f04f 0c0a 	mov.w	ip, #10
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	3401      	adds	r4, #1
 8007e6e:	9305      	str	r3, [sp, #20]
 8007e70:	4620      	mov	r0, r4
 8007e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e76:	3a30      	subs	r2, #48	; 0x30
 8007e78:	2a09      	cmp	r2, #9
 8007e7a:	d903      	bls.n	8007e84 <_vfiprintf_r+0x1d0>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0c6      	beq.n	8007e0e <_vfiprintf_r+0x15a>
 8007e80:	9105      	str	r1, [sp, #20]
 8007e82:	e7c4      	b.n	8007e0e <_vfiprintf_r+0x15a>
 8007e84:	4604      	mov	r4, r0
 8007e86:	2301      	movs	r3, #1
 8007e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e8c:	e7f0      	b.n	8007e70 <_vfiprintf_r+0x1bc>
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	462a      	mov	r2, r5
 8007e94:	4630      	mov	r0, r6
 8007e96:	4b13      	ldr	r3, [pc, #76]	; (8007ee4 <_vfiprintf_r+0x230>)
 8007e98:	a904      	add	r1, sp, #16
 8007e9a:	f7fd fbb3 	bl	8005604 <_printf_float>
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	1c78      	adds	r0, r7, #1
 8007ea2:	d1d6      	bne.n	8007e52 <_vfiprintf_r+0x19e>
 8007ea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ea6:	07d9      	lsls	r1, r3, #31
 8007ea8:	d405      	bmi.n	8007eb6 <_vfiprintf_r+0x202>
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	059a      	lsls	r2, r3, #22
 8007eae:	d402      	bmi.n	8007eb6 <_vfiprintf_r+0x202>
 8007eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eb2:	f7fe f90d 	bl	80060d0 <__retarget_lock_release_recursive>
 8007eb6:	89ab      	ldrh	r3, [r5, #12]
 8007eb8:	065b      	lsls	r3, r3, #25
 8007eba:	f53f af1d 	bmi.w	8007cf8 <_vfiprintf_r+0x44>
 8007ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ec0:	e71c      	b.n	8007cfc <_vfiprintf_r+0x48>
 8007ec2:	ab03      	add	r3, sp, #12
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	462a      	mov	r2, r5
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <_vfiprintf_r+0x230>)
 8007ecc:	a904      	add	r1, sp, #16
 8007ece:	f7fd fe39 	bl	8005b44 <_printf_i>
 8007ed2:	e7e4      	b.n	8007e9e <_vfiprintf_r+0x1ea>
 8007ed4:	08009404 	.word	0x08009404
 8007ed8:	0800940a 	.word	0x0800940a
 8007edc:	0800940e 	.word	0x0800940e
 8007ee0:	08005605 	.word	0x08005605
 8007ee4:	08007c91 	.word	0x08007c91

08007ee8 <__swbuf_r>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	460e      	mov	r6, r1
 8007eec:	4614      	mov	r4, r2
 8007eee:	4605      	mov	r5, r0
 8007ef0:	b118      	cbz	r0, 8007efa <__swbuf_r+0x12>
 8007ef2:	6a03      	ldr	r3, [r0, #32]
 8007ef4:	b90b      	cbnz	r3, 8007efa <__swbuf_r+0x12>
 8007ef6:	f7fd ffd3 	bl	8005ea0 <__sinit>
 8007efa:	69a3      	ldr	r3, [r4, #24]
 8007efc:	60a3      	str	r3, [r4, #8]
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	071a      	lsls	r2, r3, #28
 8007f02:	d525      	bpl.n	8007f50 <__swbuf_r+0x68>
 8007f04:	6923      	ldr	r3, [r4, #16]
 8007f06:	b31b      	cbz	r3, 8007f50 <__swbuf_r+0x68>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	6922      	ldr	r2, [r4, #16]
 8007f0c:	b2f6      	uxtb	r6, r6
 8007f0e:	1a98      	subs	r0, r3, r2
 8007f10:	6963      	ldr	r3, [r4, #20]
 8007f12:	4637      	mov	r7, r6
 8007f14:	4283      	cmp	r3, r0
 8007f16:	dc04      	bgt.n	8007f22 <__swbuf_r+0x3a>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f7ff fda2 	bl	8007a64 <_fflush_r>
 8007f20:	b9e0      	cbnz	r0, 8007f5c <__swbuf_r+0x74>
 8007f22:	68a3      	ldr	r3, [r4, #8]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	60a3      	str	r3, [r4, #8]
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	6022      	str	r2, [r4, #0]
 8007f2e:	701e      	strb	r6, [r3, #0]
 8007f30:	6962      	ldr	r2, [r4, #20]
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d004      	beq.n	8007f42 <__swbuf_r+0x5a>
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	07db      	lsls	r3, r3, #31
 8007f3c:	d506      	bpl.n	8007f4c <__swbuf_r+0x64>
 8007f3e:	2e0a      	cmp	r6, #10
 8007f40:	d104      	bne.n	8007f4c <__swbuf_r+0x64>
 8007f42:	4621      	mov	r1, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	f7ff fd8d 	bl	8007a64 <_fflush_r>
 8007f4a:	b938      	cbnz	r0, 8007f5c <__swbuf_r+0x74>
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f50:	4621      	mov	r1, r4
 8007f52:	4628      	mov	r0, r5
 8007f54:	f000 f806 	bl	8007f64 <__swsetup_r>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d0d5      	beq.n	8007f08 <__swbuf_r+0x20>
 8007f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f60:	e7f4      	b.n	8007f4c <__swbuf_r+0x64>
	...

08007f64 <__swsetup_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4b2a      	ldr	r3, [pc, #168]	; (8008010 <__swsetup_r+0xac>)
 8007f68:	4605      	mov	r5, r0
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	b118      	cbz	r0, 8007f78 <__swsetup_r+0x14>
 8007f70:	6a03      	ldr	r3, [r0, #32]
 8007f72:	b90b      	cbnz	r3, 8007f78 <__swsetup_r+0x14>
 8007f74:	f7fd ff94 	bl	8005ea0 <__sinit>
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f7e:	0718      	lsls	r0, r3, #28
 8007f80:	d422      	bmi.n	8007fc8 <__swsetup_r+0x64>
 8007f82:	06d9      	lsls	r1, r3, #27
 8007f84:	d407      	bmi.n	8007f96 <__swsetup_r+0x32>
 8007f86:	2309      	movs	r3, #9
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	e034      	b.n	8008000 <__swsetup_r+0x9c>
 8007f96:	0758      	lsls	r0, r3, #29
 8007f98:	d512      	bpl.n	8007fc0 <__swsetup_r+0x5c>
 8007f9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f9c:	b141      	cbz	r1, 8007fb0 <__swsetup_r+0x4c>
 8007f9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	d002      	beq.n	8007fac <__swsetup_r+0x48>
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f7fe ff0e 	bl	8006dc8 <_free_r>
 8007fac:	2300      	movs	r3, #0
 8007fae:	6363      	str	r3, [r4, #52]	; 0x34
 8007fb0:	89a3      	ldrh	r3, [r4, #12]
 8007fb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fb6:	81a3      	strh	r3, [r4, #12]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	6063      	str	r3, [r4, #4]
 8007fbc:	6923      	ldr	r3, [r4, #16]
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	f043 0308 	orr.w	r3, r3, #8
 8007fc6:	81a3      	strh	r3, [r4, #12]
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	b94b      	cbnz	r3, 8007fe0 <__swsetup_r+0x7c>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd6:	d003      	beq.n	8007fe0 <__swsetup_r+0x7c>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f000 f883 	bl	80080e6 <__smakebuf_r>
 8007fe0:	89a0      	ldrh	r0, [r4, #12]
 8007fe2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fe6:	f010 0301 	ands.w	r3, r0, #1
 8007fea:	d00a      	beq.n	8008002 <__swsetup_r+0x9e>
 8007fec:	2300      	movs	r3, #0
 8007fee:	60a3      	str	r3, [r4, #8]
 8007ff0:	6963      	ldr	r3, [r4, #20]
 8007ff2:	425b      	negs	r3, r3
 8007ff4:	61a3      	str	r3, [r4, #24]
 8007ff6:	6923      	ldr	r3, [r4, #16]
 8007ff8:	b943      	cbnz	r3, 800800c <__swsetup_r+0xa8>
 8007ffa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ffe:	d1c4      	bne.n	8007f8a <__swsetup_r+0x26>
 8008000:	bd38      	pop	{r3, r4, r5, pc}
 8008002:	0781      	lsls	r1, r0, #30
 8008004:	bf58      	it	pl
 8008006:	6963      	ldrpl	r3, [r4, #20]
 8008008:	60a3      	str	r3, [r4, #8]
 800800a:	e7f4      	b.n	8007ff6 <__swsetup_r+0x92>
 800800c:	2000      	movs	r0, #0
 800800e:	e7f7      	b.n	8008000 <__swsetup_r+0x9c>
 8008010:	2000006c 	.word	0x2000006c

08008014 <_raise_r>:
 8008014:	291f      	cmp	r1, #31
 8008016:	b538      	push	{r3, r4, r5, lr}
 8008018:	4604      	mov	r4, r0
 800801a:	460d      	mov	r5, r1
 800801c:	d904      	bls.n	8008028 <_raise_r+0x14>
 800801e:	2316      	movs	r3, #22
 8008020:	6003      	str	r3, [r0, #0]
 8008022:	f04f 30ff 	mov.w	r0, #4294967295
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800802a:	b112      	cbz	r2, 8008032 <_raise_r+0x1e>
 800802c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008030:	b94b      	cbnz	r3, 8008046 <_raise_r+0x32>
 8008032:	4620      	mov	r0, r4
 8008034:	f000 f830 	bl	8008098 <_getpid_r>
 8008038:	462a      	mov	r2, r5
 800803a:	4601      	mov	r1, r0
 800803c:	4620      	mov	r0, r4
 800803e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008042:	f000 b817 	b.w	8008074 <_kill_r>
 8008046:	2b01      	cmp	r3, #1
 8008048:	d00a      	beq.n	8008060 <_raise_r+0x4c>
 800804a:	1c59      	adds	r1, r3, #1
 800804c:	d103      	bne.n	8008056 <_raise_r+0x42>
 800804e:	2316      	movs	r3, #22
 8008050:	6003      	str	r3, [r0, #0]
 8008052:	2001      	movs	r0, #1
 8008054:	e7e7      	b.n	8008026 <_raise_r+0x12>
 8008056:	2400      	movs	r4, #0
 8008058:	4628      	mov	r0, r5
 800805a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800805e:	4798      	blx	r3
 8008060:	2000      	movs	r0, #0
 8008062:	e7e0      	b.n	8008026 <_raise_r+0x12>

08008064 <raise>:
 8008064:	4b02      	ldr	r3, [pc, #8]	; (8008070 <raise+0xc>)
 8008066:	4601      	mov	r1, r0
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	f7ff bfd3 	b.w	8008014 <_raise_r>
 800806e:	bf00      	nop
 8008070:	2000006c 	.word	0x2000006c

08008074 <_kill_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	2300      	movs	r3, #0
 8008078:	4d06      	ldr	r5, [pc, #24]	; (8008094 <_kill_r+0x20>)
 800807a:	4604      	mov	r4, r0
 800807c:	4608      	mov	r0, r1
 800807e:	4611      	mov	r1, r2
 8008080:	602b      	str	r3, [r5, #0]
 8008082:	f7fa f97c 	bl	800237e <_kill>
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	d102      	bne.n	8008090 <_kill_r+0x1c>
 800808a:	682b      	ldr	r3, [r5, #0]
 800808c:	b103      	cbz	r3, 8008090 <_kill_r+0x1c>
 800808e:	6023      	str	r3, [r4, #0]
 8008090:	bd38      	pop	{r3, r4, r5, pc}
 8008092:	bf00      	nop
 8008094:	200009c0 	.word	0x200009c0

08008098 <_getpid_r>:
 8008098:	f7fa b96a 	b.w	8002370 <_getpid>

0800809c <__swhatbuf_r>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	460c      	mov	r4, r1
 80080a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a4:	4615      	mov	r5, r2
 80080a6:	2900      	cmp	r1, #0
 80080a8:	461e      	mov	r6, r3
 80080aa:	b096      	sub	sp, #88	; 0x58
 80080ac:	da0c      	bge.n	80080c8 <__swhatbuf_r+0x2c>
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	2100      	movs	r1, #0
 80080b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080b6:	bf0c      	ite	eq
 80080b8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080bc:	2340      	movne	r3, #64	; 0x40
 80080be:	2000      	movs	r0, #0
 80080c0:	6031      	str	r1, [r6, #0]
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	b016      	add	sp, #88	; 0x58
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	466a      	mov	r2, sp
 80080ca:	f000 f849 	bl	8008160 <_fstat_r>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	dbed      	blt.n	80080ae <__swhatbuf_r+0x12>
 80080d2:	9901      	ldr	r1, [sp, #4]
 80080d4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80080d8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80080dc:	4259      	negs	r1, r3
 80080de:	4159      	adcs	r1, r3
 80080e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080e4:	e7eb      	b.n	80080be <__swhatbuf_r+0x22>

080080e6 <__smakebuf_r>:
 80080e6:	898b      	ldrh	r3, [r1, #12]
 80080e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080ea:	079d      	lsls	r5, r3, #30
 80080ec:	4606      	mov	r6, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	d507      	bpl.n	8008102 <__smakebuf_r+0x1c>
 80080f2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080f6:	6023      	str	r3, [r4, #0]
 80080f8:	6123      	str	r3, [r4, #16]
 80080fa:	2301      	movs	r3, #1
 80080fc:	6163      	str	r3, [r4, #20]
 80080fe:	b002      	add	sp, #8
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	466a      	mov	r2, sp
 8008104:	ab01      	add	r3, sp, #4
 8008106:	f7ff ffc9 	bl	800809c <__swhatbuf_r>
 800810a:	9900      	ldr	r1, [sp, #0]
 800810c:	4605      	mov	r5, r0
 800810e:	4630      	mov	r0, r6
 8008110:	f7fe feca 	bl	8006ea8 <_malloc_r>
 8008114:	b948      	cbnz	r0, 800812a <__smakebuf_r+0x44>
 8008116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811a:	059a      	lsls	r2, r3, #22
 800811c:	d4ef      	bmi.n	80080fe <__smakebuf_r+0x18>
 800811e:	f023 0303 	bic.w	r3, r3, #3
 8008122:	f043 0302 	orr.w	r3, r3, #2
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	e7e3      	b.n	80080f2 <__smakebuf_r+0xc>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	6020      	str	r0, [r4, #0]
 800812e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	9b00      	ldr	r3, [sp, #0]
 8008136:	6120      	str	r0, [r4, #16]
 8008138:	6163      	str	r3, [r4, #20]
 800813a:	9b01      	ldr	r3, [sp, #4]
 800813c:	b15b      	cbz	r3, 8008156 <__smakebuf_r+0x70>
 800813e:	4630      	mov	r0, r6
 8008140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008144:	f000 f81e 	bl	8008184 <_isatty_r>
 8008148:	b128      	cbz	r0, 8008156 <__smakebuf_r+0x70>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f023 0303 	bic.w	r3, r3, #3
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	81a3      	strh	r3, [r4, #12]
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	431d      	orrs	r5, r3
 800815a:	81a5      	strh	r5, [r4, #12]
 800815c:	e7cf      	b.n	80080fe <__smakebuf_r+0x18>
	...

08008160 <_fstat_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	2300      	movs	r3, #0
 8008164:	4d06      	ldr	r5, [pc, #24]	; (8008180 <_fstat_r+0x20>)
 8008166:	4604      	mov	r4, r0
 8008168:	4608      	mov	r0, r1
 800816a:	4611      	mov	r1, r2
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	f7fa f964 	bl	800243a <_fstat>
 8008172:	1c43      	adds	r3, r0, #1
 8008174:	d102      	bne.n	800817c <_fstat_r+0x1c>
 8008176:	682b      	ldr	r3, [r5, #0]
 8008178:	b103      	cbz	r3, 800817c <_fstat_r+0x1c>
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	bf00      	nop
 8008180:	200009c0 	.word	0x200009c0

08008184 <_isatty_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	2300      	movs	r3, #0
 8008188:	4d05      	ldr	r5, [pc, #20]	; (80081a0 <_isatty_r+0x1c>)
 800818a:	4604      	mov	r4, r0
 800818c:	4608      	mov	r0, r1
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	f7fa f962 	bl	8002458 <_isatty>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_isatty_r+0x1a>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_isatty_r+0x1a>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	200009c0 	.word	0x200009c0

080081a4 <pow>:
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	4614      	mov	r4, r2
 80081aa:	461d      	mov	r5, r3
 80081ac:	4680      	mov	r8, r0
 80081ae:	4689      	mov	r9, r1
 80081b0:	f000 f866 	bl	8008280 <__ieee754_pow>
 80081b4:	4622      	mov	r2, r4
 80081b6:	4606      	mov	r6, r0
 80081b8:	460f      	mov	r7, r1
 80081ba:	462b      	mov	r3, r5
 80081bc:	4620      	mov	r0, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	f7f8 fc24 	bl	8000a0c <__aeabi_dcmpun>
 80081c4:	bbc8      	cbnz	r0, 800823a <pow+0x96>
 80081c6:	2200      	movs	r2, #0
 80081c8:	2300      	movs	r3, #0
 80081ca:	4640      	mov	r0, r8
 80081cc:	4649      	mov	r1, r9
 80081ce:	f7f8 fbeb 	bl	80009a8 <__aeabi_dcmpeq>
 80081d2:	b1b8      	cbz	r0, 8008204 <pow+0x60>
 80081d4:	2200      	movs	r2, #0
 80081d6:	2300      	movs	r3, #0
 80081d8:	4620      	mov	r0, r4
 80081da:	4629      	mov	r1, r5
 80081dc:	f7f8 fbe4 	bl	80009a8 <__aeabi_dcmpeq>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d141      	bne.n	8008268 <pow+0xc4>
 80081e4:	4620      	mov	r0, r4
 80081e6:	4629      	mov	r1, r5
 80081e8:	f000 f844 	bl	8008274 <finite>
 80081ec:	b328      	cbz	r0, 800823a <pow+0x96>
 80081ee:	2200      	movs	r2, #0
 80081f0:	2300      	movs	r3, #0
 80081f2:	4620      	mov	r0, r4
 80081f4:	4629      	mov	r1, r5
 80081f6:	f7f8 fbe1 	bl	80009bc <__aeabi_dcmplt>
 80081fa:	b1f0      	cbz	r0, 800823a <pow+0x96>
 80081fc:	f7fd ff3c 	bl	8006078 <__errno>
 8008200:	2322      	movs	r3, #34	; 0x22
 8008202:	e019      	b.n	8008238 <pow+0x94>
 8008204:	4630      	mov	r0, r6
 8008206:	4639      	mov	r1, r7
 8008208:	f000 f834 	bl	8008274 <finite>
 800820c:	b9c8      	cbnz	r0, 8008242 <pow+0x9e>
 800820e:	4640      	mov	r0, r8
 8008210:	4649      	mov	r1, r9
 8008212:	f000 f82f 	bl	8008274 <finite>
 8008216:	b1a0      	cbz	r0, 8008242 <pow+0x9e>
 8008218:	4620      	mov	r0, r4
 800821a:	4629      	mov	r1, r5
 800821c:	f000 f82a 	bl	8008274 <finite>
 8008220:	b178      	cbz	r0, 8008242 <pow+0x9e>
 8008222:	4632      	mov	r2, r6
 8008224:	463b      	mov	r3, r7
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7f8 fbef 	bl	8000a0c <__aeabi_dcmpun>
 800822e:	2800      	cmp	r0, #0
 8008230:	d0e4      	beq.n	80081fc <pow+0x58>
 8008232:	f7fd ff21 	bl	8006078 <__errno>
 8008236:	2321      	movs	r3, #33	; 0x21
 8008238:	6003      	str	r3, [r0, #0]
 800823a:	4630      	mov	r0, r6
 800823c:	4639      	mov	r1, r7
 800823e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008242:	2200      	movs	r2, #0
 8008244:	2300      	movs	r3, #0
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f8 fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800824e:	2800      	cmp	r0, #0
 8008250:	d0f3      	beq.n	800823a <pow+0x96>
 8008252:	4640      	mov	r0, r8
 8008254:	4649      	mov	r1, r9
 8008256:	f000 f80d 	bl	8008274 <finite>
 800825a:	2800      	cmp	r0, #0
 800825c:	d0ed      	beq.n	800823a <pow+0x96>
 800825e:	4620      	mov	r0, r4
 8008260:	4629      	mov	r1, r5
 8008262:	f000 f807 	bl	8008274 <finite>
 8008266:	e7c8      	b.n	80081fa <pow+0x56>
 8008268:	2600      	movs	r6, #0
 800826a:	4f01      	ldr	r7, [pc, #4]	; (8008270 <pow+0xcc>)
 800826c:	e7e5      	b.n	800823a <pow+0x96>
 800826e:	bf00      	nop
 8008270:	3ff00000 	.word	0x3ff00000

08008274 <finite>:
 8008274:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008278:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800827c:	0fc0      	lsrs	r0, r0, #31
 800827e:	4770      	bx	lr

08008280 <__ieee754_pow>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	b093      	sub	sp, #76	; 0x4c
 8008286:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800828a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800828e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008292:	4689      	mov	r9, r1
 8008294:	ea56 0102 	orrs.w	r1, r6, r2
 8008298:	4680      	mov	r8, r0
 800829a:	d111      	bne.n	80082c0 <__ieee754_pow+0x40>
 800829c:	1803      	adds	r3, r0, r0
 800829e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80082a2:	4152      	adcs	r2, r2
 80082a4:	4299      	cmp	r1, r3
 80082a6:	4b82      	ldr	r3, [pc, #520]	; (80084b0 <__ieee754_pow+0x230>)
 80082a8:	4193      	sbcs	r3, r2
 80082aa:	f080 84ba 	bcs.w	8008c22 <__ieee754_pow+0x9a2>
 80082ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f7 ff59 	bl	800016c <__adddf3>
 80082ba:	4683      	mov	fp, r0
 80082bc:	468c      	mov	ip, r1
 80082be:	e06f      	b.n	80083a0 <__ieee754_pow+0x120>
 80082c0:	4b7c      	ldr	r3, [pc, #496]	; (80084b4 <__ieee754_pow+0x234>)
 80082c2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80082c6:	429c      	cmp	r4, r3
 80082c8:	464d      	mov	r5, r9
 80082ca:	4682      	mov	sl, r0
 80082cc:	dc06      	bgt.n	80082dc <__ieee754_pow+0x5c>
 80082ce:	d101      	bne.n	80082d4 <__ieee754_pow+0x54>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d1ec      	bne.n	80082ae <__ieee754_pow+0x2e>
 80082d4:	429e      	cmp	r6, r3
 80082d6:	dc01      	bgt.n	80082dc <__ieee754_pow+0x5c>
 80082d8:	d10f      	bne.n	80082fa <__ieee754_pow+0x7a>
 80082da:	b172      	cbz	r2, 80082fa <__ieee754_pow+0x7a>
 80082dc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80082e0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80082e4:	ea55 050a 	orrs.w	r5, r5, sl
 80082e8:	d1e1      	bne.n	80082ae <__ieee754_pow+0x2e>
 80082ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80082ee:	18db      	adds	r3, r3, r3
 80082f0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80082f4:	4152      	adcs	r2, r2
 80082f6:	429d      	cmp	r5, r3
 80082f8:	e7d5      	b.n	80082a6 <__ieee754_pow+0x26>
 80082fa:	2d00      	cmp	r5, #0
 80082fc:	da39      	bge.n	8008372 <__ieee754_pow+0xf2>
 80082fe:	4b6e      	ldr	r3, [pc, #440]	; (80084b8 <__ieee754_pow+0x238>)
 8008300:	429e      	cmp	r6, r3
 8008302:	dc52      	bgt.n	80083aa <__ieee754_pow+0x12a>
 8008304:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008308:	429e      	cmp	r6, r3
 800830a:	f340 849d 	ble.w	8008c48 <__ieee754_pow+0x9c8>
 800830e:	1533      	asrs	r3, r6, #20
 8008310:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008314:	2b14      	cmp	r3, #20
 8008316:	dd0f      	ble.n	8008338 <__ieee754_pow+0xb8>
 8008318:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800831c:	fa22 f103 	lsr.w	r1, r2, r3
 8008320:	fa01 f303 	lsl.w	r3, r1, r3
 8008324:	4293      	cmp	r3, r2
 8008326:	f040 848f 	bne.w	8008c48 <__ieee754_pow+0x9c8>
 800832a:	f001 0101 	and.w	r1, r1, #1
 800832e:	f1c1 0302 	rsb	r3, r1, #2
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	b182      	cbz	r2, 8008358 <__ieee754_pow+0xd8>
 8008336:	e05d      	b.n	80083f4 <__ieee754_pow+0x174>
 8008338:	2a00      	cmp	r2, #0
 800833a:	d159      	bne.n	80083f0 <__ieee754_pow+0x170>
 800833c:	f1c3 0314 	rsb	r3, r3, #20
 8008340:	fa46 f103 	asr.w	r1, r6, r3
 8008344:	fa01 f303 	lsl.w	r3, r1, r3
 8008348:	42b3      	cmp	r3, r6
 800834a:	f040 847a 	bne.w	8008c42 <__ieee754_pow+0x9c2>
 800834e:	f001 0101 	and.w	r1, r1, #1
 8008352:	f1c1 0302 	rsb	r3, r1, #2
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	4b58      	ldr	r3, [pc, #352]	; (80084bc <__ieee754_pow+0x23c>)
 800835a:	429e      	cmp	r6, r3
 800835c:	d132      	bne.n	80083c4 <__ieee754_pow+0x144>
 800835e:	2f00      	cmp	r7, #0
 8008360:	f280 846b 	bge.w	8008c3a <__ieee754_pow+0x9ba>
 8008364:	4642      	mov	r2, r8
 8008366:	464b      	mov	r3, r9
 8008368:	2000      	movs	r0, #0
 800836a:	4954      	ldr	r1, [pc, #336]	; (80084bc <__ieee754_pow+0x23c>)
 800836c:	f7f8 f9de 	bl	800072c <__aeabi_ddiv>
 8008370:	e7a3      	b.n	80082ba <__ieee754_pow+0x3a>
 8008372:	2300      	movs	r3, #0
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	2a00      	cmp	r2, #0
 8008378:	d13c      	bne.n	80083f4 <__ieee754_pow+0x174>
 800837a:	4b4e      	ldr	r3, [pc, #312]	; (80084b4 <__ieee754_pow+0x234>)
 800837c:	429e      	cmp	r6, r3
 800837e:	d1eb      	bne.n	8008358 <__ieee754_pow+0xd8>
 8008380:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008384:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008388:	ea53 030a 	orrs.w	r3, r3, sl
 800838c:	f000 8449 	beq.w	8008c22 <__ieee754_pow+0x9a2>
 8008390:	4b4b      	ldr	r3, [pc, #300]	; (80084c0 <__ieee754_pow+0x240>)
 8008392:	429c      	cmp	r4, r3
 8008394:	dd0b      	ble.n	80083ae <__ieee754_pow+0x12e>
 8008396:	2f00      	cmp	r7, #0
 8008398:	f2c0 8449 	blt.w	8008c2e <__ieee754_pow+0x9ae>
 800839c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80083a0:	4658      	mov	r0, fp
 80083a2:	4661      	mov	r1, ip
 80083a4:	b013      	add	sp, #76	; 0x4c
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083aa:	2302      	movs	r3, #2
 80083ac:	e7e2      	b.n	8008374 <__ieee754_pow+0xf4>
 80083ae:	2f00      	cmp	r7, #0
 80083b0:	f04f 0b00 	mov.w	fp, #0
 80083b4:	f04f 0c00 	mov.w	ip, #0
 80083b8:	daf2      	bge.n	80083a0 <__ieee754_pow+0x120>
 80083ba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80083be:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80083c2:	e7ed      	b.n	80083a0 <__ieee754_pow+0x120>
 80083c4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80083c8:	d106      	bne.n	80083d8 <__ieee754_pow+0x158>
 80083ca:	4642      	mov	r2, r8
 80083cc:	464b      	mov	r3, r9
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f8 f881 	bl	80004d8 <__aeabi_dmul>
 80083d6:	e770      	b.n	80082ba <__ieee754_pow+0x3a>
 80083d8:	4b3a      	ldr	r3, [pc, #232]	; (80084c4 <__ieee754_pow+0x244>)
 80083da:	429f      	cmp	r7, r3
 80083dc:	d10a      	bne.n	80083f4 <__ieee754_pow+0x174>
 80083de:	2d00      	cmp	r5, #0
 80083e0:	db08      	blt.n	80083f4 <__ieee754_pow+0x174>
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	b013      	add	sp, #76	; 0x4c
 80083e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	f000 bd0a 	b.w	8008e04 <__ieee754_sqrt>
 80083f0:	2300      	movs	r3, #0
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	4640      	mov	r0, r8
 80083f6:	4649      	mov	r1, r9
 80083f8:	f000 fc58 	bl	8008cac <fabs>
 80083fc:	4683      	mov	fp, r0
 80083fe:	468c      	mov	ip, r1
 8008400:	f1ba 0f00 	cmp.w	sl, #0
 8008404:	d128      	bne.n	8008458 <__ieee754_pow+0x1d8>
 8008406:	b124      	cbz	r4, 8008412 <__ieee754_pow+0x192>
 8008408:	4b2c      	ldr	r3, [pc, #176]	; (80084bc <__ieee754_pow+0x23c>)
 800840a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800840e:	429a      	cmp	r2, r3
 8008410:	d122      	bne.n	8008458 <__ieee754_pow+0x1d8>
 8008412:	2f00      	cmp	r7, #0
 8008414:	da07      	bge.n	8008426 <__ieee754_pow+0x1a6>
 8008416:	465a      	mov	r2, fp
 8008418:	4663      	mov	r3, ip
 800841a:	2000      	movs	r0, #0
 800841c:	4927      	ldr	r1, [pc, #156]	; (80084bc <__ieee754_pow+0x23c>)
 800841e:	f7f8 f985 	bl	800072c <__aeabi_ddiv>
 8008422:	4683      	mov	fp, r0
 8008424:	468c      	mov	ip, r1
 8008426:	2d00      	cmp	r5, #0
 8008428:	daba      	bge.n	80083a0 <__ieee754_pow+0x120>
 800842a:	9b00      	ldr	r3, [sp, #0]
 800842c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008430:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008434:	431c      	orrs	r4, r3
 8008436:	d108      	bne.n	800844a <__ieee754_pow+0x1ca>
 8008438:	465a      	mov	r2, fp
 800843a:	4663      	mov	r3, ip
 800843c:	4658      	mov	r0, fp
 800843e:	4661      	mov	r1, ip
 8008440:	f7f7 fe92 	bl	8000168 <__aeabi_dsub>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	e790      	b.n	800836c <__ieee754_pow+0xec>
 800844a:	9b00      	ldr	r3, [sp, #0]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d1a7      	bne.n	80083a0 <__ieee754_pow+0x120>
 8008450:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008454:	469c      	mov	ip, r3
 8008456:	e7a3      	b.n	80083a0 <__ieee754_pow+0x120>
 8008458:	0feb      	lsrs	r3, r5, #31
 800845a:	3b01      	subs	r3, #1
 800845c:	930c      	str	r3, [sp, #48]	; 0x30
 800845e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008460:	9b00      	ldr	r3, [sp, #0]
 8008462:	4313      	orrs	r3, r2
 8008464:	d104      	bne.n	8008470 <__ieee754_pow+0x1f0>
 8008466:	4642      	mov	r2, r8
 8008468:	464b      	mov	r3, r9
 800846a:	4640      	mov	r0, r8
 800846c:	4649      	mov	r1, r9
 800846e:	e7e7      	b.n	8008440 <__ieee754_pow+0x1c0>
 8008470:	4b15      	ldr	r3, [pc, #84]	; (80084c8 <__ieee754_pow+0x248>)
 8008472:	429e      	cmp	r6, r3
 8008474:	f340 80f6 	ble.w	8008664 <__ieee754_pow+0x3e4>
 8008478:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800847c:	429e      	cmp	r6, r3
 800847e:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <__ieee754_pow+0x240>)
 8008480:	dd09      	ble.n	8008496 <__ieee754_pow+0x216>
 8008482:	429c      	cmp	r4, r3
 8008484:	dc0c      	bgt.n	80084a0 <__ieee754_pow+0x220>
 8008486:	2f00      	cmp	r7, #0
 8008488:	da0c      	bge.n	80084a4 <__ieee754_pow+0x224>
 800848a:	2000      	movs	r0, #0
 800848c:	b013      	add	sp, #76	; 0x4c
 800848e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008492:	f000 bcb2 	b.w	8008dfa <__math_oflow>
 8008496:	429c      	cmp	r4, r3
 8008498:	dbf5      	blt.n	8008486 <__ieee754_pow+0x206>
 800849a:	4b08      	ldr	r3, [pc, #32]	; (80084bc <__ieee754_pow+0x23c>)
 800849c:	429c      	cmp	r4, r3
 800849e:	dd15      	ble.n	80084cc <__ieee754_pow+0x24c>
 80084a0:	2f00      	cmp	r7, #0
 80084a2:	dcf2      	bgt.n	800848a <__ieee754_pow+0x20a>
 80084a4:	2000      	movs	r0, #0
 80084a6:	b013      	add	sp, #76	; 0x4c
 80084a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	f000 bca0 	b.w	8008df0 <__math_uflow>
 80084b0:	fff00000 	.word	0xfff00000
 80084b4:	7ff00000 	.word	0x7ff00000
 80084b8:	433fffff 	.word	0x433fffff
 80084bc:	3ff00000 	.word	0x3ff00000
 80084c0:	3fefffff 	.word	0x3fefffff
 80084c4:	3fe00000 	.word	0x3fe00000
 80084c8:	41e00000 	.word	0x41e00000
 80084cc:	4661      	mov	r1, ip
 80084ce:	2200      	movs	r2, #0
 80084d0:	4658      	mov	r0, fp
 80084d2:	4b5f      	ldr	r3, [pc, #380]	; (8008650 <__ieee754_pow+0x3d0>)
 80084d4:	f7f7 fe48 	bl	8000168 <__aeabi_dsub>
 80084d8:	a355      	add	r3, pc, #340	; (adr r3, 8008630 <__ieee754_pow+0x3b0>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	4604      	mov	r4, r0
 80084e0:	460d      	mov	r5, r1
 80084e2:	f7f7 fff9 	bl	80004d8 <__aeabi_dmul>
 80084e6:	a354      	add	r3, pc, #336	; (adr r3, 8008638 <__ieee754_pow+0x3b8>)
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	4606      	mov	r6, r0
 80084ee:	460f      	mov	r7, r1
 80084f0:	4620      	mov	r0, r4
 80084f2:	4629      	mov	r1, r5
 80084f4:	f7f7 fff0 	bl	80004d8 <__aeabi_dmul>
 80084f8:	2200      	movs	r2, #0
 80084fa:	4682      	mov	sl, r0
 80084fc:	468b      	mov	fp, r1
 80084fe:	4620      	mov	r0, r4
 8008500:	4629      	mov	r1, r5
 8008502:	4b54      	ldr	r3, [pc, #336]	; (8008654 <__ieee754_pow+0x3d4>)
 8008504:	f7f7 ffe8 	bl	80004d8 <__aeabi_dmul>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	a14c      	add	r1, pc, #304	; (adr r1, 8008640 <__ieee754_pow+0x3c0>)
 800850e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008512:	f7f7 fe29 	bl	8000168 <__aeabi_dsub>
 8008516:	4622      	mov	r2, r4
 8008518:	462b      	mov	r3, r5
 800851a:	f7f7 ffdd 	bl	80004d8 <__aeabi_dmul>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	2000      	movs	r0, #0
 8008524:	494c      	ldr	r1, [pc, #304]	; (8008658 <__ieee754_pow+0x3d8>)
 8008526:	f7f7 fe1f 	bl	8000168 <__aeabi_dsub>
 800852a:	4622      	mov	r2, r4
 800852c:	462b      	mov	r3, r5
 800852e:	4680      	mov	r8, r0
 8008530:	4689      	mov	r9, r1
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	f7f7 ffcf 	bl	80004d8 <__aeabi_dmul>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4640      	mov	r0, r8
 8008540:	4649      	mov	r1, r9
 8008542:	f7f7 ffc9 	bl	80004d8 <__aeabi_dmul>
 8008546:	a340      	add	r3, pc, #256	; (adr r3, 8008648 <__ieee754_pow+0x3c8>)
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	f7f7 ffc4 	bl	80004d8 <__aeabi_dmul>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4650      	mov	r0, sl
 8008556:	4659      	mov	r1, fp
 8008558:	f7f7 fe06 	bl	8000168 <__aeabi_dsub>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4604      	mov	r4, r0
 8008562:	460d      	mov	r5, r1
 8008564:	4630      	mov	r0, r6
 8008566:	4639      	mov	r1, r7
 8008568:	f7f7 fe00 	bl	800016c <__adddf3>
 800856c:	2000      	movs	r0, #0
 800856e:	4632      	mov	r2, r6
 8008570:	463b      	mov	r3, r7
 8008572:	4682      	mov	sl, r0
 8008574:	468b      	mov	fp, r1
 8008576:	f7f7 fdf7 	bl	8000168 <__aeabi_dsub>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	f7f7 fdf1 	bl	8000168 <__aeabi_dsub>
 8008586:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800858e:	3b01      	subs	r3, #1
 8008590:	4313      	orrs	r3, r2
 8008592:	f04f 0600 	mov.w	r6, #0
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	bf0c      	ite	eq
 800859c:	4b2f      	ldreq	r3, [pc, #188]	; (800865c <__ieee754_pow+0x3dc>)
 800859e:	4b2c      	ldrne	r3, [pc, #176]	; (8008650 <__ieee754_pow+0x3d0>)
 80085a0:	4604      	mov	r4, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a8:	e9cd 2300 	strd	r2, r3, [sp]
 80085ac:	4632      	mov	r2, r6
 80085ae:	463b      	mov	r3, r7
 80085b0:	f7f7 fdda 	bl	8000168 <__aeabi_dsub>
 80085b4:	4652      	mov	r2, sl
 80085b6:	465b      	mov	r3, fp
 80085b8:	f7f7 ff8e 	bl	80004d8 <__aeabi_dmul>
 80085bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c0:	4680      	mov	r8, r0
 80085c2:	4689      	mov	r9, r1
 80085c4:	4620      	mov	r0, r4
 80085c6:	4629      	mov	r1, r5
 80085c8:	f7f7 ff86 	bl	80004d8 <__aeabi_dmul>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4640      	mov	r0, r8
 80085d2:	4649      	mov	r1, r9
 80085d4:	f7f7 fdca 	bl	800016c <__adddf3>
 80085d8:	4632      	mov	r2, r6
 80085da:	463b      	mov	r3, r7
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	4650      	mov	r0, sl
 80085e2:	4659      	mov	r1, fp
 80085e4:	f7f7 ff78 	bl	80004d8 <__aeabi_dmul>
 80085e8:	4604      	mov	r4, r0
 80085ea:	460d      	mov	r5, r1
 80085ec:	460b      	mov	r3, r1
 80085ee:	4602      	mov	r2, r0
 80085f0:	4649      	mov	r1, r9
 80085f2:	4640      	mov	r0, r8
 80085f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80085f8:	f7f7 fdb8 	bl	800016c <__adddf3>
 80085fc:	4b18      	ldr	r3, [pc, #96]	; (8008660 <__ieee754_pow+0x3e0>)
 80085fe:	4682      	mov	sl, r0
 8008600:	4299      	cmp	r1, r3
 8008602:	460f      	mov	r7, r1
 8008604:	460e      	mov	r6, r1
 8008606:	f340 82e7 	ble.w	8008bd8 <__ieee754_pow+0x958>
 800860a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800860e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008612:	4303      	orrs	r3, r0
 8008614:	f000 81e2 	beq.w	80089dc <__ieee754_pow+0x75c>
 8008618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	f7f8 f9cc 	bl	80009bc <__aeabi_dcmplt>
 8008624:	3800      	subs	r0, #0
 8008626:	bf18      	it	ne
 8008628:	2001      	movne	r0, #1
 800862a:	e72f      	b.n	800848c <__ieee754_pow+0x20c>
 800862c:	f3af 8000 	nop.w
 8008630:	60000000 	.word	0x60000000
 8008634:	3ff71547 	.word	0x3ff71547
 8008638:	f85ddf44 	.word	0xf85ddf44
 800863c:	3e54ae0b 	.word	0x3e54ae0b
 8008640:	55555555 	.word	0x55555555
 8008644:	3fd55555 	.word	0x3fd55555
 8008648:	652b82fe 	.word	0x652b82fe
 800864c:	3ff71547 	.word	0x3ff71547
 8008650:	3ff00000 	.word	0x3ff00000
 8008654:	3fd00000 	.word	0x3fd00000
 8008658:	3fe00000 	.word	0x3fe00000
 800865c:	bff00000 	.word	0xbff00000
 8008660:	408fffff 	.word	0x408fffff
 8008664:	4bd4      	ldr	r3, [pc, #848]	; (80089b8 <__ieee754_pow+0x738>)
 8008666:	2200      	movs	r2, #0
 8008668:	402b      	ands	r3, r5
 800866a:	b943      	cbnz	r3, 800867e <__ieee754_pow+0x3fe>
 800866c:	4658      	mov	r0, fp
 800866e:	4661      	mov	r1, ip
 8008670:	4bd2      	ldr	r3, [pc, #840]	; (80089bc <__ieee754_pow+0x73c>)
 8008672:	f7f7 ff31 	bl	80004d8 <__aeabi_dmul>
 8008676:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800867a:	4683      	mov	fp, r0
 800867c:	460c      	mov	r4, r1
 800867e:	1523      	asrs	r3, r4, #20
 8008680:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008684:	4413      	add	r3, r2
 8008686:	930b      	str	r3, [sp, #44]	; 0x2c
 8008688:	4bcd      	ldr	r3, [pc, #820]	; (80089c0 <__ieee754_pow+0x740>)
 800868a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800868e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008692:	429c      	cmp	r4, r3
 8008694:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008698:	dd08      	ble.n	80086ac <__ieee754_pow+0x42c>
 800869a:	4bca      	ldr	r3, [pc, #808]	; (80089c4 <__ieee754_pow+0x744>)
 800869c:	429c      	cmp	r4, r3
 800869e:	f340 8164 	ble.w	800896a <__ieee754_pow+0x6ea>
 80086a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80086a8:	3301      	adds	r3, #1
 80086aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ac:	2600      	movs	r6, #0
 80086ae:	00f3      	lsls	r3, r6, #3
 80086b0:	930d      	str	r3, [sp, #52]	; 0x34
 80086b2:	4bc5      	ldr	r3, [pc, #788]	; (80089c8 <__ieee754_pow+0x748>)
 80086b4:	4658      	mov	r0, fp
 80086b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086be:	4629      	mov	r1, r5
 80086c0:	461a      	mov	r2, r3
 80086c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80086c6:	4623      	mov	r3, r4
 80086c8:	f7f7 fd4e 	bl	8000168 <__aeabi_dsub>
 80086cc:	46da      	mov	sl, fp
 80086ce:	462b      	mov	r3, r5
 80086d0:	4652      	mov	r2, sl
 80086d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80086d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086da:	f7f7 fd47 	bl	800016c <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	2000      	movs	r0, #0
 80086e4:	49b9      	ldr	r1, [pc, #740]	; (80089cc <__ieee754_pow+0x74c>)
 80086e6:	f7f8 f821 	bl	800072c <__aeabi_ddiv>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80086f6:	f7f7 feef 	bl	80004d8 <__aeabi_dmul>
 80086fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086fe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008702:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008706:	2300      	movs	r3, #0
 8008708:	2200      	movs	r2, #0
 800870a:	46ab      	mov	fp, r5
 800870c:	106d      	asrs	r5, r5, #1
 800870e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008712:	9304      	str	r3, [sp, #16]
 8008714:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008718:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800871c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008720:	4640      	mov	r0, r8
 8008722:	4649      	mov	r1, r9
 8008724:	4614      	mov	r4, r2
 8008726:	461d      	mov	r5, r3
 8008728:	f7f7 fed6 	bl	80004d8 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008734:	f7f7 fd18 	bl	8000168 <__aeabi_dsub>
 8008738:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800873c:	4606      	mov	r6, r0
 800873e:	460f      	mov	r7, r1
 8008740:	4620      	mov	r0, r4
 8008742:	4629      	mov	r1, r5
 8008744:	f7f7 fd10 	bl	8000168 <__aeabi_dsub>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4650      	mov	r0, sl
 800874e:	4659      	mov	r1, fp
 8008750:	f7f7 fd0a 	bl	8000168 <__aeabi_dsub>
 8008754:	4642      	mov	r2, r8
 8008756:	464b      	mov	r3, r9
 8008758:	f7f7 febe 	bl	80004d8 <__aeabi_dmul>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4630      	mov	r0, r6
 8008762:	4639      	mov	r1, r7
 8008764:	f7f7 fd00 	bl	8000168 <__aeabi_dsub>
 8008768:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800876c:	f7f7 feb4 	bl	80004d8 <__aeabi_dmul>
 8008770:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008774:	4682      	mov	sl, r0
 8008776:	468b      	mov	fp, r1
 8008778:	4610      	mov	r0, r2
 800877a:	4619      	mov	r1, r3
 800877c:	f7f7 feac 	bl	80004d8 <__aeabi_dmul>
 8008780:	a37b      	add	r3, pc, #492	; (adr r3, 8008970 <__ieee754_pow+0x6f0>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	4604      	mov	r4, r0
 8008788:	460d      	mov	r5, r1
 800878a:	f7f7 fea5 	bl	80004d8 <__aeabi_dmul>
 800878e:	a37a      	add	r3, pc, #488	; (adr r3, 8008978 <__ieee754_pow+0x6f8>)
 8008790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008794:	f7f7 fcea 	bl	800016c <__adddf3>
 8008798:	4622      	mov	r2, r4
 800879a:	462b      	mov	r3, r5
 800879c:	f7f7 fe9c 	bl	80004d8 <__aeabi_dmul>
 80087a0:	a377      	add	r3, pc, #476	; (adr r3, 8008980 <__ieee754_pow+0x700>)
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	f7f7 fce1 	bl	800016c <__adddf3>
 80087aa:	4622      	mov	r2, r4
 80087ac:	462b      	mov	r3, r5
 80087ae:	f7f7 fe93 	bl	80004d8 <__aeabi_dmul>
 80087b2:	a375      	add	r3, pc, #468	; (adr r3, 8008988 <__ieee754_pow+0x708>)
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f7f7 fcd8 	bl	800016c <__adddf3>
 80087bc:	4622      	mov	r2, r4
 80087be:	462b      	mov	r3, r5
 80087c0:	f7f7 fe8a 	bl	80004d8 <__aeabi_dmul>
 80087c4:	a372      	add	r3, pc, #456	; (adr r3, 8008990 <__ieee754_pow+0x710>)
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	f7f7 fccf 	bl	800016c <__adddf3>
 80087ce:	4622      	mov	r2, r4
 80087d0:	462b      	mov	r3, r5
 80087d2:	f7f7 fe81 	bl	80004d8 <__aeabi_dmul>
 80087d6:	a370      	add	r3, pc, #448	; (adr r3, 8008998 <__ieee754_pow+0x718>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	f7f7 fcc6 	bl	800016c <__adddf3>
 80087e0:	4622      	mov	r2, r4
 80087e2:	4606      	mov	r6, r0
 80087e4:	460f      	mov	r7, r1
 80087e6:	462b      	mov	r3, r5
 80087e8:	4620      	mov	r0, r4
 80087ea:	4629      	mov	r1, r5
 80087ec:	f7f7 fe74 	bl	80004d8 <__aeabi_dmul>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4630      	mov	r0, r6
 80087f6:	4639      	mov	r1, r7
 80087f8:	f7f7 fe6e 	bl	80004d8 <__aeabi_dmul>
 80087fc:	4604      	mov	r4, r0
 80087fe:	460d      	mov	r5, r1
 8008800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008804:	4642      	mov	r2, r8
 8008806:	464b      	mov	r3, r9
 8008808:	f7f7 fcb0 	bl	800016c <__adddf3>
 800880c:	4652      	mov	r2, sl
 800880e:	465b      	mov	r3, fp
 8008810:	f7f7 fe62 	bl	80004d8 <__aeabi_dmul>
 8008814:	4622      	mov	r2, r4
 8008816:	462b      	mov	r3, r5
 8008818:	f7f7 fca8 	bl	800016c <__adddf3>
 800881c:	4642      	mov	r2, r8
 800881e:	4606      	mov	r6, r0
 8008820:	460f      	mov	r7, r1
 8008822:	464b      	mov	r3, r9
 8008824:	4640      	mov	r0, r8
 8008826:	4649      	mov	r1, r9
 8008828:	f7f7 fe56 	bl	80004d8 <__aeabi_dmul>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008834:	2200      	movs	r2, #0
 8008836:	4b66      	ldr	r3, [pc, #408]	; (80089d0 <__ieee754_pow+0x750>)
 8008838:	f7f7 fc98 	bl	800016c <__adddf3>
 800883c:	4632      	mov	r2, r6
 800883e:	463b      	mov	r3, r7
 8008840:	f7f7 fc94 	bl	800016c <__adddf3>
 8008844:	2400      	movs	r4, #0
 8008846:	460d      	mov	r5, r1
 8008848:	4622      	mov	r2, r4
 800884a:	460b      	mov	r3, r1
 800884c:	4640      	mov	r0, r8
 800884e:	4649      	mov	r1, r9
 8008850:	f7f7 fe42 	bl	80004d8 <__aeabi_dmul>
 8008854:	2200      	movs	r2, #0
 8008856:	4680      	mov	r8, r0
 8008858:	4689      	mov	r9, r1
 800885a:	4620      	mov	r0, r4
 800885c:	4629      	mov	r1, r5
 800885e:	4b5c      	ldr	r3, [pc, #368]	; (80089d0 <__ieee754_pow+0x750>)
 8008860:	f7f7 fc82 	bl	8000168 <__aeabi_dsub>
 8008864:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008868:	f7f7 fc7e 	bl	8000168 <__aeabi_dsub>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f7 fc78 	bl	8000168 <__aeabi_dsub>
 8008878:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800887c:	f7f7 fe2c 	bl	80004d8 <__aeabi_dmul>
 8008880:	4622      	mov	r2, r4
 8008882:	4606      	mov	r6, r0
 8008884:	460f      	mov	r7, r1
 8008886:	462b      	mov	r3, r5
 8008888:	4650      	mov	r0, sl
 800888a:	4659      	mov	r1, fp
 800888c:	f7f7 fe24 	bl	80004d8 <__aeabi_dmul>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f7 fc68 	bl	800016c <__adddf3>
 800889c:	2400      	movs	r4, #0
 800889e:	4606      	mov	r6, r0
 80088a0:	460f      	mov	r7, r1
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	f7f7 fc5f 	bl	800016c <__adddf3>
 80088ae:	a33c      	add	r3, pc, #240	; (adr r3, 80089a0 <__ieee754_pow+0x720>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	4620      	mov	r0, r4
 80088b6:	460d      	mov	r5, r1
 80088b8:	f7f7 fe0e 	bl	80004d8 <__aeabi_dmul>
 80088bc:	4642      	mov	r2, r8
 80088be:	464b      	mov	r3, r9
 80088c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088c4:	4620      	mov	r0, r4
 80088c6:	4629      	mov	r1, r5
 80088c8:	f7f7 fc4e 	bl	8000168 <__aeabi_dsub>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f7 fc48 	bl	8000168 <__aeabi_dsub>
 80088d8:	a333      	add	r3, pc, #204	; (adr r3, 80089a8 <__ieee754_pow+0x728>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fdfb 	bl	80004d8 <__aeabi_dmul>
 80088e2:	a333      	add	r3, pc, #204	; (adr r3, 80089b0 <__ieee754_pow+0x730>)
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	4606      	mov	r6, r0
 80088ea:	460f      	mov	r7, r1
 80088ec:	4620      	mov	r0, r4
 80088ee:	4629      	mov	r1, r5
 80088f0:	f7f7 fdf2 	bl	80004d8 <__aeabi_dmul>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4630      	mov	r0, r6
 80088fa:	4639      	mov	r1, r7
 80088fc:	f7f7 fc36 	bl	800016c <__adddf3>
 8008900:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008902:	4b34      	ldr	r3, [pc, #208]	; (80089d4 <__ieee754_pow+0x754>)
 8008904:	4413      	add	r3, r2
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f7f7 fc2f 	bl	800016c <__adddf3>
 800890e:	4680      	mov	r8, r0
 8008910:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008912:	4689      	mov	r9, r1
 8008914:	f7f7 fd76 	bl	8000404 <__aeabi_i2d>
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008922:	4b2d      	ldr	r3, [pc, #180]	; (80089d8 <__ieee754_pow+0x758>)
 8008924:	4413      	add	r3, r2
 8008926:	e9d3 6700 	ldrd	r6, r7, [r3]
 800892a:	4642      	mov	r2, r8
 800892c:	464b      	mov	r3, r9
 800892e:	f7f7 fc1d 	bl	800016c <__adddf3>
 8008932:	4632      	mov	r2, r6
 8008934:	463b      	mov	r3, r7
 8008936:	f7f7 fc19 	bl	800016c <__adddf3>
 800893a:	4622      	mov	r2, r4
 800893c:	462b      	mov	r3, r5
 800893e:	f7f7 fc15 	bl	800016c <__adddf3>
 8008942:	2000      	movs	r0, #0
 8008944:	4622      	mov	r2, r4
 8008946:	462b      	mov	r3, r5
 8008948:	4682      	mov	sl, r0
 800894a:	468b      	mov	fp, r1
 800894c:	f7f7 fc0c 	bl	8000168 <__aeabi_dsub>
 8008950:	4632      	mov	r2, r6
 8008952:	463b      	mov	r3, r7
 8008954:	f7f7 fc08 	bl	8000168 <__aeabi_dsub>
 8008958:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800895c:	f7f7 fc04 	bl	8000168 <__aeabi_dsub>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	e60b      	b.n	8008582 <__ieee754_pow+0x302>
 800896a:	2601      	movs	r6, #1
 800896c:	e69f      	b.n	80086ae <__ieee754_pow+0x42e>
 800896e:	bf00      	nop
 8008970:	4a454eef 	.word	0x4a454eef
 8008974:	3fca7e28 	.word	0x3fca7e28
 8008978:	93c9db65 	.word	0x93c9db65
 800897c:	3fcd864a 	.word	0x3fcd864a
 8008980:	a91d4101 	.word	0xa91d4101
 8008984:	3fd17460 	.word	0x3fd17460
 8008988:	518f264d 	.word	0x518f264d
 800898c:	3fd55555 	.word	0x3fd55555
 8008990:	db6fabff 	.word	0xdb6fabff
 8008994:	3fdb6db6 	.word	0x3fdb6db6
 8008998:	33333303 	.word	0x33333303
 800899c:	3fe33333 	.word	0x3fe33333
 80089a0:	e0000000 	.word	0xe0000000
 80089a4:	3feec709 	.word	0x3feec709
 80089a8:	dc3a03fd 	.word	0xdc3a03fd
 80089ac:	3feec709 	.word	0x3feec709
 80089b0:	145b01f5 	.word	0x145b01f5
 80089b4:	be3e2fe0 	.word	0xbe3e2fe0
 80089b8:	7ff00000 	.word	0x7ff00000
 80089bc:	43400000 	.word	0x43400000
 80089c0:	0003988e 	.word	0x0003988e
 80089c4:	000bb679 	.word	0x000bb679
 80089c8:	08009460 	.word	0x08009460
 80089cc:	3ff00000 	.word	0x3ff00000
 80089d0:	40080000 	.word	0x40080000
 80089d4:	08009480 	.word	0x08009480
 80089d8:	08009470 	.word	0x08009470
 80089dc:	a39c      	add	r3, pc, #624	; (adr r3, 8008c50 <__ieee754_pow+0x9d0>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	4640      	mov	r0, r8
 80089e4:	4649      	mov	r1, r9
 80089e6:	f7f7 fbc1 	bl	800016c <__adddf3>
 80089ea:	4622      	mov	r2, r4
 80089ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089f0:	462b      	mov	r3, r5
 80089f2:	4650      	mov	r0, sl
 80089f4:	4639      	mov	r1, r7
 80089f6:	f7f7 fbb7 	bl	8000168 <__aeabi_dsub>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a02:	f7f7 fff9 	bl	80009f8 <__aeabi_dcmpgt>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f47f ae06 	bne.w	8008618 <__ieee754_pow+0x398>
 8008a0c:	4aa2      	ldr	r2, [pc, #648]	; (8008c98 <__ieee754_pow+0xa18>)
 8008a0e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008a12:	4293      	cmp	r3, r2
 8008a14:	f340 8100 	ble.w	8008c18 <__ieee754_pow+0x998>
 8008a18:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008a1c:	151b      	asrs	r3, r3, #20
 8008a1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008a22:	fa4a fa03 	asr.w	sl, sl, r3
 8008a26:	44b2      	add	sl, r6
 8008a28:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008a2c:	489b      	ldr	r0, [pc, #620]	; (8008c9c <__ieee754_pow+0xa1c>)
 8008a2e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008a32:	4108      	asrs	r0, r1
 8008a34:	ea00 030a 	and.w	r3, r0, sl
 8008a38:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008a3c:	f1c1 0114 	rsb	r1, r1, #20
 8008a40:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008a44:	fa4a fa01 	asr.w	sl, sl, r1
 8008a48:	2e00      	cmp	r6, #0
 8008a4a:	f04f 0200 	mov.w	r2, #0
 8008a4e:	4620      	mov	r0, r4
 8008a50:	4629      	mov	r1, r5
 8008a52:	bfb8      	it	lt
 8008a54:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a58:	f7f7 fb86 	bl	8000168 <__aeabi_dsub>
 8008a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a64:	2400      	movs	r4, #0
 8008a66:	4642      	mov	r2, r8
 8008a68:	464b      	mov	r3, r9
 8008a6a:	f7f7 fb7f 	bl	800016c <__adddf3>
 8008a6e:	a37a      	add	r3, pc, #488	; (adr r3, 8008c58 <__ieee754_pow+0x9d8>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	4620      	mov	r0, r4
 8008a76:	460d      	mov	r5, r1
 8008a78:	f7f7 fd2e 	bl	80004d8 <__aeabi_dmul>
 8008a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a80:	4606      	mov	r6, r0
 8008a82:	460f      	mov	r7, r1
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f7 fb6e 	bl	8000168 <__aeabi_dsub>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f7f7 fb68 	bl	8000168 <__aeabi_dsub>
 8008a98:	a371      	add	r3, pc, #452	; (adr r3, 8008c60 <__ieee754_pow+0x9e0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fd1b 	bl	80004d8 <__aeabi_dmul>
 8008aa2:	a371      	add	r3, pc, #452	; (adr r3, 8008c68 <__ieee754_pow+0x9e8>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4689      	mov	r9, r1
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fd12 	bl	80004d8 <__aeabi_dmul>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4640      	mov	r0, r8
 8008aba:	4649      	mov	r1, r9
 8008abc:	f7f7 fb56 	bl	800016c <__adddf3>
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	460d      	mov	r5, r1
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4630      	mov	r0, r6
 8008aca:	4639      	mov	r1, r7
 8008acc:	f7f7 fb4e 	bl	800016c <__adddf3>
 8008ad0:	4632      	mov	r2, r6
 8008ad2:	463b      	mov	r3, r7
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	4689      	mov	r9, r1
 8008ad8:	f7f7 fb46 	bl	8000168 <__aeabi_dsub>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	f7f7 fb40 	bl	8000168 <__aeabi_dsub>
 8008ae8:	4642      	mov	r2, r8
 8008aea:	4606      	mov	r6, r0
 8008aec:	460f      	mov	r7, r1
 8008aee:	464b      	mov	r3, r9
 8008af0:	4640      	mov	r0, r8
 8008af2:	4649      	mov	r1, r9
 8008af4:	f7f7 fcf0 	bl	80004d8 <__aeabi_dmul>
 8008af8:	a35d      	add	r3, pc, #372	; (adr r3, 8008c70 <__ieee754_pow+0x9f0>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	4604      	mov	r4, r0
 8008b00:	460d      	mov	r5, r1
 8008b02:	f7f7 fce9 	bl	80004d8 <__aeabi_dmul>
 8008b06:	a35c      	add	r3, pc, #368	; (adr r3, 8008c78 <__ieee754_pow+0x9f8>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f7f7 fb2c 	bl	8000168 <__aeabi_dsub>
 8008b10:	4622      	mov	r2, r4
 8008b12:	462b      	mov	r3, r5
 8008b14:	f7f7 fce0 	bl	80004d8 <__aeabi_dmul>
 8008b18:	a359      	add	r3, pc, #356	; (adr r3, 8008c80 <__ieee754_pow+0xa00>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fb25 	bl	800016c <__adddf3>
 8008b22:	4622      	mov	r2, r4
 8008b24:	462b      	mov	r3, r5
 8008b26:	f7f7 fcd7 	bl	80004d8 <__aeabi_dmul>
 8008b2a:	a357      	add	r3, pc, #348	; (adr r3, 8008c88 <__ieee754_pow+0xa08>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 fb1a 	bl	8000168 <__aeabi_dsub>
 8008b34:	4622      	mov	r2, r4
 8008b36:	462b      	mov	r3, r5
 8008b38:	f7f7 fcce 	bl	80004d8 <__aeabi_dmul>
 8008b3c:	a354      	add	r3, pc, #336	; (adr r3, 8008c90 <__ieee754_pow+0xa10>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f7f7 fb13 	bl	800016c <__adddf3>
 8008b46:	4622      	mov	r2, r4
 8008b48:	462b      	mov	r3, r5
 8008b4a:	f7f7 fcc5 	bl	80004d8 <__aeabi_dmul>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4640      	mov	r0, r8
 8008b54:	4649      	mov	r1, r9
 8008b56:	f7f7 fb07 	bl	8000168 <__aeabi_dsub>
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	4640      	mov	r0, r8
 8008b64:	4649      	mov	r1, r9
 8008b66:	f7f7 fcb7 	bl	80004d8 <__aeabi_dmul>
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b74:	4620      	mov	r0, r4
 8008b76:	4629      	mov	r1, r5
 8008b78:	f7f7 faf6 	bl	8000168 <__aeabi_dsub>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b84:	f7f7 fdd2 	bl	800072c <__aeabi_ddiv>
 8008b88:	4632      	mov	r2, r6
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	463b      	mov	r3, r7
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 fca0 	bl	80004d8 <__aeabi_dmul>
 8008b98:	4632      	mov	r2, r6
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	f7f7 fae6 	bl	800016c <__adddf3>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	f7f7 fade 	bl	8000168 <__aeabi_dsub>
 8008bac:	4642      	mov	r2, r8
 8008bae:	464b      	mov	r3, r9
 8008bb0:	f7f7 fada 	bl	8000168 <__aeabi_dsub>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	2000      	movs	r0, #0
 8008bba:	4939      	ldr	r1, [pc, #228]	; (8008ca0 <__ieee754_pow+0xa20>)
 8008bbc:	f7f7 fad4 	bl	8000168 <__aeabi_dsub>
 8008bc0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008bc4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008bc8:	da29      	bge.n	8008c1e <__ieee754_pow+0x99e>
 8008bca:	4652      	mov	r2, sl
 8008bcc:	f000 f874 	bl	8008cb8 <scalbn>
 8008bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd4:	f7ff bbfd 	b.w	80083d2 <__ieee754_pow+0x152>
 8008bd8:	4b32      	ldr	r3, [pc, #200]	; (8008ca4 <__ieee754_pow+0xa24>)
 8008bda:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008bde:	429f      	cmp	r7, r3
 8008be0:	f77f af14 	ble.w	8008a0c <__ieee754_pow+0x78c>
 8008be4:	4b30      	ldr	r3, [pc, #192]	; (8008ca8 <__ieee754_pow+0xa28>)
 8008be6:	440b      	add	r3, r1
 8008be8:	4303      	orrs	r3, r0
 8008bea:	d009      	beq.n	8008c00 <__ieee754_pow+0x980>
 8008bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f7f7 fee2 	bl	80009bc <__aeabi_dcmplt>
 8008bf8:	3800      	subs	r0, #0
 8008bfa:	bf18      	it	ne
 8008bfc:	2001      	movne	r0, #1
 8008bfe:	e452      	b.n	80084a6 <__ieee754_pow+0x226>
 8008c00:	4622      	mov	r2, r4
 8008c02:	462b      	mov	r3, r5
 8008c04:	f7f7 fab0 	bl	8000168 <__aeabi_dsub>
 8008c08:	4642      	mov	r2, r8
 8008c0a:	464b      	mov	r3, r9
 8008c0c:	f7f7 feea 	bl	80009e4 <__aeabi_dcmpge>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	f43f aefb 	beq.w	8008a0c <__ieee754_pow+0x78c>
 8008c16:	e7e9      	b.n	8008bec <__ieee754_pow+0x96c>
 8008c18:	f04f 0a00 	mov.w	sl, #0
 8008c1c:	e720      	b.n	8008a60 <__ieee754_pow+0x7e0>
 8008c1e:	4621      	mov	r1, r4
 8008c20:	e7d6      	b.n	8008bd0 <__ieee754_pow+0x950>
 8008c22:	f04f 0b00 	mov.w	fp, #0
 8008c26:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008ca0 <__ieee754_pow+0xa20>
 8008c2a:	f7ff bbb9 	b.w	80083a0 <__ieee754_pow+0x120>
 8008c2e:	f04f 0b00 	mov.w	fp, #0
 8008c32:	f04f 0c00 	mov.w	ip, #0
 8008c36:	f7ff bbb3 	b.w	80083a0 <__ieee754_pow+0x120>
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	f7ff bb3c 	b.w	80082ba <__ieee754_pow+0x3a>
 8008c42:	9200      	str	r2, [sp, #0]
 8008c44:	f7ff bb88 	b.w	8008358 <__ieee754_pow+0xd8>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f7ff bb72 	b.w	8008332 <__ieee754_pow+0xb2>
 8008c4e:	bf00      	nop
 8008c50:	652b82fe 	.word	0x652b82fe
 8008c54:	3c971547 	.word	0x3c971547
 8008c58:	00000000 	.word	0x00000000
 8008c5c:	3fe62e43 	.word	0x3fe62e43
 8008c60:	fefa39ef 	.word	0xfefa39ef
 8008c64:	3fe62e42 	.word	0x3fe62e42
 8008c68:	0ca86c39 	.word	0x0ca86c39
 8008c6c:	be205c61 	.word	0xbe205c61
 8008c70:	72bea4d0 	.word	0x72bea4d0
 8008c74:	3e663769 	.word	0x3e663769
 8008c78:	c5d26bf1 	.word	0xc5d26bf1
 8008c7c:	3ebbbd41 	.word	0x3ebbbd41
 8008c80:	af25de2c 	.word	0xaf25de2c
 8008c84:	3f11566a 	.word	0x3f11566a
 8008c88:	16bebd93 	.word	0x16bebd93
 8008c8c:	3f66c16c 	.word	0x3f66c16c
 8008c90:	5555553e 	.word	0x5555553e
 8008c94:	3fc55555 	.word	0x3fc55555
 8008c98:	3fe00000 	.word	0x3fe00000
 8008c9c:	fff00000 	.word	0xfff00000
 8008ca0:	3ff00000 	.word	0x3ff00000
 8008ca4:	4090cbff 	.word	0x4090cbff
 8008ca8:	3f6f3400 	.word	0x3f6f3400

08008cac <fabs>:
 8008cac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4770      	bx	lr
 8008cb4:	0000      	movs	r0, r0
	...

08008cb8 <scalbn>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	4616      	mov	r6, r2
 8008cbc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	460d      	mov	r5, r1
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	b992      	cbnz	r2, 8008cee <scalbn+0x36>
 8008cc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ccc:	4303      	orrs	r3, r0
 8008cce:	d03c      	beq.n	8008d4a <scalbn+0x92>
 8008cd0:	4b31      	ldr	r3, [pc, #196]	; (8008d98 <scalbn+0xe0>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f7f7 fc00 	bl	80004d8 <__aeabi_dmul>
 8008cd8:	4b30      	ldr	r3, [pc, #192]	; (8008d9c <scalbn+0xe4>)
 8008cda:	4604      	mov	r4, r0
 8008cdc:	429e      	cmp	r6, r3
 8008cde:	460d      	mov	r5, r1
 8008ce0:	da0f      	bge.n	8008d02 <scalbn+0x4a>
 8008ce2:	a329      	add	r3, pc, #164	; (adr r3, 8008d88 <scalbn+0xd0>)
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	f7f7 fbf6 	bl	80004d8 <__aeabi_dmul>
 8008cec:	e006      	b.n	8008cfc <scalbn+0x44>
 8008cee:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8008cf2:	42ba      	cmp	r2, r7
 8008cf4:	d109      	bne.n	8008d0a <scalbn+0x52>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	f7f7 fa38 	bl	800016c <__adddf3>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	e023      	b.n	8008d4a <scalbn+0x92>
 8008d02:	460b      	mov	r3, r1
 8008d04:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008d08:	3a36      	subs	r2, #54	; 0x36
 8008d0a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008d0e:	428e      	cmp	r6, r1
 8008d10:	dd0e      	ble.n	8008d30 <scalbn+0x78>
 8008d12:	a31f      	add	r3, pc, #124	; (adr r3, 8008d90 <scalbn+0xd8>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008d1c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008d20:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008d24:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008d28:	481d      	ldr	r0, [pc, #116]	; (8008da0 <scalbn+0xe8>)
 8008d2a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008d2e:	e7db      	b.n	8008ce8 <scalbn+0x30>
 8008d30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d34:	4432      	add	r2, r6
 8008d36:	428a      	cmp	r2, r1
 8008d38:	dceb      	bgt.n	8008d12 <scalbn+0x5a>
 8008d3a:	2a00      	cmp	r2, #0
 8008d3c:	dd08      	ble.n	8008d50 <scalbn+0x98>
 8008d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d46:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d50:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008d54:	da0c      	bge.n	8008d70 <scalbn+0xb8>
 8008d56:	a30c      	add	r3, pc, #48	; (adr r3, 8008d88 <scalbn+0xd0>)
 8008d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008d60:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008d64:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008d68:	480e      	ldr	r0, [pc, #56]	; (8008da4 <scalbn+0xec>)
 8008d6a:	f041 011f 	orr.w	r1, r1, #31
 8008d6e:	e7bb      	b.n	8008ce8 <scalbn+0x30>
 8008d70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d74:	3236      	adds	r2, #54	; 0x36
 8008d76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	2200      	movs	r2, #0
 8008d84:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <scalbn+0xf0>)
 8008d86:	e7af      	b.n	8008ce8 <scalbn+0x30>
 8008d88:	c2f8f359 	.word	0xc2f8f359
 8008d8c:	01a56e1f 	.word	0x01a56e1f
 8008d90:	8800759c 	.word	0x8800759c
 8008d94:	7e37e43c 	.word	0x7e37e43c
 8008d98:	43500000 	.word	0x43500000
 8008d9c:	ffff3cb0 	.word	0xffff3cb0
 8008da0:	8800759c 	.word	0x8800759c
 8008da4:	c2f8f359 	.word	0xc2f8f359
 8008da8:	3c900000 	.word	0x3c900000

08008dac <with_errno>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	4604      	mov	r4, r0
 8008db0:	460d      	mov	r5, r1
 8008db2:	4616      	mov	r6, r2
 8008db4:	f7fd f960 	bl	8006078 <__errno>
 8008db8:	4629      	mov	r1, r5
 8008dba:	6006      	str	r6, [r0, #0]
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}

08008dc0 <xflow>:
 8008dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dc2:	4615      	mov	r5, r2
 8008dc4:	461c      	mov	r4, r3
 8008dc6:	b180      	cbz	r0, 8008dea <xflow+0x2a>
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008dce:	e9cd 0100 	strd	r0, r1, [sp]
 8008dd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	4621      	mov	r1, r4
 8008dda:	f7f7 fb7d 	bl	80004d8 <__aeabi_dmul>
 8008dde:	2222      	movs	r2, #34	; 0x22
 8008de0:	b003      	add	sp, #12
 8008de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de6:	f7ff bfe1 	b.w	8008dac <with_errno>
 8008dea:	4610      	mov	r0, r2
 8008dec:	4619      	mov	r1, r3
 8008dee:	e7ee      	b.n	8008dce <xflow+0xe>

08008df0 <__math_uflow>:
 8008df0:	2200      	movs	r2, #0
 8008df2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008df6:	f7ff bfe3 	b.w	8008dc0 <xflow>

08008dfa <__math_oflow>:
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008e00:	f7ff bfde 	b.w	8008dc0 <xflow>

08008e04 <__ieee754_sqrt>:
 8008e04:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8008fa8 <__ieee754_sqrt+0x1a4>
 8008e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	ea3c 0c01 	bics.w	ip, ip, r1
 8008e10:	460b      	mov	r3, r1
 8008e12:	4606      	mov	r6, r0
 8008e14:	460d      	mov	r5, r1
 8008e16:	460a      	mov	r2, r1
 8008e18:	4604      	mov	r4, r0
 8008e1a:	d10e      	bne.n	8008e3a <__ieee754_sqrt+0x36>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	f7f7 fb5b 	bl	80004d8 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4630      	mov	r0, r6
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 f99f 	bl	800016c <__adddf3>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	460d      	mov	r5, r1
 8008e32:	4630      	mov	r0, r6
 8008e34:	4629      	mov	r1, r5
 8008e36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3a:	2900      	cmp	r1, #0
 8008e3c:	dc0d      	bgt.n	8008e5a <__ieee754_sqrt+0x56>
 8008e3e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008e42:	ea5c 0c00 	orrs.w	ip, ip, r0
 8008e46:	d0f4      	beq.n	8008e32 <__ieee754_sqrt+0x2e>
 8008e48:	b139      	cbz	r1, 8008e5a <__ieee754_sqrt+0x56>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	f7f7 f98c 	bl	8000168 <__aeabi_dsub>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	f7f7 fc6a 	bl	800072c <__aeabi_ddiv>
 8008e58:	e7e9      	b.n	8008e2e <__ieee754_sqrt+0x2a>
 8008e5a:	1512      	asrs	r2, r2, #20
 8008e5c:	f000 8089 	beq.w	8008f72 <__ieee754_sqrt+0x16e>
 8008e60:	2500      	movs	r5, #0
 8008e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e66:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e6e:	07d2      	lsls	r2, r2, #31
 8008e70:	bf5c      	itt	pl
 8008e72:	005b      	lslpl	r3, r3, #1
 8008e74:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008e78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e7c:	bf58      	it	pl
 8008e7e:	0064      	lslpl	r4, r4, #1
 8008e80:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008e84:	0062      	lsls	r2, r4, #1
 8008e86:	2016      	movs	r0, #22
 8008e88:	4629      	mov	r1, r5
 8008e8a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8008e8e:	1076      	asrs	r6, r6, #1
 8008e90:	190f      	adds	r7, r1, r4
 8008e92:	429f      	cmp	r7, r3
 8008e94:	bfde      	ittt	le
 8008e96:	1bdb      	suble	r3, r3, r7
 8008e98:	1939      	addle	r1, r7, r4
 8008e9a:	192d      	addle	r5, r5, r4
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	3801      	subs	r0, #1
 8008ea0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008ea4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008ea8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008eac:	d1f0      	bne.n	8008e90 <__ieee754_sqrt+0x8c>
 8008eae:	4604      	mov	r4, r0
 8008eb0:	2720      	movs	r7, #32
 8008eb2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008eb6:	428b      	cmp	r3, r1
 8008eb8:	eb0c 0e00 	add.w	lr, ip, r0
 8008ebc:	dc02      	bgt.n	8008ec4 <__ieee754_sqrt+0xc0>
 8008ebe:	d113      	bne.n	8008ee8 <__ieee754_sqrt+0xe4>
 8008ec0:	4596      	cmp	lr, r2
 8008ec2:	d811      	bhi.n	8008ee8 <__ieee754_sqrt+0xe4>
 8008ec4:	f1be 0f00 	cmp.w	lr, #0
 8008ec8:	eb0e 000c 	add.w	r0, lr, ip
 8008ecc:	da56      	bge.n	8008f7c <__ieee754_sqrt+0x178>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	db54      	blt.n	8008f7c <__ieee754_sqrt+0x178>
 8008ed2:	f101 0801 	add.w	r8, r1, #1
 8008ed6:	1a5b      	subs	r3, r3, r1
 8008ed8:	4641      	mov	r1, r8
 8008eda:	4596      	cmp	lr, r2
 8008edc:	bf88      	it	hi
 8008ede:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008ee2:	eba2 020e 	sub.w	r2, r2, lr
 8008ee6:	4464      	add	r4, ip
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	3f01      	subs	r7, #1
 8008eec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008ef0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008ef4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008ef8:	d1dd      	bne.n	8008eb6 <__ieee754_sqrt+0xb2>
 8008efa:	4313      	orrs	r3, r2
 8008efc:	d01b      	beq.n	8008f36 <__ieee754_sqrt+0x132>
 8008efe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008fac <__ieee754_sqrt+0x1a8>
 8008f02:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008fb0 <__ieee754_sqrt+0x1ac>
 8008f06:	e9da 0100 	ldrd	r0, r1, [sl]
 8008f0a:	e9db 2300 	ldrd	r2, r3, [fp]
 8008f0e:	f7f7 f92b 	bl	8000168 <__aeabi_dsub>
 8008f12:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	f7f7 fd57 	bl	80009d0 <__aeabi_dcmple>
 8008f22:	b140      	cbz	r0, 8008f36 <__ieee754_sqrt+0x132>
 8008f24:	e9da 0100 	ldrd	r0, r1, [sl]
 8008f28:	e9db 2300 	ldrd	r2, r3, [fp]
 8008f2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008f30:	d126      	bne.n	8008f80 <__ieee754_sqrt+0x17c>
 8008f32:	463c      	mov	r4, r7
 8008f34:	3501      	adds	r5, #1
 8008f36:	106b      	asrs	r3, r5, #1
 8008f38:	0864      	lsrs	r4, r4, #1
 8008f3a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008f3e:	07ea      	lsls	r2, r5, #31
 8008f40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008f44:	bf48      	it	mi
 8008f46:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008f50:	e76d      	b.n	8008e2e <__ieee754_sqrt+0x2a>
 8008f52:	0ae3      	lsrs	r3, r4, #11
 8008f54:	3915      	subs	r1, #21
 8008f56:	0564      	lsls	r4, r4, #21
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0fa      	beq.n	8008f52 <__ieee754_sqrt+0x14e>
 8008f5c:	02d8      	lsls	r0, r3, #11
 8008f5e:	d50a      	bpl.n	8008f76 <__ieee754_sqrt+0x172>
 8008f60:	f1c2 0020 	rsb	r0, r2, #32
 8008f64:	fa24 f000 	lsr.w	r0, r4, r0
 8008f68:	1e55      	subs	r5, r2, #1
 8008f6a:	4094      	lsls	r4, r2
 8008f6c:	4303      	orrs	r3, r0
 8008f6e:	1b4a      	subs	r2, r1, r5
 8008f70:	e776      	b.n	8008e60 <__ieee754_sqrt+0x5c>
 8008f72:	4611      	mov	r1, r2
 8008f74:	e7f0      	b.n	8008f58 <__ieee754_sqrt+0x154>
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	3201      	adds	r2, #1
 8008f7a:	e7ef      	b.n	8008f5c <__ieee754_sqrt+0x158>
 8008f7c:	4688      	mov	r8, r1
 8008f7e:	e7aa      	b.n	8008ed6 <__ieee754_sqrt+0xd2>
 8008f80:	f7f7 f8f4 	bl	800016c <__adddf3>
 8008f84:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	4649      	mov	r1, r9
 8008f90:	f7f7 fd14 	bl	80009bc <__aeabi_dcmplt>
 8008f94:	b120      	cbz	r0, 8008fa0 <__ieee754_sqrt+0x19c>
 8008f96:	1ca1      	adds	r1, r4, #2
 8008f98:	bf08      	it	eq
 8008f9a:	3501      	addeq	r5, #1
 8008f9c:	3402      	adds	r4, #2
 8008f9e:	e7ca      	b.n	8008f36 <__ieee754_sqrt+0x132>
 8008fa0:	3401      	adds	r4, #1
 8008fa2:	f024 0401 	bic.w	r4, r4, #1
 8008fa6:	e7c6      	b.n	8008f36 <__ieee754_sqrt+0x132>
 8008fa8:	7ff00000 	.word	0x7ff00000
 8008fac:	200001e0 	.word	0x200001e0
 8008fb0:	200001e8 	.word	0x200001e8

08008fb4 <_init>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr

08008fc0 <_fini>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	bf00      	nop
 8008fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc6:	bc08      	pop	{r3}
 8008fc8:	469e      	mov	lr, r3
 8008fca:	4770      	bx	lr
