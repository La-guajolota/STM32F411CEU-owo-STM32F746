
medidor_metereologico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a510  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001958  0800a620  0800a620  0000b620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf78  0800bf78  0000d200  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf78  0800bf78  0000cf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf80  0800bf80  0000d200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf80  0800bf80  0000cf80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf84  0800bf84  0000cf84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800bf88  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f28  20000200  0800c188  0000d200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001128  0800c188  0000e128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168b5  00000000  00000000  0000d229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b4  00000000  00000000  00023ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00026f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108d  00000000  00000000  000284b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b076  00000000  00000000  0002953d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a525  00000000  00000000  000445b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d83  00000000  00000000  0005ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f685b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dc4  00000000  00000000  000f68a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000fd664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a608 	.word	0x0800a608

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800a608 	.word	0x0800a608

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <delay>:
 * Timer utilizo para el delay de us
 */
extern TIM_HandleTypeDef htim2;

void delay (uint16_t us)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <delay+0x2c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8000b3a:	bf00      	nop
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <delay+0x2c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3f9      	bcc.n	8000b3c <delay+0x14>
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000308 	.word	0x20000308

08000b58 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIO,uint16_t GPIO_pin){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = DATA_PIN;
 8000b72:	2302      	movs	r3, #2
 8000b74:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DATA_PORT, &GPIO_InitStruct);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4619      	mov	r1, r3
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <Set_Pin_Output+0x3c>)
 8000b86:	f003 f85b 	bl	8003c40 <HAL_GPIO_Init>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010800 	.word	0x40010800

08000b98 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIO, uint16_t GPIO_pin){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = DATA_PIN;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DATA_PORT, &GPIO_InitStruct);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <Set_Pin_Input+0x3c>)
 8000bc6:	f003 f83b 	bl	8003c40 <HAL_GPIO_Init>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <DHT22_init>:
/*
 * DHT22
 */

void DHT22_init (void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	Set_Pin_Output(DATA_PORT, DATA_PIN); // set the pin as output
 8000bdc:	2102      	movs	r1, #2
 8000bde:	480d      	ldr	r0, [pc, #52]	@ (8000c14 <DHT22_init+0x3c>)
 8000be0:	f7ff ffba 	bl	8000b58 <Set_Pin_Output>
	HAL_GPIO_WritePin (DATA_PORT, DATA_PIN, 0);   // pull the pin low
 8000be4:	2200      	movs	r2, #0
 8000be6:	2102      	movs	r1, #2
 8000be8:	480a      	ldr	r0, [pc, #40]	@ (8000c14 <DHT22_init+0x3c>)
 8000bea:	f003 f9c4 	bl	8003f76 <HAL_GPIO_WritePin>
	delay(1200);   // wait for > 1ms
 8000bee:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000bf2:	f7ff ff99 	bl	8000b28 <delay>

	HAL_GPIO_WritePin (DATA_PORT, DATA_PIN, 1);   // pull the pin high
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <DHT22_init+0x3c>)
 8000bfc:	f003 f9bb 	bl	8003f76 <HAL_GPIO_WritePin>
	delay (20);   // wait for 30us
 8000c00:	2014      	movs	r0, #20
 8000c02:	f7ff ff91 	bl	8000b28 <delay>

	Set_Pin_Input(DATA_PORT, DATA_PIN);   // set as input
 8000c06:	2102      	movs	r1, #2
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <DHT22_init+0x3c>)
 8000c0a:	f7ff ffc5 	bl	8000b98 <Set_Pin_Input>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010800 	.word	0x40010800

08000c18 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	Set_Pin_Input(DATA_PORT, DATA_PIN);   // set as input
 8000c1e:	2102      	movs	r1, #2
 8000c20:	4815      	ldr	r0, [pc, #84]	@ (8000c78 <DHT22_Check_Response+0x60>)
 8000c22:	f7ff ffb9 	bl	8000b98 <Set_Pin_Input>
	uint8_t Response = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8000c2a:	2028      	movs	r0, #40	@ 0x28
 8000c2c:	f7ff ff7c 	bl	8000b28 <delay>
	if (!(HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN))) // if the pin is low
 8000c30:	2102      	movs	r1, #2
 8000c32:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <DHT22_Check_Response+0x60>)
 8000c34:	f003 f988 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10e      	bne.n	8000c5c <DHT22_Check_Response+0x44>
	{
		delay (80);   // wait for 80us
 8000c3e:	2050      	movs	r0, #80	@ 0x50
 8000c40:	f7ff ff72 	bl	8000b28 <delay>

		if ((HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN))) Response = 1;  // if the pin is high, response is ok
 8000c44:	2102      	movs	r1, #2
 8000c46:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <DHT22_Check_Response+0x60>)
 8000c48:	f003 f97e 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <DHT22_Check_Response+0x40>
 8000c52:	2301      	movs	r3, #1
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	e001      	b.n	8000c5c <DHT22_Check_Response+0x44>
		else Response = -1;
 8000c58:	23ff      	movs	r3, #255	@ 0xff
 8000c5a:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN)));   // wait for the pin to go low
 8000c5c:	bf00      	nop
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <DHT22_Check_Response+0x60>)
 8000c62:	f003 f971 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f8      	bne.n	8000c5e <DHT22_Check_Response+0x46>
	return Response;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010800 	.word	0x40010800

08000c7c <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	71bb      	strb	r3, [r7, #6]
 8000c86:	e037      	b.n	8000cf8 <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN)));   // wait for the pin to go high
 8000c88:	bf00      	nop
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	481e      	ldr	r0, [pc, #120]	@ (8000d08 <DHT22_Read+0x8c>)
 8000c8e:	f003 f95b 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f8      	beq.n	8000c8a <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 8000c98:	2028      	movs	r0, #40	@ 0x28
 8000c9a:	f7ff ff45 	bl	8000b28 <delay>

		if (!(HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN)))   // if the pin is low
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	4819      	ldr	r0, [pc, #100]	@ (8000d08 <DHT22_Read+0x8c>)
 8000ca2:	f003 f951 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10e      	bne.n	8000cca <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	e00b      	b.n	8000ce2 <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	f1c3 0307 	rsb	r3, r3, #7
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	b25a      	sxtb	r2, r3
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN)));  // wait for the pin to go low
 8000ce2:	bf00      	nop
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4808      	ldr	r0, [pc, #32]	@ (8000d08 <DHT22_Read+0x8c>)
 8000ce8:	f003 f92e 	bl	8003f48 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f8      	bne.n	8000ce4 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	71bb      	strb	r3, [r7, #6]
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	2b07      	cmp	r3, #7
 8000cfc:	d9c4      	bls.n	8000c88 <DHT22_Read+0xc>
	}

	return i;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010800 	.word	0x40010800

08000d0c <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000d0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d10:	b08c      	sub	sp, #48	@ 0x30
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000d18:	4b5b      	ldr	r3, [pc, #364]	@ (8000e88 <decodeGGA+0x17c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000d22:	e004      	b.n	8000d2e <decodeGGA+0x22>
 8000d24:	4b58      	ldr	r3, [pc, #352]	@ (8000e88 <decodeGGA+0x17c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4a57      	ldr	r2, [pc, #348]	@ (8000e88 <decodeGGA+0x17c>)
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b56      	ldr	r3, [pc, #344]	@ (8000e88 <decodeGGA+0x17c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d3c:	d1f2      	bne.n	8000d24 <decodeGGA+0x18>
	inx++;
 8000d3e:	4b52      	ldr	r3, [pc, #328]	@ (8000e88 <decodeGGA+0x17c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a50      	ldr	r2, [pc, #320]	@ (8000e88 <decodeGGA+0x17c>)
 8000d46:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000d48:	e004      	b.n	8000d54 <decodeGGA+0x48>
 8000d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e88 <decodeGGA+0x17c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a4d      	ldr	r2, [pc, #308]	@ (8000e88 <decodeGGA+0x17c>)
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b4c      	ldr	r3, [pc, #304]	@ (8000e88 <decodeGGA+0x17c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d62:	d1f2      	bne.n	8000d4a <decodeGGA+0x3e>
	inx++;
 8000d64:	4b48      	ldr	r3, [pc, #288]	@ (8000e88 <decodeGGA+0x17c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a47      	ldr	r2, [pc, #284]	@ (8000e88 <decodeGGA+0x17c>)
 8000d6c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000d6e:	e004      	b.n	8000d7a <decodeGGA+0x6e>
 8000d70:	4b45      	ldr	r3, [pc, #276]	@ (8000e88 <decodeGGA+0x17c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a44      	ldr	r2, [pc, #272]	@ (8000e88 <decodeGGA+0x17c>)
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	4b43      	ldr	r3, [pc, #268]	@ (8000e88 <decodeGGA+0x17c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d88:	d1f2      	bne.n	8000d70 <decodeGGA+0x64>
	inx++;
 8000d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e88 <decodeGGA+0x17c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a3d      	ldr	r2, [pc, #244]	@ (8000e88 <decodeGGA+0x17c>)
 8000d92:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000d94:	e004      	b.n	8000da0 <decodeGGA+0x94>
 8000d96:	4b3c      	ldr	r3, [pc, #240]	@ (8000e88 <decodeGGA+0x17c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8000e88 <decodeGGA+0x17c>)
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b39      	ldr	r3, [pc, #228]	@ (8000e88 <decodeGGA+0x17c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b2c      	cmp	r3, #44	@ 0x2c
 8000dae:	d1f2      	bne.n	8000d96 <decodeGGA+0x8a>
	inx++;
 8000db0:	4b35      	ldr	r3, [pc, #212]	@ (8000e88 <decodeGGA+0x17c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a34      	ldr	r2, [pc, #208]	@ (8000e88 <decodeGGA+0x17c>)
 8000db8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000dba:	e004      	b.n	8000dc6 <decodeGGA+0xba>
 8000dbc:	4b32      	ldr	r3, [pc, #200]	@ (8000e88 <decodeGGA+0x17c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a31      	ldr	r2, [pc, #196]	@ (8000e88 <decodeGGA+0x17c>)
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b30      	ldr	r3, [pc, #192]	@ (8000e88 <decodeGGA+0x17c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000dd4:	d1f2      	bne.n	8000dbc <decodeGGA+0xb0>
	inx++;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e88 <decodeGGA+0x17c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8000e88 <decodeGGA+0x17c>)
 8000dde:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000de0:	e004      	b.n	8000dec <decodeGGA+0xe0>
 8000de2:	4b29      	ldr	r3, [pc, #164]	@ (8000e88 <decodeGGA+0x17c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a27      	ldr	r2, [pc, #156]	@ (8000e88 <decodeGGA+0x17c>)
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <decodeGGA+0x17c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b2c      	cmp	r3, #44	@ 0x2c
 8000dfa:	d1f2      	bne.n	8000de2 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <decodeGGA+0x17c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <decodeGGA+0x17c>)
 8000e04:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000e06:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <decodeGGA+0x17c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b31      	cmp	r3, #49	@ 0x31
 8000e14:	d00f      	beq.n	8000e36 <decodeGGA+0x12a>
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <decodeGGA+0x17c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b32      	cmp	r3, #50	@ 0x32
 8000e24:	d007      	beq.n	8000e36 <decodeGGA+0x12a>
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <decodeGGA+0x17c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b36      	cmp	r3, #54	@ 0x36
 8000e34:	d106      	bne.n	8000e44 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <decodeGGA+0x17c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000e42:	e009      	b.n	8000e58 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e2f2      	b.n	8001434 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <decodeGGA+0x17c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <decodeGGA+0x17c>)
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <decodeGGA+0x17c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e66:	d1f2      	bne.n	8000e4e <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000e68:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <decodeGGA+0x17c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a06      	ldr	r2, [pc, #24]	@ (8000e88 <decodeGGA+0x17c>)
 8000e70:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	220c      	movs	r2, #12
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f006 fbe3 	bl	8007646 <memset>
	i=0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000e84:	e016      	b.n	8000eb4 <decodeGGA+0x1a8>
 8000e86:	bf00      	nop
 8000e88:	2000021c 	.word	0x2000021c
	{
		buffer[i] = GGAbuffer[inx];
 8000e8c:	4ba7      	ldr	r3, [pc, #668]	@ (800112c <decodeGGA+0x420>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	7819      	ldrb	r1, [r3, #0]
 8000e98:	f107 020c 	add.w	r2, r7, #12
 8000e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e9e:	4413      	add	r3, r2
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	701a      	strb	r2, [r3, #0]
		i++;
 8000ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000eaa:	4ba0      	ldr	r3, [pc, #640]	@ (800112c <decodeGGA+0x420>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	4a9e      	ldr	r2, [pc, #632]	@ (800112c <decodeGGA+0x420>)
 8000eb2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000eb4:	4b9d      	ldr	r3, [pc, #628]	@ (800112c <decodeGGA+0x420>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ec2:	d1e3      	bne.n	8000e8c <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 fdb3 	bl	8006a34 <atoi>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a97      	ldr	r2, [pc, #604]	@ (8001130 <decodeGGA+0x424>)
 8000ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed6:	1312      	asrs	r2, r2, #12
 8000ed8:	17db      	asrs	r3, r3, #31
 8000eda:	1ad2      	subs	r2, r2, r3
 8000edc:	4b95      	ldr	r3, [pc, #596]	@ (8001134 <decodeGGA+0x428>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4995      	ldr	r1, [pc, #596]	@ (8001138 <decodeGGA+0x42c>)
 8000ee2:	fb81 0103 	smull	r0, r1, r1, r3
 8000ee6:	1149      	asrs	r1, r1, #5
 8000ee8:	17db      	asrs	r3, r3, #31
 8000eea:	1acb      	subs	r3, r1, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	4a93      	ldr	r2, [pc, #588]	@ (800113c <decodeGGA+0x430>)
 8000ef0:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f005 fd9c 	bl	8006a34 <atoi>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a8e      	ldr	r2, [pc, #568]	@ (8001138 <decodeGGA+0x42c>)
 8000f00:	fb82 1203 	smull	r1, r2, r2, r3
 8000f04:	1152      	asrs	r2, r2, #5
 8000f06:	17db      	asrs	r3, r3, #31
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	4a8b      	ldr	r2, [pc, #556]	@ (8001138 <decodeGGA+0x42c>)
 8000f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f10:	1151      	asrs	r1, r2, #5
 8000f12:	17da      	asrs	r2, r3, #31
 8000f14:	1a8a      	subs	r2, r1, r2
 8000f16:	2164      	movs	r1, #100	@ 0x64
 8000f18:	fb01 f202 	mul.w	r2, r1, r2
 8000f1c:	1a9a      	subs	r2, r3, r2
 8000f1e:	4b85      	ldr	r3, [pc, #532]	@ (8001134 <decodeGGA+0x428>)
 8000f20:	6819      	ldr	r1, [r3, #0]
 8000f22:	4b85      	ldr	r3, [pc, #532]	@ (8001138 <decodeGGA+0x42c>)
 8000f24:	fb83 0301 	smull	r0, r3, r3, r1
 8000f28:	1158      	asrs	r0, r3, #5
 8000f2a:	17cb      	asrs	r3, r1, #31
 8000f2c:	1ac3      	subs	r3, r0, r3
 8000f2e:	2064      	movs	r0, #100	@ 0x64
 8000f30:	fb00 f303 	mul.w	r3, r0, r3
 8000f34:	1acb      	subs	r3, r1, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	4a81      	ldr	r2, [pc, #516]	@ (8001140 <decodeGGA+0x434>)
 8000f3a:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8000f3c:	4b80      	ldr	r3, [pc, #512]	@ (8001140 <decodeGGA+0x434>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f42:	dd09      	ble.n	8000f58 <decodeGGA+0x24c>
	{
		min = min-60;
 8000f44:	4b7e      	ldr	r3, [pc, #504]	@ (8001140 <decodeGGA+0x434>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3b3c      	subs	r3, #60	@ 0x3c
 8000f4a:	4a7d      	ldr	r2, [pc, #500]	@ (8001140 <decodeGGA+0x434>)
 8000f4c:	6013      	str	r3, [r2, #0]
		hr++;
 8000f4e:	4b7b      	ldr	r3, [pc, #492]	@ (800113c <decodeGGA+0x430>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a79      	ldr	r2, [pc, #484]	@ (800113c <decodeGGA+0x430>)
 8000f56:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000f58:	4b78      	ldr	r3, [pc, #480]	@ (800113c <decodeGGA+0x430>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da09      	bge.n	8000f74 <decodeGGA+0x268>
	{
		hr=24+hr;
 8000f60:	4b76      	ldr	r3, [pc, #472]	@ (800113c <decodeGGA+0x430>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3318      	adds	r3, #24
 8000f66:	4a75      	ldr	r2, [pc, #468]	@ (800113c <decodeGGA+0x430>)
 8000f68:	6013      	str	r3, [r2, #0]
		daychange--;
 8000f6a:	4b76      	ldr	r3, [pc, #472]	@ (8001144 <decodeGGA+0x438>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	4a74      	ldr	r2, [pc, #464]	@ (8001144 <decodeGGA+0x438>)
 8000f72:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8000f74:	4b71      	ldr	r3, [pc, #452]	@ (800113c <decodeGGA+0x430>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b17      	cmp	r3, #23
 8000f7a:	dd09      	ble.n	8000f90 <decodeGGA+0x284>
	{
		hr=hr-24;
 8000f7c:	4b6f      	ldr	r3, [pc, #444]	@ (800113c <decodeGGA+0x430>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3b18      	subs	r3, #24
 8000f82:	4a6e      	ldr	r2, [pc, #440]	@ (800113c <decodeGGA+0x430>)
 8000f84:	6013      	str	r3, [r2, #0]
		daychange++;
 8000f86:	4b6f      	ldr	r3, [pc, #444]	@ (8001144 <decodeGGA+0x438>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8001144 <decodeGGA+0x438>)
 8000f8e:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000f90:	4b6a      	ldr	r3, [pc, #424]	@ (800113c <decodeGGA+0x430>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000f98:	4b69      	ldr	r3, [pc, #420]	@ (8001140 <decodeGGA+0x434>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f005 fd45 	bl	8006a34 <atoi>
 8000faa:	4602      	mov	r2, r0
 8000fac:	4b62      	ldr	r3, [pc, #392]	@ (8001138 <decodeGGA+0x42c>)
 8000fae:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb2:	1159      	asrs	r1, r3, #5
 8000fb4:	17d3      	asrs	r3, r2, #31
 8000fb6:	1acb      	subs	r3, r1, r3
 8000fb8:	2164      	movs	r1, #100	@ 0x64
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000fc4:	4b59      	ldr	r3, [pc, #356]	@ (800112c <decodeGGA+0x420>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a58      	ldr	r2, [pc, #352]	@ (800112c <decodeGGA+0x420>)
 8000fcc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f006 fb35 	bl	8007646 <memset>
	i=0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000fe0:	e013      	b.n	800100a <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8000fe2:	4b52      	ldr	r3, [pc, #328]	@ (800112c <decodeGGA+0x420>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	7819      	ldrb	r1, [r3, #0]
 8000fee:	f107 020c 	add.w	r2, r7, #12
 8000ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff4:	4413      	add	r3, r2
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
		i++;
 8000ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001000:	4b4a      	ldr	r3, [pc, #296]	@ (800112c <decodeGGA+0x420>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	4a49      	ldr	r2, [pc, #292]	@ (800112c <decodeGGA+0x420>)
 8001008:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800100a:	4b48      	ldr	r3, [pc, #288]	@ (800112c <decodeGGA+0x420>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b2c      	cmp	r3, #44	@ 0x2c
 8001018:	d1e3      	bne.n	8000fe2 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f896 	bl	8000150 <strlen>
 8001024:	4603      	mov	r3, r0
 8001026:	2b05      	cmp	r3, #5
 8001028:	d801      	bhi.n	800102e <decodeGGA+0x322>
 800102a:	2302      	movs	r3, #2
 800102c:	e202      	b.n	8001434 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4618      	mov	r0, r3
 8001034:	f005 fcfe 	bl	8006a34 <atoi>
 8001038:	4603      	mov	r3, r0
 800103a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001040:	e002      	b.n	8001048 <decodeGGA+0x33c>
 8001042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001044:	3301      	adds	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b2e      	cmp	r3, #46	@ 0x2e
 8001054:	d1f5      	bne.n	8001042 <decodeGGA+0x336>
	j++;
 8001056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001058:	3301      	adds	r3, #1
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f875 	bl	8000150 <strlen>
 8001066:	4602      	mov	r2, r0
 8001068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 800106e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001070:	f107 020c 	add.w	r2, r7, #12
 8001074:	4413      	add	r3, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f005 fcdc 	bl	8006a34 <atoi>
 800107c:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800107e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f9be 	bl	8000404 <__aeabi_i2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <decodeGGA+0x43c>)
 800108e:	f7ff fb4d 	bl	800072c <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4690      	mov	r8, r2
 8001098:	4699      	mov	r9, r3
 800109a:	69f8      	ldr	r0, [r7, #28]
 800109c:	f7ff f9b2 	bl	8000404 <__aeabi_i2d>
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	3302      	adds	r3, #2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f9ab 	bl	8000404 <__aeabi_i2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4925      	ldr	r1, [pc, #148]	@ (800114c <decodeGGA+0x440>)
 80010b8:	f008 fb98 	bl	80097ec <pow>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4620      	mov	r0, r4
 80010c2:	4629      	mov	r1, r5
 80010c4:	f7ff fb32 	bl	800072c <__aeabi_ddiv>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4640      	mov	r0, r8
 80010ce:	4649      	mov	r1, r9
 80010d0:	f7ff f84c 	bl	800016c <__adddf3>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fcd4 	bl	8000a88 <__aeabi_d2f>
 80010e0:	4603      	mov	r3, r0
 80010e2:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	601a      	str	r2, [r3, #0]
	inx++;
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <decodeGGA+0x420>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	4a0e      	ldr	r2, [pc, #56]	@ (800112c <decodeGGA+0x420>)
 80010f2:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <decodeGGA+0x420>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <decodeGGA+0x420>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a08      	ldr	r2, [pc, #32]	@ (800112c <decodeGGA+0x420>)
 800110c:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <decodeGGA+0x420>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	4a05      	ldr	r2, [pc, #20]	@ (800112c <decodeGGA+0x420>)
 8001116:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	220c      	movs	r2, #12
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f006 fa90 	bl	8007646 <memset>
	i=0;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800112a:	e025      	b.n	8001178 <decodeGGA+0x46c>
 800112c:	2000021c 	.word	0x2000021c
 8001130:	68db8bad 	.word	0x68db8bad
 8001134:	20000000 	.word	0x20000000
 8001138:	51eb851f 	.word	0x51eb851f
 800113c:	20000220 	.word	0x20000220
 8001140:	20000224 	.word	0x20000224
 8001144:	20000234 	.word	0x20000234
 8001148:	40590000 	.word	0x40590000
 800114c:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8001150:	4b88      	ldr	r3, [pc, #544]	@ (8001374 <decodeGGA+0x668>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	7819      	ldrb	r1, [r3, #0]
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001162:	4413      	add	r3, r2
 8001164:	460a      	mov	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
		i++;
 8001168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116a:	3301      	adds	r3, #1
 800116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800116e:	4b81      	ldr	r3, [pc, #516]	@ (8001374 <decodeGGA+0x668>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a7f      	ldr	r2, [pc, #508]	@ (8001374 <decodeGGA+0x668>)
 8001176:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001178:	4b7e      	ldr	r3, [pc, #504]	@ (8001374 <decodeGGA+0x668>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b2c      	cmp	r3, #44	@ 0x2c
 8001186:	d1e3      	bne.n	8001150 <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4618      	mov	r0, r3
 800118e:	f005 fc51 	bl	8006a34 <atoi>
 8001192:	4603      	mov	r3, r0
 8001194:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 800119a:	e002      	b.n	80011a2 <decodeGGA+0x496>
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	3301      	adds	r3, #1
 80011a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80011ae:	d1f5      	bne.n	800119c <decodeGGA+0x490>
	j++;
 80011b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b2:	3301      	adds	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7fe ffc8 	bl	8000150 <strlen>
 80011c0:	4602      	mov	r2, r0
 80011c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80011c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ca:	f107 020c 	add.w	r2, r7, #12
 80011ce:	4413      	add	r3, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f005 fc2f 	bl	8006a34 <atoi>
 80011d6:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80011d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f911 	bl	8000404 <__aeabi_i2d>
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b64      	ldr	r3, [pc, #400]	@ (8001378 <decodeGGA+0x66c>)
 80011e8:	f7ff faa0 	bl	800072c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4690      	mov	r8, r2
 80011f2:	4699      	mov	r9, r3
 80011f4:	69f8      	ldr	r0, [r7, #28]
 80011f6:	f7ff f905 	bl	8000404 <__aeabi_i2d>
 80011fa:	4604      	mov	r4, r0
 80011fc:	460d      	mov	r5, r1
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	3302      	adds	r3, #2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f8fe 	bl	8000404 <__aeabi_i2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	f04f 0000 	mov.w	r0, #0
 8001210:	495a      	ldr	r1, [pc, #360]	@ (800137c <decodeGGA+0x670>)
 8001212:	f008 faeb 	bl	80097ec <pow>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff fa85 	bl	800072c <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4640      	mov	r0, r8
 8001228:	4649      	mov	r1, r9
 800122a:	f7fe ff9f 	bl	800016c <__adddf3>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc27 	bl	8000a88 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	609a      	str	r2, [r3, #8]
	inx++;
 8001244:	4b4b      	ldr	r3, [pc, #300]	@ (8001374 <decodeGGA+0x668>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a4a      	ldr	r2, [pc, #296]	@ (8001374 <decodeGGA+0x668>)
 800124c:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800124e:	4b49      	ldr	r3, [pc, #292]	@ (8001374 <decodeGGA+0x668>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800125e:	4b45      	ldr	r3, [pc, #276]	@ (8001374 <decodeGGA+0x668>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	4a43      	ldr	r2, [pc, #268]	@ (8001374 <decodeGGA+0x668>)
 8001266:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001268:	4b42      	ldr	r3, [pc, #264]	@ (8001374 <decodeGGA+0x668>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	4a41      	ldr	r2, [pc, #260]	@ (8001374 <decodeGGA+0x668>)
 8001270:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8001272:	4b40      	ldr	r3, [pc, #256]	@ (8001374 <decodeGGA+0x668>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	4a3e      	ldr	r2, [pc, #248]	@ (8001374 <decodeGGA+0x668>)
 800127a:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 800127c:	4b3d      	ldr	r3, [pc, #244]	@ (8001374 <decodeGGA+0x668>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	4a3c      	ldr	r2, [pc, #240]	@ (8001374 <decodeGGA+0x668>)
 8001284:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	220c      	movs	r2, #12
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f006 f9d9 	bl	8007646 <memset>
	i=0;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001298:	e013      	b.n	80012c2 <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 800129a:	4b36      	ldr	r3, [pc, #216]	@ (8001374 <decodeGGA+0x668>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	7819      	ldrb	r1, [r3, #0]
 80012a6:	f107 020c 	add.w	r2, r7, #12
 80012aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ac:	4413      	add	r3, r2
 80012ae:	460a      	mov	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
		i++;
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	3301      	adds	r3, #1
 80012b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80012b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <decodeGGA+0x668>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a2d      	ldr	r2, [pc, #180]	@ (8001374 <decodeGGA+0x668>)
 80012c0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80012c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001374 <decodeGGA+0x668>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b2c      	cmp	r3, #44	@ 0x2c
 80012d0:	d1e3      	bne.n	800129a <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 fbac 	bl	8006a34 <atoi>
 80012dc:	4602      	mov	r2, r0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80012e2:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <decodeGGA+0x668>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a22      	ldr	r2, [pc, #136]	@ (8001374 <decodeGGA+0x668>)
 80012ea:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80012ec:	e004      	b.n	80012f8 <decodeGGA+0x5ec>
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <decodeGGA+0x668>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001374 <decodeGGA+0x668>)
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <decodeGGA+0x668>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b2c      	cmp	r3, #44	@ 0x2c
 8001306:	d1f2      	bne.n	80012ee <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <decodeGGA+0x668>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <decodeGGA+0x668>)
 8001310:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	220c      	movs	r2, #12
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f006 f993 	bl	8007646 <memset>
	i=0;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 8001324:	e013      	b.n	800134e <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <decodeGGA+0x668>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	7819      	ldrb	r1, [r3, #0]
 8001332:	f107 020c 	add.w	r2, r7, #12
 8001336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001338:	4413      	add	r3, r2
 800133a:	460a      	mov	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
		i++;
 800133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001340:	3301      	adds	r3, #1
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <decodeGGA+0x668>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <decodeGGA+0x668>)
 800134c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <decodeGGA+0x668>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b2c      	cmp	r3, #44	@ 0x2c
 800135c:	d1e3      	bne.n	8001326 <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fb66 	bl	8006a34 <atoi>
 8001368:	4603      	mov	r3, r0
 800136a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 8001370:	e009      	b.n	8001386 <decodeGGA+0x67a>
 8001372:	bf00      	nop
 8001374:	2000021c 	.word	0x2000021c
 8001378:	40590000 	.word	0x40590000
 800137c:	40240000 	.word	0x40240000
 8001380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001382:	3301      	adds	r3, #1
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001386:	f107 020c 	add.w	r2, r7, #12
 800138a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b2e      	cmp	r3, #46	@ 0x2e
 8001392:	d1f5      	bne.n	8001380 <decodeGGA+0x674>
	j++;
 8001394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001396:	3301      	adds	r3, #1
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe fed6 	bl	8000150 <strlen>
 80013a4:	4602      	mov	r2, r0
 80013a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80013ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ae:	f107 020c 	add.w	r2, r7, #12
 80013b2:	4413      	add	r3, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 fb3d 	bl	8006a34 <atoi>
 80013ba:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80013bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f81f 	bl	8000404 <__aeabi_i2d>
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
 80013ca:	69f8      	ldr	r0, [r7, #28]
 80013cc:	f7ff f81a 	bl	8000404 <__aeabi_i2d>
 80013d0:	4680      	mov	r8, r0
 80013d2:	4689      	mov	r9, r1
 80013d4:	6a38      	ldr	r0, [r7, #32]
 80013d6:	f7ff f815 	bl	8000404 <__aeabi_i2d>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	f04f 0000 	mov.w	r0, #0
 80013e2:	4917      	ldr	r1, [pc, #92]	@ (8001440 <decodeGGA+0x734>)
 80013e4:	f008 fa02 	bl	80097ec <pow>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4640      	mov	r0, r8
 80013ee:	4649      	mov	r1, r9
 80013f0:	f7ff f99c 	bl	800072c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7fe feb6 	bl	800016c <__adddf3>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fb3e 	bl	8000a88 <__aeabi_d2f>
 800140c:	4603      	mov	r3, r0
 800140e:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	621a      	str	r2, [r3, #32]

	inx++;
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <decodeGGA+0x738>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a09      	ldr	r2, [pc, #36]	@ (8001444 <decodeGGA+0x738>)
 800141e:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <decodeGGA+0x738>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 8001432:	2300      	movs	r3, #0

}
 8001434:	4618      	mov	r0, r3
 8001436:	3730      	adds	r7, #48	@ 0x30
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800143e:	bf00      	nop
 8001440:	40240000 	.word	0x40240000
 8001444:	2000021c 	.word	0x2000021c

08001448 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800144c:	b090      	sub	sp, #64	@ 0x40
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001454:	4b92      	ldr	r3, [pc, #584]	@ (80016a0 <decodeRMC+0x258>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800145e:	e004      	b.n	800146a <decodeRMC+0x22>
 8001460:	4b8f      	ldr	r3, [pc, #572]	@ (80016a0 <decodeRMC+0x258>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a8e      	ldr	r2, [pc, #568]	@ (80016a0 <decodeRMC+0x258>)
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b8d      	ldr	r3, [pc, #564]	@ (80016a0 <decodeRMC+0x258>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b2c      	cmp	r3, #44	@ 0x2c
 8001478:	d1f2      	bne.n	8001460 <decodeRMC+0x18>
	inx++;
 800147a:	4b89      	ldr	r3, [pc, #548]	@ (80016a0 <decodeRMC+0x258>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a87      	ldr	r2, [pc, #540]	@ (80016a0 <decodeRMC+0x258>)
 8001482:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001484:	e004      	b.n	8001490 <decodeRMC+0x48>
 8001486:	4b86      	ldr	r3, [pc, #536]	@ (80016a0 <decodeRMC+0x258>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	4a84      	ldr	r2, [pc, #528]	@ (80016a0 <decodeRMC+0x258>)
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b83      	ldr	r3, [pc, #524]	@ (80016a0 <decodeRMC+0x258>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b2c      	cmp	r3, #44	@ 0x2c
 800149e:	d1f2      	bne.n	8001486 <decodeRMC+0x3e>
	inx++;
 80014a0:	4b7f      	ldr	r3, [pc, #508]	@ (80016a0 <decodeRMC+0x258>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a7e      	ldr	r2, [pc, #504]	@ (80016a0 <decodeRMC+0x258>)
 80014a8:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80014aa:	4b7d      	ldr	r3, [pc, #500]	@ (80016a0 <decodeRMC+0x258>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b41      	cmp	r3, #65	@ 0x41
 80014b8:	d10d      	bne.n	80014d6 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80014c0:	4b77      	ldr	r3, [pc, #476]	@ (80016a0 <decodeRMC+0x258>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a76      	ldr	r2, [pc, #472]	@ (80016a0 <decodeRMC+0x258>)
 80014c8:	6013      	str	r3, [r2, #0]
	inx++;
 80014ca:	4b75      	ldr	r3, [pc, #468]	@ (80016a0 <decodeRMC+0x258>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a73      	ldr	r2, [pc, #460]	@ (80016a0 <decodeRMC+0x258>)
 80014d2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80014d4:	e009      	b.n	80014ea <decodeRMC+0xa2>
		rmc->isValid =0;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
		return 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	e1d5      	b.n	800188c <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80014e0:	4b6f      	ldr	r3, [pc, #444]	@ (80016a0 <decodeRMC+0x258>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a6e      	ldr	r2, [pc, #440]	@ (80016a0 <decodeRMC+0x258>)
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b6d      	ldr	r3, [pc, #436]	@ (80016a0 <decodeRMC+0x258>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b2c      	cmp	r3, #44	@ 0x2c
 80014f8:	d1f2      	bne.n	80014e0 <decodeRMC+0x98>
	inx++;
 80014fa:	4b69      	ldr	r3, [pc, #420]	@ (80016a0 <decodeRMC+0x258>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	4a67      	ldr	r2, [pc, #412]	@ (80016a0 <decodeRMC+0x258>)
 8001502:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8001504:	e004      	b.n	8001510 <decodeRMC+0xc8>
 8001506:	4b66      	ldr	r3, [pc, #408]	@ (80016a0 <decodeRMC+0x258>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a64      	ldr	r2, [pc, #400]	@ (80016a0 <decodeRMC+0x258>)
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b63      	ldr	r3, [pc, #396]	@ (80016a0 <decodeRMC+0x258>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b2c      	cmp	r3, #44	@ 0x2c
 800151e:	d1f2      	bne.n	8001506 <decodeRMC+0xbe>
	inx++;
 8001520:	4b5f      	ldr	r3, [pc, #380]	@ (80016a0 <decodeRMC+0x258>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a5e      	ldr	r2, [pc, #376]	@ (80016a0 <decodeRMC+0x258>)
 8001528:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 800152a:	e004      	b.n	8001536 <decodeRMC+0xee>
 800152c:	4b5c      	ldr	r3, [pc, #368]	@ (80016a0 <decodeRMC+0x258>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a5b      	ldr	r2, [pc, #364]	@ (80016a0 <decodeRMC+0x258>)
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b5a      	ldr	r3, [pc, #360]	@ (80016a0 <decodeRMC+0x258>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b2c      	cmp	r3, #44	@ 0x2c
 8001544:	d1f2      	bne.n	800152c <decodeRMC+0xe4>
	inx++;
 8001546:	4b56      	ldr	r3, [pc, #344]	@ (80016a0 <decodeRMC+0x258>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4a54      	ldr	r2, [pc, #336]	@ (80016a0 <decodeRMC+0x258>)
 800154e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001550:	e004      	b.n	800155c <decodeRMC+0x114>
 8001552:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <decodeRMC+0x258>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a51      	ldr	r2, [pc, #324]	@ (80016a0 <decodeRMC+0x258>)
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b50      	ldr	r3, [pc, #320]	@ (80016a0 <decodeRMC+0x258>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b2c      	cmp	r3, #44	@ 0x2c
 800156a:	d1f2      	bne.n	8001552 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 800156c:	4b4c      	ldr	r3, [pc, #304]	@ (80016a0 <decodeRMC+0x258>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a4b      	ldr	r2, [pc, #300]	@ (80016a0 <decodeRMC+0x258>)
 8001574:	6013      	str	r3, [r2, #0]
	i=0;
 8001576:	2300      	movs	r3, #0
 8001578:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	220c      	movs	r2, #12
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f006 f85f 	bl	8007646 <memset>
	while (RMCbuffer[inx] != ',')
 8001588:	e013      	b.n	80015b2 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 800158a:	4b45      	ldr	r3, [pc, #276]	@ (80016a0 <decodeRMC+0x258>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	7819      	ldrb	r1, [r3, #0]
 8001596:	f107 0208 	add.w	r2, r7, #8
 800159a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800159c:	4413      	add	r3, r2
 800159e:	460a      	mov	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
		i++;
 80015a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015a4:	3301      	adds	r3, #1
 80015a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80015a8:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <decodeRMC+0x258>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a3c      	ldr	r2, [pc, #240]	@ (80016a0 <decodeRMC+0x258>)
 80015b0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <decodeRMC+0x258>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b2c      	cmp	r3, #44	@ 0x2c
 80015c0:	d1e3      	bne.n	800158a <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d055      	beq.n	8001678 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f005 fa2f 	bl	8006a34 <atoi>
 80015d6:	4603      	mov	r3, r0
 80015d8:	867b      	strh	r3, [r7, #50]	@ 0x32
		int j = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (buffer[j] != '.') j++;   // same as above
 80015de:	e002      	b.n	80015e6 <decodeRMC+0x19e>
 80015e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015e2:	3301      	adds	r3, #1
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015e6:	f107 0208 	add.w	r2, r7, #8
 80015ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80015f2:	d1f5      	bne.n	80015e0 <decodeRMC+0x198>
		j++;
 80015f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015f6:	3301      	adds	r3, #1
 80015f8:	63bb      	str	r3, [r7, #56]	@ 0x38
		int declen = (strlen(buffer))-j;
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fda6 	bl	8000150 <strlen>
 8001604:	4602      	mov	r2, r0
 8001606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int dec = atoi ((char *) buffer+j);
 800160c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800160e:	f107 0208 	add.w	r2, r7, #8
 8001612:	4413      	add	r3, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fa0d 	bl	8006a34 <atoi>
 800161a:	62b8      	str	r0, [r7, #40]	@ 0x28
		float lat = num + (dec/pow(10, (declen)));
 800161c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe feef 	bl	8000404 <__aeabi_i2d>
 8001626:	4604      	mov	r4, r0
 8001628:	460d      	mov	r5, r1
 800162a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800162c:	f7fe feea 	bl	8000404 <__aeabi_i2d>
 8001630:	4680      	mov	r8, r0
 8001632:	4689      	mov	r9, r1
 8001634:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001636:	f7fe fee5 	bl	8000404 <__aeabi_i2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	f04f 0000 	mov.w	r0, #0
 8001642:	4918      	ldr	r1, [pc, #96]	@ (80016a4 <decodeRMC+0x25c>)
 8001644:	f008 f8d2 	bl	80097ec <pow>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4640      	mov	r0, r8
 800164e:	4649      	mov	r1, r9
 8001650:	f7ff f86c 	bl	800072c <__aeabi_ddiv>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7fe fd86 	bl	800016c <__adddf3>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fa0e 	bl	8000a88 <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
		rmc->speed = lat;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	e003      	b.n	8001680 <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <decodeRMC+0x258>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <decodeRMC+0x258>)
 8001688:	6013      	str	r3, [r2, #0]
	i=0;
 800168a:	2300      	movs	r3, #0
 800168c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	220c      	movs	r2, #12
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f005 ffd5 	bl	8007646 <memset>
	while (RMCbuffer[inx] != ',')
 800169c:	e018      	b.n	80016d0 <decodeRMC+0x288>
 800169e:	bf00      	nop
 80016a0:	2000021c 	.word	0x2000021c
 80016a4:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 80016a8:	4b7b      	ldr	r3, [pc, #492]	@ (8001898 <decodeRMC+0x450>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	7819      	ldrb	r1, [r3, #0]
 80016b4:	f107 0208 	add.w	r2, r7, #8
 80016b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ba:	4413      	add	r3, r2
 80016bc:	460a      	mov	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
		i++;
 80016c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016c2:	3301      	adds	r3, #1
 80016c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80016c6:	4b74      	ldr	r3, [pc, #464]	@ (8001898 <decodeRMC+0x450>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4a72      	ldr	r2, [pc, #456]	@ (8001898 <decodeRMC+0x450>)
 80016ce:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80016d0:	4b71      	ldr	r3, [pc, #452]	@ (8001898 <decodeRMC+0x450>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b2c      	cmp	r3, #44	@ 0x2c
 80016de:	d1e3      	bne.n	80016a8 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d055      	beq.n	8001796 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 f9a0 	bl	8006a34 <atoi>
 80016f4:	4603      	mov	r3, r0
 80016f6:	847b      	strh	r3, [r7, #34]	@ 0x22
		int j = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	637b      	str	r3, [r7, #52]	@ 0x34
		while (buffer[j] != '.') j++;   // same as above
 80016fc:	e002      	b.n	8001704 <decodeRMC+0x2bc>
 80016fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001700:	3301      	adds	r3, #1
 8001702:	637b      	str	r3, [r7, #52]	@ 0x34
 8001704:	f107 0208 	add.w	r2, r7, #8
 8001708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001710:	d1f5      	bne.n	80016fe <decodeRMC+0x2b6>
		j++;
 8001712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001714:	3301      	adds	r3, #1
 8001716:	637b      	str	r3, [r7, #52]	@ 0x34
		int declen = (strlen(buffer))-j;
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fd17 	bl	8000150 <strlen>
 8001722:	4602      	mov	r2, r0
 8001724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 800172a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800172c:	f107 0208 	add.w	r2, r7, #8
 8001730:	4413      	add	r3, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f005 f97e 	bl	8006a34 <atoi>
 8001738:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 800173a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe60 	bl	8000404 <__aeabi_i2d>
 8001744:	4604      	mov	r4, r0
 8001746:	460d      	mov	r5, r1
 8001748:	69b8      	ldr	r0, [r7, #24]
 800174a:	f7fe fe5b 	bl	8000404 <__aeabi_i2d>
 800174e:	4680      	mov	r8, r0
 8001750:	4689      	mov	r9, r1
 8001752:	69f8      	ldr	r0, [r7, #28]
 8001754:	f7fe fe56 	bl	8000404 <__aeabi_i2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	494e      	ldr	r1, [pc, #312]	@ (800189c <decodeRMC+0x454>)
 8001762:	f008 f843 	bl	80097ec <pow>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4640      	mov	r0, r8
 800176c:	4649      	mov	r1, r9
 800176e:	f7fe ffdd 	bl	800072c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f7fe fcf7 	bl	800016c <__adddf3>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f97f 	bl	8000a88 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	e003      	b.n	800179e <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800179e:	4b3e      	ldr	r3, [pc, #248]	@ (8001898 <decodeRMC+0x450>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001898 <decodeRMC+0x450>)
 80017a6:	6013      	str	r3, [r2, #0]
	i=0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	220c      	movs	r2, #12
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 ff46 	bl	8007646 <memset>
	while (RMCbuffer[inx] != ',')
 80017ba:	e013      	b.n	80017e4 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 80017bc:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <decodeRMC+0x450>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	7819      	ldrb	r1, [r3, #0]
 80017c8:	f107 0208 	add.w	r2, r7, #8
 80017cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017ce:	4413      	add	r3, r2
 80017d0:	460a      	mov	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
		i++;
 80017d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017d6:	3301      	adds	r3, #1
 80017d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80017da:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <decodeRMC+0x450>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001898 <decodeRMC+0x450>)
 80017e2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80017e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001898 <decodeRMC+0x450>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80017f2:	d1e3      	bne.n	80017bc <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4618      	mov	r0, r3
 80017fa:	f005 f91b 	bl	8006a34 <atoi>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a27      	ldr	r2, [pc, #156]	@ (80018a0 <decodeRMC+0x458>)
 8001802:	fb82 1203 	smull	r1, r2, r2, r3
 8001806:	1312      	asrs	r2, r2, #12
 8001808:	17db      	asrs	r3, r3, #31
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	4a25      	ldr	r2, [pc, #148]	@ (80018a4 <decodeRMC+0x45c>)
 800180e:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4618      	mov	r0, r3
 8001816:	f005 f90d 	bl	8006a34 <atoi>
 800181a:	4603      	mov	r3, r0
 800181c:	4a22      	ldr	r2, [pc, #136]	@ (80018a8 <decodeRMC+0x460>)
 800181e:	fb82 1203 	smull	r1, r2, r2, r3
 8001822:	1152      	asrs	r2, r2, #5
 8001824:	17db      	asrs	r3, r3, #31
 8001826:	1ad2      	subs	r2, r2, r3
 8001828:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <decodeRMC+0x460>)
 800182a:	fb83 1302 	smull	r1, r3, r3, r2
 800182e:	1159      	asrs	r1, r3, #5
 8001830:	17d3      	asrs	r3, r2, #31
 8001832:	1acb      	subs	r3, r1, r3
 8001834:	2164      	movs	r1, #100	@ 0x64
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <decodeRMC+0x464>)
 800183e:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f005 f8f5 	bl	8006a34 <atoi>
 800184a:	4602      	mov	r2, r0
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <decodeRMC+0x460>)
 800184e:	fb83 1302 	smull	r1, r3, r3, r2
 8001852:	1159      	asrs	r1, r3, #5
 8001854:	17d3      	asrs	r3, r2, #31
 8001856:	1acb      	subs	r3, r1, r3
 8001858:	2164      	movs	r1, #100	@ 0x64
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	4a13      	ldr	r2, [pc, #76]	@ (80018b0 <decodeRMC+0x468>)
 8001862:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <decodeRMC+0x45c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <decodeRMC+0x46c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4413      	add	r3, r2
 800186e:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <decodeRMC+0x45c>)
 8001870:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <decodeRMC+0x45c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <decodeRMC+0x464>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <decodeRMC+0x468>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	609a      	str	r2, [r3, #8]

	return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3740      	adds	r7, #64	@ 0x40
 8001890:	46bd      	mov	sp, r7
 8001892:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001896:	bf00      	nop
 8001898:	2000021c 	.word	0x2000021c
 800189c:	40240000 	.word	0x40240000
 80018a0:	68db8bad 	.word	0x68db8bad
 80018a4:	20000228 	.word	0x20000228
 80018a8:	51eb851f 	.word	0x51eb851f
 80018ac:	2000022c 	.word	0x2000022c
 80018b0:	20000230 	.word	0x20000230
 80018b4:	20000234 	.word	0x20000234

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018be:	f001 fc53 	bl	8003168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c2:	f000 fa09 	bl	8001cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c6:	f000 fbbf 	bl	8002048 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80018ca:	f000 fb71 	bl	8001fb0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80018ce:	f000 fa61 	bl	8001d94 <MX_ADC1_Init>
  MX_TIM1_Init();
 80018d2:	f000 facb 	bl	8001e6c <MX_TIM1_Init>
  MX_TIM2_Init();
 80018d6:	f000 fb1f 	bl	8001f18 <MX_TIM2_Init>
  MX_USB_PCD_Init();
 80018da:	f000 fb93 	bl	8002004 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 80018de:	f000 fa97 	bl	8001e10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /*
   * Inicializamos el encoder
   */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80018e2:	213c      	movs	r1, #60	@ 0x3c
 80018e4:	4874      	ldr	r0, [pc, #464]	@ (8001ab8 <main+0x200>)
 80018e6:	f004 f843 	bl	8005970 <HAL_TIM_Encoder_Start>
  /*
   * Inicializamos el timer dos para la funcion de delay en us
   */
  HAL_TIM_Base_Start(&htim2);
 80018ea:	4874      	ldr	r0, [pc, #464]	@ (8001abc <main+0x204>)
 80018ec:	f003 ff54 	bl	8005798 <HAL_TIM_Base_Start>

  /*
   * Inicio del ADC
   */
  HAL_ADC_Start(&hadc1);
 80018f0:	4873      	ldr	r0, [pc, #460]	@ (8001ac0 <main+0x208>)
 80018f2:	f001 fd97 	bl	8003424 <HAL_ADC_Start>
  LCD_PrintString("GUAJOLOTERA");
  HAL_Delay(1000);
  LCD_ClearDisplay();
   */

  SSD1306_Init ();
 80018f6:	f000 fca9 	bl	800224c <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 80018fa:	2100      	movs	r1, #0
 80018fc:	2000      	movs	r0, #0
 80018fe:	f000 fe0d 	bl	800251c <SSD1306_GotoXY>
  SSD1306_Puts ("Hail Lechuga", &Font_7x10, 1);
 8001902:	2201      	movs	r2, #1
 8001904:	496f      	ldr	r1, [pc, #444]	@ (8001ac4 <main+0x20c>)
 8001906:	4870      	ldr	r0, [pc, #448]	@ (8001ac8 <main+0x210>)
 8001908:	f000 fe9c 	bl	8002644 <SSD1306_Puts>
  SSD1306_GotoXY (0,20);
 800190c:	2114      	movs	r1, #20
 800190e:	2000      	movs	r0, #0
 8001910:	f000 fe04 	bl	800251c <SSD1306_GotoXY>
  SSD1306_Puts ("COOP de lechugas", &Font_7x10, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	496b      	ldr	r1, [pc, #428]	@ (8001ac4 <main+0x20c>)
 8001918:	486c      	ldr	r0, [pc, #432]	@ (8001acc <main+0x214>)
 800191a:	f000 fe93 	bl	8002644 <SSD1306_Puts>
  SSD1306_GotoXY (0,40);
 800191e:	2128      	movs	r1, #40	@ 0x28
 8001920:	2000      	movs	r0, #0
 8001922:	f000 fdfb 	bl	800251c <SSD1306_GotoXY>
  SSD1306_Puts ("GUAJOLOTERA!!", &Font_11x18, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	4969      	ldr	r1, [pc, #420]	@ (8001ad0 <main+0x218>)
 800192a:	486a      	ldr	r0, [pc, #424]	@ (8001ad4 <main+0x21c>)
 800192c:	f000 fe8a 	bl	8002644 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001930:	f000 fd50 	bl	80023d4 <SSD1306_UpdateScreen>

  SSD1306_ScrollRight(0,7);  // scroll entire screen
 8001934:	2107      	movs	r1, #7
 8001936:	2000      	movs	r0, #0
 8001938:	f000 fc12 	bl	8002160 <SSD1306_ScrollRight>
  HAL_Delay(2000);
 800193c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001940:	f001 fc74 	bl	800322c <HAL_Delay>
  SSD1306_ScrollLeft(0,7);  // scroll entire screen
 8001944:	2107      	movs	r1, #7
 8001946:	2000      	movs	r0, #0
 8001948:	f000 fc40 	bl	80021cc <SSD1306_ScrollLeft>
  HAL_Delay(2000);
 800194c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001950:	f001 fc6c 	bl	800322c <HAL_Delay>
  SSD1306_Stopscroll();
 8001954:	f000 fc70 	bl	8002238 <SSD1306_Stopscroll>
  SSD1306_Clear();
 8001958:	f000 fe99 	bl	800268e <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //LCD_Start();
  Ringbuf_init();
 800195c:	f001 f9ce 	bl	8002cfc <Ringbuf_init>
  HAL_Delay(500);
 8001960:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001964:	f001 fc62 	bl	800322c <HAL_Delay>
    /* USER CODE BEGIN 3 */

	  /*
	   * Interfaz con el usuraio
	   */
	  std = TIM1->CNT/4;
 8001968:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad8 <main+0x220>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b5a      	ldr	r3, [pc, #360]	@ (8001adc <main+0x224>)
 8001972:	701a      	strb	r2, [r3, #0]

	  if (std == 0)
 8001974:	4b59      	ldr	r3, [pc, #356]	@ (8001adc <main+0x224>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 8112 	bne.w	8001ba2 <main+0x2ea>
	  {
		  if (Wait_for("GGA") == 1)
 800197e:	4858      	ldr	r0, [pc, #352]	@ (8001ae0 <main+0x228>)
 8001980:	f001 fae6 	bl	8002f50 <Wait_for>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d115      	bne.n	80019b6 <main+0xfe>
			  {

				  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 800198a:	4b56      	ldr	r3, [pc, #344]	@ (8001ae4 <main+0x22c>)
 800198c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001990:	601a      	str	r2, [r3, #0]

				  Copy_upto("*", GGA);
 8001992:	4955      	ldr	r1, [pc, #340]	@ (8001ae8 <main+0x230>)
 8001994:	4855      	ldr	r0, [pc, #340]	@ (8001aec <main+0x234>)
 8001996:	f001 fa5b 	bl	8002e50 <Copy_upto>
				  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 800199a:	4955      	ldr	r1, [pc, #340]	@ (8001af0 <main+0x238>)
 800199c:	4852      	ldr	r0, [pc, #328]	@ (8001ae8 <main+0x230>)
 800199e:	f7ff f9b5 	bl	8000d0c <decodeGGA>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d103      	bne.n	80019b0 <main+0xf8>
 80019a8:	4b52      	ldr	r3, [pc, #328]	@ (8001af4 <main+0x23c>)
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e002      	b.n	80019b6 <main+0xfe>
				  else flagGGA = 1;  // 1 indicates the data is invalid
 80019b0:	4b50      	ldr	r3, [pc, #320]	@ (8001af4 <main+0x23c>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
			  }

			  if (Wait_for("RMC") == 1)
 80019b6:	4850      	ldr	r0, [pc, #320]	@ (8001af8 <main+0x240>)
 80019b8:	f001 faca 	bl	8002f50 <Wait_for>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d115      	bne.n	80019ee <main+0x136>
			  {

				  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 80019c2:	4b48      	ldr	r3, [pc, #288]	@ (8001ae4 <main+0x22c>)
 80019c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c8:	601a      	str	r2, [r3, #0]

				  Copy_upto("*", RMC);
 80019ca:	494c      	ldr	r1, [pc, #304]	@ (8001afc <main+0x244>)
 80019cc:	4847      	ldr	r0, [pc, #284]	@ (8001aec <main+0x234>)
 80019ce:	f001 fa3f 	bl	8002e50 <Copy_upto>
				  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 80019d2:	494b      	ldr	r1, [pc, #300]	@ (8001b00 <main+0x248>)
 80019d4:	4849      	ldr	r0, [pc, #292]	@ (8001afc <main+0x244>)
 80019d6:	f7ff fd37 	bl	8001448 <decodeRMC>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <main+0x130>
 80019e0:	4b48      	ldr	r3, [pc, #288]	@ (8001b04 <main+0x24c>)
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e002      	b.n	80019ee <main+0x136>
				  else flagRMC = 1;  // 1 indicates the data is invalid
 80019e8:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <main+0x24c>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
			  }

			  if ((flagGGA == 2) | (flagRMC == 2))
 80019ee:	4b41      	ldr	r3, [pc, #260]	@ (8001af4 <main+0x23c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b41      	ldr	r3, [pc, #260]	@ (8001b04 <main+0x24c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8084 	beq.w	8001b1c <main+0x264>
				  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
						  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
				  lcd_send_string(lcdBuffer);
				  */

				  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8001a14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a18:	483b      	ldr	r0, [pc, #236]	@ (8001b08 <main+0x250>)
 8001a1a:	f002 fac4 	bl	8003fa6 <HAL_GPIO_TogglePin>
						  	  	  	  	  	  	  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
				  LCD_PrintString(msg);
				  */

				  //OLED
				  SSD1306_Clear();
 8001a1e:	f000 fe36 	bl	800268e <SSD1306_Clear>
				  SSD1306_GotoXY (0,0);
 8001a22:	2100      	movs	r1, #0
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 fd79 	bl	800251c <SSD1306_GotoXY>
				  SSD1306_Puts ("GPS", &Font_11x18, 1);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4928      	ldr	r1, [pc, #160]	@ (8001ad0 <main+0x218>)
 8001a2e:	4837      	ldr	r0, [pc, #220]	@ (8001b0c <main+0x254>)
 8001a30:	f000 fe08 	bl	8002644 <SSD1306_Puts>
				  sprintf (msg, "%02d / %02d / %02d",gpsData.rmcstruct.date.Day, \
 8001a34:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <main+0x238>)
 8001a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <main+0x238>)
 8001a3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <main+0x238>)
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	460b      	mov	r3, r1
 8001a44:	4932      	ldr	r1, [pc, #200]	@ (8001b10 <main+0x258>)
 8001a46:	4833      	ldr	r0, [pc, #204]	@ (8001b14 <main+0x25c>)
 8001a48:	f005 fd9a 	bl	8007580 <siprintf>
						  	  	  	  	  	  	  	 gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
				  SSD1306_GotoXY (0,20);
 8001a4c:	2114      	movs	r1, #20
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 fd64 	bl	800251c <SSD1306_GotoXY>
				  SSD1306_Puts (msg, &Font_7x10, 1);
 8001a54:	2201      	movs	r2, #1
 8001a56:	491b      	ldr	r1, [pc, #108]	@ (8001ac4 <main+0x20c>)
 8001a58:	482e      	ldr	r0, [pc, #184]	@ (8001b14 <main+0x25c>)
 8001a5a:	f000 fdf3 	bl	8002644 <SSD1306_Puts>
				  sprintf (msg,"%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001a5e:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <main+0x238>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fce0 	bl	8000428 <__aeabi_f2d>
 8001a68:	4604      	mov	r4, r0
 8001a6a:	460d      	mov	r5, r1
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <main+0x238>)
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	461e      	mov	r6, r3
				  						  	  	  	  	  	  	  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001a72:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <main+0x238>)
 8001a74:	689b      	ldr	r3, [r3, #8]
				  sprintf (msg,"%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fcd6 	bl	8000428 <__aeabi_f2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
				  						  	  	  	  	  	  	  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001a80:	491b      	ldr	r1, [pc, #108]	@ (8001af0 <main+0x238>)
 8001a82:	7b09      	ldrb	r1, [r1, #12]
				  sprintf (msg,"%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001a84:	9104      	str	r1, [sp, #16]
 8001a86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a8a:	9600      	str	r6, [sp, #0]
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	462b      	mov	r3, r5
 8001a90:	4921      	ldr	r1, [pc, #132]	@ (8001b18 <main+0x260>)
 8001a92:	4820      	ldr	r0, [pc, #128]	@ (8001b14 <main+0x25c>)
 8001a94:	f005 fd74 	bl	8007580 <siprintf>
				  SSD1306_GotoXY (0,40);
 8001a98:	2128      	movs	r1, #40	@ 0x28
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 fd3e 	bl	800251c <SSD1306_GotoXY>
				  SSD1306_Puts (msg, &Font_7x10, 1);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4908      	ldr	r1, [pc, #32]	@ (8001ac4 <main+0x20c>)
 8001aa4:	481b      	ldr	r0, [pc, #108]	@ (8001b14 <main+0x25c>)
 8001aa6:	f000 fdcd 	bl	8002644 <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8001aaa:	f000 fc93 	bl	80023d4 <SSD1306_UpdateScreen>
				  HAL_Delay(500);
 8001aae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ab2:	f001 fbbb 	bl	800322c <HAL_Delay>
 8001ab6:	e054      	b.n	8001b62 <main+0x2aa>
 8001ab8:	200002c0 	.word	0x200002c0
 8001abc:	20000308 	.word	0x20000308
 8001ac0:	2000023c 	.word	0x2000023c
 8001ac4:	20000004 	.word	0x20000004
 8001ac8:	0800a620 	.word	0x0800a620
 8001acc:	0800a630 	.word	0x0800a630
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	0800a644 	.word	0x0800a644
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	20000688 	.word	0x20000688
 8001ae0:	0800a654 	.word	0x0800a654
 8001ae4:	20000014 	.word	0x20000014
 8001ae8:	20000700 	.word	0x20000700
 8001aec:	0800a658 	.word	0x0800a658
 8001af0:	20000764 	.word	0x20000764
 8001af4:	200007a8 	.word	0x200007a8
 8001af8:	0800a65c 	.word	0x0800a65c
 8001afc:	2000069c 	.word	0x2000069c
 8001b00:	20000790 	.word	0x20000790
 8001b04:	200007ac 	.word	0x200007ac
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	0800a660 	.word	0x0800a660
 8001b10:	0800a664 	.word	0x0800a664
 8001b14:	2000068c 	.word	0x2000068c
 8001b18:	0800a678 	.word	0x0800a678

			  }

			  else if ((flagGGA == 1) | (flagRMC == 1))
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c98 <main+0x3e0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c9c <main+0x3e4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	bf0c      	ite	eq
 8001b32:	2301      	moveq	r3, #1
 8001b34:	2300      	movne	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d010      	beq.n	8001b62 <main+0x2aa>
				  LCD_Position(1,0);
				  LCD_PrintString("satelite...     ");
				   */

				  //OLED
				  SSD1306_Clear();
 8001b40:	f000 fda5 	bl	800268e <SSD1306_Clear>
				  SSD1306_GotoXY (0,0);
 8001b44:	2100      	movs	r1, #0
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 fce8 	bl	800251c <SSD1306_GotoXY>
				  SSD1306_Puts ("NO SATELITES!!!", &Font_11x18, 1);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4954      	ldr	r1, [pc, #336]	@ (8001ca0 <main+0x3e8>)
 8001b50:	4854      	ldr	r0, [pc, #336]	@ (8001ca4 <main+0x3ec>)
 8001b52:	f000 fd77 	bl	8002644 <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8001b56:	f000 fc3d 	bl	80023d4 <SSD1306_UpdateScreen>
				  HAL_Delay(500);
 8001b5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b5e:	f001 fb65 	bl	800322c <HAL_Delay>
			  }

			  if (VCCTimeout <= 0)
 8001b62:	4b51      	ldr	r3, [pc, #324]	@ (8001ca8 <main+0x3f0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	dc1b      	bgt.n	8001ba2 <main+0x2ea>
			  {
				  VCCTimeout = 5000;  // Reset the timeout
 8001b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca8 <main+0x3f0>)
 8001b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b70:	601a      	str	r2, [r3, #0]

				  //reset flags
				  flagGGA =flagRMC =0;
 8001b72:	4b4a      	ldr	r3, [pc, #296]	@ (8001c9c <main+0x3e4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4b48      	ldr	r3, [pc, #288]	@ (8001c9c <main+0x3e4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a46      	ldr	r2, [pc, #280]	@ (8001c98 <main+0x3e0>)
 8001b7e:	6013      	str	r3, [r2, #0]
				  LCD_Position(1,0);
				  LCD_PrintString("Checar conexion ");
				  */

				  //OLED
				  SSD1306_Clear();
 8001b80:	f000 fd85 	bl	800268e <SSD1306_Clear>
				  SSD1306_GotoXY (0,0);
 8001b84:	2100      	movs	r1, #0
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 fcc8 	bl	800251c <SSD1306_GotoXY>
				  SSD1306_Puts ("Checar conexion", &Font_11x18, 1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4944      	ldr	r1, [pc, #272]	@ (8001ca0 <main+0x3e8>)
 8001b90:	4846      	ldr	r0, [pc, #280]	@ (8001cac <main+0x3f4>)
 8001b92:	f000 fd57 	bl	8002644 <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8001b96:	f000 fc1d 	bl	80023d4 <SSD1306_UpdateScreen>
				  HAL_Delay(500);
 8001b9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b9e:	f001 fb45 	bl	800322c <HAL_Delay>
			  }

	  }
	  if (std == 1)
 8001ba2:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <main+0x3f8>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d127      	bne.n	8001bfa <main+0x342>
	  {
		  //Cantidad de luz
		  sensores.light = HAL_ADC_GetValue(&hadc1);
 8001baa:	4842      	ldr	r0, [pc, #264]	@ (8001cb4 <main+0x3fc>)
 8001bac:	f001 fce8 	bl	8003580 <HAL_ADC_GetValue>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <main+0x400>)
 8001bb6:	709a      	strb	r2, [r3, #2]
		  LCD_Position(1,0);
		  LCD_PrintString(msg);
		  */

		  //OLED
		  SSD1306_Clear();
 8001bb8:	f000 fd69 	bl	800268e <SSD1306_Clear>
		  SSD1306_GotoXY (0,0);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 fcac 	bl	800251c <SSD1306_GotoXY>
		  SSD1306_Puts ("luminicidad:", &Font_11x18, 1);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4936      	ldr	r1, [pc, #216]	@ (8001ca0 <main+0x3e8>)
 8001bc8:	483c      	ldr	r0, [pc, #240]	@ (8001cbc <main+0x404>)
 8001bca:	f000 fd3b 	bl	8002644 <SSD1306_Puts>
		  sprintf(msg,"%d           ",sensores.light);
 8001bce:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb8 <main+0x400>)
 8001bd0:	789b      	ldrb	r3, [r3, #2]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	493a      	ldr	r1, [pc, #232]	@ (8001cc0 <main+0x408>)
 8001bd6:	483b      	ldr	r0, [pc, #236]	@ (8001cc4 <main+0x40c>)
 8001bd8:	f005 fcd2 	bl	8007580 <siprintf>
		  SSD1306_GotoXY (0,20);
 8001bdc:	2114      	movs	r1, #20
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 fc9c 	bl	800251c <SSD1306_GotoXY>
		  SSD1306_Puts (msg, &Font_7x10, 1);
 8001be4:	2201      	movs	r2, #1
 8001be6:	4938      	ldr	r1, [pc, #224]	@ (8001cc8 <main+0x410>)
 8001be8:	4836      	ldr	r0, [pc, #216]	@ (8001cc4 <main+0x40c>)
 8001bea:	f000 fd2b 	bl	8002644 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001bee:	f000 fbf1 	bl	80023d4 <SSD1306_UpdateScreen>
		  HAL_Delay(500);
 8001bf2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bf6:	f001 fb19 	bl	800322c <HAL_Delay>

	  }
	  if (std == 2)
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <main+0x3f8>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	f47f aeb2 	bne.w	8001968 <main+0xb0>
	  {
		  //Nivel de humedad

		  DHT22_init();
 8001c04:	f7fe ffe8 	bl	8000bd8 <DHT22_init>
		  DHT22_Check_Response();
 8001c08:	f7ff f806 	bl	8000c18 <DHT22_Check_Response>
		  sensores.humedad[0] = DHT22_Read(); //BYTE 0
 8001c0c:	f7ff f836 	bl	8000c7c <DHT22_Read>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <main+0x400>)
 8001c16:	701a      	strb	r2, [r3, #0]
		  sensores.humedad[1] = DHT22_Read (); //BYTE 1
 8001c18:	f7ff f830 	bl	8000c7c <DHT22_Read>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <main+0x400>)
 8001c22:	705a      	strb	r2, [r3, #1]
		  HAL_Delay(2000); // Depeende del dampling permitido
 8001c24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c28:	f001 fb00 	bl	800322c <HAL_Delay>
		  LCD_Position(1,0);
		  LCD_PrintString(msg);
		  */

		  //OLED
		  SSD1306_Clear();
 8001c2c:	f000 fd2f 	bl	800268e <SSD1306_Clear>
		  SSD1306_GotoXY (0,0);
 8001c30:	2100      	movs	r1, #0
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 fc72 	bl	800251c <SSD1306_GotoXY>
		  SSD1306_Puts ("HUMEDAD:", &Font_11x18, 1);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4919      	ldr	r1, [pc, #100]	@ (8001ca0 <main+0x3e8>)
 8001c3c:	4823      	ldr	r0, [pc, #140]	@ (8001ccc <main+0x414>)
 8001c3e:	f000 fd01 	bl	8002644 <SSD1306_Puts>
		  sprintf(msg,"%0.2f",(float)(((sensores.humedad[0]<<8)|sensores.humedad[1])/10.0));
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <main+0x400>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb8 <main+0x400>)
 8001c4a:	7852      	ldrb	r2, [r2, #1]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fbd8 	bl	8000404 <__aeabi_i2d>
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <main+0x418>)
 8001c5a:	f7fe fd67 	bl	800072c <__aeabi_ddiv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7fe ff0f 	bl	8000a88 <__aeabi_d2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fbdb 	bl	8000428 <__aeabi_f2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4917      	ldr	r1, [pc, #92]	@ (8001cd4 <main+0x41c>)
 8001c78:	4812      	ldr	r0, [pc, #72]	@ (8001cc4 <main+0x40c>)
 8001c7a:	f005 fc81 	bl	8007580 <siprintf>
		  SSD1306_GotoXY (0,20);
 8001c7e:	2114      	movs	r1, #20
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 fc4b 	bl	800251c <SSD1306_GotoXY>
		  SSD1306_Puts (msg, &Font_7x10, 1);
 8001c86:	2201      	movs	r2, #1
 8001c88:	490f      	ldr	r1, [pc, #60]	@ (8001cc8 <main+0x410>)
 8001c8a:	480e      	ldr	r0, [pc, #56]	@ (8001cc4 <main+0x40c>)
 8001c8c:	f000 fcda 	bl	8002644 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001c90:	f000 fba0 	bl	80023d4 <SSD1306_UpdateScreen>
	  std = TIM1->CNT/4;
 8001c94:	e668      	b.n	8001968 <main+0xb0>
 8001c96:	bf00      	nop
 8001c98:	200007a8 	.word	0x200007a8
 8001c9c:	200007ac 	.word	0x200007ac
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	0800a68c 	.word	0x0800a68c
 8001ca8:	20000014 	.word	0x20000014
 8001cac:	0800a69c 	.word	0x0800a69c
 8001cb0:	20000688 	.word	0x20000688
 8001cb4:	2000023c 	.word	0x2000023c
 8001cb8:	20000238 	.word	0x20000238
 8001cbc:	0800a6ac 	.word	0x0800a6ac
 8001cc0:	0800a6bc 	.word	0x0800a6bc
 8001cc4:	2000068c 	.word	0x2000068c
 8001cc8:	20000004 	.word	0x20000004
 8001ccc:	0800a6cc 	.word	0x0800a6cc
 8001cd0:	40240000 	.word	0x40240000
 8001cd4:	0800a6d8 	.word	0x0800a6d8

08001cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b094      	sub	sp, #80	@ 0x50
 8001cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce2:	2228      	movs	r2, #40	@ 0x28
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f005 fcad 	bl	8007646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d16:	2301      	movs	r3, #1
 8001d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d24:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 f81c 	bl	8004d6c <HAL_RCC_OscConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d3a:	f000 fa0b 	bl	8002154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3e:	230f      	movs	r3, #15
 8001d40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fa88 	bl	8005270 <HAL_RCC_ClockConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d66:	f000 f9f5 	bl	8002154 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001d6a:	2312      	movs	r3, #18
 8001d6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d72:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fc06 	bl	800558c <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001d86:	f000 f9e5 	bl	8002154 <Error_Handler>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3750      	adds	r7, #80	@ 0x50
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <MX_ADC1_Init+0x74>)
 8001da6:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <MX_ADC1_Init+0x78>)
 8001da8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <MX_ADC1_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <MX_ADC1_Init+0x74>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <MX_ADC1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <MX_ADC1_Init+0x74>)
 8001dbe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001dc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <MX_ADC1_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <MX_ADC1_Init+0x74>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dd0:	480d      	ldr	r0, [pc, #52]	@ (8001e08 <MX_ADC1_Init+0x74>)
 8001dd2:	f001 fa4f 	bl	8003274 <HAL_ADC_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ddc:	f000 f9ba 	bl	8002154 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_ADC1_Init+0x74>)
 8001df2:	f001 fbd1 	bl	8003598 <HAL_ADC_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001dfc:	f000 f9aa 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000023c 	.word	0x2000023c
 8001e0c:	40012400 	.word	0x40012400

08001e10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e16:	4a13      	ldr	r2, [pc, #76]	@ (8001e64 <MX_I2C2_Init+0x54>)
 8001e18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e1c:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <MX_I2C2_Init+0x58>)
 8001e1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e3a:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e40:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e4c:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <MX_I2C2_Init+0x50>)
 8001e4e:	f002 f8c3 	bl	8003fd8 <HAL_I2C_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e58:	f000 f97c 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000026c 	.word	0x2000026c
 8001e64:	40005800 	.word	0x40005800
 8001e68:	00061a80 	.word	0x00061a80

08001e6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	@ 0x30
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	2224      	movs	r2, #36	@ 0x24
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f005 fbe3 	bl	8007646 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001e8a:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <MX_TIM1_Init+0xa8>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001e9c:	220a      	movs	r2, #10
 8001e9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001eae:	2280      	movs	r2, #128	@ 0x80
 8001eb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001ede:	f003 fca5 	bl	800582c <HAL_TIM_Encoder_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001ee8:	f000 f934 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001efa:	f003 ffab 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001f04:	f000 f926 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3730      	adds	r7, #48	@ 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200002c0 	.word	0x200002c0
 8001f14:	40012c00 	.word	0x40012c00

08001f18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <MX_TIM2_Init+0x94>)
 8001f36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <MX_TIM2_Init+0x94>)
 8001f3e:	2247      	movs	r2, #71	@ 0x47
 8001f40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <MX_TIM2_Init+0x94>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8001f48:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <MX_TIM2_Init+0x94>)
 8001f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <MX_TIM2_Init+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <MX_TIM2_Init+0x94>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f5c:	4813      	ldr	r0, [pc, #76]	@ (8001fac <MX_TIM2_Init+0x94>)
 8001f5e:	f003 fbcb 	bl	80056f8 <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f68:	f000 f8f4 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	@ (8001fac <MX_TIM2_Init+0x94>)
 8001f7a:	f003 fd87 	bl	8005a8c <HAL_TIM_ConfigClockSource>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f84:	f000 f8e6 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f90:	463b      	mov	r3, r7
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_TIM2_Init+0x94>)
 8001f96:	f003 ff5d 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fa0:	f000 f8d8 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000308 	.word	0x20000308

08001fb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <MX_USART1_UART_Init+0x50>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fbc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fe8:	f003 ff92 	bl	8005f10 <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ff2:	f000 f8af 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000350 	.word	0x20000350
 8002000:	40013800 	.word	0x40013800

08002004 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002008:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <MX_USB_PCD_Init+0x3c>)
 800200a:	4a0e      	ldr	r2, [pc, #56]	@ (8002044 <MX_USB_PCD_Init+0x40>)
 800200c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800200e:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <MX_USB_PCD_Init+0x3c>)
 8002010:	2208      	movs	r2, #8
 8002012:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <MX_USB_PCD_Init+0x3c>)
 8002016:	2202      	movs	r2, #2
 8002018:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <MX_USB_PCD_Init+0x3c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002020:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <MX_USB_PCD_Init+0x3c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <MX_USB_PCD_Init+0x3c>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	@ (8002040 <MX_USB_PCD_Init+0x3c>)
 800202e:	f002 fd9d 	bl	8004b6c <HAL_PCD_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002038:	f000 f88c 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000398 	.word	0x20000398
 8002044:	40005c00 	.word	0x40005c00

08002048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205c:	4b39      	ldr	r3, [pc, #228]	@ (8002144 <MX_GPIO_Init+0xfc>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a38      	ldr	r2, [pc, #224]	@ (8002144 <MX_GPIO_Init+0xfc>)
 8002062:	f043 0310 	orr.w	r3, r3, #16
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <MX_GPIO_Init+0xfc>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002074:	4b33      	ldr	r3, [pc, #204]	@ (8002144 <MX_GPIO_Init+0xfc>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a32      	ldr	r2, [pc, #200]	@ (8002144 <MX_GPIO_Init+0xfc>)
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <MX_GPIO_Init+0xfc>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <MX_GPIO_Init+0xfc>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a2c      	ldr	r2, [pc, #176]	@ (8002144 <MX_GPIO_Init+0xfc>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b2a      	ldr	r3, [pc, #168]	@ (8002144 <MX_GPIO_Init+0xfc>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <MX_GPIO_Init+0xfc>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a26      	ldr	r2, [pc, #152]	@ (8002144 <MX_GPIO_Init+0xfc>)
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <MX_GPIO_Init+0xfc>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020c2:	4821      	ldr	r0, [pc, #132]	@ (8002148 <MX_GPIO_Init+0x100>)
 80020c4:	f001 ff57 	bl	8003f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2102      	movs	r1, #2
 80020cc:	481f      	ldr	r0, [pc, #124]	@ (800214c <MX_GPIO_Init+0x104>)
 80020ce:	f001 ff52 	bl	8003f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80020d2:	2200      	movs	r2, #0
 80020d4:	21f8      	movs	r1, #248	@ 0xf8
 80020d6:	481d      	ldr	r0, [pc, #116]	@ (800214c <MX_GPIO_Init+0x104>)
 80020d8:	f001 ff4d 	bl	8003f76 <HAL_GPIO_WritePin>
                          |RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	2101      	movs	r1, #1
 80020e0:	481b      	ldr	r0, [pc, #108]	@ (8002150 <MX_GPIO_Init+0x108>)
 80020e2:	f001 ff48 	bl	8003f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80020e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	4619      	mov	r1, r3
 80020fe:	4812      	ldr	r0, [pc, #72]	@ (8002148 <MX_GPIO_Init+0x100>)
 8002100:	f001 fd9e 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_DATA_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin RS_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin|D4_Pin|D5_Pin|D6_Pin
 8002104:	23fa      	movs	r3, #250	@ 0xfa
 8002106:	613b      	str	r3, [r7, #16]
                          |D7_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2302      	movs	r3, #2
 8002112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4619      	mov	r1, r3
 800211a:	480c      	ldr	r0, [pc, #48]	@ (800214c <MX_GPIO_Init+0x104>)
 800211c:	f001 fd90 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8002120:	2301      	movs	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2302      	movs	r3, #2
 800212e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4619      	mov	r1, r3
 8002136:	4806      	ldr	r0, [pc, #24]	@ (8002150 <MX_GPIO_Init+0x108>)
 8002138:	f001 fd82 	bl	8003c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	40011000 	.word	0x40011000
 800214c:	40010800 	.word	0x40010800
 8002150:	40010c00 	.word	0x40010c00

08002154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002158:	b672      	cpsid	i
}
 800215a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <Error_Handler+0x8>

08002160 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	460a      	mov	r2, r1
 800216a:	71fb      	strb	r3, [r7, #7]
 800216c:	4613      	mov	r3, r2
 800216e:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8002170:	2226      	movs	r2, #38	@ 0x26
 8002172:	2100      	movs	r1, #0
 8002174:	2078      	movs	r0, #120	@ 0x78
 8002176:	f000 fb0d 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	2078      	movs	r0, #120	@ 0x78
 8002180:	f000 fb08 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	461a      	mov	r2, r3
 8002188:	2100      	movs	r1, #0
 800218a:	2078      	movs	r0, #120	@ 0x78
 800218c:	f000 fb02 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	2078      	movs	r0, #120	@ 0x78
 8002196:	f000 fafd 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	461a      	mov	r2, r3
 800219e:	2100      	movs	r1, #0
 80021a0:	2078      	movs	r0, #120	@ 0x78
 80021a2:	f000 faf7 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	2078      	movs	r0, #120	@ 0x78
 80021ac:	f000 faf2 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80021b0:	22ff      	movs	r2, #255	@ 0xff
 80021b2:	2100      	movs	r1, #0
 80021b4:	2078      	movs	r0, #120	@ 0x78
 80021b6:	f000 faed 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80021ba:	222f      	movs	r2, #47	@ 0x2f
 80021bc:	2100      	movs	r1, #0
 80021be:	2078      	movs	r0, #120	@ 0x78
 80021c0:	f000 fae8 	bl	8002794 <ssd1306_I2C_Write>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	460a      	mov	r2, r1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	4613      	mov	r3, r2
 80021da:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80021dc:	2227      	movs	r2, #39	@ 0x27
 80021de:	2100      	movs	r1, #0
 80021e0:	2078      	movs	r0, #120	@ 0x78
 80021e2:	f000 fad7 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2078      	movs	r0, #120	@ 0x78
 80021ec:	f000 fad2 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	461a      	mov	r2, r3
 80021f4:	2100      	movs	r1, #0
 80021f6:	2078      	movs	r0, #120	@ 0x78
 80021f8:	f000 facc 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	2078      	movs	r0, #120	@ 0x78
 8002202:	f000 fac7 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	461a      	mov	r2, r3
 800220a:	2100      	movs	r1, #0
 800220c:	2078      	movs	r0, #120	@ 0x78
 800220e:	f000 fac1 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2078      	movs	r0, #120	@ 0x78
 8002218:	f000 fabc 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800221c:	22ff      	movs	r2, #255	@ 0xff
 800221e:	2100      	movs	r1, #0
 8002220:	2078      	movs	r0, #120	@ 0x78
 8002222:	f000 fab7 	bl	8002794 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8002226:	222f      	movs	r2, #47	@ 0x2f
 8002228:	2100      	movs	r1, #0
 800222a:	2078      	movs	r0, #120	@ 0x78
 800222c:	f000 fab2 	bl	8002794 <ssd1306_I2C_Write>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800223c:	222e      	movs	r2, #46	@ 0x2e
 800223e:	2100      	movs	r1, #0
 8002240:	2078      	movs	r0, #120	@ 0x78
 8002242:	f000 faa7 	bl	8002794 <ssd1306_I2C_Write>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002252:	f000 fa25 	bl	80026a0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002256:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800225a:	2201      	movs	r2, #1
 800225c:	2178      	movs	r1, #120	@ 0x78
 800225e:	485b      	ldr	r0, [pc, #364]	@ (80023cc <SSD1306_Init+0x180>)
 8002260:	f002 f8fc 	bl	800445c <HAL_I2C_IsDeviceReady>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800226a:	2300      	movs	r3, #0
 800226c:	e0a9      	b.n	80023c2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800226e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002272:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002274:	e002      	b.n	800227c <SSD1306_Init+0x30>
		p--;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3b01      	subs	r3, #1
 800227a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f9      	bne.n	8002276 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002282:	22ae      	movs	r2, #174	@ 0xae
 8002284:	2100      	movs	r1, #0
 8002286:	2078      	movs	r0, #120	@ 0x78
 8002288:	f000 fa84 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800228c:	2220      	movs	r2, #32
 800228e:	2100      	movs	r1, #0
 8002290:	2078      	movs	r0, #120	@ 0x78
 8002292:	f000 fa7f 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002296:	2210      	movs	r2, #16
 8002298:	2100      	movs	r1, #0
 800229a:	2078      	movs	r0, #120	@ 0x78
 800229c:	f000 fa7a 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022a0:	22b0      	movs	r2, #176	@ 0xb0
 80022a2:	2100      	movs	r1, #0
 80022a4:	2078      	movs	r0, #120	@ 0x78
 80022a6:	f000 fa75 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80022aa:	22c8      	movs	r2, #200	@ 0xc8
 80022ac:	2100      	movs	r1, #0
 80022ae:	2078      	movs	r0, #120	@ 0x78
 80022b0:	f000 fa70 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2078      	movs	r0, #120	@ 0x78
 80022ba:	f000 fa6b 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80022be:	2210      	movs	r2, #16
 80022c0:	2100      	movs	r1, #0
 80022c2:	2078      	movs	r0, #120	@ 0x78
 80022c4:	f000 fa66 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80022c8:	2240      	movs	r2, #64	@ 0x40
 80022ca:	2100      	movs	r1, #0
 80022cc:	2078      	movs	r0, #120	@ 0x78
 80022ce:	f000 fa61 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80022d2:	2281      	movs	r2, #129	@ 0x81
 80022d4:	2100      	movs	r1, #0
 80022d6:	2078      	movs	r0, #120	@ 0x78
 80022d8:	f000 fa5c 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80022dc:	22ff      	movs	r2, #255	@ 0xff
 80022de:	2100      	movs	r1, #0
 80022e0:	2078      	movs	r0, #120	@ 0x78
 80022e2:	f000 fa57 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80022e6:	22a1      	movs	r2, #161	@ 0xa1
 80022e8:	2100      	movs	r1, #0
 80022ea:	2078      	movs	r0, #120	@ 0x78
 80022ec:	f000 fa52 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80022f0:	22a6      	movs	r2, #166	@ 0xa6
 80022f2:	2100      	movs	r1, #0
 80022f4:	2078      	movs	r0, #120	@ 0x78
 80022f6:	f000 fa4d 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80022fa:	22a8      	movs	r2, #168	@ 0xa8
 80022fc:	2100      	movs	r1, #0
 80022fe:	2078      	movs	r0, #120	@ 0x78
 8002300:	f000 fa48 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002304:	223f      	movs	r2, #63	@ 0x3f
 8002306:	2100      	movs	r1, #0
 8002308:	2078      	movs	r0, #120	@ 0x78
 800230a:	f000 fa43 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800230e:	22a4      	movs	r2, #164	@ 0xa4
 8002310:	2100      	movs	r1, #0
 8002312:	2078      	movs	r0, #120	@ 0x78
 8002314:	f000 fa3e 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002318:	22d3      	movs	r2, #211	@ 0xd3
 800231a:	2100      	movs	r1, #0
 800231c:	2078      	movs	r0, #120	@ 0x78
 800231e:	f000 fa39 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2078      	movs	r0, #120	@ 0x78
 8002328:	f000 fa34 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800232c:	22d5      	movs	r2, #213	@ 0xd5
 800232e:	2100      	movs	r1, #0
 8002330:	2078      	movs	r0, #120	@ 0x78
 8002332:	f000 fa2f 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002336:	22f0      	movs	r2, #240	@ 0xf0
 8002338:	2100      	movs	r1, #0
 800233a:	2078      	movs	r0, #120	@ 0x78
 800233c:	f000 fa2a 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002340:	22d9      	movs	r2, #217	@ 0xd9
 8002342:	2100      	movs	r1, #0
 8002344:	2078      	movs	r0, #120	@ 0x78
 8002346:	f000 fa25 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800234a:	2222      	movs	r2, #34	@ 0x22
 800234c:	2100      	movs	r1, #0
 800234e:	2078      	movs	r0, #120	@ 0x78
 8002350:	f000 fa20 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002354:	22da      	movs	r2, #218	@ 0xda
 8002356:	2100      	movs	r1, #0
 8002358:	2078      	movs	r0, #120	@ 0x78
 800235a:	f000 fa1b 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800235e:	2212      	movs	r2, #18
 8002360:	2100      	movs	r1, #0
 8002362:	2078      	movs	r0, #120	@ 0x78
 8002364:	f000 fa16 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002368:	22db      	movs	r2, #219	@ 0xdb
 800236a:	2100      	movs	r1, #0
 800236c:	2078      	movs	r0, #120	@ 0x78
 800236e:	f000 fa11 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002372:	2220      	movs	r2, #32
 8002374:	2100      	movs	r1, #0
 8002376:	2078      	movs	r0, #120	@ 0x78
 8002378:	f000 fa0c 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800237c:	228d      	movs	r2, #141	@ 0x8d
 800237e:	2100      	movs	r1, #0
 8002380:	2078      	movs	r0, #120	@ 0x78
 8002382:	f000 fa07 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002386:	2214      	movs	r2, #20
 8002388:	2100      	movs	r1, #0
 800238a:	2078      	movs	r0, #120	@ 0x78
 800238c:	f000 fa02 	bl	8002794 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002390:	22af      	movs	r2, #175	@ 0xaf
 8002392:	2100      	movs	r1, #0
 8002394:	2078      	movs	r0, #120	@ 0x78
 8002396:	f000 f9fd 	bl	8002794 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800239a:	222e      	movs	r2, #46	@ 0x2e
 800239c:	2100      	movs	r1, #0
 800239e:	2078      	movs	r0, #120	@ 0x78
 80023a0:	f000 f9f8 	bl	8002794 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f000 f843 	bl	8002430 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80023aa:	f000 f813 	bl	80023d4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80023ae:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <SSD1306_Init+0x184>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <SSD1306_Init+0x184>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <SSD1306_Init+0x184>)
 80023bc:	2201      	movs	r2, #1
 80023be:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000026c 	.word	0x2000026c
 80023d0:	20000bb0 	.word	0x20000bb0

080023d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80023da:	2300      	movs	r3, #0
 80023dc:	71fb      	strb	r3, [r7, #7]
 80023de:	e01d      	b.n	800241c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	3b50      	subs	r3, #80	@ 0x50
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	2100      	movs	r1, #0
 80023ea:	2078      	movs	r0, #120	@ 0x78
 80023ec:	f000 f9d2 	bl	8002794 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	2078      	movs	r0, #120	@ 0x78
 80023f6:	f000 f9cd 	bl	8002794 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80023fa:	2210      	movs	r2, #16
 80023fc:	2100      	movs	r1, #0
 80023fe:	2078      	movs	r0, #120	@ 0x78
 8002400:	f000 f9c8 	bl	8002794 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	01db      	lsls	r3, r3, #7
 8002408:	4a08      	ldr	r2, [pc, #32]	@ (800242c <SSD1306_UpdateScreen+0x58>)
 800240a:	441a      	add	r2, r3
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	2140      	movs	r1, #64	@ 0x40
 8002410:	2078      	movs	r0, #120	@ 0x78
 8002412:	f000 f959 	bl	80026c8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	3301      	adds	r3, #1
 800241a:	71fb      	strb	r3, [r7, #7]
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	2b07      	cmp	r3, #7
 8002420:	d9de      	bls.n	80023e0 <SSD1306_UpdateScreen+0xc>
	}
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200007b0 	.word	0x200007b0

08002430 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <SSD1306_Fill+0x14>
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <SSD1306_Fill+0x16>
 8002444:	23ff      	movs	r3, #255	@ 0xff
 8002446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800244a:	4619      	mov	r1, r3
 800244c:	4803      	ldr	r0, [pc, #12]	@ (800245c <SSD1306_Fill+0x2c>)
 800244e:	f005 f8fa 	bl	8007646 <memset>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200007b0 	.word	0x200007b0

08002460 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
 800246a:	460b      	mov	r3, r1
 800246c:	80bb      	strh	r3, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	70fb      	strb	r3, [r7, #3]
	if (
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	2b7f      	cmp	r3, #127	@ 0x7f
 8002476:	d848      	bhi.n	800250a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002478:	88bb      	ldrh	r3, [r7, #4]
 800247a:	2b3f      	cmp	r3, #63	@ 0x3f
 800247c:	d845      	bhi.n	800250a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800247e:	4b25      	ldr	r3, [pc, #148]	@ (8002514 <SSD1306_DrawPixel+0xb4>)
 8002480:	791b      	ldrb	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d11a      	bne.n	80024d0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	88bb      	ldrh	r3, [r7, #4]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b298      	uxth	r0, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	01db      	lsls	r3, r3, #7
 80024a6:	4413      	add	r3, r2
 80024a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002518 <SSD1306_DrawPixel+0xb8>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	b25a      	sxtb	r2, r3
 80024ae:	88bb      	ldrh	r3, [r7, #4]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	2101      	movs	r1, #1
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	b25b      	sxtb	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b259      	sxtb	r1, r3
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	4603      	mov	r3, r0
 80024c4:	01db      	lsls	r3, r3, #7
 80024c6:	4413      	add	r3, r2
 80024c8:	b2c9      	uxtb	r1, r1
 80024ca:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <SSD1306_DrawPixel+0xb8>)
 80024cc:	54d1      	strb	r1, [r2, r3]
 80024ce:	e01d      	b.n	800250c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	88bb      	ldrh	r3, [r7, #4]
 80024d4:	08db      	lsrs	r3, r3, #3
 80024d6:	b298      	uxth	r0, r3
 80024d8:	4603      	mov	r3, r0
 80024da:	01db      	lsls	r3, r3, #7
 80024dc:	4413      	add	r3, r2
 80024de:	4a0e      	ldr	r2, [pc, #56]	@ (8002518 <SSD1306_DrawPixel+0xb8>)
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	b25a      	sxtb	r2, r3
 80024e4:	88bb      	ldrh	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	2101      	movs	r1, #1
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	4013      	ands	r3, r2
 80024f8:	b259      	sxtb	r1, r3
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	4603      	mov	r3, r0
 80024fe:	01db      	lsls	r3, r3, #7
 8002500:	4413      	add	r3, r2
 8002502:	b2c9      	uxtb	r1, r1
 8002504:	4a04      	ldr	r2, [pc, #16]	@ (8002518 <SSD1306_DrawPixel+0xb8>)
 8002506:	54d1      	strb	r1, [r2, r3]
 8002508:	e000      	b.n	800250c <SSD1306_DrawPixel+0xac>
		return;
 800250a:	bf00      	nop
	}
}
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20000bb0 	.word	0x20000bb0
 8002518:	200007b0 	.word	0x200007b0

0800251c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	460a      	mov	r2, r1
 8002526:	80fb      	strh	r3, [r7, #6]
 8002528:	4613      	mov	r3, r2
 800252a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800252c:	4a05      	ldr	r2, [pc, #20]	@ (8002544 <SSD1306_GotoXY+0x28>)
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002532:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <SSD1306_GotoXY+0x28>)
 8002534:	88bb      	ldrh	r3, [r7, #4]
 8002536:	8053      	strh	r3, [r2, #2]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000bb0 	.word	0x20000bb0

08002548 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
 8002554:	4613      	mov	r3, r2
 8002556:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002558:	4b39      	ldr	r3, [pc, #228]	@ (8002640 <SSD1306_Putc+0xf8>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4413      	add	r3, r2
	if (
 8002564:	2b7f      	cmp	r3, #127	@ 0x7f
 8002566:	dc07      	bgt.n	8002578 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002568:	4b35      	ldr	r3, [pc, #212]	@ (8002640 <SSD1306_Putc+0xf8>)
 800256a:	885b      	ldrh	r3, [r3, #2]
 800256c:	461a      	mov	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002574:	2b3f      	cmp	r3, #63	@ 0x3f
 8002576:	dd01      	ble.n	800257c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002578:	2300      	movs	r3, #0
 800257a:	e05d      	b.n	8002638 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e04b      	b.n	800261a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	3b20      	subs	r3, #32
 800258a:	6839      	ldr	r1, [r7, #0]
 800258c:	7849      	ldrb	r1, [r1, #1]
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4619      	mov	r1, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	440b      	add	r3, r1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	e030      	b.n	8002608 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d010      	beq.n	80025d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <SSD1306_Putc+0xf8>)
 80025b8:	881a      	ldrh	r2, [r3, #0]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4413      	add	r3, r2
 80025c0:	b298      	uxth	r0, r3
 80025c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002640 <SSD1306_Putc+0xf8>)
 80025c4:	885a      	ldrh	r2, [r3, #2]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	79ba      	ldrb	r2, [r7, #6]
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7ff ff45 	bl	8002460 <SSD1306_DrawPixel>
 80025d6:	e014      	b.n	8002602 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80025d8:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <SSD1306_Putc+0xf8>)
 80025da:	881a      	ldrh	r2, [r3, #0]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	b298      	uxth	r0, r3
 80025e4:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <SSD1306_Putc+0xf8>)
 80025e6:	885a      	ldrh	r2, [r3, #2]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	b299      	uxth	r1, r3
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf0c      	ite	eq
 80025f6:	2301      	moveq	r3, #1
 80025f8:	2300      	movne	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	f7ff ff2f 	bl	8002460 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	3301      	adds	r3, #1
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4293      	cmp	r3, r2
 8002612:	d3c8      	bcc.n	80025a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	461a      	mov	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	4293      	cmp	r3, r2
 8002624:	d3ad      	bcc.n	8002582 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <SSD1306_Putc+0xf8>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	4413      	add	r3, r2
 8002630:	b29a      	uxth	r2, r3
 8002632:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <SSD1306_Putc+0xf8>)
 8002634:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002636:	79fb      	ldrb	r3, [r7, #7]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000bb0 	.word	0x20000bb0

08002644 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002652:	e012      	b.n	800267a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	79fa      	ldrb	r2, [r7, #7]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff73 	bl	8002548 <SSD1306_Putc>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d002      	beq.n	8002674 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	e008      	b.n	8002686 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3301      	adds	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e8      	bne.n	8002654 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	781b      	ldrb	r3, [r3, #0]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff fecc 	bl	8002430 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002698:	f7ff fe9c 	bl	80023d4 <SSD1306_UpdateScreen>
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}

080026a0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80026a6:	4b07      	ldr	r3, [pc, #28]	@ (80026c4 <ssd1306_I2C_Init+0x24>)
 80026a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026aa:	e002      	b.n	80026b2 <ssd1306_I2C_Init+0x12>
		p--;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f9      	bne.n	80026ac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	0003d090 	.word	0x0003d090

080026c8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b0c7      	sub	sp, #284	@ 0x11c
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	4604      	mov	r4, r0
 80026d0:	4608      	mov	r0, r1
 80026d2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80026d6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80026da:	600a      	str	r2, [r1, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026e2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80026e6:	4622      	mov	r2, r4
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026ee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80026f2:	4602      	mov	r2, r0
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026fe:	460a      	mov	r2, r1
 8002700:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800270a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800270e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002712:	7812      	ldrb	r2, [r2, #0]
 8002714:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002716:	2300      	movs	r3, #0
 8002718:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800271c:	e015      	b.n	800274a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800271e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002722:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002726:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	441a      	add	r2, r3
 800272e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002732:	3301      	adds	r3, #1
 8002734:	7811      	ldrb	r1, [r2, #0]
 8002736:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800273a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800273e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002740:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002744:	3301      	adds	r3, #1
 8002746:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800274a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800274e:	b29b      	uxth	r3, r3
 8002750:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002754:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002758:	8812      	ldrh	r2, [r2, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d8df      	bhi.n	800271e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 800275e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002762:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b299      	uxth	r1, r3
 800276a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800276e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	b29b      	uxth	r3, r3
 8002778:	f107 020c 	add.w	r2, r7, #12
 800277c:	200a      	movs	r0, #10
 800277e:	9000      	str	r0, [sp, #0]
 8002780:	4803      	ldr	r0, [pc, #12]	@ (8002790 <ssd1306_I2C_WriteMulti+0xc8>)
 8002782:	f001 fd6d 	bl	8004260 <HAL_I2C_Master_Transmit>
}
 8002786:	bf00      	nop
 8002788:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800278c:	46bd      	mov	sp, r7
 800278e:	bd90      	pop	{r4, r7, pc}
 8002790:	2000026c 	.word	0x2000026c

08002794 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af02      	add	r7, sp, #8
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	460b      	mov	r3, r1
 80027a0:	71bb      	strb	r3, [r7, #6]
 80027a2:	4613      	mov	r3, r2
 80027a4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80027a6:	79bb      	ldrb	r3, [r7, #6]
 80027a8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80027aa:	797b      	ldrb	r3, [r7, #5]
 80027ac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	b299      	uxth	r1, r3
 80027b2:	f107 020c 	add.w	r2, r7, #12
 80027b6:	230a      	movs	r3, #10
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2302      	movs	r3, #2
 80027bc:	4803      	ldr	r0, [pc, #12]	@ (80027cc <ssd1306_I2C_Write+0x38>)
 80027be:	f001 fd4f 	bl	8004260 <HAL_I2C_Master_Transmit>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2000026c 	.word	0x2000026c

080027d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <HAL_MspInit+0x5c>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	4a14      	ldr	r2, [pc, #80]	@ (800282c <HAL_MspInit+0x5c>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6193      	str	r3, [r2, #24]
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_MspInit+0x5c>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <HAL_MspInit+0x5c>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a0e      	ldr	r2, [pc, #56]	@ (800282c <HAL_MspInit+0x5c>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <HAL_MspInit+0x5c>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <HAL_MspInit+0x60>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <HAL_MspInit+0x60>)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40021000 	.word	0x40021000
 8002830:	40010000 	.word	0x40010000

08002834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <HAL_ADC_MspInit+0x6c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d121      	bne.n	8002898 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <HAL_ADC_MspInit+0x70>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <HAL_ADC_MspInit+0x70>)
 800285a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <HAL_ADC_MspInit+0x70>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <HAL_ADC_MspInit+0x70>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a0c      	ldr	r2, [pc, #48]	@ (80028a4 <HAL_ADC_MspInit+0x70>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <HAL_ADC_MspInit+0x70>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002884:	2301      	movs	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002888:	2303      	movs	r3, #3
 800288a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	4619      	mov	r1, r3
 8002892:	4805      	ldr	r0, [pc, #20]	@ (80028a8 <HAL_ADC_MspInit+0x74>)
 8002894:	f001 f9d4 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40012400 	.word	0x40012400
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40010800 	.word	0x40010800

080028ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a16      	ldr	r2, [pc, #88]	@ (8002920 <HAL_I2C_MspInit+0x74>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d124      	bne.n	8002916 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_I2C_MspInit+0x78>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a14      	ldr	r2, [pc, #80]	@ (8002924 <HAL_I2C_MspInit+0x78>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <HAL_I2C_MspInit+0x78>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ea:	2312      	movs	r3, #18
 80028ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f2:	f107 0310 	add.w	r3, r7, #16
 80028f6:	4619      	mov	r1, r3
 80028f8:	480b      	ldr	r0, [pc, #44]	@ (8002928 <HAL_I2C_MspInit+0x7c>)
 80028fa:	f001 f9a1 	bl	8003c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028fe:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <HAL_I2C_MspInit+0x78>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a08      	ldr	r2, [pc, #32]	@ (8002924 <HAL_I2C_MspInit+0x78>)
 8002904:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002908:	61d3      	str	r3, [r2, #28]
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_I2C_MspInit+0x78>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40005800 	.word	0x40005800
 8002924:	40021000 	.word	0x40021000
 8002928:	40010c00 	.word	0x40010c00

0800292c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a16      	ldr	r2, [pc, #88]	@ (80029a0 <HAL_TIM_Encoder_MspInit+0x74>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d124      	bne.n	8002996 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294c:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <HAL_TIM_Encoder_MspInit+0x78>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4a14      	ldr	r2, [pc, #80]	@ (80029a4 <HAL_TIM_Encoder_MspInit+0x78>)
 8002952:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002956:	6193      	str	r3, [r2, #24]
 8002958:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <HAL_TIM_Encoder_MspInit+0x78>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002964:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <HAL_TIM_Encoder_MspInit+0x78>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4a0e      	ldr	r2, [pc, #56]	@ (80029a4 <HAL_TIM_Encoder_MspInit+0x78>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6193      	str	r3, [r2, #24]
 8002970:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <HAL_TIM_Encoder_MspInit+0x78>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800297c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0310 	add.w	r3, r7, #16
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002992:	f001 f955 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002996:	bf00      	nop
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010800 	.word	0x40010800

080029ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029bc:	d10b      	bne.n	80029d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_TIM_Base_MspInit+0x34>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4a07      	ldr	r2, [pc, #28]	@ (80029e0 <HAL_TIM_Base_MspInit+0x34>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	61d3      	str	r3, [r2, #28]
 80029ca:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_TIM_Base_MspInit+0x34>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	@ 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a26      	ldr	r2, [pc, #152]	@ (8002a98 <HAL_UART_MspInit+0xb4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d145      	bne.n	8002a90 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a04:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <HAL_UART_MspInit+0xb8>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4a24      	ldr	r2, [pc, #144]	@ (8002a9c <HAL_UART_MspInit+0xb8>)
 8002a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a0e:	6193      	str	r3, [r2, #24]
 8002a10:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <HAL_UART_MspInit+0xb8>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <HAL_UART_MspInit+0xb8>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	4a1e      	ldr	r2, [pc, #120]	@ (8002a9c <HAL_UART_MspInit+0xb8>)
 8002a22:	f043 0308 	orr.w	r3, r3, #8
 8002a26:	6193      	str	r3, [r2, #24]
 8002a28:	4b1c      	ldr	r3, [pc, #112]	@ (8002a9c <HAL_UART_MspInit+0xb8>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a34:	2340      	movs	r3, #64	@ 0x40
 8002a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	4816      	ldr	r0, [pc, #88]	@ (8002aa0 <HAL_UART_MspInit+0xbc>)
 8002a48:	f001 f8fa 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a4c:	2380      	movs	r3, #128	@ 0x80
 8002a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4810      	ldr	r0, [pc, #64]	@ (8002aa0 <HAL_UART_MspInit+0xbc>)
 8002a60:	f001 f8ee 	bl	8003c40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002a64:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <HAL_UART_MspInit+0xc0>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <HAL_UART_MspInit+0xc0>)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	2025      	movs	r0, #37	@ 0x25
 8002a86:	f000 fff2 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a8a:	2025      	movs	r0, #37	@ 0x25
 8002a8c:	f001 f80b 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a90:	bf00      	nop
 8002a92:	3728      	adds	r7, #40	@ 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40013800 	.word	0x40013800
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40010c00 	.word	0x40010c00
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a09      	ldr	r2, [pc, #36]	@ (8002adc <HAL_PCD_MspInit+0x34>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002aba:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_PCD_MspInit+0x38>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <HAL_PCD_MspInit+0x38>)
 8002ac0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ac4:	61d3      	str	r3, [r2, #28]
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_PCD_MspInit+0x38>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	40005c00 	.word	0x40005c00
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <NMI_Handler+0x4>

08002aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af0:	bf00      	nop
 8002af2:	e7fd      	b.n	8002af0 <HardFault_Handler+0x4>

08002af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <MemManage_Handler+0x4>

08002afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b00:	bf00      	nop
 8002b02:	e7fd      	b.n	8002b00 <BusFault_Handler+0x4>

08002b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <UsageFault_Handler+0x4>

08002b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  if(timeout >0)  timeout--;
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <SysTick_Handler+0x20>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <SysTick_Handler+0x18>
 8002b3c:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <SysTick_Handler+0x20>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	4b02      	ldr	r3, [pc, #8]	@ (8002b50 <SysTick_Handler+0x20>)
 8002b46:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b48:	f000 fb54 	bl	80031f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000bbc 	.word	0x20000bbc

08002b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr(&huart1);
 8002b58:	4803      	ldr	r0, [pc, #12]	@ (8002b68 <USART1_IRQHandler+0x14>)
 8002b5a:	f000 fa81 	bl	8003060 <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b5e:	4802      	ldr	r0, [pc, #8]	@ (8002b68 <USART1_IRQHandler+0x14>)
 8002b60:	f003 fa26 	bl	8005fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000350 	.word	0x20000350

08002b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return 1;
 8002b70:	2301      	movs	r3, #1
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <_kill>:

int _kill(int pid, int sig)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b84:	f004 fdb2 	bl	80076ec <__errno>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2216      	movs	r2, #22
 8002b8c:	601a      	str	r2, [r3, #0]
  return -1;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_exit>:

void _exit (int status)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ba2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffe7 	bl	8002b7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <_exit+0x12>

08002bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e00a      	b.n	8002bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bc2:	f3af 8000 	nop.w
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	60ba      	str	r2, [r7, #8]
 8002bce:	b2ca      	uxtb	r2, r1
 8002bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	dbf0      	blt.n	8002bc2 <_read+0x12>
  }

  return len;
 8002be0:	687b      	ldr	r3, [r7, #4]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	e009      	b.n	8002c10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	60ba      	str	r2, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	dbf1      	blt.n	8002bfc <_write+0x12>
  }
  return len;
 8002c18:	687b      	ldr	r3, [r7, #4]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_close>:

int _close(int file)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c48:	605a      	str	r2, [r3, #4]
  return 0;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <_isatty>:

int _isatty(int file)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
	...

08002c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <_sbrk+0x5c>)
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <_sbrk+0x60>)
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <_sbrk+0x64>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <_sbrk+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <_sbrk+0x64>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d207      	bcs.n	8002cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb4:	f004 fd1a 	bl	80076ec <__errno>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	220c      	movs	r2, #12
 8002cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e009      	b.n	8002cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <_sbrk+0x64>)
 8002cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20005000 	.word	0x20005000
 8002ce4:	00000400 	.word	0x00000400
 8002ce8:	20000bb8 	.word	0x20000bb8
 8002cec:	20001128 	.word	0x20001128

08002cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <Ringbuf_init+0x38>)
 8002d02:	4a0d      	ldr	r2, [pc, #52]	@ (8002d38 <Ringbuf_init+0x3c>)
 8002d04:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002d06:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <Ringbuf_init+0x40>)
 8002d08:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <Ringbuf_init+0x44>)
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d44 <Ringbuf_init+0x48>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <Ringbuf_init+0x48>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002d1c:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <Ringbuf_init+0x48>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <Ringbuf_init+0x48>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0220 	orr.w	r2, r2, #32
 8002d2a:	60da      	str	r2, [r3, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	20000fd0 	.word	0x20000fd0
 8002d38:	20000bc0 	.word	0x20000bc0
 8002d3c:	20000fd4 	.word	0x20000fd4
 8002d40:	20000dc8 	.word	0x20000dc8
 8002d44:	20000350 	.word	0x20000350

08002d48 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d60:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d009      	beq.n	8002d82 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	79f9      	ldrb	r1, [r7, #7]
 8002d78:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002d92:	4b13      	ldr	r3, [pc, #76]	@ (8002de0 <Uart_read+0x54>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002d9a:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <Uart_read+0x54>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d102      	bne.n	8002dac <Uart_read+0x20>
  {
    return -1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	e013      	b.n	8002dd4 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <Uart_read+0x54>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <Uart_read+0x54>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <Uart_read+0x54>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <Uart_read+0x54>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000fd0 	.word	0x20000fd0

08002de4 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002de8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <IsDataAvailable+0x30>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <IsDataAvailable+0x30>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000fd0 	.word	0x20000fd0

08002e18 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <Uart_peek+0x34>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002e24:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <Uart_peek+0x34>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d102      	bne.n	8002e36 <Uart_peek+0x1e>
  {
    return -1;
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
 8002e34:	e006      	b.n	8002e44 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <Uart_peek+0x34>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <Uart_peek+0x34>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002e42:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	20000fd0 	.word	0x20000fd0

08002e50 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fd f976 	bl	8000150 <strlen>
 8002e64:	4603      	mov	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002e6c:	e01e      	b.n	8002eac <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002e6e:	4b36      	ldr	r3, [pc, #216]	@ (8002f48 <Copy_upto+0xf8>)
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	4b35      	ldr	r3, [pc, #212]	@ (8002f48 <Copy_upto+0xf8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	6838      	ldr	r0, [r7, #0]
 8002e7e:	4403      	add	r3, r0
 8002e80:	5c8a      	ldrb	r2, [r1, r2]
 8002e82:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002e84:	4b30      	ldr	r3, [pc, #192]	@ (8002f48 <Copy_upto+0xf8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <Copy_upto+0xf8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002ea0:	bf00      	nop
 8002ea2:	f7ff ff9f 	bl	8002de4 <IsDataAvailable>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0fa      	beq.n	8002ea2 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002eac:	f7ff ffb4 	bl	8002e18 <Uart_peek>
 8002eb0:	4601      	mov	r1, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	4299      	cmp	r1, r3
 8002ebc:	d1d7      	bne.n	8002e6e <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002ebe:	e027      	b.n	8002f10 <Copy_upto+0xc0>
	{
		so_far++;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002ec6:	f7ff ff61 	bl	8002d8c <Uart_read>
 8002eca:	4601      	mov	r1, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	613a      	str	r2, [r7, #16]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	b2ca      	uxtb	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d101      	bne.n	8002ee8 <Copy_upto+0x98>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e02a      	b.n	8002f3e <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002ee8:	4b18      	ldr	r3, [pc, #96]	@ (8002f4c <Copy_upto+0xfc>)
 8002eea:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002eee:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002ef0:	bf00      	nop
 8002ef2:	f7ff ff77 	bl	8002de4 <IsDataAvailable>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d103      	bne.n	8002f04 <Copy_upto+0xb4>
 8002efc:	4b13      	ldr	r3, [pc, #76]	@ (8002f4c <Copy_upto+0xfc>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f6      	bne.n	8002ef2 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002f04:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <Copy_upto+0xfc>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <Copy_upto+0xc0>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e016      	b.n	8002f3e <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002f10:	f7ff ff82 	bl	8002e18 <Uart_peek>
 8002f14:	4601      	mov	r1, r0
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4299      	cmp	r1, r3
 8002f20:	d0ce      	beq.n	8002ec0 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d002      	beq.n	8002f30 <Copy_upto+0xe0>
	{
		so_far = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
		goto again;
 8002f2e:	e79d      	b.n	8002e6c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d101      	bne.n	8002f3c <Copy_upto+0xec>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <Copy_upto+0xee>
	else return 0;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000fd0 	.word	0x20000fd0
 8002f4c:	20000bbc 	.word	0x20000bbc

08002f50 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7fd f8f7 	bl	8000150 <strlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002f66:	4b3c      	ldr	r3, [pc, #240]	@ (8003058 <Wait_for+0x108>)
 8002f68:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002f6c:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002f6e:	bf00      	nop
 8002f70:	f7ff ff38 	bl	8002de4 <IsDataAvailable>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <Wait_for+0x32>
 8002f7a:	4b37      	ldr	r3, [pc, #220]	@ (8003058 <Wait_for+0x108>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f6      	bne.n	8002f70 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002f82:	4b35      	ldr	r3, [pc, #212]	@ (8003058 <Wait_for+0x108>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d119      	bne.n	8002fbe <Wait_for+0x6e>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e060      	b.n	8003050 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002f8e:	4b33      	ldr	r3, [pc, #204]	@ (800305c <Wait_for+0x10c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002f96:	4b31      	ldr	r3, [pc, #196]	@ (800305c <Wait_for+0x10c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d00b      	beq.n	8002fba <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800305c <Wait_for+0x10c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	4b2b      	ldr	r3, [pc, #172]	@ (800305c <Wait_for+0x10c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002fb8:	e001      	b.n	8002fbe <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e048      	b.n	8003050 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002fbe:	f7ff ff2b 	bl	8002e18 <Uart_peek>
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4299      	cmp	r1, r3
 8002fce:	d1de      	bne.n	8002f8e <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002fd0:	e027      	b.n	8003022 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002fd8:	4b20      	ldr	r3, [pc, #128]	@ (800305c <Wait_for+0x10c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800305c <Wait_for+0x10c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d101      	bne.n	8002ffa <Wait_for+0xaa>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e02a      	b.n	8003050 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	@ (8003058 <Wait_for+0x108>)
 8002ffc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003000:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8003002:	bf00      	nop
 8003004:	f7ff feee 	bl	8002de4 <IsDataAvailable>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <Wait_for+0xc6>
 800300e:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <Wait_for+0x108>)
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f6      	bne.n	8003004 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <Wait_for+0x108>)
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <Wait_for+0xd2>
 800301e:	2300      	movs	r3, #0
 8003020:	e016      	b.n	8003050 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003022:	f7ff fef9 	bl	8002e18 <Uart_peek>
 8003026:	4601      	mov	r1, r0
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4299      	cmp	r1, r3
 8003032:	d0ce      	beq.n	8002fd2 <Wait_for+0x82>
	}

	if (so_far != len)
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d002      	beq.n	8003042 <Wait_for+0xf2>
	{
		so_far = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
		goto again;
 8003040:	e791      	b.n	8002f66 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	d101      	bne.n	800304e <Wait_for+0xfe>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <Wait_for+0x100>
	else return 0;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000bbc 	.word	0x20000bbc
 800305c:	20000fd0 	.word	0x20000fd0

08003060 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d013      	beq.n	80030aa <Uart_isr+0x4a>
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00e      	beq.n	80030aa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800309a:	4b1e      	ldr	r3, [pc, #120]	@ (8003114 <Uart_isr+0xb4>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fe50 	bl	8002d48 <store_char>
        return;
 80030a8:	e031      	b.n	800310e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d02c      	beq.n	800310e <Uart_isr+0xae>
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d027      	beq.n	800310e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80030be:	4b16      	ldr	r3, [pc, #88]	@ (8003118 <Uart_isr+0xb8>)
 80030c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80030c4:	4b14      	ldr	r3, [pc, #80]	@ (8003118 <Uart_isr+0xb8>)
 80030c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d108      	bne.n	80030e0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030dc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80030de:	e015      	b.n	800310c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80030e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <Uart_isr+0xb8>)
 80030e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80030e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003118 <Uart_isr+0xb8>)
 80030e8:	5cd3      	ldrb	r3, [r2, r3]
 80030ea:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <Uart_isr+0xb8>)
 80030ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80030f2:	3301      	adds	r3, #1
 80030f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f8:	4a07      	ldr	r2, [pc, #28]	@ (8003118 <Uart_isr+0xb8>)
 80030fa:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	7bba      	ldrb	r2, [r7, #14]
 800310a:	605a      	str	r2, [r3, #4]
    	return;
 800310c:	bf00      	nop
    }
}
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000fd0 	.word	0x20000fd0
 8003118:	20000dc8 	.word	0x20000dc8

0800311c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
  bl  SystemInit
 800311c:	f7ff fde8 	bl	8002cf0 <SystemInit>


/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003120:	480b      	ldr	r0, [pc, #44]	@ (8003150 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003122:	490c      	ldr	r1, [pc, #48]	@ (8003154 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003124:	4a0c      	ldr	r2, [pc, #48]	@ (8003158 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003128:	e002      	b.n	8003130 <LoopCopyDataInit>

0800312a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800312a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800312c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800312e:	3304      	adds	r3, #4

08003130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003134:	d3f9      	bcc.n	800312a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003136:	4a09      	ldr	r2, [pc, #36]	@ (800315c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003138:	4c09      	ldr	r4, [pc, #36]	@ (8003160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800313a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800313c:	e001      	b.n	8003142 <LoopFillZerobss>

0800313e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800313e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003140:	3204      	adds	r2, #4

08003142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003144:	d3fb      	bcc.n	800313e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003146:	f004 fad7 	bl	80076f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800314a:	f7fe fbb5 	bl	80018b8 <main>
  bx lr
 800314e:	4770      	bx	lr
  ldr r0, =_sdata
 8003150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003154:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003158:	0800bf88 	.word	0x0800bf88
  ldr r2, =_sbss
 800315c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003160:	20001128 	.word	0x20001128

08003164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003164:	e7fe      	b.n	8003164 <ADC1_2_IRQHandler>
	...

08003168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800316c:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <HAL_Init+0x28>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a07      	ldr	r2, [pc, #28]	@ (8003190 <HAL_Init+0x28>)
 8003172:	f043 0310 	orr.w	r3, r3, #16
 8003176:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003178:	2003      	movs	r0, #3
 800317a:	f000 fc6d 	bl	8003a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800317e:	200f      	movs	r0, #15
 8003180:	f000 f808 	bl	8003194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003184:	f7ff fb24 	bl	80027d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000

08003194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800319c:	4b12      	ldr	r3, [pc, #72]	@ (80031e8 <HAL_InitTick+0x54>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b12      	ldr	r3, [pc, #72]	@ (80031ec <HAL_InitTick+0x58>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4619      	mov	r1, r3
 80031a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fc85 	bl	8003ac2 <HAL_SYSTICK_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e00e      	b.n	80031e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b0f      	cmp	r3, #15
 80031c6:	d80a      	bhi.n	80031de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031c8:	2200      	movs	r2, #0
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	f000 fc4d 	bl	8003a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031d4:	4a06      	ldr	r2, [pc, #24]	@ (80031f0 <HAL_InitTick+0x5c>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000018 	.word	0x20000018
 80031ec:	20000020 	.word	0x20000020
 80031f0:	2000001c 	.word	0x2000001c

080031f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031f8:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_IncTick+0x1c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <HAL_IncTick+0x20>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4413      	add	r3, r2
 8003204:	4a03      	ldr	r2, [pc, #12]	@ (8003214 <HAL_IncTick+0x20>)
 8003206:	6013      	str	r3, [r2, #0]
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	20000020 	.word	0x20000020
 8003214:	20000fd8 	.word	0x20000fd8

08003218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return uwTick;
 800321c:	4b02      	ldr	r3, [pc, #8]	@ (8003228 <HAL_GetTick+0x10>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	20000fd8 	.word	0x20000fd8

0800322c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff fff0 	bl	8003218 <HAL_GetTick>
 8003238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d005      	beq.n	8003252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003246:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <HAL_Delay+0x44>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003252:	bf00      	nop
 8003254:	f7ff ffe0 	bl	8003218 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	429a      	cmp	r2, r3
 8003262:	d8f7      	bhi.n	8003254 <HAL_Delay+0x28>
  {
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000020 	.word	0x20000020

08003274 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0be      	b.n	8003414 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fabe 	bl	8002834 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fabf 	bl	800383c <ADC_ConversionStop_Disable>
 80032be:	4603      	mov	r3, r0
 80032c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 8099 	bne.w	8003402 <HAL_ADC_Init+0x18e>
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 8095 	bne.w	8003402 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032e0:	f023 0302 	bic.w	r3, r3, #2
 80032e4:	f043 0202 	orr.w	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7b1b      	ldrb	r3, [r3, #12]
 80032fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	4313      	orrs	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330c:	d003      	beq.n	8003316 <HAL_ADC_Init+0xa2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_ADC_Init+0xa8>
 8003316:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800331a:	e000      	b.n	800331e <HAL_ADC_Init+0xaa>
 800331c:	2300      	movs	r3, #0
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7d1b      	ldrb	r3, [r3, #20]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d119      	bne.n	8003360 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7b1b      	ldrb	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	3b01      	subs	r3, #1
 800333a:	035a      	lsls	r2, r3, #13
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	e00b      	b.n	8003360 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	4b28      	ldr	r3, [pc, #160]	@ (800341c <HAL_ADC_Init+0x1a8>)
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	430b      	orrs	r3, r1
 8003386:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003390:	d003      	beq.n	800339a <HAL_ADC_Init+0x126>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d104      	bne.n	80033a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	3b01      	subs	r3, #1
 80033a0:	051b      	lsls	r3, r3, #20
 80033a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033aa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	4b18      	ldr	r3, [pc, #96]	@ (8003420 <HAL_ADC_Init+0x1ac>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d10b      	bne.n	80033e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033de:	e018      	b.n	8003412 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	f023 0312 	bic.w	r3, r3, #18
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003400:	e007      	b.n	8003412 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003412:	7dfb      	ldrb	r3, [r7, #23]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	ffe1f7fd 	.word	0xffe1f7fd
 8003420:	ff1f0efe 	.word	0xff1f0efe

08003424 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_ADC_Start+0x1a>
 800343a:	2302      	movs	r3, #2
 800343c:	e098      	b.n	8003570 <HAL_ADC_Start+0x14c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f99e 	bl	8003788 <ADC_Enable>
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 8087 	bne.w	8003566 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a41      	ldr	r2, [pc, #260]	@ (8003578 <HAL_ADC_Start+0x154>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d105      	bne.n	8003482 <HAL_ADC_Start+0x5e>
 8003476:	4b41      	ldr	r3, [pc, #260]	@ (800357c <HAL_ADC_Start+0x158>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d115      	bne.n	80034ae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003486:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d026      	beq.n	80034ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034ac:	e01d      	b.n	80034ea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2f      	ldr	r2, [pc, #188]	@ (800357c <HAL_ADC_Start+0x158>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_Start+0xaa>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003578 <HAL_ADC_Start+0x154>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10d      	bne.n	80034ea <HAL_ADC_Start+0xc6>
 80034ce:	4b2b      	ldr	r3, [pc, #172]	@ (800357c <HAL_ADC_Start+0x158>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d006      	beq.n	8003504 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	f023 0206 	bic.w	r2, r3, #6
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003502:	e002      	b.n	800350a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0202 	mvn.w	r2, #2
 800351a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003526:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800352a:	d113      	bne.n	8003554 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003530:	4a11      	ldr	r2, [pc, #68]	@ (8003578 <HAL_ADC_Start+0x154>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d105      	bne.n	8003542 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003536:	4b11      	ldr	r3, [pc, #68]	@ (800357c <HAL_ADC_Start+0x158>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800353e:	2b00      	cmp	r3, #0
 8003540:	d108      	bne.n	8003554 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	e00c      	b.n	800356e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	e003      	b.n	800356e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40012800 	.word	0x40012800
 800357c:	40012400 	.word	0x40012400

08003580 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x20>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0dc      	b.n	8003772 <HAL_ADC_ConfigChannel+0x1da>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b06      	cmp	r3, #6
 80035c6:	d81c      	bhi.n	8003602 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	3b05      	subs	r3, #5
 80035da:	221f      	movs	r2, #31
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	4019      	ands	r1, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	3b05      	subs	r3, #5
 80035f4:	fa00 f203 	lsl.w	r2, r0, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8003600:	e03c      	b.n	800367c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d81c      	bhi.n	8003644 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	3b23      	subs	r3, #35	@ 0x23
 800361c:	221f      	movs	r2, #31
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	4019      	ands	r1, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	3b23      	subs	r3, #35	@ 0x23
 8003636:	fa00 f203 	lsl.w	r2, r0, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
 8003642:	e01b      	b.n	800367c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	3b41      	subs	r3, #65	@ 0x41
 8003656:	221f      	movs	r2, #31
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	4019      	ands	r1, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	3b41      	subs	r3, #65	@ 0x41
 8003670:	fa00 f203 	lsl.w	r2, r0, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b09      	cmp	r3, #9
 8003682:	d91c      	bls.n	80036be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68d9      	ldr	r1, [r3, #12]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	3b1e      	subs	r3, #30
 8003696:	2207      	movs	r2, #7
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	4019      	ands	r1, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6898      	ldr	r0, [r3, #8]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4413      	add	r3, r2
 80036ae:	3b1e      	subs	r3, #30
 80036b0:	fa00 f203 	lsl.w	r2, r0, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	e019      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6919      	ldr	r1, [r3, #16]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	2207      	movs	r2, #7
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	4019      	ands	r1, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6898      	ldr	r0, [r3, #8]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	fa00 f203 	lsl.w	r2, r0, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d003      	beq.n	8003702 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036fe:	2b11      	cmp	r3, #17
 8003700:	d132      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1d      	ldr	r2, [pc, #116]	@ (800377c <HAL_ADC_ConfigChannel+0x1e4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d125      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d126      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003728:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b10      	cmp	r3, #16
 8003730:	d11a      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003732:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <HAL_ADC_ConfigChannel+0x1e8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a13      	ldr	r2, [pc, #76]	@ (8003784 <HAL_ADC_ConfigChannel+0x1ec>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	0c9a      	lsrs	r2, r3, #18
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003748:	e002      	b.n	8003750 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3b01      	subs	r3, #1
 800374e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f9      	bne.n	800374a <HAL_ADC_ConfigChannel+0x1b2>
 8003756:	e007      	b.n	8003768 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	40012400 	.word	0x40012400
 8003780:	20000018 	.word	0x20000018
 8003784:	431bde83 	.word	0x431bde83

08003788 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d040      	beq.n	8003828 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <ADC_Enable+0xac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003838 <ADC_Enable+0xb0>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	0c9b      	lsrs	r3, r3, #18
 80037c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037c4:	e002      	b.n	80037cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f9      	bne.n	80037c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037d2:	f7ff fd21 	bl	8003218 <HAL_GetTick>
 80037d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037d8:	e01f      	b.n	800381a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037da:	f7ff fd1d 	bl	8003218 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d918      	bls.n	800381a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d011      	beq.n	800381a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fa:	f043 0210 	orr.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e007      	b.n	800382a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d1d8      	bne.n	80037da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000018 	.word	0x20000018
 8003838:	431bde83 	.word	0x431bde83

0800383c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d12e      	bne.n	80038b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003866:	f7ff fcd7 	bl	8003218 <HAL_GetTick>
 800386a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800386c:	e01b      	b.n	80038a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800386e:	f7ff fcd3 	bl	8003218 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d914      	bls.n	80038a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10d      	bne.n	80038a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	f043 0210 	orr.w	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e007      	b.n	80038b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d0dc      	beq.n	800386e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038dc:	4013      	ands	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038f2:	4a04      	ldr	r2, [pc, #16]	@ (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	60d3      	str	r3, [r2, #12]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <__NVIC_GetPriorityGrouping+0x18>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	f003 0307 	and.w	r3, r3, #7
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	2b00      	cmp	r3, #0
 8003934:	db0b      	blt.n	800394e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	f003 021f 	and.w	r2, r3, #31
 800393c:	4906      	ldr	r1, [pc, #24]	@ (8003958 <__NVIC_EnableIRQ+0x34>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2001      	movs	r0, #1
 8003946:	fa00 f202 	lsl.w	r2, r0, r2
 800394a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	@ (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	@ (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	@ 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	@ 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a24:	d301      	bcc.n	8003a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00f      	b.n	8003a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <SysTick_Config+0x40>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a32:	210f      	movs	r1, #15
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f7ff ff90 	bl	800395c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a3c:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <SysTick_Config+0x40>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a42:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <SysTick_Config+0x40>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff2d 	bl	80038c0 <__NVIC_SetPriorityGrouping>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a80:	f7ff ff42 	bl	8003908 <__NVIC_GetPriorityGrouping>
 8003a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff ff90 	bl	80039b0 <NVIC_EncodePriority>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff5f 	bl	800395c <__NVIC_SetPriority>
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff35 	bl	8003924 <__NVIC_EnableIRQ>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ffa2 	bl	8003a14 <SysTick_Config>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d008      	beq.n	8003b04 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2204      	movs	r2, #4
 8003af6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e020      	b.n	8003b46 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 020e 	bic.w	r2, r2, #14
 8003b12:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b32:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d005      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e051      	b.n	8003c18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 020e 	bic.w	r2, r2, #14
 8003b82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a22      	ldr	r2, [pc, #136]	@ (8003c24 <HAL_DMA_Abort_IT+0xd4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d029      	beq.n	8003bf2 <HAL_DMA_Abort_IT+0xa2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a21      	ldr	r2, [pc, #132]	@ (8003c28 <HAL_DMA_Abort_IT+0xd8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_Abort_IT+0x9e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1f      	ldr	r2, [pc, #124]	@ (8003c2c <HAL_DMA_Abort_IT+0xdc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01a      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x98>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c30 <HAL_DMA_Abort_IT+0xe0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d012      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x92>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c34 <HAL_DMA_Abort_IT+0xe4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00a      	beq.n	8003bdc <HAL_DMA_Abort_IT+0x8c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1b      	ldr	r2, [pc, #108]	@ (8003c38 <HAL_DMA_Abort_IT+0xe8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d102      	bne.n	8003bd6 <HAL_DMA_Abort_IT+0x86>
 8003bd0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003bd4:	e00e      	b.n	8003bf4 <HAL_DMA_Abort_IT+0xa4>
 8003bd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bda:	e00b      	b.n	8003bf4 <HAL_DMA_Abort_IT+0xa4>
 8003bdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003be0:	e008      	b.n	8003bf4 <HAL_DMA_Abort_IT+0xa4>
 8003be2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003be6:	e005      	b.n	8003bf4 <HAL_DMA_Abort_IT+0xa4>
 8003be8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bec:	e002      	b.n	8003bf4 <HAL_DMA_Abort_IT+0xa4>
 8003bee:	2310      	movs	r3, #16
 8003bf0:	e000      	b.n	8003bf4 <HAL_DMA_Abort_IT+0xa4>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	4a11      	ldr	r2, [pc, #68]	@ (8003c3c <HAL_DMA_Abort_IT+0xec>)
 8003bf6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
    } 
  }
  return status;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40020008 	.word	0x40020008
 8003c28:	4002001c 	.word	0x4002001c
 8003c2c:	40020030 	.word	0x40020030
 8003c30:	40020044 	.word	0x40020044
 8003c34:	40020058 	.word	0x40020058
 8003c38:	4002006c 	.word	0x4002006c
 8003c3c:	40020000 	.word	0x40020000

08003c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b08b      	sub	sp, #44	@ 0x2c
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c52:	e169      	b.n	8003f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c54:	2201      	movs	r2, #1
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	f040 8158 	bne.w	8003f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4a9a      	ldr	r2, [pc, #616]	@ (8003ee0 <HAL_GPIO_Init+0x2a0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d05e      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003c7c:	4a98      	ldr	r2, [pc, #608]	@ (8003ee0 <HAL_GPIO_Init+0x2a0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d875      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003c82:	4a98      	ldr	r2, [pc, #608]	@ (8003ee4 <HAL_GPIO_Init+0x2a4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d058      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003c88:	4a96      	ldr	r2, [pc, #600]	@ (8003ee4 <HAL_GPIO_Init+0x2a4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d86f      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003c8e:	4a96      	ldr	r2, [pc, #600]	@ (8003ee8 <HAL_GPIO_Init+0x2a8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d052      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003c94:	4a94      	ldr	r2, [pc, #592]	@ (8003ee8 <HAL_GPIO_Init+0x2a8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d869      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003c9a:	4a94      	ldr	r2, [pc, #592]	@ (8003eec <HAL_GPIO_Init+0x2ac>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d04c      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003ca0:	4a92      	ldr	r2, [pc, #584]	@ (8003eec <HAL_GPIO_Init+0x2ac>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d863      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003ca6:	4a92      	ldr	r2, [pc, #584]	@ (8003ef0 <HAL_GPIO_Init+0x2b0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d046      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003cac:	4a90      	ldr	r2, [pc, #576]	@ (8003ef0 <HAL_GPIO_Init+0x2b0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d85d      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003cb2:	2b12      	cmp	r3, #18
 8003cb4:	d82a      	bhi.n	8003d0c <HAL_GPIO_Init+0xcc>
 8003cb6:	2b12      	cmp	r3, #18
 8003cb8:	d859      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003cba:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <HAL_GPIO_Init+0x80>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003d3b 	.word	0x08003d3b
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003d27 	.word	0x08003d27
 8003ccc:	08003d69 	.word	0x08003d69
 8003cd0:	08003d6f 	.word	0x08003d6f
 8003cd4:	08003d6f 	.word	0x08003d6f
 8003cd8:	08003d6f 	.word	0x08003d6f
 8003cdc:	08003d6f 	.word	0x08003d6f
 8003ce0:	08003d6f 	.word	0x08003d6f
 8003ce4:	08003d6f 	.word	0x08003d6f
 8003ce8:	08003d6f 	.word	0x08003d6f
 8003cec:	08003d6f 	.word	0x08003d6f
 8003cf0:	08003d6f 	.word	0x08003d6f
 8003cf4:	08003d6f 	.word	0x08003d6f
 8003cf8:	08003d6f 	.word	0x08003d6f
 8003cfc:	08003d6f 	.word	0x08003d6f
 8003d00:	08003d6f 	.word	0x08003d6f
 8003d04:	08003d1d 	.word	0x08003d1d
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	4a79      	ldr	r2, [pc, #484]	@ (8003ef4 <HAL_GPIO_Init+0x2b4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d12:	e02c      	b.n	8003d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	623b      	str	r3, [r7, #32]
          break;
 8003d1a:	e029      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	623b      	str	r3, [r7, #32]
          break;
 8003d24:	e024      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	623b      	str	r3, [r7, #32]
          break;
 8003d2e:	e01f      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	330c      	adds	r3, #12
 8003d36:	623b      	str	r3, [r7, #32]
          break;
 8003d38:	e01a      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d42:	2304      	movs	r3, #4
 8003d44:	623b      	str	r3, [r7, #32]
          break;
 8003d46:	e013      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d50:	2308      	movs	r3, #8
 8003d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	611a      	str	r2, [r3, #16]
          break;
 8003d5a:	e009      	b.n	8003d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	615a      	str	r2, [r3, #20]
          break;
 8003d66:	e003      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	623b      	str	r3, [r7, #32]
          break;
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          break;
 8003d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2bff      	cmp	r3, #255	@ 0xff
 8003d74:	d801      	bhi.n	8003d7a <HAL_GPIO_Init+0x13a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	e001      	b.n	8003d7e <HAL_GPIO_Init+0x13e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2bff      	cmp	r3, #255	@ 0xff
 8003d84:	d802      	bhi.n	8003d8c <HAL_GPIO_Init+0x14c>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	e002      	b.n	8003d92 <HAL_GPIO_Init+0x152>
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	3b08      	subs	r3, #8
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	210f      	movs	r1, #15
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	401a      	ands	r2, r3
 8003da4:	6a39      	ldr	r1, [r7, #32]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	431a      	orrs	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80b1 	beq.w	8003f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef8 <HAL_GPIO_Init+0x2b8>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4a4c      	ldr	r2, [pc, #304]	@ (8003ef8 <HAL_GPIO_Init+0x2b8>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6193      	str	r3, [r2, #24]
 8003dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef8 <HAL_GPIO_Init+0x2b8>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dd8:	4a48      	ldr	r2, [pc, #288]	@ (8003efc <HAL_GPIO_Init+0x2bc>)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	220f      	movs	r2, #15
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a40      	ldr	r2, [pc, #256]	@ (8003f00 <HAL_GPIO_Init+0x2c0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_GPIO_Init+0x1ec>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3f      	ldr	r2, [pc, #252]	@ (8003f04 <HAL_GPIO_Init+0x2c4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00d      	beq.n	8003e28 <HAL_GPIO_Init+0x1e8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f08 <HAL_GPIO_Init+0x2c8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <HAL_GPIO_Init+0x1e4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3d      	ldr	r2, [pc, #244]	@ (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_GPIO_Init+0x1e0>
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e20:	2304      	movs	r3, #4
 8003e22:	e004      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e002      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e30:	f002 0203 	and.w	r2, r2, #3
 8003e34:	0092      	lsls	r2, r2, #2
 8003e36:	4093      	lsls	r3, r2
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e3e:	492f      	ldr	r1, [pc, #188]	@ (8003efc <HAL_GPIO_Init+0x2bc>)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d006      	beq.n	8003e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e58:	4b2d      	ldr	r3, [pc, #180]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	492c      	ldr	r1, [pc, #176]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]
 8003e64:	e006      	b.n	8003e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e66:	4b2a      	ldr	r3, [pc, #168]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	4928      	ldr	r1, [pc, #160]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e80:	4b23      	ldr	r3, [pc, #140]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	4922      	ldr	r1, [pc, #136]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60cb      	str	r3, [r1, #12]
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e8e:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	491e      	ldr	r1, [pc, #120]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d006      	beq.n	8003eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	4918      	ldr	r1, [pc, #96]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003eb6:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	4914      	ldr	r1, [pc, #80]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d021      	beq.n	8003f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	490e      	ldr	r1, [pc, #56]	@ (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
 8003edc:	e021      	b.n	8003f22 <HAL_GPIO_Init+0x2e2>
 8003ede:	bf00      	nop
 8003ee0:	10320000 	.word	0x10320000
 8003ee4:	10310000 	.word	0x10310000
 8003ee8:	10220000 	.word	0x10220000
 8003eec:	10210000 	.word	0x10210000
 8003ef0:	10120000 	.word	0x10120000
 8003ef4:	10110000 	.word	0x10110000
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010800 	.word	0x40010800
 8003f04:	40010c00 	.word	0x40010c00
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40011400 	.word	0x40011400
 8003f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_GPIO_Init+0x304>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	4909      	ldr	r1, [pc, #36]	@ (8003f44 <HAL_GPIO_Init+0x304>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	3301      	adds	r3, #1
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f47f ae8e 	bne.w	8003c54 <HAL_GPIO_Init+0x14>
  }
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	372c      	adds	r7, #44	@ 0x2c
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	40010400 	.word	0x40010400

08003f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	e001      	b.n	8003f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	807b      	strh	r3, [r7, #2]
 8003f82:	4613      	mov	r3, r2
 8003f84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f86:	787b      	ldrb	r3, [r7, #1]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8c:	887a      	ldrh	r2, [r7, #2]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f92:	e003      	b.n	8003f9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	041a      	lsls	r2, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	611a      	str	r2, [r3, #16]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fb8:	887a      	ldrh	r2, [r7, #2]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	041a      	lsls	r2, r3, #16
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	400b      	ands	r3, r1
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]
}
 8003fce:	bf00      	nop
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e12b      	b.n	8004242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fe fc54 	bl	80028ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2224      	movs	r2, #36	@ 0x24
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800402a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800403a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800403c:	f001 fa60 	bl	8005500 <HAL_RCC_GetPCLK1Freq>
 8004040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4a81      	ldr	r2, [pc, #516]	@ (800424c <HAL_I2C_Init+0x274>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d807      	bhi.n	800405c <HAL_I2C_Init+0x84>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a80      	ldr	r2, [pc, #512]	@ (8004250 <HAL_I2C_Init+0x278>)
 8004050:	4293      	cmp	r3, r2
 8004052:	bf94      	ite	ls
 8004054:	2301      	movls	r3, #1
 8004056:	2300      	movhi	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e006      	b.n	800406a <HAL_I2C_Init+0x92>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a7d      	ldr	r2, [pc, #500]	@ (8004254 <HAL_I2C_Init+0x27c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	bf94      	ite	ls
 8004064:	2301      	movls	r3, #1
 8004066:	2300      	movhi	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0e7      	b.n	8004242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4a78      	ldr	r2, [pc, #480]	@ (8004258 <HAL_I2C_Init+0x280>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	0c9b      	lsrs	r3, r3, #18
 800407c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4a6a      	ldr	r2, [pc, #424]	@ (800424c <HAL_I2C_Init+0x274>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d802      	bhi.n	80040ac <HAL_I2C_Init+0xd4>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3301      	adds	r3, #1
 80040aa:	e009      	b.n	80040c0 <HAL_I2C_Init+0xe8>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	4a69      	ldr	r2, [pc, #420]	@ (800425c <HAL_I2C_Init+0x284>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	099b      	lsrs	r3, r3, #6
 80040be:	3301      	adds	r3, #1
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	495c      	ldr	r1, [pc, #368]	@ (800424c <HAL_I2C_Init+0x274>)
 80040dc:	428b      	cmp	r3, r1
 80040de:	d819      	bhi.n	8004114 <HAL_I2C_Init+0x13c>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1e59      	subs	r1, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ee:	1c59      	adds	r1, r3, #1
 80040f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040f4:	400b      	ands	r3, r1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_I2C_Init+0x138>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1e59      	subs	r1, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fbb1 f3f3 	udiv	r3, r1, r3
 8004108:	3301      	adds	r3, #1
 800410a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410e:	e051      	b.n	80041b4 <HAL_I2C_Init+0x1dc>
 8004110:	2304      	movs	r3, #4
 8004112:	e04f      	b.n	80041b4 <HAL_I2C_Init+0x1dc>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d111      	bne.n	8004140 <HAL_I2C_Init+0x168>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1e58      	subs	r0, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6859      	ldr	r1, [r3, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	440b      	add	r3, r1
 800412a:	fbb0 f3f3 	udiv	r3, r0, r3
 800412e:	3301      	adds	r3, #1
 8004130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004134:	2b00      	cmp	r3, #0
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	e012      	b.n	8004166 <HAL_I2C_Init+0x18e>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1e58      	subs	r0, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	0099      	lsls	r1, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	fbb0 f3f3 	udiv	r3, r0, r3
 8004156:	3301      	adds	r3, #1
 8004158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_I2C_Init+0x196>
 800416a:	2301      	movs	r3, #1
 800416c:	e022      	b.n	80041b4 <HAL_I2C_Init+0x1dc>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10e      	bne.n	8004194 <HAL_I2C_Init+0x1bc>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1e58      	subs	r0, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	440b      	add	r3, r1
 8004184:	fbb0 f3f3 	udiv	r3, r0, r3
 8004188:	3301      	adds	r3, #1
 800418a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004192:	e00f      	b.n	80041b4 <HAL_I2C_Init+0x1dc>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1e58      	subs	r0, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	0099      	lsls	r1, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041aa:	3301      	adds	r3, #1
 80041ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	6809      	ldr	r1, [r1, #0]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6911      	ldr	r1, [r2, #16]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68d2      	ldr	r2, [r2, #12]
 80041ee:	4311      	orrs	r1, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	000186a0 	.word	0x000186a0
 8004250:	001e847f 	.word	0x001e847f
 8004254:	003d08ff 	.word	0x003d08ff
 8004258:	431bde83 	.word	0x431bde83
 800425c:	10624dd3 	.word	0x10624dd3

08004260 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	461a      	mov	r2, r3
 800426c:	460b      	mov	r3, r1
 800426e:	817b      	strh	r3, [r7, #10]
 8004270:	4613      	mov	r3, r2
 8004272:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004274:	f7fe ffd0 	bl	8003218 <HAL_GetTick>
 8004278:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b20      	cmp	r3, #32
 8004284:	f040 80e0 	bne.w	8004448 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2319      	movs	r3, #25
 800428e:	2201      	movs	r2, #1
 8004290:	4970      	ldr	r1, [pc, #448]	@ (8004454 <HAL_I2C_Master_Transmit+0x1f4>)
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fa92 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
 80042a0:	e0d3      	b.n	800444a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_I2C_Master_Transmit+0x50>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e0cc      	b.n	800444a <HAL_I2C_Master_Transmit+0x1ea>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d007      	beq.n	80042d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2221      	movs	r2, #33	@ 0x21
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2210      	movs	r2, #16
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	893a      	ldrh	r2, [r7, #8]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a50      	ldr	r2, [pc, #320]	@ (8004458 <HAL_I2C_Master_Transmit+0x1f8>)
 8004316:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004318:	8979      	ldrh	r1, [r7, #10]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f9ca 	bl	80046b8 <I2C_MasterRequestWrite>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e08d      	b.n	800444a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004344:	e066      	b.n	8004414 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	6a39      	ldr	r1, [r7, #32]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 fb50 	bl	80049f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	2b04      	cmp	r3, #4
 800435c:	d107      	bne.n	800436e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e06b      	b.n	800444a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	781a      	ldrb	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d11b      	bne.n	80043e8 <HAL_I2C_Master_Transmit+0x188>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d017      	beq.n	80043e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	6a39      	ldr	r1, [r7, #32]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fb47 	bl	8004a80 <I2C_WaitOnBTFFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00d      	beq.n	8004414 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d107      	bne.n	8004410 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e01a      	b.n	800444a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	d194      	bne.n	8004346 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e000      	b.n	800444a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	00100002 	.word	0x00100002
 8004458:	ffff0000 	.word	0xffff0000

0800445c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	@ 0x28
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	460b      	mov	r3, r1
 800446a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800446c:	f7fe fed4 	bl	8003218 <HAL_GetTick>
 8004470:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b20      	cmp	r3, #32
 8004480:	f040 8111 	bne.w	80046a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	2319      	movs	r3, #25
 800448a:	2201      	movs	r2, #1
 800448c:	4988      	ldr	r1, [pc, #544]	@ (80046b0 <HAL_I2C_IsDeviceReady+0x254>)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f994 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
 800449c:	e104      	b.n	80046a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_I2C_IsDeviceReady+0x50>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e0fd      	b.n	80046a8 <HAL_I2C_IsDeviceReady+0x24c>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d007      	beq.n	80044d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2224      	movs	r2, #36	@ 0x24
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a70      	ldr	r2, [pc, #448]	@ (80046b4 <HAL_I2C_IsDeviceReady+0x258>)
 80044f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004504:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2200      	movs	r2, #0
 800450e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f952 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00d      	beq.n	800453a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800452c:	d103      	bne.n	8004536 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004534:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0b6      	b.n	80046a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800453a:	897b      	ldrh	r3, [r7, #10]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004548:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800454a:	f7fe fe65 	bl	8003218 <HAL_GetTick>
 800454e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b02      	cmp	r3, #2
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800457e:	e025      	b.n	80045cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fe fe4a 	bl	8003218 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <HAL_I2C_IsDeviceReady+0x13a>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	22a0      	movs	r2, #160	@ 0xa0
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80045d6:	d005      	beq.n	80045e4 <HAL_I2C_IsDeviceReady+0x188>
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <HAL_I2C_IsDeviceReady+0x188>
 80045de:	7dbb      	ldrb	r3, [r7, #22]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0cd      	beq.n	8004580 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d129      	bne.n	800464e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004608:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2319      	movs	r3, #25
 8004626:	2201      	movs	r2, #1
 8004628:	4921      	ldr	r1, [pc, #132]	@ (80046b0 <HAL_I2C_IsDeviceReady+0x254>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f8c6 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e036      	b.n	80046a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e02c      	b.n	80046a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004666:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2319      	movs	r3, #25
 800466e:	2201      	movs	r2, #1
 8004670:	490f      	ldr	r1, [pc, #60]	@ (80046b0 <HAL_I2C_IsDeviceReady+0x254>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f8a2 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e012      	b.n	80046a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	3301      	adds	r3, #1
 8004686:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	f4ff af32 	bcc.w	80044f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	00100002 	.word	0x00100002
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	460b      	mov	r3, r1
 80046c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d006      	beq.n	80046e2 <I2C_MasterRequestWrite+0x2a>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d003      	beq.n	80046e2 <I2C_MasterRequestWrite+0x2a>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046e0:	d108      	bne.n	80046f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e00b      	b.n	800470c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	2b12      	cmp	r3, #18
 80046fa:	d107      	bne.n	800470c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800470a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f84f 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00d      	beq.n	8004740 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004732:	d103      	bne.n	800473c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e035      	b.n	80047ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004748:	d108      	bne.n	800475c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800474a:	897b      	ldrh	r3, [r7, #10]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004758:	611a      	str	r2, [r3, #16]
 800475a:	e01b      	b.n	8004794 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800475c:	897b      	ldrh	r3, [r7, #10]
 800475e:	11db      	asrs	r3, r3, #7
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 0306 	and.w	r3, r3, #6
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f063 030f 	orn	r3, r3, #15
 800476c:	b2da      	uxtb	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	490e      	ldr	r1, [pc, #56]	@ (80047b4 <I2C_MasterRequestWrite+0xfc>)
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f898 	bl	80048b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e010      	b.n	80047ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800478a:	897b      	ldrh	r3, [r7, #10]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4907      	ldr	r1, [pc, #28]	@ (80047b8 <I2C_MasterRequestWrite+0x100>)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f888 	bl	80048b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	00010008 	.word	0x00010008
 80047b8:	00010002 	.word	0x00010002

080047bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047cc:	e048      	b.n	8004860 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d044      	beq.n	8004860 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d6:	f7fe fd1f 	bl	8003218 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d139      	bne.n	8004860 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	0c1b      	lsrs	r3, r3, #16
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10d      	bne.n	8004812 <I2C_WaitOnFlagUntilTimeout+0x56>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	43da      	mvns	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4013      	ands	r3, r2
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf0c      	ite	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	2300      	movne	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	e00c      	b.n	800482c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	429a      	cmp	r2, r3
 8004830:	d116      	bne.n	8004860 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	f043 0220 	orr.w	r2, r3, #32
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e023      	b.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	d10d      	bne.n	8004886 <I2C_WaitOnFlagUntilTimeout+0xca>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	43da      	mvns	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	e00c      	b.n	80048a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	43da      	mvns	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d093      	beq.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048be:	e071      	b.n	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ce:	d123      	bne.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	f043 0204 	orr.w	r2, r3, #4
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e067      	b.n	80049e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d041      	beq.n	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004920:	f7fe fc7a 	bl	8003218 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d302      	bcc.n	8004936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d136      	bne.n	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10c      	bne.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	43da      	mvns	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4013      	ands	r3, r2
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf14      	ite	ne
 8004952:	2301      	movne	r3, #1
 8004954:	2300      	moveq	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e00b      	b.n	8004972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	43da      	mvns	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e021      	b.n	80049e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10c      	bne.n	80049c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	43da      	mvns	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4013      	ands	r3, r2
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e00b      	b.n	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	43da      	mvns	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4013      	ands	r3, r2
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf14      	ite	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	2300      	moveq	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f47f af6d 	bne.w	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049fc:	e034      	b.n	8004a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f886 	bl	8004b10 <I2C_IsAcknowledgeFailed>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e034      	b.n	8004a78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d028      	beq.n	8004a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fe fbff 	bl	8003218 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11d      	bne.n	8004a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a36:	2b80      	cmp	r3, #128	@ 0x80
 8004a38:	d016      	beq.n	8004a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a72:	2b80      	cmp	r3, #128	@ 0x80
 8004a74:	d1c3      	bne.n	80049fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a8c:	e034      	b.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f83e 	bl	8004b10 <I2C_IsAcknowledgeFailed>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e034      	b.n	8004b08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d028      	beq.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa6:	f7fe fbb7 	bl	8003218 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d11d      	bne.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d016      	beq.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e007      	b.n	8004b08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d1c3      	bne.n	8004a8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b26:	d11b      	bne.n	8004b60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	f043 0204 	orr.w	r2, r3, #4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6e:	b08b      	sub	sp, #44	@ 0x2c
 8004b70:	af06      	add	r7, sp, #24
 8004b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0f1      	b.n	8004d62 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fd ff88 	bl	8002aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fef5 	bl	8006994 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	687e      	ldr	r6, [r7, #4]
 8004bb2:	466d      	mov	r5, sp
 8004bb4:	f106 0410 	add.w	r4, r6, #16
 8004bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	1d33      	adds	r3, r6, #4
 8004bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bc4:	6838      	ldr	r0, [r7, #0]
 8004bc6:	f001 fed5 	bl	8006974 <USB_CoreInit>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0c2      	b.n	8004d62 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fef0 	bl	80069c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]
 8004bec:	e040      	b.n	8004c70 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3301      	adds	r3, #1
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	440b      	add	r3, r1
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	440b      	add	r3, r1
 8004c28:	3303      	adds	r3, #3
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3338      	adds	r3, #56	@ 0x38
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	440b      	add	r3, r1
 8004c50:	333c      	adds	r3, #60	@ 0x3c
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c56:	7bfa      	ldrb	r2, [r7, #15]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	440b      	add	r3, r1
 8004c64:	3340      	adds	r3, #64	@ 0x40
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	7bfa      	ldrb	r2, [r7, #15]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d3b9      	bcc.n	8004bee <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
 8004c7e:	e044      	b.n	8004d0a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c96:	7bfa      	ldrb	r2, [r7, #15]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	440b      	add	r3, r1
 8004cba:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cc2:	7bfa      	ldrb	r2, [r7, #15]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	440b      	add	r3, r1
 8004cd0:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cd8:	7bfa      	ldrb	r2, [r7, #15]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	440b      	add	r3, r1
 8004ce6:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	3301      	adds	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	7bfa      	ldrb	r2, [r7, #15]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d3b5      	bcc.n	8004c80 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	603b      	str	r3, [r7, #0]
 8004d1a:	687e      	ldr	r6, [r7, #4]
 8004d1c:	466d      	mov	r5, sp
 8004d1e:	f106 0410 	add.w	r4, r6, #16
 8004d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	602b      	str	r3, [r5, #0]
 8004d2a:	1d33      	adds	r3, r6, #4
 8004d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d2e:	6838      	ldr	r0, [r7, #0]
 8004d30:	f001 fe56 	bl	80069e0 <USB_DevInit>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e00d      	b.n	8004d62 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 fe60 	bl	8006a20 <USB_DevDisconnect>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e272      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8087 	beq.w	8004e9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d8c:	4b92      	ldr	r3, [pc, #584]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d00c      	beq.n	8004db2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d98:	4b8f      	ldr	r3, [pc, #572]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 030c 	and.w	r3, r3, #12
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d112      	bne.n	8004dca <HAL_RCC_OscConfig+0x5e>
 8004da4:	4b8c      	ldr	r3, [pc, #560]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db0:	d10b      	bne.n	8004dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db2:	4b89      	ldr	r3, [pc, #548]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d06c      	beq.n	8004e98 <HAL_RCC_OscConfig+0x12c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d168      	bne.n	8004e98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e24c      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x76>
 8004dd4:	4b80      	ldr	r3, [pc, #512]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7f      	ldr	r2, [pc, #508]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	e02e      	b.n	8004e40 <HAL_RCC_OscConfig+0xd4>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x98>
 8004dea:	4b7b      	ldr	r3, [pc, #492]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a7a      	ldr	r2, [pc, #488]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4b78      	ldr	r3, [pc, #480]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a77      	ldr	r2, [pc, #476]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e01d      	b.n	8004e40 <HAL_RCC_OscConfig+0xd4>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCC_OscConfig+0xbc>
 8004e0e:	4b72      	ldr	r3, [pc, #456]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a71      	ldr	r2, [pc, #452]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a6e      	ldr	r2, [pc, #440]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e00b      	b.n	8004e40 <HAL_RCC_OscConfig+0xd4>
 8004e28:	4b6b      	ldr	r3, [pc, #428]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a6a      	ldr	r2, [pc, #424]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	4b68      	ldr	r3, [pc, #416]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a67      	ldr	r2, [pc, #412]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fe f9e6 	bl	8003218 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fe f9e2 	bl	8003218 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	@ 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e200      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e62:	4b5d      	ldr	r3, [pc, #372]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0xe4>
 8004e6e:	e014      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fe f9d2 	bl	8003218 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e78:	f7fe f9ce 	bl	8003218 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b64      	cmp	r3, #100	@ 0x64
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e1ec      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8a:	4b53      	ldr	r3, [pc, #332]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x10c>
 8004e96:	e000      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d063      	beq.n	8004f6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ea6:	4b4c      	ldr	r3, [pc, #304]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004eb2:	4b49      	ldr	r3, [pc, #292]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d11c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x18c>
 8004ebe:	4b46      	ldr	r3, [pc, #280]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d116      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eca:	4b43      	ldr	r3, [pc, #268]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x176>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e1c0      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4939      	ldr	r1, [pc, #228]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef6:	e03a      	b.n	8004f6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f00:	4b36      	ldr	r3, [pc, #216]	@ (8004fdc <HAL_RCC_OscConfig+0x270>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fe f987 	bl	8003218 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f0e:	f7fe f983 	bl	8003218 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e1a1      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f20:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4927      	ldr	r1, [pc, #156]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]
 8004f40:	e015      	b.n	8004f6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f42:	4b26      	ldr	r3, [pc, #152]	@ (8004fdc <HAL_RCC_OscConfig+0x270>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fe f966 	bl	8003218 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fe f962 	bl	8003218 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e180      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f62:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d03a      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d019      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f82:	4b17      	ldr	r3, [pc, #92]	@ (8004fe0 <HAL_RCC_OscConfig+0x274>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f88:	f7fe f946 	bl	8003218 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f90:	f7fe f942 	bl	8003218 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e160      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd8 <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fae:	2001      	movs	r0, #1
 8004fb0:	f000 face 	bl	8005550 <RCC_Delay>
 8004fb4:	e01c      	b.n	8004ff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <HAL_RCC_OscConfig+0x274>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbc:	f7fe f92c 	bl	8003218 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc2:	e00f      	b.n	8004fe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc4:	f7fe f928 	bl	8003218 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d908      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e146      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	42420000 	.word	0x42420000
 8004fe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	4b92      	ldr	r3, [pc, #584]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e9      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80a6 	beq.w	800514a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005002:	4b8b      	ldr	r3, [pc, #556]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10d      	bne.n	800502a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	4b88      	ldr	r3, [pc, #544]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	4a87      	ldr	r2, [pc, #540]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005018:	61d3      	str	r3, [r2, #28]
 800501a:	4b85      	ldr	r3, [pc, #532]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502a:	4b82      	ldr	r3, [pc, #520]	@ (8005234 <HAL_RCC_OscConfig+0x4c8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d118      	bne.n	8005068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005036:	4b7f      	ldr	r3, [pc, #508]	@ (8005234 <HAL_RCC_OscConfig+0x4c8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a7e      	ldr	r2, [pc, #504]	@ (8005234 <HAL_RCC_OscConfig+0x4c8>)
 800503c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005042:	f7fe f8e9 	bl	8003218 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504a:	f7fe f8e5 	bl	8003218 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b64      	cmp	r3, #100	@ 0x64
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e103      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	4b75      	ldr	r3, [pc, #468]	@ (8005234 <HAL_RCC_OscConfig+0x4c8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d106      	bne.n	800507e <HAL_RCC_OscConfig+0x312>
 8005070:	4b6f      	ldr	r3, [pc, #444]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	4a6e      	ldr	r2, [pc, #440]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	6213      	str	r3, [r2, #32]
 800507c:	e02d      	b.n	80050da <HAL_RCC_OscConfig+0x36e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x334>
 8005086:	4b6a      	ldr	r3, [pc, #424]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	4a69      	ldr	r2, [pc, #420]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	6213      	str	r3, [r2, #32]
 8005092:	4b67      	ldr	r3, [pc, #412]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	4a66      	ldr	r2, [pc, #408]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	6213      	str	r3, [r2, #32]
 800509e:	e01c      	b.n	80050da <HAL_RCC_OscConfig+0x36e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b05      	cmp	r3, #5
 80050a6:	d10c      	bne.n	80050c2 <HAL_RCC_OscConfig+0x356>
 80050a8:	4b61      	ldr	r3, [pc, #388]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	4a60      	ldr	r2, [pc, #384]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80050ae:	f043 0304 	orr.w	r3, r3, #4
 80050b2:	6213      	str	r3, [r2, #32]
 80050b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	6213      	str	r3, [r2, #32]
 80050c0:	e00b      	b.n	80050da <HAL_RCC_OscConfig+0x36e>
 80050c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	4a5a      	ldr	r2, [pc, #360]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	6213      	str	r3, [r2, #32]
 80050ce:	4b58      	ldr	r3, [pc, #352]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	4a57      	ldr	r2, [pc, #348]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80050d4:	f023 0304 	bic.w	r3, r3, #4
 80050d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d015      	beq.n	800510e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e2:	f7fe f899 	bl	8003218 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fe f895 	bl	8003218 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e0b1      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	4b4b      	ldr	r3, [pc, #300]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ee      	beq.n	80050ea <HAL_RCC_OscConfig+0x37e>
 800510c:	e014      	b.n	8005138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510e:	f7fe f883 	bl	8003218 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005114:	e00a      	b.n	800512c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005116:	f7fe f87f 	bl	8003218 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e09b      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512c:	4b40      	ldr	r3, [pc, #256]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ee      	bne.n	8005116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d105      	bne.n	800514a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800513e:	4b3c      	ldr	r3, [pc, #240]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	4a3b      	ldr	r2, [pc, #236]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005148:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8087 	beq.w	8005262 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005154:	4b36      	ldr	r3, [pc, #216]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	2b08      	cmp	r3, #8
 800515e:	d061      	beq.n	8005224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d146      	bne.n	80051f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005168:	4b33      	ldr	r3, [pc, #204]	@ (8005238 <HAL_RCC_OscConfig+0x4cc>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fe f853 	bl	8003218 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005176:	f7fe f84f 	bl	8003218 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e06d      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005188:	4b29      	ldr	r3, [pc, #164]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f0      	bne.n	8005176 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800519c:	d108      	bne.n	80051b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800519e:	4b24      	ldr	r3, [pc, #144]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	4921      	ldr	r1, [pc, #132]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a19      	ldr	r1, [r3, #32]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	430b      	orrs	r3, r1
 80051c2:	491b      	ldr	r1, [pc, #108]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005238 <HAL_RCC_OscConfig+0x4cc>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fe f823 	bl	8003218 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d6:	f7fe f81f 	bl	8003218 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e03d      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051e8:	4b11      	ldr	r3, [pc, #68]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <HAL_RCC_OscConfig+0x46a>
 80051f4:	e035      	b.n	8005262 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f6:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <HAL_RCC_OscConfig+0x4cc>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fc:	f7fe f80c 	bl	8003218 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005204:	f7fe f808 	bl	8003218 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e026      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005216:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <HAL_RCC_OscConfig+0x4c4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x498>
 8005222:	e01e      	b.n	8005262 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d107      	bne.n	800523c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e019      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
 8005230:	40021000 	.word	0x40021000
 8005234:	40007000 	.word	0x40007000
 8005238:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800523c:	4b0b      	ldr	r3, [pc, #44]	@ (800526c <HAL_RCC_OscConfig+0x500>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	429a      	cmp	r2, r3
 800524e:	d106      	bne.n	800525e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d001      	beq.n	8005262 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40021000 	.word	0x40021000

08005270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0d0      	b.n	8005426 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005284:	4b6a      	ldr	r3, [pc, #424]	@ (8005430 <HAL_RCC_ClockConfig+0x1c0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d910      	bls.n	80052b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005292:	4b67      	ldr	r3, [pc, #412]	@ (8005430 <HAL_RCC_ClockConfig+0x1c0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f023 0207 	bic.w	r2, r3, #7
 800529a:	4965      	ldr	r1, [pc, #404]	@ (8005430 <HAL_RCC_ClockConfig+0x1c0>)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	4313      	orrs	r3, r2
 80052a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a2:	4b63      	ldr	r3, [pc, #396]	@ (8005430 <HAL_RCC_ClockConfig+0x1c0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0b8      	b.n	8005426 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d020      	beq.n	8005302 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052cc:	4b59      	ldr	r3, [pc, #356]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4a58      	ldr	r2, [pc, #352]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80052d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e4:	4b53      	ldr	r3, [pc, #332]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a52      	ldr	r2, [pc, #328]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80052ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80052ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f0:	4b50      	ldr	r3, [pc, #320]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	494d      	ldr	r1, [pc, #308]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d040      	beq.n	8005390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005316:	4b47      	ldr	r3, [pc, #284]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d115      	bne.n	800534e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e07f      	b.n	8005426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532e:	4b41      	ldr	r3, [pc, #260]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e073      	b.n	8005426 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533e:	4b3d      	ldr	r3, [pc, #244]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e06b      	b.n	8005426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800534e:	4b39      	ldr	r3, [pc, #228]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f023 0203 	bic.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	4936      	ldr	r1, [pc, #216]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005360:	f7fd ff5a 	bl	8003218 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	e00a      	b.n	800537e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005368:	f7fd ff56 	bl	8003218 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005376:	4293      	cmp	r3, r2
 8005378:	d901      	bls.n	800537e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e053      	b.n	8005426 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	4b2d      	ldr	r3, [pc, #180]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 020c 	and.w	r2, r3, #12
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	429a      	cmp	r2, r3
 800538e:	d1eb      	bne.n	8005368 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005390:	4b27      	ldr	r3, [pc, #156]	@ (8005430 <HAL_RCC_ClockConfig+0x1c0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d210      	bcs.n	80053c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b24      	ldr	r3, [pc, #144]	@ (8005430 <HAL_RCC_ClockConfig+0x1c0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 0207 	bic.w	r2, r3, #7
 80053a6:	4922      	ldr	r1, [pc, #136]	@ (8005430 <HAL_RCC_ClockConfig+0x1c0>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b20      	ldr	r3, [pc, #128]	@ (8005430 <HAL_RCC_ClockConfig+0x1c0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e032      	b.n	8005426 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053cc:	4b19      	ldr	r3, [pc, #100]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4916      	ldr	r1, [pc, #88]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ea:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	490e      	ldr	r1, [pc, #56]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053fe:	f000 f821 	bl	8005444 <HAL_RCC_GetSysClockFreq>
 8005402:	4602      	mov	r2, r0
 8005404:	4b0b      	ldr	r3, [pc, #44]	@ (8005434 <HAL_RCC_ClockConfig+0x1c4>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	490a      	ldr	r1, [pc, #40]	@ (8005438 <HAL_RCC_ClockConfig+0x1c8>)
 8005410:	5ccb      	ldrb	r3, [r1, r3]
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	4a09      	ldr	r2, [pc, #36]	@ (800543c <HAL_RCC_ClockConfig+0x1cc>)
 8005418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800541a:	4b09      	ldr	r3, [pc, #36]	@ (8005440 <HAL_RCC_ClockConfig+0x1d0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7fd feb8 	bl	8003194 <HAL_InitTick>

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40022000 	.word	0x40022000
 8005434:	40021000 	.word	0x40021000
 8005438:	0800bba8 	.word	0x0800bba8
 800543c:	20000018 	.word	0x20000018
 8005440:	2000001c 	.word	0x2000001c

08005444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800545e:	4b1e      	ldr	r3, [pc, #120]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b04      	cmp	r3, #4
 800546c:	d002      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0x30>
 800546e:	2b08      	cmp	r3, #8
 8005470:	d003      	beq.n	800547a <HAL_RCC_GetSysClockFreq+0x36>
 8005472:	e027      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005474:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x98>)
 8005476:	613b      	str	r3, [r7, #16]
      break;
 8005478:	e027      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	0c9b      	lsrs	r3, r3, #18
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005484:	5cd3      	ldrb	r3, [r2, r3]
 8005486:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d010      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005492:	4b11      	ldr	r3, [pc, #68]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	0c5b      	lsrs	r3, r3, #17
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	4a11      	ldr	r2, [pc, #68]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800549e:	5cd3      	ldrb	r3, [r2, r3]
 80054a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a0d      	ldr	r2, [pc, #52]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x98>)
 80054a6:	fb03 f202 	mul.w	r2, r3, r2
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e004      	b.n	80054be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a0c      	ldr	r2, [pc, #48]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80054b8:	fb02 f303 	mul.w	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	613b      	str	r3, [r7, #16]
      break;
 80054c2:	e002      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4b05      	ldr	r3, [pc, #20]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x98>)
 80054c6:	613b      	str	r3, [r7, #16]
      break;
 80054c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ca:	693b      	ldr	r3, [r7, #16]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40021000 	.word	0x40021000
 80054dc:	007a1200 	.word	0x007a1200
 80054e0:	0800bbc0 	.word	0x0800bbc0
 80054e4:	0800bbd0 	.word	0x0800bbd0
 80054e8:	003d0900 	.word	0x003d0900

080054ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f0:	4b02      	ldr	r3, [pc, #8]	@ (80054fc <HAL_RCC_GetHCLKFreq+0x10>)
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr
 80054fc:	20000018 	.word	0x20000018

08005500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005504:	f7ff fff2 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8005508:	4602      	mov	r2, r0
 800550a:	4b05      	ldr	r3, [pc, #20]	@ (8005520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	4903      	ldr	r1, [pc, #12]	@ (8005524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005516:	5ccb      	ldrb	r3, [r1, r3]
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800551c:	4618      	mov	r0, r3
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021000 	.word	0x40021000
 8005524:	0800bbb8 	.word	0x0800bbb8

08005528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800552c:	f7ff ffde 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8005530:	4602      	mov	r2, r0
 8005532:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	0adb      	lsrs	r3, r3, #11
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	4903      	ldr	r1, [pc, #12]	@ (800554c <HAL_RCC_GetPCLK2Freq+0x24>)
 800553e:	5ccb      	ldrb	r3, [r1, r3]
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005544:	4618      	mov	r0, r3
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40021000 	.word	0x40021000
 800554c:	0800bbb8 	.word	0x0800bbb8

08005550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005558:	4b0a      	ldr	r3, [pc, #40]	@ (8005584 <RCC_Delay+0x34>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a0a      	ldr	r2, [pc, #40]	@ (8005588 <RCC_Delay+0x38>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	0a5b      	lsrs	r3, r3, #9
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800556c:	bf00      	nop
  }
  while (Delay --);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1e5a      	subs	r2, r3, #1
 8005572:	60fa      	str	r2, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f9      	bne.n	800556c <RCC_Delay+0x1c>
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	20000018 	.word	0x20000018
 8005588:	10624dd3 	.word	0x10624dd3

0800558c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d07d      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055a8:	2300      	movs	r3, #0
 80055aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ac:	4b4f      	ldr	r3, [pc, #316]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10d      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b8:	4b4c      	ldr	r3, [pc, #304]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	4a4b      	ldr	r2, [pc, #300]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	61d3      	str	r3, [r2, #28]
 80055c4:	4b49      	ldr	r3, [pc, #292]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d0:	2301      	movs	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d4:	4b46      	ldr	r3, [pc, #280]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d118      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e0:	4b43      	ldr	r3, [pc, #268]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a42      	ldr	r2, [pc, #264]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ec:	f7fd fe14 	bl	8003218 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f2:	e008      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f4:	f7fd fe10 	bl	8003218 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	@ 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e06d      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005606:	4b3a      	ldr	r3, [pc, #232]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005612:	4b36      	ldr	r3, [pc, #216]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02e      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	429a      	cmp	r2, r3
 800562e:	d027      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005630:	4b2e      	ldr	r3, [pc, #184]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005638:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800563a:	4b2e      	ldr	r3, [pc, #184]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800563c:	2201      	movs	r2, #1
 800563e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005640:	4b2c      	ldr	r3, [pc, #176]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005646:	4a29      	ldr	r2, [pc, #164]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d014      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005656:	f7fd fddf 	bl	8003218 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800565c:	e00a      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565e:	f7fd fddb 	bl	8003218 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e036      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005674:	4b1d      	ldr	r3, [pc, #116]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0ee      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005680:	4b1a      	ldr	r3, [pc, #104]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4917      	ldr	r1, [pc, #92]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	4313      	orrs	r3, r2
 8005690:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d105      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005698:	4b14      	ldr	r3, [pc, #80]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	4a13      	ldr	r2, [pc, #76]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b0:	4b0e      	ldr	r3, [pc, #56]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	490b      	ldr	r1, [pc, #44]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ce:	4b07      	ldr	r3, [pc, #28]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	4904      	ldr	r1, [pc, #16]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40021000 	.word	0x40021000
 80056f0:	40007000 	.word	0x40007000
 80056f4:	42420440 	.word	0x42420440

080056f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e041      	b.n	800578e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fd f944 	bl	80029ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f000 fa70 	bl	8005c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d001      	beq.n	80057b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e032      	b.n	8005816 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a18      	ldr	r2, [pc, #96]	@ (8005820 <HAL_TIM_Base_Start+0x88>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00e      	beq.n	80057e0 <HAL_TIM_Base_Start+0x48>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ca:	d009      	beq.n	80057e0 <HAL_TIM_Base_Start+0x48>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a14      	ldr	r2, [pc, #80]	@ (8005824 <HAL_TIM_Base_Start+0x8c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <HAL_TIM_Base_Start+0x48>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a13      	ldr	r2, [pc, #76]	@ (8005828 <HAL_TIM_Base_Start+0x90>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d111      	bne.n	8005804 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b06      	cmp	r3, #6
 80057f0:	d010      	beq.n	8005814 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005802:	e007      	b.n	8005814 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800

0800582c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e093      	b.n	8005968 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7fd f869 	bl	800292c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005870:	f023 0307 	bic.w	r3, r3, #7
 8005874:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f000 f9cb 	bl	8005c1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	4313      	orrs	r3, r2
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80058cc:	f023 030c 	bic.w	r3, r3, #12
 80058d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	4313      	orrs	r3, r2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	011a      	lsls	r2, r3, #4
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	031b      	lsls	r3, r3, #12
 80058fc:	4313      	orrs	r3, r2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800590a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	4313      	orrs	r3, r2
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005980:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005988:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005990:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005998:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d110      	bne.n	80059c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d102      	bne.n	80059ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059a6:	7b7b      	ldrb	r3, [r7, #13]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d001      	beq.n	80059b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e069      	b.n	8005a84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c0:	e031      	b.n	8005a26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d110      	bne.n	80059ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d102      	bne.n	80059d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059ce:	7b3b      	ldrb	r3, [r7, #12]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d001      	beq.n	80059d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e055      	b.n	8005a84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059e8:	e01d      	b.n	8005a26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d108      	bne.n	8005a02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059f0:	7bbb      	ldrb	r3, [r7, #14]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d105      	bne.n	8005a02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059f6:	7b7b      	ldrb	r3, [r7, #13]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d102      	bne.n	8005a02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059fc:	7b3b      	ldrb	r3, [r7, #12]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d001      	beq.n	8005a06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e03e      	b.n	8005a84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_TIM_Encoder_Start+0xc4>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d008      	beq.n	8005a44 <HAL_TIM_Encoder_Start+0xd4>
 8005a32:	e00f      	b.n	8005a54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 f9e5 	bl	8005e0c <TIM_CCxChannelCmd>
      break;
 8005a42:	e016      	b.n	8005a72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	2104      	movs	r1, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f9dd 	bl	8005e0c <TIM_CCxChannelCmd>
      break;
 8005a52:	e00e      	b.n	8005a72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 f9d5 	bl	8005e0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2201      	movs	r2, #1
 8005a68:	2104      	movs	r1, #4
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 f9ce 	bl	8005e0c <TIM_CCxChannelCmd>
      break;
 8005a70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0201 	orr.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e0b4      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x186>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ae0:	d03e      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0xd4>
 8005ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ae6:	f200 8087 	bhi.w	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aee:	f000 8086 	beq.w	8005bfe <HAL_TIM_ConfigClockSource+0x172>
 8005af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af6:	d87f      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b70      	cmp	r3, #112	@ 0x70
 8005afa:	d01a      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0xa6>
 8005afc:	2b70      	cmp	r3, #112	@ 0x70
 8005afe:	d87b      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b60      	cmp	r3, #96	@ 0x60
 8005b02:	d050      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8005b04:	2b60      	cmp	r3, #96	@ 0x60
 8005b06:	d877      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b50      	cmp	r3, #80	@ 0x50
 8005b0a:	d03c      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0xfa>
 8005b0c:	2b50      	cmp	r3, #80	@ 0x50
 8005b0e:	d873      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b40      	cmp	r3, #64	@ 0x40
 8005b12:	d058      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b14:	2b40      	cmp	r3, #64	@ 0x40
 8005b16:	d86f      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b30      	cmp	r3, #48	@ 0x30
 8005b1a:	d064      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b1c:	2b30      	cmp	r3, #48	@ 0x30
 8005b1e:	d86b      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d060      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d867      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d05c      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d05a      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b30:	e062      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b42:	f000 f944 	bl	8005dce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	609a      	str	r2, [r3, #8]
      break;
 8005b5e:	e04f      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b70:	f000 f92d 	bl	8005dce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b82:	609a      	str	r2, [r3, #8]
      break;
 8005b84:	e03c      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	461a      	mov	r2, r3
 8005b94:	f000 f8a4 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2150      	movs	r1, #80	@ 0x50
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f8fb 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005ba4:	e02c      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f000 f8c2 	bl	8005d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2160      	movs	r1, #96	@ 0x60
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f8eb 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005bc4:	e01c      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 f884 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2140      	movs	r1, #64	@ 0x40
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f8db 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005be4:	e00c      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f000 f8d2 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005bf6:	e003      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005bfc:	e000      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a29      	ldr	r2, [pc, #164]	@ (8005cd4 <TIM_Base_SetConfig+0xb8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <TIM_Base_SetConfig+0x30>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3a:	d007      	beq.n	8005c4c <TIM_Base_SetConfig+0x30>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a26      	ldr	r2, [pc, #152]	@ (8005cd8 <TIM_Base_SetConfig+0xbc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_Base_SetConfig+0x30>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a25      	ldr	r2, [pc, #148]	@ (8005cdc <TIM_Base_SetConfig+0xc0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d108      	bne.n	8005c5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd4 <TIM_Base_SetConfig+0xb8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00b      	beq.n	8005c7e <TIM_Base_SetConfig+0x62>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6c:	d007      	beq.n	8005c7e <TIM_Base_SetConfig+0x62>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a19      	ldr	r2, [pc, #100]	@ (8005cd8 <TIM_Base_SetConfig+0xbc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_Base_SetConfig+0x62>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a18      	ldr	r2, [pc, #96]	@ (8005cdc <TIM_Base_SetConfig+0xc0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d108      	bne.n	8005c90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a07      	ldr	r2, [pc, #28]	@ (8005cd4 <TIM_Base_SetConfig+0xb8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d103      	bne.n	8005cc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	615a      	str	r2, [r3, #20]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800

08005ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0201 	bic.w	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f023 030a 	bic.w	r3, r3, #10
 8005d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f023 0210 	bic.w	r2, r3, #16
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	031b      	lsls	r3, r3, #12
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f043 0307 	orr.w	r3, r3, #7
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr

08005dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b087      	sub	sp, #28
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	021a      	lsls	r2, r3, #8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	609a      	str	r2, [r3, #8]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr

08005e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2201      	movs	r2, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	401a      	ands	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a1a      	ldr	r2, [r3, #32]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f003 031f 	and.w	r3, r3, #31
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	fa01 f303 	lsl.w	r3, r1, r3
 8005e44:	431a      	orrs	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e046      	b.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a16      	ldr	r2, [pc, #88]	@ (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00e      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb8:	d009      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a12      	ldr	r2, [pc, #72]	@ (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a10      	ldr	r2, [pc, #64]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800

08005f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e042      	b.n	8005fa8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fc fd54 	bl	80029e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2224      	movs	r2, #36	@ 0x24
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fc7f 	bl	8006858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695a      	ldr	r2, [r3, #20]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10f      	bne.n	8006016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <HAL_UART_IRQHandler+0x66>
 8006002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb63 	bl	80066da <UART_Receive_IT>
      return;
 8006014:	e25b      	b.n	80064ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80de 	beq.w	80061dc <HAL_UART_IRQHandler+0x22c>
 8006020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800602c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006030:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80d1 	beq.w	80061dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <HAL_UART_IRQHandler+0xae>
 8006046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800604a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800605e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00b      	beq.n	8006082 <HAL_UART_IRQHandler+0xd2>
 800606a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	f043 0202 	orr.w	r2, r3, #2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <HAL_UART_IRQHandler+0xf6>
 800608e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d005      	beq.n	80060a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609e:	f043 0204 	orr.w	r2, r3, #4
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d011      	beq.n	80060d6 <HAL_UART_IRQHandler+0x126>
 80060b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ce:	f043 0208 	orr.w	r2, r3, #8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 81f2 	beq.w	80064c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_UART_IRQHandler+0x14e>
 80060ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f0:	f003 0320 	and.w	r3, r3, #32
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 faee 	bl	80066da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <HAL_UART_IRQHandler+0x17a>
 8006122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d04f      	beq.n	80061ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f9f8 	bl	8006520 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d041      	beq.n	80061c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3314      	adds	r3, #20
 8006144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800615c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3314      	adds	r3, #20
 8006166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800616a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800616e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1d9      	bne.n	800613e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d013      	beq.n	80061ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006196:	4a7e      	ldr	r2, [pc, #504]	@ (8006390 <HAL_UART_IRQHandler+0x3e0>)
 8006198:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fd fcd6 	bl	8003b50 <HAL_DMA_Abort_IT>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b8:	e00e      	b.n	80061d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f99c 	bl	80064f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c0:	e00a      	b.n	80061d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f998 	bl	80064f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c8:	e006      	b.n	80061d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f994 	bl	80064f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80061d6:	e175      	b.n	80064c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	bf00      	nop
    return;
 80061da:	e173      	b.n	80064c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f040 814f 	bne.w	8006484 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 8148 	beq.w	8006484 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8141 	beq.w	8006484 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80b6 	beq.w	8006394 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006234:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8145 	beq.w	80064c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006246:	429a      	cmp	r2, r3
 8006248:	f080 813e 	bcs.w	80064c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006252:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	2b20      	cmp	r3, #32
 800625c:	f000 8088 	beq.w	8006370 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	330c      	adds	r3, #12
 8006266:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006276:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800627a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800627e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800628c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006290:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006298:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1d9      	bne.n	8006260 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3314      	adds	r3, #20
 80062b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80062d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80062d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e1      	bne.n	80062ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3314      	adds	r3, #20
 8006308:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800630c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800630e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006312:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800631a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e3      	bne.n	80062e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	330c      	adds	r3, #12
 8006334:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800633e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006340:	f023 0310 	bic.w	r3, r3, #16
 8006344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	330c      	adds	r3, #12
 800634e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006352:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006354:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006358:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e3      	bne.n	800632e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd fbb5 	bl	8003ada <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800637e:	b29b      	uxth	r3, r3
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	b29b      	uxth	r3, r3
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8bf 	bl	800650a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800638c:	e09c      	b.n	80064c8 <HAL_UART_IRQHandler+0x518>
 800638e:	bf00      	nop
 8006390:	080065e5 	.word	0x080065e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800639c:	b29b      	uxth	r3, r3
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 808e 	beq.w	80064cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80063b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8089 	beq.w	80064cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	330c      	adds	r3, #12
 80063c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80063de:	647a      	str	r2, [r7, #68]	@ 0x44
 80063e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e3      	bne.n	80063ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3314      	adds	r3, #20
 80063f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	623b      	str	r3, [r7, #32]
   return(result);
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006416:	633a      	str	r2, [r7, #48]	@ 0x30
 8006418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800641c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e3      	bne.n	80063f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	60fb      	str	r3, [r7, #12]
   return(result);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0310 	bic.w	r3, r3, #16
 800644e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800645c:	61fa      	str	r2, [r7, #28]
 800645e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	69b9      	ldr	r1, [r7, #24]
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	617b      	str	r3, [r7, #20]
   return(result);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e3      	bne.n	8006438 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f844 	bl	800650a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006482:	e023      	b.n	80064cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <HAL_UART_IRQHandler+0x4f4>
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f8b5 	bl	800660c <UART_Transmit_IT>
    return;
 80064a2:	e014      	b.n	80064ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00e      	beq.n	80064ce <HAL_UART_IRQHandler+0x51e>
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8f4 	bl	80066aa <UART_EndTransmit_IT>
    return;
 80064c2:	e004      	b.n	80064ce <HAL_UART_IRQHandler+0x51e>
    return;
 80064c4:	bf00      	nop
 80064c6:	e002      	b.n	80064ce <HAL_UART_IRQHandler+0x51e>
      return;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <HAL_UART_IRQHandler+0x51e>
      return;
 80064cc:	bf00      	nop
  }
}
 80064ce:	37e8      	adds	r7, #232	@ 0xe8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr

080064e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr

080064f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr

0800650a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b095      	sub	sp, #84	@ 0x54
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006532:	e853 3f00 	ldrex	r3, [r3]
 8006536:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800653e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006548:	643a      	str	r2, [r7, #64]	@ 0x40
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800654e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006550:	e841 2300 	strex	r3, r2, [r1]
 8006554:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e5      	bne.n	8006528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3314      	adds	r3, #20
 8006562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	61fb      	str	r3, [r7, #28]
   return(result);
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f023 0301 	bic.w	r3, r3, #1
 8006572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3314      	adds	r3, #20
 800657a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800657c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800657e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e5      	bne.n	800655c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006594:	2b01      	cmp	r3, #1
 8006596:	d119      	bne.n	80065cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f023 0310 	bic.w	r3, r3, #16
 80065ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065b8:	61ba      	str	r2, [r7, #24]
 80065ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	6979      	ldr	r1, [r7, #20]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	613b      	str	r3, [r7, #16]
   return(result);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e5      	bne.n	8006598 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80065da:	bf00      	nop
 80065dc:	3754      	adds	r7, #84	@ 0x54
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr

080065e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff ff7a 	bl	80064f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b21      	cmp	r3, #33	@ 0x21
 800661e:	d13e      	bne.n	800669e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006628:	d114      	bne.n	8006654 <UART_Transmit_IT+0x48>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d110      	bne.n	8006654 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006646:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	1c9a      	adds	r2, r3, #2
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	621a      	str	r2, [r3, #32]
 8006652:	e008      	b.n	8006666 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	1c59      	adds	r1, r3, #1
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6211      	str	r1, [r2, #32]
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29b      	uxth	r3, r3
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	4619      	mov	r1, r3
 8006674:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10f      	bne.n	800669a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006688:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006698:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	e000      	b.n	80066a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800669e:	2302      	movs	r3, #2
  }
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff ff02 	bl	80064d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b08c      	sub	sp, #48	@ 0x30
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b22      	cmp	r3, #34	@ 0x22
 80066ec:	f040 80ae 	bne.w	800684c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066f8:	d117      	bne.n	800672a <UART_Receive_IT+0x50>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d113      	bne.n	800672a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006718:	b29a      	uxth	r2, r3
 800671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006722:	1c9a      	adds	r2, r3, #2
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	629a      	str	r2, [r3, #40]	@ 0x28
 8006728:	e026      	b.n	8006778 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800673c:	d007      	beq.n	800674e <UART_Receive_IT+0x74>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <UART_Receive_IT+0x82>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e008      	b.n	800676e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006768:	b2da      	uxtb	r2, r3
 800676a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29b      	uxth	r3, r3
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	4619      	mov	r1, r3
 8006786:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006788:	2b00      	cmp	r3, #0
 800678a:	d15d      	bne.n	8006848 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0220 	bic.w	r2, r2, #32
 800679a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695a      	ldr	r2, [r3, #20]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0201 	bic.w	r2, r2, #1
 80067ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d135      	bne.n	800683e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	330c      	adds	r3, #12
 80067de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	613b      	str	r3, [r7, #16]
   return(result);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f023 0310 	bic.w	r3, r3, #16
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	330c      	adds	r3, #12
 80067f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f8:	623a      	str	r2, [r7, #32]
 80067fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	69f9      	ldr	r1, [r7, #28]
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	61bb      	str	r3, [r7, #24]
   return(result);
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b10      	cmp	r3, #16
 8006818:	d10a      	bne.n	8006830 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff fe67 	bl	800650a <HAL_UARTEx_RxEventCallback>
 800683c:	e002      	b.n	8006844 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff fe51 	bl	80064e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e002      	b.n	800684e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
  }
}
 800684e:	4618      	mov	r0, r3
 8006850:	3730      	adds	r7, #48	@ 0x30
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006892:	f023 030c 	bic.w	r3, r3, #12
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6812      	ldr	r2, [r2, #0]
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	430b      	orrs	r3, r1
 800689e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a2c      	ldr	r2, [pc, #176]	@ (800696c <UART_SetConfig+0x114>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d103      	bne.n	80068c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068c0:	f7fe fe32 	bl	8005528 <HAL_RCC_GetPCLK2Freq>
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	e002      	b.n	80068ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068c8:	f7fe fe1a 	bl	8005500 <HAL_RCC_GetPCLK1Freq>
 80068cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009a      	lsls	r2, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	4a22      	ldr	r2, [pc, #136]	@ (8006970 <UART_SetConfig+0x118>)
 80068e6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	0119      	lsls	r1, r3, #4
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009a      	lsls	r2, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	fbb2 f2f3 	udiv	r2, r2, r3
 8006904:	4b1a      	ldr	r3, [pc, #104]	@ (8006970 <UART_SetConfig+0x118>)
 8006906:	fba3 0302 	umull	r0, r3, r3, r2
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	2064      	movs	r0, #100	@ 0x64
 800690e:	fb00 f303 	mul.w	r3, r0, r3
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	3332      	adds	r3, #50	@ 0x32
 8006918:	4a15      	ldr	r2, [pc, #84]	@ (8006970 <UART_SetConfig+0x118>)
 800691a:	fba2 2303 	umull	r2, r3, r2, r3
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006924:	4419      	add	r1, r3
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009a      	lsls	r2, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	fbb2 f2f3 	udiv	r2, r2, r3
 800693c:	4b0c      	ldr	r3, [pc, #48]	@ (8006970 <UART_SetConfig+0x118>)
 800693e:	fba3 0302 	umull	r0, r3, r3, r2
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	2064      	movs	r0, #100	@ 0x64
 8006946:	fb00 f303 	mul.w	r3, r0, r3
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	3332      	adds	r3, #50	@ 0x32
 8006950:	4a07      	ldr	r2, [pc, #28]	@ (8006970 <UART_SetConfig+0x118>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	f003 020f 	and.w	r2, r3, #15
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	440a      	add	r2, r1
 8006962:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40013800 	.word	0x40013800
 8006970:	51eb851f 	.word	0x51eb851f

08006974 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006974:	b084      	sub	sp, #16
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	f107 0014 	add.w	r0, r7, #20
 8006982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	b004      	add	sp, #16
 8006992:	4770      	bx	lr

08006994 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800699c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80069a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	43db      	mvns	r3, r3
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	4013      	ands	r3, r2
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr

080069c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr

080069e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069e0:	b084      	sub	sp, #16
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	f107 0014 	add.w	r0, r7, #20
 80069ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	b004      	add	sp, #16
 8006a1e:	4770      	bx	lr

08006a20 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <atoi>:
 8006a34:	220a      	movs	r2, #10
 8006a36:	2100      	movs	r1, #0
 8006a38:	f000 b87a 	b.w	8006b30 <strtol>

08006a3c <_strtol_l.constprop.0>:
 8006a3c:	2b24      	cmp	r3, #36	@ 0x24
 8006a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a42:	4686      	mov	lr, r0
 8006a44:	4690      	mov	r8, r2
 8006a46:	d801      	bhi.n	8006a4c <_strtol_l.constprop.0+0x10>
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d106      	bne.n	8006a5a <_strtol_l.constprop.0+0x1e>
 8006a4c:	f000 fe4e 	bl	80076ec <__errno>
 8006a50:	2316      	movs	r3, #22
 8006a52:	6003      	str	r3, [r0, #0]
 8006a54:	2000      	movs	r0, #0
 8006a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5a:	460d      	mov	r5, r1
 8006a5c:	4833      	ldr	r0, [pc, #204]	@ (8006b2c <_strtol_l.constprop.0+0xf0>)
 8006a5e:	462a      	mov	r2, r5
 8006a60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a64:	5d06      	ldrb	r6, [r0, r4]
 8006a66:	f016 0608 	ands.w	r6, r6, #8
 8006a6a:	d1f8      	bne.n	8006a5e <_strtol_l.constprop.0+0x22>
 8006a6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a6e:	d12d      	bne.n	8006acc <_strtol_l.constprop.0+0x90>
 8006a70:	2601      	movs	r6, #1
 8006a72:	782c      	ldrb	r4, [r5, #0]
 8006a74:	1c95      	adds	r5, r2, #2
 8006a76:	f033 0210 	bics.w	r2, r3, #16
 8006a7a:	d109      	bne.n	8006a90 <_strtol_l.constprop.0+0x54>
 8006a7c:	2c30      	cmp	r4, #48	@ 0x30
 8006a7e:	d12a      	bne.n	8006ad6 <_strtol_l.constprop.0+0x9a>
 8006a80:	782a      	ldrb	r2, [r5, #0]
 8006a82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a86:	2a58      	cmp	r2, #88	@ 0x58
 8006a88:	d125      	bne.n	8006ad6 <_strtol_l.constprop.0+0x9a>
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	786c      	ldrb	r4, [r5, #1]
 8006a8e:	3502      	adds	r5, #2
 8006a90:	2200      	movs	r2, #0
 8006a92:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006a96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a9a:	fbbc f9f3 	udiv	r9, ip, r3
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	fb03 ca19 	mls	sl, r3, r9, ip
 8006aa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006aa8:	2f09      	cmp	r7, #9
 8006aaa:	d81b      	bhi.n	8006ae4 <_strtol_l.constprop.0+0xa8>
 8006aac:	463c      	mov	r4, r7
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	dd27      	ble.n	8006b02 <_strtol_l.constprop.0+0xc6>
 8006ab2:	1c57      	adds	r7, r2, #1
 8006ab4:	d007      	beq.n	8006ac6 <_strtol_l.constprop.0+0x8a>
 8006ab6:	4581      	cmp	r9, r0
 8006ab8:	d320      	bcc.n	8006afc <_strtol_l.constprop.0+0xc0>
 8006aba:	d101      	bne.n	8006ac0 <_strtol_l.constprop.0+0x84>
 8006abc:	45a2      	cmp	sl, r4
 8006abe:	db1d      	blt.n	8006afc <_strtol_l.constprop.0+0xc0>
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	fb00 4003 	mla	r0, r0, r3, r4
 8006ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006aca:	e7eb      	b.n	8006aa4 <_strtol_l.constprop.0+0x68>
 8006acc:	2c2b      	cmp	r4, #43	@ 0x2b
 8006ace:	bf04      	itt	eq
 8006ad0:	782c      	ldrbeq	r4, [r5, #0]
 8006ad2:	1c95      	addeq	r5, r2, #2
 8006ad4:	e7cf      	b.n	8006a76 <_strtol_l.constprop.0+0x3a>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1da      	bne.n	8006a90 <_strtol_l.constprop.0+0x54>
 8006ada:	2c30      	cmp	r4, #48	@ 0x30
 8006adc:	bf0c      	ite	eq
 8006ade:	2308      	moveq	r3, #8
 8006ae0:	230a      	movne	r3, #10
 8006ae2:	e7d5      	b.n	8006a90 <_strtol_l.constprop.0+0x54>
 8006ae4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006ae8:	2f19      	cmp	r7, #25
 8006aea:	d801      	bhi.n	8006af0 <_strtol_l.constprop.0+0xb4>
 8006aec:	3c37      	subs	r4, #55	@ 0x37
 8006aee:	e7de      	b.n	8006aae <_strtol_l.constprop.0+0x72>
 8006af0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006af4:	2f19      	cmp	r7, #25
 8006af6:	d804      	bhi.n	8006b02 <_strtol_l.constprop.0+0xc6>
 8006af8:	3c57      	subs	r4, #87	@ 0x57
 8006afa:	e7d8      	b.n	8006aae <_strtol_l.constprop.0+0x72>
 8006afc:	f04f 32ff 	mov.w	r2, #4294967295
 8006b00:	e7e1      	b.n	8006ac6 <_strtol_l.constprop.0+0x8a>
 8006b02:	1c53      	adds	r3, r2, #1
 8006b04:	d108      	bne.n	8006b18 <_strtol_l.constprop.0+0xdc>
 8006b06:	2322      	movs	r3, #34	@ 0x22
 8006b08:	4660      	mov	r0, ip
 8006b0a:	f8ce 3000 	str.w	r3, [lr]
 8006b0e:	f1b8 0f00 	cmp.w	r8, #0
 8006b12:	d0a0      	beq.n	8006a56 <_strtol_l.constprop.0+0x1a>
 8006b14:	1e69      	subs	r1, r5, #1
 8006b16:	e006      	b.n	8006b26 <_strtol_l.constprop.0+0xea>
 8006b18:	b106      	cbz	r6, 8006b1c <_strtol_l.constprop.0+0xe0>
 8006b1a:	4240      	negs	r0, r0
 8006b1c:	f1b8 0f00 	cmp.w	r8, #0
 8006b20:	d099      	beq.n	8006a56 <_strtol_l.constprop.0+0x1a>
 8006b22:	2a00      	cmp	r2, #0
 8006b24:	d1f6      	bne.n	8006b14 <_strtol_l.constprop.0+0xd8>
 8006b26:	f8c8 1000 	str.w	r1, [r8]
 8006b2a:	e794      	b.n	8006a56 <_strtol_l.constprop.0+0x1a>
 8006b2c:	0800bbd3 	.word	0x0800bbd3

08006b30 <strtol>:
 8006b30:	4613      	mov	r3, r2
 8006b32:	460a      	mov	r2, r1
 8006b34:	4601      	mov	r1, r0
 8006b36:	4802      	ldr	r0, [pc, #8]	@ (8006b40 <strtol+0x10>)
 8006b38:	6800      	ldr	r0, [r0, #0]
 8006b3a:	f7ff bf7f 	b.w	8006a3c <_strtol_l.constprop.0>
 8006b3e:	bf00      	nop
 8006b40:	20000030 	.word	0x20000030

08006b44 <__cvt>:
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4a:	461d      	mov	r5, r3
 8006b4c:	bfbb      	ittet	lt
 8006b4e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006b52:	461d      	movlt	r5, r3
 8006b54:	2300      	movge	r3, #0
 8006b56:	232d      	movlt	r3, #45	@ 0x2d
 8006b58:	b088      	sub	sp, #32
 8006b5a:	4614      	mov	r4, r2
 8006b5c:	bfb8      	it	lt
 8006b5e:	4614      	movlt	r4, r2
 8006b60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b62:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006b64:	7013      	strb	r3, [r2, #0]
 8006b66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b68:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006b6c:	f023 0820 	bic.w	r8, r3, #32
 8006b70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b74:	d005      	beq.n	8006b82 <__cvt+0x3e>
 8006b76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b7a:	d100      	bne.n	8006b7e <__cvt+0x3a>
 8006b7c:	3601      	adds	r6, #1
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e000      	b.n	8006b84 <__cvt+0x40>
 8006b82:	2303      	movs	r3, #3
 8006b84:	aa07      	add	r2, sp, #28
 8006b86:	9204      	str	r2, [sp, #16]
 8006b88:	aa06      	add	r2, sp, #24
 8006b8a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b8e:	e9cd 3600 	strd	r3, r6, [sp]
 8006b92:	4622      	mov	r2, r4
 8006b94:	462b      	mov	r3, r5
 8006b96:	f000 fe6f 	bl	8007878 <_dtoa_r>
 8006b9a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b9e:	4607      	mov	r7, r0
 8006ba0:	d119      	bne.n	8006bd6 <__cvt+0x92>
 8006ba2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ba4:	07db      	lsls	r3, r3, #31
 8006ba6:	d50e      	bpl.n	8006bc6 <__cvt+0x82>
 8006ba8:	eb00 0906 	add.w	r9, r0, r6
 8006bac:	2200      	movs	r2, #0
 8006bae:	2300      	movs	r3, #0
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f7f9 fef8 	bl	80009a8 <__aeabi_dcmpeq>
 8006bb8:	b108      	cbz	r0, 8006bbe <__cvt+0x7a>
 8006bba:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bbe:	2230      	movs	r2, #48	@ 0x30
 8006bc0:	9b07      	ldr	r3, [sp, #28]
 8006bc2:	454b      	cmp	r3, r9
 8006bc4:	d31e      	bcc.n	8006c04 <__cvt+0xc0>
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	9b07      	ldr	r3, [sp, #28]
 8006bca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006bcc:	1bdb      	subs	r3, r3, r7
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	b008      	add	sp, #32
 8006bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bda:	eb00 0906 	add.w	r9, r0, r6
 8006bde:	d1e5      	bne.n	8006bac <__cvt+0x68>
 8006be0:	7803      	ldrb	r3, [r0, #0]
 8006be2:	2b30      	cmp	r3, #48	@ 0x30
 8006be4:	d10a      	bne.n	8006bfc <__cvt+0xb8>
 8006be6:	2200      	movs	r2, #0
 8006be8:	2300      	movs	r3, #0
 8006bea:	4620      	mov	r0, r4
 8006bec:	4629      	mov	r1, r5
 8006bee:	f7f9 fedb 	bl	80009a8 <__aeabi_dcmpeq>
 8006bf2:	b918      	cbnz	r0, 8006bfc <__cvt+0xb8>
 8006bf4:	f1c6 0601 	rsb	r6, r6, #1
 8006bf8:	f8ca 6000 	str.w	r6, [sl]
 8006bfc:	f8da 3000 	ldr.w	r3, [sl]
 8006c00:	4499      	add	r9, r3
 8006c02:	e7d3      	b.n	8006bac <__cvt+0x68>
 8006c04:	1c59      	adds	r1, r3, #1
 8006c06:	9107      	str	r1, [sp, #28]
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e7d9      	b.n	8006bc0 <__cvt+0x7c>

08006c0c <__exponent>:
 8006c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	bfb6      	itet	lt
 8006c12:	232d      	movlt	r3, #45	@ 0x2d
 8006c14:	232b      	movge	r3, #43	@ 0x2b
 8006c16:	4249      	neglt	r1, r1
 8006c18:	2909      	cmp	r1, #9
 8006c1a:	7002      	strb	r2, [r0, #0]
 8006c1c:	7043      	strb	r3, [r0, #1]
 8006c1e:	dd29      	ble.n	8006c74 <__exponent+0x68>
 8006c20:	f10d 0307 	add.w	r3, sp, #7
 8006c24:	461d      	mov	r5, r3
 8006c26:	270a      	movs	r7, #10
 8006c28:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	fb07 1416 	mls	r4, r7, r6, r1
 8006c32:	3430      	adds	r4, #48	@ 0x30
 8006c34:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c38:	460c      	mov	r4, r1
 8006c3a:	2c63      	cmp	r4, #99	@ 0x63
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c42:	dcf1      	bgt.n	8006c28 <__exponent+0x1c>
 8006c44:	3130      	adds	r1, #48	@ 0x30
 8006c46:	1e94      	subs	r4, r2, #2
 8006c48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c4c:	4623      	mov	r3, r4
 8006c4e:	1c41      	adds	r1, r0, #1
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	d30a      	bcc.n	8006c6a <__exponent+0x5e>
 8006c54:	f10d 0309 	add.w	r3, sp, #9
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	42ac      	cmp	r4, r5
 8006c5c:	bf88      	it	hi
 8006c5e:	2300      	movhi	r3, #0
 8006c60:	3302      	adds	r3, #2
 8006c62:	4403      	add	r3, r0
 8006c64:	1a18      	subs	r0, r3, r0
 8006c66:	b003      	add	sp, #12
 8006c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c6e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c72:	e7ed      	b.n	8006c50 <__exponent+0x44>
 8006c74:	2330      	movs	r3, #48	@ 0x30
 8006c76:	3130      	adds	r1, #48	@ 0x30
 8006c78:	7083      	strb	r3, [r0, #2]
 8006c7a:	70c1      	strb	r1, [r0, #3]
 8006c7c:	1d03      	adds	r3, r0, #4
 8006c7e:	e7f1      	b.n	8006c64 <__exponent+0x58>

08006c80 <_printf_float>:
 8006c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	b091      	sub	sp, #68	@ 0x44
 8006c86:	460c      	mov	r4, r1
 8006c88:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	461f      	mov	r7, r3
 8006c90:	4605      	mov	r5, r0
 8006c92:	f000 fce1 	bl	8007658 <_localeconv_r>
 8006c96:	6803      	ldr	r3, [r0, #0]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	9308      	str	r3, [sp, #32]
 8006c9c:	f7f9 fa58 	bl	8000150 <strlen>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006caa:	3307      	adds	r3, #7
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	f103 0208 	add.w	r2, r3, #8
 8006cb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006cb8:	f8d4 b000 	ldr.w	fp, [r4]
 8006cbc:	f8c8 2000 	str.w	r2, [r8]
 8006cc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006cc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006cce:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006cd6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006cda:	4b9c      	ldr	r3, [pc, #624]	@ (8006f4c <_printf_float+0x2cc>)
 8006cdc:	f7f9 fe96 	bl	8000a0c <__aeabi_dcmpun>
 8006ce0:	bb70      	cbnz	r0, 8006d40 <_printf_float+0xc0>
 8006ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cea:	4b98      	ldr	r3, [pc, #608]	@ (8006f4c <_printf_float+0x2cc>)
 8006cec:	f7f9 fe70 	bl	80009d0 <__aeabi_dcmple>
 8006cf0:	bb30      	cbnz	r0, 8006d40 <_printf_float+0xc0>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	f7f9 fe5f 	bl	80009bc <__aeabi_dcmplt>
 8006cfe:	b110      	cbz	r0, 8006d06 <_printf_float+0x86>
 8006d00:	232d      	movs	r3, #45	@ 0x2d
 8006d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d06:	4a92      	ldr	r2, [pc, #584]	@ (8006f50 <_printf_float+0x2d0>)
 8006d08:	4b92      	ldr	r3, [pc, #584]	@ (8006f54 <_printf_float+0x2d4>)
 8006d0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d0e:	bf94      	ite	ls
 8006d10:	4690      	movls	r8, r2
 8006d12:	4698      	movhi	r8, r3
 8006d14:	2303      	movs	r3, #3
 8006d16:	f04f 0900 	mov.w	r9, #0
 8006d1a:	6123      	str	r3, [r4, #16]
 8006d1c:	f02b 0304 	bic.w	r3, fp, #4
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	4633      	mov	r3, r6
 8006d24:	4621      	mov	r1, r4
 8006d26:	4628      	mov	r0, r5
 8006d28:	9700      	str	r7, [sp, #0]
 8006d2a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006d2c:	f000 f9d4 	bl	80070d8 <_printf_common>
 8006d30:	3001      	adds	r0, #1
 8006d32:	f040 8090 	bne.w	8006e56 <_printf_float+0x1d6>
 8006d36:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3a:	b011      	add	sp, #68	@ 0x44
 8006d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d40:	4642      	mov	r2, r8
 8006d42:	464b      	mov	r3, r9
 8006d44:	4640      	mov	r0, r8
 8006d46:	4649      	mov	r1, r9
 8006d48:	f7f9 fe60 	bl	8000a0c <__aeabi_dcmpun>
 8006d4c:	b148      	cbz	r0, 8006d62 <_printf_float+0xe2>
 8006d4e:	464b      	mov	r3, r9
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bfb8      	it	lt
 8006d54:	232d      	movlt	r3, #45	@ 0x2d
 8006d56:	4a80      	ldr	r2, [pc, #512]	@ (8006f58 <_printf_float+0x2d8>)
 8006d58:	bfb8      	it	lt
 8006d5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f5c <_printf_float+0x2dc>)
 8006d60:	e7d3      	b.n	8006d0a <_printf_float+0x8a>
 8006d62:	6863      	ldr	r3, [r4, #4]
 8006d64:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	d13f      	bne.n	8006dec <_printf_float+0x16c>
 8006d6c:	2306      	movs	r3, #6
 8006d6e:	6063      	str	r3, [r4, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	9206      	str	r2, [sp, #24]
 8006d7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8006d7c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006d80:	aa0d      	add	r2, sp, #52	@ 0x34
 8006d82:	9203      	str	r2, [sp, #12]
 8006d84:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006d88:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d8c:	6863      	ldr	r3, [r4, #4]
 8006d8e:	4642      	mov	r2, r8
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	4628      	mov	r0, r5
 8006d94:	464b      	mov	r3, r9
 8006d96:	910a      	str	r1, [sp, #40]	@ 0x28
 8006d98:	f7ff fed4 	bl	8006b44 <__cvt>
 8006d9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d9e:	4680      	mov	r8, r0
 8006da0:	2947      	cmp	r1, #71	@ 0x47
 8006da2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006da4:	d128      	bne.n	8006df8 <_printf_float+0x178>
 8006da6:	1cc8      	adds	r0, r1, #3
 8006da8:	db02      	blt.n	8006db0 <_printf_float+0x130>
 8006daa:	6863      	ldr	r3, [r4, #4]
 8006dac:	4299      	cmp	r1, r3
 8006dae:	dd40      	ble.n	8006e32 <_printf_float+0x1b2>
 8006db0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006db4:	fa5f fa8a 	uxtb.w	sl, sl
 8006db8:	4652      	mov	r2, sl
 8006dba:	3901      	subs	r1, #1
 8006dbc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006dc0:	910d      	str	r1, [sp, #52]	@ 0x34
 8006dc2:	f7ff ff23 	bl	8006c0c <__exponent>
 8006dc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dc8:	4681      	mov	r9, r0
 8006dca:	1813      	adds	r3, r2, r0
 8006dcc:	2a01      	cmp	r2, #1
 8006dce:	6123      	str	r3, [r4, #16]
 8006dd0:	dc02      	bgt.n	8006dd8 <_printf_float+0x158>
 8006dd2:	6822      	ldr	r2, [r4, #0]
 8006dd4:	07d2      	lsls	r2, r2, #31
 8006dd6:	d501      	bpl.n	8006ddc <_printf_float+0x15c>
 8006dd8:	3301      	adds	r3, #1
 8006dda:	6123      	str	r3, [r4, #16]
 8006ddc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d09e      	beq.n	8006d22 <_printf_float+0xa2>
 8006de4:	232d      	movs	r3, #45	@ 0x2d
 8006de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dea:	e79a      	b.n	8006d22 <_printf_float+0xa2>
 8006dec:	2947      	cmp	r1, #71	@ 0x47
 8006dee:	d1bf      	bne.n	8006d70 <_printf_float+0xf0>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1bd      	bne.n	8006d70 <_printf_float+0xf0>
 8006df4:	2301      	movs	r3, #1
 8006df6:	e7ba      	b.n	8006d6e <_printf_float+0xee>
 8006df8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dfc:	d9dc      	bls.n	8006db8 <_printf_float+0x138>
 8006dfe:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e02:	d118      	bne.n	8006e36 <_printf_float+0x1b6>
 8006e04:	2900      	cmp	r1, #0
 8006e06:	6863      	ldr	r3, [r4, #4]
 8006e08:	dd0b      	ble.n	8006e22 <_printf_float+0x1a2>
 8006e0a:	6121      	str	r1, [r4, #16]
 8006e0c:	b913      	cbnz	r3, 8006e14 <_printf_float+0x194>
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	07d0      	lsls	r0, r2, #31
 8006e12:	d502      	bpl.n	8006e1a <_printf_float+0x19a>
 8006e14:	3301      	adds	r3, #1
 8006e16:	440b      	add	r3, r1
 8006e18:	6123      	str	r3, [r4, #16]
 8006e1a:	f04f 0900 	mov.w	r9, #0
 8006e1e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e20:	e7dc      	b.n	8006ddc <_printf_float+0x15c>
 8006e22:	b913      	cbnz	r3, 8006e2a <_printf_float+0x1aa>
 8006e24:	6822      	ldr	r2, [r4, #0]
 8006e26:	07d2      	lsls	r2, r2, #31
 8006e28:	d501      	bpl.n	8006e2e <_printf_float+0x1ae>
 8006e2a:	3302      	adds	r3, #2
 8006e2c:	e7f4      	b.n	8006e18 <_printf_float+0x198>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e7f2      	b.n	8006e18 <_printf_float+0x198>
 8006e32:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e38:	4299      	cmp	r1, r3
 8006e3a:	db05      	blt.n	8006e48 <_printf_float+0x1c8>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	6121      	str	r1, [r4, #16]
 8006e40:	07d8      	lsls	r0, r3, #31
 8006e42:	d5ea      	bpl.n	8006e1a <_printf_float+0x19a>
 8006e44:	1c4b      	adds	r3, r1, #1
 8006e46:	e7e7      	b.n	8006e18 <_printf_float+0x198>
 8006e48:	2900      	cmp	r1, #0
 8006e4a:	bfcc      	ite	gt
 8006e4c:	2201      	movgt	r2, #1
 8006e4e:	f1c1 0202 	rsble	r2, r1, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	e7e0      	b.n	8006e18 <_printf_float+0x198>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	055a      	lsls	r2, r3, #21
 8006e5a:	d407      	bmi.n	8006e6c <_printf_float+0x1ec>
 8006e5c:	6923      	ldr	r3, [r4, #16]
 8006e5e:	4642      	mov	r2, r8
 8006e60:	4631      	mov	r1, r6
 8006e62:	4628      	mov	r0, r5
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	d12b      	bne.n	8006ec2 <_printf_float+0x242>
 8006e6a:	e764      	b.n	8006d36 <_printf_float+0xb6>
 8006e6c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e70:	f240 80dc 	bls.w	800702c <_printf_float+0x3ac>
 8006e74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f7f9 fd94 	bl	80009a8 <__aeabi_dcmpeq>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d033      	beq.n	8006eec <_printf_float+0x26c>
 8006e84:	2301      	movs	r3, #1
 8006e86:	4631      	mov	r1, r6
 8006e88:	4628      	mov	r0, r5
 8006e8a:	4a35      	ldr	r2, [pc, #212]	@ (8006f60 <_printf_float+0x2e0>)
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f af51 	beq.w	8006d36 <_printf_float+0xb6>
 8006e94:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006e98:	4543      	cmp	r3, r8
 8006e9a:	db02      	blt.n	8006ea2 <_printf_float+0x222>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	07d8      	lsls	r0, r3, #31
 8006ea0:	d50f      	bpl.n	8006ec2 <_printf_float+0x242>
 8006ea2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f af42 	beq.w	8006d36 <_printf_float+0xb6>
 8006eb2:	f04f 0900 	mov.w	r9, #0
 8006eb6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006eba:	f104 0a1a 	add.w	sl, r4, #26
 8006ebe:	45c8      	cmp	r8, r9
 8006ec0:	dc09      	bgt.n	8006ed6 <_printf_float+0x256>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	079b      	lsls	r3, r3, #30
 8006ec6:	f100 8102 	bmi.w	80070ce <_printf_float+0x44e>
 8006eca:	68e0      	ldr	r0, [r4, #12]
 8006ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ece:	4298      	cmp	r0, r3
 8006ed0:	bfb8      	it	lt
 8006ed2:	4618      	movlt	r0, r3
 8006ed4:	e731      	b.n	8006d3a <_printf_float+0xba>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4652      	mov	r2, sl
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b8      	blx	r7
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	f43f af28 	beq.w	8006d36 <_printf_float+0xb6>
 8006ee6:	f109 0901 	add.w	r9, r9, #1
 8006eea:	e7e8      	b.n	8006ebe <_printf_float+0x23e>
 8006eec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dc38      	bgt.n	8006f64 <_printf_float+0x2e4>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	4a19      	ldr	r2, [pc, #100]	@ (8006f60 <_printf_float+0x2e0>)
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	f43f af1a 	beq.w	8006d36 <_printf_float+0xb6>
 8006f02:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006f06:	ea59 0303 	orrs.w	r3, r9, r3
 8006f0a:	d102      	bne.n	8006f12 <_printf_float+0x292>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	07d9      	lsls	r1, r3, #31
 8006f10:	d5d7      	bpl.n	8006ec2 <_printf_float+0x242>
 8006f12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f43f af0a 	beq.w	8006d36 <_printf_float+0xb6>
 8006f22:	f04f 0a00 	mov.w	sl, #0
 8006f26:	f104 0b1a 	add.w	fp, r4, #26
 8006f2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f2c:	425b      	negs	r3, r3
 8006f2e:	4553      	cmp	r3, sl
 8006f30:	dc01      	bgt.n	8006f36 <_printf_float+0x2b6>
 8006f32:	464b      	mov	r3, r9
 8006f34:	e793      	b.n	8006e5e <_printf_float+0x1de>
 8006f36:	2301      	movs	r3, #1
 8006f38:	465a      	mov	r2, fp
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	f43f aef8 	beq.w	8006d36 <_printf_float+0xb6>
 8006f46:	f10a 0a01 	add.w	sl, sl, #1
 8006f4a:	e7ee      	b.n	8006f2a <_printf_float+0x2aa>
 8006f4c:	7fefffff 	.word	0x7fefffff
 8006f50:	0800bcd3 	.word	0x0800bcd3
 8006f54:	0800bcd7 	.word	0x0800bcd7
 8006f58:	0800bcdb 	.word	0x0800bcdb
 8006f5c:	0800bcdf 	.word	0x0800bcdf
 8006f60:	0800bce3 	.word	0x0800bce3
 8006f64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f66:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006f6a:	4553      	cmp	r3, sl
 8006f6c:	bfa8      	it	ge
 8006f6e:	4653      	movge	r3, sl
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	4699      	mov	r9, r3
 8006f74:	dc36      	bgt.n	8006fe4 <_printf_float+0x364>
 8006f76:	f04f 0b00 	mov.w	fp, #0
 8006f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f7e:	f104 021a 	add.w	r2, r4, #26
 8006f82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f84:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f86:	eba3 0309 	sub.w	r3, r3, r9
 8006f8a:	455b      	cmp	r3, fp
 8006f8c:	dc31      	bgt.n	8006ff2 <_printf_float+0x372>
 8006f8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f90:	459a      	cmp	sl, r3
 8006f92:	dc3a      	bgt.n	800700a <_printf_float+0x38a>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	07da      	lsls	r2, r3, #31
 8006f98:	d437      	bmi.n	800700a <_printf_float+0x38a>
 8006f9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f9c:	ebaa 0903 	sub.w	r9, sl, r3
 8006fa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fa2:	ebaa 0303 	sub.w	r3, sl, r3
 8006fa6:	4599      	cmp	r9, r3
 8006fa8:	bfa8      	it	ge
 8006faa:	4699      	movge	r9, r3
 8006fac:	f1b9 0f00 	cmp.w	r9, #0
 8006fb0:	dc33      	bgt.n	800701a <_printf_float+0x39a>
 8006fb2:	f04f 0800 	mov.w	r8, #0
 8006fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fba:	f104 0b1a 	add.w	fp, r4, #26
 8006fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fc0:	ebaa 0303 	sub.w	r3, sl, r3
 8006fc4:	eba3 0309 	sub.w	r3, r3, r9
 8006fc8:	4543      	cmp	r3, r8
 8006fca:	f77f af7a 	ble.w	8006ec2 <_printf_float+0x242>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	465a      	mov	r2, fp
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f43f aeac 	beq.w	8006d36 <_printf_float+0xb6>
 8006fde:	f108 0801 	add.w	r8, r8, #1
 8006fe2:	e7ec      	b.n	8006fbe <_printf_float+0x33e>
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	d1c2      	bne.n	8006f76 <_printf_float+0x2f6>
 8006ff0:	e6a1      	b.n	8006d36 <_printf_float+0xb6>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	920a      	str	r2, [sp, #40]	@ 0x28
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f43f ae9a 	beq.w	8006d36 <_printf_float+0xb6>
 8007002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007004:	f10b 0b01 	add.w	fp, fp, #1
 8007008:	e7bb      	b.n	8006f82 <_printf_float+0x302>
 800700a:	4631      	mov	r1, r6
 800700c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	d1c0      	bne.n	8006f9a <_printf_float+0x31a>
 8007018:	e68d      	b.n	8006d36 <_printf_float+0xb6>
 800701a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800701c:	464b      	mov	r3, r9
 800701e:	4631      	mov	r1, r6
 8007020:	4628      	mov	r0, r5
 8007022:	4442      	add	r2, r8
 8007024:	47b8      	blx	r7
 8007026:	3001      	adds	r0, #1
 8007028:	d1c3      	bne.n	8006fb2 <_printf_float+0x332>
 800702a:	e684      	b.n	8006d36 <_printf_float+0xb6>
 800702c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007030:	f1ba 0f01 	cmp.w	sl, #1
 8007034:	dc01      	bgt.n	800703a <_printf_float+0x3ba>
 8007036:	07db      	lsls	r3, r3, #31
 8007038:	d536      	bpl.n	80070a8 <_printf_float+0x428>
 800703a:	2301      	movs	r3, #1
 800703c:	4642      	mov	r2, r8
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f ae76 	beq.w	8006d36 <_printf_float+0xb6>
 800704a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	f43f ae6e 	beq.w	8006d36 <_printf_float+0xb6>
 800705a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800705e:	2200      	movs	r2, #0
 8007060:	2300      	movs	r3, #0
 8007062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007066:	f7f9 fc9f 	bl	80009a8 <__aeabi_dcmpeq>
 800706a:	b9c0      	cbnz	r0, 800709e <_printf_float+0x41e>
 800706c:	4653      	mov	r3, sl
 800706e:	f108 0201 	add.w	r2, r8, #1
 8007072:	4631      	mov	r1, r6
 8007074:	4628      	mov	r0, r5
 8007076:	47b8      	blx	r7
 8007078:	3001      	adds	r0, #1
 800707a:	d10c      	bne.n	8007096 <_printf_float+0x416>
 800707c:	e65b      	b.n	8006d36 <_printf_float+0xb6>
 800707e:	2301      	movs	r3, #1
 8007080:	465a      	mov	r2, fp
 8007082:	4631      	mov	r1, r6
 8007084:	4628      	mov	r0, r5
 8007086:	47b8      	blx	r7
 8007088:	3001      	adds	r0, #1
 800708a:	f43f ae54 	beq.w	8006d36 <_printf_float+0xb6>
 800708e:	f108 0801 	add.w	r8, r8, #1
 8007092:	45d0      	cmp	r8, sl
 8007094:	dbf3      	blt.n	800707e <_printf_float+0x3fe>
 8007096:	464b      	mov	r3, r9
 8007098:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800709c:	e6e0      	b.n	8006e60 <_printf_float+0x1e0>
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	f104 0b1a 	add.w	fp, r4, #26
 80070a6:	e7f4      	b.n	8007092 <_printf_float+0x412>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4642      	mov	r2, r8
 80070ac:	e7e1      	b.n	8007072 <_printf_float+0x3f2>
 80070ae:	2301      	movs	r3, #1
 80070b0:	464a      	mov	r2, r9
 80070b2:	4631      	mov	r1, r6
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	f43f ae3c 	beq.w	8006d36 <_printf_float+0xb6>
 80070be:	f108 0801 	add.w	r8, r8, #1
 80070c2:	68e3      	ldr	r3, [r4, #12]
 80070c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80070c6:	1a5b      	subs	r3, r3, r1
 80070c8:	4543      	cmp	r3, r8
 80070ca:	dcf0      	bgt.n	80070ae <_printf_float+0x42e>
 80070cc:	e6fd      	b.n	8006eca <_printf_float+0x24a>
 80070ce:	f04f 0800 	mov.w	r8, #0
 80070d2:	f104 0919 	add.w	r9, r4, #25
 80070d6:	e7f4      	b.n	80070c2 <_printf_float+0x442>

080070d8 <_printf_common>:
 80070d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070dc:	4616      	mov	r6, r2
 80070de:	4698      	mov	r8, r3
 80070e0:	688a      	ldr	r2, [r1, #8]
 80070e2:	690b      	ldr	r3, [r1, #16]
 80070e4:	4607      	mov	r7, r0
 80070e6:	4293      	cmp	r3, r2
 80070e8:	bfb8      	it	lt
 80070ea:	4613      	movlt	r3, r2
 80070ec:	6033      	str	r3, [r6, #0]
 80070ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070f2:	460c      	mov	r4, r1
 80070f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070f8:	b10a      	cbz	r2, 80070fe <_printf_common+0x26>
 80070fa:	3301      	adds	r3, #1
 80070fc:	6033      	str	r3, [r6, #0]
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	0699      	lsls	r1, r3, #26
 8007102:	bf42      	ittt	mi
 8007104:	6833      	ldrmi	r3, [r6, #0]
 8007106:	3302      	addmi	r3, #2
 8007108:	6033      	strmi	r3, [r6, #0]
 800710a:	6825      	ldr	r5, [r4, #0]
 800710c:	f015 0506 	ands.w	r5, r5, #6
 8007110:	d106      	bne.n	8007120 <_printf_common+0x48>
 8007112:	f104 0a19 	add.w	sl, r4, #25
 8007116:	68e3      	ldr	r3, [r4, #12]
 8007118:	6832      	ldr	r2, [r6, #0]
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	42ab      	cmp	r3, r5
 800711e:	dc2b      	bgt.n	8007178 <_printf_common+0xa0>
 8007120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007124:	6822      	ldr	r2, [r4, #0]
 8007126:	3b00      	subs	r3, #0
 8007128:	bf18      	it	ne
 800712a:	2301      	movne	r3, #1
 800712c:	0692      	lsls	r2, r2, #26
 800712e:	d430      	bmi.n	8007192 <_printf_common+0xba>
 8007130:	4641      	mov	r1, r8
 8007132:	4638      	mov	r0, r7
 8007134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007138:	47c8      	blx	r9
 800713a:	3001      	adds	r0, #1
 800713c:	d023      	beq.n	8007186 <_printf_common+0xae>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	6922      	ldr	r2, [r4, #16]
 8007142:	f003 0306 	and.w	r3, r3, #6
 8007146:	2b04      	cmp	r3, #4
 8007148:	bf14      	ite	ne
 800714a:	2500      	movne	r5, #0
 800714c:	6833      	ldreq	r3, [r6, #0]
 800714e:	f04f 0600 	mov.w	r6, #0
 8007152:	bf08      	it	eq
 8007154:	68e5      	ldreq	r5, [r4, #12]
 8007156:	f104 041a 	add.w	r4, r4, #26
 800715a:	bf08      	it	eq
 800715c:	1aed      	subeq	r5, r5, r3
 800715e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007162:	bf08      	it	eq
 8007164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007168:	4293      	cmp	r3, r2
 800716a:	bfc4      	itt	gt
 800716c:	1a9b      	subgt	r3, r3, r2
 800716e:	18ed      	addgt	r5, r5, r3
 8007170:	42b5      	cmp	r5, r6
 8007172:	d11a      	bne.n	80071aa <_printf_common+0xd2>
 8007174:	2000      	movs	r0, #0
 8007176:	e008      	b.n	800718a <_printf_common+0xb2>
 8007178:	2301      	movs	r3, #1
 800717a:	4652      	mov	r2, sl
 800717c:	4641      	mov	r1, r8
 800717e:	4638      	mov	r0, r7
 8007180:	47c8      	blx	r9
 8007182:	3001      	adds	r0, #1
 8007184:	d103      	bne.n	800718e <_printf_common+0xb6>
 8007186:	f04f 30ff 	mov.w	r0, #4294967295
 800718a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718e:	3501      	adds	r5, #1
 8007190:	e7c1      	b.n	8007116 <_printf_common+0x3e>
 8007192:	2030      	movs	r0, #48	@ 0x30
 8007194:	18e1      	adds	r1, r4, r3
 8007196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071a0:	4422      	add	r2, r4
 80071a2:	3302      	adds	r3, #2
 80071a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071a8:	e7c2      	b.n	8007130 <_printf_common+0x58>
 80071aa:	2301      	movs	r3, #1
 80071ac:	4622      	mov	r2, r4
 80071ae:	4641      	mov	r1, r8
 80071b0:	4638      	mov	r0, r7
 80071b2:	47c8      	blx	r9
 80071b4:	3001      	adds	r0, #1
 80071b6:	d0e6      	beq.n	8007186 <_printf_common+0xae>
 80071b8:	3601      	adds	r6, #1
 80071ba:	e7d9      	b.n	8007170 <_printf_common+0x98>

080071bc <_printf_i>:
 80071bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c0:	7e0f      	ldrb	r7, [r1, #24]
 80071c2:	4691      	mov	r9, r2
 80071c4:	2f78      	cmp	r7, #120	@ 0x78
 80071c6:	4680      	mov	r8, r0
 80071c8:	460c      	mov	r4, r1
 80071ca:	469a      	mov	sl, r3
 80071cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071d2:	d807      	bhi.n	80071e4 <_printf_i+0x28>
 80071d4:	2f62      	cmp	r7, #98	@ 0x62
 80071d6:	d80a      	bhi.n	80071ee <_printf_i+0x32>
 80071d8:	2f00      	cmp	r7, #0
 80071da:	f000 80d3 	beq.w	8007384 <_printf_i+0x1c8>
 80071de:	2f58      	cmp	r7, #88	@ 0x58
 80071e0:	f000 80ba 	beq.w	8007358 <_printf_i+0x19c>
 80071e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071ec:	e03a      	b.n	8007264 <_printf_i+0xa8>
 80071ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071f2:	2b15      	cmp	r3, #21
 80071f4:	d8f6      	bhi.n	80071e4 <_printf_i+0x28>
 80071f6:	a101      	add	r1, pc, #4	@ (adr r1, 80071fc <_printf_i+0x40>)
 80071f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071fc:	08007255 	.word	0x08007255
 8007200:	08007269 	.word	0x08007269
 8007204:	080071e5 	.word	0x080071e5
 8007208:	080071e5 	.word	0x080071e5
 800720c:	080071e5 	.word	0x080071e5
 8007210:	080071e5 	.word	0x080071e5
 8007214:	08007269 	.word	0x08007269
 8007218:	080071e5 	.word	0x080071e5
 800721c:	080071e5 	.word	0x080071e5
 8007220:	080071e5 	.word	0x080071e5
 8007224:	080071e5 	.word	0x080071e5
 8007228:	0800736b 	.word	0x0800736b
 800722c:	08007293 	.word	0x08007293
 8007230:	08007325 	.word	0x08007325
 8007234:	080071e5 	.word	0x080071e5
 8007238:	080071e5 	.word	0x080071e5
 800723c:	0800738d 	.word	0x0800738d
 8007240:	080071e5 	.word	0x080071e5
 8007244:	08007293 	.word	0x08007293
 8007248:	080071e5 	.word	0x080071e5
 800724c:	080071e5 	.word	0x080071e5
 8007250:	0800732d 	.word	0x0800732d
 8007254:	6833      	ldr	r3, [r6, #0]
 8007256:	1d1a      	adds	r2, r3, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6032      	str	r2, [r6, #0]
 800725c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007264:	2301      	movs	r3, #1
 8007266:	e09e      	b.n	80073a6 <_printf_i+0x1ea>
 8007268:	6833      	ldr	r3, [r6, #0]
 800726a:	6820      	ldr	r0, [r4, #0]
 800726c:	1d19      	adds	r1, r3, #4
 800726e:	6031      	str	r1, [r6, #0]
 8007270:	0606      	lsls	r6, r0, #24
 8007272:	d501      	bpl.n	8007278 <_printf_i+0xbc>
 8007274:	681d      	ldr	r5, [r3, #0]
 8007276:	e003      	b.n	8007280 <_printf_i+0xc4>
 8007278:	0645      	lsls	r5, r0, #25
 800727a:	d5fb      	bpl.n	8007274 <_printf_i+0xb8>
 800727c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007280:	2d00      	cmp	r5, #0
 8007282:	da03      	bge.n	800728c <_printf_i+0xd0>
 8007284:	232d      	movs	r3, #45	@ 0x2d
 8007286:	426d      	negs	r5, r5
 8007288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800728c:	230a      	movs	r3, #10
 800728e:	4859      	ldr	r0, [pc, #356]	@ (80073f4 <_printf_i+0x238>)
 8007290:	e011      	b.n	80072b6 <_printf_i+0xfa>
 8007292:	6821      	ldr	r1, [r4, #0]
 8007294:	6833      	ldr	r3, [r6, #0]
 8007296:	0608      	lsls	r0, r1, #24
 8007298:	f853 5b04 	ldr.w	r5, [r3], #4
 800729c:	d402      	bmi.n	80072a4 <_printf_i+0xe8>
 800729e:	0649      	lsls	r1, r1, #25
 80072a0:	bf48      	it	mi
 80072a2:	b2ad      	uxthmi	r5, r5
 80072a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80072a6:	6033      	str	r3, [r6, #0]
 80072a8:	bf14      	ite	ne
 80072aa:	230a      	movne	r3, #10
 80072ac:	2308      	moveq	r3, #8
 80072ae:	4851      	ldr	r0, [pc, #324]	@ (80073f4 <_printf_i+0x238>)
 80072b0:	2100      	movs	r1, #0
 80072b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072b6:	6866      	ldr	r6, [r4, #4]
 80072b8:	2e00      	cmp	r6, #0
 80072ba:	bfa8      	it	ge
 80072bc:	6821      	ldrge	r1, [r4, #0]
 80072be:	60a6      	str	r6, [r4, #8]
 80072c0:	bfa4      	itt	ge
 80072c2:	f021 0104 	bicge.w	r1, r1, #4
 80072c6:	6021      	strge	r1, [r4, #0]
 80072c8:	b90d      	cbnz	r5, 80072ce <_printf_i+0x112>
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	d04b      	beq.n	8007366 <_printf_i+0x1aa>
 80072ce:	4616      	mov	r6, r2
 80072d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80072d4:	fb03 5711 	mls	r7, r3, r1, r5
 80072d8:	5dc7      	ldrb	r7, [r0, r7]
 80072da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072de:	462f      	mov	r7, r5
 80072e0:	42bb      	cmp	r3, r7
 80072e2:	460d      	mov	r5, r1
 80072e4:	d9f4      	bls.n	80072d0 <_printf_i+0x114>
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d10b      	bne.n	8007302 <_printf_i+0x146>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	07df      	lsls	r7, r3, #31
 80072ee:	d508      	bpl.n	8007302 <_printf_i+0x146>
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	6861      	ldr	r1, [r4, #4]
 80072f4:	4299      	cmp	r1, r3
 80072f6:	bfde      	ittt	le
 80072f8:	2330      	movle	r3, #48	@ 0x30
 80072fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007302:	1b92      	subs	r2, r2, r6
 8007304:	6122      	str	r2, [r4, #16]
 8007306:	464b      	mov	r3, r9
 8007308:	4621      	mov	r1, r4
 800730a:	4640      	mov	r0, r8
 800730c:	f8cd a000 	str.w	sl, [sp]
 8007310:	aa03      	add	r2, sp, #12
 8007312:	f7ff fee1 	bl	80070d8 <_printf_common>
 8007316:	3001      	adds	r0, #1
 8007318:	d14a      	bne.n	80073b0 <_printf_i+0x1f4>
 800731a:	f04f 30ff 	mov.w	r0, #4294967295
 800731e:	b004      	add	sp, #16
 8007320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	f043 0320 	orr.w	r3, r3, #32
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	2778      	movs	r7, #120	@ 0x78
 800732e:	4832      	ldr	r0, [pc, #200]	@ (80073f8 <_printf_i+0x23c>)
 8007330:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	6831      	ldr	r1, [r6, #0]
 8007338:	061f      	lsls	r7, r3, #24
 800733a:	f851 5b04 	ldr.w	r5, [r1], #4
 800733e:	d402      	bmi.n	8007346 <_printf_i+0x18a>
 8007340:	065f      	lsls	r7, r3, #25
 8007342:	bf48      	it	mi
 8007344:	b2ad      	uxthmi	r5, r5
 8007346:	6031      	str	r1, [r6, #0]
 8007348:	07d9      	lsls	r1, r3, #31
 800734a:	bf44      	itt	mi
 800734c:	f043 0320 	orrmi.w	r3, r3, #32
 8007350:	6023      	strmi	r3, [r4, #0]
 8007352:	b11d      	cbz	r5, 800735c <_printf_i+0x1a0>
 8007354:	2310      	movs	r3, #16
 8007356:	e7ab      	b.n	80072b0 <_printf_i+0xf4>
 8007358:	4826      	ldr	r0, [pc, #152]	@ (80073f4 <_printf_i+0x238>)
 800735a:	e7e9      	b.n	8007330 <_printf_i+0x174>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	f023 0320 	bic.w	r3, r3, #32
 8007362:	6023      	str	r3, [r4, #0]
 8007364:	e7f6      	b.n	8007354 <_printf_i+0x198>
 8007366:	4616      	mov	r6, r2
 8007368:	e7bd      	b.n	80072e6 <_printf_i+0x12a>
 800736a:	6833      	ldr	r3, [r6, #0]
 800736c:	6825      	ldr	r5, [r4, #0]
 800736e:	1d18      	adds	r0, r3, #4
 8007370:	6961      	ldr	r1, [r4, #20]
 8007372:	6030      	str	r0, [r6, #0]
 8007374:	062e      	lsls	r6, r5, #24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	d501      	bpl.n	800737e <_printf_i+0x1c2>
 800737a:	6019      	str	r1, [r3, #0]
 800737c:	e002      	b.n	8007384 <_printf_i+0x1c8>
 800737e:	0668      	lsls	r0, r5, #25
 8007380:	d5fb      	bpl.n	800737a <_printf_i+0x1be>
 8007382:	8019      	strh	r1, [r3, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	4616      	mov	r6, r2
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	e7bc      	b.n	8007306 <_printf_i+0x14a>
 800738c:	6833      	ldr	r3, [r6, #0]
 800738e:	2100      	movs	r1, #0
 8007390:	1d1a      	adds	r2, r3, #4
 8007392:	6032      	str	r2, [r6, #0]
 8007394:	681e      	ldr	r6, [r3, #0]
 8007396:	6862      	ldr	r2, [r4, #4]
 8007398:	4630      	mov	r0, r6
 800739a:	f000 f9d4 	bl	8007746 <memchr>
 800739e:	b108      	cbz	r0, 80073a4 <_printf_i+0x1e8>
 80073a0:	1b80      	subs	r0, r0, r6
 80073a2:	6060      	str	r0, [r4, #4]
 80073a4:	6863      	ldr	r3, [r4, #4]
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	2300      	movs	r3, #0
 80073aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073ae:	e7aa      	b.n	8007306 <_printf_i+0x14a>
 80073b0:	4632      	mov	r2, r6
 80073b2:	4649      	mov	r1, r9
 80073b4:	4640      	mov	r0, r8
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	47d0      	blx	sl
 80073ba:	3001      	adds	r0, #1
 80073bc:	d0ad      	beq.n	800731a <_printf_i+0x15e>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	079b      	lsls	r3, r3, #30
 80073c2:	d413      	bmi.n	80073ec <_printf_i+0x230>
 80073c4:	68e0      	ldr	r0, [r4, #12]
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	4298      	cmp	r0, r3
 80073ca:	bfb8      	it	lt
 80073cc:	4618      	movlt	r0, r3
 80073ce:	e7a6      	b.n	800731e <_printf_i+0x162>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4632      	mov	r2, r6
 80073d4:	4649      	mov	r1, r9
 80073d6:	4640      	mov	r0, r8
 80073d8:	47d0      	blx	sl
 80073da:	3001      	adds	r0, #1
 80073dc:	d09d      	beq.n	800731a <_printf_i+0x15e>
 80073de:	3501      	adds	r5, #1
 80073e0:	68e3      	ldr	r3, [r4, #12]
 80073e2:	9903      	ldr	r1, [sp, #12]
 80073e4:	1a5b      	subs	r3, r3, r1
 80073e6:	42ab      	cmp	r3, r5
 80073e8:	dcf2      	bgt.n	80073d0 <_printf_i+0x214>
 80073ea:	e7eb      	b.n	80073c4 <_printf_i+0x208>
 80073ec:	2500      	movs	r5, #0
 80073ee:	f104 0619 	add.w	r6, r4, #25
 80073f2:	e7f5      	b.n	80073e0 <_printf_i+0x224>
 80073f4:	0800bce5 	.word	0x0800bce5
 80073f8:	0800bcf6 	.word	0x0800bcf6

080073fc <std>:
 80073fc:	2300      	movs	r3, #0
 80073fe:	b510      	push	{r4, lr}
 8007400:	4604      	mov	r4, r0
 8007402:	e9c0 3300 	strd	r3, r3, [r0]
 8007406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800740a:	6083      	str	r3, [r0, #8]
 800740c:	8181      	strh	r1, [r0, #12]
 800740e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007410:	81c2      	strh	r2, [r0, #14]
 8007412:	6183      	str	r3, [r0, #24]
 8007414:	4619      	mov	r1, r3
 8007416:	2208      	movs	r2, #8
 8007418:	305c      	adds	r0, #92	@ 0x5c
 800741a:	f000 f914 	bl	8007646 <memset>
 800741e:	4b0d      	ldr	r3, [pc, #52]	@ (8007454 <std+0x58>)
 8007420:	6224      	str	r4, [r4, #32]
 8007422:	6263      	str	r3, [r4, #36]	@ 0x24
 8007424:	4b0c      	ldr	r3, [pc, #48]	@ (8007458 <std+0x5c>)
 8007426:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007428:	4b0c      	ldr	r3, [pc, #48]	@ (800745c <std+0x60>)
 800742a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800742c:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <std+0x64>)
 800742e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <std+0x68>)
 8007432:	429c      	cmp	r4, r3
 8007434:	d006      	beq.n	8007444 <std+0x48>
 8007436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800743a:	4294      	cmp	r4, r2
 800743c:	d002      	beq.n	8007444 <std+0x48>
 800743e:	33d0      	adds	r3, #208	@ 0xd0
 8007440:	429c      	cmp	r4, r3
 8007442:	d105      	bne.n	8007450 <std+0x54>
 8007444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800744c:	f000 b978 	b.w	8007740 <__retarget_lock_init_recursive>
 8007450:	bd10      	pop	{r4, pc}
 8007452:	bf00      	nop
 8007454:	080075c1 	.word	0x080075c1
 8007458:	080075e3 	.word	0x080075e3
 800745c:	0800761b 	.word	0x0800761b
 8007460:	0800763f 	.word	0x0800763f
 8007464:	20000fdc 	.word	0x20000fdc

08007468 <stdio_exit_handler>:
 8007468:	4a02      	ldr	r2, [pc, #8]	@ (8007474 <stdio_exit_handler+0xc>)
 800746a:	4903      	ldr	r1, [pc, #12]	@ (8007478 <stdio_exit_handler+0x10>)
 800746c:	4803      	ldr	r0, [pc, #12]	@ (800747c <stdio_exit_handler+0x14>)
 800746e:	f000 b869 	b.w	8007544 <_fwalk_sglue>
 8007472:	bf00      	nop
 8007474:	20000024 	.word	0x20000024
 8007478:	080090b5 	.word	0x080090b5
 800747c:	20000034 	.word	0x20000034

08007480 <cleanup_stdio>:
 8007480:	6841      	ldr	r1, [r0, #4]
 8007482:	4b0c      	ldr	r3, [pc, #48]	@ (80074b4 <cleanup_stdio+0x34>)
 8007484:	b510      	push	{r4, lr}
 8007486:	4299      	cmp	r1, r3
 8007488:	4604      	mov	r4, r0
 800748a:	d001      	beq.n	8007490 <cleanup_stdio+0x10>
 800748c:	f001 fe12 	bl	80090b4 <_fflush_r>
 8007490:	68a1      	ldr	r1, [r4, #8]
 8007492:	4b09      	ldr	r3, [pc, #36]	@ (80074b8 <cleanup_stdio+0x38>)
 8007494:	4299      	cmp	r1, r3
 8007496:	d002      	beq.n	800749e <cleanup_stdio+0x1e>
 8007498:	4620      	mov	r0, r4
 800749a:	f001 fe0b 	bl	80090b4 <_fflush_r>
 800749e:	68e1      	ldr	r1, [r4, #12]
 80074a0:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <cleanup_stdio+0x3c>)
 80074a2:	4299      	cmp	r1, r3
 80074a4:	d004      	beq.n	80074b0 <cleanup_stdio+0x30>
 80074a6:	4620      	mov	r0, r4
 80074a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ac:	f001 be02 	b.w	80090b4 <_fflush_r>
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	bf00      	nop
 80074b4:	20000fdc 	.word	0x20000fdc
 80074b8:	20001044 	.word	0x20001044
 80074bc:	200010ac 	.word	0x200010ac

080074c0 <global_stdio_init.part.0>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	4b0b      	ldr	r3, [pc, #44]	@ (80074f0 <global_stdio_init.part.0+0x30>)
 80074c4:	4c0b      	ldr	r4, [pc, #44]	@ (80074f4 <global_stdio_init.part.0+0x34>)
 80074c6:	4a0c      	ldr	r2, [pc, #48]	@ (80074f8 <global_stdio_init.part.0+0x38>)
 80074c8:	4620      	mov	r0, r4
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	2104      	movs	r1, #4
 80074ce:	2200      	movs	r2, #0
 80074d0:	f7ff ff94 	bl	80073fc <std>
 80074d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074d8:	2201      	movs	r2, #1
 80074da:	2109      	movs	r1, #9
 80074dc:	f7ff ff8e 	bl	80073fc <std>
 80074e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074e4:	2202      	movs	r2, #2
 80074e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ea:	2112      	movs	r1, #18
 80074ec:	f7ff bf86 	b.w	80073fc <std>
 80074f0:	20001114 	.word	0x20001114
 80074f4:	20000fdc 	.word	0x20000fdc
 80074f8:	08007469 	.word	0x08007469

080074fc <__sfp_lock_acquire>:
 80074fc:	4801      	ldr	r0, [pc, #4]	@ (8007504 <__sfp_lock_acquire+0x8>)
 80074fe:	f000 b920 	b.w	8007742 <__retarget_lock_acquire_recursive>
 8007502:	bf00      	nop
 8007504:	2000111d 	.word	0x2000111d

08007508 <__sfp_lock_release>:
 8007508:	4801      	ldr	r0, [pc, #4]	@ (8007510 <__sfp_lock_release+0x8>)
 800750a:	f000 b91b 	b.w	8007744 <__retarget_lock_release_recursive>
 800750e:	bf00      	nop
 8007510:	2000111d 	.word	0x2000111d

08007514 <__sinit>:
 8007514:	b510      	push	{r4, lr}
 8007516:	4604      	mov	r4, r0
 8007518:	f7ff fff0 	bl	80074fc <__sfp_lock_acquire>
 800751c:	6a23      	ldr	r3, [r4, #32]
 800751e:	b11b      	cbz	r3, 8007528 <__sinit+0x14>
 8007520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007524:	f7ff bff0 	b.w	8007508 <__sfp_lock_release>
 8007528:	4b04      	ldr	r3, [pc, #16]	@ (800753c <__sinit+0x28>)
 800752a:	6223      	str	r3, [r4, #32]
 800752c:	4b04      	ldr	r3, [pc, #16]	@ (8007540 <__sinit+0x2c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f5      	bne.n	8007520 <__sinit+0xc>
 8007534:	f7ff ffc4 	bl	80074c0 <global_stdio_init.part.0>
 8007538:	e7f2      	b.n	8007520 <__sinit+0xc>
 800753a:	bf00      	nop
 800753c:	08007481 	.word	0x08007481
 8007540:	20001114 	.word	0x20001114

08007544 <_fwalk_sglue>:
 8007544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007548:	4607      	mov	r7, r0
 800754a:	4688      	mov	r8, r1
 800754c:	4614      	mov	r4, r2
 800754e:	2600      	movs	r6, #0
 8007550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007554:	f1b9 0901 	subs.w	r9, r9, #1
 8007558:	d505      	bpl.n	8007566 <_fwalk_sglue+0x22>
 800755a:	6824      	ldr	r4, [r4, #0]
 800755c:	2c00      	cmp	r4, #0
 800755e:	d1f7      	bne.n	8007550 <_fwalk_sglue+0xc>
 8007560:	4630      	mov	r0, r6
 8007562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007566:	89ab      	ldrh	r3, [r5, #12]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d907      	bls.n	800757c <_fwalk_sglue+0x38>
 800756c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007570:	3301      	adds	r3, #1
 8007572:	d003      	beq.n	800757c <_fwalk_sglue+0x38>
 8007574:	4629      	mov	r1, r5
 8007576:	4638      	mov	r0, r7
 8007578:	47c0      	blx	r8
 800757a:	4306      	orrs	r6, r0
 800757c:	3568      	adds	r5, #104	@ 0x68
 800757e:	e7e9      	b.n	8007554 <_fwalk_sglue+0x10>

08007580 <siprintf>:
 8007580:	b40e      	push	{r1, r2, r3}
 8007582:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007586:	b500      	push	{lr}
 8007588:	b09c      	sub	sp, #112	@ 0x70
 800758a:	ab1d      	add	r3, sp, #116	@ 0x74
 800758c:	9002      	str	r0, [sp, #8]
 800758e:	9006      	str	r0, [sp, #24]
 8007590:	9107      	str	r1, [sp, #28]
 8007592:	9104      	str	r1, [sp, #16]
 8007594:	4808      	ldr	r0, [pc, #32]	@ (80075b8 <siprintf+0x38>)
 8007596:	4909      	ldr	r1, [pc, #36]	@ (80075bc <siprintf+0x3c>)
 8007598:	f853 2b04 	ldr.w	r2, [r3], #4
 800759c:	9105      	str	r1, [sp, #20]
 800759e:	6800      	ldr	r0, [r0, #0]
 80075a0:	a902      	add	r1, sp, #8
 80075a2:	9301      	str	r3, [sp, #4]
 80075a4:	f001 fc0a 	bl	8008dbc <_svfiprintf_r>
 80075a8:	2200      	movs	r2, #0
 80075aa:	9b02      	ldr	r3, [sp, #8]
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	b01c      	add	sp, #112	@ 0x70
 80075b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075b4:	b003      	add	sp, #12
 80075b6:	4770      	bx	lr
 80075b8:	20000030 	.word	0x20000030
 80075bc:	ffff0208 	.word	0xffff0208

080075c0 <__sread>:
 80075c0:	b510      	push	{r4, lr}
 80075c2:	460c      	mov	r4, r1
 80075c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c8:	f000 f86c 	bl	80076a4 <_read_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	bfab      	itete	ge
 80075d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80075d2:	89a3      	ldrhlt	r3, [r4, #12]
 80075d4:	181b      	addge	r3, r3, r0
 80075d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075da:	bfac      	ite	ge
 80075dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075de:	81a3      	strhlt	r3, [r4, #12]
 80075e0:	bd10      	pop	{r4, pc}

080075e2 <__swrite>:
 80075e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e6:	461f      	mov	r7, r3
 80075e8:	898b      	ldrh	r3, [r1, #12]
 80075ea:	4605      	mov	r5, r0
 80075ec:	05db      	lsls	r3, r3, #23
 80075ee:	460c      	mov	r4, r1
 80075f0:	4616      	mov	r6, r2
 80075f2:	d505      	bpl.n	8007600 <__swrite+0x1e>
 80075f4:	2302      	movs	r3, #2
 80075f6:	2200      	movs	r2, #0
 80075f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fc:	f000 f840 	bl	8007680 <_lseek_r>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	4632      	mov	r2, r6
 8007604:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	4628      	mov	r0, r5
 800760c:	463b      	mov	r3, r7
 800760e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007616:	f000 b857 	b.w	80076c8 <_write_r>

0800761a <__sseek>:
 800761a:	b510      	push	{r4, lr}
 800761c:	460c      	mov	r4, r1
 800761e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007622:	f000 f82d 	bl	8007680 <_lseek_r>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	bf15      	itete	ne
 800762c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800762e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007636:	81a3      	strheq	r3, [r4, #12]
 8007638:	bf18      	it	ne
 800763a:	81a3      	strhne	r3, [r4, #12]
 800763c:	bd10      	pop	{r4, pc}

0800763e <__sclose>:
 800763e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007642:	f000 b80d 	b.w	8007660 <_close_r>

08007646 <memset>:
 8007646:	4603      	mov	r3, r0
 8007648:	4402      	add	r2, r0
 800764a:	4293      	cmp	r3, r2
 800764c:	d100      	bne.n	8007650 <memset+0xa>
 800764e:	4770      	bx	lr
 8007650:	f803 1b01 	strb.w	r1, [r3], #1
 8007654:	e7f9      	b.n	800764a <memset+0x4>
	...

08007658 <_localeconv_r>:
 8007658:	4800      	ldr	r0, [pc, #0]	@ (800765c <_localeconv_r+0x4>)
 800765a:	4770      	bx	lr
 800765c:	20000170 	.word	0x20000170

08007660 <_close_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	2300      	movs	r3, #0
 8007664:	4d05      	ldr	r5, [pc, #20]	@ (800767c <_close_r+0x1c>)
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	602b      	str	r3, [r5, #0]
 800766c:	f7fb fad9 	bl	8002c22 <_close>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_close_r+0x1a>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_close_r+0x1a>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20001118 	.word	0x20001118

08007680 <_lseek_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	4611      	mov	r1, r2
 8007688:	2200      	movs	r2, #0
 800768a:	4d05      	ldr	r5, [pc, #20]	@ (80076a0 <_lseek_r+0x20>)
 800768c:	602a      	str	r2, [r5, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	f7fb faeb 	bl	8002c6a <_lseek>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_lseek_r+0x1e>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_lseek_r+0x1e>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	20001118 	.word	0x20001118

080076a4 <_read_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4604      	mov	r4, r0
 80076a8:	4608      	mov	r0, r1
 80076aa:	4611      	mov	r1, r2
 80076ac:	2200      	movs	r2, #0
 80076ae:	4d05      	ldr	r5, [pc, #20]	@ (80076c4 <_read_r+0x20>)
 80076b0:	602a      	str	r2, [r5, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	f7fb fa7c 	bl	8002bb0 <_read>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d102      	bne.n	80076c2 <_read_r+0x1e>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b103      	cbz	r3, 80076c2 <_read_r+0x1e>
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
 80076c4:	20001118 	.word	0x20001118

080076c8 <_write_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4604      	mov	r4, r0
 80076cc:	4608      	mov	r0, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	2200      	movs	r2, #0
 80076d2:	4d05      	ldr	r5, [pc, #20]	@ (80076e8 <_write_r+0x20>)
 80076d4:	602a      	str	r2, [r5, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	f7fb fa87 	bl	8002bea <_write>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_write_r+0x1e>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_write_r+0x1e>
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	20001118 	.word	0x20001118

080076ec <__errno>:
 80076ec:	4b01      	ldr	r3, [pc, #4]	@ (80076f4 <__errno+0x8>)
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20000030 	.word	0x20000030

080076f8 <__libc_init_array>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	2600      	movs	r6, #0
 80076fc:	4d0c      	ldr	r5, [pc, #48]	@ (8007730 <__libc_init_array+0x38>)
 80076fe:	4c0d      	ldr	r4, [pc, #52]	@ (8007734 <__libc_init_array+0x3c>)
 8007700:	1b64      	subs	r4, r4, r5
 8007702:	10a4      	asrs	r4, r4, #2
 8007704:	42a6      	cmp	r6, r4
 8007706:	d109      	bne.n	800771c <__libc_init_array+0x24>
 8007708:	f002 ff7e 	bl	800a608 <_init>
 800770c:	2600      	movs	r6, #0
 800770e:	4d0a      	ldr	r5, [pc, #40]	@ (8007738 <__libc_init_array+0x40>)
 8007710:	4c0a      	ldr	r4, [pc, #40]	@ (800773c <__libc_init_array+0x44>)
 8007712:	1b64      	subs	r4, r4, r5
 8007714:	10a4      	asrs	r4, r4, #2
 8007716:	42a6      	cmp	r6, r4
 8007718:	d105      	bne.n	8007726 <__libc_init_array+0x2e>
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007720:	4798      	blx	r3
 8007722:	3601      	adds	r6, #1
 8007724:	e7ee      	b.n	8007704 <__libc_init_array+0xc>
 8007726:	f855 3b04 	ldr.w	r3, [r5], #4
 800772a:	4798      	blx	r3
 800772c:	3601      	adds	r6, #1
 800772e:	e7f2      	b.n	8007716 <__libc_init_array+0x1e>
 8007730:	0800bf80 	.word	0x0800bf80
 8007734:	0800bf80 	.word	0x0800bf80
 8007738:	0800bf80 	.word	0x0800bf80
 800773c:	0800bf84 	.word	0x0800bf84

08007740 <__retarget_lock_init_recursive>:
 8007740:	4770      	bx	lr

08007742 <__retarget_lock_acquire_recursive>:
 8007742:	4770      	bx	lr

08007744 <__retarget_lock_release_recursive>:
 8007744:	4770      	bx	lr

08007746 <memchr>:
 8007746:	4603      	mov	r3, r0
 8007748:	b510      	push	{r4, lr}
 800774a:	b2c9      	uxtb	r1, r1
 800774c:	4402      	add	r2, r0
 800774e:	4293      	cmp	r3, r2
 8007750:	4618      	mov	r0, r3
 8007752:	d101      	bne.n	8007758 <memchr+0x12>
 8007754:	2000      	movs	r0, #0
 8007756:	e003      	b.n	8007760 <memchr+0x1a>
 8007758:	7804      	ldrb	r4, [r0, #0]
 800775a:	3301      	adds	r3, #1
 800775c:	428c      	cmp	r4, r1
 800775e:	d1f6      	bne.n	800774e <memchr+0x8>
 8007760:	bd10      	pop	{r4, pc}

08007762 <quorem>:
 8007762:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007766:	6903      	ldr	r3, [r0, #16]
 8007768:	690c      	ldr	r4, [r1, #16]
 800776a:	4607      	mov	r7, r0
 800776c:	42a3      	cmp	r3, r4
 800776e:	db7e      	blt.n	800786e <quorem+0x10c>
 8007770:	3c01      	subs	r4, #1
 8007772:	00a3      	lsls	r3, r4, #2
 8007774:	f100 0514 	add.w	r5, r0, #20
 8007778:	f101 0814 	add.w	r8, r1, #20
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800778c:	3301      	adds	r3, #1
 800778e:	429a      	cmp	r2, r3
 8007790:	fbb2 f6f3 	udiv	r6, r2, r3
 8007794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007798:	d32e      	bcc.n	80077f8 <quorem+0x96>
 800779a:	f04f 0a00 	mov.w	sl, #0
 800779e:	46c4      	mov	ip, r8
 80077a0:	46ae      	mov	lr, r5
 80077a2:	46d3      	mov	fp, sl
 80077a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077a8:	b298      	uxth	r0, r3
 80077aa:	fb06 a000 	mla	r0, r6, r0, sl
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	0c02      	lsrs	r2, r0, #16
 80077b2:	fb06 2303 	mla	r3, r6, r3, r2
 80077b6:	f8de 2000 	ldr.w	r2, [lr]
 80077ba:	b280      	uxth	r0, r0
 80077bc:	b292      	uxth	r2, r2
 80077be:	1a12      	subs	r2, r2, r0
 80077c0:	445a      	add	r2, fp
 80077c2:	f8de 0000 	ldr.w	r0, [lr]
 80077c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80077d4:	b292      	uxth	r2, r2
 80077d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80077da:	45e1      	cmp	r9, ip
 80077dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80077e0:	f84e 2b04 	str.w	r2, [lr], #4
 80077e4:	d2de      	bcs.n	80077a4 <quorem+0x42>
 80077e6:	9b00      	ldr	r3, [sp, #0]
 80077e8:	58eb      	ldr	r3, [r5, r3]
 80077ea:	b92b      	cbnz	r3, 80077f8 <quorem+0x96>
 80077ec:	9b01      	ldr	r3, [sp, #4]
 80077ee:	3b04      	subs	r3, #4
 80077f0:	429d      	cmp	r5, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	d32f      	bcc.n	8007856 <quorem+0xf4>
 80077f6:	613c      	str	r4, [r7, #16]
 80077f8:	4638      	mov	r0, r7
 80077fa:	f001 f97b 	bl	8008af4 <__mcmp>
 80077fe:	2800      	cmp	r0, #0
 8007800:	db25      	blt.n	800784e <quorem+0xec>
 8007802:	4629      	mov	r1, r5
 8007804:	2000      	movs	r0, #0
 8007806:	f858 2b04 	ldr.w	r2, [r8], #4
 800780a:	f8d1 c000 	ldr.w	ip, [r1]
 800780e:	fa1f fe82 	uxth.w	lr, r2
 8007812:	fa1f f38c 	uxth.w	r3, ip
 8007816:	eba3 030e 	sub.w	r3, r3, lr
 800781a:	4403      	add	r3, r0
 800781c:	0c12      	lsrs	r2, r2, #16
 800781e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007822:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007826:	b29b      	uxth	r3, r3
 8007828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800782c:	45c1      	cmp	r9, r8
 800782e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007832:	f841 3b04 	str.w	r3, [r1], #4
 8007836:	d2e6      	bcs.n	8007806 <quorem+0xa4>
 8007838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800783c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007840:	b922      	cbnz	r2, 800784c <quorem+0xea>
 8007842:	3b04      	subs	r3, #4
 8007844:	429d      	cmp	r5, r3
 8007846:	461a      	mov	r2, r3
 8007848:	d30b      	bcc.n	8007862 <quorem+0x100>
 800784a:	613c      	str	r4, [r7, #16]
 800784c:	3601      	adds	r6, #1
 800784e:	4630      	mov	r0, r6
 8007850:	b003      	add	sp, #12
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	3b04      	subs	r3, #4
 800785a:	2a00      	cmp	r2, #0
 800785c:	d1cb      	bne.n	80077f6 <quorem+0x94>
 800785e:	3c01      	subs	r4, #1
 8007860:	e7c6      	b.n	80077f0 <quorem+0x8e>
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	3b04      	subs	r3, #4
 8007866:	2a00      	cmp	r2, #0
 8007868:	d1ef      	bne.n	800784a <quorem+0xe8>
 800786a:	3c01      	subs	r4, #1
 800786c:	e7ea      	b.n	8007844 <quorem+0xe2>
 800786e:	2000      	movs	r0, #0
 8007870:	e7ee      	b.n	8007850 <quorem+0xee>
 8007872:	0000      	movs	r0, r0
 8007874:	0000      	movs	r0, r0
	...

08007878 <_dtoa_r>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	4614      	mov	r4, r2
 800787e:	461d      	mov	r5, r3
 8007880:	69c7      	ldr	r7, [r0, #28]
 8007882:	b097      	sub	sp, #92	@ 0x5c
 8007884:	4683      	mov	fp, r0
 8007886:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800788a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800788c:	b97f      	cbnz	r7, 80078ae <_dtoa_r+0x36>
 800788e:	2010      	movs	r0, #16
 8007890:	f000 fe02 	bl	8008498 <malloc>
 8007894:	4602      	mov	r2, r0
 8007896:	f8cb 001c 	str.w	r0, [fp, #28]
 800789a:	b920      	cbnz	r0, 80078a6 <_dtoa_r+0x2e>
 800789c:	21ef      	movs	r1, #239	@ 0xef
 800789e:	4ba8      	ldr	r3, [pc, #672]	@ (8007b40 <_dtoa_r+0x2c8>)
 80078a0:	48a8      	ldr	r0, [pc, #672]	@ (8007b44 <_dtoa_r+0x2cc>)
 80078a2:	f001 fc67 	bl	8009174 <__assert_func>
 80078a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078aa:	6007      	str	r7, [r0, #0]
 80078ac:	60c7      	str	r7, [r0, #12]
 80078ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078b2:	6819      	ldr	r1, [r3, #0]
 80078b4:	b159      	cbz	r1, 80078ce <_dtoa_r+0x56>
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	2301      	movs	r3, #1
 80078ba:	4093      	lsls	r3, r2
 80078bc:	604a      	str	r2, [r1, #4]
 80078be:	608b      	str	r3, [r1, #8]
 80078c0:	4658      	mov	r0, fp
 80078c2:	f000 fedf 	bl	8008684 <_Bfree>
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	1e2b      	subs	r3, r5, #0
 80078d0:	bfaf      	iteee	ge
 80078d2:	2300      	movge	r3, #0
 80078d4:	2201      	movlt	r2, #1
 80078d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80078da:	9303      	strlt	r3, [sp, #12]
 80078dc:	bfa8      	it	ge
 80078de:	6033      	strge	r3, [r6, #0]
 80078e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80078e4:	4b98      	ldr	r3, [pc, #608]	@ (8007b48 <_dtoa_r+0x2d0>)
 80078e6:	bfb8      	it	lt
 80078e8:	6032      	strlt	r2, [r6, #0]
 80078ea:	ea33 0308 	bics.w	r3, r3, r8
 80078ee:	d112      	bne.n	8007916 <_dtoa_r+0x9e>
 80078f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80078f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80078fc:	4323      	orrs	r3, r4
 80078fe:	f000 8550 	beq.w	80083a2 <_dtoa_r+0xb2a>
 8007902:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007904:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007b4c <_dtoa_r+0x2d4>
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8552 	beq.w	80083b2 <_dtoa_r+0xb3a>
 800790e:	f10a 0303 	add.w	r3, sl, #3
 8007912:	f000 bd4c 	b.w	80083ae <_dtoa_r+0xb36>
 8007916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800791a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800791e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007922:	2200      	movs	r2, #0
 8007924:	2300      	movs	r3, #0
 8007926:	f7f9 f83f 	bl	80009a8 <__aeabi_dcmpeq>
 800792a:	4607      	mov	r7, r0
 800792c:	b158      	cbz	r0, 8007946 <_dtoa_r+0xce>
 800792e:	2301      	movs	r3, #1
 8007930:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007936:	b113      	cbz	r3, 800793e <_dtoa_r+0xc6>
 8007938:	4b85      	ldr	r3, [pc, #532]	@ (8007b50 <_dtoa_r+0x2d8>)
 800793a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007b54 <_dtoa_r+0x2dc>
 8007942:	f000 bd36 	b.w	80083b2 <_dtoa_r+0xb3a>
 8007946:	ab14      	add	r3, sp, #80	@ 0x50
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	ab15      	add	r3, sp, #84	@ 0x54
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	4658      	mov	r0, fp
 8007950:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007954:	f001 f97e 	bl	8008c54 <__d2b>
 8007958:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800795c:	4681      	mov	r9, r0
 800795e:	2e00      	cmp	r6, #0
 8007960:	d077      	beq.n	8007a52 <_dtoa_r+0x1da>
 8007962:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007968:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800796c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007970:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007974:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007978:	9712      	str	r7, [sp, #72]	@ 0x48
 800797a:	4619      	mov	r1, r3
 800797c:	2200      	movs	r2, #0
 800797e:	4b76      	ldr	r3, [pc, #472]	@ (8007b58 <_dtoa_r+0x2e0>)
 8007980:	f7f8 fbf2 	bl	8000168 <__aeabi_dsub>
 8007984:	a368      	add	r3, pc, #416	@ (adr r3, 8007b28 <_dtoa_r+0x2b0>)
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	f7f8 fda5 	bl	80004d8 <__aeabi_dmul>
 800798e:	a368      	add	r3, pc, #416	@ (adr r3, 8007b30 <_dtoa_r+0x2b8>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	f7f8 fbea 	bl	800016c <__adddf3>
 8007998:	4604      	mov	r4, r0
 800799a:	4630      	mov	r0, r6
 800799c:	460d      	mov	r5, r1
 800799e:	f7f8 fd31 	bl	8000404 <__aeabi_i2d>
 80079a2:	a365      	add	r3, pc, #404	@ (adr r3, 8007b38 <_dtoa_r+0x2c0>)
 80079a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a8:	f7f8 fd96 	bl	80004d8 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	f7f8 fbda 	bl	800016c <__adddf3>
 80079b8:	4604      	mov	r4, r0
 80079ba:	460d      	mov	r5, r1
 80079bc:	f7f9 f83c 	bl	8000a38 <__aeabi_d2iz>
 80079c0:	2200      	movs	r2, #0
 80079c2:	4607      	mov	r7, r0
 80079c4:	2300      	movs	r3, #0
 80079c6:	4620      	mov	r0, r4
 80079c8:	4629      	mov	r1, r5
 80079ca:	f7f8 fff7 	bl	80009bc <__aeabi_dcmplt>
 80079ce:	b140      	cbz	r0, 80079e2 <_dtoa_r+0x16a>
 80079d0:	4638      	mov	r0, r7
 80079d2:	f7f8 fd17 	bl	8000404 <__aeabi_i2d>
 80079d6:	4622      	mov	r2, r4
 80079d8:	462b      	mov	r3, r5
 80079da:	f7f8 ffe5 	bl	80009a8 <__aeabi_dcmpeq>
 80079de:	b900      	cbnz	r0, 80079e2 <_dtoa_r+0x16a>
 80079e0:	3f01      	subs	r7, #1
 80079e2:	2f16      	cmp	r7, #22
 80079e4:	d853      	bhi.n	8007a8e <_dtoa_r+0x216>
 80079e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ea:	4b5c      	ldr	r3, [pc, #368]	@ (8007b5c <_dtoa_r+0x2e4>)
 80079ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	f7f8 ffe2 	bl	80009bc <__aeabi_dcmplt>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d04a      	beq.n	8007a92 <_dtoa_r+0x21a>
 80079fc:	2300      	movs	r3, #0
 80079fe:	3f01      	subs	r7, #1
 8007a00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a04:	1b9b      	subs	r3, r3, r6
 8007a06:	1e5a      	subs	r2, r3, #1
 8007a08:	bf46      	itte	mi
 8007a0a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a0e:	2300      	movmi	r3, #0
 8007a10:	f04f 0800 	movpl.w	r8, #0
 8007a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a16:	bf48      	it	mi
 8007a18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007a1a:	2f00      	cmp	r7, #0
 8007a1c:	db3b      	blt.n	8007a96 <_dtoa_r+0x21e>
 8007a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a20:	970e      	str	r7, [sp, #56]	@ 0x38
 8007a22:	443b      	add	r3, r7
 8007a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a26:	2300      	movs	r3, #0
 8007a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a2c:	2b09      	cmp	r3, #9
 8007a2e:	d866      	bhi.n	8007afe <_dtoa_r+0x286>
 8007a30:	2b05      	cmp	r3, #5
 8007a32:	bfc4      	itt	gt
 8007a34:	3b04      	subgt	r3, #4
 8007a36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007a38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a3a:	bfc8      	it	gt
 8007a3c:	2400      	movgt	r4, #0
 8007a3e:	f1a3 0302 	sub.w	r3, r3, #2
 8007a42:	bfd8      	it	le
 8007a44:	2401      	movle	r4, #1
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d864      	bhi.n	8007b14 <_dtoa_r+0x29c>
 8007a4a:	e8df f003 	tbb	[pc, r3]
 8007a4e:	382b      	.short	0x382b
 8007a50:	5636      	.short	0x5636
 8007a52:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007a56:	441e      	add	r6, r3
 8007a58:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	bfc1      	itttt	gt
 8007a60:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a64:	fa08 f803 	lslgt.w	r8, r8, r3
 8007a68:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a70:	bfd6      	itet	le
 8007a72:	f1c3 0320 	rsble	r3, r3, #32
 8007a76:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a7a:	fa04 f003 	lslle.w	r0, r4, r3
 8007a7e:	f7f8 fcb1 	bl	80003e4 <__aeabi_ui2d>
 8007a82:	2201      	movs	r2, #1
 8007a84:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a88:	3e01      	subs	r6, #1
 8007a8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8007a8c:	e775      	b.n	800797a <_dtoa_r+0x102>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7b6      	b.n	8007a00 <_dtoa_r+0x188>
 8007a92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007a94:	e7b5      	b.n	8007a02 <_dtoa_r+0x18a>
 8007a96:	427b      	negs	r3, r7
 8007a98:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	eba8 0807 	sub.w	r8, r8, r7
 8007aa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007aa2:	e7c2      	b.n	8007a2a <_dtoa_r+0x1b2>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	dc35      	bgt.n	8007b1a <_dtoa_r+0x2a2>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ab6:	9221      	str	r2, [sp, #132]	@ 0x84
 8007ab8:	e00b      	b.n	8007ad2 <_dtoa_r+0x25a>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e7f3      	b.n	8007aa6 <_dtoa_r+0x22e>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ac2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ac4:	18fb      	adds	r3, r7, r3
 8007ac6:	9308      	str	r3, [sp, #32]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	9307      	str	r3, [sp, #28]
 8007ace:	bfb8      	it	lt
 8007ad0:	2301      	movlt	r3, #1
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ada:	f102 0514 	add.w	r5, r2, #20
 8007ade:	429d      	cmp	r5, r3
 8007ae0:	d91f      	bls.n	8007b22 <_dtoa_r+0x2aa>
 8007ae2:	6041      	str	r1, [r0, #4]
 8007ae4:	4658      	mov	r0, fp
 8007ae6:	f000 fd8d 	bl	8008604 <_Balloc>
 8007aea:	4682      	mov	sl, r0
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d139      	bne.n	8007b64 <_dtoa_r+0x2ec>
 8007af0:	4602      	mov	r2, r0
 8007af2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007af6:	4b1a      	ldr	r3, [pc, #104]	@ (8007b60 <_dtoa_r+0x2e8>)
 8007af8:	e6d2      	b.n	80078a0 <_dtoa_r+0x28>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e7e0      	b.n	8007ac0 <_dtoa_r+0x248>
 8007afe:	2401      	movs	r4, #1
 8007b00:	2300      	movs	r3, #0
 8007b02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b04:	9320      	str	r3, [sp, #128]	@ 0x80
 8007b06:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b10:	2312      	movs	r3, #18
 8007b12:	e7d0      	b.n	8007ab6 <_dtoa_r+0x23e>
 8007b14:	2301      	movs	r3, #1
 8007b16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b18:	e7f5      	b.n	8007b06 <_dtoa_r+0x28e>
 8007b1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b20:	e7d7      	b.n	8007ad2 <_dtoa_r+0x25a>
 8007b22:	3101      	adds	r1, #1
 8007b24:	0052      	lsls	r2, r2, #1
 8007b26:	e7d8      	b.n	8007ada <_dtoa_r+0x262>
 8007b28:	636f4361 	.word	0x636f4361
 8007b2c:	3fd287a7 	.word	0x3fd287a7
 8007b30:	8b60c8b3 	.word	0x8b60c8b3
 8007b34:	3fc68a28 	.word	0x3fc68a28
 8007b38:	509f79fb 	.word	0x509f79fb
 8007b3c:	3fd34413 	.word	0x3fd34413
 8007b40:	0800bd14 	.word	0x0800bd14
 8007b44:	0800bd2b 	.word	0x0800bd2b
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	0800bd10 	.word	0x0800bd10
 8007b50:	0800bce4 	.word	0x0800bce4
 8007b54:	0800bce3 	.word	0x0800bce3
 8007b58:	3ff80000 	.word	0x3ff80000
 8007b5c:	0800be28 	.word	0x0800be28
 8007b60:	0800bd83 	.word	0x0800bd83
 8007b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b68:	6018      	str	r0, [r3, #0]
 8007b6a:	9b07      	ldr	r3, [sp, #28]
 8007b6c:	2b0e      	cmp	r3, #14
 8007b6e:	f200 80a4 	bhi.w	8007cba <_dtoa_r+0x442>
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	f000 80a1 	beq.w	8007cba <_dtoa_r+0x442>
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	dd33      	ble.n	8007be4 <_dtoa_r+0x36c>
 8007b7c:	4b86      	ldr	r3, [pc, #536]	@ (8007d98 <_dtoa_r+0x520>)
 8007b7e:	f007 020f 	and.w	r2, r7, #15
 8007b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b86:	05f8      	lsls	r0, r7, #23
 8007b88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b94:	d516      	bpl.n	8007bc4 <_dtoa_r+0x34c>
 8007b96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b9a:	4b80      	ldr	r3, [pc, #512]	@ (8007d9c <_dtoa_r+0x524>)
 8007b9c:	2603      	movs	r6, #3
 8007b9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ba2:	f7f8 fdc3 	bl	800072c <__aeabi_ddiv>
 8007ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007baa:	f004 040f 	and.w	r4, r4, #15
 8007bae:	4d7b      	ldr	r5, [pc, #492]	@ (8007d9c <_dtoa_r+0x524>)
 8007bb0:	b954      	cbnz	r4, 8007bc8 <_dtoa_r+0x350>
 8007bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bba:	f7f8 fdb7 	bl	800072c <__aeabi_ddiv>
 8007bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc2:	e028      	b.n	8007c16 <_dtoa_r+0x39e>
 8007bc4:	2602      	movs	r6, #2
 8007bc6:	e7f2      	b.n	8007bae <_dtoa_r+0x336>
 8007bc8:	07e1      	lsls	r1, r4, #31
 8007bca:	d508      	bpl.n	8007bde <_dtoa_r+0x366>
 8007bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bd4:	f7f8 fc80 	bl	80004d8 <__aeabi_dmul>
 8007bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bdc:	3601      	adds	r6, #1
 8007bde:	1064      	asrs	r4, r4, #1
 8007be0:	3508      	adds	r5, #8
 8007be2:	e7e5      	b.n	8007bb0 <_dtoa_r+0x338>
 8007be4:	f000 80d2 	beq.w	8007d8c <_dtoa_r+0x514>
 8007be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bec:	427c      	negs	r4, r7
 8007bee:	4b6a      	ldr	r3, [pc, #424]	@ (8007d98 <_dtoa_r+0x520>)
 8007bf0:	f004 020f 	and.w	r2, r4, #15
 8007bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	f7f8 fc6c 	bl	80004d8 <__aeabi_dmul>
 8007c00:	2602      	movs	r6, #2
 8007c02:	2300      	movs	r3, #0
 8007c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c08:	4d64      	ldr	r5, [pc, #400]	@ (8007d9c <_dtoa_r+0x524>)
 8007c0a:	1124      	asrs	r4, r4, #4
 8007c0c:	2c00      	cmp	r4, #0
 8007c0e:	f040 80b2 	bne.w	8007d76 <_dtoa_r+0x4fe>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1d3      	bne.n	8007bbe <_dtoa_r+0x346>
 8007c16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80b7 	beq.w	8007d90 <_dtoa_r+0x518>
 8007c22:	2200      	movs	r2, #0
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	4b5d      	ldr	r3, [pc, #372]	@ (8007da0 <_dtoa_r+0x528>)
 8007c2a:	f7f8 fec7 	bl	80009bc <__aeabi_dcmplt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f000 80ae 	beq.w	8007d90 <_dtoa_r+0x518>
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 80aa 	beq.w	8007d90 <_dtoa_r+0x518>
 8007c3c:	9b08      	ldr	r3, [sp, #32]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dd37      	ble.n	8007cb2 <_dtoa_r+0x43a>
 8007c42:	1e7b      	subs	r3, r7, #1
 8007c44:	4620      	mov	r0, r4
 8007c46:	9304      	str	r3, [sp, #16]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	4b55      	ldr	r3, [pc, #340]	@ (8007da4 <_dtoa_r+0x52c>)
 8007c4e:	f7f8 fc43 	bl	80004d8 <__aeabi_dmul>
 8007c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c56:	9c08      	ldr	r4, [sp, #32]
 8007c58:	3601      	adds	r6, #1
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7f8 fbd2 	bl	8000404 <__aeabi_i2d>
 8007c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c64:	f7f8 fc38 	bl	80004d8 <__aeabi_dmul>
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4b4f      	ldr	r3, [pc, #316]	@ (8007da8 <_dtoa_r+0x530>)
 8007c6c:	f7f8 fa7e 	bl	800016c <__adddf3>
 8007c70:	4605      	mov	r5, r0
 8007c72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	f040 809a 	bne.w	8007db0 <_dtoa_r+0x538>
 8007c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	4b4a      	ldr	r3, [pc, #296]	@ (8007dac <_dtoa_r+0x534>)
 8007c84:	f7f8 fa70 	bl	8000168 <__aeabi_dsub>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4633      	mov	r3, r6
 8007c94:	f7f8 feb0 	bl	80009f8 <__aeabi_dcmpgt>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	f040 828e 	bne.w	80081ba <_dtoa_r+0x942>
 8007c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca2:	462a      	mov	r2, r5
 8007ca4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ca8:	f7f8 fe88 	bl	80009bc <__aeabi_dcmplt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 8127 	bne.w	8007f00 <_dtoa_r+0x688>
 8007cb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007cb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f2c0 8163 	blt.w	8007f88 <_dtoa_r+0x710>
 8007cc2:	2f0e      	cmp	r7, #14
 8007cc4:	f300 8160 	bgt.w	8007f88 <_dtoa_r+0x710>
 8007cc8:	4b33      	ldr	r3, [pc, #204]	@ (8007d98 <_dtoa_r+0x520>)
 8007cca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cd2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007cd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	da03      	bge.n	8007ce4 <_dtoa_r+0x46c>
 8007cdc:	9b07      	ldr	r3, [sp, #28]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f340 8100 	ble.w	8007ee4 <_dtoa_r+0x66c>
 8007ce4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ce8:	4656      	mov	r6, sl
 8007cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 fd1b 	bl	800072c <__aeabi_ddiv>
 8007cf6:	f7f8 fe9f 	bl	8000a38 <__aeabi_d2iz>
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	f7f8 fb82 	bl	8000404 <__aeabi_i2d>
 8007d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d04:	f7f8 fbe8 	bl	80004d8 <__aeabi_dmul>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f7f8 fa2a 	bl	8000168 <__aeabi_dsub>
 8007d14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d18:	9d07      	ldr	r5, [sp, #28]
 8007d1a:	f806 4b01 	strb.w	r4, [r6], #1
 8007d1e:	eba6 040a 	sub.w	r4, r6, sl
 8007d22:	42a5      	cmp	r5, r4
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	f040 8116 	bne.w	8007f58 <_dtoa_r+0x6e0>
 8007d2c:	f7f8 fa1e 	bl	800016c <__adddf3>
 8007d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d34:	4604      	mov	r4, r0
 8007d36:	460d      	mov	r5, r1
 8007d38:	f7f8 fe5e 	bl	80009f8 <__aeabi_dcmpgt>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	f040 80f8 	bne.w	8007f32 <_dtoa_r+0x6ba>
 8007d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7f8 fe2d 	bl	80009a8 <__aeabi_dcmpeq>
 8007d4e:	b118      	cbz	r0, 8007d58 <_dtoa_r+0x4e0>
 8007d50:	f018 0f01 	tst.w	r8, #1
 8007d54:	f040 80ed 	bne.w	8007f32 <_dtoa_r+0x6ba>
 8007d58:	4649      	mov	r1, r9
 8007d5a:	4658      	mov	r0, fp
 8007d5c:	f000 fc92 	bl	8008684 <_Bfree>
 8007d60:	2300      	movs	r3, #0
 8007d62:	7033      	strb	r3, [r6, #0]
 8007d64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007d66:	3701      	adds	r7, #1
 8007d68:	601f      	str	r7, [r3, #0]
 8007d6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 8320 	beq.w	80083b2 <_dtoa_r+0xb3a>
 8007d72:	601e      	str	r6, [r3, #0]
 8007d74:	e31d      	b.n	80083b2 <_dtoa_r+0xb3a>
 8007d76:	07e2      	lsls	r2, r4, #31
 8007d78:	d505      	bpl.n	8007d86 <_dtoa_r+0x50e>
 8007d7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d7e:	f7f8 fbab 	bl	80004d8 <__aeabi_dmul>
 8007d82:	2301      	movs	r3, #1
 8007d84:	3601      	adds	r6, #1
 8007d86:	1064      	asrs	r4, r4, #1
 8007d88:	3508      	adds	r5, #8
 8007d8a:	e73f      	b.n	8007c0c <_dtoa_r+0x394>
 8007d8c:	2602      	movs	r6, #2
 8007d8e:	e742      	b.n	8007c16 <_dtoa_r+0x39e>
 8007d90:	9c07      	ldr	r4, [sp, #28]
 8007d92:	9704      	str	r7, [sp, #16]
 8007d94:	e761      	b.n	8007c5a <_dtoa_r+0x3e2>
 8007d96:	bf00      	nop
 8007d98:	0800be28 	.word	0x0800be28
 8007d9c:	0800be00 	.word	0x0800be00
 8007da0:	3ff00000 	.word	0x3ff00000
 8007da4:	40240000 	.word	0x40240000
 8007da8:	401c0000 	.word	0x401c0000
 8007dac:	40140000 	.word	0x40140000
 8007db0:	4b70      	ldr	r3, [pc, #448]	@ (8007f74 <_dtoa_r+0x6fc>)
 8007db2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007db4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007db8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dbc:	4454      	add	r4, sl
 8007dbe:	2900      	cmp	r1, #0
 8007dc0:	d045      	beq.n	8007e4e <_dtoa_r+0x5d6>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	496c      	ldr	r1, [pc, #432]	@ (8007f78 <_dtoa_r+0x700>)
 8007dc6:	f7f8 fcb1 	bl	800072c <__aeabi_ddiv>
 8007dca:	4633      	mov	r3, r6
 8007dcc:	462a      	mov	r2, r5
 8007dce:	f7f8 f9cb 	bl	8000168 <__aeabi_dsub>
 8007dd2:	4656      	mov	r6, sl
 8007dd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ddc:	f7f8 fe2c 	bl	8000a38 <__aeabi_d2iz>
 8007de0:	4605      	mov	r5, r0
 8007de2:	f7f8 fb0f 	bl	8000404 <__aeabi_i2d>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dee:	f7f8 f9bb 	bl	8000168 <__aeabi_dsub>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	3530      	adds	r5, #48	@ 0x30
 8007df8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e00:	f806 5b01 	strb.w	r5, [r6], #1
 8007e04:	f7f8 fdda 	bl	80009bc <__aeabi_dcmplt>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d163      	bne.n	8007ed4 <_dtoa_r+0x65c>
 8007e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e10:	2000      	movs	r0, #0
 8007e12:	495a      	ldr	r1, [pc, #360]	@ (8007f7c <_dtoa_r+0x704>)
 8007e14:	f7f8 f9a8 	bl	8000168 <__aeabi_dsub>
 8007e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e1c:	f7f8 fdce 	bl	80009bc <__aeabi_dcmplt>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f040 8087 	bne.w	8007f34 <_dtoa_r+0x6bc>
 8007e26:	42a6      	cmp	r6, r4
 8007e28:	f43f af43 	beq.w	8007cb2 <_dtoa_r+0x43a>
 8007e2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e30:	2200      	movs	r2, #0
 8007e32:	4b53      	ldr	r3, [pc, #332]	@ (8007f80 <_dtoa_r+0x708>)
 8007e34:	f7f8 fb50 	bl	80004d8 <__aeabi_dmul>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e42:	4b4f      	ldr	r3, [pc, #316]	@ (8007f80 <_dtoa_r+0x708>)
 8007e44:	f7f8 fb48 	bl	80004d8 <__aeabi_dmul>
 8007e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e4c:	e7c4      	b.n	8007dd8 <_dtoa_r+0x560>
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	f7f8 fb41 	bl	80004d8 <__aeabi_dmul>
 8007e56:	4656      	mov	r6, sl
 8007e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e5c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e62:	f7f8 fde9 	bl	8000a38 <__aeabi_d2iz>
 8007e66:	4605      	mov	r5, r0
 8007e68:	f7f8 facc 	bl	8000404 <__aeabi_i2d>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e74:	f7f8 f978 	bl	8000168 <__aeabi_dsub>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	3530      	adds	r5, #48	@ 0x30
 8007e7e:	f806 5b01 	strb.w	r5, [r6], #1
 8007e82:	42a6      	cmp	r6, r4
 8007e84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	d124      	bne.n	8007ed8 <_dtoa_r+0x660>
 8007e8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e92:	4b39      	ldr	r3, [pc, #228]	@ (8007f78 <_dtoa_r+0x700>)
 8007e94:	f7f8 f96a 	bl	800016c <__adddf3>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea0:	f7f8 fdaa 	bl	80009f8 <__aeabi_dcmpgt>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d145      	bne.n	8007f34 <_dtoa_r+0x6bc>
 8007ea8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eac:	2000      	movs	r0, #0
 8007eae:	4932      	ldr	r1, [pc, #200]	@ (8007f78 <_dtoa_r+0x700>)
 8007eb0:	f7f8 f95a 	bl	8000168 <__aeabi_dsub>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ebc:	f7f8 fd7e 	bl	80009bc <__aeabi_dcmplt>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f43f aef6 	beq.w	8007cb2 <_dtoa_r+0x43a>
 8007ec6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007ec8:	1e73      	subs	r3, r6, #1
 8007eca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ecc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ed0:	2b30      	cmp	r3, #48	@ 0x30
 8007ed2:	d0f8      	beq.n	8007ec6 <_dtoa_r+0x64e>
 8007ed4:	9f04      	ldr	r7, [sp, #16]
 8007ed6:	e73f      	b.n	8007d58 <_dtoa_r+0x4e0>
 8007ed8:	4b29      	ldr	r3, [pc, #164]	@ (8007f80 <_dtoa_r+0x708>)
 8007eda:	f7f8 fafd 	bl	80004d8 <__aeabi_dmul>
 8007ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee2:	e7bc      	b.n	8007e5e <_dtoa_r+0x5e6>
 8007ee4:	d10c      	bne.n	8007f00 <_dtoa_r+0x688>
 8007ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eea:	2200      	movs	r2, #0
 8007eec:	4b25      	ldr	r3, [pc, #148]	@ (8007f84 <_dtoa_r+0x70c>)
 8007eee:	f7f8 faf3 	bl	80004d8 <__aeabi_dmul>
 8007ef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ef6:	f7f8 fd75 	bl	80009e4 <__aeabi_dcmpge>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f000 815b 	beq.w	80081b6 <_dtoa_r+0x93e>
 8007f00:	2400      	movs	r4, #0
 8007f02:	4625      	mov	r5, r4
 8007f04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f06:	4656      	mov	r6, sl
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	2700      	movs	r7, #0
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4658      	mov	r0, fp
 8007f12:	f000 fbb7 	bl	8008684 <_Bfree>
 8007f16:	2d00      	cmp	r5, #0
 8007f18:	d0dc      	beq.n	8007ed4 <_dtoa_r+0x65c>
 8007f1a:	b12f      	cbz	r7, 8007f28 <_dtoa_r+0x6b0>
 8007f1c:	42af      	cmp	r7, r5
 8007f1e:	d003      	beq.n	8007f28 <_dtoa_r+0x6b0>
 8007f20:	4639      	mov	r1, r7
 8007f22:	4658      	mov	r0, fp
 8007f24:	f000 fbae 	bl	8008684 <_Bfree>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4658      	mov	r0, fp
 8007f2c:	f000 fbaa 	bl	8008684 <_Bfree>
 8007f30:	e7d0      	b.n	8007ed4 <_dtoa_r+0x65c>
 8007f32:	9704      	str	r7, [sp, #16]
 8007f34:	4633      	mov	r3, r6
 8007f36:	461e      	mov	r6, r3
 8007f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f3c:	2a39      	cmp	r2, #57	@ 0x39
 8007f3e:	d107      	bne.n	8007f50 <_dtoa_r+0x6d8>
 8007f40:	459a      	cmp	sl, r3
 8007f42:	d1f8      	bne.n	8007f36 <_dtoa_r+0x6be>
 8007f44:	9a04      	ldr	r2, [sp, #16]
 8007f46:	3201      	adds	r2, #1
 8007f48:	9204      	str	r2, [sp, #16]
 8007f4a:	2230      	movs	r2, #48	@ 0x30
 8007f4c:	f88a 2000 	strb.w	r2, [sl]
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	3201      	adds	r2, #1
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	e7bd      	b.n	8007ed4 <_dtoa_r+0x65c>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4b09      	ldr	r3, [pc, #36]	@ (8007f80 <_dtoa_r+0x708>)
 8007f5c:	f7f8 fabc 	bl	80004d8 <__aeabi_dmul>
 8007f60:	2200      	movs	r2, #0
 8007f62:	2300      	movs	r3, #0
 8007f64:	4604      	mov	r4, r0
 8007f66:	460d      	mov	r5, r1
 8007f68:	f7f8 fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f43f aebc 	beq.w	8007cea <_dtoa_r+0x472>
 8007f72:	e6f1      	b.n	8007d58 <_dtoa_r+0x4e0>
 8007f74:	0800be28 	.word	0x0800be28
 8007f78:	3fe00000 	.word	0x3fe00000
 8007f7c:	3ff00000 	.word	0x3ff00000
 8007f80:	40240000 	.word	0x40240000
 8007f84:	40140000 	.word	0x40140000
 8007f88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	f000 80db 	beq.w	8008146 <_dtoa_r+0x8ce>
 8007f90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f92:	2a01      	cmp	r2, #1
 8007f94:	f300 80bf 	bgt.w	8008116 <_dtoa_r+0x89e>
 8007f98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007f9a:	2a00      	cmp	r2, #0
 8007f9c:	f000 80b7 	beq.w	800810e <_dtoa_r+0x896>
 8007fa0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007fa4:	4646      	mov	r6, r8
 8007fa6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007faa:	2101      	movs	r1, #1
 8007fac:	441a      	add	r2, r3
 8007fae:	4658      	mov	r0, fp
 8007fb0:	4498      	add	r8, r3
 8007fb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fb4:	f000 fc1a 	bl	80087ec <__i2b>
 8007fb8:	4605      	mov	r5, r0
 8007fba:	b15e      	cbz	r6, 8007fd4 <_dtoa_r+0x75c>
 8007fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd08      	ble.n	8007fd4 <_dtoa_r+0x75c>
 8007fc2:	42b3      	cmp	r3, r6
 8007fc4:	bfa8      	it	ge
 8007fc6:	4633      	movge	r3, r6
 8007fc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fca:	eba8 0803 	sub.w	r8, r8, r3
 8007fce:	1af6      	subs	r6, r6, r3
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fd6:	b1f3      	cbz	r3, 8008016 <_dtoa_r+0x79e>
 8007fd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 80b7 	beq.w	800814e <_dtoa_r+0x8d6>
 8007fe0:	b18c      	cbz	r4, 8008006 <_dtoa_r+0x78e>
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	4658      	mov	r0, fp
 8007fe8:	f000 fcbe 	bl	8008968 <__pow5mult>
 8007fec:	464a      	mov	r2, r9
 8007fee:	4601      	mov	r1, r0
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	4658      	mov	r0, fp
 8007ff4:	f000 fc10 	bl	8008818 <__multiply>
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	9004      	str	r0, [sp, #16]
 8007ffc:	4658      	mov	r0, fp
 8007ffe:	f000 fb41 	bl	8008684 <_Bfree>
 8008002:	9b04      	ldr	r3, [sp, #16]
 8008004:	4699      	mov	r9, r3
 8008006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008008:	1b1a      	subs	r2, r3, r4
 800800a:	d004      	beq.n	8008016 <_dtoa_r+0x79e>
 800800c:	4649      	mov	r1, r9
 800800e:	4658      	mov	r0, fp
 8008010:	f000 fcaa 	bl	8008968 <__pow5mult>
 8008014:	4681      	mov	r9, r0
 8008016:	2101      	movs	r1, #1
 8008018:	4658      	mov	r0, fp
 800801a:	f000 fbe7 	bl	80087ec <__i2b>
 800801e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008020:	4604      	mov	r4, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 81c9 	beq.w	80083ba <_dtoa_r+0xb42>
 8008028:	461a      	mov	r2, r3
 800802a:	4601      	mov	r1, r0
 800802c:	4658      	mov	r0, fp
 800802e:	f000 fc9b 	bl	8008968 <__pow5mult>
 8008032:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008034:	4604      	mov	r4, r0
 8008036:	2b01      	cmp	r3, #1
 8008038:	f300 808f 	bgt.w	800815a <_dtoa_r+0x8e2>
 800803c:	9b02      	ldr	r3, [sp, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f040 8087 	bne.w	8008152 <_dtoa_r+0x8da>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800804a:	2b00      	cmp	r3, #0
 800804c:	f040 8083 	bne.w	8008156 <_dtoa_r+0x8de>
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008056:	0d1b      	lsrs	r3, r3, #20
 8008058:	051b      	lsls	r3, r3, #20
 800805a:	b12b      	cbz	r3, 8008068 <_dtoa_r+0x7f0>
 800805c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805e:	f108 0801 	add.w	r8, r8, #1
 8008062:	3301      	adds	r3, #1
 8008064:	9309      	str	r3, [sp, #36]	@ 0x24
 8008066:	2301      	movs	r3, #1
 8008068:	930a      	str	r3, [sp, #40]	@ 0x28
 800806a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 81aa 	beq.w	80083c6 <_dtoa_r+0xb4e>
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008078:	6918      	ldr	r0, [r3, #16]
 800807a:	f000 fb6b 	bl	8008754 <__hi0bits>
 800807e:	f1c0 0020 	rsb	r0, r0, #32
 8008082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008084:	4418      	add	r0, r3
 8008086:	f010 001f 	ands.w	r0, r0, #31
 800808a:	d071      	beq.n	8008170 <_dtoa_r+0x8f8>
 800808c:	f1c0 0320 	rsb	r3, r0, #32
 8008090:	2b04      	cmp	r3, #4
 8008092:	dd65      	ble.n	8008160 <_dtoa_r+0x8e8>
 8008094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008096:	f1c0 001c 	rsb	r0, r0, #28
 800809a:	4403      	add	r3, r0
 800809c:	4480      	add	r8, r0
 800809e:	4406      	add	r6, r0
 80080a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080a2:	f1b8 0f00 	cmp.w	r8, #0
 80080a6:	dd05      	ble.n	80080b4 <_dtoa_r+0x83c>
 80080a8:	4649      	mov	r1, r9
 80080aa:	4642      	mov	r2, r8
 80080ac:	4658      	mov	r0, fp
 80080ae:	f000 fcb5 	bl	8008a1c <__lshift>
 80080b2:	4681      	mov	r9, r0
 80080b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	dd05      	ble.n	80080c6 <_dtoa_r+0x84e>
 80080ba:	4621      	mov	r1, r4
 80080bc:	461a      	mov	r2, r3
 80080be:	4658      	mov	r0, fp
 80080c0:	f000 fcac 	bl	8008a1c <__lshift>
 80080c4:	4604      	mov	r4, r0
 80080c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d053      	beq.n	8008174 <_dtoa_r+0x8fc>
 80080cc:	4621      	mov	r1, r4
 80080ce:	4648      	mov	r0, r9
 80080d0:	f000 fd10 	bl	8008af4 <__mcmp>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	da4d      	bge.n	8008174 <_dtoa_r+0x8fc>
 80080d8:	1e7b      	subs	r3, r7, #1
 80080da:	4649      	mov	r1, r9
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	220a      	movs	r2, #10
 80080e0:	2300      	movs	r3, #0
 80080e2:	4658      	mov	r0, fp
 80080e4:	f000 faf0 	bl	80086c8 <__multadd>
 80080e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080ea:	4681      	mov	r9, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 816c 	beq.w	80083ca <_dtoa_r+0xb52>
 80080f2:	2300      	movs	r3, #0
 80080f4:	4629      	mov	r1, r5
 80080f6:	220a      	movs	r2, #10
 80080f8:	4658      	mov	r0, fp
 80080fa:	f000 fae5 	bl	80086c8 <__multadd>
 80080fe:	9b08      	ldr	r3, [sp, #32]
 8008100:	4605      	mov	r5, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	dc61      	bgt.n	80081ca <_dtoa_r+0x952>
 8008106:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008108:	2b02      	cmp	r3, #2
 800810a:	dc3b      	bgt.n	8008184 <_dtoa_r+0x90c>
 800810c:	e05d      	b.n	80081ca <_dtoa_r+0x952>
 800810e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008110:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008114:	e746      	b.n	8007fa4 <_dtoa_r+0x72c>
 8008116:	9b07      	ldr	r3, [sp, #28]
 8008118:	1e5c      	subs	r4, r3, #1
 800811a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800811c:	42a3      	cmp	r3, r4
 800811e:	bfbf      	itttt	lt
 8008120:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008122:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008124:	1ae3      	sublt	r3, r4, r3
 8008126:	18d2      	addlt	r2, r2, r3
 8008128:	bfa8      	it	ge
 800812a:	1b1c      	subge	r4, r3, r4
 800812c:	9b07      	ldr	r3, [sp, #28]
 800812e:	bfbe      	ittt	lt
 8008130:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008132:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008134:	2400      	movlt	r4, #0
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfb5      	itete	lt
 800813a:	eba8 0603 	sublt.w	r6, r8, r3
 800813e:	4646      	movge	r6, r8
 8008140:	2300      	movlt	r3, #0
 8008142:	9b07      	ldrge	r3, [sp, #28]
 8008144:	e730      	b.n	8007fa8 <_dtoa_r+0x730>
 8008146:	4646      	mov	r6, r8
 8008148:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800814a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800814c:	e735      	b.n	8007fba <_dtoa_r+0x742>
 800814e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008150:	e75c      	b.n	800800c <_dtoa_r+0x794>
 8008152:	2300      	movs	r3, #0
 8008154:	e788      	b.n	8008068 <_dtoa_r+0x7f0>
 8008156:	9b02      	ldr	r3, [sp, #8]
 8008158:	e786      	b.n	8008068 <_dtoa_r+0x7f0>
 800815a:	2300      	movs	r3, #0
 800815c:	930a      	str	r3, [sp, #40]	@ 0x28
 800815e:	e788      	b.n	8008072 <_dtoa_r+0x7fa>
 8008160:	d09f      	beq.n	80080a2 <_dtoa_r+0x82a>
 8008162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008164:	331c      	adds	r3, #28
 8008166:	441a      	add	r2, r3
 8008168:	4498      	add	r8, r3
 800816a:	441e      	add	r6, r3
 800816c:	9209      	str	r2, [sp, #36]	@ 0x24
 800816e:	e798      	b.n	80080a2 <_dtoa_r+0x82a>
 8008170:	4603      	mov	r3, r0
 8008172:	e7f6      	b.n	8008162 <_dtoa_r+0x8ea>
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	9704      	str	r7, [sp, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	dc20      	bgt.n	80081be <_dtoa_r+0x946>
 800817c:	9308      	str	r3, [sp, #32]
 800817e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008180:	2b02      	cmp	r3, #2
 8008182:	dd1e      	ble.n	80081c2 <_dtoa_r+0x94a>
 8008184:	9b08      	ldr	r3, [sp, #32]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f47f aebc 	bne.w	8007f04 <_dtoa_r+0x68c>
 800818c:	4621      	mov	r1, r4
 800818e:	2205      	movs	r2, #5
 8008190:	4658      	mov	r0, fp
 8008192:	f000 fa99 	bl	80086c8 <__multadd>
 8008196:	4601      	mov	r1, r0
 8008198:	4604      	mov	r4, r0
 800819a:	4648      	mov	r0, r9
 800819c:	f000 fcaa 	bl	8008af4 <__mcmp>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	f77f aeaf 	ble.w	8007f04 <_dtoa_r+0x68c>
 80081a6:	2331      	movs	r3, #49	@ 0x31
 80081a8:	4656      	mov	r6, sl
 80081aa:	f806 3b01 	strb.w	r3, [r6], #1
 80081ae:	9b04      	ldr	r3, [sp, #16]
 80081b0:	3301      	adds	r3, #1
 80081b2:	9304      	str	r3, [sp, #16]
 80081b4:	e6aa      	b.n	8007f0c <_dtoa_r+0x694>
 80081b6:	9c07      	ldr	r4, [sp, #28]
 80081b8:	9704      	str	r7, [sp, #16]
 80081ba:	4625      	mov	r5, r4
 80081bc:	e7f3      	b.n	80081a6 <_dtoa_r+0x92e>
 80081be:	9b07      	ldr	r3, [sp, #28]
 80081c0:	9308      	str	r3, [sp, #32]
 80081c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 8104 	beq.w	80083d2 <_dtoa_r+0xb5a>
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	dd05      	ble.n	80081da <_dtoa_r+0x962>
 80081ce:	4629      	mov	r1, r5
 80081d0:	4632      	mov	r2, r6
 80081d2:	4658      	mov	r0, fp
 80081d4:	f000 fc22 	bl	8008a1c <__lshift>
 80081d8:	4605      	mov	r5, r0
 80081da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d05a      	beq.n	8008296 <_dtoa_r+0xa1e>
 80081e0:	4658      	mov	r0, fp
 80081e2:	6869      	ldr	r1, [r5, #4]
 80081e4:	f000 fa0e 	bl	8008604 <_Balloc>
 80081e8:	4606      	mov	r6, r0
 80081ea:	b928      	cbnz	r0, 80081f8 <_dtoa_r+0x980>
 80081ec:	4602      	mov	r2, r0
 80081ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80081f2:	4b83      	ldr	r3, [pc, #524]	@ (8008400 <_dtoa_r+0xb88>)
 80081f4:	f7ff bb54 	b.w	80078a0 <_dtoa_r+0x28>
 80081f8:	692a      	ldr	r2, [r5, #16]
 80081fa:	f105 010c 	add.w	r1, r5, #12
 80081fe:	3202      	adds	r2, #2
 8008200:	0092      	lsls	r2, r2, #2
 8008202:	300c      	adds	r0, #12
 8008204:	f000 ffa8 	bl	8009158 <memcpy>
 8008208:	2201      	movs	r2, #1
 800820a:	4631      	mov	r1, r6
 800820c:	4658      	mov	r0, fp
 800820e:	f000 fc05 	bl	8008a1c <__lshift>
 8008212:	462f      	mov	r7, r5
 8008214:	4605      	mov	r5, r0
 8008216:	f10a 0301 	add.w	r3, sl, #1
 800821a:	9307      	str	r3, [sp, #28]
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	4453      	add	r3, sl
 8008220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008222:	9b02      	ldr	r3, [sp, #8]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	930a      	str	r3, [sp, #40]	@ 0x28
 800822a:	9b07      	ldr	r3, [sp, #28]
 800822c:	4621      	mov	r1, r4
 800822e:	3b01      	subs	r3, #1
 8008230:	4648      	mov	r0, r9
 8008232:	9302      	str	r3, [sp, #8]
 8008234:	f7ff fa95 	bl	8007762 <quorem>
 8008238:	4639      	mov	r1, r7
 800823a:	9008      	str	r0, [sp, #32]
 800823c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008240:	4648      	mov	r0, r9
 8008242:	f000 fc57 	bl	8008af4 <__mcmp>
 8008246:	462a      	mov	r2, r5
 8008248:	9009      	str	r0, [sp, #36]	@ 0x24
 800824a:	4621      	mov	r1, r4
 800824c:	4658      	mov	r0, fp
 800824e:	f000 fc6d 	bl	8008b2c <__mdiff>
 8008252:	68c2      	ldr	r2, [r0, #12]
 8008254:	4606      	mov	r6, r0
 8008256:	bb02      	cbnz	r2, 800829a <_dtoa_r+0xa22>
 8008258:	4601      	mov	r1, r0
 800825a:	4648      	mov	r0, r9
 800825c:	f000 fc4a 	bl	8008af4 <__mcmp>
 8008260:	4602      	mov	r2, r0
 8008262:	4631      	mov	r1, r6
 8008264:	4658      	mov	r0, fp
 8008266:	920c      	str	r2, [sp, #48]	@ 0x30
 8008268:	f000 fa0c 	bl	8008684 <_Bfree>
 800826c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800826e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008270:	9e07      	ldr	r6, [sp, #28]
 8008272:	ea43 0102 	orr.w	r1, r3, r2
 8008276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008278:	4319      	orrs	r1, r3
 800827a:	d110      	bne.n	800829e <_dtoa_r+0xa26>
 800827c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008280:	d029      	beq.n	80082d6 <_dtoa_r+0xa5e>
 8008282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008284:	2b00      	cmp	r3, #0
 8008286:	dd02      	ble.n	800828e <_dtoa_r+0xa16>
 8008288:	9b08      	ldr	r3, [sp, #32]
 800828a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800828e:	9b02      	ldr	r3, [sp, #8]
 8008290:	f883 8000 	strb.w	r8, [r3]
 8008294:	e63b      	b.n	8007f0e <_dtoa_r+0x696>
 8008296:	4628      	mov	r0, r5
 8008298:	e7bb      	b.n	8008212 <_dtoa_r+0x99a>
 800829a:	2201      	movs	r2, #1
 800829c:	e7e1      	b.n	8008262 <_dtoa_r+0x9ea>
 800829e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	db04      	blt.n	80082ae <_dtoa_r+0xa36>
 80082a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80082a6:	430b      	orrs	r3, r1
 80082a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082aa:	430b      	orrs	r3, r1
 80082ac:	d120      	bne.n	80082f0 <_dtoa_r+0xa78>
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	dded      	ble.n	800828e <_dtoa_r+0xa16>
 80082b2:	4649      	mov	r1, r9
 80082b4:	2201      	movs	r2, #1
 80082b6:	4658      	mov	r0, fp
 80082b8:	f000 fbb0 	bl	8008a1c <__lshift>
 80082bc:	4621      	mov	r1, r4
 80082be:	4681      	mov	r9, r0
 80082c0:	f000 fc18 	bl	8008af4 <__mcmp>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	dc03      	bgt.n	80082d0 <_dtoa_r+0xa58>
 80082c8:	d1e1      	bne.n	800828e <_dtoa_r+0xa16>
 80082ca:	f018 0f01 	tst.w	r8, #1
 80082ce:	d0de      	beq.n	800828e <_dtoa_r+0xa16>
 80082d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082d4:	d1d8      	bne.n	8008288 <_dtoa_r+0xa10>
 80082d6:	2339      	movs	r3, #57	@ 0x39
 80082d8:	9a02      	ldr	r2, [sp, #8]
 80082da:	7013      	strb	r3, [r2, #0]
 80082dc:	4633      	mov	r3, r6
 80082de:	461e      	mov	r6, r3
 80082e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	2a39      	cmp	r2, #57	@ 0x39
 80082e8:	d052      	beq.n	8008390 <_dtoa_r+0xb18>
 80082ea:	3201      	adds	r2, #1
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	e60e      	b.n	8007f0e <_dtoa_r+0x696>
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	dd07      	ble.n	8008304 <_dtoa_r+0xa8c>
 80082f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082f8:	d0ed      	beq.n	80082d6 <_dtoa_r+0xa5e>
 80082fa:	9a02      	ldr	r2, [sp, #8]
 80082fc:	f108 0301 	add.w	r3, r8, #1
 8008300:	7013      	strb	r3, [r2, #0]
 8008302:	e604      	b.n	8007f0e <_dtoa_r+0x696>
 8008304:	9b07      	ldr	r3, [sp, #28]
 8008306:	9a07      	ldr	r2, [sp, #28]
 8008308:	f803 8c01 	strb.w	r8, [r3, #-1]
 800830c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800830e:	4293      	cmp	r3, r2
 8008310:	d028      	beq.n	8008364 <_dtoa_r+0xaec>
 8008312:	4649      	mov	r1, r9
 8008314:	2300      	movs	r3, #0
 8008316:	220a      	movs	r2, #10
 8008318:	4658      	mov	r0, fp
 800831a:	f000 f9d5 	bl	80086c8 <__multadd>
 800831e:	42af      	cmp	r7, r5
 8008320:	4681      	mov	r9, r0
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	f04f 020a 	mov.w	r2, #10
 800832a:	4639      	mov	r1, r7
 800832c:	4658      	mov	r0, fp
 800832e:	d107      	bne.n	8008340 <_dtoa_r+0xac8>
 8008330:	f000 f9ca 	bl	80086c8 <__multadd>
 8008334:	4607      	mov	r7, r0
 8008336:	4605      	mov	r5, r0
 8008338:	9b07      	ldr	r3, [sp, #28]
 800833a:	3301      	adds	r3, #1
 800833c:	9307      	str	r3, [sp, #28]
 800833e:	e774      	b.n	800822a <_dtoa_r+0x9b2>
 8008340:	f000 f9c2 	bl	80086c8 <__multadd>
 8008344:	4629      	mov	r1, r5
 8008346:	4607      	mov	r7, r0
 8008348:	2300      	movs	r3, #0
 800834a:	220a      	movs	r2, #10
 800834c:	4658      	mov	r0, fp
 800834e:	f000 f9bb 	bl	80086c8 <__multadd>
 8008352:	4605      	mov	r5, r0
 8008354:	e7f0      	b.n	8008338 <_dtoa_r+0xac0>
 8008356:	9b08      	ldr	r3, [sp, #32]
 8008358:	2700      	movs	r7, #0
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfcc      	ite	gt
 800835e:	461e      	movgt	r6, r3
 8008360:	2601      	movle	r6, #1
 8008362:	4456      	add	r6, sl
 8008364:	4649      	mov	r1, r9
 8008366:	2201      	movs	r2, #1
 8008368:	4658      	mov	r0, fp
 800836a:	f000 fb57 	bl	8008a1c <__lshift>
 800836e:	4621      	mov	r1, r4
 8008370:	4681      	mov	r9, r0
 8008372:	f000 fbbf 	bl	8008af4 <__mcmp>
 8008376:	2800      	cmp	r0, #0
 8008378:	dcb0      	bgt.n	80082dc <_dtoa_r+0xa64>
 800837a:	d102      	bne.n	8008382 <_dtoa_r+0xb0a>
 800837c:	f018 0f01 	tst.w	r8, #1
 8008380:	d1ac      	bne.n	80082dc <_dtoa_r+0xa64>
 8008382:	4633      	mov	r3, r6
 8008384:	461e      	mov	r6, r3
 8008386:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800838a:	2a30      	cmp	r2, #48	@ 0x30
 800838c:	d0fa      	beq.n	8008384 <_dtoa_r+0xb0c>
 800838e:	e5be      	b.n	8007f0e <_dtoa_r+0x696>
 8008390:	459a      	cmp	sl, r3
 8008392:	d1a4      	bne.n	80082de <_dtoa_r+0xa66>
 8008394:	9b04      	ldr	r3, [sp, #16]
 8008396:	3301      	adds	r3, #1
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	2331      	movs	r3, #49	@ 0x31
 800839c:	f88a 3000 	strb.w	r3, [sl]
 80083a0:	e5b5      	b.n	8007f0e <_dtoa_r+0x696>
 80083a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80083a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008404 <_dtoa_r+0xb8c>
 80083a8:	b11b      	cbz	r3, 80083b2 <_dtoa_r+0xb3a>
 80083aa:	f10a 0308 	add.w	r3, sl, #8
 80083ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	4650      	mov	r0, sl
 80083b4:	b017      	add	sp, #92	@ 0x5c
 80083b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083bc:	2b01      	cmp	r3, #1
 80083be:	f77f ae3d 	ble.w	800803c <_dtoa_r+0x7c4>
 80083c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c6:	2001      	movs	r0, #1
 80083c8:	e65b      	b.n	8008082 <_dtoa_r+0x80a>
 80083ca:	9b08      	ldr	r3, [sp, #32]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f77f aed6 	ble.w	800817e <_dtoa_r+0x906>
 80083d2:	4656      	mov	r6, sl
 80083d4:	4621      	mov	r1, r4
 80083d6:	4648      	mov	r0, r9
 80083d8:	f7ff f9c3 	bl	8007762 <quorem>
 80083dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083e0:	9b08      	ldr	r3, [sp, #32]
 80083e2:	f806 8b01 	strb.w	r8, [r6], #1
 80083e6:	eba6 020a 	sub.w	r2, r6, sl
 80083ea:	4293      	cmp	r3, r2
 80083ec:	ddb3      	ble.n	8008356 <_dtoa_r+0xade>
 80083ee:	4649      	mov	r1, r9
 80083f0:	2300      	movs	r3, #0
 80083f2:	220a      	movs	r2, #10
 80083f4:	4658      	mov	r0, fp
 80083f6:	f000 f967 	bl	80086c8 <__multadd>
 80083fa:	4681      	mov	r9, r0
 80083fc:	e7ea      	b.n	80083d4 <_dtoa_r+0xb5c>
 80083fe:	bf00      	nop
 8008400:	0800bd83 	.word	0x0800bd83
 8008404:	0800bd07 	.word	0x0800bd07

08008408 <_free_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4605      	mov	r5, r0
 800840c:	2900      	cmp	r1, #0
 800840e:	d040      	beq.n	8008492 <_free_r+0x8a>
 8008410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008414:	1f0c      	subs	r4, r1, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfb8      	it	lt
 800841a:	18e4      	addlt	r4, r4, r3
 800841c:	f000 f8e6 	bl	80085ec <__malloc_lock>
 8008420:	4a1c      	ldr	r2, [pc, #112]	@ (8008494 <_free_r+0x8c>)
 8008422:	6813      	ldr	r3, [r2, #0]
 8008424:	b933      	cbnz	r3, 8008434 <_free_r+0x2c>
 8008426:	6063      	str	r3, [r4, #4]
 8008428:	6014      	str	r4, [r2, #0]
 800842a:	4628      	mov	r0, r5
 800842c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008430:	f000 b8e2 	b.w	80085f8 <__malloc_unlock>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d908      	bls.n	800844a <_free_r+0x42>
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	1821      	adds	r1, r4, r0
 800843c:	428b      	cmp	r3, r1
 800843e:	bf01      	itttt	eq
 8008440:	6819      	ldreq	r1, [r3, #0]
 8008442:	685b      	ldreq	r3, [r3, #4]
 8008444:	1809      	addeq	r1, r1, r0
 8008446:	6021      	streq	r1, [r4, #0]
 8008448:	e7ed      	b.n	8008426 <_free_r+0x1e>
 800844a:	461a      	mov	r2, r3
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	b10b      	cbz	r3, 8008454 <_free_r+0x4c>
 8008450:	42a3      	cmp	r3, r4
 8008452:	d9fa      	bls.n	800844a <_free_r+0x42>
 8008454:	6811      	ldr	r1, [r2, #0]
 8008456:	1850      	adds	r0, r2, r1
 8008458:	42a0      	cmp	r0, r4
 800845a:	d10b      	bne.n	8008474 <_free_r+0x6c>
 800845c:	6820      	ldr	r0, [r4, #0]
 800845e:	4401      	add	r1, r0
 8008460:	1850      	adds	r0, r2, r1
 8008462:	4283      	cmp	r3, r0
 8008464:	6011      	str	r1, [r2, #0]
 8008466:	d1e0      	bne.n	800842a <_free_r+0x22>
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	4408      	add	r0, r1
 800846e:	6010      	str	r0, [r2, #0]
 8008470:	6053      	str	r3, [r2, #4]
 8008472:	e7da      	b.n	800842a <_free_r+0x22>
 8008474:	d902      	bls.n	800847c <_free_r+0x74>
 8008476:	230c      	movs	r3, #12
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	e7d6      	b.n	800842a <_free_r+0x22>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	1821      	adds	r1, r4, r0
 8008480:	428b      	cmp	r3, r1
 8008482:	bf01      	itttt	eq
 8008484:	6819      	ldreq	r1, [r3, #0]
 8008486:	685b      	ldreq	r3, [r3, #4]
 8008488:	1809      	addeq	r1, r1, r0
 800848a:	6021      	streq	r1, [r4, #0]
 800848c:	6063      	str	r3, [r4, #4]
 800848e:	6054      	str	r4, [r2, #4]
 8008490:	e7cb      	b.n	800842a <_free_r+0x22>
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20001124 	.word	0x20001124

08008498 <malloc>:
 8008498:	4b02      	ldr	r3, [pc, #8]	@ (80084a4 <malloc+0xc>)
 800849a:	4601      	mov	r1, r0
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	f000 b825 	b.w	80084ec <_malloc_r>
 80084a2:	bf00      	nop
 80084a4:	20000030 	.word	0x20000030

080084a8 <sbrk_aligned>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	4e0f      	ldr	r6, [pc, #60]	@ (80084e8 <sbrk_aligned+0x40>)
 80084ac:	460c      	mov	r4, r1
 80084ae:	6831      	ldr	r1, [r6, #0]
 80084b0:	4605      	mov	r5, r0
 80084b2:	b911      	cbnz	r1, 80084ba <sbrk_aligned+0x12>
 80084b4:	f000 fe40 	bl	8009138 <_sbrk_r>
 80084b8:	6030      	str	r0, [r6, #0]
 80084ba:	4621      	mov	r1, r4
 80084bc:	4628      	mov	r0, r5
 80084be:	f000 fe3b 	bl	8009138 <_sbrk_r>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d103      	bne.n	80084ce <sbrk_aligned+0x26>
 80084c6:	f04f 34ff 	mov.w	r4, #4294967295
 80084ca:	4620      	mov	r0, r4
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
 80084ce:	1cc4      	adds	r4, r0, #3
 80084d0:	f024 0403 	bic.w	r4, r4, #3
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d0f8      	beq.n	80084ca <sbrk_aligned+0x22>
 80084d8:	1a21      	subs	r1, r4, r0
 80084da:	4628      	mov	r0, r5
 80084dc:	f000 fe2c 	bl	8009138 <_sbrk_r>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d1f2      	bne.n	80084ca <sbrk_aligned+0x22>
 80084e4:	e7ef      	b.n	80084c6 <sbrk_aligned+0x1e>
 80084e6:	bf00      	nop
 80084e8:	20001120 	.word	0x20001120

080084ec <_malloc_r>:
 80084ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f0:	1ccd      	adds	r5, r1, #3
 80084f2:	f025 0503 	bic.w	r5, r5, #3
 80084f6:	3508      	adds	r5, #8
 80084f8:	2d0c      	cmp	r5, #12
 80084fa:	bf38      	it	cc
 80084fc:	250c      	movcc	r5, #12
 80084fe:	2d00      	cmp	r5, #0
 8008500:	4606      	mov	r6, r0
 8008502:	db01      	blt.n	8008508 <_malloc_r+0x1c>
 8008504:	42a9      	cmp	r1, r5
 8008506:	d904      	bls.n	8008512 <_malloc_r+0x26>
 8008508:	230c      	movs	r3, #12
 800850a:	6033      	str	r3, [r6, #0]
 800850c:	2000      	movs	r0, #0
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085e8 <_malloc_r+0xfc>
 8008516:	f000 f869 	bl	80085ec <__malloc_lock>
 800851a:	f8d8 3000 	ldr.w	r3, [r8]
 800851e:	461c      	mov	r4, r3
 8008520:	bb44      	cbnz	r4, 8008574 <_malloc_r+0x88>
 8008522:	4629      	mov	r1, r5
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff ffbf 	bl	80084a8 <sbrk_aligned>
 800852a:	1c43      	adds	r3, r0, #1
 800852c:	4604      	mov	r4, r0
 800852e:	d158      	bne.n	80085e2 <_malloc_r+0xf6>
 8008530:	f8d8 4000 	ldr.w	r4, [r8]
 8008534:	4627      	mov	r7, r4
 8008536:	2f00      	cmp	r7, #0
 8008538:	d143      	bne.n	80085c2 <_malloc_r+0xd6>
 800853a:	2c00      	cmp	r4, #0
 800853c:	d04b      	beq.n	80085d6 <_malloc_r+0xea>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	4639      	mov	r1, r7
 8008542:	4630      	mov	r0, r6
 8008544:	eb04 0903 	add.w	r9, r4, r3
 8008548:	f000 fdf6 	bl	8009138 <_sbrk_r>
 800854c:	4581      	cmp	r9, r0
 800854e:	d142      	bne.n	80085d6 <_malloc_r+0xea>
 8008550:	6821      	ldr	r1, [r4, #0]
 8008552:	4630      	mov	r0, r6
 8008554:	1a6d      	subs	r5, r5, r1
 8008556:	4629      	mov	r1, r5
 8008558:	f7ff ffa6 	bl	80084a8 <sbrk_aligned>
 800855c:	3001      	adds	r0, #1
 800855e:	d03a      	beq.n	80085d6 <_malloc_r+0xea>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	442b      	add	r3, r5
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	f8d8 3000 	ldr.w	r3, [r8]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	bb62      	cbnz	r2, 80085c8 <_malloc_r+0xdc>
 800856e:	f8c8 7000 	str.w	r7, [r8]
 8008572:	e00f      	b.n	8008594 <_malloc_r+0xa8>
 8008574:	6822      	ldr	r2, [r4, #0]
 8008576:	1b52      	subs	r2, r2, r5
 8008578:	d420      	bmi.n	80085bc <_malloc_r+0xd0>
 800857a:	2a0b      	cmp	r2, #11
 800857c:	d917      	bls.n	80085ae <_malloc_r+0xc2>
 800857e:	1961      	adds	r1, r4, r5
 8008580:	42a3      	cmp	r3, r4
 8008582:	6025      	str	r5, [r4, #0]
 8008584:	bf18      	it	ne
 8008586:	6059      	strne	r1, [r3, #4]
 8008588:	6863      	ldr	r3, [r4, #4]
 800858a:	bf08      	it	eq
 800858c:	f8c8 1000 	streq.w	r1, [r8]
 8008590:	5162      	str	r2, [r4, r5]
 8008592:	604b      	str	r3, [r1, #4]
 8008594:	4630      	mov	r0, r6
 8008596:	f000 f82f 	bl	80085f8 <__malloc_unlock>
 800859a:	f104 000b 	add.w	r0, r4, #11
 800859e:	1d23      	adds	r3, r4, #4
 80085a0:	f020 0007 	bic.w	r0, r0, #7
 80085a4:	1ac2      	subs	r2, r0, r3
 80085a6:	bf1c      	itt	ne
 80085a8:	1a1b      	subne	r3, r3, r0
 80085aa:	50a3      	strne	r3, [r4, r2]
 80085ac:	e7af      	b.n	800850e <_malloc_r+0x22>
 80085ae:	6862      	ldr	r2, [r4, #4]
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	bf0c      	ite	eq
 80085b4:	f8c8 2000 	streq.w	r2, [r8]
 80085b8:	605a      	strne	r2, [r3, #4]
 80085ba:	e7eb      	b.n	8008594 <_malloc_r+0xa8>
 80085bc:	4623      	mov	r3, r4
 80085be:	6864      	ldr	r4, [r4, #4]
 80085c0:	e7ae      	b.n	8008520 <_malloc_r+0x34>
 80085c2:	463c      	mov	r4, r7
 80085c4:	687f      	ldr	r7, [r7, #4]
 80085c6:	e7b6      	b.n	8008536 <_malloc_r+0x4a>
 80085c8:	461a      	mov	r2, r3
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	d1fb      	bne.n	80085c8 <_malloc_r+0xdc>
 80085d0:	2300      	movs	r3, #0
 80085d2:	6053      	str	r3, [r2, #4]
 80085d4:	e7de      	b.n	8008594 <_malloc_r+0xa8>
 80085d6:	230c      	movs	r3, #12
 80085d8:	4630      	mov	r0, r6
 80085da:	6033      	str	r3, [r6, #0]
 80085dc:	f000 f80c 	bl	80085f8 <__malloc_unlock>
 80085e0:	e794      	b.n	800850c <_malloc_r+0x20>
 80085e2:	6005      	str	r5, [r0, #0]
 80085e4:	e7d6      	b.n	8008594 <_malloc_r+0xa8>
 80085e6:	bf00      	nop
 80085e8:	20001124 	.word	0x20001124

080085ec <__malloc_lock>:
 80085ec:	4801      	ldr	r0, [pc, #4]	@ (80085f4 <__malloc_lock+0x8>)
 80085ee:	f7ff b8a8 	b.w	8007742 <__retarget_lock_acquire_recursive>
 80085f2:	bf00      	nop
 80085f4:	2000111c 	.word	0x2000111c

080085f8 <__malloc_unlock>:
 80085f8:	4801      	ldr	r0, [pc, #4]	@ (8008600 <__malloc_unlock+0x8>)
 80085fa:	f7ff b8a3 	b.w	8007744 <__retarget_lock_release_recursive>
 80085fe:	bf00      	nop
 8008600:	2000111c 	.word	0x2000111c

08008604 <_Balloc>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	69c6      	ldr	r6, [r0, #28]
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	b976      	cbnz	r6, 800862c <_Balloc+0x28>
 800860e:	2010      	movs	r0, #16
 8008610:	f7ff ff42 	bl	8008498 <malloc>
 8008614:	4602      	mov	r2, r0
 8008616:	61e0      	str	r0, [r4, #28]
 8008618:	b920      	cbnz	r0, 8008624 <_Balloc+0x20>
 800861a:	216b      	movs	r1, #107	@ 0x6b
 800861c:	4b17      	ldr	r3, [pc, #92]	@ (800867c <_Balloc+0x78>)
 800861e:	4818      	ldr	r0, [pc, #96]	@ (8008680 <_Balloc+0x7c>)
 8008620:	f000 fda8 	bl	8009174 <__assert_func>
 8008624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008628:	6006      	str	r6, [r0, #0]
 800862a:	60c6      	str	r6, [r0, #12]
 800862c:	69e6      	ldr	r6, [r4, #28]
 800862e:	68f3      	ldr	r3, [r6, #12]
 8008630:	b183      	cbz	r3, 8008654 <_Balloc+0x50>
 8008632:	69e3      	ldr	r3, [r4, #28]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800863a:	b9b8      	cbnz	r0, 800866c <_Balloc+0x68>
 800863c:	2101      	movs	r1, #1
 800863e:	fa01 f605 	lsl.w	r6, r1, r5
 8008642:	1d72      	adds	r2, r6, #5
 8008644:	4620      	mov	r0, r4
 8008646:	0092      	lsls	r2, r2, #2
 8008648:	f000 fdb2 	bl	80091b0 <_calloc_r>
 800864c:	b160      	cbz	r0, 8008668 <_Balloc+0x64>
 800864e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008652:	e00e      	b.n	8008672 <_Balloc+0x6e>
 8008654:	2221      	movs	r2, #33	@ 0x21
 8008656:	2104      	movs	r1, #4
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fda9 	bl	80091b0 <_calloc_r>
 800865e:	69e3      	ldr	r3, [r4, #28]
 8008660:	60f0      	str	r0, [r6, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e4      	bne.n	8008632 <_Balloc+0x2e>
 8008668:	2000      	movs	r0, #0
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	6802      	ldr	r2, [r0, #0]
 800866e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008672:	2300      	movs	r3, #0
 8008674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008678:	e7f7      	b.n	800866a <_Balloc+0x66>
 800867a:	bf00      	nop
 800867c:	0800bd14 	.word	0x0800bd14
 8008680:	0800bd94 	.word	0x0800bd94

08008684 <_Bfree>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	69c6      	ldr	r6, [r0, #28]
 8008688:	4605      	mov	r5, r0
 800868a:	460c      	mov	r4, r1
 800868c:	b976      	cbnz	r6, 80086ac <_Bfree+0x28>
 800868e:	2010      	movs	r0, #16
 8008690:	f7ff ff02 	bl	8008498 <malloc>
 8008694:	4602      	mov	r2, r0
 8008696:	61e8      	str	r0, [r5, #28]
 8008698:	b920      	cbnz	r0, 80086a4 <_Bfree+0x20>
 800869a:	218f      	movs	r1, #143	@ 0x8f
 800869c:	4b08      	ldr	r3, [pc, #32]	@ (80086c0 <_Bfree+0x3c>)
 800869e:	4809      	ldr	r0, [pc, #36]	@ (80086c4 <_Bfree+0x40>)
 80086a0:	f000 fd68 	bl	8009174 <__assert_func>
 80086a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a8:	6006      	str	r6, [r0, #0]
 80086aa:	60c6      	str	r6, [r0, #12]
 80086ac:	b13c      	cbz	r4, 80086be <_Bfree+0x3a>
 80086ae:	69eb      	ldr	r3, [r5, #28]
 80086b0:	6862      	ldr	r2, [r4, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086b8:	6021      	str	r1, [r4, #0]
 80086ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	0800bd14 	.word	0x0800bd14
 80086c4:	0800bd94 	.word	0x0800bd94

080086c8 <__multadd>:
 80086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	4607      	mov	r7, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	461e      	mov	r6, r3
 80086d2:	2000      	movs	r0, #0
 80086d4:	690d      	ldr	r5, [r1, #16]
 80086d6:	f101 0c14 	add.w	ip, r1, #20
 80086da:	f8dc 3000 	ldr.w	r3, [ip]
 80086de:	3001      	adds	r0, #1
 80086e0:	b299      	uxth	r1, r3
 80086e2:	fb02 6101 	mla	r1, r2, r1, r6
 80086e6:	0c1e      	lsrs	r6, r3, #16
 80086e8:	0c0b      	lsrs	r3, r1, #16
 80086ea:	fb02 3306 	mla	r3, r2, r6, r3
 80086ee:	b289      	uxth	r1, r1
 80086f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086f4:	4285      	cmp	r5, r0
 80086f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086fa:	f84c 1b04 	str.w	r1, [ip], #4
 80086fe:	dcec      	bgt.n	80086da <__multadd+0x12>
 8008700:	b30e      	cbz	r6, 8008746 <__multadd+0x7e>
 8008702:	68a3      	ldr	r3, [r4, #8]
 8008704:	42ab      	cmp	r3, r5
 8008706:	dc19      	bgt.n	800873c <__multadd+0x74>
 8008708:	6861      	ldr	r1, [r4, #4]
 800870a:	4638      	mov	r0, r7
 800870c:	3101      	adds	r1, #1
 800870e:	f7ff ff79 	bl	8008604 <_Balloc>
 8008712:	4680      	mov	r8, r0
 8008714:	b928      	cbnz	r0, 8008722 <__multadd+0x5a>
 8008716:	4602      	mov	r2, r0
 8008718:	21ba      	movs	r1, #186	@ 0xba
 800871a:	4b0c      	ldr	r3, [pc, #48]	@ (800874c <__multadd+0x84>)
 800871c:	480c      	ldr	r0, [pc, #48]	@ (8008750 <__multadd+0x88>)
 800871e:	f000 fd29 	bl	8009174 <__assert_func>
 8008722:	6922      	ldr	r2, [r4, #16]
 8008724:	f104 010c 	add.w	r1, r4, #12
 8008728:	3202      	adds	r2, #2
 800872a:	0092      	lsls	r2, r2, #2
 800872c:	300c      	adds	r0, #12
 800872e:	f000 fd13 	bl	8009158 <memcpy>
 8008732:	4621      	mov	r1, r4
 8008734:	4638      	mov	r0, r7
 8008736:	f7ff ffa5 	bl	8008684 <_Bfree>
 800873a:	4644      	mov	r4, r8
 800873c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008740:	3501      	adds	r5, #1
 8008742:	615e      	str	r6, [r3, #20]
 8008744:	6125      	str	r5, [r4, #16]
 8008746:	4620      	mov	r0, r4
 8008748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800874c:	0800bd83 	.word	0x0800bd83
 8008750:	0800bd94 	.word	0x0800bd94

08008754 <__hi0bits>:
 8008754:	4603      	mov	r3, r0
 8008756:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800875a:	bf3a      	itte	cc
 800875c:	0403      	lslcc	r3, r0, #16
 800875e:	2010      	movcc	r0, #16
 8008760:	2000      	movcs	r0, #0
 8008762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008766:	bf3c      	itt	cc
 8008768:	021b      	lslcc	r3, r3, #8
 800876a:	3008      	addcc	r0, #8
 800876c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008770:	bf3c      	itt	cc
 8008772:	011b      	lslcc	r3, r3, #4
 8008774:	3004      	addcc	r0, #4
 8008776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800877a:	bf3c      	itt	cc
 800877c:	009b      	lslcc	r3, r3, #2
 800877e:	3002      	addcc	r0, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	db05      	blt.n	8008790 <__hi0bits+0x3c>
 8008784:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008788:	f100 0001 	add.w	r0, r0, #1
 800878c:	bf08      	it	eq
 800878e:	2020      	moveq	r0, #32
 8008790:	4770      	bx	lr

08008792 <__lo0bits>:
 8008792:	6803      	ldr	r3, [r0, #0]
 8008794:	4602      	mov	r2, r0
 8008796:	f013 0007 	ands.w	r0, r3, #7
 800879a:	d00b      	beq.n	80087b4 <__lo0bits+0x22>
 800879c:	07d9      	lsls	r1, r3, #31
 800879e:	d421      	bmi.n	80087e4 <__lo0bits+0x52>
 80087a0:	0798      	lsls	r0, r3, #30
 80087a2:	bf49      	itett	mi
 80087a4:	085b      	lsrmi	r3, r3, #1
 80087a6:	089b      	lsrpl	r3, r3, #2
 80087a8:	2001      	movmi	r0, #1
 80087aa:	6013      	strmi	r3, [r2, #0]
 80087ac:	bf5c      	itt	pl
 80087ae:	2002      	movpl	r0, #2
 80087b0:	6013      	strpl	r3, [r2, #0]
 80087b2:	4770      	bx	lr
 80087b4:	b299      	uxth	r1, r3
 80087b6:	b909      	cbnz	r1, 80087bc <__lo0bits+0x2a>
 80087b8:	2010      	movs	r0, #16
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	b2d9      	uxtb	r1, r3
 80087be:	b909      	cbnz	r1, 80087c4 <__lo0bits+0x32>
 80087c0:	3008      	adds	r0, #8
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	0719      	lsls	r1, r3, #28
 80087c6:	bf04      	itt	eq
 80087c8:	091b      	lsreq	r3, r3, #4
 80087ca:	3004      	addeq	r0, #4
 80087cc:	0799      	lsls	r1, r3, #30
 80087ce:	bf04      	itt	eq
 80087d0:	089b      	lsreq	r3, r3, #2
 80087d2:	3002      	addeq	r0, #2
 80087d4:	07d9      	lsls	r1, r3, #31
 80087d6:	d403      	bmi.n	80087e0 <__lo0bits+0x4e>
 80087d8:	085b      	lsrs	r3, r3, #1
 80087da:	f100 0001 	add.w	r0, r0, #1
 80087de:	d003      	beq.n	80087e8 <__lo0bits+0x56>
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	4770      	bx	lr
 80087e4:	2000      	movs	r0, #0
 80087e6:	4770      	bx	lr
 80087e8:	2020      	movs	r0, #32
 80087ea:	4770      	bx	lr

080087ec <__i2b>:
 80087ec:	b510      	push	{r4, lr}
 80087ee:	460c      	mov	r4, r1
 80087f0:	2101      	movs	r1, #1
 80087f2:	f7ff ff07 	bl	8008604 <_Balloc>
 80087f6:	4602      	mov	r2, r0
 80087f8:	b928      	cbnz	r0, 8008806 <__i2b+0x1a>
 80087fa:	f240 1145 	movw	r1, #325	@ 0x145
 80087fe:	4b04      	ldr	r3, [pc, #16]	@ (8008810 <__i2b+0x24>)
 8008800:	4804      	ldr	r0, [pc, #16]	@ (8008814 <__i2b+0x28>)
 8008802:	f000 fcb7 	bl	8009174 <__assert_func>
 8008806:	2301      	movs	r3, #1
 8008808:	6144      	str	r4, [r0, #20]
 800880a:	6103      	str	r3, [r0, #16]
 800880c:	bd10      	pop	{r4, pc}
 800880e:	bf00      	nop
 8008810:	0800bd83 	.word	0x0800bd83
 8008814:	0800bd94 	.word	0x0800bd94

08008818 <__multiply>:
 8008818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881c:	4614      	mov	r4, r2
 800881e:	690a      	ldr	r2, [r1, #16]
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	460f      	mov	r7, r1
 8008824:	429a      	cmp	r2, r3
 8008826:	bfa2      	ittt	ge
 8008828:	4623      	movge	r3, r4
 800882a:	460c      	movge	r4, r1
 800882c:	461f      	movge	r7, r3
 800882e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008832:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008836:	68a3      	ldr	r3, [r4, #8]
 8008838:	6861      	ldr	r1, [r4, #4]
 800883a:	eb0a 0609 	add.w	r6, sl, r9
 800883e:	42b3      	cmp	r3, r6
 8008840:	b085      	sub	sp, #20
 8008842:	bfb8      	it	lt
 8008844:	3101      	addlt	r1, #1
 8008846:	f7ff fedd 	bl	8008604 <_Balloc>
 800884a:	b930      	cbnz	r0, 800885a <__multiply+0x42>
 800884c:	4602      	mov	r2, r0
 800884e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008852:	4b43      	ldr	r3, [pc, #268]	@ (8008960 <__multiply+0x148>)
 8008854:	4843      	ldr	r0, [pc, #268]	@ (8008964 <__multiply+0x14c>)
 8008856:	f000 fc8d 	bl	8009174 <__assert_func>
 800885a:	f100 0514 	add.w	r5, r0, #20
 800885e:	462b      	mov	r3, r5
 8008860:	2200      	movs	r2, #0
 8008862:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008866:	4543      	cmp	r3, r8
 8008868:	d321      	bcc.n	80088ae <__multiply+0x96>
 800886a:	f107 0114 	add.w	r1, r7, #20
 800886e:	f104 0214 	add.w	r2, r4, #20
 8008872:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008876:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800887a:	9302      	str	r3, [sp, #8]
 800887c:	1b13      	subs	r3, r2, r4
 800887e:	3b15      	subs	r3, #21
 8008880:	f023 0303 	bic.w	r3, r3, #3
 8008884:	3304      	adds	r3, #4
 8008886:	f104 0715 	add.w	r7, r4, #21
 800888a:	42ba      	cmp	r2, r7
 800888c:	bf38      	it	cc
 800888e:	2304      	movcc	r3, #4
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	9b02      	ldr	r3, [sp, #8]
 8008894:	9103      	str	r1, [sp, #12]
 8008896:	428b      	cmp	r3, r1
 8008898:	d80c      	bhi.n	80088b4 <__multiply+0x9c>
 800889a:	2e00      	cmp	r6, #0
 800889c:	dd03      	ble.n	80088a6 <__multiply+0x8e>
 800889e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d05a      	beq.n	800895c <__multiply+0x144>
 80088a6:	6106      	str	r6, [r0, #16]
 80088a8:	b005      	add	sp, #20
 80088aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ae:	f843 2b04 	str.w	r2, [r3], #4
 80088b2:	e7d8      	b.n	8008866 <__multiply+0x4e>
 80088b4:	f8b1 a000 	ldrh.w	sl, [r1]
 80088b8:	f1ba 0f00 	cmp.w	sl, #0
 80088bc:	d023      	beq.n	8008906 <__multiply+0xee>
 80088be:	46a9      	mov	r9, r5
 80088c0:	f04f 0c00 	mov.w	ip, #0
 80088c4:	f104 0e14 	add.w	lr, r4, #20
 80088c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088cc:	f8d9 3000 	ldr.w	r3, [r9]
 80088d0:	fa1f fb87 	uxth.w	fp, r7
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80088da:	4463      	add	r3, ip
 80088dc:	f8d9 c000 	ldr.w	ip, [r9]
 80088e0:	0c3f      	lsrs	r7, r7, #16
 80088e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80088e6:	fb0a c707 	mla	r7, sl, r7, ip
 80088ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088f4:	4572      	cmp	r2, lr
 80088f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088fa:	f849 3b04 	str.w	r3, [r9], #4
 80088fe:	d8e3      	bhi.n	80088c8 <__multiply+0xb0>
 8008900:	9b01      	ldr	r3, [sp, #4]
 8008902:	f845 c003 	str.w	ip, [r5, r3]
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	3104      	adds	r1, #4
 800890a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800890e:	f1b9 0f00 	cmp.w	r9, #0
 8008912:	d021      	beq.n	8008958 <__multiply+0x140>
 8008914:	46ae      	mov	lr, r5
 8008916:	f04f 0a00 	mov.w	sl, #0
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	f104 0c14 	add.w	ip, r4, #20
 8008920:	f8bc b000 	ldrh.w	fp, [ip]
 8008924:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008928:	b29b      	uxth	r3, r3
 800892a:	fb09 770b 	mla	r7, r9, fp, r7
 800892e:	4457      	add	r7, sl
 8008930:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008934:	f84e 3b04 	str.w	r3, [lr], #4
 8008938:	f85c 3b04 	ldr.w	r3, [ip], #4
 800893c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008940:	f8be 3000 	ldrh.w	r3, [lr]
 8008944:	4562      	cmp	r2, ip
 8008946:	fb09 330a 	mla	r3, r9, sl, r3
 800894a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800894e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008952:	d8e5      	bhi.n	8008920 <__multiply+0x108>
 8008954:	9f01      	ldr	r7, [sp, #4]
 8008956:	51eb      	str	r3, [r5, r7]
 8008958:	3504      	adds	r5, #4
 800895a:	e79a      	b.n	8008892 <__multiply+0x7a>
 800895c:	3e01      	subs	r6, #1
 800895e:	e79c      	b.n	800889a <__multiply+0x82>
 8008960:	0800bd83 	.word	0x0800bd83
 8008964:	0800bd94 	.word	0x0800bd94

08008968 <__pow5mult>:
 8008968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896c:	4615      	mov	r5, r2
 800896e:	f012 0203 	ands.w	r2, r2, #3
 8008972:	4607      	mov	r7, r0
 8008974:	460e      	mov	r6, r1
 8008976:	d007      	beq.n	8008988 <__pow5mult+0x20>
 8008978:	4c25      	ldr	r4, [pc, #148]	@ (8008a10 <__pow5mult+0xa8>)
 800897a:	3a01      	subs	r2, #1
 800897c:	2300      	movs	r3, #0
 800897e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008982:	f7ff fea1 	bl	80086c8 <__multadd>
 8008986:	4606      	mov	r6, r0
 8008988:	10ad      	asrs	r5, r5, #2
 800898a:	d03d      	beq.n	8008a08 <__pow5mult+0xa0>
 800898c:	69fc      	ldr	r4, [r7, #28]
 800898e:	b97c      	cbnz	r4, 80089b0 <__pow5mult+0x48>
 8008990:	2010      	movs	r0, #16
 8008992:	f7ff fd81 	bl	8008498 <malloc>
 8008996:	4602      	mov	r2, r0
 8008998:	61f8      	str	r0, [r7, #28]
 800899a:	b928      	cbnz	r0, 80089a8 <__pow5mult+0x40>
 800899c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80089a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a14 <__pow5mult+0xac>)
 80089a2:	481d      	ldr	r0, [pc, #116]	@ (8008a18 <__pow5mult+0xb0>)
 80089a4:	f000 fbe6 	bl	8009174 <__assert_func>
 80089a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089ac:	6004      	str	r4, [r0, #0]
 80089ae:	60c4      	str	r4, [r0, #12]
 80089b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089b8:	b94c      	cbnz	r4, 80089ce <__pow5mult+0x66>
 80089ba:	f240 2171 	movw	r1, #625	@ 0x271
 80089be:	4638      	mov	r0, r7
 80089c0:	f7ff ff14 	bl	80087ec <__i2b>
 80089c4:	2300      	movs	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80089cc:	6003      	str	r3, [r0, #0]
 80089ce:	f04f 0900 	mov.w	r9, #0
 80089d2:	07eb      	lsls	r3, r5, #31
 80089d4:	d50a      	bpl.n	80089ec <__pow5mult+0x84>
 80089d6:	4631      	mov	r1, r6
 80089d8:	4622      	mov	r2, r4
 80089da:	4638      	mov	r0, r7
 80089dc:	f7ff ff1c 	bl	8008818 <__multiply>
 80089e0:	4680      	mov	r8, r0
 80089e2:	4631      	mov	r1, r6
 80089e4:	4638      	mov	r0, r7
 80089e6:	f7ff fe4d 	bl	8008684 <_Bfree>
 80089ea:	4646      	mov	r6, r8
 80089ec:	106d      	asrs	r5, r5, #1
 80089ee:	d00b      	beq.n	8008a08 <__pow5mult+0xa0>
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	b938      	cbnz	r0, 8008a04 <__pow5mult+0x9c>
 80089f4:	4622      	mov	r2, r4
 80089f6:	4621      	mov	r1, r4
 80089f8:	4638      	mov	r0, r7
 80089fa:	f7ff ff0d 	bl	8008818 <__multiply>
 80089fe:	6020      	str	r0, [r4, #0]
 8008a00:	f8c0 9000 	str.w	r9, [r0]
 8008a04:	4604      	mov	r4, r0
 8008a06:	e7e4      	b.n	80089d2 <__pow5mult+0x6a>
 8008a08:	4630      	mov	r0, r6
 8008a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0e:	bf00      	nop
 8008a10:	0800bdf0 	.word	0x0800bdf0
 8008a14:	0800bd14 	.word	0x0800bd14
 8008a18:	0800bd94 	.word	0x0800bd94

08008a1c <__lshift>:
 8008a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a20:	460c      	mov	r4, r1
 8008a22:	4607      	mov	r7, r0
 8008a24:	4691      	mov	r9, r2
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	6849      	ldr	r1, [r1, #4]
 8008a2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a2e:	68a3      	ldr	r3, [r4, #8]
 8008a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a34:	f108 0601 	add.w	r6, r8, #1
 8008a38:	42b3      	cmp	r3, r6
 8008a3a:	db0b      	blt.n	8008a54 <__lshift+0x38>
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff fde1 	bl	8008604 <_Balloc>
 8008a42:	4605      	mov	r5, r0
 8008a44:	b948      	cbnz	r0, 8008a5a <__lshift+0x3e>
 8008a46:	4602      	mov	r2, r0
 8008a48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a4c:	4b27      	ldr	r3, [pc, #156]	@ (8008aec <__lshift+0xd0>)
 8008a4e:	4828      	ldr	r0, [pc, #160]	@ (8008af0 <__lshift+0xd4>)
 8008a50:	f000 fb90 	bl	8009174 <__assert_func>
 8008a54:	3101      	adds	r1, #1
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	e7ee      	b.n	8008a38 <__lshift+0x1c>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f100 0114 	add.w	r1, r0, #20
 8008a60:	f100 0210 	add.w	r2, r0, #16
 8008a64:	4618      	mov	r0, r3
 8008a66:	4553      	cmp	r3, sl
 8008a68:	db33      	blt.n	8008ad2 <__lshift+0xb6>
 8008a6a:	6920      	ldr	r0, [r4, #16]
 8008a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a70:	f104 0314 	add.w	r3, r4, #20
 8008a74:	f019 091f 	ands.w	r9, r9, #31
 8008a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a80:	d02b      	beq.n	8008ada <__lshift+0xbe>
 8008a82:	468a      	mov	sl, r1
 8008a84:	2200      	movs	r2, #0
 8008a86:	f1c9 0e20 	rsb	lr, r9, #32
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	fa00 f009 	lsl.w	r0, r0, r9
 8008a90:	4310      	orrs	r0, r2
 8008a92:	f84a 0b04 	str.w	r0, [sl], #4
 8008a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a9a:	459c      	cmp	ip, r3
 8008a9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008aa0:	d8f3      	bhi.n	8008a8a <__lshift+0x6e>
 8008aa2:	ebac 0304 	sub.w	r3, ip, r4
 8008aa6:	3b15      	subs	r3, #21
 8008aa8:	f023 0303 	bic.w	r3, r3, #3
 8008aac:	3304      	adds	r3, #4
 8008aae:	f104 0015 	add.w	r0, r4, #21
 8008ab2:	4584      	cmp	ip, r0
 8008ab4:	bf38      	it	cc
 8008ab6:	2304      	movcc	r3, #4
 8008ab8:	50ca      	str	r2, [r1, r3]
 8008aba:	b10a      	cbz	r2, 8008ac0 <__lshift+0xa4>
 8008abc:	f108 0602 	add.w	r6, r8, #2
 8008ac0:	3e01      	subs	r6, #1
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	612e      	str	r6, [r5, #16]
 8008ac8:	f7ff fddc 	bl	8008684 <_Bfree>
 8008acc:	4628      	mov	r0, r5
 8008ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	e7c5      	b.n	8008a66 <__lshift+0x4a>
 8008ada:	3904      	subs	r1, #4
 8008adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae0:	459c      	cmp	ip, r3
 8008ae2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ae6:	d8f9      	bhi.n	8008adc <__lshift+0xc0>
 8008ae8:	e7ea      	b.n	8008ac0 <__lshift+0xa4>
 8008aea:	bf00      	nop
 8008aec:	0800bd83 	.word	0x0800bd83
 8008af0:	0800bd94 	.word	0x0800bd94

08008af4 <__mcmp>:
 8008af4:	4603      	mov	r3, r0
 8008af6:	690a      	ldr	r2, [r1, #16]
 8008af8:	6900      	ldr	r0, [r0, #16]
 8008afa:	b530      	push	{r4, r5, lr}
 8008afc:	1a80      	subs	r0, r0, r2
 8008afe:	d10e      	bne.n	8008b1e <__mcmp+0x2a>
 8008b00:	3314      	adds	r3, #20
 8008b02:	3114      	adds	r1, #20
 8008b04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b14:	4295      	cmp	r5, r2
 8008b16:	d003      	beq.n	8008b20 <__mcmp+0x2c>
 8008b18:	d205      	bcs.n	8008b26 <__mcmp+0x32>
 8008b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1e:	bd30      	pop	{r4, r5, pc}
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	d3f3      	bcc.n	8008b0c <__mcmp+0x18>
 8008b24:	e7fb      	b.n	8008b1e <__mcmp+0x2a>
 8008b26:	2001      	movs	r0, #1
 8008b28:	e7f9      	b.n	8008b1e <__mcmp+0x2a>
	...

08008b2c <__mdiff>:
 8008b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b30:	4689      	mov	r9, r1
 8008b32:	4606      	mov	r6, r0
 8008b34:	4611      	mov	r1, r2
 8008b36:	4648      	mov	r0, r9
 8008b38:	4614      	mov	r4, r2
 8008b3a:	f7ff ffdb 	bl	8008af4 <__mcmp>
 8008b3e:	1e05      	subs	r5, r0, #0
 8008b40:	d112      	bne.n	8008b68 <__mdiff+0x3c>
 8008b42:	4629      	mov	r1, r5
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7ff fd5d 	bl	8008604 <_Balloc>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	b928      	cbnz	r0, 8008b5a <__mdiff+0x2e>
 8008b4e:	f240 2137 	movw	r1, #567	@ 0x237
 8008b52:	4b3e      	ldr	r3, [pc, #248]	@ (8008c4c <__mdiff+0x120>)
 8008b54:	483e      	ldr	r0, [pc, #248]	@ (8008c50 <__mdiff+0x124>)
 8008b56:	f000 fb0d 	bl	8009174 <__assert_func>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b60:	4610      	mov	r0, r2
 8008b62:	b003      	add	sp, #12
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	bfbc      	itt	lt
 8008b6a:	464b      	movlt	r3, r9
 8008b6c:	46a1      	movlt	r9, r4
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b74:	bfba      	itte	lt
 8008b76:	461c      	movlt	r4, r3
 8008b78:	2501      	movlt	r5, #1
 8008b7a:	2500      	movge	r5, #0
 8008b7c:	f7ff fd42 	bl	8008604 <_Balloc>
 8008b80:	4602      	mov	r2, r0
 8008b82:	b918      	cbnz	r0, 8008b8c <__mdiff+0x60>
 8008b84:	f240 2145 	movw	r1, #581	@ 0x245
 8008b88:	4b30      	ldr	r3, [pc, #192]	@ (8008c4c <__mdiff+0x120>)
 8008b8a:	e7e3      	b.n	8008b54 <__mdiff+0x28>
 8008b8c:	f100 0b14 	add.w	fp, r0, #20
 8008b90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b94:	f109 0310 	add.w	r3, r9, #16
 8008b98:	60c5      	str	r5, [r0, #12]
 8008b9a:	f04f 0c00 	mov.w	ip, #0
 8008b9e:	f109 0514 	add.w	r5, r9, #20
 8008ba2:	46d9      	mov	r9, fp
 8008ba4:	6926      	ldr	r6, [r4, #16]
 8008ba6:	f104 0e14 	add.w	lr, r4, #20
 8008baa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008bae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	9b01      	ldr	r3, [sp, #4]
 8008bb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008bba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008bbe:	b281      	uxth	r1, r0
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	fa1f f38a 	uxth.w	r3, sl
 8008bc6:	1a5b      	subs	r3, r3, r1
 8008bc8:	0c00      	lsrs	r0, r0, #16
 8008bca:	4463      	add	r3, ip
 8008bcc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bd0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bda:	4576      	cmp	r6, lr
 8008bdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008be0:	f849 3b04 	str.w	r3, [r9], #4
 8008be4:	d8e6      	bhi.n	8008bb4 <__mdiff+0x88>
 8008be6:	1b33      	subs	r3, r6, r4
 8008be8:	3b15      	subs	r3, #21
 8008bea:	f023 0303 	bic.w	r3, r3, #3
 8008bee:	3415      	adds	r4, #21
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	42a6      	cmp	r6, r4
 8008bf4:	bf38      	it	cc
 8008bf6:	2304      	movcc	r3, #4
 8008bf8:	441d      	add	r5, r3
 8008bfa:	445b      	add	r3, fp
 8008bfc:	461e      	mov	r6, r3
 8008bfe:	462c      	mov	r4, r5
 8008c00:	4544      	cmp	r4, r8
 8008c02:	d30e      	bcc.n	8008c22 <__mdiff+0xf6>
 8008c04:	f108 0103 	add.w	r1, r8, #3
 8008c08:	1b49      	subs	r1, r1, r5
 8008c0a:	f021 0103 	bic.w	r1, r1, #3
 8008c0e:	3d03      	subs	r5, #3
 8008c10:	45a8      	cmp	r8, r5
 8008c12:	bf38      	it	cc
 8008c14:	2100      	movcc	r1, #0
 8008c16:	440b      	add	r3, r1
 8008c18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c1c:	b199      	cbz	r1, 8008c46 <__mdiff+0x11a>
 8008c1e:	6117      	str	r7, [r2, #16]
 8008c20:	e79e      	b.n	8008b60 <__mdiff+0x34>
 8008c22:	46e6      	mov	lr, ip
 8008c24:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c28:	fa1f fc81 	uxth.w	ip, r1
 8008c2c:	44f4      	add	ip, lr
 8008c2e:	0c08      	lsrs	r0, r1, #16
 8008c30:	4471      	add	r1, lr
 8008c32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c36:	b289      	uxth	r1, r1
 8008c38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c40:	f846 1b04 	str.w	r1, [r6], #4
 8008c44:	e7dc      	b.n	8008c00 <__mdiff+0xd4>
 8008c46:	3f01      	subs	r7, #1
 8008c48:	e7e6      	b.n	8008c18 <__mdiff+0xec>
 8008c4a:	bf00      	nop
 8008c4c:	0800bd83 	.word	0x0800bd83
 8008c50:	0800bd94 	.word	0x0800bd94

08008c54 <__d2b>:
 8008c54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008c58:	2101      	movs	r1, #1
 8008c5a:	4690      	mov	r8, r2
 8008c5c:	4699      	mov	r9, r3
 8008c5e:	9e08      	ldr	r6, [sp, #32]
 8008c60:	f7ff fcd0 	bl	8008604 <_Balloc>
 8008c64:	4604      	mov	r4, r0
 8008c66:	b930      	cbnz	r0, 8008c76 <__d2b+0x22>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c6e:	4b23      	ldr	r3, [pc, #140]	@ (8008cfc <__d2b+0xa8>)
 8008c70:	4823      	ldr	r0, [pc, #140]	@ (8008d00 <__d2b+0xac>)
 8008c72:	f000 fa7f 	bl	8009174 <__assert_func>
 8008c76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c7e:	b10d      	cbz	r5, 8008c84 <__d2b+0x30>
 8008c80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c84:	9301      	str	r3, [sp, #4]
 8008c86:	f1b8 0300 	subs.w	r3, r8, #0
 8008c8a:	d024      	beq.n	8008cd6 <__d2b+0x82>
 8008c8c:	4668      	mov	r0, sp
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	f7ff fd7f 	bl	8008792 <__lo0bits>
 8008c94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c98:	b1d8      	cbz	r0, 8008cd2 <__d2b+0x7e>
 8008c9a:	f1c0 0320 	rsb	r3, r0, #32
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	40c2      	lsrs	r2, r0
 8008ca6:	6163      	str	r3, [r4, #20]
 8008ca8:	9201      	str	r2, [sp, #4]
 8008caa:	9b01      	ldr	r3, [sp, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	bf0c      	ite	eq
 8008cb0:	2201      	moveq	r2, #1
 8008cb2:	2202      	movne	r2, #2
 8008cb4:	61a3      	str	r3, [r4, #24]
 8008cb6:	6122      	str	r2, [r4, #16]
 8008cb8:	b1ad      	cbz	r5, 8008ce6 <__d2b+0x92>
 8008cba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008cbe:	4405      	add	r5, r0
 8008cc0:	6035      	str	r5, [r6, #0]
 8008cc2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc8:	6018      	str	r0, [r3, #0]
 8008cca:	4620      	mov	r0, r4
 8008ccc:	b002      	add	sp, #8
 8008cce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008cd2:	6161      	str	r1, [r4, #20]
 8008cd4:	e7e9      	b.n	8008caa <__d2b+0x56>
 8008cd6:	a801      	add	r0, sp, #4
 8008cd8:	f7ff fd5b 	bl	8008792 <__lo0bits>
 8008cdc:	9b01      	ldr	r3, [sp, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	6163      	str	r3, [r4, #20]
 8008ce2:	3020      	adds	r0, #32
 8008ce4:	e7e7      	b.n	8008cb6 <__d2b+0x62>
 8008ce6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008cea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cee:	6030      	str	r0, [r6, #0]
 8008cf0:	6918      	ldr	r0, [r3, #16]
 8008cf2:	f7ff fd2f 	bl	8008754 <__hi0bits>
 8008cf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cfa:	e7e4      	b.n	8008cc6 <__d2b+0x72>
 8008cfc:	0800bd83 	.word	0x0800bd83
 8008d00:	0800bd94 	.word	0x0800bd94

08008d04 <__ssputs_r>:
 8008d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	461f      	mov	r7, r3
 8008d0a:	688e      	ldr	r6, [r1, #8]
 8008d0c:	4682      	mov	sl, r0
 8008d0e:	42be      	cmp	r6, r7
 8008d10:	460c      	mov	r4, r1
 8008d12:	4690      	mov	r8, r2
 8008d14:	680b      	ldr	r3, [r1, #0]
 8008d16:	d82d      	bhi.n	8008d74 <__ssputs_r+0x70>
 8008d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d20:	d026      	beq.n	8008d70 <__ssputs_r+0x6c>
 8008d22:	6965      	ldr	r5, [r4, #20]
 8008d24:	6909      	ldr	r1, [r1, #16]
 8008d26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d2a:	eba3 0901 	sub.w	r9, r3, r1
 8008d2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d32:	1c7b      	adds	r3, r7, #1
 8008d34:	444b      	add	r3, r9
 8008d36:	106d      	asrs	r5, r5, #1
 8008d38:	429d      	cmp	r5, r3
 8008d3a:	bf38      	it	cc
 8008d3c:	461d      	movcc	r5, r3
 8008d3e:	0553      	lsls	r3, r2, #21
 8008d40:	d527      	bpl.n	8008d92 <__ssputs_r+0x8e>
 8008d42:	4629      	mov	r1, r5
 8008d44:	f7ff fbd2 	bl	80084ec <_malloc_r>
 8008d48:	4606      	mov	r6, r0
 8008d4a:	b360      	cbz	r0, 8008da6 <__ssputs_r+0xa2>
 8008d4c:	464a      	mov	r2, r9
 8008d4e:	6921      	ldr	r1, [r4, #16]
 8008d50:	f000 fa02 	bl	8009158 <memcpy>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	6126      	str	r6, [r4, #16]
 8008d62:	444e      	add	r6, r9
 8008d64:	6026      	str	r6, [r4, #0]
 8008d66:	463e      	mov	r6, r7
 8008d68:	6165      	str	r5, [r4, #20]
 8008d6a:	eba5 0509 	sub.w	r5, r5, r9
 8008d6e:	60a5      	str	r5, [r4, #8]
 8008d70:	42be      	cmp	r6, r7
 8008d72:	d900      	bls.n	8008d76 <__ssputs_r+0x72>
 8008d74:	463e      	mov	r6, r7
 8008d76:	4632      	mov	r2, r6
 8008d78:	4641      	mov	r1, r8
 8008d7a:	6820      	ldr	r0, [r4, #0]
 8008d7c:	f000 f9c2 	bl	8009104 <memmove>
 8008d80:	2000      	movs	r0, #0
 8008d82:	68a3      	ldr	r3, [r4, #8]
 8008d84:	1b9b      	subs	r3, r3, r6
 8008d86:	60a3      	str	r3, [r4, #8]
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	4433      	add	r3, r6
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d92:	462a      	mov	r2, r5
 8008d94:	f000 fa32 	bl	80091fc <_realloc_r>
 8008d98:	4606      	mov	r6, r0
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d1e0      	bne.n	8008d60 <__ssputs_r+0x5c>
 8008d9e:	4650      	mov	r0, sl
 8008da0:	6921      	ldr	r1, [r4, #16]
 8008da2:	f7ff fb31 	bl	8008408 <_free_r>
 8008da6:	230c      	movs	r3, #12
 8008da8:	f8ca 3000 	str.w	r3, [sl]
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f04f 30ff 	mov.w	r0, #4294967295
 8008db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	e7e9      	b.n	8008d8e <__ssputs_r+0x8a>
	...

08008dbc <_svfiprintf_r>:
 8008dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	4698      	mov	r8, r3
 8008dc2:	898b      	ldrh	r3, [r1, #12]
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	061b      	lsls	r3, r3, #24
 8008dc8:	460d      	mov	r5, r1
 8008dca:	4614      	mov	r4, r2
 8008dcc:	b09d      	sub	sp, #116	@ 0x74
 8008dce:	d510      	bpl.n	8008df2 <_svfiprintf_r+0x36>
 8008dd0:	690b      	ldr	r3, [r1, #16]
 8008dd2:	b973      	cbnz	r3, 8008df2 <_svfiprintf_r+0x36>
 8008dd4:	2140      	movs	r1, #64	@ 0x40
 8008dd6:	f7ff fb89 	bl	80084ec <_malloc_r>
 8008dda:	6028      	str	r0, [r5, #0]
 8008ddc:	6128      	str	r0, [r5, #16]
 8008dde:	b930      	cbnz	r0, 8008dee <_svfiprintf_r+0x32>
 8008de0:	230c      	movs	r3, #12
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	b01d      	add	sp, #116	@ 0x74
 8008dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dee:	2340      	movs	r3, #64	@ 0x40
 8008df0:	616b      	str	r3, [r5, #20]
 8008df2:	2300      	movs	r3, #0
 8008df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df6:	2320      	movs	r3, #32
 8008df8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dfc:	2330      	movs	r3, #48	@ 0x30
 8008dfe:	f04f 0901 	mov.w	r9, #1
 8008e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008fa0 <_svfiprintf_r+0x1e4>
 8008e0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e0e:	4623      	mov	r3, r4
 8008e10:	469a      	mov	sl, r3
 8008e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e16:	b10a      	cbz	r2, 8008e1c <_svfiprintf_r+0x60>
 8008e18:	2a25      	cmp	r2, #37	@ 0x25
 8008e1a:	d1f9      	bne.n	8008e10 <_svfiprintf_r+0x54>
 8008e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e20:	d00b      	beq.n	8008e3a <_svfiprintf_r+0x7e>
 8008e22:	465b      	mov	r3, fp
 8008e24:	4622      	mov	r2, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7ff ff6b 	bl	8008d04 <__ssputs_r>
 8008e2e:	3001      	adds	r0, #1
 8008e30:	f000 80a7 	beq.w	8008f82 <_svfiprintf_r+0x1c6>
 8008e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e36:	445a      	add	r2, fp
 8008e38:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 809f 	beq.w	8008f82 <_svfiprintf_r+0x1c6>
 8008e44:	2300      	movs	r3, #0
 8008e46:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e4e:	f10a 0a01 	add.w	sl, sl, #1
 8008e52:	9304      	str	r3, [sp, #16]
 8008e54:	9307      	str	r3, [sp, #28]
 8008e56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e5c:	4654      	mov	r4, sl
 8008e5e:	2205      	movs	r2, #5
 8008e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e64:	484e      	ldr	r0, [pc, #312]	@ (8008fa0 <_svfiprintf_r+0x1e4>)
 8008e66:	f7fe fc6e 	bl	8007746 <memchr>
 8008e6a:	9a04      	ldr	r2, [sp, #16]
 8008e6c:	b9d8      	cbnz	r0, 8008ea6 <_svfiprintf_r+0xea>
 8008e6e:	06d0      	lsls	r0, r2, #27
 8008e70:	bf44      	itt	mi
 8008e72:	2320      	movmi	r3, #32
 8008e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e78:	0711      	lsls	r1, r2, #28
 8008e7a:	bf44      	itt	mi
 8008e7c:	232b      	movmi	r3, #43	@ 0x2b
 8008e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e82:	f89a 3000 	ldrb.w	r3, [sl]
 8008e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e88:	d015      	beq.n	8008eb6 <_svfiprintf_r+0xfa>
 8008e8a:	4654      	mov	r4, sl
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	f04f 0c0a 	mov.w	ip, #10
 8008e92:	9a07      	ldr	r2, [sp, #28]
 8008e94:	4621      	mov	r1, r4
 8008e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e9a:	3b30      	subs	r3, #48	@ 0x30
 8008e9c:	2b09      	cmp	r3, #9
 8008e9e:	d94b      	bls.n	8008f38 <_svfiprintf_r+0x17c>
 8008ea0:	b1b0      	cbz	r0, 8008ed0 <_svfiprintf_r+0x114>
 8008ea2:	9207      	str	r2, [sp, #28]
 8008ea4:	e014      	b.n	8008ed0 <_svfiprintf_r+0x114>
 8008ea6:	eba0 0308 	sub.w	r3, r0, r8
 8008eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	46a2      	mov	sl, r4
 8008eb2:	9304      	str	r3, [sp, #16]
 8008eb4:	e7d2      	b.n	8008e5c <_svfiprintf_r+0xa0>
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	1d19      	adds	r1, r3, #4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	9103      	str	r1, [sp, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bfbb      	ittet	lt
 8008ec2:	425b      	neglt	r3, r3
 8008ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ec8:	9307      	strge	r3, [sp, #28]
 8008eca:	9307      	strlt	r3, [sp, #28]
 8008ecc:	bfb8      	it	lt
 8008ece:	9204      	strlt	r2, [sp, #16]
 8008ed0:	7823      	ldrb	r3, [r4, #0]
 8008ed2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ed4:	d10a      	bne.n	8008eec <_svfiprintf_r+0x130>
 8008ed6:	7863      	ldrb	r3, [r4, #1]
 8008ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eda:	d132      	bne.n	8008f42 <_svfiprintf_r+0x186>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	3402      	adds	r4, #2
 8008ee0:	1d1a      	adds	r2, r3, #4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	9203      	str	r2, [sp, #12]
 8008ee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eea:	9305      	str	r3, [sp, #20]
 8008eec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008fa4 <_svfiprintf_r+0x1e8>
 8008ef0:	2203      	movs	r2, #3
 8008ef2:	4650      	mov	r0, sl
 8008ef4:	7821      	ldrb	r1, [r4, #0]
 8008ef6:	f7fe fc26 	bl	8007746 <memchr>
 8008efa:	b138      	cbz	r0, 8008f0c <_svfiprintf_r+0x150>
 8008efc:	2240      	movs	r2, #64	@ 0x40
 8008efe:	9b04      	ldr	r3, [sp, #16]
 8008f00:	eba0 000a 	sub.w	r0, r0, sl
 8008f04:	4082      	lsls	r2, r0
 8008f06:	4313      	orrs	r3, r2
 8008f08:	3401      	adds	r4, #1
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f10:	2206      	movs	r2, #6
 8008f12:	4825      	ldr	r0, [pc, #148]	@ (8008fa8 <_svfiprintf_r+0x1ec>)
 8008f14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f18:	f7fe fc15 	bl	8007746 <memchr>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d036      	beq.n	8008f8e <_svfiprintf_r+0x1d2>
 8008f20:	4b22      	ldr	r3, [pc, #136]	@ (8008fac <_svfiprintf_r+0x1f0>)
 8008f22:	bb1b      	cbnz	r3, 8008f6c <_svfiprintf_r+0x1b0>
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	3307      	adds	r3, #7
 8008f28:	f023 0307 	bic.w	r3, r3, #7
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	9303      	str	r3, [sp, #12]
 8008f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f32:	4433      	add	r3, r6
 8008f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f36:	e76a      	b.n	8008e0e <_svfiprintf_r+0x52>
 8008f38:	460c      	mov	r4, r1
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f40:	e7a8      	b.n	8008e94 <_svfiprintf_r+0xd8>
 8008f42:	2300      	movs	r3, #0
 8008f44:	f04f 0c0a 	mov.w	ip, #10
 8008f48:	4619      	mov	r1, r3
 8008f4a:	3401      	adds	r4, #1
 8008f4c:	9305      	str	r3, [sp, #20]
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f54:	3a30      	subs	r2, #48	@ 0x30
 8008f56:	2a09      	cmp	r2, #9
 8008f58:	d903      	bls.n	8008f62 <_svfiprintf_r+0x1a6>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0c6      	beq.n	8008eec <_svfiprintf_r+0x130>
 8008f5e:	9105      	str	r1, [sp, #20]
 8008f60:	e7c4      	b.n	8008eec <_svfiprintf_r+0x130>
 8008f62:	4604      	mov	r4, r0
 8008f64:	2301      	movs	r3, #1
 8008f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f6a:	e7f0      	b.n	8008f4e <_svfiprintf_r+0x192>
 8008f6c:	ab03      	add	r3, sp, #12
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	462a      	mov	r2, r5
 8008f72:	4638      	mov	r0, r7
 8008f74:	4b0e      	ldr	r3, [pc, #56]	@ (8008fb0 <_svfiprintf_r+0x1f4>)
 8008f76:	a904      	add	r1, sp, #16
 8008f78:	f7fd fe82 	bl	8006c80 <_printf_float>
 8008f7c:	1c42      	adds	r2, r0, #1
 8008f7e:	4606      	mov	r6, r0
 8008f80:	d1d6      	bne.n	8008f30 <_svfiprintf_r+0x174>
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	065b      	lsls	r3, r3, #25
 8008f86:	f53f af2d 	bmi.w	8008de4 <_svfiprintf_r+0x28>
 8008f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f8c:	e72c      	b.n	8008de8 <_svfiprintf_r+0x2c>
 8008f8e:	ab03      	add	r3, sp, #12
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	462a      	mov	r2, r5
 8008f94:	4638      	mov	r0, r7
 8008f96:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <_svfiprintf_r+0x1f4>)
 8008f98:	a904      	add	r1, sp, #16
 8008f9a:	f7fe f90f 	bl	80071bc <_printf_i>
 8008f9e:	e7ed      	b.n	8008f7c <_svfiprintf_r+0x1c0>
 8008fa0:	0800bef0 	.word	0x0800bef0
 8008fa4:	0800bef6 	.word	0x0800bef6
 8008fa8:	0800befa 	.word	0x0800befa
 8008fac:	08006c81 	.word	0x08006c81
 8008fb0:	08008d05 	.word	0x08008d05

08008fb4 <__sflush_r>:
 8008fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	0716      	lsls	r6, r2, #28
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	d454      	bmi.n	800906c <__sflush_r+0xb8>
 8008fc2:	684b      	ldr	r3, [r1, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	dc02      	bgt.n	8008fce <__sflush_r+0x1a>
 8008fc8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	dd48      	ble.n	8009060 <__sflush_r+0xac>
 8008fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fd0:	2e00      	cmp	r6, #0
 8008fd2:	d045      	beq.n	8009060 <__sflush_r+0xac>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fda:	682f      	ldr	r7, [r5, #0]
 8008fdc:	6a21      	ldr	r1, [r4, #32]
 8008fde:	602b      	str	r3, [r5, #0]
 8008fe0:	d030      	beq.n	8009044 <__sflush_r+0x90>
 8008fe2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	0759      	lsls	r1, r3, #29
 8008fe8:	d505      	bpl.n	8008ff6 <__sflush_r+0x42>
 8008fea:	6863      	ldr	r3, [r4, #4]
 8008fec:	1ad2      	subs	r2, r2, r3
 8008fee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ff0:	b10b      	cbz	r3, 8008ff6 <__sflush_r+0x42>
 8008ff2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ff4:	1ad2      	subs	r2, r2, r3
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ffc:	6a21      	ldr	r1, [r4, #32]
 8008ffe:	47b0      	blx	r6
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	d106      	bne.n	8009014 <__sflush_r+0x60>
 8009006:	6829      	ldr	r1, [r5, #0]
 8009008:	291d      	cmp	r1, #29
 800900a:	d82b      	bhi.n	8009064 <__sflush_r+0xb0>
 800900c:	4a28      	ldr	r2, [pc, #160]	@ (80090b0 <__sflush_r+0xfc>)
 800900e:	410a      	asrs	r2, r1
 8009010:	07d6      	lsls	r6, r2, #31
 8009012:	d427      	bmi.n	8009064 <__sflush_r+0xb0>
 8009014:	2200      	movs	r2, #0
 8009016:	6062      	str	r2, [r4, #4]
 8009018:	6922      	ldr	r2, [r4, #16]
 800901a:	04d9      	lsls	r1, r3, #19
 800901c:	6022      	str	r2, [r4, #0]
 800901e:	d504      	bpl.n	800902a <__sflush_r+0x76>
 8009020:	1c42      	adds	r2, r0, #1
 8009022:	d101      	bne.n	8009028 <__sflush_r+0x74>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	b903      	cbnz	r3, 800902a <__sflush_r+0x76>
 8009028:	6560      	str	r0, [r4, #84]	@ 0x54
 800902a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800902c:	602f      	str	r7, [r5, #0]
 800902e:	b1b9      	cbz	r1, 8009060 <__sflush_r+0xac>
 8009030:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009034:	4299      	cmp	r1, r3
 8009036:	d002      	beq.n	800903e <__sflush_r+0x8a>
 8009038:	4628      	mov	r0, r5
 800903a:	f7ff f9e5 	bl	8008408 <_free_r>
 800903e:	2300      	movs	r3, #0
 8009040:	6363      	str	r3, [r4, #52]	@ 0x34
 8009042:	e00d      	b.n	8009060 <__sflush_r+0xac>
 8009044:	2301      	movs	r3, #1
 8009046:	4628      	mov	r0, r5
 8009048:	47b0      	blx	r6
 800904a:	4602      	mov	r2, r0
 800904c:	1c50      	adds	r0, r2, #1
 800904e:	d1c9      	bne.n	8008fe4 <__sflush_r+0x30>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d0c6      	beq.n	8008fe4 <__sflush_r+0x30>
 8009056:	2b1d      	cmp	r3, #29
 8009058:	d001      	beq.n	800905e <__sflush_r+0xaa>
 800905a:	2b16      	cmp	r3, #22
 800905c:	d11d      	bne.n	800909a <__sflush_r+0xe6>
 800905e:	602f      	str	r7, [r5, #0]
 8009060:	2000      	movs	r0, #0
 8009062:	e021      	b.n	80090a8 <__sflush_r+0xf4>
 8009064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009068:	b21b      	sxth	r3, r3
 800906a:	e01a      	b.n	80090a2 <__sflush_r+0xee>
 800906c:	690f      	ldr	r7, [r1, #16]
 800906e:	2f00      	cmp	r7, #0
 8009070:	d0f6      	beq.n	8009060 <__sflush_r+0xac>
 8009072:	0793      	lsls	r3, r2, #30
 8009074:	bf18      	it	ne
 8009076:	2300      	movne	r3, #0
 8009078:	680e      	ldr	r6, [r1, #0]
 800907a:	bf08      	it	eq
 800907c:	694b      	ldreq	r3, [r1, #20]
 800907e:	1bf6      	subs	r6, r6, r7
 8009080:	600f      	str	r7, [r1, #0]
 8009082:	608b      	str	r3, [r1, #8]
 8009084:	2e00      	cmp	r6, #0
 8009086:	ddeb      	ble.n	8009060 <__sflush_r+0xac>
 8009088:	4633      	mov	r3, r6
 800908a:	463a      	mov	r2, r7
 800908c:	4628      	mov	r0, r5
 800908e:	6a21      	ldr	r1, [r4, #32]
 8009090:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009094:	47e0      	blx	ip
 8009096:	2800      	cmp	r0, #0
 8009098:	dc07      	bgt.n	80090aa <__sflush_r+0xf6>
 800909a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800909e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090a2:	f04f 30ff 	mov.w	r0, #4294967295
 80090a6:	81a3      	strh	r3, [r4, #12]
 80090a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090aa:	4407      	add	r7, r0
 80090ac:	1a36      	subs	r6, r6, r0
 80090ae:	e7e9      	b.n	8009084 <__sflush_r+0xd0>
 80090b0:	dfbffffe 	.word	0xdfbffffe

080090b4 <_fflush_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	690b      	ldr	r3, [r1, #16]
 80090b8:	4605      	mov	r5, r0
 80090ba:	460c      	mov	r4, r1
 80090bc:	b913      	cbnz	r3, 80090c4 <_fflush_r+0x10>
 80090be:	2500      	movs	r5, #0
 80090c0:	4628      	mov	r0, r5
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	b118      	cbz	r0, 80090ce <_fflush_r+0x1a>
 80090c6:	6a03      	ldr	r3, [r0, #32]
 80090c8:	b90b      	cbnz	r3, 80090ce <_fflush_r+0x1a>
 80090ca:	f7fe fa23 	bl	8007514 <__sinit>
 80090ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0f3      	beq.n	80090be <_fflush_r+0xa>
 80090d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090d8:	07d0      	lsls	r0, r2, #31
 80090da:	d404      	bmi.n	80090e6 <_fflush_r+0x32>
 80090dc:	0599      	lsls	r1, r3, #22
 80090de:	d402      	bmi.n	80090e6 <_fflush_r+0x32>
 80090e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090e2:	f7fe fb2e 	bl	8007742 <__retarget_lock_acquire_recursive>
 80090e6:	4628      	mov	r0, r5
 80090e8:	4621      	mov	r1, r4
 80090ea:	f7ff ff63 	bl	8008fb4 <__sflush_r>
 80090ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090f0:	4605      	mov	r5, r0
 80090f2:	07da      	lsls	r2, r3, #31
 80090f4:	d4e4      	bmi.n	80090c0 <_fflush_r+0xc>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	059b      	lsls	r3, r3, #22
 80090fa:	d4e1      	bmi.n	80090c0 <_fflush_r+0xc>
 80090fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090fe:	f7fe fb21 	bl	8007744 <__retarget_lock_release_recursive>
 8009102:	e7dd      	b.n	80090c0 <_fflush_r+0xc>

08009104 <memmove>:
 8009104:	4288      	cmp	r0, r1
 8009106:	b510      	push	{r4, lr}
 8009108:	eb01 0402 	add.w	r4, r1, r2
 800910c:	d902      	bls.n	8009114 <memmove+0x10>
 800910e:	4284      	cmp	r4, r0
 8009110:	4623      	mov	r3, r4
 8009112:	d807      	bhi.n	8009124 <memmove+0x20>
 8009114:	1e43      	subs	r3, r0, #1
 8009116:	42a1      	cmp	r1, r4
 8009118:	d008      	beq.n	800912c <memmove+0x28>
 800911a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800911e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009122:	e7f8      	b.n	8009116 <memmove+0x12>
 8009124:	4601      	mov	r1, r0
 8009126:	4402      	add	r2, r0
 8009128:	428a      	cmp	r2, r1
 800912a:	d100      	bne.n	800912e <memmove+0x2a>
 800912c:	bd10      	pop	{r4, pc}
 800912e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009136:	e7f7      	b.n	8009128 <memmove+0x24>

08009138 <_sbrk_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	2300      	movs	r3, #0
 800913c:	4d05      	ldr	r5, [pc, #20]	@ (8009154 <_sbrk_r+0x1c>)
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	602b      	str	r3, [r5, #0]
 8009144:	f7f9 fd9e 	bl	8002c84 <_sbrk>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_sbrk_r+0x1a>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_sbrk_r+0x1a>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20001118 	.word	0x20001118

08009158 <memcpy>:
 8009158:	440a      	add	r2, r1
 800915a:	4291      	cmp	r1, r2
 800915c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009160:	d100      	bne.n	8009164 <memcpy+0xc>
 8009162:	4770      	bx	lr
 8009164:	b510      	push	{r4, lr}
 8009166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800916a:	4291      	cmp	r1, r2
 800916c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009170:	d1f9      	bne.n	8009166 <memcpy+0xe>
 8009172:	bd10      	pop	{r4, pc}

08009174 <__assert_func>:
 8009174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009176:	4614      	mov	r4, r2
 8009178:	461a      	mov	r2, r3
 800917a:	4b09      	ldr	r3, [pc, #36]	@ (80091a0 <__assert_func+0x2c>)
 800917c:	4605      	mov	r5, r0
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68d8      	ldr	r0, [r3, #12]
 8009182:	b954      	cbnz	r4, 800919a <__assert_func+0x26>
 8009184:	4b07      	ldr	r3, [pc, #28]	@ (80091a4 <__assert_func+0x30>)
 8009186:	461c      	mov	r4, r3
 8009188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800918c:	9100      	str	r1, [sp, #0]
 800918e:	462b      	mov	r3, r5
 8009190:	4905      	ldr	r1, [pc, #20]	@ (80091a8 <__assert_func+0x34>)
 8009192:	f000 f86f 	bl	8009274 <fiprintf>
 8009196:	f000 f87f 	bl	8009298 <abort>
 800919a:	4b04      	ldr	r3, [pc, #16]	@ (80091ac <__assert_func+0x38>)
 800919c:	e7f4      	b.n	8009188 <__assert_func+0x14>
 800919e:	bf00      	nop
 80091a0:	20000030 	.word	0x20000030
 80091a4:	0800bf46 	.word	0x0800bf46
 80091a8:	0800bf18 	.word	0x0800bf18
 80091ac:	0800bf0b 	.word	0x0800bf0b

080091b0 <_calloc_r>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	fba1 5402 	umull	r5, r4, r1, r2
 80091b6:	b93c      	cbnz	r4, 80091c8 <_calloc_r+0x18>
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7ff f997 	bl	80084ec <_malloc_r>
 80091be:	4606      	mov	r6, r0
 80091c0:	b928      	cbnz	r0, 80091ce <_calloc_r+0x1e>
 80091c2:	2600      	movs	r6, #0
 80091c4:	4630      	mov	r0, r6
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	220c      	movs	r2, #12
 80091ca:	6002      	str	r2, [r0, #0]
 80091cc:	e7f9      	b.n	80091c2 <_calloc_r+0x12>
 80091ce:	462a      	mov	r2, r5
 80091d0:	4621      	mov	r1, r4
 80091d2:	f7fe fa38 	bl	8007646 <memset>
 80091d6:	e7f5      	b.n	80091c4 <_calloc_r+0x14>

080091d8 <__ascii_mbtowc>:
 80091d8:	b082      	sub	sp, #8
 80091da:	b901      	cbnz	r1, 80091de <__ascii_mbtowc+0x6>
 80091dc:	a901      	add	r1, sp, #4
 80091de:	b142      	cbz	r2, 80091f2 <__ascii_mbtowc+0x1a>
 80091e0:	b14b      	cbz	r3, 80091f6 <__ascii_mbtowc+0x1e>
 80091e2:	7813      	ldrb	r3, [r2, #0]
 80091e4:	600b      	str	r3, [r1, #0]
 80091e6:	7812      	ldrb	r2, [r2, #0]
 80091e8:	1e10      	subs	r0, r2, #0
 80091ea:	bf18      	it	ne
 80091ec:	2001      	movne	r0, #1
 80091ee:	b002      	add	sp, #8
 80091f0:	4770      	bx	lr
 80091f2:	4610      	mov	r0, r2
 80091f4:	e7fb      	b.n	80091ee <__ascii_mbtowc+0x16>
 80091f6:	f06f 0001 	mvn.w	r0, #1
 80091fa:	e7f8      	b.n	80091ee <__ascii_mbtowc+0x16>

080091fc <_realloc_r>:
 80091fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	4680      	mov	r8, r0
 8009202:	4615      	mov	r5, r2
 8009204:	460c      	mov	r4, r1
 8009206:	b921      	cbnz	r1, 8009212 <_realloc_r+0x16>
 8009208:	4611      	mov	r1, r2
 800920a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800920e:	f7ff b96d 	b.w	80084ec <_malloc_r>
 8009212:	b92a      	cbnz	r2, 8009220 <_realloc_r+0x24>
 8009214:	f7ff f8f8 	bl	8008408 <_free_r>
 8009218:	2400      	movs	r4, #0
 800921a:	4620      	mov	r0, r4
 800921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009220:	f000 f841 	bl	80092a6 <_malloc_usable_size_r>
 8009224:	4285      	cmp	r5, r0
 8009226:	4606      	mov	r6, r0
 8009228:	d802      	bhi.n	8009230 <_realloc_r+0x34>
 800922a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800922e:	d8f4      	bhi.n	800921a <_realloc_r+0x1e>
 8009230:	4629      	mov	r1, r5
 8009232:	4640      	mov	r0, r8
 8009234:	f7ff f95a 	bl	80084ec <_malloc_r>
 8009238:	4607      	mov	r7, r0
 800923a:	2800      	cmp	r0, #0
 800923c:	d0ec      	beq.n	8009218 <_realloc_r+0x1c>
 800923e:	42b5      	cmp	r5, r6
 8009240:	462a      	mov	r2, r5
 8009242:	4621      	mov	r1, r4
 8009244:	bf28      	it	cs
 8009246:	4632      	movcs	r2, r6
 8009248:	f7ff ff86 	bl	8009158 <memcpy>
 800924c:	4621      	mov	r1, r4
 800924e:	4640      	mov	r0, r8
 8009250:	f7ff f8da 	bl	8008408 <_free_r>
 8009254:	463c      	mov	r4, r7
 8009256:	e7e0      	b.n	800921a <_realloc_r+0x1e>

08009258 <__ascii_wctomb>:
 8009258:	4603      	mov	r3, r0
 800925a:	4608      	mov	r0, r1
 800925c:	b141      	cbz	r1, 8009270 <__ascii_wctomb+0x18>
 800925e:	2aff      	cmp	r2, #255	@ 0xff
 8009260:	d904      	bls.n	800926c <__ascii_wctomb+0x14>
 8009262:	228a      	movs	r2, #138	@ 0x8a
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	4770      	bx	lr
 800926c:	2001      	movs	r0, #1
 800926e:	700a      	strb	r2, [r1, #0]
 8009270:	4770      	bx	lr
	...

08009274 <fiprintf>:
 8009274:	b40e      	push	{r1, r2, r3}
 8009276:	b503      	push	{r0, r1, lr}
 8009278:	4601      	mov	r1, r0
 800927a:	ab03      	add	r3, sp, #12
 800927c:	4805      	ldr	r0, [pc, #20]	@ (8009294 <fiprintf+0x20>)
 800927e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009282:	6800      	ldr	r0, [r0, #0]
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	f000 f83d 	bl	8009304 <_vfiprintf_r>
 800928a:	b002      	add	sp, #8
 800928c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009290:	b003      	add	sp, #12
 8009292:	4770      	bx	lr
 8009294:	20000030 	.word	0x20000030

08009298 <abort>:
 8009298:	2006      	movs	r0, #6
 800929a:	b508      	push	{r3, lr}
 800929c:	f000 fa06 	bl	80096ac <raise>
 80092a0:	2001      	movs	r0, #1
 80092a2:	f7f9 fc7a 	bl	8002b9a <_exit>

080092a6 <_malloc_usable_size_r>:
 80092a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092aa:	1f18      	subs	r0, r3, #4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfbc      	itt	lt
 80092b0:	580b      	ldrlt	r3, [r1, r0]
 80092b2:	18c0      	addlt	r0, r0, r3
 80092b4:	4770      	bx	lr

080092b6 <__sfputc_r>:
 80092b6:	6893      	ldr	r3, [r2, #8]
 80092b8:	b410      	push	{r4}
 80092ba:	3b01      	subs	r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	6093      	str	r3, [r2, #8]
 80092c0:	da07      	bge.n	80092d2 <__sfputc_r+0x1c>
 80092c2:	6994      	ldr	r4, [r2, #24]
 80092c4:	42a3      	cmp	r3, r4
 80092c6:	db01      	blt.n	80092cc <__sfputc_r+0x16>
 80092c8:	290a      	cmp	r1, #10
 80092ca:	d102      	bne.n	80092d2 <__sfputc_r+0x1c>
 80092cc:	bc10      	pop	{r4}
 80092ce:	f000 b931 	b.w	8009534 <__swbuf_r>
 80092d2:	6813      	ldr	r3, [r2, #0]
 80092d4:	1c58      	adds	r0, r3, #1
 80092d6:	6010      	str	r0, [r2, #0]
 80092d8:	7019      	strb	r1, [r3, #0]
 80092da:	4608      	mov	r0, r1
 80092dc:	bc10      	pop	{r4}
 80092de:	4770      	bx	lr

080092e0 <__sfputs_r>:
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	4606      	mov	r6, r0
 80092e4:	460f      	mov	r7, r1
 80092e6:	4614      	mov	r4, r2
 80092e8:	18d5      	adds	r5, r2, r3
 80092ea:	42ac      	cmp	r4, r5
 80092ec:	d101      	bne.n	80092f2 <__sfputs_r+0x12>
 80092ee:	2000      	movs	r0, #0
 80092f0:	e007      	b.n	8009302 <__sfputs_r+0x22>
 80092f2:	463a      	mov	r2, r7
 80092f4:	4630      	mov	r0, r6
 80092f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fa:	f7ff ffdc 	bl	80092b6 <__sfputc_r>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	d1f3      	bne.n	80092ea <__sfputs_r+0xa>
 8009302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009304 <_vfiprintf_r>:
 8009304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009308:	460d      	mov	r5, r1
 800930a:	4614      	mov	r4, r2
 800930c:	4698      	mov	r8, r3
 800930e:	4606      	mov	r6, r0
 8009310:	b09d      	sub	sp, #116	@ 0x74
 8009312:	b118      	cbz	r0, 800931c <_vfiprintf_r+0x18>
 8009314:	6a03      	ldr	r3, [r0, #32]
 8009316:	b90b      	cbnz	r3, 800931c <_vfiprintf_r+0x18>
 8009318:	f7fe f8fc 	bl	8007514 <__sinit>
 800931c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800931e:	07d9      	lsls	r1, r3, #31
 8009320:	d405      	bmi.n	800932e <_vfiprintf_r+0x2a>
 8009322:	89ab      	ldrh	r3, [r5, #12]
 8009324:	059a      	lsls	r2, r3, #22
 8009326:	d402      	bmi.n	800932e <_vfiprintf_r+0x2a>
 8009328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800932a:	f7fe fa0a 	bl	8007742 <__retarget_lock_acquire_recursive>
 800932e:	89ab      	ldrh	r3, [r5, #12]
 8009330:	071b      	lsls	r3, r3, #28
 8009332:	d501      	bpl.n	8009338 <_vfiprintf_r+0x34>
 8009334:	692b      	ldr	r3, [r5, #16]
 8009336:	b99b      	cbnz	r3, 8009360 <_vfiprintf_r+0x5c>
 8009338:	4629      	mov	r1, r5
 800933a:	4630      	mov	r0, r6
 800933c:	f000 f938 	bl	80095b0 <__swsetup_r>
 8009340:	b170      	cbz	r0, 8009360 <_vfiprintf_r+0x5c>
 8009342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009344:	07dc      	lsls	r4, r3, #31
 8009346:	d504      	bpl.n	8009352 <_vfiprintf_r+0x4e>
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	b01d      	add	sp, #116	@ 0x74
 800934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009352:	89ab      	ldrh	r3, [r5, #12]
 8009354:	0598      	lsls	r0, r3, #22
 8009356:	d4f7      	bmi.n	8009348 <_vfiprintf_r+0x44>
 8009358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800935a:	f7fe f9f3 	bl	8007744 <__retarget_lock_release_recursive>
 800935e:	e7f3      	b.n	8009348 <_vfiprintf_r+0x44>
 8009360:	2300      	movs	r3, #0
 8009362:	9309      	str	r3, [sp, #36]	@ 0x24
 8009364:	2320      	movs	r3, #32
 8009366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800936a:	2330      	movs	r3, #48	@ 0x30
 800936c:	f04f 0901 	mov.w	r9, #1
 8009370:	f8cd 800c 	str.w	r8, [sp, #12]
 8009374:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009520 <_vfiprintf_r+0x21c>
 8009378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800937c:	4623      	mov	r3, r4
 800937e:	469a      	mov	sl, r3
 8009380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009384:	b10a      	cbz	r2, 800938a <_vfiprintf_r+0x86>
 8009386:	2a25      	cmp	r2, #37	@ 0x25
 8009388:	d1f9      	bne.n	800937e <_vfiprintf_r+0x7a>
 800938a:	ebba 0b04 	subs.w	fp, sl, r4
 800938e:	d00b      	beq.n	80093a8 <_vfiprintf_r+0xa4>
 8009390:	465b      	mov	r3, fp
 8009392:	4622      	mov	r2, r4
 8009394:	4629      	mov	r1, r5
 8009396:	4630      	mov	r0, r6
 8009398:	f7ff ffa2 	bl	80092e0 <__sfputs_r>
 800939c:	3001      	adds	r0, #1
 800939e:	f000 80a7 	beq.w	80094f0 <_vfiprintf_r+0x1ec>
 80093a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093a4:	445a      	add	r2, fp
 80093a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80093a8:	f89a 3000 	ldrb.w	r3, [sl]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 809f 	beq.w	80094f0 <_vfiprintf_r+0x1ec>
 80093b2:	2300      	movs	r3, #0
 80093b4:	f04f 32ff 	mov.w	r2, #4294967295
 80093b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093bc:	f10a 0a01 	add.w	sl, sl, #1
 80093c0:	9304      	str	r3, [sp, #16]
 80093c2:	9307      	str	r3, [sp, #28]
 80093c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80093ca:	4654      	mov	r4, sl
 80093cc:	2205      	movs	r2, #5
 80093ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d2:	4853      	ldr	r0, [pc, #332]	@ (8009520 <_vfiprintf_r+0x21c>)
 80093d4:	f7fe f9b7 	bl	8007746 <memchr>
 80093d8:	9a04      	ldr	r2, [sp, #16]
 80093da:	b9d8      	cbnz	r0, 8009414 <_vfiprintf_r+0x110>
 80093dc:	06d1      	lsls	r1, r2, #27
 80093de:	bf44      	itt	mi
 80093e0:	2320      	movmi	r3, #32
 80093e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093e6:	0713      	lsls	r3, r2, #28
 80093e8:	bf44      	itt	mi
 80093ea:	232b      	movmi	r3, #43	@ 0x2b
 80093ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093f0:	f89a 3000 	ldrb.w	r3, [sl]
 80093f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80093f6:	d015      	beq.n	8009424 <_vfiprintf_r+0x120>
 80093f8:	4654      	mov	r4, sl
 80093fa:	2000      	movs	r0, #0
 80093fc:	f04f 0c0a 	mov.w	ip, #10
 8009400:	9a07      	ldr	r2, [sp, #28]
 8009402:	4621      	mov	r1, r4
 8009404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009408:	3b30      	subs	r3, #48	@ 0x30
 800940a:	2b09      	cmp	r3, #9
 800940c:	d94b      	bls.n	80094a6 <_vfiprintf_r+0x1a2>
 800940e:	b1b0      	cbz	r0, 800943e <_vfiprintf_r+0x13a>
 8009410:	9207      	str	r2, [sp, #28]
 8009412:	e014      	b.n	800943e <_vfiprintf_r+0x13a>
 8009414:	eba0 0308 	sub.w	r3, r0, r8
 8009418:	fa09 f303 	lsl.w	r3, r9, r3
 800941c:	4313      	orrs	r3, r2
 800941e:	46a2      	mov	sl, r4
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	e7d2      	b.n	80093ca <_vfiprintf_r+0xc6>
 8009424:	9b03      	ldr	r3, [sp, #12]
 8009426:	1d19      	adds	r1, r3, #4
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	9103      	str	r1, [sp, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	bfbb      	ittet	lt
 8009430:	425b      	neglt	r3, r3
 8009432:	f042 0202 	orrlt.w	r2, r2, #2
 8009436:	9307      	strge	r3, [sp, #28]
 8009438:	9307      	strlt	r3, [sp, #28]
 800943a:	bfb8      	it	lt
 800943c:	9204      	strlt	r2, [sp, #16]
 800943e:	7823      	ldrb	r3, [r4, #0]
 8009440:	2b2e      	cmp	r3, #46	@ 0x2e
 8009442:	d10a      	bne.n	800945a <_vfiprintf_r+0x156>
 8009444:	7863      	ldrb	r3, [r4, #1]
 8009446:	2b2a      	cmp	r3, #42	@ 0x2a
 8009448:	d132      	bne.n	80094b0 <_vfiprintf_r+0x1ac>
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	3402      	adds	r4, #2
 800944e:	1d1a      	adds	r2, r3, #4
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	9203      	str	r2, [sp, #12]
 8009454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009458:	9305      	str	r3, [sp, #20]
 800945a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009524 <_vfiprintf_r+0x220>
 800945e:	2203      	movs	r2, #3
 8009460:	4650      	mov	r0, sl
 8009462:	7821      	ldrb	r1, [r4, #0]
 8009464:	f7fe f96f 	bl	8007746 <memchr>
 8009468:	b138      	cbz	r0, 800947a <_vfiprintf_r+0x176>
 800946a:	2240      	movs	r2, #64	@ 0x40
 800946c:	9b04      	ldr	r3, [sp, #16]
 800946e:	eba0 000a 	sub.w	r0, r0, sl
 8009472:	4082      	lsls	r2, r0
 8009474:	4313      	orrs	r3, r2
 8009476:	3401      	adds	r4, #1
 8009478:	9304      	str	r3, [sp, #16]
 800947a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800947e:	2206      	movs	r2, #6
 8009480:	4829      	ldr	r0, [pc, #164]	@ (8009528 <_vfiprintf_r+0x224>)
 8009482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009486:	f7fe f95e 	bl	8007746 <memchr>
 800948a:	2800      	cmp	r0, #0
 800948c:	d03f      	beq.n	800950e <_vfiprintf_r+0x20a>
 800948e:	4b27      	ldr	r3, [pc, #156]	@ (800952c <_vfiprintf_r+0x228>)
 8009490:	bb1b      	cbnz	r3, 80094da <_vfiprintf_r+0x1d6>
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	3307      	adds	r3, #7
 8009496:	f023 0307 	bic.w	r3, r3, #7
 800949a:	3308      	adds	r3, #8
 800949c:	9303      	str	r3, [sp, #12]
 800949e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094a0:	443b      	add	r3, r7
 80094a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80094a4:	e76a      	b.n	800937c <_vfiprintf_r+0x78>
 80094a6:	460c      	mov	r4, r1
 80094a8:	2001      	movs	r0, #1
 80094aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80094ae:	e7a8      	b.n	8009402 <_vfiprintf_r+0xfe>
 80094b0:	2300      	movs	r3, #0
 80094b2:	f04f 0c0a 	mov.w	ip, #10
 80094b6:	4619      	mov	r1, r3
 80094b8:	3401      	adds	r4, #1
 80094ba:	9305      	str	r3, [sp, #20]
 80094bc:	4620      	mov	r0, r4
 80094be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094c2:	3a30      	subs	r2, #48	@ 0x30
 80094c4:	2a09      	cmp	r2, #9
 80094c6:	d903      	bls.n	80094d0 <_vfiprintf_r+0x1cc>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d0c6      	beq.n	800945a <_vfiprintf_r+0x156>
 80094cc:	9105      	str	r1, [sp, #20]
 80094ce:	e7c4      	b.n	800945a <_vfiprintf_r+0x156>
 80094d0:	4604      	mov	r4, r0
 80094d2:	2301      	movs	r3, #1
 80094d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80094d8:	e7f0      	b.n	80094bc <_vfiprintf_r+0x1b8>
 80094da:	ab03      	add	r3, sp, #12
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	462a      	mov	r2, r5
 80094e0:	4630      	mov	r0, r6
 80094e2:	4b13      	ldr	r3, [pc, #76]	@ (8009530 <_vfiprintf_r+0x22c>)
 80094e4:	a904      	add	r1, sp, #16
 80094e6:	f7fd fbcb 	bl	8006c80 <_printf_float>
 80094ea:	4607      	mov	r7, r0
 80094ec:	1c78      	adds	r0, r7, #1
 80094ee:	d1d6      	bne.n	800949e <_vfiprintf_r+0x19a>
 80094f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094f2:	07d9      	lsls	r1, r3, #31
 80094f4:	d405      	bmi.n	8009502 <_vfiprintf_r+0x1fe>
 80094f6:	89ab      	ldrh	r3, [r5, #12]
 80094f8:	059a      	lsls	r2, r3, #22
 80094fa:	d402      	bmi.n	8009502 <_vfiprintf_r+0x1fe>
 80094fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094fe:	f7fe f921 	bl	8007744 <__retarget_lock_release_recursive>
 8009502:	89ab      	ldrh	r3, [r5, #12]
 8009504:	065b      	lsls	r3, r3, #25
 8009506:	f53f af1f 	bmi.w	8009348 <_vfiprintf_r+0x44>
 800950a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800950c:	e71e      	b.n	800934c <_vfiprintf_r+0x48>
 800950e:	ab03      	add	r3, sp, #12
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	462a      	mov	r2, r5
 8009514:	4630      	mov	r0, r6
 8009516:	4b06      	ldr	r3, [pc, #24]	@ (8009530 <_vfiprintf_r+0x22c>)
 8009518:	a904      	add	r1, sp, #16
 800951a:	f7fd fe4f 	bl	80071bc <_printf_i>
 800951e:	e7e4      	b.n	80094ea <_vfiprintf_r+0x1e6>
 8009520:	0800bef0 	.word	0x0800bef0
 8009524:	0800bef6 	.word	0x0800bef6
 8009528:	0800befa 	.word	0x0800befa
 800952c:	08006c81 	.word	0x08006c81
 8009530:	080092e1 	.word	0x080092e1

08009534 <__swbuf_r>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	460e      	mov	r6, r1
 8009538:	4614      	mov	r4, r2
 800953a:	4605      	mov	r5, r0
 800953c:	b118      	cbz	r0, 8009546 <__swbuf_r+0x12>
 800953e:	6a03      	ldr	r3, [r0, #32]
 8009540:	b90b      	cbnz	r3, 8009546 <__swbuf_r+0x12>
 8009542:	f7fd ffe7 	bl	8007514 <__sinit>
 8009546:	69a3      	ldr	r3, [r4, #24]
 8009548:	60a3      	str	r3, [r4, #8]
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	071a      	lsls	r2, r3, #28
 800954e:	d501      	bpl.n	8009554 <__swbuf_r+0x20>
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	b943      	cbnz	r3, 8009566 <__swbuf_r+0x32>
 8009554:	4621      	mov	r1, r4
 8009556:	4628      	mov	r0, r5
 8009558:	f000 f82a 	bl	80095b0 <__swsetup_r>
 800955c:	b118      	cbz	r0, 8009566 <__swbuf_r+0x32>
 800955e:	f04f 37ff 	mov.w	r7, #4294967295
 8009562:	4638      	mov	r0, r7
 8009564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	6922      	ldr	r2, [r4, #16]
 800956a:	b2f6      	uxtb	r6, r6
 800956c:	1a98      	subs	r0, r3, r2
 800956e:	6963      	ldr	r3, [r4, #20]
 8009570:	4637      	mov	r7, r6
 8009572:	4283      	cmp	r3, r0
 8009574:	dc05      	bgt.n	8009582 <__swbuf_r+0x4e>
 8009576:	4621      	mov	r1, r4
 8009578:	4628      	mov	r0, r5
 800957a:	f7ff fd9b 	bl	80090b4 <_fflush_r>
 800957e:	2800      	cmp	r0, #0
 8009580:	d1ed      	bne.n	800955e <__swbuf_r+0x2a>
 8009582:	68a3      	ldr	r3, [r4, #8]
 8009584:	3b01      	subs	r3, #1
 8009586:	60a3      	str	r3, [r4, #8]
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	701e      	strb	r6, [r3, #0]
 8009590:	6962      	ldr	r2, [r4, #20]
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	429a      	cmp	r2, r3
 8009596:	d004      	beq.n	80095a2 <__swbuf_r+0x6e>
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	07db      	lsls	r3, r3, #31
 800959c:	d5e1      	bpl.n	8009562 <__swbuf_r+0x2e>
 800959e:	2e0a      	cmp	r6, #10
 80095a0:	d1df      	bne.n	8009562 <__swbuf_r+0x2e>
 80095a2:	4621      	mov	r1, r4
 80095a4:	4628      	mov	r0, r5
 80095a6:	f7ff fd85 	bl	80090b4 <_fflush_r>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d0d9      	beq.n	8009562 <__swbuf_r+0x2e>
 80095ae:	e7d6      	b.n	800955e <__swbuf_r+0x2a>

080095b0 <__swsetup_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4b29      	ldr	r3, [pc, #164]	@ (8009658 <__swsetup_r+0xa8>)
 80095b4:	4605      	mov	r5, r0
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	460c      	mov	r4, r1
 80095ba:	b118      	cbz	r0, 80095c4 <__swsetup_r+0x14>
 80095bc:	6a03      	ldr	r3, [r0, #32]
 80095be:	b90b      	cbnz	r3, 80095c4 <__swsetup_r+0x14>
 80095c0:	f7fd ffa8 	bl	8007514 <__sinit>
 80095c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095c8:	0719      	lsls	r1, r3, #28
 80095ca:	d422      	bmi.n	8009612 <__swsetup_r+0x62>
 80095cc:	06da      	lsls	r2, r3, #27
 80095ce:	d407      	bmi.n	80095e0 <__swsetup_r+0x30>
 80095d0:	2209      	movs	r2, #9
 80095d2:	602a      	str	r2, [r5, #0]
 80095d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	e033      	b.n	8009648 <__swsetup_r+0x98>
 80095e0:	0758      	lsls	r0, r3, #29
 80095e2:	d512      	bpl.n	800960a <__swsetup_r+0x5a>
 80095e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095e6:	b141      	cbz	r1, 80095fa <__swsetup_r+0x4a>
 80095e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095ec:	4299      	cmp	r1, r3
 80095ee:	d002      	beq.n	80095f6 <__swsetup_r+0x46>
 80095f0:	4628      	mov	r0, r5
 80095f2:	f7fe ff09 	bl	8008408 <_free_r>
 80095f6:	2300      	movs	r3, #0
 80095f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009600:	81a3      	strh	r3, [r4, #12]
 8009602:	2300      	movs	r3, #0
 8009604:	6063      	str	r3, [r4, #4]
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f043 0308 	orr.w	r3, r3, #8
 8009610:	81a3      	strh	r3, [r4, #12]
 8009612:	6923      	ldr	r3, [r4, #16]
 8009614:	b94b      	cbnz	r3, 800962a <__swsetup_r+0x7a>
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800961c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009620:	d003      	beq.n	800962a <__swsetup_r+0x7a>
 8009622:	4621      	mov	r1, r4
 8009624:	4628      	mov	r0, r5
 8009626:	f000 f882 	bl	800972e <__smakebuf_r>
 800962a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800962e:	f013 0201 	ands.w	r2, r3, #1
 8009632:	d00a      	beq.n	800964a <__swsetup_r+0x9a>
 8009634:	2200      	movs	r2, #0
 8009636:	60a2      	str	r2, [r4, #8]
 8009638:	6962      	ldr	r2, [r4, #20]
 800963a:	4252      	negs	r2, r2
 800963c:	61a2      	str	r2, [r4, #24]
 800963e:	6922      	ldr	r2, [r4, #16]
 8009640:	b942      	cbnz	r2, 8009654 <__swsetup_r+0xa4>
 8009642:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009646:	d1c5      	bne.n	80095d4 <__swsetup_r+0x24>
 8009648:	bd38      	pop	{r3, r4, r5, pc}
 800964a:	0799      	lsls	r1, r3, #30
 800964c:	bf58      	it	pl
 800964e:	6962      	ldrpl	r2, [r4, #20]
 8009650:	60a2      	str	r2, [r4, #8]
 8009652:	e7f4      	b.n	800963e <__swsetup_r+0x8e>
 8009654:	2000      	movs	r0, #0
 8009656:	e7f7      	b.n	8009648 <__swsetup_r+0x98>
 8009658:	20000030 	.word	0x20000030

0800965c <_raise_r>:
 800965c:	291f      	cmp	r1, #31
 800965e:	b538      	push	{r3, r4, r5, lr}
 8009660:	4605      	mov	r5, r0
 8009662:	460c      	mov	r4, r1
 8009664:	d904      	bls.n	8009670 <_raise_r+0x14>
 8009666:	2316      	movs	r3, #22
 8009668:	6003      	str	r3, [r0, #0]
 800966a:	f04f 30ff 	mov.w	r0, #4294967295
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009672:	b112      	cbz	r2, 800967a <_raise_r+0x1e>
 8009674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009678:	b94b      	cbnz	r3, 800968e <_raise_r+0x32>
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f830 	bl	80096e0 <_getpid_r>
 8009680:	4622      	mov	r2, r4
 8009682:	4601      	mov	r1, r0
 8009684:	4628      	mov	r0, r5
 8009686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800968a:	f000 b817 	b.w	80096bc <_kill_r>
 800968e:	2b01      	cmp	r3, #1
 8009690:	d00a      	beq.n	80096a8 <_raise_r+0x4c>
 8009692:	1c59      	adds	r1, r3, #1
 8009694:	d103      	bne.n	800969e <_raise_r+0x42>
 8009696:	2316      	movs	r3, #22
 8009698:	6003      	str	r3, [r0, #0]
 800969a:	2001      	movs	r0, #1
 800969c:	e7e7      	b.n	800966e <_raise_r+0x12>
 800969e:	2100      	movs	r1, #0
 80096a0:	4620      	mov	r0, r4
 80096a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80096a6:	4798      	blx	r3
 80096a8:	2000      	movs	r0, #0
 80096aa:	e7e0      	b.n	800966e <_raise_r+0x12>

080096ac <raise>:
 80096ac:	4b02      	ldr	r3, [pc, #8]	@ (80096b8 <raise+0xc>)
 80096ae:	4601      	mov	r1, r0
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	f7ff bfd3 	b.w	800965c <_raise_r>
 80096b6:	bf00      	nop
 80096b8:	20000030 	.word	0x20000030

080096bc <_kill_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	2300      	movs	r3, #0
 80096c0:	4d06      	ldr	r5, [pc, #24]	@ (80096dc <_kill_r+0x20>)
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	4611      	mov	r1, r2
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	f7f9 fa56 	bl	8002b7a <_kill>
 80096ce:	1c43      	adds	r3, r0, #1
 80096d0:	d102      	bne.n	80096d8 <_kill_r+0x1c>
 80096d2:	682b      	ldr	r3, [r5, #0]
 80096d4:	b103      	cbz	r3, 80096d8 <_kill_r+0x1c>
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	bf00      	nop
 80096dc:	20001118 	.word	0x20001118

080096e0 <_getpid_r>:
 80096e0:	f7f9 ba44 	b.w	8002b6c <_getpid>

080096e4 <__swhatbuf_r>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	460c      	mov	r4, r1
 80096e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ec:	4615      	mov	r5, r2
 80096ee:	2900      	cmp	r1, #0
 80096f0:	461e      	mov	r6, r3
 80096f2:	b096      	sub	sp, #88	@ 0x58
 80096f4:	da0c      	bge.n	8009710 <__swhatbuf_r+0x2c>
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	2100      	movs	r1, #0
 80096fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096fe:	bf14      	ite	ne
 8009700:	2340      	movne	r3, #64	@ 0x40
 8009702:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009706:	2000      	movs	r0, #0
 8009708:	6031      	str	r1, [r6, #0]
 800970a:	602b      	str	r3, [r5, #0]
 800970c:	b016      	add	sp, #88	@ 0x58
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	466a      	mov	r2, sp
 8009712:	f000 f849 	bl	80097a8 <_fstat_r>
 8009716:	2800      	cmp	r0, #0
 8009718:	dbed      	blt.n	80096f6 <__swhatbuf_r+0x12>
 800971a:	9901      	ldr	r1, [sp, #4]
 800971c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009720:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009724:	4259      	negs	r1, r3
 8009726:	4159      	adcs	r1, r3
 8009728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800972c:	e7eb      	b.n	8009706 <__swhatbuf_r+0x22>

0800972e <__smakebuf_r>:
 800972e:	898b      	ldrh	r3, [r1, #12]
 8009730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009732:	079d      	lsls	r5, r3, #30
 8009734:	4606      	mov	r6, r0
 8009736:	460c      	mov	r4, r1
 8009738:	d507      	bpl.n	800974a <__smakebuf_r+0x1c>
 800973a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	2301      	movs	r3, #1
 8009744:	6163      	str	r3, [r4, #20]
 8009746:	b003      	add	sp, #12
 8009748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800974a:	466a      	mov	r2, sp
 800974c:	ab01      	add	r3, sp, #4
 800974e:	f7ff ffc9 	bl	80096e4 <__swhatbuf_r>
 8009752:	9f00      	ldr	r7, [sp, #0]
 8009754:	4605      	mov	r5, r0
 8009756:	4639      	mov	r1, r7
 8009758:	4630      	mov	r0, r6
 800975a:	f7fe fec7 	bl	80084ec <_malloc_r>
 800975e:	b948      	cbnz	r0, 8009774 <__smakebuf_r+0x46>
 8009760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009764:	059a      	lsls	r2, r3, #22
 8009766:	d4ee      	bmi.n	8009746 <__smakebuf_r+0x18>
 8009768:	f023 0303 	bic.w	r3, r3, #3
 800976c:	f043 0302 	orr.w	r3, r3, #2
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	e7e2      	b.n	800973a <__smakebuf_r+0xc>
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800977a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800977e:	81a3      	strh	r3, [r4, #12]
 8009780:	9b01      	ldr	r3, [sp, #4]
 8009782:	6020      	str	r0, [r4, #0]
 8009784:	b15b      	cbz	r3, 800979e <__smakebuf_r+0x70>
 8009786:	4630      	mov	r0, r6
 8009788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800978c:	f000 f81e 	bl	80097cc <_isatty_r>
 8009790:	b128      	cbz	r0, 800979e <__smakebuf_r+0x70>
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f023 0303 	bic.w	r3, r3, #3
 8009798:	f043 0301 	orr.w	r3, r3, #1
 800979c:	81a3      	strh	r3, [r4, #12]
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	431d      	orrs	r5, r3
 80097a2:	81a5      	strh	r5, [r4, #12]
 80097a4:	e7cf      	b.n	8009746 <__smakebuf_r+0x18>
	...

080097a8 <_fstat_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	2300      	movs	r3, #0
 80097ac:	4d06      	ldr	r5, [pc, #24]	@ (80097c8 <_fstat_r+0x20>)
 80097ae:	4604      	mov	r4, r0
 80097b0:	4608      	mov	r0, r1
 80097b2:	4611      	mov	r1, r2
 80097b4:	602b      	str	r3, [r5, #0]
 80097b6:	f7f9 fa3f 	bl	8002c38 <_fstat>
 80097ba:	1c43      	adds	r3, r0, #1
 80097bc:	d102      	bne.n	80097c4 <_fstat_r+0x1c>
 80097be:	682b      	ldr	r3, [r5, #0]
 80097c0:	b103      	cbz	r3, 80097c4 <_fstat_r+0x1c>
 80097c2:	6023      	str	r3, [r4, #0]
 80097c4:	bd38      	pop	{r3, r4, r5, pc}
 80097c6:	bf00      	nop
 80097c8:	20001118 	.word	0x20001118

080097cc <_isatty_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	2300      	movs	r3, #0
 80097d0:	4d05      	ldr	r5, [pc, #20]	@ (80097e8 <_isatty_r+0x1c>)
 80097d2:	4604      	mov	r4, r0
 80097d4:	4608      	mov	r0, r1
 80097d6:	602b      	str	r3, [r5, #0]
 80097d8:	f7f9 fa3d 	bl	8002c56 <_isatty>
 80097dc:	1c43      	adds	r3, r0, #1
 80097de:	d102      	bne.n	80097e6 <_isatty_r+0x1a>
 80097e0:	682b      	ldr	r3, [r5, #0]
 80097e2:	b103      	cbz	r3, 80097e6 <_isatty_r+0x1a>
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	bd38      	pop	{r3, r4, r5, pc}
 80097e8:	20001118 	.word	0x20001118

080097ec <pow>:
 80097ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f0:	4614      	mov	r4, r2
 80097f2:	461d      	mov	r5, r3
 80097f4:	4680      	mov	r8, r0
 80097f6:	4689      	mov	r9, r1
 80097f8:	f000 f866 	bl	80098c8 <__ieee754_pow>
 80097fc:	4622      	mov	r2, r4
 80097fe:	4606      	mov	r6, r0
 8009800:	460f      	mov	r7, r1
 8009802:	462b      	mov	r3, r5
 8009804:	4620      	mov	r0, r4
 8009806:	4629      	mov	r1, r5
 8009808:	f7f7 f900 	bl	8000a0c <__aeabi_dcmpun>
 800980c:	bbc8      	cbnz	r0, 8009882 <pow+0x96>
 800980e:	2200      	movs	r2, #0
 8009810:	2300      	movs	r3, #0
 8009812:	4640      	mov	r0, r8
 8009814:	4649      	mov	r1, r9
 8009816:	f7f7 f8c7 	bl	80009a8 <__aeabi_dcmpeq>
 800981a:	b1b8      	cbz	r0, 800984c <pow+0x60>
 800981c:	2200      	movs	r2, #0
 800981e:	2300      	movs	r3, #0
 8009820:	4620      	mov	r0, r4
 8009822:	4629      	mov	r1, r5
 8009824:	f7f7 f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8009828:	2800      	cmp	r0, #0
 800982a:	d141      	bne.n	80098b0 <pow+0xc4>
 800982c:	4620      	mov	r0, r4
 800982e:	4629      	mov	r1, r5
 8009830:	f000 f844 	bl	80098bc <finite>
 8009834:	b328      	cbz	r0, 8009882 <pow+0x96>
 8009836:	2200      	movs	r2, #0
 8009838:	2300      	movs	r3, #0
 800983a:	4620      	mov	r0, r4
 800983c:	4629      	mov	r1, r5
 800983e:	f7f7 f8bd 	bl	80009bc <__aeabi_dcmplt>
 8009842:	b1f0      	cbz	r0, 8009882 <pow+0x96>
 8009844:	f7fd ff52 	bl	80076ec <__errno>
 8009848:	2322      	movs	r3, #34	@ 0x22
 800984a:	e019      	b.n	8009880 <pow+0x94>
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f000 f834 	bl	80098bc <finite>
 8009854:	b9c8      	cbnz	r0, 800988a <pow+0x9e>
 8009856:	4640      	mov	r0, r8
 8009858:	4649      	mov	r1, r9
 800985a:	f000 f82f 	bl	80098bc <finite>
 800985e:	b1a0      	cbz	r0, 800988a <pow+0x9e>
 8009860:	4620      	mov	r0, r4
 8009862:	4629      	mov	r1, r5
 8009864:	f000 f82a 	bl	80098bc <finite>
 8009868:	b178      	cbz	r0, 800988a <pow+0x9e>
 800986a:	4632      	mov	r2, r6
 800986c:	463b      	mov	r3, r7
 800986e:	4630      	mov	r0, r6
 8009870:	4639      	mov	r1, r7
 8009872:	f7f7 f8cb 	bl	8000a0c <__aeabi_dcmpun>
 8009876:	2800      	cmp	r0, #0
 8009878:	d0e4      	beq.n	8009844 <pow+0x58>
 800987a:	f7fd ff37 	bl	80076ec <__errno>
 800987e:	2321      	movs	r3, #33	@ 0x21
 8009880:	6003      	str	r3, [r0, #0]
 8009882:	4630      	mov	r0, r6
 8009884:	4639      	mov	r1, r7
 8009886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800988a:	2200      	movs	r2, #0
 800988c:	2300      	movs	r3, #0
 800988e:	4630      	mov	r0, r6
 8009890:	4639      	mov	r1, r7
 8009892:	f7f7 f889 	bl	80009a8 <__aeabi_dcmpeq>
 8009896:	2800      	cmp	r0, #0
 8009898:	d0f3      	beq.n	8009882 <pow+0x96>
 800989a:	4640      	mov	r0, r8
 800989c:	4649      	mov	r1, r9
 800989e:	f000 f80d 	bl	80098bc <finite>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0ed      	beq.n	8009882 <pow+0x96>
 80098a6:	4620      	mov	r0, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	f000 f807 	bl	80098bc <finite>
 80098ae:	e7c8      	b.n	8009842 <pow+0x56>
 80098b0:	2600      	movs	r6, #0
 80098b2:	4f01      	ldr	r7, [pc, #4]	@ (80098b8 <pow+0xcc>)
 80098b4:	e7e5      	b.n	8009882 <pow+0x96>
 80098b6:	bf00      	nop
 80098b8:	3ff00000 	.word	0x3ff00000

080098bc <finite>:
 80098bc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80098c0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80098c4:	0fc0      	lsrs	r0, r0, #31
 80098c6:	4770      	bx	lr

080098c8 <__ieee754_pow>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	b091      	sub	sp, #68	@ 0x44
 80098ce:	e9cd 2300 	strd	r2, r3, [sp]
 80098d2:	468b      	mov	fp, r1
 80098d4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80098d8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80098dc:	4682      	mov	sl, r0
 80098de:	ea57 0001 	orrs.w	r0, r7, r1
 80098e2:	d112      	bne.n	800990a <__ieee754_pow+0x42>
 80098e4:	4653      	mov	r3, sl
 80098e6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80098ea:	18db      	adds	r3, r3, r3
 80098ec:	4152      	adcs	r2, r2
 80098ee:	4298      	cmp	r0, r3
 80098f0:	4b91      	ldr	r3, [pc, #580]	@ (8009b38 <__ieee754_pow+0x270>)
 80098f2:	4193      	sbcs	r3, r2
 80098f4:	f080 84ce 	bcs.w	800a294 <__ieee754_pow+0x9cc>
 80098f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098fc:	4650      	mov	r0, sl
 80098fe:	4659      	mov	r1, fp
 8009900:	f7f6 fc34 	bl	800016c <__adddf3>
 8009904:	b011      	add	sp, #68	@ 0x44
 8009906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990a:	4b8c      	ldr	r3, [pc, #560]	@ (8009b3c <__ieee754_pow+0x274>)
 800990c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8009910:	429e      	cmp	r6, r3
 8009912:	465d      	mov	r5, fp
 8009914:	46d1      	mov	r9, sl
 8009916:	d807      	bhi.n	8009928 <__ieee754_pow+0x60>
 8009918:	d102      	bne.n	8009920 <__ieee754_pow+0x58>
 800991a:	f1ba 0f00 	cmp.w	sl, #0
 800991e:	d1eb      	bne.n	80098f8 <__ieee754_pow+0x30>
 8009920:	429f      	cmp	r7, r3
 8009922:	d801      	bhi.n	8009928 <__ieee754_pow+0x60>
 8009924:	d10f      	bne.n	8009946 <__ieee754_pow+0x7e>
 8009926:	b171      	cbz	r1, 8009946 <__ieee754_pow+0x7e>
 8009928:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800992c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009930:	ea55 0509 	orrs.w	r5, r5, r9
 8009934:	d1e0      	bne.n	80098f8 <__ieee754_pow+0x30>
 8009936:	e9dd 3200 	ldrd	r3, r2, [sp]
 800993a:	18db      	adds	r3, r3, r3
 800993c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009940:	4152      	adcs	r2, r2
 8009942:	429d      	cmp	r5, r3
 8009944:	e7d4      	b.n	80098f0 <__ieee754_pow+0x28>
 8009946:	2d00      	cmp	r5, #0
 8009948:	4633      	mov	r3, r6
 800994a:	da39      	bge.n	80099c0 <__ieee754_pow+0xf8>
 800994c:	4a7c      	ldr	r2, [pc, #496]	@ (8009b40 <__ieee754_pow+0x278>)
 800994e:	4297      	cmp	r7, r2
 8009950:	d84e      	bhi.n	80099f0 <__ieee754_pow+0x128>
 8009952:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009956:	4297      	cmp	r7, r2
 8009958:	f240 84ab 	bls.w	800a2b2 <__ieee754_pow+0x9ea>
 800995c:	153a      	asrs	r2, r7, #20
 800995e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009962:	2a14      	cmp	r2, #20
 8009964:	dd0f      	ble.n	8009986 <__ieee754_pow+0xbe>
 8009966:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800996a:	fa21 f402 	lsr.w	r4, r1, r2
 800996e:	fa04 f202 	lsl.w	r2, r4, r2
 8009972:	428a      	cmp	r2, r1
 8009974:	f040 849d 	bne.w	800a2b2 <__ieee754_pow+0x9ea>
 8009978:	f004 0401 	and.w	r4, r4, #1
 800997c:	f1c4 0402 	rsb	r4, r4, #2
 8009980:	2900      	cmp	r1, #0
 8009982:	d15a      	bne.n	8009a3a <__ieee754_pow+0x172>
 8009984:	e00e      	b.n	80099a4 <__ieee754_pow+0xdc>
 8009986:	2900      	cmp	r1, #0
 8009988:	d156      	bne.n	8009a38 <__ieee754_pow+0x170>
 800998a:	f1c2 0214 	rsb	r2, r2, #20
 800998e:	fa47 f402 	asr.w	r4, r7, r2
 8009992:	fa04 f202 	lsl.w	r2, r4, r2
 8009996:	42ba      	cmp	r2, r7
 8009998:	f040 8488 	bne.w	800a2ac <__ieee754_pow+0x9e4>
 800999c:	f004 0401 	and.w	r4, r4, #1
 80099a0:	f1c4 0402 	rsb	r4, r4, #2
 80099a4:	4a67      	ldr	r2, [pc, #412]	@ (8009b44 <__ieee754_pow+0x27c>)
 80099a6:	4297      	cmp	r7, r2
 80099a8:	d130      	bne.n	8009a0c <__ieee754_pow+0x144>
 80099aa:	f1b8 0f00 	cmp.w	r8, #0
 80099ae:	f280 8479 	bge.w	800a2a4 <__ieee754_pow+0x9dc>
 80099b2:	4652      	mov	r2, sl
 80099b4:	465b      	mov	r3, fp
 80099b6:	2000      	movs	r0, #0
 80099b8:	4962      	ldr	r1, [pc, #392]	@ (8009b44 <__ieee754_pow+0x27c>)
 80099ba:	f7f6 feb7 	bl	800072c <__aeabi_ddiv>
 80099be:	e7a1      	b.n	8009904 <__ieee754_pow+0x3c>
 80099c0:	2400      	movs	r4, #0
 80099c2:	2900      	cmp	r1, #0
 80099c4:	d139      	bne.n	8009a3a <__ieee754_pow+0x172>
 80099c6:	4a5d      	ldr	r2, [pc, #372]	@ (8009b3c <__ieee754_pow+0x274>)
 80099c8:	4297      	cmp	r7, r2
 80099ca:	d1eb      	bne.n	80099a4 <__ieee754_pow+0xdc>
 80099cc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80099d0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80099d4:	ea53 0309 	orrs.w	r3, r3, r9
 80099d8:	f000 845c 	beq.w	800a294 <__ieee754_pow+0x9cc>
 80099dc:	4b5a      	ldr	r3, [pc, #360]	@ (8009b48 <__ieee754_pow+0x280>)
 80099de:	429e      	cmp	r6, r3
 80099e0:	d908      	bls.n	80099f4 <__ieee754_pow+0x12c>
 80099e2:	f1b8 0f00 	cmp.w	r8, #0
 80099e6:	f2c0 8459 	blt.w	800a29c <__ieee754_pow+0x9d4>
 80099ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ee:	e789      	b.n	8009904 <__ieee754_pow+0x3c>
 80099f0:	2402      	movs	r4, #2
 80099f2:	e7e6      	b.n	80099c2 <__ieee754_pow+0xfa>
 80099f4:	f1b8 0f00 	cmp.w	r8, #0
 80099f8:	f04f 0000 	mov.w	r0, #0
 80099fc:	f04f 0100 	mov.w	r1, #0
 8009a00:	da80      	bge.n	8009904 <__ieee754_pow+0x3c>
 8009a02:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009a06:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009a0a:	e77b      	b.n	8009904 <__ieee754_pow+0x3c>
 8009a0c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009a10:	d106      	bne.n	8009a20 <__ieee754_pow+0x158>
 8009a12:	4652      	mov	r2, sl
 8009a14:	465b      	mov	r3, fp
 8009a16:	4650      	mov	r0, sl
 8009a18:	4659      	mov	r1, fp
 8009a1a:	f7f6 fd5d 	bl	80004d8 <__aeabi_dmul>
 8009a1e:	e771      	b.n	8009904 <__ieee754_pow+0x3c>
 8009a20:	4a4a      	ldr	r2, [pc, #296]	@ (8009b4c <__ieee754_pow+0x284>)
 8009a22:	4590      	cmp	r8, r2
 8009a24:	d109      	bne.n	8009a3a <__ieee754_pow+0x172>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	db07      	blt.n	8009a3a <__ieee754_pow+0x172>
 8009a2a:	4650      	mov	r0, sl
 8009a2c:	4659      	mov	r1, fp
 8009a2e:	b011      	add	sp, #68	@ 0x44
 8009a30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	f000 bd12 	b.w	800a45c <__ieee754_sqrt>
 8009a38:	2400      	movs	r4, #0
 8009a3a:	4650      	mov	r0, sl
 8009a3c:	4659      	mov	r1, fp
 8009a3e:	9302      	str	r3, [sp, #8]
 8009a40:	f000 fc6a 	bl	800a318 <fabs>
 8009a44:	9b02      	ldr	r3, [sp, #8]
 8009a46:	f1b9 0f00 	cmp.w	r9, #0
 8009a4a:	d127      	bne.n	8009a9c <__ieee754_pow+0x1d4>
 8009a4c:	4a3d      	ldr	r2, [pc, #244]	@ (8009b44 <__ieee754_pow+0x27c>)
 8009a4e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8009a52:	4594      	cmp	ip, r2
 8009a54:	d000      	beq.n	8009a58 <__ieee754_pow+0x190>
 8009a56:	bb0e      	cbnz	r6, 8009a9c <__ieee754_pow+0x1d4>
 8009a58:	f1b8 0f00 	cmp.w	r8, #0
 8009a5c:	da05      	bge.n	8009a6a <__ieee754_pow+0x1a2>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	2000      	movs	r0, #0
 8009a64:	4937      	ldr	r1, [pc, #220]	@ (8009b44 <__ieee754_pow+0x27c>)
 8009a66:	f7f6 fe61 	bl	800072c <__aeabi_ddiv>
 8009a6a:	2d00      	cmp	r5, #0
 8009a6c:	f6bf af4a 	bge.w	8009904 <__ieee754_pow+0x3c>
 8009a70:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009a74:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009a78:	4326      	orrs	r6, r4
 8009a7a:	d108      	bne.n	8009a8e <__ieee754_pow+0x1c6>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4610      	mov	r0, r2
 8009a82:	4619      	mov	r1, r3
 8009a84:	f7f6 fb70 	bl	8000168 <__aeabi_dsub>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	e795      	b.n	80099ba <__ieee754_pow+0xf2>
 8009a8e:	2c01      	cmp	r4, #1
 8009a90:	f47f af38 	bne.w	8009904 <__ieee754_pow+0x3c>
 8009a94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a98:	4619      	mov	r1, r3
 8009a9a:	e733      	b.n	8009904 <__ieee754_pow+0x3c>
 8009a9c:	0fea      	lsrs	r2, r5, #31
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	ea52 0c04 	orrs.w	ip, r2, r4
 8009aa4:	d102      	bne.n	8009aac <__ieee754_pow+0x1e4>
 8009aa6:	4652      	mov	r2, sl
 8009aa8:	465b      	mov	r3, fp
 8009aaa:	e7e9      	b.n	8009a80 <__ieee754_pow+0x1b8>
 8009aac:	f04f 0900 	mov.w	r9, #0
 8009ab0:	3c01      	subs	r4, #1
 8009ab2:	4314      	orrs	r4, r2
 8009ab4:	bf14      	ite	ne
 8009ab6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8009b44 <__ieee754_pow+0x27c>
 8009aba:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8009b50 <__ieee754_pow+0x288>
 8009abe:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8009ac2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8009ac6:	f240 8107 	bls.w	8009cd8 <__ieee754_pow+0x410>
 8009aca:	4b22      	ldr	r3, [pc, #136]	@ (8009b54 <__ieee754_pow+0x28c>)
 8009acc:	429f      	cmp	r7, r3
 8009ace:	4b1e      	ldr	r3, [pc, #120]	@ (8009b48 <__ieee754_pow+0x280>)
 8009ad0:	d913      	bls.n	8009afa <__ieee754_pow+0x232>
 8009ad2:	429e      	cmp	r6, r3
 8009ad4:	d808      	bhi.n	8009ae8 <__ieee754_pow+0x220>
 8009ad6:	f1b8 0f00 	cmp.w	r8, #0
 8009ada:	da08      	bge.n	8009aee <__ieee754_pow+0x226>
 8009adc:	2000      	movs	r0, #0
 8009ade:	b011      	add	sp, #68	@ 0x44
 8009ae0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	f000 bcb4 	b.w	800a450 <__math_oflow>
 8009ae8:	f1b8 0f00 	cmp.w	r8, #0
 8009aec:	dcf6      	bgt.n	8009adc <__ieee754_pow+0x214>
 8009aee:	2000      	movs	r0, #0
 8009af0:	b011      	add	sp, #68	@ 0x44
 8009af2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af6:	f000 bca6 	b.w	800a446 <__math_uflow>
 8009afa:	429e      	cmp	r6, r3
 8009afc:	d20c      	bcs.n	8009b18 <__ieee754_pow+0x250>
 8009afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b02:	2200      	movs	r2, #0
 8009b04:	2300      	movs	r3, #0
 8009b06:	f7f6 ff59 	bl	80009bc <__aeabi_dcmplt>
 8009b0a:	3800      	subs	r0, #0
 8009b0c:	bf18      	it	ne
 8009b0e:	2001      	movne	r0, #1
 8009b10:	f1b8 0f00 	cmp.w	r8, #0
 8009b14:	daec      	bge.n	8009af0 <__ieee754_pow+0x228>
 8009b16:	e7e2      	b.n	8009ade <__ieee754_pow+0x216>
 8009b18:	4b0a      	ldr	r3, [pc, #40]	@ (8009b44 <__ieee754_pow+0x27c>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	429e      	cmp	r6, r3
 8009b1e:	d91b      	bls.n	8009b58 <__ieee754_pow+0x290>
 8009b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b24:	2300      	movs	r3, #0
 8009b26:	f7f6 ff49 	bl	80009bc <__aeabi_dcmplt>
 8009b2a:	3800      	subs	r0, #0
 8009b2c:	bf18      	it	ne
 8009b2e:	2001      	movne	r0, #1
 8009b30:	f1b8 0f00 	cmp.w	r8, #0
 8009b34:	dcd3      	bgt.n	8009ade <__ieee754_pow+0x216>
 8009b36:	e7db      	b.n	8009af0 <__ieee754_pow+0x228>
 8009b38:	fff00000 	.word	0xfff00000
 8009b3c:	7ff00000 	.word	0x7ff00000
 8009b40:	433fffff 	.word	0x433fffff
 8009b44:	3ff00000 	.word	0x3ff00000
 8009b48:	3fefffff 	.word	0x3fefffff
 8009b4c:	3fe00000 	.word	0x3fe00000
 8009b50:	bff00000 	.word	0xbff00000
 8009b54:	43f00000 	.word	0x43f00000
 8009b58:	4b5b      	ldr	r3, [pc, #364]	@ (8009cc8 <__ieee754_pow+0x400>)
 8009b5a:	f7f6 fb05 	bl	8000168 <__aeabi_dsub>
 8009b5e:	a352      	add	r3, pc, #328	@ (adr r3, 8009ca8 <__ieee754_pow+0x3e0>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	4604      	mov	r4, r0
 8009b66:	460d      	mov	r5, r1
 8009b68:	f7f6 fcb6 	bl	80004d8 <__aeabi_dmul>
 8009b6c:	a350      	add	r3, pc, #320	@ (adr r3, 8009cb0 <__ieee754_pow+0x3e8>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	4606      	mov	r6, r0
 8009b74:	460f      	mov	r7, r1
 8009b76:	4620      	mov	r0, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	f7f6 fcad 	bl	80004d8 <__aeabi_dmul>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	4682      	mov	sl, r0
 8009b82:	468b      	mov	fp, r1
 8009b84:	4620      	mov	r0, r4
 8009b86:	4629      	mov	r1, r5
 8009b88:	4b50      	ldr	r3, [pc, #320]	@ (8009ccc <__ieee754_pow+0x404>)
 8009b8a:	f7f6 fca5 	bl	80004d8 <__aeabi_dmul>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	a149      	add	r1, pc, #292	@ (adr r1, 8009cb8 <__ieee754_pow+0x3f0>)
 8009b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b98:	f7f6 fae6 	bl	8000168 <__aeabi_dsub>
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	462b      	mov	r3, r5
 8009ba0:	f7f6 fc9a 	bl	80004d8 <__aeabi_dmul>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	2000      	movs	r0, #0
 8009baa:	4949      	ldr	r1, [pc, #292]	@ (8009cd0 <__ieee754_pow+0x408>)
 8009bac:	f7f6 fadc 	bl	8000168 <__aeabi_dsub>
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	4689      	mov	r9, r1
 8009bb6:	462b      	mov	r3, r5
 8009bb8:	4620      	mov	r0, r4
 8009bba:	4629      	mov	r1, r5
 8009bbc:	f7f6 fc8c 	bl	80004d8 <__aeabi_dmul>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	f7f6 fc86 	bl	80004d8 <__aeabi_dmul>
 8009bcc:	a33c      	add	r3, pc, #240	@ (adr r3, 8009cc0 <__ieee754_pow+0x3f8>)
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	f7f6 fc81 	bl	80004d8 <__aeabi_dmul>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	4650      	mov	r0, sl
 8009bdc:	4659      	mov	r1, fp
 8009bde:	f7f6 fac3 	bl	8000168 <__aeabi_dsub>
 8009be2:	2400      	movs	r4, #0
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4680      	mov	r8, r0
 8009bea:	4689      	mov	r9, r1
 8009bec:	4630      	mov	r0, r6
 8009bee:	4639      	mov	r1, r7
 8009bf0:	f7f6 fabc 	bl	800016c <__adddf3>
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	460d      	mov	r5, r1
 8009bfc:	f7f6 fab4 	bl	8000168 <__aeabi_dsub>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4640      	mov	r0, r8
 8009c06:	4649      	mov	r1, r9
 8009c08:	f7f6 faae 	bl	8000168 <__aeabi_dsub>
 8009c0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c14:	2300      	movs	r3, #0
 8009c16:	9304      	str	r3, [sp, #16]
 8009c18:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	460f      	mov	r7, r1
 8009c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c24:	4652      	mov	r2, sl
 8009c26:	465b      	mov	r3, fp
 8009c28:	f7f6 fa9e 	bl	8000168 <__aeabi_dsub>
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	462b      	mov	r3, r5
 8009c30:	f7f6 fc52 	bl	80004d8 <__aeabi_dmul>
 8009c34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c38:	4680      	mov	r8, r0
 8009c3a:	4689      	mov	r9, r1
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f7f6 fc4a 	bl	80004d8 <__aeabi_dmul>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4640      	mov	r0, r8
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	f7f6 fa8e 	bl	800016c <__adddf3>
 8009c50:	4652      	mov	r2, sl
 8009c52:	465b      	mov	r3, fp
 8009c54:	4606      	mov	r6, r0
 8009c56:	460f      	mov	r7, r1
 8009c58:	4620      	mov	r0, r4
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	f7f6 fc3c 	bl	80004d8 <__aeabi_dmul>
 8009c60:	460b      	mov	r3, r1
 8009c62:	4602      	mov	r2, r0
 8009c64:	4680      	mov	r8, r0
 8009c66:	4689      	mov	r9, r1
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	f7f6 fa7e 	bl	800016c <__adddf3>
 8009c70:	4b18      	ldr	r3, [pc, #96]	@ (8009cd4 <__ieee754_pow+0x40c>)
 8009c72:	4604      	mov	r4, r0
 8009c74:	4299      	cmp	r1, r3
 8009c76:	460d      	mov	r5, r1
 8009c78:	468a      	mov	sl, r1
 8009c7a:	468b      	mov	fp, r1
 8009c7c:	f340 82e0 	ble.w	800a240 <__ieee754_pow+0x978>
 8009c80:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009c84:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009c88:	4303      	orrs	r3, r0
 8009c8a:	f000 81df 	beq.w	800a04c <__ieee754_pow+0x784>
 8009c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c92:	2200      	movs	r2, #0
 8009c94:	2300      	movs	r3, #0
 8009c96:	f7f6 fe91 	bl	80009bc <__aeabi_dcmplt>
 8009c9a:	3800      	subs	r0, #0
 8009c9c:	bf18      	it	ne
 8009c9e:	2001      	movne	r0, #1
 8009ca0:	e71d      	b.n	8009ade <__ieee754_pow+0x216>
 8009ca2:	bf00      	nop
 8009ca4:	f3af 8000 	nop.w
 8009ca8:	60000000 	.word	0x60000000
 8009cac:	3ff71547 	.word	0x3ff71547
 8009cb0:	f85ddf44 	.word	0xf85ddf44
 8009cb4:	3e54ae0b 	.word	0x3e54ae0b
 8009cb8:	55555555 	.word	0x55555555
 8009cbc:	3fd55555 	.word	0x3fd55555
 8009cc0:	652b82fe 	.word	0x652b82fe
 8009cc4:	3ff71547 	.word	0x3ff71547
 8009cc8:	3ff00000 	.word	0x3ff00000
 8009ccc:	3fd00000 	.word	0x3fd00000
 8009cd0:	3fe00000 	.word	0x3fe00000
 8009cd4:	408fffff 	.word	0x408fffff
 8009cd8:	4ad3      	ldr	r2, [pc, #844]	@ (800a028 <__ieee754_pow+0x760>)
 8009cda:	402a      	ands	r2, r5
 8009cdc:	2a00      	cmp	r2, #0
 8009cde:	f040 817a 	bne.w	8009fd6 <__ieee754_pow+0x70e>
 8009ce2:	4bd2      	ldr	r3, [pc, #840]	@ (800a02c <__ieee754_pow+0x764>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f7f6 fbf7 	bl	80004d8 <__aeabi_dmul>
 8009cea:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8009cee:	460b      	mov	r3, r1
 8009cf0:	151a      	asrs	r2, r3, #20
 8009cf2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009cf6:	4422      	add	r2, r4
 8009cf8:	920a      	str	r2, [sp, #40]	@ 0x28
 8009cfa:	4acd      	ldr	r2, [pc, #820]	@ (800a030 <__ieee754_pow+0x768>)
 8009cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d00:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8009d04:	4293      	cmp	r3, r2
 8009d06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d0a:	dd08      	ble.n	8009d1e <__ieee754_pow+0x456>
 8009d0c:	4ac9      	ldr	r2, [pc, #804]	@ (800a034 <__ieee754_pow+0x76c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	f340 8163 	ble.w	8009fda <__ieee754_pow+0x712>
 8009d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d16:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d1e:	2600      	movs	r6, #0
 8009d20:	00f3      	lsls	r3, r6, #3
 8009d22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d24:	4bc4      	ldr	r3, [pc, #784]	@ (800a038 <__ieee754_pow+0x770>)
 8009d26:	4629      	mov	r1, r5
 8009d28:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d30:	461a      	mov	r2, r3
 8009d32:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009d36:	4623      	mov	r3, r4
 8009d38:	4682      	mov	sl, r0
 8009d3a:	f7f6 fa15 	bl	8000168 <__aeabi_dsub>
 8009d3e:	4652      	mov	r2, sl
 8009d40:	462b      	mov	r3, r5
 8009d42:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009d46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d4a:	f7f6 fa0f 	bl	800016c <__adddf3>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	2000      	movs	r0, #0
 8009d54:	49b9      	ldr	r1, [pc, #740]	@ (800a03c <__ieee754_pow+0x774>)
 8009d56:	f7f6 fce9 	bl	800072c <__aeabi_ddiv>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d66:	f7f6 fbb7 	bl	80004d8 <__aeabi_dmul>
 8009d6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d6e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009d72:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d76:	2300      	movs	r3, #0
 8009d78:	2200      	movs	r2, #0
 8009d7a:	46ab      	mov	fp, r5
 8009d7c:	106d      	asrs	r5, r5, #1
 8009d7e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009d82:	9304      	str	r3, [sp, #16]
 8009d84:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009d88:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009d8c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	4614      	mov	r4, r2
 8009d96:	461d      	mov	r5, r3
 8009d98:	f7f6 fb9e 	bl	80004d8 <__aeabi_dmul>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009da4:	f7f6 f9e0 	bl	8000168 <__aeabi_dsub>
 8009da8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dac:	4606      	mov	r6, r0
 8009dae:	460f      	mov	r7, r1
 8009db0:	4620      	mov	r0, r4
 8009db2:	4629      	mov	r1, r5
 8009db4:	f7f6 f9d8 	bl	8000168 <__aeabi_dsub>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4650      	mov	r0, sl
 8009dbe:	4659      	mov	r1, fp
 8009dc0:	f7f6 f9d2 	bl	8000168 <__aeabi_dsub>
 8009dc4:	4642      	mov	r2, r8
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	f7f6 fb86 	bl	80004d8 <__aeabi_dmul>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 f9c8 	bl	8000168 <__aeabi_dsub>
 8009dd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ddc:	f7f6 fb7c 	bl	80004d8 <__aeabi_dmul>
 8009de0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009de4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009de8:	4610      	mov	r0, r2
 8009dea:	4619      	mov	r1, r3
 8009dec:	f7f6 fb74 	bl	80004d8 <__aeabi_dmul>
 8009df0:	a37b      	add	r3, pc, #492	@ (adr r3, 8009fe0 <__ieee754_pow+0x718>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	4604      	mov	r4, r0
 8009df8:	460d      	mov	r5, r1
 8009dfa:	f7f6 fb6d 	bl	80004d8 <__aeabi_dmul>
 8009dfe:	a37a      	add	r3, pc, #488	@ (adr r3, 8009fe8 <__ieee754_pow+0x720>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 f9b2 	bl	800016c <__adddf3>
 8009e08:	4622      	mov	r2, r4
 8009e0a:	462b      	mov	r3, r5
 8009e0c:	f7f6 fb64 	bl	80004d8 <__aeabi_dmul>
 8009e10:	a377      	add	r3, pc, #476	@ (adr r3, 8009ff0 <__ieee754_pow+0x728>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f7f6 f9a9 	bl	800016c <__adddf3>
 8009e1a:	4622      	mov	r2, r4
 8009e1c:	462b      	mov	r3, r5
 8009e1e:	f7f6 fb5b 	bl	80004d8 <__aeabi_dmul>
 8009e22:	a375      	add	r3, pc, #468	@ (adr r3, 8009ff8 <__ieee754_pow+0x730>)
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	f7f6 f9a0 	bl	800016c <__adddf3>
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	462b      	mov	r3, r5
 8009e30:	f7f6 fb52 	bl	80004d8 <__aeabi_dmul>
 8009e34:	a372      	add	r3, pc, #456	@ (adr r3, 800a000 <__ieee754_pow+0x738>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 f997 	bl	800016c <__adddf3>
 8009e3e:	4622      	mov	r2, r4
 8009e40:	462b      	mov	r3, r5
 8009e42:	f7f6 fb49 	bl	80004d8 <__aeabi_dmul>
 8009e46:	a370      	add	r3, pc, #448	@ (adr r3, 800a008 <__ieee754_pow+0x740>)
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	f7f6 f98e 	bl	800016c <__adddf3>
 8009e50:	4622      	mov	r2, r4
 8009e52:	4606      	mov	r6, r0
 8009e54:	460f      	mov	r7, r1
 8009e56:	462b      	mov	r3, r5
 8009e58:	4620      	mov	r0, r4
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f7f6 fb3c 	bl	80004d8 <__aeabi_dmul>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fb36 	bl	80004d8 <__aeabi_dmul>
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	460d      	mov	r5, r1
 8009e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e74:	4642      	mov	r2, r8
 8009e76:	464b      	mov	r3, r9
 8009e78:	f7f6 f978 	bl	800016c <__adddf3>
 8009e7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e80:	f7f6 fb2a 	bl	80004d8 <__aeabi_dmul>
 8009e84:	4622      	mov	r2, r4
 8009e86:	462b      	mov	r3, r5
 8009e88:	f7f6 f970 	bl	800016c <__adddf3>
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	4682      	mov	sl, r0
 8009e90:	468b      	mov	fp, r1
 8009e92:	464b      	mov	r3, r9
 8009e94:	4640      	mov	r0, r8
 8009e96:	4649      	mov	r1, r9
 8009e98:	f7f6 fb1e 	bl	80004d8 <__aeabi_dmul>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	4b68      	ldr	r3, [pc, #416]	@ (800a040 <__ieee754_pow+0x778>)
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	460f      	mov	r7, r1
 8009ea4:	f7f6 f962 	bl	800016c <__adddf3>
 8009ea8:	4652      	mov	r2, sl
 8009eaa:	465b      	mov	r3, fp
 8009eac:	f7f6 f95e 	bl	800016c <__adddf3>
 8009eb0:	2400      	movs	r4, #0
 8009eb2:	460d      	mov	r5, r1
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4649      	mov	r1, r9
 8009ebc:	f7f6 fb0c 	bl	80004d8 <__aeabi_dmul>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	4689      	mov	r9, r1
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	4b5d      	ldr	r3, [pc, #372]	@ (800a040 <__ieee754_pow+0x778>)
 8009ecc:	f7f6 f94c 	bl	8000168 <__aeabi_dsub>
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	463b      	mov	r3, r7
 8009ed4:	f7f6 f948 	bl	8000168 <__aeabi_dsub>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4650      	mov	r0, sl
 8009ede:	4659      	mov	r1, fp
 8009ee0:	f7f6 f942 	bl	8000168 <__aeabi_dsub>
 8009ee4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ee8:	f7f6 faf6 	bl	80004d8 <__aeabi_dmul>
 8009eec:	4622      	mov	r2, r4
 8009eee:	4606      	mov	r6, r0
 8009ef0:	460f      	mov	r7, r1
 8009ef2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ef6:	462b      	mov	r3, r5
 8009ef8:	f7f6 faee 	bl	80004d8 <__aeabi_dmul>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4630      	mov	r0, r6
 8009f02:	4639      	mov	r1, r7
 8009f04:	f7f6 f932 	bl	800016c <__adddf3>
 8009f08:	2400      	movs	r4, #0
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	460f      	mov	r7, r1
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4640      	mov	r0, r8
 8009f14:	4649      	mov	r1, r9
 8009f16:	f7f6 f929 	bl	800016c <__adddf3>
 8009f1a:	a33d      	add	r3, pc, #244	@ (adr r3, 800a010 <__ieee754_pow+0x748>)
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	4620      	mov	r0, r4
 8009f22:	460d      	mov	r5, r1
 8009f24:	f7f6 fad8 	bl	80004d8 <__aeabi_dmul>
 8009f28:	4642      	mov	r2, r8
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f30:	4620      	mov	r0, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 f918 	bl	8000168 <__aeabi_dsub>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	4639      	mov	r1, r7
 8009f40:	f7f6 f912 	bl	8000168 <__aeabi_dsub>
 8009f44:	a334      	add	r3, pc, #208	@ (adr r3, 800a018 <__ieee754_pow+0x750>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	f7f6 fac5 	bl	80004d8 <__aeabi_dmul>
 8009f4e:	a334      	add	r3, pc, #208	@ (adr r3, 800a020 <__ieee754_pow+0x758>)
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	4606      	mov	r6, r0
 8009f56:	460f      	mov	r7, r1
 8009f58:	4620      	mov	r0, r4
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	f7f6 fabc 	bl	80004d8 <__aeabi_dmul>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4630      	mov	r0, r6
 8009f66:	4639      	mov	r1, r7
 8009f68:	f7f6 f900 	bl	800016c <__adddf3>
 8009f6c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f6e:	4b35      	ldr	r3, [pc, #212]	@ (800a044 <__ieee754_pow+0x77c>)
 8009f70:	2400      	movs	r4, #0
 8009f72:	4413      	add	r3, r2
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	f7f6 f8f8 	bl	800016c <__adddf3>
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f80:	468b      	mov	fp, r1
 8009f82:	f7f6 fa3f 	bl	8000404 <__aeabi_i2d>
 8009f86:	4606      	mov	r6, r0
 8009f88:	460f      	mov	r7, r1
 8009f8a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f8c:	4b2e      	ldr	r3, [pc, #184]	@ (800a048 <__ieee754_pow+0x780>)
 8009f8e:	4413      	add	r3, r2
 8009f90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f94:	4652      	mov	r2, sl
 8009f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f9a:	465b      	mov	r3, fp
 8009f9c:	f7f6 f8e6 	bl	800016c <__adddf3>
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	464b      	mov	r3, r9
 8009fa4:	f7f6 f8e2 	bl	800016c <__adddf3>
 8009fa8:	4632      	mov	r2, r6
 8009faa:	463b      	mov	r3, r7
 8009fac:	f7f6 f8de 	bl	800016c <__adddf3>
 8009fb0:	4632      	mov	r2, r6
 8009fb2:	463b      	mov	r3, r7
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	460d      	mov	r5, r1
 8009fb8:	f7f6 f8d6 	bl	8000168 <__aeabi_dsub>
 8009fbc:	4642      	mov	r2, r8
 8009fbe:	464b      	mov	r3, r9
 8009fc0:	f7f6 f8d2 	bl	8000168 <__aeabi_dsub>
 8009fc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fc8:	f7f6 f8ce 	bl	8000168 <__aeabi_dsub>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	4659      	mov	r1, fp
 8009fd4:	e618      	b.n	8009c08 <__ieee754_pow+0x340>
 8009fd6:	2400      	movs	r4, #0
 8009fd8:	e68a      	b.n	8009cf0 <__ieee754_pow+0x428>
 8009fda:	2601      	movs	r6, #1
 8009fdc:	e6a0      	b.n	8009d20 <__ieee754_pow+0x458>
 8009fde:	bf00      	nop
 8009fe0:	4a454eef 	.word	0x4a454eef
 8009fe4:	3fca7e28 	.word	0x3fca7e28
 8009fe8:	93c9db65 	.word	0x93c9db65
 8009fec:	3fcd864a 	.word	0x3fcd864a
 8009ff0:	a91d4101 	.word	0xa91d4101
 8009ff4:	3fd17460 	.word	0x3fd17460
 8009ff8:	518f264d 	.word	0x518f264d
 8009ffc:	3fd55555 	.word	0x3fd55555
 800a000:	db6fabff 	.word	0xdb6fabff
 800a004:	3fdb6db6 	.word	0x3fdb6db6
 800a008:	33333303 	.word	0x33333303
 800a00c:	3fe33333 	.word	0x3fe33333
 800a010:	e0000000 	.word	0xe0000000
 800a014:	3feec709 	.word	0x3feec709
 800a018:	dc3a03fd 	.word	0xdc3a03fd
 800a01c:	3feec709 	.word	0x3feec709
 800a020:	145b01f5 	.word	0x145b01f5
 800a024:	be3e2fe0 	.word	0xbe3e2fe0
 800a028:	7ff00000 	.word	0x7ff00000
 800a02c:	43400000 	.word	0x43400000
 800a030:	0003988e 	.word	0x0003988e
 800a034:	000bb679 	.word	0x000bb679
 800a038:	0800bf68 	.word	0x0800bf68
 800a03c:	3ff00000 	.word	0x3ff00000
 800a040:	40080000 	.word	0x40080000
 800a044:	0800bf48 	.word	0x0800bf48
 800a048:	0800bf58 	.word	0x0800bf58
 800a04c:	a39a      	add	r3, pc, #616	@ (adr r3, 800a2b8 <__ieee754_pow+0x9f0>)
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	4630      	mov	r0, r6
 800a054:	4639      	mov	r1, r7
 800a056:	f7f6 f889 	bl	800016c <__adddf3>
 800a05a:	4642      	mov	r2, r8
 800a05c:	e9cd 0100 	strd	r0, r1, [sp]
 800a060:	464b      	mov	r3, r9
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 f87f 	bl	8000168 <__aeabi_dsub>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a072:	f7f6 fcc1 	bl	80009f8 <__aeabi_dcmpgt>
 800a076:	2800      	cmp	r0, #0
 800a078:	f47f ae09 	bne.w	8009c8e <__ieee754_pow+0x3c6>
 800a07c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a080:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a084:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a088:	fa43 fa0a 	asr.w	sl, r3, sl
 800a08c:	44da      	add	sl, fp
 800a08e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a092:	489b      	ldr	r0, [pc, #620]	@ (800a300 <__ieee754_pow+0xa38>)
 800a094:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a098:	4108      	asrs	r0, r1
 800a09a:	ea00 030a 	and.w	r3, r0, sl
 800a09e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a0a2:	f1c1 0114 	rsb	r1, r1, #20
 800a0a6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	fa4a fa01 	asr.w	sl, sl, r1
 800a0b0:	f1bb 0f00 	cmp.w	fp, #0
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	f04f 0200 	mov.w	r2, #0
 800a0ba:	bfb8      	it	lt
 800a0bc:	f1ca 0a00 	rsblt	sl, sl, #0
 800a0c0:	f7f6 f852 	bl	8000168 <__aeabi_dsub>
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	4689      	mov	r9, r1
 800a0c8:	2400      	movs	r4, #0
 800a0ca:	4632      	mov	r2, r6
 800a0cc:	463b      	mov	r3, r7
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	f7f6 f84b 	bl	800016c <__adddf3>
 800a0d6:	a37a      	add	r3, pc, #488	@ (adr r3, 800a2c0 <__ieee754_pow+0x9f8>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	4620      	mov	r0, r4
 800a0de:	460d      	mov	r5, r1
 800a0e0:	f7f6 f9fa 	bl	80004d8 <__aeabi_dmul>
 800a0e4:	4642      	mov	r2, r8
 800a0e6:	464b      	mov	r3, r9
 800a0e8:	e9cd 0100 	strd	r0, r1, [sp]
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f7f6 f83a 	bl	8000168 <__aeabi_dsub>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	4639      	mov	r1, r7
 800a0fc:	f7f6 f834 	bl	8000168 <__aeabi_dsub>
 800a100:	a371      	add	r3, pc, #452	@ (adr r3, 800a2c8 <__ieee754_pow+0xa00>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f7f6 f9e7 	bl	80004d8 <__aeabi_dmul>
 800a10a:	a371      	add	r3, pc, #452	@ (adr r3, 800a2d0 <__ieee754_pow+0xa08>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	4680      	mov	r8, r0
 800a112:	4689      	mov	r9, r1
 800a114:	4620      	mov	r0, r4
 800a116:	4629      	mov	r1, r5
 800a118:	f7f6 f9de 	bl	80004d8 <__aeabi_dmul>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4640      	mov	r0, r8
 800a122:	4649      	mov	r1, r9
 800a124:	f7f6 f822 	bl	800016c <__adddf3>
 800a128:	4604      	mov	r4, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a134:	f7f6 f81a 	bl	800016c <__adddf3>
 800a138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a13c:	4680      	mov	r8, r0
 800a13e:	4689      	mov	r9, r1
 800a140:	f7f6 f812 	bl	8000168 <__aeabi_dsub>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4620      	mov	r0, r4
 800a14a:	4629      	mov	r1, r5
 800a14c:	f7f6 f80c 	bl	8000168 <__aeabi_dsub>
 800a150:	4642      	mov	r2, r8
 800a152:	4606      	mov	r6, r0
 800a154:	460f      	mov	r7, r1
 800a156:	464b      	mov	r3, r9
 800a158:	4640      	mov	r0, r8
 800a15a:	4649      	mov	r1, r9
 800a15c:	f7f6 f9bc 	bl	80004d8 <__aeabi_dmul>
 800a160:	a35d      	add	r3, pc, #372	@ (adr r3, 800a2d8 <__ieee754_pow+0xa10>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	4604      	mov	r4, r0
 800a168:	460d      	mov	r5, r1
 800a16a:	f7f6 f9b5 	bl	80004d8 <__aeabi_dmul>
 800a16e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a2e0 <__ieee754_pow+0xa18>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f7f5 fff8 	bl	8000168 <__aeabi_dsub>
 800a178:	4622      	mov	r2, r4
 800a17a:	462b      	mov	r3, r5
 800a17c:	f7f6 f9ac 	bl	80004d8 <__aeabi_dmul>
 800a180:	a359      	add	r3, pc, #356	@ (adr r3, 800a2e8 <__ieee754_pow+0xa20>)
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f7f5 fff1 	bl	800016c <__adddf3>
 800a18a:	4622      	mov	r2, r4
 800a18c:	462b      	mov	r3, r5
 800a18e:	f7f6 f9a3 	bl	80004d8 <__aeabi_dmul>
 800a192:	a357      	add	r3, pc, #348	@ (adr r3, 800a2f0 <__ieee754_pow+0xa28>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f7f5 ffe6 	bl	8000168 <__aeabi_dsub>
 800a19c:	4622      	mov	r2, r4
 800a19e:	462b      	mov	r3, r5
 800a1a0:	f7f6 f99a 	bl	80004d8 <__aeabi_dmul>
 800a1a4:	a354      	add	r3, pc, #336	@ (adr r3, 800a2f8 <__ieee754_pow+0xa30>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	f7f5 ffdf 	bl	800016c <__adddf3>
 800a1ae:	4622      	mov	r2, r4
 800a1b0:	462b      	mov	r3, r5
 800a1b2:	f7f6 f991 	bl	80004d8 <__aeabi_dmul>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4649      	mov	r1, r9
 800a1be:	f7f5 ffd3 	bl	8000168 <__aeabi_dsub>
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	460d      	mov	r5, r1
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	f7f6 f983 	bl	80004d8 <__aeabi_dmul>
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	e9cd 0100 	strd	r0, r1, [sp]
 800a1d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7f5 ffc2 	bl	8000168 <__aeabi_dsub>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ec:	f7f6 fa9e 	bl	800072c <__aeabi_ddiv>
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	463b      	mov	r3, r7
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	f7f6 f96c 	bl	80004d8 <__aeabi_dmul>
 800a200:	4632      	mov	r2, r6
 800a202:	463b      	mov	r3, r7
 800a204:	f7f5 ffb2 	bl	800016c <__adddf3>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4620      	mov	r0, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	f7f5 ffaa 	bl	8000168 <__aeabi_dsub>
 800a214:	4642      	mov	r2, r8
 800a216:	464b      	mov	r3, r9
 800a218:	f7f5 ffa6 	bl	8000168 <__aeabi_dsub>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	2000      	movs	r0, #0
 800a222:	4938      	ldr	r1, [pc, #224]	@ (800a304 <__ieee754_pow+0xa3c>)
 800a224:	f7f5 ffa0 	bl	8000168 <__aeabi_dsub>
 800a228:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a22c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a230:	da2e      	bge.n	800a290 <__ieee754_pow+0x9c8>
 800a232:	4652      	mov	r2, sl
 800a234:	f000 f874 	bl	800a320 <scalbn>
 800a238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a23c:	f7ff bbed 	b.w	8009a1a <__ieee754_pow+0x152>
 800a240:	4c31      	ldr	r4, [pc, #196]	@ (800a308 <__ieee754_pow+0xa40>)
 800a242:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a246:	42a3      	cmp	r3, r4
 800a248:	d91a      	bls.n	800a280 <__ieee754_pow+0x9b8>
 800a24a:	4b30      	ldr	r3, [pc, #192]	@ (800a30c <__ieee754_pow+0xa44>)
 800a24c:	440b      	add	r3, r1
 800a24e:	4303      	orrs	r3, r0
 800a250:	d009      	beq.n	800a266 <__ieee754_pow+0x99e>
 800a252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a256:	2200      	movs	r2, #0
 800a258:	2300      	movs	r3, #0
 800a25a:	f7f6 fbaf 	bl	80009bc <__aeabi_dcmplt>
 800a25e:	3800      	subs	r0, #0
 800a260:	bf18      	it	ne
 800a262:	2001      	movne	r0, #1
 800a264:	e444      	b.n	8009af0 <__ieee754_pow+0x228>
 800a266:	4642      	mov	r2, r8
 800a268:	464b      	mov	r3, r9
 800a26a:	f7f5 ff7d 	bl	8000168 <__aeabi_dsub>
 800a26e:	4632      	mov	r2, r6
 800a270:	463b      	mov	r3, r7
 800a272:	f7f6 fbb7 	bl	80009e4 <__aeabi_dcmpge>
 800a276:	2800      	cmp	r0, #0
 800a278:	d1eb      	bne.n	800a252 <__ieee754_pow+0x98a>
 800a27a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800a310 <__ieee754_pow+0xa48>
 800a27e:	e6fd      	b.n	800a07c <__ieee754_pow+0x7b4>
 800a280:	469a      	mov	sl, r3
 800a282:	4b24      	ldr	r3, [pc, #144]	@ (800a314 <__ieee754_pow+0xa4c>)
 800a284:	459a      	cmp	sl, r3
 800a286:	f63f aef9 	bhi.w	800a07c <__ieee754_pow+0x7b4>
 800a28a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a28e:	e71b      	b.n	800a0c8 <__ieee754_pow+0x800>
 800a290:	4621      	mov	r1, r4
 800a292:	e7d1      	b.n	800a238 <__ieee754_pow+0x970>
 800a294:	2000      	movs	r0, #0
 800a296:	491b      	ldr	r1, [pc, #108]	@ (800a304 <__ieee754_pow+0xa3c>)
 800a298:	f7ff bb34 	b.w	8009904 <__ieee754_pow+0x3c>
 800a29c:	2000      	movs	r0, #0
 800a29e:	2100      	movs	r1, #0
 800a2a0:	f7ff bb30 	b.w	8009904 <__ieee754_pow+0x3c>
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	4659      	mov	r1, fp
 800a2a8:	f7ff bb2c 	b.w	8009904 <__ieee754_pow+0x3c>
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	f7ff bb79 	b.w	80099a4 <__ieee754_pow+0xdc>
 800a2b2:	2400      	movs	r4, #0
 800a2b4:	f7ff bb64 	b.w	8009980 <__ieee754_pow+0xb8>
 800a2b8:	652b82fe 	.word	0x652b82fe
 800a2bc:	3c971547 	.word	0x3c971547
 800a2c0:	00000000 	.word	0x00000000
 800a2c4:	3fe62e43 	.word	0x3fe62e43
 800a2c8:	fefa39ef 	.word	0xfefa39ef
 800a2cc:	3fe62e42 	.word	0x3fe62e42
 800a2d0:	0ca86c39 	.word	0x0ca86c39
 800a2d4:	be205c61 	.word	0xbe205c61
 800a2d8:	72bea4d0 	.word	0x72bea4d0
 800a2dc:	3e663769 	.word	0x3e663769
 800a2e0:	c5d26bf1 	.word	0xc5d26bf1
 800a2e4:	3ebbbd41 	.word	0x3ebbbd41
 800a2e8:	af25de2c 	.word	0xaf25de2c
 800a2ec:	3f11566a 	.word	0x3f11566a
 800a2f0:	16bebd93 	.word	0x16bebd93
 800a2f4:	3f66c16c 	.word	0x3f66c16c
 800a2f8:	5555553e 	.word	0x5555553e
 800a2fc:	3fc55555 	.word	0x3fc55555
 800a300:	fff00000 	.word	0xfff00000
 800a304:	3ff00000 	.word	0x3ff00000
 800a308:	4090cbff 	.word	0x4090cbff
 800a30c:	3f6f3400 	.word	0x3f6f3400
 800a310:	4090cc00 	.word	0x4090cc00
 800a314:	3fe00000 	.word	0x3fe00000

0800a318 <fabs>:
 800a318:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a31c:	4619      	mov	r1, r3
 800a31e:	4770      	bx	lr

0800a320 <scalbn>:
 800a320:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a324:	4616      	mov	r6, r2
 800a326:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a32a:	4683      	mov	fp, r0
 800a32c:	468c      	mov	ip, r1
 800a32e:	460b      	mov	r3, r1
 800a330:	b982      	cbnz	r2, 800a354 <scalbn+0x34>
 800a332:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a336:	4303      	orrs	r3, r0
 800a338:	d039      	beq.n	800a3ae <scalbn+0x8e>
 800a33a:	4b2f      	ldr	r3, [pc, #188]	@ (800a3f8 <scalbn+0xd8>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	f7f6 f8cb 	bl	80004d8 <__aeabi_dmul>
 800a342:	4b2e      	ldr	r3, [pc, #184]	@ (800a3fc <scalbn+0xdc>)
 800a344:	4683      	mov	fp, r0
 800a346:	429e      	cmp	r6, r3
 800a348:	468c      	mov	ip, r1
 800a34a:	da0d      	bge.n	800a368 <scalbn+0x48>
 800a34c:	a326      	add	r3, pc, #152	@ (adr r3, 800a3e8 <scalbn+0xc8>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	e01b      	b.n	800a38c <scalbn+0x6c>
 800a354:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a358:	42ba      	cmp	r2, r7
 800a35a:	d109      	bne.n	800a370 <scalbn+0x50>
 800a35c:	4602      	mov	r2, r0
 800a35e:	f7f5 ff05 	bl	800016c <__adddf3>
 800a362:	4683      	mov	fp, r0
 800a364:	468c      	mov	ip, r1
 800a366:	e022      	b.n	800a3ae <scalbn+0x8e>
 800a368:	460b      	mov	r3, r1
 800a36a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a36e:	3a36      	subs	r2, #54	@ 0x36
 800a370:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a374:	428e      	cmp	r6, r1
 800a376:	dd0c      	ble.n	800a392 <scalbn+0x72>
 800a378:	a31d      	add	r3, pc, #116	@ (adr r3, 800a3f0 <scalbn+0xd0>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	461c      	mov	r4, r3
 800a380:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a384:	f361 74df 	bfi	r4, r1, #31, #1
 800a388:	4621      	mov	r1, r4
 800a38a:	481d      	ldr	r0, [pc, #116]	@ (800a400 <scalbn+0xe0>)
 800a38c:	f7f6 f8a4 	bl	80004d8 <__aeabi_dmul>
 800a390:	e7e7      	b.n	800a362 <scalbn+0x42>
 800a392:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a396:	4432      	add	r2, r6
 800a398:	428a      	cmp	r2, r1
 800a39a:	dced      	bgt.n	800a378 <scalbn+0x58>
 800a39c:	2a00      	cmp	r2, #0
 800a39e:	dd0a      	ble.n	800a3b6 <scalbn+0x96>
 800a3a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a3a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a3a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a3ac:	46ac      	mov	ip, r5
 800a3ae:	4658      	mov	r0, fp
 800a3b0:	4661      	mov	r1, ip
 800a3b2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a3b6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a3ba:	da09      	bge.n	800a3d0 <scalbn+0xb0>
 800a3bc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a3c0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a3c4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a3c8:	480e      	ldr	r0, [pc, #56]	@ (800a404 <scalbn+0xe4>)
 800a3ca:	f041 011f 	orr.w	r1, r1, #31
 800a3ce:	e7bd      	b.n	800a34c <scalbn+0x2c>
 800a3d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a3d4:	3236      	adds	r2, #54	@ 0x36
 800a3d6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a3da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a3de:	4658      	mov	r0, fp
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4b08      	ldr	r3, [pc, #32]	@ (800a408 <scalbn+0xe8>)
 800a3e6:	e7d1      	b.n	800a38c <scalbn+0x6c>
 800a3e8:	c2f8f359 	.word	0xc2f8f359
 800a3ec:	01a56e1f 	.word	0x01a56e1f
 800a3f0:	8800759c 	.word	0x8800759c
 800a3f4:	7e37e43c 	.word	0x7e37e43c
 800a3f8:	43500000 	.word	0x43500000
 800a3fc:	ffff3cb0 	.word	0xffff3cb0
 800a400:	8800759c 	.word	0x8800759c
 800a404:	c2f8f359 	.word	0xc2f8f359
 800a408:	3c900000 	.word	0x3c900000

0800a40c <with_errno>:
 800a40c:	b570      	push	{r4, r5, r6, lr}
 800a40e:	4604      	mov	r4, r0
 800a410:	460d      	mov	r5, r1
 800a412:	4616      	mov	r6, r2
 800a414:	f7fd f96a 	bl	80076ec <__errno>
 800a418:	4629      	mov	r1, r5
 800a41a:	6006      	str	r6, [r0, #0]
 800a41c:	4620      	mov	r0, r4
 800a41e:	bd70      	pop	{r4, r5, r6, pc}

0800a420 <xflow>:
 800a420:	b513      	push	{r0, r1, r4, lr}
 800a422:	4604      	mov	r4, r0
 800a424:	4619      	mov	r1, r3
 800a426:	4610      	mov	r0, r2
 800a428:	b10c      	cbz	r4, 800a42e <xflow+0xe>
 800a42a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a42e:	e9cd 2300 	strd	r2, r3, [sp]
 800a432:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a436:	f7f6 f84f 	bl	80004d8 <__aeabi_dmul>
 800a43a:	2222      	movs	r2, #34	@ 0x22
 800a43c:	b002      	add	sp, #8
 800a43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a442:	f7ff bfe3 	b.w	800a40c <with_errno>

0800a446 <__math_uflow>:
 800a446:	2200      	movs	r2, #0
 800a448:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a44c:	f7ff bfe8 	b.w	800a420 <xflow>

0800a450 <__math_oflow>:
 800a450:	2200      	movs	r2, #0
 800a452:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a456:	f7ff bfe3 	b.w	800a420 <xflow>
	...

0800a45c <__ieee754_sqrt>:
 800a45c:	4a67      	ldr	r2, [pc, #412]	@ (800a5fc <__ieee754_sqrt+0x1a0>)
 800a45e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a462:	438a      	bics	r2, r1
 800a464:	4606      	mov	r6, r0
 800a466:	460f      	mov	r7, r1
 800a468:	460b      	mov	r3, r1
 800a46a:	4604      	mov	r4, r0
 800a46c:	d10e      	bne.n	800a48c <__ieee754_sqrt+0x30>
 800a46e:	4602      	mov	r2, r0
 800a470:	f7f6 f832 	bl	80004d8 <__aeabi_dmul>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4630      	mov	r0, r6
 800a47a:	4639      	mov	r1, r7
 800a47c:	f7f5 fe76 	bl	800016c <__adddf3>
 800a480:	4606      	mov	r6, r0
 800a482:	460f      	mov	r7, r1
 800a484:	4630      	mov	r0, r6
 800a486:	4639      	mov	r1, r7
 800a488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	2900      	cmp	r1, #0
 800a48e:	dc0c      	bgt.n	800a4aa <__ieee754_sqrt+0x4e>
 800a490:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a494:	4302      	orrs	r2, r0
 800a496:	d0f5      	beq.n	800a484 <__ieee754_sqrt+0x28>
 800a498:	b189      	cbz	r1, 800a4be <__ieee754_sqrt+0x62>
 800a49a:	4602      	mov	r2, r0
 800a49c:	f7f5 fe64 	bl	8000168 <__aeabi_dsub>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	f7f6 f942 	bl	800072c <__aeabi_ddiv>
 800a4a8:	e7ea      	b.n	800a480 <__ieee754_sqrt+0x24>
 800a4aa:	150a      	asrs	r2, r1, #20
 800a4ac:	d115      	bne.n	800a4da <__ieee754_sqrt+0x7e>
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	e009      	b.n	800a4c6 <__ieee754_sqrt+0x6a>
 800a4b2:	0ae3      	lsrs	r3, r4, #11
 800a4b4:	3a15      	subs	r2, #21
 800a4b6:	0564      	lsls	r4, r4, #21
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d0fa      	beq.n	800a4b2 <__ieee754_sqrt+0x56>
 800a4bc:	e7f7      	b.n	800a4ae <__ieee754_sqrt+0x52>
 800a4be:	460a      	mov	r2, r1
 800a4c0:	e7fa      	b.n	800a4b8 <__ieee754_sqrt+0x5c>
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	3101      	adds	r1, #1
 800a4c6:	02d8      	lsls	r0, r3, #11
 800a4c8:	d5fb      	bpl.n	800a4c2 <__ieee754_sqrt+0x66>
 800a4ca:	1e48      	subs	r0, r1, #1
 800a4cc:	1a12      	subs	r2, r2, r0
 800a4ce:	f1c1 0020 	rsb	r0, r1, #32
 800a4d2:	fa24 f000 	lsr.w	r0, r4, r0
 800a4d6:	4303      	orrs	r3, r0
 800a4d8:	408c      	lsls	r4, r1
 800a4da:	2600      	movs	r6, #0
 800a4dc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a4e0:	2116      	movs	r1, #22
 800a4e2:	07d2      	lsls	r2, r2, #31
 800a4e4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4f2:	bf5c      	itt	pl
 800a4f4:	005b      	lslpl	r3, r3, #1
 800a4f6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a4fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4fe:	bf58      	it	pl
 800a500:	0064      	lslpl	r4, r4, #1
 800a502:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a506:	107f      	asrs	r7, r7, #1
 800a508:	0064      	lsls	r4, r4, #1
 800a50a:	1815      	adds	r5, r2, r0
 800a50c:	429d      	cmp	r5, r3
 800a50e:	bfde      	ittt	le
 800a510:	182a      	addle	r2, r5, r0
 800a512:	1b5b      	suble	r3, r3, r5
 800a514:	1836      	addle	r6, r6, r0
 800a516:	0fe5      	lsrs	r5, r4, #31
 800a518:	3901      	subs	r1, #1
 800a51a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a51e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a522:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a526:	d1f0      	bne.n	800a50a <__ieee754_sqrt+0xae>
 800a528:	460d      	mov	r5, r1
 800a52a:	f04f 0a20 	mov.w	sl, #32
 800a52e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a532:	429a      	cmp	r2, r3
 800a534:	eb01 0c00 	add.w	ip, r1, r0
 800a538:	db02      	blt.n	800a540 <__ieee754_sqrt+0xe4>
 800a53a:	d113      	bne.n	800a564 <__ieee754_sqrt+0x108>
 800a53c:	45a4      	cmp	ip, r4
 800a53e:	d811      	bhi.n	800a564 <__ieee754_sqrt+0x108>
 800a540:	f1bc 0f00 	cmp.w	ip, #0
 800a544:	eb0c 0100 	add.w	r1, ip, r0
 800a548:	da42      	bge.n	800a5d0 <__ieee754_sqrt+0x174>
 800a54a:	2900      	cmp	r1, #0
 800a54c:	db40      	blt.n	800a5d0 <__ieee754_sqrt+0x174>
 800a54e:	f102 0e01 	add.w	lr, r2, #1
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	4672      	mov	r2, lr
 800a556:	45a4      	cmp	ip, r4
 800a558:	bf88      	it	hi
 800a55a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a55e:	eba4 040c 	sub.w	r4, r4, ip
 800a562:	4405      	add	r5, r0
 800a564:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a568:	f1ba 0a01 	subs.w	sl, sl, #1
 800a56c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a570:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a574:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a578:	d1db      	bne.n	800a532 <__ieee754_sqrt+0xd6>
 800a57a:	431c      	orrs	r4, r3
 800a57c:	d01a      	beq.n	800a5b4 <__ieee754_sqrt+0x158>
 800a57e:	4c20      	ldr	r4, [pc, #128]	@ (800a600 <__ieee754_sqrt+0x1a4>)
 800a580:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800a604 <__ieee754_sqrt+0x1a8>
 800a584:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a588:	e9db 2300 	ldrd	r2, r3, [fp]
 800a58c:	f7f5 fdec 	bl	8000168 <__aeabi_dsub>
 800a590:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f6 fa18 	bl	80009d0 <__aeabi_dcmple>
 800a5a0:	b140      	cbz	r0, 800a5b4 <__ieee754_sqrt+0x158>
 800a5a2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a5a6:	e9db 2300 	ldrd	r2, r3, [fp]
 800a5aa:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a5ae:	d111      	bne.n	800a5d4 <__ieee754_sqrt+0x178>
 800a5b0:	4655      	mov	r5, sl
 800a5b2:	3601      	adds	r6, #1
 800a5b4:	1072      	asrs	r2, r6, #1
 800a5b6:	086b      	lsrs	r3, r5, #1
 800a5b8:	07f1      	lsls	r1, r6, #31
 800a5ba:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a5be:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a5c2:	bf48      	it	mi
 800a5c4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800a5ce:	e757      	b.n	800a480 <__ieee754_sqrt+0x24>
 800a5d0:	4696      	mov	lr, r2
 800a5d2:	e7be      	b.n	800a552 <__ieee754_sqrt+0xf6>
 800a5d4:	f7f5 fdca 	bl	800016c <__adddf3>
 800a5d8:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	f7f6 f9ea 	bl	80009bc <__aeabi_dcmplt>
 800a5e8:	b120      	cbz	r0, 800a5f4 <__ieee754_sqrt+0x198>
 800a5ea:	1ca8      	adds	r0, r5, #2
 800a5ec:	bf08      	it	eq
 800a5ee:	3601      	addeq	r6, #1
 800a5f0:	3502      	adds	r5, #2
 800a5f2:	e7df      	b.n	800a5b4 <__ieee754_sqrt+0x158>
 800a5f4:	1c6b      	adds	r3, r5, #1
 800a5f6:	f023 0501 	bic.w	r5, r3, #1
 800a5fa:	e7db      	b.n	800a5b4 <__ieee754_sqrt+0x158>
 800a5fc:	7ff00000 	.word	0x7ff00000
 800a600:	200001f8 	.word	0x200001f8
 800a604:	200001f0 	.word	0x200001f0

0800a608 <_init>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	bf00      	nop
 800a60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60e:	bc08      	pop	{r3}
 800a610:	469e      	mov	lr, r3
 800a612:	4770      	bx	lr

0800a614 <_fini>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	bf00      	nop
 800a618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61a:	bc08      	pop	{r3}
 800a61c:	469e      	mov	lr, r3
 800a61e:	4770      	bx	lr
