
medidor_metereologico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000947c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009590  08009590  00019590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a60  08009a60  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08009a60  08009a60  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a60  08009a60  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a60  08009a60  00019a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a64  08009a64  00019a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009a68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  200001f0  08009c58  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc0  08009c58  00020cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e50  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f52  00000000  00000000  000330ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00036000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcc  00000000  00000000  000371c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a78e  00000000  00000000  00037f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001555d  00000000  00000000  00052722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095657  00000000  00000000  00067c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e80  00000000  00000000  000fd2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00103158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009574 	.word	0x08009574

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08009574 	.word	0x08009574

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <delay>:
 * Timer utilizo para el delay de us
 */
extern TIM_HandleTypeDef htim2;

void delay (uint16_t us)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <delay+0x2c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8000b3a:	bf00      	nop
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <delay+0x2c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3f9      	bcc.n	8000b3c <delay+0x14>
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	200002a8 	.word	0x200002a8

08000b58 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIO,uint16_t GPIO_pin){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = DATA_PIN;
 8000b72:	2302      	movs	r3, #2
 8000b74:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DATA_PORT, &GPIO_InitStruct);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4619      	mov	r1, r3
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <Set_Pin_Output+0x3c>)
 8000b86:	f002 fdc5 	bl	8003714 <HAL_GPIO_Init>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010800 	.word	0x40010800

08000b98 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIO, uint16_t GPIO_pin){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = DATA_PIN;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DATA_PORT, &GPIO_InitStruct);
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <Set_Pin_Input+0x3c>)
 8000bc6:	f002 fda5 	bl	8003714 <HAL_GPIO_Init>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <DHT22_init>:
/*
 * DHT22
 */

void DHT22_init (void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	Set_Pin_Output(DATA_PORT, DATA_PIN); // set the pin as output
 8000bdc:	2102      	movs	r1, #2
 8000bde:	480d      	ldr	r0, [pc, #52]	; (8000c14 <DHT22_init+0x3c>)
 8000be0:	f7ff ffba 	bl	8000b58 <Set_Pin_Output>
	HAL_GPIO_WritePin (DATA_PORT, DATA_PIN, 0);   // pull the pin low
 8000be4:	2200      	movs	r2, #0
 8000be6:	2102      	movs	r1, #2
 8000be8:	480a      	ldr	r0, [pc, #40]	; (8000c14 <DHT22_init+0x3c>)
 8000bea:	f002 ff2e 	bl	8003a4a <HAL_GPIO_WritePin>
	delay(1200);   // wait for > 1ms
 8000bee:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000bf2:	f7ff ff99 	bl	8000b28 <delay>

	HAL_GPIO_WritePin (DATA_PORT, DATA_PIN, 1);   // pull the pin high
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <DHT22_init+0x3c>)
 8000bfc:	f002 ff25 	bl	8003a4a <HAL_GPIO_WritePin>
	delay (20);   // wait for 30us
 8000c00:	2014      	movs	r0, #20
 8000c02:	f7ff ff91 	bl	8000b28 <delay>

	Set_Pin_Input(DATA_PORT, DATA_PIN);   // set as input
 8000c06:	2102      	movs	r1, #2
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <DHT22_init+0x3c>)
 8000c0a:	f7ff ffc5 	bl	8000b98 <Set_Pin_Input>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010800 	.word	0x40010800

08000c18 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	Set_Pin_Input(DATA_PORT, DATA_PIN);   // set as input
 8000c1e:	2102      	movs	r1, #2
 8000c20:	4815      	ldr	r0, [pc, #84]	; (8000c78 <DHT22_Check_Response+0x60>)
 8000c22:	f7ff ffb9 	bl	8000b98 <Set_Pin_Input>
	uint8_t Response = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8000c2a:	2028      	movs	r0, #40	; 0x28
 8000c2c:	f7ff ff7c 	bl	8000b28 <delay>
	if (!(HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN))) // if the pin is low
 8000c30:	2102      	movs	r1, #2
 8000c32:	4811      	ldr	r0, [pc, #68]	; (8000c78 <DHT22_Check_Response+0x60>)
 8000c34:	f002 fef2 	bl	8003a1c <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10e      	bne.n	8000c5c <DHT22_Check_Response+0x44>
	{
		delay (80);   // wait for 80us
 8000c3e:	2050      	movs	r0, #80	; 0x50
 8000c40:	f7ff ff72 	bl	8000b28 <delay>

		if ((HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN))) Response = 1;  // if the pin is high, response is ok
 8000c44:	2102      	movs	r1, #2
 8000c46:	480c      	ldr	r0, [pc, #48]	; (8000c78 <DHT22_Check_Response+0x60>)
 8000c48:	f002 fee8 	bl	8003a1c <HAL_GPIO_ReadPin>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <DHT22_Check_Response+0x40>
 8000c52:	2301      	movs	r3, #1
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	e001      	b.n	8000c5c <DHT22_Check_Response+0x44>
		else Response = -1;
 8000c58:	23ff      	movs	r3, #255	; 0xff
 8000c5a:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN)));   // wait for the pin to go low
 8000c5c:	bf00      	nop
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <DHT22_Check_Response+0x60>)
 8000c62:	f002 fedb 	bl	8003a1c <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f8      	bne.n	8000c5e <DHT22_Check_Response+0x46>
	return Response;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40010800 	.word	0x40010800

08000c7c <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	71bb      	strb	r3, [r7, #6]
 8000c86:	e037      	b.n	8000cf8 <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN)));   // wait for the pin to go high
 8000c88:	bf00      	nop
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	481e      	ldr	r0, [pc, #120]	; (8000d08 <DHT22_Read+0x8c>)
 8000c8e:	f002 fec5 	bl	8003a1c <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f8      	beq.n	8000c8a <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 8000c98:	2028      	movs	r0, #40	; 0x28
 8000c9a:	f7ff ff45 	bl	8000b28 <delay>

		if (!(HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN)))   // if the pin is low
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <DHT22_Read+0x8c>)
 8000ca2:	f002 febb 	bl	8003a1c <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10e      	bne.n	8000cca <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	e00b      	b.n	8000ce2 <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	f1c3 0307 	rsb	r3, r3, #7
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	b25a      	sxtb	r2, r3
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DATA_PORT, DATA_PIN)));  // wait for the pin to go low
 8000ce2:	bf00      	nop
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4808      	ldr	r0, [pc, #32]	; (8000d08 <DHT22_Read+0x8c>)
 8000ce8:	f002 fe98 	bl	8003a1c <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f8      	bne.n	8000ce4 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	71bb      	strb	r3, [r7, #6]
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	2b07      	cmp	r3, #7
 8000cfc:	d9c4      	bls.n	8000c88 <DHT22_Read+0xc>
	}

	return i;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010800 	.word	0x40010800

08000d0c <LCD_Start>:
static void LCD_WriteControl(unsigned char cByte);
static void LCD_WriteData(unsigned char dByte);
static void LCD_WriteControlNibble(unsigned char nibble);
static void LCD_WriteDataNibble(unsigned char nibble);

void LCD_Start(void) {    // Funcion de inicializacion del modulo de display (16x2 o 20x4)
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    /* INIT CODE */
    HAL_Delay(80);                                                        /* Delay 40 ms */
 8000d10:	2050      	movs	r0, #80	; 0x50
 8000d12:	f001 fff5 	bl	8002d00 <HAL_Delay>
    LCD_WriteControlNibble(LCD_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 f922 	bl	8000f60 <LCD_WriteControlNibble>
    HAL_Delay(10);                                                         /* Delay 5 ms */
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f001 ffef 	bl	8002d00 <HAL_Delay>
    LCD_WriteControlNibble(LCD_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f91c 	bl	8000f60 <LCD_WriteControlNibble>
    HAL_Delay(30);                                                        /* Delay 15 ms */
 8000d28:	201e      	movs	r0, #30
 8000d2a:	f001 ffe9 	bl	8002d00 <HAL_Delay>
    LCD_WriteControlNibble(LCD_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
 8000d2e:	2003      	movs	r0, #3
 8000d30:	f000 f916 	bl	8000f60 <LCD_WriteControlNibble>
    HAL_Delay(2);                                                         /* Delay 1 ms */
 8000d34:	2002      	movs	r0, #2
 8000d36:	f001 ffe3 	bl	8002d00 <HAL_Delay>
    LCD_WriteControlNibble(LCD_DISPLAY_4_BIT_INIT);    /* Selects 4-bit mode */
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f000 f910 	bl	8000f60 <LCD_WriteControlNibble>
    HAL_Delay(10);                                                         /* Delay 5 ms */
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 ffdd 	bl	8002d00 <HAL_Delay>

    LCD_WriteControl(LCD_CURSOR_AUTO_INCR_ON);    /* Incr Cursor After Writes */
 8000d46:	2006      	movs	r0, #6
 8000d48:	f000 f8ca 	bl	8000ee0 <LCD_WriteControl>
    LCD_WriteControl(LCD_DISPLAY_CURSOR_ON);      /* Turn Display, Cursor ON */
 8000d4c:	200e      	movs	r0, #14
 8000d4e:	f000 f8c7 	bl	8000ee0 <LCD_WriteControl>
    LCD_WriteControl(LCD_DISPLAY_2_LINES_5x10);   /* 2 Lines by 5x10 Characters */
 8000d52:	2028      	movs	r0, #40	; 0x28
 8000d54:	f000 f8c4 	bl	8000ee0 <LCD_WriteControl>
    LCD_WriteControl(LCD_DISPLAY_CURSOR_OFF);     /* Turn Display, Cursor OFF */
 8000d58:	2008      	movs	r0, #8
 8000d5a:	f000 f8c1 	bl	8000ee0 <LCD_WriteControl>

    LCD_WriteControl(LCD_CLEAR_DISPLAY);          /* Clear LCD Screen */
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 f8be 	bl	8000ee0 <LCD_WriteControl>
    LCD_WriteControl(LCD_DISPLAY_ON_CURSOR_OFF);  /* Turn Display ON, Cursor OFF */
 8000d64:	200c      	movs	r0, #12
 8000d66:	f000 f8bb 	bl	8000ee0 <LCD_WriteControl>
    LCD_WriteControl(LCD_RESET_CURSOR_POSITION);  /* Set Cursor to 0,0 */
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f8b8 	bl	8000ee0 <LCD_WriteControl>
    HAL_Delay(10);
 8000d70:	200a      	movs	r0, #10
 8000d72:	f001 ffc5 	bl	8002d00 <HAL_Delay>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <LCD_ClearDisplay>:

void LCD_ClearDisplay(void) {    // Funcion de limpieza total de la pantalla
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
    LCD_WriteControl(LCD_CLEAR_DISPLAY);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 f8ae 	bl	8000ee0 <LCD_WriteControl>
    HAL_Delay(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f001 ffbb 	bl	8002d00 <HAL_Delay>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <LCD_Position>:

void LCD_Position(unsigned char row, unsigned char column) {    // Funcion de posicionamiento de cursor en pantalla
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71bb      	strb	r3, [r7, #6]
 * row      -> Fila donde va a empezar a escribir       (0-3)
 * column   -> Columna donde va a empezar a escribir    (0-15)

 * LCD_Position(1,6);
 */
    row = (LCD_ROW_MASK & row);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	71fb      	strb	r3, [r7, #7]

    switch(row) {
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d826      	bhi.n	8000dfc <LCD_Position+0x6c>
 8000dae:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <LCD_Position+0x24>)
 8000db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db4:	08000dc5 	.word	0x08000dc5
 8000db8:	08000dd3 	.word	0x08000dd3
 8000dbc:	08000de1 	.word	0x08000de1
 8000dc0:	08000def 	.word	0x08000def
        case 0:
            LCD_WriteControl(LCD_ROW_0_START + column);
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	3b80      	subs	r3, #128	; 0x80
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f888 	bl	8000ee0 <LCD_WriteControl>
            break;
 8000dd0:	e015      	b.n	8000dfe <LCD_Position+0x6e>
        case 1:
            LCD_WriteControl(LCD_ROW_1_START + column);
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	3b40      	subs	r3, #64	; 0x40
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f881 	bl	8000ee0 <LCD_WriteControl>
            break;
 8000dde:	e00e      	b.n	8000dfe <LCD_Position+0x6e>
        case 2:
            LCD_WriteControl(LCD_ROW_2_START + column);
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	3b6c      	subs	r3, #108	; 0x6c
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f87a 	bl	8000ee0 <LCD_WriteControl>
            break;
 8000dec:	e007      	b.n	8000dfe <LCD_Position+0x6e>
        case 3:
            LCD_WriteControl(LCD_ROW_3_START + column);
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	3b2c      	subs	r3, #44	; 0x2c
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f873 	bl	8000ee0 <LCD_WriteControl>
            break;
 8000dfa:	e000      	b.n	8000dfe <LCD_Position+0x6e>
        default:
            break;
 8000dfc:	bf00      	nop
    }
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop

08000e08 <LCD_PrintString>:

    /* Print out number */
    LCD_PrintString(&number[digIndex]);
}

void LCD_PrintString(char const string[]) {    // Funcion de impresion en pantalla de cadena alfanumerica
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
/*
 * text -> Texto entre comillas a imprimir

 * LCD_PrintString("Hello, World!");
 */
    unsigned char indexU8 = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
    char current = *string;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	73bb      	strb	r3, [r7, #14]

    /* Until null is reached, print next character */
    while((char) '\0' != current)
 8000e1a:	e00b      	b.n	8000e34 <LCD_PrintString+0x2c>
    {
        LCD_WriteData((unsigned char)current);
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f87e 	bl	8000f20 <LCD_WriteData>
        current = string[indexU8];
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	73bb      	strb	r3, [r7, #14]
        indexU8++;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	3301      	adds	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
    while((char) '\0' != current)
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <LCD_PrintString+0x14>
    }
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <LCD_Write>:
    BIT7 BIT8 BIT7 BIT6 BIT5 BIT4 BIT3 BIT2 BIT1 BIT0
       X    X    X   RW   RS    E   D7   D6   D5   D4

*/
//Rutina para sacar la trama en paralelo
static void LCD_Write(unsigned char nible){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_PIN, ((nible>>5)&0x01));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	095b      	lsrs	r3, r3, #5
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	481e      	ldr	r0, [pc, #120]	; (8000ed8 <LCD_Write+0x94>)
 8000e60:	f002 fdf3 	bl	8003a4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_PIN, ((nible>>4)&0x01));
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	091b      	lsrs	r3, r3, #4
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	2101      	movs	r1, #1
 8000e74:	4819      	ldr	r0, [pc, #100]	; (8000edc <LCD_Write+0x98>)
 8000e76:	f002 fde8 	bl	8003a4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((nible>>3)&0x01));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	2140      	movs	r1, #64	; 0x40
 8000e8a:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <LCD_Write+0x94>)
 8000e8c:	f002 fddd 	bl	8003a4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((nible>>2)&0x01));
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LCD_Write+0x94>)
 8000ea2:	f002 fdd2 	bl	8003a4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((nible>>1)&0x01));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <LCD_Write+0x94>)
 8000eb8:	f002 fdc7 	bl	8003a4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((nible>>0)&0x01));
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <LCD_Write+0x94>)
 8000eca:	f002 fdbe 	bl	8003a4a <HAL_GPIO_WritePin>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <LCD_WriteControl>:

//Rutinas de escitura en los registros de instrucciones y de datos
static void LCD_WriteControl(unsigned char cByte) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
    // CYBYTE = 0xABCDEFGH
    static unsigned char nibble;

    //HAL_Delay(10); // 10
    nibble = cByte >> LCD_NIBBLE_SHIFT; // 0Xabcdefg << 4 --> nimble = 0X0000abcd
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <LCD_WriteControl+0x3c>)
 8000ef2:	701a      	strb	r2, [r3, #0]

    // Escribir nibble m�s significativo
    LCD_WriteControlNibble(nibble);//ALGORITMO PARA ESCRIBIRLE AL LCD UN COMANDO
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <LCD_WriteControl+0x3c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f831 	bl	8000f60 <LCD_WriteControlNibble>
    nibble = cByte & LCD_NIBBLE_MASK; // 0Xabcdefg AND 0x0F  --> nimble = 0X0000efgh
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 030f 	and.w	r3, r3, #15
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <LCD_WriteControl+0x3c>)
 8000f08:	701a      	strb	r2, [r3, #0]

    // Escribir nibble menos significativo
    LCD_WriteControlNibble(nibble);//ALGORITMO PARA ESCRIBIRLE AL LCD UN COMANDO
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <LCD_WriteControl+0x3c>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f826 	bl	8000f60 <LCD_WriteControlNibble>
    //HAL_Delay(5); // 5

}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000020c 	.word	0x2000020c

08000f20 <LCD_WriteData>:

static void LCD_WriteData(unsigned char dByte) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
    // CYBYTE = 0xABCDEFGH
    static unsigned char nibble;

    //HAL_Delay(10); // 10
    nibble = dByte >> LCD_NIBBLE_SHIFT;// abcdefg << 4 --> nimble = 0000abcd
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <LCD_WriteData+0x3c>)
 8000f32:	701a      	strb	r2, [r3, #0]

    // Escribir nibble m�s significativo
    LCD_WriteDataNibble(nibble);//ALGORITMO PARA ESCRIBIRLE AL LCD INFO
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <LCD_WriteData+0x3c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f835 	bl	8000fa8 <LCD_WriteDataNibble>
    nibble = dByte & LCD_NIBBLE_MASK; // abcdefg AND 0x0F  --> nimble = 0000efgh
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <LCD_WriteData+0x3c>)
 8000f48:	701a      	strb	r2, [r3, #0]

    // Escribir nibble menos significativo
    LCD_WriteDataNibble(nibble);//ALGORITMO PARA ESCRIBIRLE AL LCD INFO
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <LCD_WriteData+0x3c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f82a 	bl	8000fa8 <LCD_WriteDataNibble>
    //HAL_Delay(5); // 5

}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000020d 	.word	0x2000020d

08000f60 <LCD_WriteControlNibble>:

//Subrutinas de escitura en los registros de instrucciones y de datos
static void LCD_WriteControlNibble(unsigned char nibble) {//RS=0
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]

    //PASO1
    nibble &= ~RS;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f023 0320 	bic.w	r3, r3, #32
 8000f70:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//RW es 0 constante
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff65 	bl	8000e44 <LCD_Write>

    //PASO2
    nibble |= E;
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//E=1
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <LCD_Write>
    HAL_Delay(2);    // 2
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f001 feb8 	bl	8002d00 <HAL_Delay>
    nibble &= (~E);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f023 0310 	bic.w	r3, r3, #16
 8000f96:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//E=0
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff52 	bl	8000e44 <LCD_Write>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LCD_WriteDataNibble>:

static void LCD_WriteDataNibble(unsigned char nibble) {//RS=1
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]

    //PASO1
    nibble |= RS;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//RW es 1 constante
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff41 	bl	8000e44 <LCD_Write>

    //PASO2
    nibble |= E;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//E=1
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff39 	bl	8000e44 <LCD_Write>
    HAL_Delay(2);    // 2
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f001 fe94 	bl	8002d00 <HAL_Delay>
    nibble &= (~E);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f023 0310 	bic.w	r3, r3, #16
 8000fde:	71fb      	strb	r3, [r7, #7]
    LCD_Write(nibble);//E=0
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff2e 	bl	8000e44 <LCD_Write>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff4:	b08c      	sub	sp, #48	; 0x30
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000ffc:	4b5b      	ldr	r3, [pc, #364]	; (800116c <decodeGGA+0x17c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001006:	e004      	b.n	8001012 <decodeGGA+0x22>
 8001008:	4b58      	ldr	r3, [pc, #352]	; (800116c <decodeGGA+0x17c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a57      	ldr	r2, [pc, #348]	; (800116c <decodeGGA+0x17c>)
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b56      	ldr	r3, [pc, #344]	; (800116c <decodeGGA+0x17c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b2c      	cmp	r3, #44	; 0x2c
 8001020:	d1f2      	bne.n	8001008 <decodeGGA+0x18>
	inx++;
 8001022:	4b52      	ldr	r3, [pc, #328]	; (800116c <decodeGGA+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a50      	ldr	r2, [pc, #320]	; (800116c <decodeGGA+0x17c>)
 800102a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 800102c:	e004      	b.n	8001038 <decodeGGA+0x48>
 800102e:	4b4f      	ldr	r3, [pc, #316]	; (800116c <decodeGGA+0x17c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a4d      	ldr	r2, [pc, #308]	; (800116c <decodeGGA+0x17c>)
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b4c      	ldr	r3, [pc, #304]	; (800116c <decodeGGA+0x17c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b2c      	cmp	r3, #44	; 0x2c
 8001046:	d1f2      	bne.n	800102e <decodeGGA+0x3e>
	inx++;
 8001048:	4b48      	ldr	r3, [pc, #288]	; (800116c <decodeGGA+0x17c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a47      	ldr	r2, [pc, #284]	; (800116c <decodeGGA+0x17c>)
 8001050:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8001052:	e004      	b.n	800105e <decodeGGA+0x6e>
 8001054:	4b45      	ldr	r3, [pc, #276]	; (800116c <decodeGGA+0x17c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a44      	ldr	r2, [pc, #272]	; (800116c <decodeGGA+0x17c>)
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b43      	ldr	r3, [pc, #268]	; (800116c <decodeGGA+0x17c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b2c      	cmp	r3, #44	; 0x2c
 800106c:	d1f2      	bne.n	8001054 <decodeGGA+0x64>
	inx++;
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <decodeGGA+0x17c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a3d      	ldr	r2, [pc, #244]	; (800116c <decodeGGA+0x17c>)
 8001076:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001078:	e004      	b.n	8001084 <decodeGGA+0x94>
 800107a:	4b3c      	ldr	r3, [pc, #240]	; (800116c <decodeGGA+0x17c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a3a      	ldr	r2, [pc, #232]	; (800116c <decodeGGA+0x17c>)
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b39      	ldr	r3, [pc, #228]	; (800116c <decodeGGA+0x17c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b2c      	cmp	r3, #44	; 0x2c
 8001092:	d1f2      	bne.n	800107a <decodeGGA+0x8a>
	inx++;
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <decodeGGA+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4a34      	ldr	r2, [pc, #208]	; (800116c <decodeGGA+0x17c>)
 800109c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 800109e:	e004      	b.n	80010aa <decodeGGA+0xba>
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <decodeGGA+0x17c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <decodeGGA+0x17c>)
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <decodeGGA+0x17c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b2c      	cmp	r3, #44	; 0x2c
 80010b8:	d1f2      	bne.n	80010a0 <decodeGGA+0xb0>
	inx++;
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <decodeGGA+0x17c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a2a      	ldr	r2, [pc, #168]	; (800116c <decodeGGA+0x17c>)
 80010c2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 80010c4:	e004      	b.n	80010d0 <decodeGGA+0xe0>
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <decodeGGA+0x17c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a27      	ldr	r2, [pc, #156]	; (800116c <decodeGGA+0x17c>)
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <decodeGGA+0x17c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b2c      	cmp	r3, #44	; 0x2c
 80010de:	d1f2      	bne.n	80010c6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <decodeGGA+0x17c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a21      	ldr	r2, [pc, #132]	; (800116c <decodeGGA+0x17c>)
 80010e8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <decodeGGA+0x17c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b31      	cmp	r3, #49	; 0x31
 80010f8:	d00f      	beq.n	800111a <decodeGGA+0x12a>
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <decodeGGA+0x17c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b32      	cmp	r3, #50	; 0x32
 8001108:	d007      	beq.n	800111a <decodeGGA+0x12a>
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <decodeGGA+0x17c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b36      	cmp	r3, #54	; 0x36
 8001118:	d106      	bne.n	8001128 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2201      	movs	r2, #1
 800111e:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <decodeGGA+0x17c>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001126:	e009      	b.n	800113c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800112e:	2301      	movs	r3, #1
 8001130:	e2f2      	b.n	8001718 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <decodeGGA+0x17c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	4a0c      	ldr	r2, [pc, #48]	; (800116c <decodeGGA+0x17c>)
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <decodeGGA+0x17c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b2c      	cmp	r3, #44	; 0x2c
 800114a:	d1f2      	bne.n	8001132 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <decodeGGA+0x17c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a06      	ldr	r2, [pc, #24]	; (800116c <decodeGGA+0x17c>)
 8001154:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	220c      	movs	r2, #12
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f005 fa17 	bl	8006592 <memset>
	i=0;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001168:	e016      	b.n	8001198 <decodeGGA+0x1a8>
 800116a:	bf00      	nop
 800116c:	20000210 	.word	0x20000210
	{
		buffer[i] = GGAbuffer[inx];
 8001170:	4ba7      	ldr	r3, [pc, #668]	; (8001410 <decodeGGA+0x420>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	7819      	ldrb	r1, [r3, #0]
 800117c:	f107 020c 	add.w	r2, r7, #12
 8001180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001182:	4413      	add	r3, r2
 8001184:	460a      	mov	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
		i++;
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118a:	3301      	adds	r3, #1
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800118e:	4ba0      	ldr	r3, [pc, #640]	; (8001410 <decodeGGA+0x420>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a9e      	ldr	r2, [pc, #632]	; (8001410 <decodeGGA+0x420>)
 8001196:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001198:	4b9d      	ldr	r3, [pc, #628]	; (8001410 <decodeGGA+0x420>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b2c      	cmp	r3, #44	; 0x2c
 80011a6:	d1e3      	bne.n	8001170 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fbe1 	bl	8005974 <atoi>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a97      	ldr	r2, [pc, #604]	; (8001414 <decodeGGA+0x424>)
 80011b6:	fb82 1203 	smull	r1, r2, r2, r3
 80011ba:	1312      	asrs	r2, r2, #12
 80011bc:	17db      	asrs	r3, r3, #31
 80011be:	1ad2      	subs	r2, r2, r3
 80011c0:	4b95      	ldr	r3, [pc, #596]	; (8001418 <decodeGGA+0x428>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4995      	ldr	r1, [pc, #596]	; (800141c <decodeGGA+0x42c>)
 80011c6:	fb81 0103 	smull	r0, r1, r1, r3
 80011ca:	1149      	asrs	r1, r1, #5
 80011cc:	17db      	asrs	r3, r3, #31
 80011ce:	1acb      	subs	r3, r1, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	4a93      	ldr	r2, [pc, #588]	; (8001420 <decodeGGA+0x430>)
 80011d4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fbca 	bl	8005974 <atoi>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a8e      	ldr	r2, [pc, #568]	; (800141c <decodeGGA+0x42c>)
 80011e4:	fb82 1203 	smull	r1, r2, r2, r3
 80011e8:	1152      	asrs	r2, r2, #5
 80011ea:	17db      	asrs	r3, r3, #31
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	4a8b      	ldr	r2, [pc, #556]	; (800141c <decodeGGA+0x42c>)
 80011f0:	fb82 1203 	smull	r1, r2, r2, r3
 80011f4:	1151      	asrs	r1, r2, #5
 80011f6:	17da      	asrs	r2, r3, #31
 80011f8:	1a8a      	subs	r2, r1, r2
 80011fa:	2164      	movs	r1, #100	; 0x64
 80011fc:	fb01 f202 	mul.w	r2, r1, r2
 8001200:	1a9a      	subs	r2, r3, r2
 8001202:	4b85      	ldr	r3, [pc, #532]	; (8001418 <decodeGGA+0x428>)
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	4b85      	ldr	r3, [pc, #532]	; (800141c <decodeGGA+0x42c>)
 8001208:	fb83 0301 	smull	r0, r3, r3, r1
 800120c:	1158      	asrs	r0, r3, #5
 800120e:	17cb      	asrs	r3, r1, #31
 8001210:	1ac3      	subs	r3, r0, r3
 8001212:	2064      	movs	r0, #100	; 0x64
 8001214:	fb00 f303 	mul.w	r3, r0, r3
 8001218:	1acb      	subs	r3, r1, r3
 800121a:	4413      	add	r3, r2
 800121c:	4a81      	ldr	r2, [pc, #516]	; (8001424 <decodeGGA+0x434>)
 800121e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8001220:	4b80      	ldr	r3, [pc, #512]	; (8001424 <decodeGGA+0x434>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b3b      	cmp	r3, #59	; 0x3b
 8001226:	dd09      	ble.n	800123c <decodeGGA+0x24c>
	{
		min = min-60;
 8001228:	4b7e      	ldr	r3, [pc, #504]	; (8001424 <decodeGGA+0x434>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3b3c      	subs	r3, #60	; 0x3c
 800122e:	4a7d      	ldr	r2, [pc, #500]	; (8001424 <decodeGGA+0x434>)
 8001230:	6013      	str	r3, [r2, #0]
		hr++;
 8001232:	4b7b      	ldr	r3, [pc, #492]	; (8001420 <decodeGGA+0x430>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a79      	ldr	r2, [pc, #484]	; (8001420 <decodeGGA+0x430>)
 800123a:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 800123c:	4b78      	ldr	r3, [pc, #480]	; (8001420 <decodeGGA+0x430>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da09      	bge.n	8001258 <decodeGGA+0x268>
	{
		hr=24+hr;
 8001244:	4b76      	ldr	r3, [pc, #472]	; (8001420 <decodeGGA+0x430>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3318      	adds	r3, #24
 800124a:	4a75      	ldr	r2, [pc, #468]	; (8001420 <decodeGGA+0x430>)
 800124c:	6013      	str	r3, [r2, #0]
		daychange--;
 800124e:	4b76      	ldr	r3, [pc, #472]	; (8001428 <decodeGGA+0x438>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3b01      	subs	r3, #1
 8001254:	4a74      	ldr	r2, [pc, #464]	; (8001428 <decodeGGA+0x438>)
 8001256:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8001258:	4b71      	ldr	r3, [pc, #452]	; (8001420 <decodeGGA+0x430>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b17      	cmp	r3, #23
 800125e:	dd09      	ble.n	8001274 <decodeGGA+0x284>
	{
		hr=hr-24;
 8001260:	4b6f      	ldr	r3, [pc, #444]	; (8001420 <decodeGGA+0x430>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3b18      	subs	r3, #24
 8001266:	4a6e      	ldr	r2, [pc, #440]	; (8001420 <decodeGGA+0x430>)
 8001268:	6013      	str	r3, [r2, #0]
		daychange++;
 800126a:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <decodeGGA+0x438>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	4a6d      	ldr	r2, [pc, #436]	; (8001428 <decodeGGA+0x438>)
 8001272:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <decodeGGA+0x430>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 800127c:	4b69      	ldr	r3, [pc, #420]	; (8001424 <decodeGGA+0x434>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4618      	mov	r0, r3
 800128a:	f004 fb73 	bl	8005974 <atoi>
 800128e:	4602      	mov	r2, r0
 8001290:	4b62      	ldr	r3, [pc, #392]	; (800141c <decodeGGA+0x42c>)
 8001292:	fb83 1302 	smull	r1, r3, r3, r2
 8001296:	1159      	asrs	r1, r3, #5
 8001298:	17d3      	asrs	r3, r2, #31
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	2164      	movs	r1, #100	; 0x64
 800129e:	fb01 f303 	mul.w	r3, r1, r3
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <decodeGGA+0x420>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <decodeGGA+0x420>)
 80012b0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	220c      	movs	r2, #12
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 f969 	bl	8006592 <memset>
	i=0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80012c4:	e013      	b.n	80012ee <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 80012c6:	4b52      	ldr	r3, [pc, #328]	; (8001410 <decodeGGA+0x420>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	7819      	ldrb	r1, [r3, #0]
 80012d2:	f107 020c 	add.w	r2, r7, #12
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	4413      	add	r3, r2
 80012da:	460a      	mov	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
		i++;
 80012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e0:	3301      	adds	r3, #1
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <decodeGGA+0x420>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a49      	ldr	r2, [pc, #292]	; (8001410 <decodeGGA+0x420>)
 80012ec:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <decodeGGA+0x420>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b2c      	cmp	r3, #44	; 0x2c
 80012fc:	d1e3      	bne.n	80012c6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4618      	mov	r0, r3
 8001304:	f7fe ff24 	bl	8000150 <strlen>
 8001308:	4603      	mov	r3, r0
 800130a:	2b05      	cmp	r3, #5
 800130c:	d801      	bhi.n	8001312 <decodeGGA+0x322>
 800130e:	2302      	movs	r3, #2
 8001310:	e202      	b.n	8001718 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4618      	mov	r0, r3
 8001318:	f004 fb2c 	bl	8005974 <atoi>
 800131c:	4603      	mov	r3, r0
 800131e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001324:	e002      	b.n	800132c <decodeGGA+0x33c>
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001328:	3301      	adds	r3, #1
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
 800132c:	f107 020c 	add.w	r2, r7, #12
 8001330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b2e      	cmp	r3, #46	; 0x2e
 8001338:	d1f5      	bne.n	8001326 <decodeGGA+0x336>
	j++;
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	3301      	adds	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4618      	mov	r0, r3
 8001346:	f7fe ff03 	bl	8000150 <strlen>
 800134a:	4602      	mov	r2, r0
 800134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	f107 020c 	add.w	r2, r7, #12
 8001358:	4413      	add	r3, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f004 fb0a 	bl	8005974 <atoi>
 8001360:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001362:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f84c 	bl	8000404 <__aeabi_i2d>
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <decodeGGA+0x43c>)
 8001372:	f7ff f9db 	bl	800072c <__aeabi_ddiv>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4690      	mov	r8, r2
 800137c:	4699      	mov	r9, r3
 800137e:	69f8      	ldr	r0, [r7, #28]
 8001380:	f7ff f840 	bl	8000404 <__aeabi_i2d>
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	3302      	adds	r3, #2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f839 	bl	8000404 <__aeabi_i2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	f04f 0000 	mov.w	r0, #0
 800139a:	4925      	ldr	r1, [pc, #148]	; (8001430 <decodeGGA+0x440>)
 800139c:	f007 f9e2 	bl	8008764 <pow>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4620      	mov	r0, r4
 80013a6:	4629      	mov	r1, r5
 80013a8:	f7ff f9c0 	bl	800072c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4640      	mov	r0, r8
 80013b2:	4649      	mov	r1, r9
 80013b4:	f7fe feda 	bl	800016c <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb62 	bl	8000a88 <__aeabi_d2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	601a      	str	r2, [r3, #0]
	inx++;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <decodeGGA+0x420>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <decodeGGA+0x420>)
 80013d6:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <decodeGGA+0x420>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <decodeGGA+0x420>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <decodeGGA+0x420>)
 80013f0:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <decodeGGA+0x420>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a05      	ldr	r2, [pc, #20]	; (8001410 <decodeGGA+0x420>)
 80013fa:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	220c      	movs	r2, #12
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f005 f8c4 	bl	8006592 <memset>
	i=0;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800140e:	e025      	b.n	800145c <decodeGGA+0x46c>
 8001410:	20000210 	.word	0x20000210
 8001414:	68db8bad 	.word	0x68db8bad
 8001418:	20000000 	.word	0x20000000
 800141c:	51eb851f 	.word	0x51eb851f
 8001420:	20000214 	.word	0x20000214
 8001424:	20000218 	.word	0x20000218
 8001428:	20000228 	.word	0x20000228
 800142c:	40590000 	.word	0x40590000
 8001430:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8001434:	4b88      	ldr	r3, [pc, #544]	; (8001658 <decodeGGA+0x668>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	7819      	ldrb	r1, [r3, #0]
 8001440:	f107 020c 	add.w	r2, r7, #12
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	4413      	add	r3, r2
 8001448:	460a      	mov	r2, r1
 800144a:	701a      	strb	r2, [r3, #0]
		i++;
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	3301      	adds	r3, #1
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001452:	4b81      	ldr	r3, [pc, #516]	; (8001658 <decodeGGA+0x668>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a7f      	ldr	r2, [pc, #508]	; (8001658 <decodeGGA+0x668>)
 800145a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800145c:	4b7e      	ldr	r3, [pc, #504]	; (8001658 <decodeGGA+0x668>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b2c      	cmp	r3, #44	; 0x2c
 800146a:	d1e3      	bne.n	8001434 <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4618      	mov	r0, r3
 8001472:	f004 fa7f 	bl	8005974 <atoi>
 8001476:	4603      	mov	r3, r0
 8001478:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 800147e:	e002      	b.n	8001486 <decodeGGA+0x496>
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	3301      	adds	r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
 8001486:	f107 020c 	add.w	r2, r7, #12
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b2e      	cmp	r3, #46	; 0x2e
 8001492:	d1f5      	bne.n	8001480 <decodeGGA+0x490>
	j++;
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	3301      	adds	r3, #1
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe fe56 	bl	8000150 <strlen>
 80014a4:	4602      	mov	r2, r0
 80014a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	f107 020c 	add.w	r2, r7, #12
 80014b2:	4413      	add	r3, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 fa5d 	bl	8005974 <atoi>
 80014ba:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80014bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ff9f 	bl	8000404 <__aeabi_i2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b64      	ldr	r3, [pc, #400]	; (800165c <decodeGGA+0x66c>)
 80014cc:	f7ff f92e 	bl	800072c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4690      	mov	r8, r2
 80014d6:	4699      	mov	r9, r3
 80014d8:	69f8      	ldr	r0, [r7, #28]
 80014da:	f7fe ff93 	bl	8000404 <__aeabi_i2d>
 80014de:	4604      	mov	r4, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	3302      	adds	r3, #2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ff8c 	bl	8000404 <__aeabi_i2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	f04f 0000 	mov.w	r0, #0
 80014f4:	495a      	ldr	r1, [pc, #360]	; (8001660 <decodeGGA+0x670>)
 80014f6:	f007 f935 	bl	8008764 <pow>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7ff f913 	bl	800072c <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4640      	mov	r0, r8
 800150c:	4649      	mov	r1, r9
 800150e:	f7fe fe2d 	bl	800016c <__adddf3>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fab5 	bl	8000a88 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	609a      	str	r2, [r3, #8]
	inx++;
 8001528:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <decodeGGA+0x668>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a4a      	ldr	r2, [pc, #296]	; (8001658 <decodeGGA+0x668>)
 8001530:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001532:	4b49      	ldr	r3, [pc, #292]	; (8001658 <decodeGGA+0x668>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <decodeGGA+0x668>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	4a43      	ldr	r2, [pc, #268]	; (8001658 <decodeGGA+0x668>)
 800154a:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800154c:	4b42      	ldr	r3, [pc, #264]	; (8001658 <decodeGGA+0x668>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a41      	ldr	r2, [pc, #260]	; (8001658 <decodeGGA+0x668>)
 8001554:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8001556:	4b40      	ldr	r3, [pc, #256]	; (8001658 <decodeGGA+0x668>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	4a3e      	ldr	r2, [pc, #248]	; (8001658 <decodeGGA+0x668>)
 800155e:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001560:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <decodeGGA+0x668>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a3c      	ldr	r2, [pc, #240]	; (8001658 <decodeGGA+0x668>)
 8001568:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	220c      	movs	r2, #12
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f005 f80d 	bl	8006592 <memset>
	i=0;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800157c:	e013      	b.n	80015a6 <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 800157e:	4b36      	ldr	r3, [pc, #216]	; (8001658 <decodeGGA+0x668>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	7819      	ldrb	r1, [r3, #0]
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001590:	4413      	add	r3, r2
 8001592:	460a      	mov	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
		i++;
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	3301      	adds	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800159c:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <decodeGGA+0x668>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <decodeGGA+0x668>)
 80015a4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <decodeGGA+0x668>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b2c      	cmp	r3, #44	; 0x2c
 80015b4:	d1e3      	bne.n	800157e <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 f9da 	bl	8005974 <atoi>
 80015c0:	4602      	mov	r2, r0
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80015c6:	4b24      	ldr	r3, [pc, #144]	; (8001658 <decodeGGA+0x668>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <decodeGGA+0x668>)
 80015ce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80015d0:	e004      	b.n	80015dc <decodeGGA+0x5ec>
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <decodeGGA+0x668>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <decodeGGA+0x668>)
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <decodeGGA+0x668>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b2c      	cmp	r3, #44	; 0x2c
 80015ea:	d1f2      	bne.n	80015d2 <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <decodeGGA+0x668>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a19      	ldr	r2, [pc, #100]	; (8001658 <decodeGGA+0x668>)
 80015f4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	220c      	movs	r2, #12
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 ffc7 	bl	8006592 <memset>
	i=0;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001608:	e013      	b.n	8001632 <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <decodeGGA+0x668>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	7819      	ldrb	r1, [r3, #0]
 8001616:	f107 020c 	add.w	r2, r7, #12
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	4413      	add	r3, r2
 800161e:	460a      	mov	r2, r1
 8001620:	701a      	strb	r2, [r3, #0]
		i++;
 8001622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001624:	3301      	adds	r3, #1
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <decodeGGA+0x668>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <decodeGGA+0x668>)
 8001630:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <decodeGGA+0x668>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b2c      	cmp	r3, #44	; 0x2c
 8001640:	d1e3      	bne.n	800160a <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4618      	mov	r0, r3
 8001648:	f004 f994 	bl	8005974 <atoi>
 800164c:	4603      	mov	r3, r0
 800164e:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8001654:	e009      	b.n	800166a <decodeGGA+0x67a>
 8001656:	bf00      	nop
 8001658:	20000210 	.word	0x20000210
 800165c:	40590000 	.word	0x40590000
 8001660:	40240000 	.word	0x40240000
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	3301      	adds	r3, #1
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
 800166a:	f107 020c 	add.w	r2, r7, #12
 800166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b2e      	cmp	r3, #46	; 0x2e
 8001676:	d1f5      	bne.n	8001664 <decodeGGA+0x674>
	j++;
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	3301      	adds	r3, #1
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fd64 	bl	8000150 <strlen>
 8001688:	4602      	mov	r2, r0
 800168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	f107 020c 	add.w	r2, r7, #12
 8001696:	4413      	add	r3, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f004 f96b 	bl	8005974 <atoi>
 800169e:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80016a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fead 	bl	8000404 <__aeabi_i2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	69f8      	ldr	r0, [r7, #28]
 80016b0:	f7fe fea8 	bl	8000404 <__aeabi_i2d>
 80016b4:	4680      	mov	r8, r0
 80016b6:	4689      	mov	r9, r1
 80016b8:	6a38      	ldr	r0, [r7, #32]
 80016ba:	f7fe fea3 	bl	8000404 <__aeabi_i2d>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	4917      	ldr	r1, [pc, #92]	; (8001724 <decodeGGA+0x734>)
 80016c8:	f007 f84c 	bl	8008764 <pow>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4640      	mov	r0, r8
 80016d2:	4649      	mov	r1, r9
 80016d4:	f7ff f82a 	bl	800072c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fd44 	bl	800016c <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f9cc 	bl	8000a88 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	621a      	str	r2, [r3, #32]

	inx++;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <decodeGGA+0x738>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a09      	ldr	r2, [pc, #36]	; (8001728 <decodeGGA+0x738>)
 8001702:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <decodeGGA+0x738>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8001716:	2300      	movs	r3, #0

}
 8001718:	4618      	mov	r0, r3
 800171a:	3730      	adds	r7, #48	; 0x30
 800171c:	46bd      	mov	sp, r7
 800171e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001722:	bf00      	nop
 8001724:	40240000 	.word	0x40240000
 8001728:	20000210 	.word	0x20000210

0800172c <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 800172c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001730:	b090      	sub	sp, #64	; 0x40
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001738:	4b92      	ldr	r3, [pc, #584]	; (8001984 <decodeRMC+0x258>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8001742:	e004      	b.n	800174e <decodeRMC+0x22>
 8001744:	4b8f      	ldr	r3, [pc, #572]	; (8001984 <decodeRMC+0x258>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a8e      	ldr	r2, [pc, #568]	; (8001984 <decodeRMC+0x258>)
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b8d      	ldr	r3, [pc, #564]	; (8001984 <decodeRMC+0x258>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b2c      	cmp	r3, #44	; 0x2c
 800175c:	d1f2      	bne.n	8001744 <decodeRMC+0x18>
	inx++;
 800175e:	4b89      	ldr	r3, [pc, #548]	; (8001984 <decodeRMC+0x258>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a87      	ldr	r2, [pc, #540]	; (8001984 <decodeRMC+0x258>)
 8001766:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001768:	e004      	b.n	8001774 <decodeRMC+0x48>
 800176a:	4b86      	ldr	r3, [pc, #536]	; (8001984 <decodeRMC+0x258>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	4a84      	ldr	r2, [pc, #528]	; (8001984 <decodeRMC+0x258>)
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b83      	ldr	r3, [pc, #524]	; (8001984 <decodeRMC+0x258>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b2c      	cmp	r3, #44	; 0x2c
 8001782:	d1f2      	bne.n	800176a <decodeRMC+0x3e>
	inx++;
 8001784:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <decodeRMC+0x258>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a7e      	ldr	r2, [pc, #504]	; (8001984 <decodeRMC+0x258>)
 800178c:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 800178e:	4b7d      	ldr	r3, [pc, #500]	; (8001984 <decodeRMC+0x258>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b41      	cmp	r3, #65	; 0x41
 800179c:	d10d      	bne.n	80017ba <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2201      	movs	r2, #1
 80017a2:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80017a4:	4b77      	ldr	r3, [pc, #476]	; (8001984 <decodeRMC+0x258>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a76      	ldr	r2, [pc, #472]	; (8001984 <decodeRMC+0x258>)
 80017ac:	6013      	str	r3, [r2, #0]
	inx++;
 80017ae:	4b75      	ldr	r3, [pc, #468]	; (8001984 <decodeRMC+0x258>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	4a73      	ldr	r2, [pc, #460]	; (8001984 <decodeRMC+0x258>)
 80017b6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80017b8:	e009      	b.n	80017ce <decodeRMC+0xa2>
		rmc->isValid =0;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
		return 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e1d5      	b.n	8001b70 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80017c4:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <decodeRMC+0x258>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a6e      	ldr	r2, [pc, #440]	; (8001984 <decodeRMC+0x258>)
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <decodeRMC+0x258>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b2c      	cmp	r3, #44	; 0x2c
 80017dc:	d1f2      	bne.n	80017c4 <decodeRMC+0x98>
	inx++;
 80017de:	4b69      	ldr	r3, [pc, #420]	; (8001984 <decodeRMC+0x258>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	4a67      	ldr	r2, [pc, #412]	; (8001984 <decodeRMC+0x258>)
 80017e6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80017e8:	e004      	b.n	80017f4 <decodeRMC+0xc8>
 80017ea:	4b66      	ldr	r3, [pc, #408]	; (8001984 <decodeRMC+0x258>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a64      	ldr	r2, [pc, #400]	; (8001984 <decodeRMC+0x258>)
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b63      	ldr	r3, [pc, #396]	; (8001984 <decodeRMC+0x258>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b2c      	cmp	r3, #44	; 0x2c
 8001802:	d1f2      	bne.n	80017ea <decodeRMC+0xbe>
	inx++;
 8001804:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <decodeRMC+0x258>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	4a5e      	ldr	r2, [pc, #376]	; (8001984 <decodeRMC+0x258>)
 800180c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 800180e:	e004      	b.n	800181a <decodeRMC+0xee>
 8001810:	4b5c      	ldr	r3, [pc, #368]	; (8001984 <decodeRMC+0x258>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a5b      	ldr	r2, [pc, #364]	; (8001984 <decodeRMC+0x258>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <decodeRMC+0x258>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b2c      	cmp	r3, #44	; 0x2c
 8001828:	d1f2      	bne.n	8001810 <decodeRMC+0xe4>
	inx++;
 800182a:	4b56      	ldr	r3, [pc, #344]	; (8001984 <decodeRMC+0x258>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a54      	ldr	r2, [pc, #336]	; (8001984 <decodeRMC+0x258>)
 8001832:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001834:	e004      	b.n	8001840 <decodeRMC+0x114>
 8001836:	4b53      	ldr	r3, [pc, #332]	; (8001984 <decodeRMC+0x258>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	4a51      	ldr	r2, [pc, #324]	; (8001984 <decodeRMC+0x258>)
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b50      	ldr	r3, [pc, #320]	; (8001984 <decodeRMC+0x258>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b2c      	cmp	r3, #44	; 0x2c
 800184e:	d1f2      	bne.n	8001836 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8001850:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <decodeRMC+0x258>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	4a4b      	ldr	r2, [pc, #300]	; (8001984 <decodeRMC+0x258>)
 8001858:	6013      	str	r3, [r2, #0]
	i=0;
 800185a:	2300      	movs	r3, #0
 800185c:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	220c      	movs	r2, #12
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fe93 	bl	8006592 <memset>
	while (RMCbuffer[inx] != ',')
 800186c:	e013      	b.n	8001896 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 800186e:	4b45      	ldr	r3, [pc, #276]	; (8001984 <decodeRMC+0x258>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	7819      	ldrb	r1, [r3, #0]
 800187a:	f107 0208 	add.w	r2, r7, #8
 800187e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001880:	4413      	add	r3, r2
 8001882:	460a      	mov	r2, r1
 8001884:	701a      	strb	r2, [r3, #0]
		i++;
 8001886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001888:	3301      	adds	r3, #1
 800188a:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <decodeRMC+0x258>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	4a3c      	ldr	r2, [pc, #240]	; (8001984 <decodeRMC+0x258>)
 8001894:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <decodeRMC+0x258>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b2c      	cmp	r3, #44	; 0x2c
 80018a4:	d1e3      	bne.n	800186e <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d055      	beq.n	800195c <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 f85d 	bl	8005974 <atoi>
 80018ba:	4603      	mov	r3, r0
 80018bc:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80018c2:	e002      	b.n	80018ca <decodeRMC+0x19e>
 80018c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c6:	3301      	adds	r3, #1
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80018ca:	f107 0208 	add.w	r2, r7, #8
 80018ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b2e      	cmp	r3, #46	; 0x2e
 80018d6:	d1f5      	bne.n	80018c4 <decodeRMC+0x198>
		j++;
 80018d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018da:	3301      	adds	r3, #1
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fc34 	bl	8000150 <strlen>
 80018e8:	4602      	mov	r2, r0
 80018ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 80018f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f2:	f107 0208 	add.w	r2, r7, #8
 80018f6:	4413      	add	r3, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 f83b 	bl	8005974 <atoi>
 80018fe:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001900:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fd7d 	bl	8000404 <__aeabi_i2d>
 800190a:	4604      	mov	r4, r0
 800190c:	460d      	mov	r5, r1
 800190e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001910:	f7fe fd78 	bl	8000404 <__aeabi_i2d>
 8001914:	4680      	mov	r8, r0
 8001916:	4689      	mov	r9, r1
 8001918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800191a:	f7fe fd73 	bl	8000404 <__aeabi_i2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	4918      	ldr	r1, [pc, #96]	; (8001988 <decodeRMC+0x25c>)
 8001928:	f006 ff1c 	bl	8008764 <pow>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4640      	mov	r0, r8
 8001932:	4649      	mov	r1, r9
 8001934:	f7fe fefa 	bl	800072c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4620      	mov	r0, r4
 800193e:	4629      	mov	r1, r5
 8001940:	f7fe fc14 	bl	800016c <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f89c 	bl	8000a88 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	e003      	b.n	8001964 <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <decodeRMC+0x258>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a06      	ldr	r2, [pc, #24]	; (8001984 <decodeRMC+0x258>)
 800196c:	6013      	str	r3, [r2, #0]
	i=0;
 800196e:	2300      	movs	r3, #0
 8001970:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	220c      	movs	r2, #12
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f004 fe09 	bl	8006592 <memset>
	while (RMCbuffer[inx] != ',')
 8001980:	e018      	b.n	80019b4 <decodeRMC+0x288>
 8001982:	bf00      	nop
 8001984:	20000210 	.word	0x20000210
 8001988:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 800198c:	4b7b      	ldr	r3, [pc, #492]	; (8001b7c <decodeRMC+0x450>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	7819      	ldrb	r1, [r3, #0]
 8001998:	f107 0208 	add.w	r2, r7, #8
 800199c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800199e:	4413      	add	r3, r2
 80019a0:	460a      	mov	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
		i++;
 80019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a6:	3301      	adds	r3, #1
 80019a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80019aa:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <decodeRMC+0x450>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a72      	ldr	r2, [pc, #456]	; (8001b7c <decodeRMC+0x450>)
 80019b2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80019b4:	4b71      	ldr	r3, [pc, #452]	; (8001b7c <decodeRMC+0x450>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b2c      	cmp	r3, #44	; 0x2c
 80019c2:	d1e3      	bne.n	800198c <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d055      	beq.n	8001a7a <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 ffce 	bl	8005974 <atoi>
 80019d8:	4603      	mov	r3, r0
 80019da:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 80019e0:	e002      	b.n	80019e8 <decodeRMC+0x2bc>
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	3301      	adds	r3, #1
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
 80019e8:	f107 0208 	add.w	r2, r7, #8
 80019ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b2e      	cmp	r3, #46	; 0x2e
 80019f4:	d1f5      	bne.n	80019e2 <decodeRMC+0x2b6>
		j++;
 80019f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f8:	3301      	adds	r3, #1
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fba5 	bl	8000150 <strlen>
 8001a06:	4602      	mov	r2, r0
 8001a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a10:	f107 0208 	add.w	r2, r7, #8
 8001a14:	4413      	add	r3, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 ffac 	bl	8005974 <atoi>
 8001a1c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001a1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fcee 	bl	8000404 <__aeabi_i2d>
 8001a28:	4604      	mov	r4, r0
 8001a2a:	460d      	mov	r5, r1
 8001a2c:	69b8      	ldr	r0, [r7, #24]
 8001a2e:	f7fe fce9 	bl	8000404 <__aeabi_i2d>
 8001a32:	4680      	mov	r8, r0
 8001a34:	4689      	mov	r9, r1
 8001a36:	69f8      	ldr	r0, [r7, #28]
 8001a38:	f7fe fce4 	bl	8000404 <__aeabi_i2d>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	494e      	ldr	r1, [pc, #312]	; (8001b80 <decodeRMC+0x454>)
 8001a46:	f006 fe8d 	bl	8008764 <pow>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4640      	mov	r0, r8
 8001a50:	4649      	mov	r1, r9
 8001a52:	f7fe fe6b 	bl	800072c <__aeabi_ddiv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f7fe fb85 	bl	800016c <__adddf3>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f80d 	bl	8000a88 <__aeabi_d2f>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	e003      	b.n	8001a82 <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8001a82:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <decodeRMC+0x450>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4a3c      	ldr	r2, [pc, #240]	; (8001b7c <decodeRMC+0x450>)
 8001a8a:	6013      	str	r3, [r2, #0]
	i=0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	220c      	movs	r2, #12
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f004 fd7a 	bl	8006592 <memset>
	while (RMCbuffer[inx] != ',')
 8001a9e:	e013      	b.n	8001ac8 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <decodeRMC+0x450>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	7819      	ldrb	r1, [r3, #0]
 8001aac:	f107 0208 	add.w	r2, r7, #8
 8001ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab2:	4413      	add	r3, r2
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]
		i++;
 8001ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aba:	3301      	adds	r3, #1
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <decodeRMC+0x450>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a2d      	ldr	r2, [pc, #180]	; (8001b7c <decodeRMC+0x450>)
 8001ac6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <decodeRMC+0x450>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ad6:	d1e3      	bne.n	8001aa0 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 ff49 	bl	8005974 <atoi>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <decodeRMC+0x458>)
 8001ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aea:	1312      	asrs	r2, r2, #12
 8001aec:	17db      	asrs	r3, r3, #31
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <decodeRMC+0x45c>)
 8001af2:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 ff3b 	bl	8005974 <atoi>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <decodeRMC+0x460>)
 8001b02:	fb82 1203 	smull	r1, r2, r2, r3
 8001b06:	1152      	asrs	r2, r2, #5
 8001b08:	17db      	asrs	r3, r3, #31
 8001b0a:	1ad2      	subs	r2, r2, r3
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <decodeRMC+0x460>)
 8001b0e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b12:	1159      	asrs	r1, r3, #5
 8001b14:	17d3      	asrs	r3, r2, #31
 8001b16:	1acb      	subs	r3, r1, r3
 8001b18:	2164      	movs	r1, #100	; 0x64
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <decodeRMC+0x464>)
 8001b22:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 ff23 	bl	8005974 <atoi>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <decodeRMC+0x460>)
 8001b32:	fb83 1302 	smull	r1, r3, r3, r2
 8001b36:	1159      	asrs	r1, r3, #5
 8001b38:	17d3      	asrs	r3, r2, #31
 8001b3a:	1acb      	subs	r3, r1, r3
 8001b3c:	2164      	movs	r1, #100	; 0x64
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <decodeRMC+0x468>)
 8001b46:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <decodeRMC+0x45c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <decodeRMC+0x46c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <decodeRMC+0x45c>)
 8001b54:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <decodeRMC+0x45c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <decodeRMC+0x464>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <decodeRMC+0x468>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	609a      	str	r2, [r3, #8]

	return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3740      	adds	r7, #64	; 0x40
 8001b74:	46bd      	mov	sp, r7
 8001b76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000210 	.word	0x20000210
 8001b80:	40240000 	.word	0x40240000
 8001b84:	68db8bad 	.word	0x68db8bad
 8001b88:	2000021c 	.word	0x2000021c
 8001b8c:	51eb851f 	.word	0x51eb851f
 8001b90:	20000220 	.word	0x20000220
 8001b94:	20000224 	.word	0x20000224
 8001b98:	20000228 	.word	0x20000228

08001b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba2:	f001 f84b 	bl	8002c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba6:	f000 f9ad 	bl	8001f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001baa:	f000 fb35 	bl	8002218 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001bae:	f000 fae7 	bl	8002180 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001bb2:	f000 fa05 	bl	8001fc0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001bb6:	f000 fa41 	bl	800203c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bba:	f000 fa95 	bl	80020e8 <MX_TIM2_Init>
  MX_USB_PCD_Init();
 8001bbe:	f000 fb09 	bl	80021d4 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /*
   * Inicializamos el encoder
   */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001bc2:	213c      	movs	r1, #60	; 0x3c
 8001bc4:	48af      	ldr	r0, [pc, #700]	; (8001e84 <main+0x2e8>)
 8001bc6:	f002 fe73 	bl	80048b0 <HAL_TIM_Encoder_Start>
  /*
   * Inicializamos el timer dos para la funcion de delay en us
   */
  HAL_TIM_Base_Start(&htim2);
 8001bca:	48af      	ldr	r0, [pc, #700]	; (8001e88 <main+0x2ec>)
 8001bcc:	f002 fd84 	bl	80046d8 <HAL_TIM_Base_Start>

  /*
   * Inicio del ADC
   */
  HAL_ADC_Start(&hadc1);
 8001bd0:	48ae      	ldr	r0, [pc, #696]	; (8001e8c <main+0x2f0>)
 8001bd2:	f001 f991 	bl	8002ef8 <HAL_ADC_Start>

  /*
   * SALUDO AL USUARIO
   * DEBUG DEL LCD
   */
  LCD_PrintString("Hail Lechuga");
 8001bd6:	48ae      	ldr	r0, [pc, #696]	; (8001e90 <main+0x2f4>)
 8001bd8:	f7ff f916 	bl	8000e08 <LCD_PrintString>
  HAL_Delay(1000);
 8001bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001be0:	f001 f88e 	bl	8002d00 <HAL_Delay>
  LCD_ClearDisplay();
 8001be4:	f7ff f8c9 	bl	8000d7a <LCD_ClearDisplay>
  LCD_PrintString("COOP de lechugas");
 8001be8:	48aa      	ldr	r0, [pc, #680]	; (8001e94 <main+0x2f8>)
 8001bea:	f7ff f90d 	bl	8000e08 <LCD_PrintString>
  LCD_Position(1, 0);
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff f8cd 	bl	8000d90 <LCD_Position>
  LCD_PrintString("GUAJOLOTERA");
 8001bf6:	48a8      	ldr	r0, [pc, #672]	; (8001e98 <main+0x2fc>)
 8001bf8:	f7ff f906 	bl	8000e08 <LCD_PrintString>
  HAL_Delay(1000);
 8001bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c00:	f001 f87e 	bl	8002d00 <HAL_Delay>
  LCD_ClearDisplay();
 8001c04:	f7ff f8b9 	bl	8000d7a <LCD_ClearDisplay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LCD_Start();
 8001c08:	f7ff f880 	bl	8000d0c <LCD_Start>
  Ringbuf_init();
 8001c0c:	f000 fde0 	bl	80027d0 <Ringbuf_init>
  HAL_Delay(500);
 8001c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c14:	f001 f874 	bl	8002d00 <HAL_Delay>
    /* USER CODE BEGIN 3 */

	  /*
	   * Interfaz con el usuraio
	   */
	  std = TIM1->CNT/4;
 8001c18:	4ba0      	ldr	r3, [pc, #640]	; (8001e9c <main+0x300>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b9f      	ldr	r3, [pc, #636]	; (8001ea0 <main+0x304>)
 8001c22:	701a      	strb	r2, [r3, #0]

	  if (std == 0)
 8001c24:	4b9e      	ldr	r3, [pc, #632]	; (8001ea0 <main+0x304>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 80c4 	bne.w	8001db6 <main+0x21a>
	  {
		  if (Wait_for("GGA") == 1)
 8001c2e:	489d      	ldr	r0, [pc, #628]	; (8001ea4 <main+0x308>)
 8001c30:	f000 fef8 	bl	8002a24 <Wait_for>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d115      	bne.n	8001c66 <main+0xca>
			  {

				  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8001c3a:	4b9b      	ldr	r3, [pc, #620]	; (8001ea8 <main+0x30c>)
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	601a      	str	r2, [r3, #0]

				  Copy_upto("*", GGA);
 8001c42:	499a      	ldr	r1, [pc, #616]	; (8001eac <main+0x310>)
 8001c44:	489a      	ldr	r0, [pc, #616]	; (8001eb0 <main+0x314>)
 8001c46:	f000 fe6d 	bl	8002924 <Copy_upto>
				  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8001c4a:	499a      	ldr	r1, [pc, #616]	; (8001eb4 <main+0x318>)
 8001c4c:	4897      	ldr	r0, [pc, #604]	; (8001eac <main+0x310>)
 8001c4e:	f7ff f9cf 	bl	8000ff0 <decodeGGA>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <main+0xc4>
 8001c58:	4b97      	ldr	r3, [pc, #604]	; (8001eb8 <main+0x31c>)
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e002      	b.n	8001c66 <main+0xca>
				  else flagGGA = 1;  // 1 indicates the data is invalid
 8001c60:	4b95      	ldr	r3, [pc, #596]	; (8001eb8 <main+0x31c>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
			  }

			  if (Wait_for("RMC") == 1)
 8001c66:	4895      	ldr	r0, [pc, #596]	; (8001ebc <main+0x320>)
 8001c68:	f000 fedc 	bl	8002a24 <Wait_for>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d115      	bne.n	8001c9e <main+0x102>
			  {

				  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 8001c72:	4b8d      	ldr	r3, [pc, #564]	; (8001ea8 <main+0x30c>)
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	601a      	str	r2, [r3, #0]

				  Copy_upto("*", RMC);
 8001c7a:	4991      	ldr	r1, [pc, #580]	; (8001ec0 <main+0x324>)
 8001c7c:	488c      	ldr	r0, [pc, #560]	; (8001eb0 <main+0x314>)
 8001c7e:	f000 fe51 	bl	8002924 <Copy_upto>
				  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 8001c82:	4990      	ldr	r1, [pc, #576]	; (8001ec4 <main+0x328>)
 8001c84:	488e      	ldr	r0, [pc, #568]	; (8001ec0 <main+0x324>)
 8001c86:	f7ff fd51 	bl	800172c <decodeRMC>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d103      	bne.n	8001c98 <main+0xfc>
 8001c90:	4b8d      	ldr	r3, [pc, #564]	; (8001ec8 <main+0x32c>)
 8001c92:	2202      	movs	r2, #2
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e002      	b.n	8001c9e <main+0x102>
				  else flagRMC = 1;  // 1 indicates the data is invalid
 8001c98:	4b8b      	ldr	r3, [pc, #556]	; (8001ec8 <main+0x32c>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
			  }

			  if ((flagGGA == 2) | (flagRMC == 2))
 8001c9e:	4b86      	ldr	r3, [pc, #536]	; (8001eb8 <main+0x31c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2301      	moveq	r3, #1
 8001ca8:	2300      	movne	r3, #0
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	4b86      	ldr	r3, [pc, #536]	; (8001ec8 <main+0x32c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03c      	beq.n	8001d3c <main+0x1a0>
				  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
						  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
				  lcd_send_string(lcdBuffer);
				  */

				  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8001cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc6:	4881      	ldr	r0, [pc, #516]	; (8001ecc <main+0x330>)
 8001cc8:	f001 fed7 	bl	8003a7a <HAL_GPIO_TogglePin>

				  LCD_Position(0, 0);
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff f85e 	bl	8000d90 <LCD_Position>
				  sprintf (msg, "%02d / %02d / %02d",gpsData.rmcstruct.date.Day, \
 8001cd4:	4b77      	ldr	r3, [pc, #476]	; (8001eb4 <main+0x318>)
 8001cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd8:	4b76      	ldr	r3, [pc, #472]	; (8001eb4 <main+0x318>)
 8001cda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cdc:	4b75      	ldr	r3, [pc, #468]	; (8001eb4 <main+0x318>)
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	497a      	ldr	r1, [pc, #488]	; (8001ed0 <main+0x334>)
 8001ce6:	487b      	ldr	r0, [pc, #492]	; (8001ed4 <main+0x338>)
 8001ce8:	f004 fbf0 	bl	80064cc <siprintf>
				  						  	  gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
				  LCD_PrintString(msg);
 8001cec:	4879      	ldr	r0, [pc, #484]	; (8001ed4 <main+0x338>)
 8001cee:	f7ff f88b 	bl	8000e08 <LCD_PrintString>
				  LCD_Position(1, 0);
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f7ff f84b 	bl	8000d90 <LCD_Position>
				  sprintf (msg,"%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001cfa:	4b6e      	ldr	r3, [pc, #440]	; (8001eb4 <main+0x318>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fb92 	bl	8000428 <__aeabi_f2d>
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <main+0x318>)
 8001d0a:	791b      	ldrb	r3, [r3, #4]
 8001d0c:	461e      	mov	r6, r3
						  	  	  	  	  	  	  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001d0e:	4b69      	ldr	r3, [pc, #420]	; (8001eb4 <main+0x318>)
 8001d10:	689b      	ldr	r3, [r3, #8]
				  sprintf (msg,"%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fb88 	bl	8000428 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
						  	  	  	  	  	  	  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001d1c:	4965      	ldr	r1, [pc, #404]	; (8001eb4 <main+0x318>)
 8001d1e:	7b09      	ldrb	r1, [r1, #12]
				  sprintf (msg,"%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001d20:	9104      	str	r1, [sp, #16]
 8001d22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d26:	9600      	str	r6, [sp, #0]
 8001d28:	4622      	mov	r2, r4
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	496a      	ldr	r1, [pc, #424]	; (8001ed8 <main+0x33c>)
 8001d2e:	4869      	ldr	r0, [pc, #420]	; (8001ed4 <main+0x338>)
 8001d30:	f004 fbcc 	bl	80064cc <siprintf>
				  LCD_PrintString(msg);
 8001d34:	4867      	ldr	r0, [pc, #412]	; (8001ed4 <main+0x338>)
 8001d36:	f7ff f867 	bl	8000e08 <LCD_PrintString>
 8001d3a:	e01f      	b.n	8001d7c <main+0x1e0>
			  }

			  else if ((flagGGA == 1) | (flagRMC == 1))
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <main+0x31c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b5f      	ldr	r3, [pc, #380]	; (8001ec8 <main+0x32c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	bf0c      	ite	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	2300      	movne	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <main+0x1e0>
				  lcd_send_string("   NO FIX YET   ");
				  lcd_put_cur(1, 0);
				  lcd_send_string("   Please wait  ");
				  */

				  LCD_Position(0,0);
 8001d60:	2100      	movs	r1, #0
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff f814 	bl	8000d90 <LCD_Position>
				  LCD_PrintString("No se encuentra ");
 8001d68:	485c      	ldr	r0, [pc, #368]	; (8001edc <main+0x340>)
 8001d6a:	f7ff f84d 	bl	8000e08 <LCD_PrintString>
				  LCD_Position(1,0);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff f80d 	bl	8000d90 <LCD_Position>
				  LCD_PrintString("satelite...     ");
 8001d76:	485a      	ldr	r0, [pc, #360]	; (8001ee0 <main+0x344>)
 8001d78:	f7ff f846 	bl	8000e08 <LCD_PrintString>

			  }

			  if (VCCTimeout <= 0)
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <main+0x30c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	dc18      	bgt.n	8001db6 <main+0x21a>
			  {
				  VCCTimeout = 5000;  // Reset the timeout
 8001d84:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <main+0x30c>)
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	601a      	str	r2, [r3, #0]

				  //reset flags
				  flagGGA =flagRMC =0;
 8001d8c:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <main+0x32c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <main+0x32c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a48      	ldr	r2, [pc, #288]	; (8001eb8 <main+0x31c>)
 8001d98:	6013      	str	r3, [r2, #0]
				  lcd_put_cur(0, 0);
				  lcd_send_string("    VCC Issue   ");
				  lcd_put_cur(1, 0);
				  lcd_send_string("Check Connection");
				  */
				  LCD_Position(0,0);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7fe fff7 	bl	8000d90 <LCD_Position>
				  LCD_PrintString("    VCC  bajo   ");
 8001da2:	4850      	ldr	r0, [pc, #320]	; (8001ee4 <main+0x348>)
 8001da4:	f7ff f830 	bl	8000e08 <LCD_PrintString>
				  LCD_Position(1,0);
 8001da8:	2100      	movs	r1, #0
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7fe fff0 	bl	8000d90 <LCD_Position>
				  LCD_PrintString("Checar conexion ");
 8001db0:	484d      	ldr	r0, [pc, #308]	; (8001ee8 <main+0x34c>)
 8001db2:	f7ff f829 	bl	8000e08 <LCD_PrintString>
			  }

	  }
	  if (std == 1)
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <main+0x304>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d11b      	bne.n	8001df6 <main+0x25a>
	  {
		  //Cantidad de luz
		  sensores.light = HAL_ADC_GetValue(&hadc1);
 8001dbe:	4833      	ldr	r0, [pc, #204]	; (8001e8c <main+0x2f0>)
 8001dc0:	f001 f948 	bl	8003054 <HAL_ADC_GetValue>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b48      	ldr	r3, [pc, #288]	; (8001eec <main+0x350>)
 8001dca:	709a      	strb	r2, [r3, #2]

		  LCD_Position(0,0);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7fe ffde 	bl	8000d90 <LCD_Position>
		  LCD_PrintString("LUMINICIDAD:    ");
 8001dd4:	4846      	ldr	r0, [pc, #280]	; (8001ef0 <main+0x354>)
 8001dd6:	f7ff f817 	bl	8000e08 <LCD_PrintString>
		  sprintf(msg,"%d           ",sensores.light);
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <main+0x350>)
 8001ddc:	789b      	ldrb	r3, [r3, #2]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4944      	ldr	r1, [pc, #272]	; (8001ef4 <main+0x358>)
 8001de2:	483c      	ldr	r0, [pc, #240]	; (8001ed4 <main+0x338>)
 8001de4:	f004 fb72 	bl	80064cc <siprintf>
		  LCD_Position(1,0);
 8001de8:	2100      	movs	r1, #0
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7fe ffd0 	bl	8000d90 <LCD_Position>
		  LCD_PrintString(msg);
 8001df0:	4838      	ldr	r0, [pc, #224]	; (8001ed4 <main+0x338>)
 8001df2:	f7ff f809 	bl	8000e08 <LCD_PrintString>
	  }
	  if (std == 2)
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <main+0x304>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	f47f af0c 	bne.w	8001c18 <main+0x7c>
	  {
		  //Nivel de humedad

		  LCD_Position(0,0);
 8001e00:	2100      	movs	r1, #0
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7fe ffc4 	bl	8000d90 <LCD_Position>
		  LCD_PrintString("HUMEDAD         ");
 8001e08:	483b      	ldr	r0, [pc, #236]	; (8001ef8 <main+0x35c>)
 8001e0a:	f7fe fffd 	bl	8000e08 <LCD_PrintString>

		  DHT22_init();
 8001e0e:	f7fe fee3 	bl	8000bd8 <DHT22_init>
		  DHT22_Check_Response();
 8001e12:	f7fe ff01 	bl	8000c18 <DHT22_Check_Response>
		  sensores.humedad[0] = DHT22_Read(); //BYTE 0
 8001e16:	f7fe ff31 	bl	8000c7c <DHT22_Read>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <main+0x350>)
 8001e20:	701a      	strb	r2, [r3, #0]
		  sensores.humedad[1] = DHT22_Read (); //BYTE 1
 8001e22:	f7fe ff2b 	bl	8000c7c <DHT22_Read>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <main+0x350>)
 8001e2c:	705a      	strb	r2, [r3, #1]
		  HAL_Delay(2000); // Depeende del dampling permitido
 8001e2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e32:	f000 ff65 	bl	8002d00 <HAL_Delay>

		  sprintf(msg,"%0.2f       ",(float)(((sensores.humedad[0]<<8)|sensores.humedad[1])/10.0));
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <main+0x350>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <main+0x350>)
 8001e3e:	7852      	ldrb	r2, [r2, #1]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fade 	bl	8000404 <__aeabi_i2d>
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <main+0x360>)
 8001e4e:	f7fe fc6d 	bl	800072c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fe15 	bl	8000a88 <__aeabi_d2f>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fae1 	bl	8000428 <__aeabi_f2d>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4925      	ldr	r1, [pc, #148]	; (8001f00 <main+0x364>)
 8001e6c:	4819      	ldr	r0, [pc, #100]	; (8001ed4 <main+0x338>)
 8001e6e:	f004 fb2d 	bl	80064cc <siprintf>
		  LCD_Position(1,0);
 8001e72:	2100      	movs	r1, #0
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7fe ff8b 	bl	8000d90 <LCD_Position>
		  LCD_PrintString(msg);
 8001e7a:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <main+0x338>)
 8001e7c:	f7fe ffc4 	bl	8000e08 <LCD_PrintString>
	  std = TIM1->CNT/4;
 8001e80:	e6ca      	b.n	8001c18 <main+0x7c>
 8001e82:	bf00      	nop
 8001e84:	20000260 	.word	0x20000260
 8001e88:	200002a8 	.word	0x200002a8
 8001e8c:	20000230 	.word	0x20000230
 8001e90:	08009590 	.word	0x08009590
 8001e94:	080095a0 	.word	0x080095a0
 8001e98:	080095b4 	.word	0x080095b4
 8001e9c:	40012c00 	.word	0x40012c00
 8001ea0:	20000628 	.word	0x20000628
 8001ea4:	080095c0 	.word	0x080095c0
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	200006a0 	.word	0x200006a0
 8001eb0:	080095c4 	.word	0x080095c4
 8001eb4:	20000704 	.word	0x20000704
 8001eb8:	20000748 	.word	0x20000748
 8001ebc:	080095c8 	.word	0x080095c8
 8001ec0:	2000063c 	.word	0x2000063c
 8001ec4:	20000730 	.word	0x20000730
 8001ec8:	2000074c 	.word	0x2000074c
 8001ecc:	40011000 	.word	0x40011000
 8001ed0:	080095cc 	.word	0x080095cc
 8001ed4:	2000062c 	.word	0x2000062c
 8001ed8:	080095e0 	.word	0x080095e0
 8001edc:	080095f4 	.word	0x080095f4
 8001ee0:	08009608 	.word	0x08009608
 8001ee4:	0800961c 	.word	0x0800961c
 8001ee8:	08009630 	.word	0x08009630
 8001eec:	2000022c 	.word	0x2000022c
 8001ef0:	08009644 	.word	0x08009644
 8001ef4:	08009658 	.word	0x08009658
 8001ef8:	08009668 	.word	0x08009668
 8001efc:	40240000 	.word	0x40240000
 8001f00:	0800967c 	.word	0x0800967c

08001f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b094      	sub	sp, #80	; 0x50
 8001f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0e:	2228      	movs	r2, #40	; 0x28
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f004 fb3d 	bl	8006592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f42:	2301      	movs	r3, #1
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f46:	2302      	movs	r3, #2
 8001f48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f50:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 fea6 	bl	8003cac <HAL_RCC_OscConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f66:	f000 f9dd 	bl	8002324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6a:	230f      	movs	r3, #15
 8001f6c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2102      	movs	r1, #2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 f912 	bl	80041b0 <HAL_RCC_ClockConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f92:	f000 f9c7 	bl	8002324 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001f96:	2312      	movs	r3, #18
 8001f98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f9e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 fa90 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001fb2:	f000 f9b7 	bl	8002324 <Error_Handler>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3750      	adds	r7, #80	; 0x50
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <MX_ADC1_Init+0x74>)
 8001fd2:	4a19      	ldr	r2, [pc, #100]	; (8002038 <MX_ADC1_Init+0x78>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_ADC1_Init+0x74>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <MX_ADC1_Init+0x74>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_ADC1_Init+0x74>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_ADC1_Init+0x74>)
 8001fea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001fee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <MX_ADC1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_ADC1_Init+0x74>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ffc:	480d      	ldr	r0, [pc, #52]	; (8002034 <MX_ADC1_Init+0x74>)
 8001ffe:	f000 fea3 	bl	8002d48 <HAL_ADC_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002008:	f000 f98c 	bl	8002324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800200c:	2300      	movs	r3, #0
 800200e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002010:	2301      	movs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_ADC1_Init+0x74>)
 800201e:	f001 f825 	bl	800306c <HAL_ADC_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002028:	f000 f97c 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000230 	.word	0x20000230
 8002038:	40012400 	.word	0x40012400

0800203c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f004 faa1 	bl	8006592 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <MX_TIM1_Init+0xa4>)
 800205a:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <MX_TIM1_Init+0xa8>)
 800205c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <MX_TIM1_Init+0xa4>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <MX_TIM1_Init+0xa4>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <MX_TIM1_Init+0xa4>)
 800206c:	220a      	movs	r2, #10
 800206e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <MX_TIM1_Init+0xa4>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <MX_TIM1_Init+0xa4>)
 8002078:	2200      	movs	r2, #0
 800207a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_TIM1_Init+0xa4>)
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002082:	2303      	movs	r3, #3
 8002084:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800208a:	2301      	movs	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002092:	230a      	movs	r3, #10
 8002094:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800209a:	2301      	movs	r3, #1
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80020a2:	230a      	movs	r3, #10
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <MX_TIM1_Init+0xa4>)
 80020ae:	f002 fb5d 	bl	800476c <HAL_TIM_Encoder_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80020b8:	f000 f934 	bl	8002324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_TIM1_Init+0xa4>)
 80020ca:	f002 fe63 	bl	8004d94 <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80020d4:	f000 f926 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	3730      	adds	r7, #48	; 0x30
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000260 	.word	0x20000260
 80020e4:	40012c00 	.word	0x40012c00

080020e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_TIM2_Init+0x94>)
 8002106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800210a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <MX_TIM2_Init+0x94>)
 800210e:	2247      	movs	r2, #71	; 0x47
 8002110:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_TIM2_Init+0x94>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <MX_TIM2_Init+0x94>)
 800211a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800211e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_TIM2_Init+0x94>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_TIM2_Init+0x94>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800212c:	4813      	ldr	r0, [pc, #76]	; (800217c <MX_TIM2_Init+0x94>)
 800212e:	f002 fa83 	bl	8004638 <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002138:	f000 f8f4 	bl	8002324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	4619      	mov	r1, r3
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <MX_TIM2_Init+0x94>)
 800214a:	f002 fc3f 	bl	80049cc <HAL_TIM_ConfigClockSource>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002154:	f000 f8e6 	bl	8002324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002160:	463b      	mov	r3, r7
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_TIM2_Init+0x94>)
 8002166:	f002 fe15 	bl	8004d94 <HAL_TIMEx_MasterConfigSynchronization>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002170:	f000 f8d8 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200002a8 	.word	0x200002a8

08002180 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <MX_USART1_UART_Init+0x4c>)
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <MX_USART1_UART_Init+0x50>)
 8002188:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <MX_USART1_UART_Init+0x4c>)
 800218c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002190:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <MX_USART1_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <MX_USART1_UART_Init+0x4c>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <MX_USART1_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <MX_USART1_UART_Init+0x4c>)
 80021a6:	220c      	movs	r2, #12
 80021a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <MX_USART1_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_USART1_UART_Init+0x4c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_USART1_UART_Init+0x4c>)
 80021b8:	f002 fe4a 	bl	8004e50 <HAL_UART_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021c2:	f000 f8af 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200002f0 	.word	0x200002f0
 80021d0:	40013800 	.word	0x40013800

080021d4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80021d8:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <MX_USB_PCD_Init+0x3c>)
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <MX_USB_PCD_Init+0x40>)
 80021dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_USB_PCD_Init+0x3c>)
 80021e0:	2208      	movs	r2, #8
 80021e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <MX_USB_PCD_Init+0x3c>)
 80021e6:	2202      	movs	r2, #2
 80021e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_USB_PCD_Init+0x3c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <MX_USB_PCD_Init+0x3c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_USB_PCD_Init+0x3c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <MX_USB_PCD_Init+0x3c>)
 80021fe:	f001 fc55 	bl	8003aac <HAL_PCD_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002208:	f000 f88c 	bl	8002324 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000338 	.word	0x20000338
 8002214:	40005c00 	.word	0x40005c00

08002218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <MX_GPIO_Init+0xfc>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a38      	ldr	r2, [pc, #224]	; (8002314 <MX_GPIO_Init+0xfc>)
 8002232:	f043 0310 	orr.w	r3, r3, #16
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <MX_GPIO_Init+0xfc>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002244:	4b33      	ldr	r3, [pc, #204]	; (8002314 <MX_GPIO_Init+0xfc>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a32      	ldr	r2, [pc, #200]	; (8002314 <MX_GPIO_Init+0xfc>)
 800224a:	f043 0320 	orr.w	r3, r3, #32
 800224e:	6193      	str	r3, [r2, #24]
 8002250:	4b30      	ldr	r3, [pc, #192]	; (8002314 <MX_GPIO_Init+0xfc>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <MX_GPIO_Init+0xfc>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a2c      	ldr	r2, [pc, #176]	; (8002314 <MX_GPIO_Init+0xfc>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <MX_GPIO_Init+0xfc>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <MX_GPIO_Init+0xfc>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <MX_GPIO_Init+0xfc>)
 800227a:	f043 0308 	orr.w	r3, r3, #8
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <MX_GPIO_Init+0xfc>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800228c:	2200      	movs	r2, #0
 800228e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002292:	4821      	ldr	r0, [pc, #132]	; (8002318 <MX_GPIO_Init+0x100>)
 8002294:	f001 fbd9 	bl	8003a4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_SET);
 8002298:	2201      	movs	r2, #1
 800229a:	2102      	movs	r1, #2
 800229c:	481f      	ldr	r0, [pc, #124]	; (800231c <MX_GPIO_Init+0x104>)
 800229e:	f001 fbd4 	bl	8003a4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80022a2:	2200      	movs	r2, #0
 80022a4:	21f8      	movs	r1, #248	; 0xf8
 80022a6:	481d      	ldr	r0, [pc, #116]	; (800231c <MX_GPIO_Init+0x104>)
 80022a8:	f001 fbcf 	bl	8003a4a <HAL_GPIO_WritePin>
                          |RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2101      	movs	r1, #1
 80022b0:	481b      	ldr	r0, [pc, #108]	; (8002320 <MX_GPIO_Init+0x108>)
 80022b2:	f001 fbca 	bl	8003a4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80022b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022bc:	2301      	movs	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2302      	movs	r3, #2
 80022c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	4619      	mov	r1, r3
 80022ce:	4812      	ldr	r0, [pc, #72]	; (8002318 <MX_GPIO_Init+0x100>)
 80022d0:	f001 fa20 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_DATA_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin RS_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin|D4_Pin|D5_Pin|D6_Pin
 80022d4:	23fa      	movs	r3, #250	; 0xfa
 80022d6:	613b      	str	r3, [r7, #16]
                          |D7_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	4619      	mov	r1, r3
 80022ea:	480c      	ldr	r0, [pc, #48]	; (800231c <MX_GPIO_Init+0x104>)
 80022ec:	f001 fa12 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 80022f0:	2301      	movs	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2302      	movs	r3, #2
 80022fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <MX_GPIO_Init+0x108>)
 8002308:	f001 fa04 	bl	8003714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800230c:	bf00      	nop
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40011000 	.word	0x40011000
 800231c:	40010800 	.word	0x40010800
 8002320:	40010c00 	.word	0x40010c00

08002324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002328:	b672      	cpsid	i
}
 800232a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800232c:	e7fe      	b.n	800232c <Error_Handler+0x8>
	...

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_MspInit+0x5c>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	4a14      	ldr	r2, [pc, #80]	; (800238c <HAL_MspInit+0x5c>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6193      	str	r3, [r2, #24]
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_MspInit+0x5c>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_MspInit+0x5c>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	4a0e      	ldr	r2, [pc, #56]	; (800238c <HAL_MspInit+0x5c>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	61d3      	str	r3, [r2, #28]
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_MspInit+0x5c>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_MspInit+0x60>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_MspInit+0x60>)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	40021000 	.word	0x40021000
 8002390:	40010000 	.word	0x40010000

08002394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <HAL_ADC_MspInit+0x6c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d121      	bne.n	80023f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_ADC_MspInit+0x70>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4a12      	ldr	r2, [pc, #72]	; (8002404 <HAL_ADC_MspInit+0x70>)
 80023ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_ADC_MspInit+0x70>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_ADC_MspInit+0x70>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <HAL_ADC_MspInit+0x70>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_ADC_MspInit+0x70>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e8:	2303      	movs	r3, #3
 80023ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	4619      	mov	r1, r3
 80023f2:	4805      	ldr	r0, [pc, #20]	; (8002408 <HAL_ADC_MspInit+0x74>)
 80023f4:	f001 f98e 	bl	8003714 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023f8:	bf00      	nop
 80023fa:	3720      	adds	r7, #32
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40012400 	.word	0x40012400
 8002404:	40021000 	.word	0x40021000
 8002408:	40010800 	.word	0x40010800

0800240c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a16      	ldr	r2, [pc, #88]	; (8002480 <HAL_TIM_Encoder_MspInit+0x74>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d124      	bne.n	8002476 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_TIM_Encoder_MspInit+0x78>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_TIM_Encoder_MspInit+0x78>)
 8002432:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_TIM_Encoder_MspInit+0x78>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_TIM_Encoder_MspInit+0x78>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <HAL_TIM_Encoder_MspInit+0x78>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_TIM_Encoder_MspInit+0x78>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800245c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002472:	f001 f94f 	bl	8003714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002476:	bf00      	nop
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40010800 	.word	0x40010800

0800248c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249c:	d10b      	bne.n	80024b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_TIM_Base_MspInit+0x34>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <HAL_TIM_Base_MspInit+0x34>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	61d3      	str	r3, [r2, #28]
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_TIM_Base_MspInit+0x34>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	40021000 	.word	0x40021000

080024c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a26      	ldr	r2, [pc, #152]	; (8002578 <HAL_UART_MspInit+0xb4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d145      	bne.n	8002570 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_UART_MspInit+0xb8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_UART_MspInit+0xb8>)
 80024ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ee:	6193      	str	r3, [r2, #24]
 80024f0:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_UART_MspInit+0xb8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_UART_MspInit+0xb8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <HAL_UART_MspInit+0xb8>)
 8002502:	f043 0308 	orr.w	r3, r3, #8
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_UART_MspInit+0xb8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002514:	2340      	movs	r3, #64	; 0x40
 8002516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	4816      	ldr	r0, [pc, #88]	; (8002580 <HAL_UART_MspInit+0xbc>)
 8002528:	f001 f8f4 	bl	8003714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4810      	ldr	r0, [pc, #64]	; (8002580 <HAL_UART_MspInit+0xbc>)
 8002540:	f001 f8e8 	bl	8003714 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_UART_MspInit+0xc0>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_UART_MspInit+0xc0>)
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	2025      	movs	r0, #37	; 0x25
 8002566:	f000 ffec 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800256a:	2025      	movs	r0, #37	; 0x25
 800256c:	f001 f805 	bl	800357a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002570:	bf00      	nop
 8002572:	3728      	adds	r7, #40	; 0x28
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40013800 	.word	0x40013800
 800257c:	40021000 	.word	0x40021000
 8002580:	40010c00 	.word	0x40010c00
 8002584:	40010000 	.word	0x40010000

08002588 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a09      	ldr	r2, [pc, #36]	; (80025bc <HAL_PCD_MspInit+0x34>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10b      	bne.n	80025b2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_PCD_MspInit+0x38>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <HAL_PCD_MspInit+0x38>)
 80025a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025a4:	61d3      	str	r3, [r2, #28]
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_PCD_MspInit+0x38>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40005c00 	.word	0x40005c00
 80025c0:	40021000 	.word	0x40021000

080025c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c8:	e7fe      	b.n	80025c8 <NMI_Handler+0x4>

080025ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ce:	e7fe      	b.n	80025ce <HardFault_Handler+0x4>

080025d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <MemManage_Handler+0x4>

080025d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025da:	e7fe      	b.n	80025da <BusFault_Handler+0x4>

080025dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <UsageFault_Handler+0x4>

080025e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  if(timeout >0)  timeout--;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <SysTick_Handler+0x20>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <SysTick_Handler+0x18>
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <SysTick_Handler+0x20>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	4b02      	ldr	r3, [pc, #8]	; (8002628 <SysTick_Handler+0x20>)
 800261e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002620:	f000 fb52 	bl	8002cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000754 	.word	0x20000754

0800262c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr(&huart1);
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <USART1_IRQHandler+0x14>)
 8002632:	f000 fa7f 	bl	8002b34 <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002636:	4802      	ldr	r0, [pc, #8]	; (8002640 <USART1_IRQHandler+0x14>)
 8002638:	f002 fc5a 	bl	8004ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200002f0 	.word	0x200002f0

08002644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return 1;
 8002648:	2301      	movs	r3, #1
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <_kill>:

int _kill(int pid, int sig)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800265c:	f003 ffec 	bl	8006638 <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	2216      	movs	r2, #22
 8002664:	601a      	str	r2, [r3, #0]
  return -1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_exit>:

void _exit (int status)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800267a:	f04f 31ff 	mov.w	r1, #4294967295
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffe7 	bl	8002652 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002684:	e7fe      	b.n	8002684 <_exit+0x12>

08002686 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e00a      	b.n	80026ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002698:	f3af 8000 	nop.w
 800269c:	4601      	mov	r1, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	60ba      	str	r2, [r7, #8]
 80026a4:	b2ca      	uxtb	r2, r1
 80026a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbf0      	blt.n	8002698 <_read+0x12>
  }

  return len;
 80026b6:	687b      	ldr	r3, [r7, #4]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e009      	b.n	80026e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	60ba      	str	r2, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3301      	adds	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	dbf1      	blt.n	80026d2 <_write+0x12>
  }
  return len;
 80026ee:	687b      	ldr	r3, [r7, #4]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_close>:

int _close(int file)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800271e:	605a      	str	r2, [r3, #4]
  return 0;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <_isatty>:

int _isatty(int file)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002734:	2301      	movs	r3, #1
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <_sbrk+0x5c>)
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <_sbrk+0x60>)
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <_sbrk+0x64>)
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <_sbrk+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002788:	f003 ff56 	bl	8006638 <__errno>
 800278c:	4603      	mov	r3, r0
 800278e:	220c      	movs	r2, #12
 8002790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e009      	b.n	80027ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <_sbrk+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20005000 	.word	0x20005000
 80027b8:	00000400 	.word	0x00000400
 80027bc:	20000750 	.word	0x20000750
 80027c0:	20000cc0 	.word	0x20000cc0

080027c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <Ringbuf_init+0x38>)
 80027d6:	4a0d      	ldr	r2, [pc, #52]	; (800280c <Ringbuf_init+0x3c>)
 80027d8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <Ringbuf_init+0x40>)
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <Ringbuf_init+0x44>)
 80027de:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80027e0:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <Ringbuf_init+0x48>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <Ringbuf_init+0x48>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <Ringbuf_init+0x48>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <Ringbuf_init+0x48>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	60da      	str	r2, [r3, #12]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000b68 	.word	0x20000b68
 800280c:	20000758 	.word	0x20000758
 8002810:	20000b6c 	.word	0x20000b6c
 8002814:	20000960 	.word	0x20000960
 8002818:	200002f0 	.word	0x200002f0

0800281c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002834:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	429a      	cmp	r2, r3
 8002840:	d009      	beq.n	8002856 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	79f9      	ldrb	r1, [r7, #7]
 800284c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <Uart_read+0x54>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <Uart_read+0x54>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002876:	429a      	cmp	r2, r3
 8002878:	d102      	bne.n	8002880 <Uart_read+0x20>
  {
    return -1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e013      	b.n	80028a8 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <Uart_read+0x54>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <Uart_read+0x54>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800288c:	5cd3      	ldrb	r3, [r2, r3]
 800288e:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <Uart_read+0x54>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <Uart_read+0x54>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 80028a6:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000b68 	.word	0x20000b68

080028b8 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <IsDataAvailable+0x30>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <IsDataAvailable+0x30>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000b68 	.word	0x20000b68

080028ec <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <Uart_peek+0x34>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <Uart_peek+0x34>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002900:	429a      	cmp	r2, r3
 8002902:	d102      	bne.n	800290a <Uart_peek+0x1e>
  {
    return -1;
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	e006      	b.n	8002918 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <Uart_peek+0x34>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <Uart_peek+0x34>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002916:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	20000b68 	.word	0x20000b68

08002924 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fd fc0c 	bl	8000150 <strlen>
 8002938:	4603      	mov	r3, r0
 800293a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002940:	e01e      	b.n	8002980 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <Copy_upto+0xf8>)
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <Copy_upto+0xf8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	6838      	ldr	r0, [r7, #0]
 8002952:	4403      	add	r3, r0
 8002954:	5c8a      	ldrb	r2, [r1, r2]
 8002956:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002958:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <Copy_upto+0xf8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <Copy_upto+0xf8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800296a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	3301      	adds	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002974:	bf00      	nop
 8002976:	f7ff ff9f 	bl	80028b8 <IsDataAvailable>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0fa      	beq.n	8002976 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002980:	f7ff ffb4 	bl	80028ec <Uart_peek>
 8002984:	4601      	mov	r1, r0
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4299      	cmp	r1, r3
 8002990:	d1d7      	bne.n	8002942 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002992:	e027      	b.n	80029e4 <Copy_upto+0xc0>
	{
		so_far++;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3301      	adds	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800299a:	f7ff ff61 	bl	8002860 <Uart_read>
 800299e:	4601      	mov	r1, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	613a      	str	r2, [r7, #16]
 80029a6:	461a      	mov	r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	b2ca      	uxtb	r2, r1
 80029ae:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d101      	bne.n	80029bc <Copy_upto+0x98>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e02a      	b.n	8002a12 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <Copy_upto+0xfc>)
 80029be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029c2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80029c4:	bf00      	nop
 80029c6:	f7ff ff77 	bl	80028b8 <IsDataAvailable>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <Copy_upto+0xb4>
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <Copy_upto+0xfc>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f6      	bne.n	80029c6 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <Copy_upto+0xfc>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <Copy_upto+0xc0>
 80029e0:	2300      	movs	r3, #0
 80029e2:	e016      	b.n	8002a12 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80029e4:	f7ff ff82 	bl	80028ec <Uart_peek>
 80029e8:	4601      	mov	r1, r0
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4299      	cmp	r1, r3
 80029f4:	d0ce      	beq.n	8002994 <Copy_upto+0x70>
	}

	if (so_far != len)
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d002      	beq.n	8002a04 <Copy_upto+0xe0>
	{
		so_far = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
		goto again;
 8002a02:	e79d      	b.n	8002940 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d101      	bne.n	8002a10 <Copy_upto+0xec>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <Copy_upto+0xee>
	else return 0;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000b68 	.word	0x20000b68
 8002a20:	20000754 	.word	0x20000754

08002a24 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fd fb8d 	bl	8000150 <strlen>
 8002a36:	4603      	mov	r3, r0
 8002a38:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002a3a:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <Wait_for+0x108>)
 8002a3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a40:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002a42:	bf00      	nop
 8002a44:	f7ff ff38 	bl	80028b8 <IsDataAvailable>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <Wait_for+0x32>
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <Wait_for+0x108>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f6      	bne.n	8002a44 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002a56:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <Wait_for+0x108>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d119      	bne.n	8002a92 <Wait_for+0x6e>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e060      	b.n	8002b24 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002a62:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <Wait_for+0x10c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a6a:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <Wait_for+0x10c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d00b      	beq.n	8002a8e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002a76:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <Wait_for+0x10c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <Wait_for+0x10c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a8c:	e001      	b.n	8002a92 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e048      	b.n	8002b24 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002a92:	f7ff ff2b 	bl	80028ec <Uart_peek>
 8002a96:	4601      	mov	r1, r0
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4299      	cmp	r1, r3
 8002aa2:	d1de      	bne.n	8002a62 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002aa4:	e027      	b.n	8002af6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002aac:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <Wait_for+0x10c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <Wait_for+0x10c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002abe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d101      	bne.n	8002ace <Wait_for+0xaa>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e02a      	b.n	8002b24 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <Wait_for+0x108>)
 8002ad0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ad4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002ad6:	bf00      	nop
 8002ad8:	f7ff feee 	bl	80028b8 <IsDataAvailable>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <Wait_for+0xc6>
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <Wait_for+0x108>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f6      	bne.n	8002ad8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <Wait_for+0x108>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <Wait_for+0xd2>
 8002af2:	2300      	movs	r3, #0
 8002af4:	e016      	b.n	8002b24 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002af6:	f7ff fef9 	bl	80028ec <Uart_peek>
 8002afa:	4601      	mov	r1, r0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4299      	cmp	r1, r3
 8002b06:	d0ce      	beq.n	8002aa6 <Wait_for+0x82>
	}

	if (so_far != len)
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d002      	beq.n	8002b16 <Wait_for+0xf2>
	{
		so_far = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
		goto again;
 8002b14:	e791      	b.n	8002a3a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d101      	bne.n	8002b22 <Wait_for+0xfe>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <Wait_for+0x100>
	else return 0;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000754 	.word	0x20000754
 8002b30:	20000b68 	.word	0x20000b68

08002b34 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d013      	beq.n	8002b7e <Uart_isr+0x4a>
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00e      	beq.n	8002b7e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <Uart_isr+0xb4>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fe50 	bl	800281c <store_char>
        return;
 8002b7c:	e031      	b.n	8002be2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d02c      	beq.n	8002be2 <Uart_isr+0xae>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d027      	beq.n	8002be2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <Uart_isr+0xb8>)
 8002b94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <Uart_isr+0xb8>)
 8002b9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d108      	bne.n	8002bb4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002bb2:	e015      	b.n	8002be0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <Uart_isr+0xb8>)
 8002bb6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <Uart_isr+0xb8>)
 8002bbc:	5cd3      	ldrb	r3, [r2, r3]
 8002bbe:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <Uart_isr+0xb8>)
 8002bc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bcc:	4a07      	ldr	r2, [pc, #28]	; (8002bec <Uart_isr+0xb8>)
 8002bce:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	7bba      	ldrb	r2, [r7, #14]
 8002bde:	605a      	str	r2, [r3, #4]
    	return;
 8002be0:	bf00      	nop
    }
}
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000b68 	.word	0x20000b68
 8002bec:	20000960 	.word	0x20000960

08002bf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bf0:	f7ff fde8 	bl	80027c4 <SystemInit>


/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf4:	480b      	ldr	r0, [pc, #44]	; (8002c24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bf6:	490c      	ldr	r1, [pc, #48]	; (8002c28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bfc:	e002      	b.n	8002c04 <LoopCopyDataInit>

08002bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c02:	3304      	adds	r3, #4

08002c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c08:	d3f9      	bcc.n	8002bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c0a:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c0c:	4c09      	ldr	r4, [pc, #36]	; (8002c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c10:	e001      	b.n	8002c16 <LoopFillZerobss>

08002c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c14:	3204      	adds	r2, #4

08002c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c18:	d3fb      	bcc.n	8002c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c1a:	f003 fd13 	bl	8006644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c1e:	f7fe ffbd 	bl	8001b9c <main>
  bx lr
 8002c22:	4770      	bx	lr
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002c2c:	08009a68 	.word	0x08009a68
  ldr r2, =_sbss
 8002c30:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c34:	20000cc0 	.word	0x20000cc0

08002c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC1_2_IRQHandler>
	...

08002c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_Init+0x28>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <HAL_Init+0x28>)
 8002c46:	f043 0310 	orr.w	r3, r3, #16
 8002c4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 fc6d 	bl	800352c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c52:	200f      	movs	r0, #15
 8002c54:	f000 f808 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c58:	f7ff fb6a 	bl	8002330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000

08002c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x54>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_InitTick+0x58>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fc85 	bl	8003596 <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00e      	b.n	8002cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d80a      	bhi.n	8002cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f000 fc4d 	bl	8003542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_InitTick+0x5c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000008 	.word	0x20000008
 8002cc0:	20000010 	.word	0x20000010
 8002cc4:	2000000c 	.word	0x2000000c

08002cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_IncTick+0x1c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a03      	ldr	r2, [pc, #12]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	20000010 	.word	0x20000010
 8002ce8:	20000b70 	.word	0x20000b70

08002cec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <HAL_GetTick+0x10>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20000b70 	.word	0x20000b70

08002d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff fff0 	bl	8002cec <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d005      	beq.n	8002d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_Delay+0x44>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d26:	bf00      	nop
 8002d28:	f7ff ffe0 	bl	8002cec <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d8f7      	bhi.n	8002d28 <HAL_Delay+0x28>
  {
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000010 	.word	0x20000010

08002d48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0be      	b.n	8002ee8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fb04 	bl	8002394 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fabf 	bl	8003310 <ADC_ConversionStop_Disable>
 8002d92:	4603      	mov	r3, r0
 8002d94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8099 	bne.w	8002ed6 <HAL_ADC_Init+0x18e>
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 8095 	bne.w	8002ed6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db4:	f023 0302 	bic.w	r3, r3, #2
 8002db8:	f043 0202 	orr.w	r2, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	7b1b      	ldrb	r3, [r3, #12]
 8002dce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de0:	d003      	beq.n	8002dea <HAL_ADC_Init+0xa2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_ADC_Init+0xa8>
 8002dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dee:	e000      	b.n	8002df2 <HAL_ADC_Init+0xaa>
 8002df0:	2300      	movs	r3, #0
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7d1b      	ldrb	r3, [r3, #20]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d119      	bne.n	8002e34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7b1b      	ldrb	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	035a      	lsls	r2, r3, #13
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	e00b      	b.n	8002e34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_ADC_Init+0x1a8>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e64:	d003      	beq.n	8002e6e <HAL_ADC_Init+0x126>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d104      	bne.n	8002e78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	051b      	lsls	r3, r3, #20
 8002e76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_ADC_Init+0x1ac>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	f023 0303 	bic.w	r3, r3, #3
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eb2:	e018      	b.n	8002ee6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	f023 0312 	bic.w	r3, r3, #18
 8002ebc:	f043 0210 	orr.w	r2, r3, #16
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ed4:	e007      	b.n	8002ee6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	ffe1f7fd 	.word	0xffe1f7fd
 8002ef4:	ff1f0efe 	.word	0xff1f0efe

08002ef8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_Start+0x1a>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e098      	b.n	8003044 <HAL_ADC_Start+0x14c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f99e 	bl	800325c <ADC_Enable>
 8002f20:	4603      	mov	r3, r0
 8002f22:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 8087 	bne.w	800303a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a41      	ldr	r2, [pc, #260]	; (800304c <HAL_ADC_Start+0x154>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d105      	bne.n	8002f56 <HAL_ADC_Start+0x5e>
 8002f4a:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_ADC_Start+0x158>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d115      	bne.n	8002f82 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d026      	beq.n	8002fbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f80:	e01d      	b.n	8002fbe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a2f      	ldr	r2, [pc, #188]	; (8003050 <HAL_ADC_Start+0x158>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_ADC_Start+0xaa>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2b      	ldr	r2, [pc, #172]	; (800304c <HAL_ADC_Start+0x154>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10d      	bne.n	8002fbe <HAL_ADC_Start+0xc6>
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_ADC_Start+0x158>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f023 0206 	bic.w	r2, r3, #6
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fd6:	e002      	b.n	8002fde <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f06f 0202 	mvn.w	r2, #2
 8002fee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ffa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ffe:	d113      	bne.n	8003028 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003004:	4a11      	ldr	r2, [pc, #68]	; (800304c <HAL_ADC_Start+0x154>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d105      	bne.n	8003016 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_ADC_Start+0x158>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d108      	bne.n	8003028 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	e00c      	b.n	8003042 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	e003      	b.n	8003042 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40012800 	.word	0x40012800
 8003050:	40012400 	.word	0x40012400

08003054 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x20>
 8003088:	2302      	movs	r3, #2
 800308a:	e0dc      	b.n	8003246 <HAL_ADC_ConfigChannel+0x1da>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b06      	cmp	r3, #6
 800309a:	d81c      	bhi.n	80030d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	3b05      	subs	r3, #5
 80030ae:	221f      	movs	r2, #31
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4019      	ands	r1, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	3b05      	subs	r3, #5
 80030c8:	fa00 f203 	lsl.w	r2, r0, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	635a      	str	r2, [r3, #52]	; 0x34
 80030d4:	e03c      	b.n	8003150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d81c      	bhi.n	8003118 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	3b23      	subs	r3, #35	; 0x23
 80030f0:	221f      	movs	r2, #31
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	4019      	ands	r1, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	3b23      	subs	r3, #35	; 0x23
 800310a:	fa00 f203 	lsl.w	r2, r0, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
 8003116:	e01b      	b.n	8003150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	3b41      	subs	r3, #65	; 0x41
 800312a:	221f      	movs	r2, #31
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	4019      	ands	r1, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	3b41      	subs	r3, #65	; 0x41
 8003144:	fa00 f203 	lsl.w	r2, r0, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b09      	cmp	r3, #9
 8003156:	d91c      	bls.n	8003192 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68d9      	ldr	r1, [r3, #12]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	3b1e      	subs	r3, #30
 800316a:	2207      	movs	r2, #7
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	4019      	ands	r1, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6898      	ldr	r0, [r3, #8]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	3b1e      	subs	r3, #30
 8003184:	fa00 f203 	lsl.w	r2, r0, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	e019      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6919      	ldr	r1, [r3, #16]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	2207      	movs	r2, #7
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	4019      	ands	r1, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6898      	ldr	r0, [r3, #8]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	fa00 f203 	lsl.w	r2, r0, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d003      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031d2:	2b11      	cmp	r3, #17
 80031d4:	d132      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_ADC_ConfigChannel+0x1e4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d125      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d126      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b10      	cmp	r3, #16
 8003204:	d11a      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_ADC_ConfigChannel+0x1e8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a13      	ldr	r2, [pc, #76]	; (8003258 <HAL_ADC_ConfigChannel+0x1ec>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	0c9a      	lsrs	r2, r3, #18
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800321c:	e002      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3b01      	subs	r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f9      	bne.n	800321e <HAL_ADC_ConfigChannel+0x1b2>
 800322a:	e007      	b.n	800323c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	40012400 	.word	0x40012400
 8003254:	20000008 	.word	0x20000008
 8003258:	431bde83 	.word	0x431bde83

0800325c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d040      	beq.n	80032fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800328a:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <ADC_Enable+0xac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <ADC_Enable+0xb0>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	0c9b      	lsrs	r3, r3, #18
 8003296:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003298:	e002      	b.n	80032a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3b01      	subs	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f9      	bne.n	800329a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032a6:	f7ff fd21 	bl	8002cec <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032ac:	e01f      	b.n	80032ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ae:	f7ff fd1d 	bl	8002cec <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d918      	bls.n	80032ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d011      	beq.n	80032ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	f043 0210 	orr.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e007      	b.n	80032fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d1d8      	bne.n	80032ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000008 	.word	0x20000008
 800330c:	431bde83 	.word	0x431bde83

08003310 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d12e      	bne.n	8003388 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800333a:	f7ff fcd7 	bl	8002cec <HAL_GetTick>
 800333e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003340:	e01b      	b.n	800337a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003342:	f7ff fcd3 	bl	8002cec <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d914      	bls.n	800337a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d10d      	bne.n	800337a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	f043 0210 	orr.w	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	f043 0201 	orr.w	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e007      	b.n	800338a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d0dc      	beq.n	8003342 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60d3      	str	r3, [r2, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4906      	ldr	r1, [pc, #24]	; (800342c <__NVIC_EnableIRQ+0x34>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100

08003430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	2b00      	cmp	r3, #0
 8003442:	db0a      	blt.n	800345a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	490c      	ldr	r1, [pc, #48]	; (800347c <__NVIC_SetPriority+0x4c>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	0112      	lsls	r2, r2, #4
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	440b      	add	r3, r1
 8003454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003458:	e00a      	b.n	8003470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4908      	ldr	r1, [pc, #32]	; (8003480 <__NVIC_SetPriority+0x50>)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3b04      	subs	r3, #4
 8003468:	0112      	lsls	r2, r2, #4
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	440b      	add	r3, r1
 800346e:	761a      	strb	r2, [r3, #24]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f1c3 0307 	rsb	r3, r3, #7
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf28      	it	cs
 80034a2:	2304      	movcs	r3, #4
 80034a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d902      	bls.n	80034b4 <NVIC_EncodePriority+0x30>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3b03      	subs	r3, #3
 80034b2:	e000      	b.n	80034b6 <NVIC_EncodePriority+0x32>
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	401a      	ands	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034cc:	f04f 31ff 	mov.w	r1, #4294967295
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	43d9      	mvns	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	4313      	orrs	r3, r2
         );
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f8:	d301      	bcc.n	80034fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <SysTick_Config+0x40>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003506:	210f      	movs	r1, #15
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	f7ff ff90 	bl	8003430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SysTick_Config+0x40>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <SysTick_Config+0x40>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff2d 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003554:	f7ff ff42 	bl	80033dc <__NVIC_GetPriorityGrouping>
 8003558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7ff ff90 	bl	8003484 <NVIC_EncodePriority>
 8003564:	4602      	mov	r2, r0
 8003566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff5f 	bl	8003430 <__NVIC_SetPriority>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff35 	bl	80033f8 <__NVIC_EnableIRQ>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffa2 	bl	80034e8 <SysTick_Config>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d008      	beq.n	80035d8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2204      	movs	r2, #4
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e020      	b.n	800361a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 020e 	bic.w	r2, r2, #14
 80035e6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	2101      	movs	r1, #1
 8003602:	fa01 f202 	lsl.w	r2, r1, r2
 8003606:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d005      	beq.n	8003648 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2204      	movs	r2, #4
 8003640:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
 8003646:	e051      	b.n	80036ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 020e 	bic.w	r2, r2, #14
 8003656:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <HAL_DMA_Abort_IT+0xd4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d029      	beq.n	80036c6 <HAL_DMA_Abort_IT+0xa2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_DMA_Abort_IT+0xd8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_DMA_Abort_IT+0x9e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_DMA_Abort_IT+0xdc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01a      	beq.n	80036bc <HAL_DMA_Abort_IT+0x98>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_DMA_Abort_IT+0xe0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d012      	beq.n	80036b6 <HAL_DMA_Abort_IT+0x92>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_DMA_Abort_IT+0xe4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00a      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x8c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_DMA_Abort_IT+0xe8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d102      	bne.n	80036aa <HAL_DMA_Abort_IT+0x86>
 80036a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036a8:	e00e      	b.n	80036c8 <HAL_DMA_Abort_IT+0xa4>
 80036aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ae:	e00b      	b.n	80036c8 <HAL_DMA_Abort_IT+0xa4>
 80036b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036b4:	e008      	b.n	80036c8 <HAL_DMA_Abort_IT+0xa4>
 80036b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ba:	e005      	b.n	80036c8 <HAL_DMA_Abort_IT+0xa4>
 80036bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c0:	e002      	b.n	80036c8 <HAL_DMA_Abort_IT+0xa4>
 80036c2:	2310      	movs	r3, #16
 80036c4:	e000      	b.n	80036c8 <HAL_DMA_Abort_IT+0xa4>
 80036c6:	2301      	movs	r3, #1
 80036c8:	4a11      	ldr	r2, [pc, #68]	; (8003710 <HAL_DMA_Abort_IT+0xec>)
 80036ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
    } 
  }
  return status;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40020008 	.word	0x40020008
 80036fc:	4002001c 	.word	0x4002001c
 8003700:	40020030 	.word	0x40020030
 8003704:	40020044 	.word	0x40020044
 8003708:	40020058 	.word	0x40020058
 800370c:	4002006c 	.word	0x4002006c
 8003710:	40020000 	.word	0x40020000

08003714 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003714:	b480      	push	{r7}
 8003716:	b08b      	sub	sp, #44	; 0x2c
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800371e:	2300      	movs	r3, #0
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003726:	e169      	b.n	80039fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003728:	2201      	movs	r2, #1
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	429a      	cmp	r2, r3
 8003742:	f040 8158 	bne.w	80039f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a9a      	ldr	r2, [pc, #616]	; (80039b4 <HAL_GPIO_Init+0x2a0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d05e      	beq.n	800380e <HAL_GPIO_Init+0xfa>
 8003750:	4a98      	ldr	r2, [pc, #608]	; (80039b4 <HAL_GPIO_Init+0x2a0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d875      	bhi.n	8003842 <HAL_GPIO_Init+0x12e>
 8003756:	4a98      	ldr	r2, [pc, #608]	; (80039b8 <HAL_GPIO_Init+0x2a4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d058      	beq.n	800380e <HAL_GPIO_Init+0xfa>
 800375c:	4a96      	ldr	r2, [pc, #600]	; (80039b8 <HAL_GPIO_Init+0x2a4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d86f      	bhi.n	8003842 <HAL_GPIO_Init+0x12e>
 8003762:	4a96      	ldr	r2, [pc, #600]	; (80039bc <HAL_GPIO_Init+0x2a8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d052      	beq.n	800380e <HAL_GPIO_Init+0xfa>
 8003768:	4a94      	ldr	r2, [pc, #592]	; (80039bc <HAL_GPIO_Init+0x2a8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d869      	bhi.n	8003842 <HAL_GPIO_Init+0x12e>
 800376e:	4a94      	ldr	r2, [pc, #592]	; (80039c0 <HAL_GPIO_Init+0x2ac>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d04c      	beq.n	800380e <HAL_GPIO_Init+0xfa>
 8003774:	4a92      	ldr	r2, [pc, #584]	; (80039c0 <HAL_GPIO_Init+0x2ac>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d863      	bhi.n	8003842 <HAL_GPIO_Init+0x12e>
 800377a:	4a92      	ldr	r2, [pc, #584]	; (80039c4 <HAL_GPIO_Init+0x2b0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d046      	beq.n	800380e <HAL_GPIO_Init+0xfa>
 8003780:	4a90      	ldr	r2, [pc, #576]	; (80039c4 <HAL_GPIO_Init+0x2b0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d85d      	bhi.n	8003842 <HAL_GPIO_Init+0x12e>
 8003786:	2b12      	cmp	r3, #18
 8003788:	d82a      	bhi.n	80037e0 <HAL_GPIO_Init+0xcc>
 800378a:	2b12      	cmp	r3, #18
 800378c:	d859      	bhi.n	8003842 <HAL_GPIO_Init+0x12e>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <HAL_GPIO_Init+0x80>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	0800380f 	.word	0x0800380f
 8003798:	080037e9 	.word	0x080037e9
 800379c:	080037fb 	.word	0x080037fb
 80037a0:	0800383d 	.word	0x0800383d
 80037a4:	08003843 	.word	0x08003843
 80037a8:	08003843 	.word	0x08003843
 80037ac:	08003843 	.word	0x08003843
 80037b0:	08003843 	.word	0x08003843
 80037b4:	08003843 	.word	0x08003843
 80037b8:	08003843 	.word	0x08003843
 80037bc:	08003843 	.word	0x08003843
 80037c0:	08003843 	.word	0x08003843
 80037c4:	08003843 	.word	0x08003843
 80037c8:	08003843 	.word	0x08003843
 80037cc:	08003843 	.word	0x08003843
 80037d0:	08003843 	.word	0x08003843
 80037d4:	08003843 	.word	0x08003843
 80037d8:	080037f1 	.word	0x080037f1
 80037dc:	08003805 	.word	0x08003805
 80037e0:	4a79      	ldr	r2, [pc, #484]	; (80039c8 <HAL_GPIO_Init+0x2b4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037e6:	e02c      	b.n	8003842 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	623b      	str	r3, [r7, #32]
          break;
 80037ee:	e029      	b.n	8003844 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	3304      	adds	r3, #4
 80037f6:	623b      	str	r3, [r7, #32]
          break;
 80037f8:	e024      	b.n	8003844 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	3308      	adds	r3, #8
 8003800:	623b      	str	r3, [r7, #32]
          break;
 8003802:	e01f      	b.n	8003844 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	330c      	adds	r3, #12
 800380a:	623b      	str	r3, [r7, #32]
          break;
 800380c:	e01a      	b.n	8003844 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003816:	2304      	movs	r3, #4
 8003818:	623b      	str	r3, [r7, #32]
          break;
 800381a:	e013      	b.n	8003844 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d105      	bne.n	8003830 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003824:	2308      	movs	r3, #8
 8003826:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	611a      	str	r2, [r3, #16]
          break;
 800382e:	e009      	b.n	8003844 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003830:	2308      	movs	r3, #8
 8003832:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	615a      	str	r2, [r3, #20]
          break;
 800383a:	e003      	b.n	8003844 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800383c:	2300      	movs	r3, #0
 800383e:	623b      	str	r3, [r7, #32]
          break;
 8003840:	e000      	b.n	8003844 <HAL_GPIO_Init+0x130>
          break;
 8003842:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2bff      	cmp	r3, #255	; 0xff
 8003848:	d801      	bhi.n	800384e <HAL_GPIO_Init+0x13a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	e001      	b.n	8003852 <HAL_GPIO_Init+0x13e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2bff      	cmp	r3, #255	; 0xff
 8003858:	d802      	bhi.n	8003860 <HAL_GPIO_Init+0x14c>
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	e002      	b.n	8003866 <HAL_GPIO_Init+0x152>
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	3b08      	subs	r3, #8
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	210f      	movs	r1, #15
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	fa01 f303 	lsl.w	r3, r1, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	401a      	ands	r2, r3
 8003878:	6a39      	ldr	r1, [r7, #32]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	431a      	orrs	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80b1 	beq.w	80039f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003894:	4b4d      	ldr	r3, [pc, #308]	; (80039cc <HAL_GPIO_Init+0x2b8>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	4a4c      	ldr	r2, [pc, #304]	; (80039cc <HAL_GPIO_Init+0x2b8>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6193      	str	r3, [r2, #24]
 80038a0:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_GPIO_Init+0x2b8>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038ac:	4a48      	ldr	r2, [pc, #288]	; (80039d0 <HAL_GPIO_Init+0x2bc>)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	089b      	lsrs	r3, r3, #2
 80038b2:	3302      	adds	r3, #2
 80038b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4013      	ands	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a40      	ldr	r2, [pc, #256]	; (80039d4 <HAL_GPIO_Init+0x2c0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_GPIO_Init+0x1ec>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3f      	ldr	r2, [pc, #252]	; (80039d8 <HAL_GPIO_Init+0x2c4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00d      	beq.n	80038fc <HAL_GPIO_Init+0x1e8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a3e      	ldr	r2, [pc, #248]	; (80039dc <HAL_GPIO_Init+0x2c8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <HAL_GPIO_Init+0x1e4>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3d      	ldr	r2, [pc, #244]	; (80039e0 <HAL_GPIO_Init+0x2cc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_GPIO_Init+0x1e0>
 80038f0:	2303      	movs	r3, #3
 80038f2:	e006      	b.n	8003902 <HAL_GPIO_Init+0x1ee>
 80038f4:	2304      	movs	r3, #4
 80038f6:	e004      	b.n	8003902 <HAL_GPIO_Init+0x1ee>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e002      	b.n	8003902 <HAL_GPIO_Init+0x1ee>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <HAL_GPIO_Init+0x1ee>
 8003900:	2300      	movs	r3, #0
 8003902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003904:	f002 0203 	and.w	r2, r2, #3
 8003908:	0092      	lsls	r2, r2, #2
 800390a:	4093      	lsls	r3, r2
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003912:	492f      	ldr	r1, [pc, #188]	; (80039d0 <HAL_GPIO_Init+0x2bc>)
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	3302      	adds	r3, #2
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d006      	beq.n	800393a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	492c      	ldr	r1, [pc, #176]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	608b      	str	r3, [r1, #8]
 8003938:	e006      	b.n	8003948 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	43db      	mvns	r3, r3
 8003942:	4928      	ldr	r1, [pc, #160]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 8003944:	4013      	ands	r3, r2
 8003946:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d006      	beq.n	8003962 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003954:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	4922      	ldr	r1, [pc, #136]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	60cb      	str	r3, [r1, #12]
 8003960:	e006      	b.n	8003970 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	43db      	mvns	r3, r3
 800396a:	491e      	ldr	r1, [pc, #120]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 800396c:	4013      	ands	r3, r2
 800396e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d006      	beq.n	800398a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	4918      	ldr	r1, [pc, #96]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	43db      	mvns	r3, r3
 8003992:	4914      	ldr	r1, [pc, #80]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 8003994:	4013      	ands	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d021      	beq.n	80039e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039a4:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	490e      	ldr	r1, [pc, #56]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
 80039b0:	e021      	b.n	80039f6 <HAL_GPIO_Init+0x2e2>
 80039b2:	bf00      	nop
 80039b4:	10320000 	.word	0x10320000
 80039b8:	10310000 	.word	0x10310000
 80039bc:	10220000 	.word	0x10220000
 80039c0:	10210000 	.word	0x10210000
 80039c4:	10120000 	.word	0x10120000
 80039c8:	10110000 	.word	0x10110000
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40010800 	.word	0x40010800
 80039d8:	40010c00 	.word	0x40010c00
 80039dc:	40011000 	.word	0x40011000
 80039e0:	40011400 	.word	0x40011400
 80039e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_GPIO_Init+0x304>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	4909      	ldr	r1, [pc, #36]	; (8003a18 <HAL_GPIO_Init+0x304>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	3301      	adds	r3, #1
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f47f ae8e 	bne.w	8003728 <HAL_GPIO_Init+0x14>
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	372c      	adds	r7, #44	; 0x2c
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40010400 	.word	0x40010400

08003a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	e001      	b.n	8003a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	807b      	strh	r3, [r7, #2]
 8003a56:	4613      	mov	r3, r2
 8003a58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a5a:	787b      	ldrb	r3, [r7, #1]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a60:	887a      	ldrh	r2, [r7, #2]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a66:	e003      	b.n	8003a70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	041a      	lsls	r2, r3, #16
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	611a      	str	r2, [r3, #16]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a8c:	887a      	ldrh	r2, [r7, #2]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4013      	ands	r3, r2
 8003a92:	041a      	lsls	r2, r3, #16
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	43d9      	mvns	r1, r3
 8003a98:	887b      	ldrh	r3, [r7, #2]
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aae:	b08b      	sub	sp, #44	; 0x2c
 8003ab0:	af06      	add	r7, sp, #24
 8003ab2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0f1      	b.n	8003ca2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fe fd58 	bl	8002588 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2203      	movs	r2, #3
 8003adc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 fef5 	bl	80058d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	687e      	ldr	r6, [r7, #4]
 8003af2:	466d      	mov	r5, sp
 8003af4:	f106 0410 	add.w	r4, r6, #16
 8003af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	1d33      	adds	r3, r6, #4
 8003b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b04:	6838      	ldr	r0, [r7, #0]
 8003b06:	f001 fed5 	bl	80058b4 <USB_CoreInit>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0c2      	b.n	8003ca2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 fef0 	bl	8005908 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
 8003b2c:	e040      	b.n	8003bb0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3301      	adds	r3, #1
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	3303      	adds	r3, #3
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3338      	adds	r3, #56	; 0x38
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	333c      	adds	r3, #60	; 0x3c
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3340      	adds	r3, #64	; 0x40
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	3301      	adds	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3b9      	bcc.n	8003b2e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
 8003bbe:	e044      	b.n	8003c4a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	440b      	add	r3, r1
 8003bce:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	3301      	adds	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d3b5      	bcc.n	8003bc0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	687e      	ldr	r6, [r7, #4]
 8003c5c:	466d      	mov	r5, sp
 8003c5e:	f106 0410 	add.w	r4, r6, #16
 8003c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	602b      	str	r3, [r5, #0]
 8003c6a:	1d33      	adds	r3, r6, #4
 8003c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c6e:	6838      	ldr	r0, [r7, #0]
 8003c70:	f001 fe56 	bl	8005920 <USB_DevInit>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e00d      	b.n	8003ca2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 fe60 	bl	8005960 <USB_DevDisconnect>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e272      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8087 	beq.w	8003dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ccc:	4b92      	ldr	r3, [pc, #584]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d00c      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cd8:	4b8f      	ldr	r3, [pc, #572]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d112      	bne.n	8003d0a <HAL_RCC_OscConfig+0x5e>
 8003ce4:	4b8c      	ldr	r3, [pc, #560]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf0:	d10b      	bne.n	8003d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf2:	4b89      	ldr	r3, [pc, #548]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d06c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x12c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d168      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e24c      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d12:	d106      	bne.n	8003d22 <HAL_RCC_OscConfig+0x76>
 8003d14:	4b80      	ldr	r3, [pc, #512]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a7f      	ldr	r2, [pc, #508]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e02e      	b.n	8003d80 <HAL_RCC_OscConfig+0xd4>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x98>
 8003d2a:	4b7b      	ldr	r3, [pc, #492]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7a      	ldr	r2, [pc, #488]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b78      	ldr	r3, [pc, #480]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a77      	ldr	r2, [pc, #476]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e01d      	b.n	8003d80 <HAL_RCC_OscConfig+0xd4>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCC_OscConfig+0xbc>
 8003d4e:	4b72      	ldr	r3, [pc, #456]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a71      	ldr	r2, [pc, #452]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6e      	ldr	r2, [pc, #440]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e00b      	b.n	8003d80 <HAL_RCC_OscConfig+0xd4>
 8003d68:	4b6b      	ldr	r3, [pc, #428]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a6a      	ldr	r2, [pc, #424]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b68      	ldr	r3, [pc, #416]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a67      	ldr	r2, [pc, #412]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d013      	beq.n	8003db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fe ffb0 	bl	8002cec <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d90:	f7fe ffac 	bl	8002cec <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e200      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b5d      	ldr	r3, [pc, #372]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0xe4>
 8003dae:	e014      	b.n	8003dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fe ff9c 	bl	8002cec <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db8:	f7fe ff98 	bl	8002cec <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e1ec      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dca:	4b53      	ldr	r3, [pc, #332]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x10c>
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d063      	beq.n	8003eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003de6:	4b4c      	ldr	r3, [pc, #304]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003df2:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d11c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x18c>
 8003dfe:	4b46      	ldr	r3, [pc, #280]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d116      	bne.n	8003e38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x176>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e1c0      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e22:	4b3d      	ldr	r3, [pc, #244]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4939      	ldr	r1, [pc, #228]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	e03a      	b.n	8003eae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e40:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <HAL_RCC_OscConfig+0x270>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e46:	f7fe ff51 	bl	8002cec <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4e:	f7fe ff4d 	bl	8002cec <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e1a1      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e60:	4b2d      	ldr	r3, [pc, #180]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4927      	ldr	r1, [pc, #156]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	600b      	str	r3, [r1, #0]
 8003e80:	e015      	b.n	8003eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e82:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <HAL_RCC_OscConfig+0x270>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fe ff30 	bl	8002cec <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e90:	f7fe ff2c 	bl	8002cec <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e180      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d03a      	beq.n	8003f30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d019      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec2:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec8:	f7fe ff10 	bl	8002cec <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fe ff0c 	bl	8002cec <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e160      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f000 face 	bl	8004490 <RCC_Delay>
 8003ef4:	e01c      	b.n	8003f30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_RCC_OscConfig+0x274>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efc:	f7fe fef6 	bl	8002cec <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f02:	e00f      	b.n	8003f24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f04:	f7fe fef2 	bl	8002cec <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d908      	bls.n	8003f24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e146      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	42420000 	.word	0x42420000
 8003f20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f24:	4b92      	ldr	r3, [pc, #584]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e9      	bne.n	8003f04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80a6 	beq.w	800408a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f42:	4b8b      	ldr	r3, [pc, #556]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10d      	bne.n	8003f6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	4b88      	ldr	r3, [pc, #544]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	4a87      	ldr	r2, [pc, #540]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	61d3      	str	r3, [r2, #28]
 8003f5a:	4b85      	ldr	r3, [pc, #532]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	4b82      	ldr	r3, [pc, #520]	; (8004174 <HAL_RCC_OscConfig+0x4c8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d118      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f76:	4b7f      	ldr	r3, [pc, #508]	; (8004174 <HAL_RCC_OscConfig+0x4c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a7e      	ldr	r2, [pc, #504]	; (8004174 <HAL_RCC_OscConfig+0x4c8>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f82:	f7fe feb3 	bl	8002cec <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fe feaf 	bl	8002cec <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b64      	cmp	r3, #100	; 0x64
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e103      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	4b75      	ldr	r3, [pc, #468]	; (8004174 <HAL_RCC_OscConfig+0x4c8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x312>
 8003fb0:	4b6f      	ldr	r3, [pc, #444]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	4a6e      	ldr	r2, [pc, #440]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6213      	str	r3, [r2, #32]
 8003fbc:	e02d      	b.n	800401a <HAL_RCC_OscConfig+0x36e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x334>
 8003fc6:	4b6a      	ldr	r3, [pc, #424]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	4a69      	ldr	r2, [pc, #420]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	6213      	str	r3, [r2, #32]
 8003fd2:	4b67      	ldr	r3, [pc, #412]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	4a66      	ldr	r2, [pc, #408]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	f023 0304 	bic.w	r3, r3, #4
 8003fdc:	6213      	str	r3, [r2, #32]
 8003fde:	e01c      	b.n	800401a <HAL_RCC_OscConfig+0x36e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d10c      	bne.n	8004002 <HAL_RCC_OscConfig+0x356>
 8003fe8:	4b61      	ldr	r3, [pc, #388]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	4a60      	ldr	r2, [pc, #384]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	6213      	str	r3, [r2, #32]
 8003ff4:	4b5e      	ldr	r3, [pc, #376]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	4a5d      	ldr	r2, [pc, #372]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6213      	str	r3, [r2, #32]
 8004000:	e00b      	b.n	800401a <HAL_RCC_OscConfig+0x36e>
 8004002:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4a5a      	ldr	r2, [pc, #360]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6213      	str	r3, [r2, #32]
 800400e:	4b58      	ldr	r3, [pc, #352]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a57      	ldr	r2, [pc, #348]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d015      	beq.n	800404e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004022:	f7fe fe63 	bl	8002cec <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004028:	e00a      	b.n	8004040 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402a:	f7fe fe5f 	bl	8002cec <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f241 3288 	movw	r2, #5000	; 0x1388
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e0b1      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	4b4b      	ldr	r3, [pc, #300]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ee      	beq.n	800402a <HAL_RCC_OscConfig+0x37e>
 800404c:	e014      	b.n	8004078 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404e:	f7fe fe4d 	bl	8002cec <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004054:	e00a      	b.n	800406c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fe fe49 	bl	8002cec <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e09b      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406c:	4b40      	ldr	r3, [pc, #256]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1ee      	bne.n	8004056 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d105      	bne.n	800408a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407e:	4b3c      	ldr	r3, [pc, #240]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4a3b      	ldr	r2, [pc, #236]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004088:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8087 	beq.w	80041a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004094:	4b36      	ldr	r3, [pc, #216]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b08      	cmp	r3, #8
 800409e:	d061      	beq.n	8004164 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d146      	bne.n	8004136 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a8:	4b33      	ldr	r3, [pc, #204]	; (8004178 <HAL_RCC_OscConfig+0x4cc>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ae:	f7fe fe1d 	bl	8002cec <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fe fe19 	bl	8002cec <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e06d      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c8:	4b29      	ldr	r3, [pc, #164]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f0      	bne.n	80040b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040dc:	d108      	bne.n	80040f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	4921      	ldr	r1, [pc, #132]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f0:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a19      	ldr	r1, [r3, #32]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	430b      	orrs	r3, r1
 8004102:	491b      	ldr	r1, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x4cc>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fe fded 	bl	8002cec <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004116:	f7fe fde9 	bl	8002cec <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e03d      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCC_OscConfig+0x46a>
 8004134:	e035      	b.n	80041a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_RCC_OscConfig+0x4cc>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fe fdd6 	bl	8002cec <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fe fdd2 	bl	8002cec <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e026      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004156:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x498>
 8004162:	e01e      	b.n	80041a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d107      	bne.n	800417c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e019      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
 8004170:	40021000 	.word	0x40021000
 8004174:	40007000 	.word	0x40007000
 8004178:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_OscConfig+0x500>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	429a      	cmp	r2, r3
 800418e:	d106      	bne.n	800419e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000

080041b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0d0      	b.n	8004366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b6a      	ldr	r3, [pc, #424]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d910      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b67      	ldr	r3, [pc, #412]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 0207 	bic.w	r2, r3, #7
 80041da:	4965      	ldr	r1, [pc, #404]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b63      	ldr	r3, [pc, #396]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0b8      	b.n	8004366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800420c:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a58      	ldr	r2, [pc, #352]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004224:	4b53      	ldr	r3, [pc, #332]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4a52      	ldr	r2, [pc, #328]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800422e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004230:	4b50      	ldr	r3, [pc, #320]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	494d      	ldr	r1, [pc, #308]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d040      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b47      	ldr	r3, [pc, #284]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d115      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e07f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426e:	4b41      	ldr	r3, [pc, #260]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e073      	b.n	8004366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427e:	4b3d      	ldr	r3, [pc, #244]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e06b      	b.n	8004366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800428e:	4b39      	ldr	r3, [pc, #228]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4936      	ldr	r1, [pc, #216]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a0:	f7fe fd24 	bl	8002cec <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	e00a      	b.n	80042be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a8:	f7fe fd20 	bl	8002cec <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e053      	b.n	8004366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 020c 	and.w	r2, r3, #12
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d1eb      	bne.n	80042a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042d0:	4b27      	ldr	r3, [pc, #156]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d210      	bcs.n	8004300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 0207 	bic.w	r2, r3, #7
 80042e6:	4922      	ldr	r1, [pc, #136]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e032      	b.n	8004366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4916      	ldr	r1, [pc, #88]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	490e      	ldr	r1, [pc, #56]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800433e:	f000 f821 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8004342:	4602      	mov	r2, r0
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	490a      	ldr	r1, [pc, #40]	; (8004378 <HAL_RCC_ClockConfig+0x1c8>)
 8004350:	5ccb      	ldrb	r3, [r1, r3]
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	4a09      	ldr	r2, [pc, #36]	; (800437c <HAL_RCC_ClockConfig+0x1cc>)
 8004358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCC_ClockConfig+0x1d0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fc82 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40022000 	.word	0x40022000
 8004374:	40021000 	.word	0x40021000
 8004378:	0800968c 	.word	0x0800968c
 800437c:	20000008 	.word	0x20000008
 8004380:	2000000c 	.word	0x2000000c

08004384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800439e:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <HAL_RCC_GetSysClockFreq+0x94>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d002      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x30>
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x36>
 80043b2:	e027      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <HAL_RCC_GetSysClockFreq+0x98>)
 80043b6:	613b      	str	r3, [r7, #16]
      break;
 80043b8:	e027      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	0c9b      	lsrs	r3, r3, #18
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	4a17      	ldr	r2, [pc, #92]	; (8004420 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043c4:	5cd3      	ldrb	r3, [r2, r3]
 80043c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_RCC_GetSysClockFreq+0x94>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	0c5b      	lsrs	r3, r3, #17
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	4a11      	ldr	r2, [pc, #68]	; (8004424 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043de:	5cd3      	ldrb	r3, [r2, r3]
 80043e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a0d      	ldr	r2, [pc, #52]	; (800441c <HAL_RCC_GetSysClockFreq+0x98>)
 80043e6:	fb03 f202 	mul.w	r2, r3, r2
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e004      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	613b      	str	r3, [r7, #16]
      break;
 8004402:	e002      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetSysClockFreq+0x98>)
 8004406:	613b      	str	r3, [r7, #16]
      break;
 8004408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440a:	693b      	ldr	r3, [r7, #16]
}
 800440c:	4618      	mov	r0, r3
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	007a1200 	.word	0x007a1200
 8004420:	080096a4 	.word	0x080096a4
 8004424:	080096b4 	.word	0x080096b4
 8004428:	003d0900 	.word	0x003d0900

0800442c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004430:	4b02      	ldr	r3, [pc, #8]	; (800443c <HAL_RCC_GetHCLKFreq+0x10>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	20000008 	.word	0x20000008

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004444:	f7ff fff2 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4903      	ldr	r1, [pc, #12]	; (8004464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	0800969c 	.word	0x0800969c

08004468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800446c:	f7ff ffde 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	0adb      	lsrs	r3, r3, #11
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	4903      	ldr	r1, [pc, #12]	; (800448c <HAL_RCC_GetPCLK2Freq+0x24>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	0800969c 	.word	0x0800969c

08004490 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <RCC_Delay+0x34>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <RCC_Delay+0x38>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	0a5b      	lsrs	r3, r3, #9
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044ac:	bf00      	nop
  }
  while (Delay --);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1e5a      	subs	r2, r3, #1
 80044b2:	60fa      	str	r2, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f9      	bne.n	80044ac <RCC_Delay+0x1c>
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	20000008 	.word	0x20000008
 80044c8:	10624dd3 	.word	0x10624dd3

080044cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d07d      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044e8:	2300      	movs	r3, #0
 80044ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ec:	4b4f      	ldr	r3, [pc, #316]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10d      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f8:	4b4c      	ldr	r3, [pc, #304]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4a4b      	ldr	r2, [pc, #300]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	61d3      	str	r3, [r2, #28]
 8004504:	4b49      	ldr	r3, [pc, #292]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004510:	2301      	movs	r3, #1
 8004512:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	4b46      	ldr	r3, [pc, #280]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d118      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a42      	ldr	r2, [pc, #264]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452c:	f7fe fbde 	bl	8002cec <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004534:	f7fe fbda 	bl	8002cec <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e06d      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004546:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d02e      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d027      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004570:	4b2e      	ldr	r3, [pc, #184]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004578:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800457a:	4b2e      	ldr	r3, [pc, #184]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004580:	4b2c      	ldr	r3, [pc, #176]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004586:	4a29      	ldr	r2, [pc, #164]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d014      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7fe fba9 	bl	8002cec <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	e00a      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7fe fba5 	bl	8002cec <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e036      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	4b1d      	ldr	r3, [pc, #116]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ee      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4917      	ldr	r1, [pc, #92]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d105      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	4a13      	ldr	r2, [pc, #76]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045f0:	4b0e      	ldr	r3, [pc, #56]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	490b      	ldr	r1, [pc, #44]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800460e:	4b07      	ldr	r3, [pc, #28]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4904      	ldr	r1, [pc, #16]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	40007000 	.word	0x40007000
 8004634:	42420440 	.word	0x42420440

08004638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e041      	b.n	80046ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fd ff14 	bl	800248c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f000 fa70 	bl	8004b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d001      	beq.n	80046f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e032      	b.n	8004756 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a18      	ldr	r2, [pc, #96]	; (8004760 <HAL_TIM_Base_Start+0x88>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00e      	beq.n	8004720 <HAL_TIM_Base_Start+0x48>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d009      	beq.n	8004720 <HAL_TIM_Base_Start+0x48>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <HAL_TIM_Base_Start+0x8c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d004      	beq.n	8004720 <HAL_TIM_Base_Start+0x48>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a13      	ldr	r2, [pc, #76]	; (8004768 <HAL_TIM_Base_Start+0x90>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d111      	bne.n	8004744 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b06      	cmp	r3, #6
 8004730:	d010      	beq.n	8004754 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004742:	e007      	b.n	8004754 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr
 8004760:	40012c00 	.word	0x40012c00
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800

0800476c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e093      	b.n	80048a8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fd fe39 	bl	800240c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b0:	f023 0307 	bic.w	r3, r3, #7
 80047b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3304      	adds	r3, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	4610      	mov	r0, r2
 80047c2:	f000 f9cb 	bl	8004b5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	4313      	orrs	r3, r2
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800480c:	f023 030c 	bic.w	r3, r3, #12
 8004810:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004818:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800481c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	4313      	orrs	r3, r2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	011a      	lsls	r2, r3, #4
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	031b      	lsls	r3, r3, #12
 800483c:	4313      	orrs	r3, r2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	4313      	orrs	r3, r2
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d110      	bne.n	8004902 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048e6:	7b7b      	ldrb	r3, [r7, #13]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e069      	b.n	80049c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004900:	e031      	b.n	8004966 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d110      	bne.n	800492a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800490e:	7b3b      	ldrb	r3, [r7, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e055      	b.n	80049c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004928:	e01d      	b.n	8004966 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d108      	bne.n	8004942 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004930:	7bbb      	ldrb	r3, [r7, #14]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004936:	7b7b      	ldrb	r3, [r7, #13]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d102      	bne.n	8004942 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800493c:	7b3b      	ldrb	r3, [r7, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e03e      	b.n	80049c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_TIM_Encoder_Start+0xc4>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b04      	cmp	r3, #4
 8004970:	d008      	beq.n	8004984 <HAL_TIM_Encoder_Start+0xd4>
 8004972:	e00f      	b.n	8004994 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f9e5 	bl	8004d4c <TIM_CCxChannelCmd>
      break;
 8004982:	e016      	b.n	80049b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	2104      	movs	r1, #4
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f9dd 	bl	8004d4c <TIM_CCxChannelCmd>
      break;
 8004992:	e00e      	b.n	80049b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2201      	movs	r2, #1
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f000 f9d5 	bl	8004d4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	2104      	movs	r1, #4
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f9ce 	bl	8004d4c <TIM_CCxChannelCmd>
      break;
 80049b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_TIM_ConfigClockSource+0x1c>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e0b4      	b.n	8004b52 <HAL_TIM_ConfigClockSource+0x186>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a20:	d03e      	beq.n	8004aa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a26:	f200 8087 	bhi.w	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	f000 8086 	beq.w	8004b3e <HAL_TIM_ConfigClockSource+0x172>
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a36:	d87f      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b70      	cmp	r3, #112	; 0x70
 8004a3a:	d01a      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0xa6>
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d87b      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b60      	cmp	r3, #96	; 0x60
 8004a42:	d050      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0x11a>
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d877      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b50      	cmp	r3, #80	; 0x50
 8004a4a:	d03c      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a4c:	2b50      	cmp	r3, #80	; 0x50
 8004a4e:	d873      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d058      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x13a>
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d86f      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b30      	cmp	r3, #48	; 0x30
 8004a5a:	d064      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a5c:	2b30      	cmp	r3, #48	; 0x30
 8004a5e:	d86b      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d060      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d867      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d05c      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d05a      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a70:	e062      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a82:	f000 f944 	bl	8004d0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	609a      	str	r2, [r3, #8]
      break;
 8004a9e:	e04f      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab0:	f000 f92d 	bl	8004d0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ac2:	609a      	str	r2, [r3, #8]
      break;
 8004ac4:	e03c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f000 f8a4 	bl	8004c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2150      	movs	r1, #80	; 0x50
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f8fb 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 8004ae4:	e02c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af2:	461a      	mov	r2, r3
 8004af4:	f000 f8c2 	bl	8004c7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2160      	movs	r1, #96	; 0x60
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f8eb 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 8004b04:	e01c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 f884 	bl	8004c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f8db 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 8004b24:	e00c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f000 f8d2 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 8004b36:	e003      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b3c:	e000      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a29      	ldr	r2, [pc, #164]	; (8004c14 <TIM_Base_SetConfig+0xb8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <TIM_Base_SetConfig+0x30>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7a:	d007      	beq.n	8004b8c <TIM_Base_SetConfig+0x30>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <TIM_Base_SetConfig+0xbc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_Base_SetConfig+0x30>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a25      	ldr	r2, [pc, #148]	; (8004c1c <TIM_Base_SetConfig+0xc0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d108      	bne.n	8004b9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <TIM_Base_SetConfig+0xb8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00b      	beq.n	8004bbe <TIM_Base_SetConfig+0x62>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d007      	beq.n	8004bbe <TIM_Base_SetConfig+0x62>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <TIM_Base_SetConfig+0xbc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <TIM_Base_SetConfig+0x62>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <TIM_Base_SetConfig+0xc0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d108      	bne.n	8004bd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <TIM_Base_SetConfig+0xb8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d103      	bne.n	8004c04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	615a      	str	r2, [r3, #20]
}
 8004c0a:	bf00      	nop
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800

08004c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0201 	bic.w	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 030a 	bic.w	r3, r3, #10
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr

08004c7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f023 0210 	bic.w	r2, r3, #16
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	031b      	lsls	r3, r3, #12
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f043 0307 	orr.w	r3, r3, #7
 8004cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	609a      	str	r2, [r3, #8]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b087      	sub	sp, #28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	021a      	lsls	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	609a      	str	r2, [r3, #8]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2201      	movs	r2, #1
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1a      	ldr	r2, [r3, #32]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	401a      	ands	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	fa01 f303 	lsl.w	r3, r1, r3
 8004d84:	431a      	orrs	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e046      	b.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a16      	ldr	r2, [pc, #88]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d009      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a12      	ldr	r2, [pc, #72]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a10      	ldr	r2, [pc, #64]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d10c      	bne.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40000800 	.word	0x40000800

08004e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e042      	b.n	8004ee8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd fb24 	bl	80024c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	; 0x24
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fc7f 	bl	8005798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b0ba      	sub	sp, #232	; 0xe8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10f      	bne.n	8004f56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <HAL_UART_IRQHandler+0x66>
 8004f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fb63 	bl	800561a <UART_Receive_IT>
      return;
 8004f54:	e25b      	b.n	800540e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80de 	beq.w	800511c <HAL_UART_IRQHandler+0x22c>
 8004f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80d1 	beq.w	800511c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <HAL_UART_IRQHandler+0xae>
 8004f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f043 0201 	orr.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xd2>
 8004faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	f043 0202 	orr.w	r2, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xf6>
 8004fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f043 0204 	orr.w	r2, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d011      	beq.n	8005016 <HAL_UART_IRQHandler+0x126>
 8004ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d105      	bne.n	800500a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	f043 0208 	orr.w	r2, r3, #8
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 81f2 	beq.w	8005404 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_UART_IRQHandler+0x14e>
 800502c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 faee 	bl	800561a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <HAL_UART_IRQHandler+0x17a>
 8005062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d04f      	beq.n	800510a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f9f8 	bl	8005460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d041      	beq.n	8005102 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3314      	adds	r3, #20
 8005084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3314      	adds	r3, #20
 80050a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1d9      	bne.n	800507e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d013      	beq.n	80050fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d6:	4a7e      	ldr	r2, [pc, #504]	; (80052d0 <HAL_UART_IRQHandler+0x3e0>)
 80050d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe faa0 	bl	8003624 <HAL_DMA_Abort_IT>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d016      	beq.n	8005118 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050f4:	4610      	mov	r0, r2
 80050f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e00e      	b.n	8005118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f99c 	bl	8005438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e00a      	b.n	8005118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f998 	bl	8005438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	e006      	b.n	8005118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f994 	bl	8005438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005116:	e175      	b.n	8005404 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	bf00      	nop
    return;
 800511a:	e173      	b.n	8005404 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	2b01      	cmp	r3, #1
 8005122:	f040 814f 	bne.w	80053c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8148 	beq.w	80053c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8141 	beq.w	80053c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80b6 	beq.w	80052d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005174:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8145 	beq.w	8005408 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005186:	429a      	cmp	r2, r3
 8005188:	f080 813e 	bcs.w	8005408 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005192:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b20      	cmp	r3, #32
 800519c:	f000 8088 	beq.w	80052b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1d9      	bne.n	80051a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3314      	adds	r3, #20
 80051f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005210:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005214:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005218:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e1      	bne.n	80051ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3314      	adds	r3, #20
 800522e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800524c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800524e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005252:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800525a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e3      	bne.n	8005228 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800527e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005280:	f023 0310 	bic.w	r3, r3, #16
 8005284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005292:	65ba      	str	r2, [r7, #88]	; 0x58
 8005294:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe f97f 	bl	80035ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8bf 	bl	800544a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052cc:	e09c      	b.n	8005408 <HAL_UART_IRQHandler+0x518>
 80052ce:	bf00      	nop
 80052d0:	08005525 	.word	0x08005525
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 808e 	beq.w	800540c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8089 	beq.w	800540c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800531e:	647a      	str	r2, [r7, #68]	; 0x44
 8005320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800532c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e3      	bne.n	80052fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3314      	adds	r3, #20
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	623b      	str	r3, [r7, #32]
   return(result);
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3314      	adds	r3, #20
 8005352:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005356:	633a      	str	r2, [r7, #48]	; 0x30
 8005358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800535c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e3      	bne.n	8005332 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	60fb      	str	r3, [r7, #12]
   return(result);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0310 	bic.w	r3, r3, #16
 800538e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800539c:	61fa      	str	r2, [r7, #28]
 800539e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	69b9      	ldr	r1, [r7, #24]
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	617b      	str	r3, [r7, #20]
   return(result);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e3      	bne.n	8005378 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f844 	bl	800544a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053c2:	e023      	b.n	800540c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <HAL_UART_IRQHandler+0x4f4>
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f8b5 	bl	800554c <UART_Transmit_IT>
    return;
 80053e2:	e014      	b.n	800540e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00e      	beq.n	800540e <HAL_UART_IRQHandler+0x51e>
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8f4 	bl	80055ea <UART_EndTransmit_IT>
    return;
 8005402:	e004      	b.n	800540e <HAL_UART_IRQHandler+0x51e>
    return;
 8005404:	bf00      	nop
 8005406:	e002      	b.n	800540e <HAL_UART_IRQHandler+0x51e>
      return;
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <HAL_UART_IRQHandler+0x51e>
      return;
 800540c:	bf00      	nop
  }
}
 800540e:	37e8      	adds	r7, #232	; 0xe8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr

0800544a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b095      	sub	sp, #84	; 0x54
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800547e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005488:	643a      	str	r2, [r7, #64]	; 0x40
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800548e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3314      	adds	r3, #20
 80054a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3314      	adds	r3, #20
 80054ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e5      	bne.n	800549c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d119      	bne.n	800550c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0310 	bic.w	r3, r3, #16
 80054ee:	647b      	str	r3, [r7, #68]	; 0x44
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f8:	61ba      	str	r2, [r7, #24]
 80054fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6979      	ldr	r1, [r7, #20]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	613b      	str	r3, [r7, #16]
   return(result);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	631a      	str	r2, [r3, #48]	; 0x30
}
 800551a:	bf00      	nop
 800551c:	3754      	adds	r7, #84	; 0x54
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff ff7a 	bl	8005438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b21      	cmp	r3, #33	; 0x21
 800555e:	d13e      	bne.n	80055de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005568:	d114      	bne.n	8005594 <UART_Transmit_IT+0x48>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d110      	bne.n	8005594 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005586:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	1c9a      	adds	r2, r3, #2
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]
 8005592:	e008      	b.n	80055a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	1c59      	adds	r1, r3, #1
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6211      	str	r1, [r2, #32]
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4619      	mov	r1, r3
 80055b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e000      	b.n	80055e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055de:	2302      	movs	r3, #2
  }
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr

080055ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005600:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ff02 	bl	8005414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b08c      	sub	sp, #48	; 0x30
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b22      	cmp	r3, #34	; 0x22
 800562c:	f040 80ae 	bne.w	800578c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005638:	d117      	bne.n	800566a <UART_Receive_IT+0x50>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d113      	bne.n	800566a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005658:	b29a      	uxth	r2, r3
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	1c9a      	adds	r2, r3, #2
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	629a      	str	r2, [r3, #40]	; 0x28
 8005668:	e026      	b.n	80056b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567c:	d007      	beq.n	800568e <UART_Receive_IT+0x74>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <UART_Receive_IT+0x82>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	e008      	b.n	80056ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4619      	mov	r1, r3
 80056c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d15d      	bne.n	8005788 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0220 	bic.w	r2, r2, #32
 80056da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	2b01      	cmp	r3, #1
 8005710:	d135      	bne.n	800577e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	613b      	str	r3, [r7, #16]
   return(result);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f023 0310 	bic.w	r3, r3, #16
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005738:	623a      	str	r2, [r7, #32]
 800573a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	69f9      	ldr	r1, [r7, #28]
 800573e:	6a3a      	ldr	r2, [r7, #32]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	61bb      	str	r3, [r7, #24]
   return(result);
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e5      	bne.n	8005718 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b10      	cmp	r3, #16
 8005758:	d10a      	bne.n	8005770 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fe67 	bl	800544a <HAL_UARTEx_RxEventCallback>
 800577c:	e002      	b.n	8005784 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff fe51 	bl	8005426 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	e002      	b.n	800578e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e000      	b.n	800578e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3730      	adds	r7, #48	; 0x30
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057d2:	f023 030c 	bic.w	r3, r3, #12
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	430b      	orrs	r3, r1
 80057de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2c      	ldr	r2, [pc, #176]	; (80058ac <UART_SetConfig+0x114>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d103      	bne.n	8005808 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005800:	f7fe fe32 	bl	8004468 <HAL_RCC_GetPCLK2Freq>
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	e002      	b.n	800580e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fe fe1a 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 800580c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009a      	lsls	r2, r3, #2
 8005818:	441a      	add	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	4a22      	ldr	r2, [pc, #136]	; (80058b0 <UART_SetConfig+0x118>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	0119      	lsls	r1, r3, #4
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	fbb2 f2f3 	udiv	r2, r2, r3
 8005844:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <UART_SetConfig+0x118>)
 8005846:	fba3 0302 	umull	r0, r3, r3, r2
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2064      	movs	r0, #100	; 0x64
 800584e:	fb00 f303 	mul.w	r3, r0, r3
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	3332      	adds	r3, #50	; 0x32
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <UART_SetConfig+0x118>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005864:	4419      	add	r1, r3
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	009a      	lsls	r2, r3, #2
 8005870:	441a      	add	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	fbb2 f2f3 	udiv	r2, r2, r3
 800587c:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <UART_SetConfig+0x118>)
 800587e:	fba3 0302 	umull	r0, r3, r3, r2
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2064      	movs	r0, #100	; 0x64
 8005886:	fb00 f303 	mul.w	r3, r0, r3
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	3332      	adds	r3, #50	; 0x32
 8005890:	4a07      	ldr	r2, [pc, #28]	; (80058b0 <UART_SetConfig+0x118>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	f003 020f 	and.w	r2, r3, #15
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	440a      	add	r2, r1
 80058a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40013800 	.word	0x40013800
 80058b0:	51eb851f 	.word	0x51eb851f

080058b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058b4:	b084      	sub	sp, #16
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	f107 0014 	add.w	r0, r7, #20
 80058c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	b004      	add	sp, #16
 80058d2:	4770      	bx	lr

080058d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	43db      	mvns	r3, r3
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	4013      	ands	r3, r2
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005920:	b084      	sub	sp, #16
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	f107 0014 	add.w	r0, r7, #20
 800592e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	b004      	add	sp, #16
 800595e:	4770      	bx	lr

08005960 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <atoi>:
 8005974:	220a      	movs	r2, #10
 8005976:	2100      	movs	r1, #0
 8005978:	f000 b87e 	b.w	8005a78 <strtol>

0800597c <_strtol_l.constprop.0>:
 800597c:	2b01      	cmp	r3, #1
 800597e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005982:	4686      	mov	lr, r0
 8005984:	4690      	mov	r8, r2
 8005986:	d001      	beq.n	800598c <_strtol_l.constprop.0+0x10>
 8005988:	2b24      	cmp	r3, #36	; 0x24
 800598a:	d906      	bls.n	800599a <_strtol_l.constprop.0+0x1e>
 800598c:	f000 fe54 	bl	8006638 <__errno>
 8005990:	2316      	movs	r3, #22
 8005992:	6003      	str	r3, [r0, #0]
 8005994:	2000      	movs	r0, #0
 8005996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599a:	460d      	mov	r5, r1
 800599c:	4835      	ldr	r0, [pc, #212]	; (8005a74 <_strtol_l.constprop.0+0xf8>)
 800599e:	462a      	mov	r2, r5
 80059a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059a4:	5d06      	ldrb	r6, [r0, r4]
 80059a6:	f016 0608 	ands.w	r6, r6, #8
 80059aa:	d1f8      	bne.n	800599e <_strtol_l.constprop.0+0x22>
 80059ac:	2c2d      	cmp	r4, #45	; 0x2d
 80059ae:	d12e      	bne.n	8005a0e <_strtol_l.constprop.0+0x92>
 80059b0:	2601      	movs	r6, #1
 80059b2:	782c      	ldrb	r4, [r5, #0]
 80059b4:	1c95      	adds	r5, r2, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d057      	beq.n	8005a6a <_strtol_l.constprop.0+0xee>
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d109      	bne.n	80059d2 <_strtol_l.constprop.0+0x56>
 80059be:	2c30      	cmp	r4, #48	; 0x30
 80059c0:	d107      	bne.n	80059d2 <_strtol_l.constprop.0+0x56>
 80059c2:	782a      	ldrb	r2, [r5, #0]
 80059c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80059c8:	2a58      	cmp	r2, #88	; 0x58
 80059ca:	d149      	bne.n	8005a60 <_strtol_l.constprop.0+0xe4>
 80059cc:	2310      	movs	r3, #16
 80059ce:	786c      	ldrb	r4, [r5, #1]
 80059d0:	3502      	adds	r5, #2
 80059d2:	2200      	movs	r2, #0
 80059d4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80059d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80059dc:	fbbc f9f3 	udiv	r9, ip, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	fb03 ca19 	mls	sl, r3, r9, ip
 80059e6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80059ea:	2f09      	cmp	r7, #9
 80059ec:	d814      	bhi.n	8005a18 <_strtol_l.constprop.0+0x9c>
 80059ee:	463c      	mov	r4, r7
 80059f0:	42a3      	cmp	r3, r4
 80059f2:	dd20      	ble.n	8005a36 <_strtol_l.constprop.0+0xba>
 80059f4:	1c57      	adds	r7, r2, #1
 80059f6:	d007      	beq.n	8005a08 <_strtol_l.constprop.0+0x8c>
 80059f8:	4581      	cmp	r9, r0
 80059fa:	d319      	bcc.n	8005a30 <_strtol_l.constprop.0+0xb4>
 80059fc:	d101      	bne.n	8005a02 <_strtol_l.constprop.0+0x86>
 80059fe:	45a2      	cmp	sl, r4
 8005a00:	db16      	blt.n	8005a30 <_strtol_l.constprop.0+0xb4>
 8005a02:	2201      	movs	r2, #1
 8005a04:	fb00 4003 	mla	r0, r0, r3, r4
 8005a08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a0c:	e7eb      	b.n	80059e6 <_strtol_l.constprop.0+0x6a>
 8005a0e:	2c2b      	cmp	r4, #43	; 0x2b
 8005a10:	bf04      	itt	eq
 8005a12:	782c      	ldrbeq	r4, [r5, #0]
 8005a14:	1c95      	addeq	r5, r2, #2
 8005a16:	e7ce      	b.n	80059b6 <_strtol_l.constprop.0+0x3a>
 8005a18:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005a1c:	2f19      	cmp	r7, #25
 8005a1e:	d801      	bhi.n	8005a24 <_strtol_l.constprop.0+0xa8>
 8005a20:	3c37      	subs	r4, #55	; 0x37
 8005a22:	e7e5      	b.n	80059f0 <_strtol_l.constprop.0+0x74>
 8005a24:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005a28:	2f19      	cmp	r7, #25
 8005a2a:	d804      	bhi.n	8005a36 <_strtol_l.constprop.0+0xba>
 8005a2c:	3c57      	subs	r4, #87	; 0x57
 8005a2e:	e7df      	b.n	80059f0 <_strtol_l.constprop.0+0x74>
 8005a30:	f04f 32ff 	mov.w	r2, #4294967295
 8005a34:	e7e8      	b.n	8005a08 <_strtol_l.constprop.0+0x8c>
 8005a36:	1c53      	adds	r3, r2, #1
 8005a38:	d108      	bne.n	8005a4c <_strtol_l.constprop.0+0xd0>
 8005a3a:	2322      	movs	r3, #34	; 0x22
 8005a3c:	4660      	mov	r0, ip
 8005a3e:	f8ce 3000 	str.w	r3, [lr]
 8005a42:	f1b8 0f00 	cmp.w	r8, #0
 8005a46:	d0a6      	beq.n	8005996 <_strtol_l.constprop.0+0x1a>
 8005a48:	1e69      	subs	r1, r5, #1
 8005a4a:	e006      	b.n	8005a5a <_strtol_l.constprop.0+0xde>
 8005a4c:	b106      	cbz	r6, 8005a50 <_strtol_l.constprop.0+0xd4>
 8005a4e:	4240      	negs	r0, r0
 8005a50:	f1b8 0f00 	cmp.w	r8, #0
 8005a54:	d09f      	beq.n	8005996 <_strtol_l.constprop.0+0x1a>
 8005a56:	2a00      	cmp	r2, #0
 8005a58:	d1f6      	bne.n	8005a48 <_strtol_l.constprop.0+0xcc>
 8005a5a:	f8c8 1000 	str.w	r1, [r8]
 8005a5e:	e79a      	b.n	8005996 <_strtol_l.constprop.0+0x1a>
 8005a60:	2430      	movs	r4, #48	; 0x30
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1b5      	bne.n	80059d2 <_strtol_l.constprop.0+0x56>
 8005a66:	2308      	movs	r3, #8
 8005a68:	e7b3      	b.n	80059d2 <_strtol_l.constprop.0+0x56>
 8005a6a:	2c30      	cmp	r4, #48	; 0x30
 8005a6c:	d0a9      	beq.n	80059c2 <_strtol_l.constprop.0+0x46>
 8005a6e:	230a      	movs	r3, #10
 8005a70:	e7af      	b.n	80059d2 <_strtol_l.constprop.0+0x56>
 8005a72:	bf00      	nop
 8005a74:	080096b7 	.word	0x080096b7

08005a78 <strtol>:
 8005a78:	4613      	mov	r3, r2
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	4601      	mov	r1, r0
 8005a7e:	4802      	ldr	r0, [pc, #8]	; (8005a88 <strtol+0x10>)
 8005a80:	6800      	ldr	r0, [r0, #0]
 8005a82:	f7ff bf7b 	b.w	800597c <_strtol_l.constprop.0>
 8005a86:	bf00      	nop
 8005a88:	2000006c 	.word	0x2000006c

08005a8c <__cvt>:
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a92:	461f      	mov	r7, r3
 8005a94:	bfbb      	ittet	lt
 8005a96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a9a:	461f      	movlt	r7, r3
 8005a9c:	2300      	movge	r3, #0
 8005a9e:	232d      	movlt	r3, #45	; 0x2d
 8005aa0:	b088      	sub	sp, #32
 8005aa2:	4614      	mov	r4, r2
 8005aa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aa6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005aa8:	7013      	strb	r3, [r2, #0]
 8005aaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005aac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005ab0:	f023 0820 	bic.w	r8, r3, #32
 8005ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ab8:	d005      	beq.n	8005ac6 <__cvt+0x3a>
 8005aba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005abe:	d100      	bne.n	8005ac2 <__cvt+0x36>
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e000      	b.n	8005ac8 <__cvt+0x3c>
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	aa07      	add	r2, sp, #28
 8005aca:	9204      	str	r2, [sp, #16]
 8005acc:	aa06      	add	r2, sp, #24
 8005ace:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ad2:	e9cd 3500 	strd	r3, r5, [sp]
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	463b      	mov	r3, r7
 8005ada:	f000 fe71 	bl	80067c0 <_dtoa_r>
 8005ade:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	d102      	bne.n	8005aec <__cvt+0x60>
 8005ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ae8:	07db      	lsls	r3, r3, #31
 8005aea:	d522      	bpl.n	8005b32 <__cvt+0xa6>
 8005aec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005af0:	eb06 0905 	add.w	r9, r6, r5
 8005af4:	d110      	bne.n	8005b18 <__cvt+0x8c>
 8005af6:	7833      	ldrb	r3, [r6, #0]
 8005af8:	2b30      	cmp	r3, #48	; 0x30
 8005afa:	d10a      	bne.n	8005b12 <__cvt+0x86>
 8005afc:	2200      	movs	r2, #0
 8005afe:	2300      	movs	r3, #0
 8005b00:	4620      	mov	r0, r4
 8005b02:	4639      	mov	r1, r7
 8005b04:	f7fa ff50 	bl	80009a8 <__aeabi_dcmpeq>
 8005b08:	b918      	cbnz	r0, 8005b12 <__cvt+0x86>
 8005b0a:	f1c5 0501 	rsb	r5, r5, #1
 8005b0e:	f8ca 5000 	str.w	r5, [sl]
 8005b12:	f8da 3000 	ldr.w	r3, [sl]
 8005b16:	4499      	add	r9, r3
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4639      	mov	r1, r7
 8005b20:	f7fa ff42 	bl	80009a8 <__aeabi_dcmpeq>
 8005b24:	b108      	cbz	r0, 8005b2a <__cvt+0x9e>
 8005b26:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b2a:	2230      	movs	r2, #48	; 0x30
 8005b2c:	9b07      	ldr	r3, [sp, #28]
 8005b2e:	454b      	cmp	r3, r9
 8005b30:	d307      	bcc.n	8005b42 <__cvt+0xb6>
 8005b32:	4630      	mov	r0, r6
 8005b34:	9b07      	ldr	r3, [sp, #28]
 8005b36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b38:	1b9b      	subs	r3, r3, r6
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	b008      	add	sp, #32
 8005b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	9107      	str	r1, [sp, #28]
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	e7f0      	b.n	8005b2c <__cvt+0xa0>

08005b4a <__exponent>:
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	f803 2b02 	strb.w	r2, [r3], #2
 8005b54:	bfb6      	itet	lt
 8005b56:	222d      	movlt	r2, #45	; 0x2d
 8005b58:	222b      	movge	r2, #43	; 0x2b
 8005b5a:	4249      	neglt	r1, r1
 8005b5c:	2909      	cmp	r1, #9
 8005b5e:	7042      	strb	r2, [r0, #1]
 8005b60:	dd2a      	ble.n	8005bb8 <__exponent+0x6e>
 8005b62:	f10d 0207 	add.w	r2, sp, #7
 8005b66:	4617      	mov	r7, r2
 8005b68:	260a      	movs	r6, #10
 8005b6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b6e:	4694      	mov	ip, r2
 8005b70:	fb06 1415 	mls	r4, r6, r5, r1
 8005b74:	3430      	adds	r4, #48	; 0x30
 8005b76:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	2c63      	cmp	r4, #99	; 0x63
 8005b7e:	4629      	mov	r1, r5
 8005b80:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b84:	dcf1      	bgt.n	8005b6a <__exponent+0x20>
 8005b86:	3130      	adds	r1, #48	; 0x30
 8005b88:	f1ac 0402 	sub.w	r4, ip, #2
 8005b8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b90:	4622      	mov	r2, r4
 8005b92:	1c41      	adds	r1, r0, #1
 8005b94:	42ba      	cmp	r2, r7
 8005b96:	d30a      	bcc.n	8005bae <__exponent+0x64>
 8005b98:	f10d 0209 	add.w	r2, sp, #9
 8005b9c:	eba2 020c 	sub.w	r2, r2, ip
 8005ba0:	42bc      	cmp	r4, r7
 8005ba2:	bf88      	it	hi
 8005ba4:	2200      	movhi	r2, #0
 8005ba6:	4413      	add	r3, r2
 8005ba8:	1a18      	subs	r0, r3, r0
 8005baa:	b003      	add	sp, #12
 8005bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bae:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005bb2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005bb6:	e7ed      	b.n	8005b94 <__exponent+0x4a>
 8005bb8:	2330      	movs	r3, #48	; 0x30
 8005bba:	3130      	adds	r1, #48	; 0x30
 8005bbc:	7083      	strb	r3, [r0, #2]
 8005bbe:	70c1      	strb	r1, [r0, #3]
 8005bc0:	1d03      	adds	r3, r0, #4
 8005bc2:	e7f1      	b.n	8005ba8 <__exponent+0x5e>

08005bc4 <_printf_float>:
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	b091      	sub	sp, #68	; 0x44
 8005bca:	460c      	mov	r4, r1
 8005bcc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	461f      	mov	r7, r3
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	f000 fce5 	bl	80065a4 <_localeconv_r>
 8005bda:	6803      	ldr	r3, [r0, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	9309      	str	r3, [sp, #36]	; 0x24
 8005be0:	f7fa fab6 	bl	8000150 <strlen>
 8005be4:	2300      	movs	r3, #0
 8005be6:	930e      	str	r3, [sp, #56]	; 0x38
 8005be8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bec:	900a      	str	r0, [sp, #40]	; 0x28
 8005bee:	3307      	adds	r3, #7
 8005bf0:	f023 0307 	bic.w	r3, r3, #7
 8005bf4:	f103 0208 	add.w	r2, r3, #8
 8005bf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005bfc:	f8d4 b000 	ldr.w	fp, [r4]
 8005c00:	f8c8 2000 	str.w	r2, [r8]
 8005c04:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005c08:	4652      	mov	r2, sl
 8005c0a:	4643      	mov	r3, r8
 8005c0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c10:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c16:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	4b9c      	ldr	r3, [pc, #624]	; (8005e90 <_printf_float+0x2cc>)
 8005c1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c20:	f7fa fef4 	bl	8000a0c <__aeabi_dcmpun>
 8005c24:	bb70      	cbnz	r0, 8005c84 <_printf_float+0xc0>
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	4650      	mov	r0, sl
 8005c2c:	4b98      	ldr	r3, [pc, #608]	; (8005e90 <_printf_float+0x2cc>)
 8005c2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c30:	f7fa fece 	bl	80009d0 <__aeabi_dcmple>
 8005c34:	bb30      	cbnz	r0, 8005c84 <_printf_float+0xc0>
 8005c36:	2200      	movs	r2, #0
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4650      	mov	r0, sl
 8005c3c:	4641      	mov	r1, r8
 8005c3e:	f7fa febd 	bl	80009bc <__aeabi_dcmplt>
 8005c42:	b110      	cbz	r0, 8005c4a <_printf_float+0x86>
 8005c44:	232d      	movs	r3, #45	; 0x2d
 8005c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c4a:	4a92      	ldr	r2, [pc, #584]	; (8005e94 <_printf_float+0x2d0>)
 8005c4c:	4b92      	ldr	r3, [pc, #584]	; (8005e98 <_printf_float+0x2d4>)
 8005c4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c52:	bf94      	ite	ls
 8005c54:	4690      	movls	r8, r2
 8005c56:	4698      	movhi	r8, r3
 8005c58:	2303      	movs	r3, #3
 8005c5a:	f04f 0a00 	mov.w	sl, #0
 8005c5e:	6123      	str	r3, [r4, #16]
 8005c60:	f02b 0304 	bic.w	r3, fp, #4
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	4633      	mov	r3, r6
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	9700      	str	r7, [sp, #0]
 8005c6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c70:	f000 f9d6 	bl	8006020 <_printf_common>
 8005c74:	3001      	adds	r0, #1
 8005c76:	f040 8090 	bne.w	8005d9a <_printf_float+0x1d6>
 8005c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7e:	b011      	add	sp, #68	; 0x44
 8005c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c84:	4652      	mov	r2, sl
 8005c86:	4643      	mov	r3, r8
 8005c88:	4650      	mov	r0, sl
 8005c8a:	4641      	mov	r1, r8
 8005c8c:	f7fa febe 	bl	8000a0c <__aeabi_dcmpun>
 8005c90:	b148      	cbz	r0, 8005ca6 <_printf_float+0xe2>
 8005c92:	f1b8 0f00 	cmp.w	r8, #0
 8005c96:	bfb8      	it	lt
 8005c98:	232d      	movlt	r3, #45	; 0x2d
 8005c9a:	4a80      	ldr	r2, [pc, #512]	; (8005e9c <_printf_float+0x2d8>)
 8005c9c:	bfb8      	it	lt
 8005c9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ca2:	4b7f      	ldr	r3, [pc, #508]	; (8005ea0 <_printf_float+0x2dc>)
 8005ca4:	e7d3      	b.n	8005c4e <_printf_float+0x8a>
 8005ca6:	6863      	ldr	r3, [r4, #4]
 8005ca8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	d142      	bne.n	8005d36 <_printf_float+0x172>
 8005cb0:	2306      	movs	r3, #6
 8005cb2:	6063      	str	r3, [r4, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	9206      	str	r2, [sp, #24]
 8005cb8:	aa0e      	add	r2, sp, #56	; 0x38
 8005cba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005cbe:	aa0d      	add	r2, sp, #52	; 0x34
 8005cc0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005cc4:	9203      	str	r2, [sp, #12]
 8005cc6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005cca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	4643      	mov	r3, r8
 8005cda:	910b      	str	r1, [sp, #44]	; 0x2c
 8005cdc:	f7ff fed6 	bl	8005a8c <__cvt>
 8005ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	2947      	cmp	r1, #71	; 0x47
 8005ce6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ce8:	d108      	bne.n	8005cfc <_printf_float+0x138>
 8005cea:	1cc8      	adds	r0, r1, #3
 8005cec:	db02      	blt.n	8005cf4 <_printf_float+0x130>
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	4299      	cmp	r1, r3
 8005cf2:	dd40      	ble.n	8005d76 <_printf_float+0x1b2>
 8005cf4:	f1a9 0902 	sub.w	r9, r9, #2
 8005cf8:	fa5f f989 	uxtb.w	r9, r9
 8005cfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d00:	d81f      	bhi.n	8005d42 <_printf_float+0x17e>
 8005d02:	464a      	mov	r2, r9
 8005d04:	3901      	subs	r1, #1
 8005d06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d0a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d0c:	f7ff ff1d 	bl	8005b4a <__exponent>
 8005d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d12:	4682      	mov	sl, r0
 8005d14:	1813      	adds	r3, r2, r0
 8005d16:	2a01      	cmp	r2, #1
 8005d18:	6123      	str	r3, [r4, #16]
 8005d1a:	dc02      	bgt.n	8005d22 <_printf_float+0x15e>
 8005d1c:	6822      	ldr	r2, [r4, #0]
 8005d1e:	07d2      	lsls	r2, r2, #31
 8005d20:	d501      	bpl.n	8005d26 <_printf_float+0x162>
 8005d22:	3301      	adds	r3, #1
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d09b      	beq.n	8005c66 <_printf_float+0xa2>
 8005d2e:	232d      	movs	r3, #45	; 0x2d
 8005d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d34:	e797      	b.n	8005c66 <_printf_float+0xa2>
 8005d36:	2947      	cmp	r1, #71	; 0x47
 8005d38:	d1bc      	bne.n	8005cb4 <_printf_float+0xf0>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1ba      	bne.n	8005cb4 <_printf_float+0xf0>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e7b7      	b.n	8005cb2 <_printf_float+0xee>
 8005d42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d46:	d118      	bne.n	8005d7a <_printf_float+0x1b6>
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	6863      	ldr	r3, [r4, #4]
 8005d4c:	dd0b      	ble.n	8005d66 <_printf_float+0x1a2>
 8005d4e:	6121      	str	r1, [r4, #16]
 8005d50:	b913      	cbnz	r3, 8005d58 <_printf_float+0x194>
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	07d0      	lsls	r0, r2, #31
 8005d56:	d502      	bpl.n	8005d5e <_printf_float+0x19a>
 8005d58:	3301      	adds	r3, #1
 8005d5a:	440b      	add	r3, r1
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	f04f 0a00 	mov.w	sl, #0
 8005d62:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d64:	e7df      	b.n	8005d26 <_printf_float+0x162>
 8005d66:	b913      	cbnz	r3, 8005d6e <_printf_float+0x1aa>
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	07d2      	lsls	r2, r2, #31
 8005d6c:	d501      	bpl.n	8005d72 <_printf_float+0x1ae>
 8005d6e:	3302      	adds	r3, #2
 8005d70:	e7f4      	b.n	8005d5c <_printf_float+0x198>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e7f2      	b.n	8005d5c <_printf_float+0x198>
 8005d76:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	db05      	blt.n	8005d8c <_printf_float+0x1c8>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	6121      	str	r1, [r4, #16]
 8005d84:	07d8      	lsls	r0, r3, #31
 8005d86:	d5ea      	bpl.n	8005d5e <_printf_float+0x19a>
 8005d88:	1c4b      	adds	r3, r1, #1
 8005d8a:	e7e7      	b.n	8005d5c <_printf_float+0x198>
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	bfcc      	ite	gt
 8005d90:	2201      	movgt	r2, #1
 8005d92:	f1c1 0202 	rsble	r2, r1, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	e7e0      	b.n	8005d5c <_printf_float+0x198>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	055a      	lsls	r2, r3, #21
 8005d9e:	d407      	bmi.n	8005db0 <_printf_float+0x1ec>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	4642      	mov	r2, r8
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	d12b      	bne.n	8005e06 <_printf_float+0x242>
 8005dae:	e764      	b.n	8005c7a <_printf_float+0xb6>
 8005db0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005db4:	f240 80dd 	bls.w	8005f72 <_printf_float+0x3ae>
 8005db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f7fa fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d033      	beq.n	8005e30 <_printf_float+0x26c>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	4a35      	ldr	r2, [pc, #212]	; (8005ea4 <_printf_float+0x2e0>)
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f af51 	beq.w	8005c7a <_printf_float+0xb6>
 8005dd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	db02      	blt.n	8005de6 <_printf_float+0x222>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	07d8      	lsls	r0, r3, #31
 8005de4:	d50f      	bpl.n	8005e06 <_printf_float+0x242>
 8005de6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	f43f af42 	beq.w	8005c7a <_printf_float+0xb6>
 8005df6:	f04f 0800 	mov.w	r8, #0
 8005dfa:	f104 091a 	add.w	r9, r4, #26
 8005dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e00:	3b01      	subs	r3, #1
 8005e02:	4543      	cmp	r3, r8
 8005e04:	dc09      	bgt.n	8005e1a <_printf_float+0x256>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	079b      	lsls	r3, r3, #30
 8005e0a:	f100 8104 	bmi.w	8006016 <_printf_float+0x452>
 8005e0e:	68e0      	ldr	r0, [r4, #12]
 8005e10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e12:	4298      	cmp	r0, r3
 8005e14:	bfb8      	it	lt
 8005e16:	4618      	movlt	r0, r3
 8005e18:	e731      	b.n	8005c7e <_printf_float+0xba>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f af28 	beq.w	8005c7a <_printf_float+0xb6>
 8005e2a:	f108 0801 	add.w	r8, r8, #1
 8005e2e:	e7e6      	b.n	8005dfe <_printf_float+0x23a>
 8005e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dc38      	bgt.n	8005ea8 <_printf_float+0x2e4>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <_printf_float+0x2e0>)
 8005e3e:	47b8      	blx	r7
 8005e40:	3001      	adds	r0, #1
 8005e42:	f43f af1a 	beq.w	8005c7a <_printf_float+0xb6>
 8005e46:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	d102      	bne.n	8005e54 <_printf_float+0x290>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	07d9      	lsls	r1, r3, #31
 8005e52:	d5d8      	bpl.n	8005e06 <_printf_float+0x242>
 8005e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f af0b 	beq.w	8005c7a <_printf_float+0xb6>
 8005e64:	f04f 0900 	mov.w	r9, #0
 8005e68:	f104 0a1a 	add.w	sl, r4, #26
 8005e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e6e:	425b      	negs	r3, r3
 8005e70:	454b      	cmp	r3, r9
 8005e72:	dc01      	bgt.n	8005e78 <_printf_float+0x2b4>
 8005e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e76:	e794      	b.n	8005da2 <_printf_float+0x1de>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4652      	mov	r2, sl
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	47b8      	blx	r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	f43f aef9 	beq.w	8005c7a <_printf_float+0xb6>
 8005e88:	f109 0901 	add.w	r9, r9, #1
 8005e8c:	e7ee      	b.n	8005e6c <_printf_float+0x2a8>
 8005e8e:	bf00      	nop
 8005e90:	7fefffff 	.word	0x7fefffff
 8005e94:	080097b7 	.word	0x080097b7
 8005e98:	080097bb 	.word	0x080097bb
 8005e9c:	080097bf 	.word	0x080097bf
 8005ea0:	080097c3 	.word	0x080097c3
 8005ea4:	080097c7 	.word	0x080097c7
 8005ea8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005eac:	429a      	cmp	r2, r3
 8005eae:	bfa8      	it	ge
 8005eb0:	461a      	movge	r2, r3
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	4691      	mov	r9, r2
 8005eb6:	dc37      	bgt.n	8005f28 <_printf_float+0x364>
 8005eb8:	f04f 0b00 	mov.w	fp, #0
 8005ebc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ec0:	f104 021a 	add.w	r2, r4, #26
 8005ec4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ec8:	ebaa 0309 	sub.w	r3, sl, r9
 8005ecc:	455b      	cmp	r3, fp
 8005ece:	dc33      	bgt.n	8005f38 <_printf_float+0x374>
 8005ed0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	db3b      	blt.n	8005f50 <_printf_float+0x38c>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	07da      	lsls	r2, r3, #31
 8005edc:	d438      	bmi.n	8005f50 <_printf_float+0x38c>
 8005ede:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005ee2:	eba2 0903 	sub.w	r9, r2, r3
 8005ee6:	eba2 020a 	sub.w	r2, r2, sl
 8005eea:	4591      	cmp	r9, r2
 8005eec:	bfa8      	it	ge
 8005eee:	4691      	movge	r9, r2
 8005ef0:	f1b9 0f00 	cmp.w	r9, #0
 8005ef4:	dc34      	bgt.n	8005f60 <_printf_float+0x39c>
 8005ef6:	f04f 0800 	mov.w	r8, #0
 8005efa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005efe:	f104 0a1a 	add.w	sl, r4, #26
 8005f02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f06:	1a9b      	subs	r3, r3, r2
 8005f08:	eba3 0309 	sub.w	r3, r3, r9
 8005f0c:	4543      	cmp	r3, r8
 8005f0e:	f77f af7a 	ble.w	8005e06 <_printf_float+0x242>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4652      	mov	r2, sl
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f aeac 	beq.w	8005c7a <_printf_float+0xb6>
 8005f22:	f108 0801 	add.w	r8, r8, #1
 8005f26:	e7ec      	b.n	8005f02 <_printf_float+0x33e>
 8005f28:	4613      	mov	r3, r2
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	d1c0      	bne.n	8005eb8 <_printf_float+0x2f4>
 8005f36:	e6a0      	b.n	8005c7a <_printf_float+0xb6>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f40:	47b8      	blx	r7
 8005f42:	3001      	adds	r0, #1
 8005f44:	f43f ae99 	beq.w	8005c7a <_printf_float+0xb6>
 8005f48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f4a:	f10b 0b01 	add.w	fp, fp, #1
 8005f4e:	e7b9      	b.n	8005ec4 <_printf_float+0x300>
 8005f50:	4631      	mov	r1, r6
 8005f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d1bf      	bne.n	8005ede <_printf_float+0x31a>
 8005f5e:	e68c      	b.n	8005c7a <_printf_float+0xb6>
 8005f60:	464b      	mov	r3, r9
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	eb08 020a 	add.w	r2, r8, sl
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d1c2      	bne.n	8005ef6 <_printf_float+0x332>
 8005f70:	e683      	b.n	8005c7a <_printf_float+0xb6>
 8005f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f74:	2a01      	cmp	r2, #1
 8005f76:	dc01      	bgt.n	8005f7c <_printf_float+0x3b8>
 8005f78:	07db      	lsls	r3, r3, #31
 8005f7a:	d539      	bpl.n	8005ff0 <_printf_float+0x42c>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4642      	mov	r2, r8
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	f43f ae77 	beq.w	8005c7a <_printf_float+0xb6>
 8005f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f ae6f 	beq.w	8005c7a <_printf_float+0xb6>
 8005f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005fa8:	f7fa fcfe 	bl	80009a8 <__aeabi_dcmpeq>
 8005fac:	b9d8      	cbnz	r0, 8005fe6 <_printf_float+0x422>
 8005fae:	f109 33ff 	add.w	r3, r9, #4294967295
 8005fb2:	f108 0201 	add.w	r2, r8, #1
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d10e      	bne.n	8005fde <_printf_float+0x41a>
 8005fc0:	e65b      	b.n	8005c7a <_printf_float+0xb6>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	464a      	mov	r2, r9
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f ae54 	beq.w	8005c7a <_printf_float+0xb6>
 8005fd2:	f108 0801 	add.w	r8, r8, #1
 8005fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	4543      	cmp	r3, r8
 8005fdc:	dcf1      	bgt.n	8005fc2 <_printf_float+0x3fe>
 8005fde:	4653      	mov	r3, sl
 8005fe0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fe4:	e6de      	b.n	8005da4 <_printf_float+0x1e0>
 8005fe6:	f04f 0800 	mov.w	r8, #0
 8005fea:	f104 091a 	add.w	r9, r4, #26
 8005fee:	e7f2      	b.n	8005fd6 <_printf_float+0x412>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4642      	mov	r2, r8
 8005ff4:	e7df      	b.n	8005fb6 <_printf_float+0x3f2>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	464a      	mov	r2, r9
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f ae3a 	beq.w	8005c7a <_printf_float+0xb6>
 8006006:	f108 0801 	add.w	r8, r8, #1
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800600e:	1a5b      	subs	r3, r3, r1
 8006010:	4543      	cmp	r3, r8
 8006012:	dcf0      	bgt.n	8005ff6 <_printf_float+0x432>
 8006014:	e6fb      	b.n	8005e0e <_printf_float+0x24a>
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	f104 0919 	add.w	r9, r4, #25
 800601e:	e7f4      	b.n	800600a <_printf_float+0x446>

08006020 <_printf_common>:
 8006020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	4616      	mov	r6, r2
 8006026:	4699      	mov	r9, r3
 8006028:	688a      	ldr	r2, [r1, #8]
 800602a:	690b      	ldr	r3, [r1, #16]
 800602c:	4607      	mov	r7, r0
 800602e:	4293      	cmp	r3, r2
 8006030:	bfb8      	it	lt
 8006032:	4613      	movlt	r3, r2
 8006034:	6033      	str	r3, [r6, #0]
 8006036:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800603a:	460c      	mov	r4, r1
 800603c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006040:	b10a      	cbz	r2, 8006046 <_printf_common+0x26>
 8006042:	3301      	adds	r3, #1
 8006044:	6033      	str	r3, [r6, #0]
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	0699      	lsls	r1, r3, #26
 800604a:	bf42      	ittt	mi
 800604c:	6833      	ldrmi	r3, [r6, #0]
 800604e:	3302      	addmi	r3, #2
 8006050:	6033      	strmi	r3, [r6, #0]
 8006052:	6825      	ldr	r5, [r4, #0]
 8006054:	f015 0506 	ands.w	r5, r5, #6
 8006058:	d106      	bne.n	8006068 <_printf_common+0x48>
 800605a:	f104 0a19 	add.w	sl, r4, #25
 800605e:	68e3      	ldr	r3, [r4, #12]
 8006060:	6832      	ldr	r2, [r6, #0]
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	42ab      	cmp	r3, r5
 8006066:	dc2b      	bgt.n	80060c0 <_printf_common+0xa0>
 8006068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800606c:	1e13      	subs	r3, r2, #0
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	bf18      	it	ne
 8006072:	2301      	movne	r3, #1
 8006074:	0692      	lsls	r2, r2, #26
 8006076:	d430      	bmi.n	80060da <_printf_common+0xba>
 8006078:	4649      	mov	r1, r9
 800607a:	4638      	mov	r0, r7
 800607c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006080:	47c0      	blx	r8
 8006082:	3001      	adds	r0, #1
 8006084:	d023      	beq.n	80060ce <_printf_common+0xae>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	6922      	ldr	r2, [r4, #16]
 800608a:	f003 0306 	and.w	r3, r3, #6
 800608e:	2b04      	cmp	r3, #4
 8006090:	bf14      	ite	ne
 8006092:	2500      	movne	r5, #0
 8006094:	6833      	ldreq	r3, [r6, #0]
 8006096:	f04f 0600 	mov.w	r6, #0
 800609a:	bf08      	it	eq
 800609c:	68e5      	ldreq	r5, [r4, #12]
 800609e:	f104 041a 	add.w	r4, r4, #26
 80060a2:	bf08      	it	eq
 80060a4:	1aed      	subeq	r5, r5, r3
 80060a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80060aa:	bf08      	it	eq
 80060ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b0:	4293      	cmp	r3, r2
 80060b2:	bfc4      	itt	gt
 80060b4:	1a9b      	subgt	r3, r3, r2
 80060b6:	18ed      	addgt	r5, r5, r3
 80060b8:	42b5      	cmp	r5, r6
 80060ba:	d11a      	bne.n	80060f2 <_printf_common+0xd2>
 80060bc:	2000      	movs	r0, #0
 80060be:	e008      	b.n	80060d2 <_printf_common+0xb2>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4652      	mov	r2, sl
 80060c4:	4649      	mov	r1, r9
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c0      	blx	r8
 80060ca:	3001      	adds	r0, #1
 80060cc:	d103      	bne.n	80060d6 <_printf_common+0xb6>
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295
 80060d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d6:	3501      	adds	r5, #1
 80060d8:	e7c1      	b.n	800605e <_printf_common+0x3e>
 80060da:	2030      	movs	r0, #48	; 0x30
 80060dc:	18e1      	adds	r1, r4, r3
 80060de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e8:	4422      	add	r2, r4
 80060ea:	3302      	adds	r3, #2
 80060ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f0:	e7c2      	b.n	8006078 <_printf_common+0x58>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4622      	mov	r2, r4
 80060f6:	4649      	mov	r1, r9
 80060f8:	4638      	mov	r0, r7
 80060fa:	47c0      	blx	r8
 80060fc:	3001      	adds	r0, #1
 80060fe:	d0e6      	beq.n	80060ce <_printf_common+0xae>
 8006100:	3601      	adds	r6, #1
 8006102:	e7d9      	b.n	80060b8 <_printf_common+0x98>

08006104 <_printf_i>:
 8006104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	7e0f      	ldrb	r7, [r1, #24]
 800610a:	4691      	mov	r9, r2
 800610c:	2f78      	cmp	r7, #120	; 0x78
 800610e:	4680      	mov	r8, r0
 8006110:	460c      	mov	r4, r1
 8006112:	469a      	mov	sl, r3
 8006114:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800611a:	d807      	bhi.n	800612c <_printf_i+0x28>
 800611c:	2f62      	cmp	r7, #98	; 0x62
 800611e:	d80a      	bhi.n	8006136 <_printf_i+0x32>
 8006120:	2f00      	cmp	r7, #0
 8006122:	f000 80d5 	beq.w	80062d0 <_printf_i+0x1cc>
 8006126:	2f58      	cmp	r7, #88	; 0x58
 8006128:	f000 80c1 	beq.w	80062ae <_printf_i+0x1aa>
 800612c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006134:	e03a      	b.n	80061ac <_printf_i+0xa8>
 8006136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800613a:	2b15      	cmp	r3, #21
 800613c:	d8f6      	bhi.n	800612c <_printf_i+0x28>
 800613e:	a101      	add	r1, pc, #4	; (adr r1, 8006144 <_printf_i+0x40>)
 8006140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006144:	0800619d 	.word	0x0800619d
 8006148:	080061b1 	.word	0x080061b1
 800614c:	0800612d 	.word	0x0800612d
 8006150:	0800612d 	.word	0x0800612d
 8006154:	0800612d 	.word	0x0800612d
 8006158:	0800612d 	.word	0x0800612d
 800615c:	080061b1 	.word	0x080061b1
 8006160:	0800612d 	.word	0x0800612d
 8006164:	0800612d 	.word	0x0800612d
 8006168:	0800612d 	.word	0x0800612d
 800616c:	0800612d 	.word	0x0800612d
 8006170:	080062b7 	.word	0x080062b7
 8006174:	080061dd 	.word	0x080061dd
 8006178:	08006271 	.word	0x08006271
 800617c:	0800612d 	.word	0x0800612d
 8006180:	0800612d 	.word	0x0800612d
 8006184:	080062d9 	.word	0x080062d9
 8006188:	0800612d 	.word	0x0800612d
 800618c:	080061dd 	.word	0x080061dd
 8006190:	0800612d 	.word	0x0800612d
 8006194:	0800612d 	.word	0x0800612d
 8006198:	08006279 	.word	0x08006279
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	602a      	str	r2, [r5, #0]
 80061a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0a0      	b.n	80062f2 <_printf_i+0x1ee>
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	682b      	ldr	r3, [r5, #0]
 80061b4:	0607      	lsls	r7, r0, #24
 80061b6:	f103 0104 	add.w	r1, r3, #4
 80061ba:	6029      	str	r1, [r5, #0]
 80061bc:	d501      	bpl.n	80061c2 <_printf_i+0xbe>
 80061be:	681e      	ldr	r6, [r3, #0]
 80061c0:	e003      	b.n	80061ca <_printf_i+0xc6>
 80061c2:	0646      	lsls	r6, r0, #25
 80061c4:	d5fb      	bpl.n	80061be <_printf_i+0xba>
 80061c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	da03      	bge.n	80061d6 <_printf_i+0xd2>
 80061ce:	232d      	movs	r3, #45	; 0x2d
 80061d0:	4276      	negs	r6, r6
 80061d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d6:	230a      	movs	r3, #10
 80061d8:	4859      	ldr	r0, [pc, #356]	; (8006340 <_printf_i+0x23c>)
 80061da:	e012      	b.n	8006202 <_printf_i+0xfe>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	6820      	ldr	r0, [r4, #0]
 80061e0:	1d19      	adds	r1, r3, #4
 80061e2:	6029      	str	r1, [r5, #0]
 80061e4:	0605      	lsls	r5, r0, #24
 80061e6:	d501      	bpl.n	80061ec <_printf_i+0xe8>
 80061e8:	681e      	ldr	r6, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <_printf_i+0xee>
 80061ec:	0641      	lsls	r1, r0, #25
 80061ee:	d5fb      	bpl.n	80061e8 <_printf_i+0xe4>
 80061f0:	881e      	ldrh	r6, [r3, #0]
 80061f2:	2f6f      	cmp	r7, #111	; 0x6f
 80061f4:	bf0c      	ite	eq
 80061f6:	2308      	moveq	r3, #8
 80061f8:	230a      	movne	r3, #10
 80061fa:	4851      	ldr	r0, [pc, #324]	; (8006340 <_printf_i+0x23c>)
 80061fc:	2100      	movs	r1, #0
 80061fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006202:	6865      	ldr	r5, [r4, #4]
 8006204:	2d00      	cmp	r5, #0
 8006206:	bfa8      	it	ge
 8006208:	6821      	ldrge	r1, [r4, #0]
 800620a:	60a5      	str	r5, [r4, #8]
 800620c:	bfa4      	itt	ge
 800620e:	f021 0104 	bicge.w	r1, r1, #4
 8006212:	6021      	strge	r1, [r4, #0]
 8006214:	b90e      	cbnz	r6, 800621a <_printf_i+0x116>
 8006216:	2d00      	cmp	r5, #0
 8006218:	d04b      	beq.n	80062b2 <_printf_i+0x1ae>
 800621a:	4615      	mov	r5, r2
 800621c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006220:	fb03 6711 	mls	r7, r3, r1, r6
 8006224:	5dc7      	ldrb	r7, [r0, r7]
 8006226:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800622a:	4637      	mov	r7, r6
 800622c:	42bb      	cmp	r3, r7
 800622e:	460e      	mov	r6, r1
 8006230:	d9f4      	bls.n	800621c <_printf_i+0x118>
 8006232:	2b08      	cmp	r3, #8
 8006234:	d10b      	bne.n	800624e <_printf_i+0x14a>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	07de      	lsls	r6, r3, #31
 800623a:	d508      	bpl.n	800624e <_printf_i+0x14a>
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	6861      	ldr	r1, [r4, #4]
 8006240:	4299      	cmp	r1, r3
 8006242:	bfde      	ittt	le
 8006244:	2330      	movle	r3, #48	; 0x30
 8006246:	f805 3c01 	strble.w	r3, [r5, #-1]
 800624a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800624e:	1b52      	subs	r2, r2, r5
 8006250:	6122      	str	r2, [r4, #16]
 8006252:	464b      	mov	r3, r9
 8006254:	4621      	mov	r1, r4
 8006256:	4640      	mov	r0, r8
 8006258:	f8cd a000 	str.w	sl, [sp]
 800625c:	aa03      	add	r2, sp, #12
 800625e:	f7ff fedf 	bl	8006020 <_printf_common>
 8006262:	3001      	adds	r0, #1
 8006264:	d14a      	bne.n	80062fc <_printf_i+0x1f8>
 8006266:	f04f 30ff 	mov.w	r0, #4294967295
 800626a:	b004      	add	sp, #16
 800626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	f043 0320 	orr.w	r3, r3, #32
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	2778      	movs	r7, #120	; 0x78
 800627a:	4832      	ldr	r0, [pc, #200]	; (8006344 <_printf_i+0x240>)
 800627c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	6829      	ldr	r1, [r5, #0]
 8006284:	061f      	lsls	r7, r3, #24
 8006286:	f851 6b04 	ldr.w	r6, [r1], #4
 800628a:	d402      	bmi.n	8006292 <_printf_i+0x18e>
 800628c:	065f      	lsls	r7, r3, #25
 800628e:	bf48      	it	mi
 8006290:	b2b6      	uxthmi	r6, r6
 8006292:	07df      	lsls	r7, r3, #31
 8006294:	bf48      	it	mi
 8006296:	f043 0320 	orrmi.w	r3, r3, #32
 800629a:	6029      	str	r1, [r5, #0]
 800629c:	bf48      	it	mi
 800629e:	6023      	strmi	r3, [r4, #0]
 80062a0:	b91e      	cbnz	r6, 80062aa <_printf_i+0x1a6>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	f023 0320 	bic.w	r3, r3, #32
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	2310      	movs	r3, #16
 80062ac:	e7a6      	b.n	80061fc <_printf_i+0xf8>
 80062ae:	4824      	ldr	r0, [pc, #144]	; (8006340 <_printf_i+0x23c>)
 80062b0:	e7e4      	b.n	800627c <_printf_i+0x178>
 80062b2:	4615      	mov	r5, r2
 80062b4:	e7bd      	b.n	8006232 <_printf_i+0x12e>
 80062b6:	682b      	ldr	r3, [r5, #0]
 80062b8:	6826      	ldr	r6, [r4, #0]
 80062ba:	1d18      	adds	r0, r3, #4
 80062bc:	6961      	ldr	r1, [r4, #20]
 80062be:	6028      	str	r0, [r5, #0]
 80062c0:	0635      	lsls	r5, r6, #24
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	d501      	bpl.n	80062ca <_printf_i+0x1c6>
 80062c6:	6019      	str	r1, [r3, #0]
 80062c8:	e002      	b.n	80062d0 <_printf_i+0x1cc>
 80062ca:	0670      	lsls	r0, r6, #25
 80062cc:	d5fb      	bpl.n	80062c6 <_printf_i+0x1c2>
 80062ce:	8019      	strh	r1, [r3, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	4615      	mov	r5, r2
 80062d4:	6123      	str	r3, [r4, #16]
 80062d6:	e7bc      	b.n	8006252 <_printf_i+0x14e>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	2100      	movs	r1, #0
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	681d      	ldr	r5, [r3, #0]
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	4628      	mov	r0, r5
 80062e6:	f000 f9d4 	bl	8006692 <memchr>
 80062ea:	b108      	cbz	r0, 80062f0 <_printf_i+0x1ec>
 80062ec:	1b40      	subs	r0, r0, r5
 80062ee:	6060      	str	r0, [r4, #4]
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	2300      	movs	r3, #0
 80062f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fa:	e7aa      	b.n	8006252 <_printf_i+0x14e>
 80062fc:	462a      	mov	r2, r5
 80062fe:	4649      	mov	r1, r9
 8006300:	4640      	mov	r0, r8
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	47d0      	blx	sl
 8006306:	3001      	adds	r0, #1
 8006308:	d0ad      	beq.n	8006266 <_printf_i+0x162>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	079b      	lsls	r3, r3, #30
 800630e:	d413      	bmi.n	8006338 <_printf_i+0x234>
 8006310:	68e0      	ldr	r0, [r4, #12]
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	4298      	cmp	r0, r3
 8006316:	bfb8      	it	lt
 8006318:	4618      	movlt	r0, r3
 800631a:	e7a6      	b.n	800626a <_printf_i+0x166>
 800631c:	2301      	movs	r3, #1
 800631e:	4632      	mov	r2, r6
 8006320:	4649      	mov	r1, r9
 8006322:	4640      	mov	r0, r8
 8006324:	47d0      	blx	sl
 8006326:	3001      	adds	r0, #1
 8006328:	d09d      	beq.n	8006266 <_printf_i+0x162>
 800632a:	3501      	adds	r5, #1
 800632c:	68e3      	ldr	r3, [r4, #12]
 800632e:	9903      	ldr	r1, [sp, #12]
 8006330:	1a5b      	subs	r3, r3, r1
 8006332:	42ab      	cmp	r3, r5
 8006334:	dcf2      	bgt.n	800631c <_printf_i+0x218>
 8006336:	e7eb      	b.n	8006310 <_printf_i+0x20c>
 8006338:	2500      	movs	r5, #0
 800633a:	f104 0619 	add.w	r6, r4, #25
 800633e:	e7f5      	b.n	800632c <_printf_i+0x228>
 8006340:	080097c9 	.word	0x080097c9
 8006344:	080097da 	.word	0x080097da

08006348 <std>:
 8006348:	2300      	movs	r3, #0
 800634a:	b510      	push	{r4, lr}
 800634c:	4604      	mov	r4, r0
 800634e:	e9c0 3300 	strd	r3, r3, [r0]
 8006352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006356:	6083      	str	r3, [r0, #8]
 8006358:	8181      	strh	r1, [r0, #12]
 800635a:	6643      	str	r3, [r0, #100]	; 0x64
 800635c:	81c2      	strh	r2, [r0, #14]
 800635e:	6183      	str	r3, [r0, #24]
 8006360:	4619      	mov	r1, r3
 8006362:	2208      	movs	r2, #8
 8006364:	305c      	adds	r0, #92	; 0x5c
 8006366:	f000 f914 	bl	8006592 <memset>
 800636a:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <std+0x58>)
 800636c:	6224      	str	r4, [r4, #32]
 800636e:	6263      	str	r3, [r4, #36]	; 0x24
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <std+0x5c>)
 8006372:	62a3      	str	r3, [r4, #40]	; 0x28
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <std+0x60>)
 8006376:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <std+0x64>)
 800637a:	6323      	str	r3, [r4, #48]	; 0x30
 800637c:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <std+0x68>)
 800637e:	429c      	cmp	r4, r3
 8006380:	d006      	beq.n	8006390 <std+0x48>
 8006382:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006386:	4294      	cmp	r4, r2
 8006388:	d002      	beq.n	8006390 <std+0x48>
 800638a:	33d0      	adds	r3, #208	; 0xd0
 800638c:	429c      	cmp	r4, r3
 800638e:	d105      	bne.n	800639c <std+0x54>
 8006390:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006398:	f000 b978 	b.w	800668c <__retarget_lock_init_recursive>
 800639c:	bd10      	pop	{r4, pc}
 800639e:	bf00      	nop
 80063a0:	0800650d 	.word	0x0800650d
 80063a4:	0800652f 	.word	0x0800652f
 80063a8:	08006567 	.word	0x08006567
 80063ac:	0800658b 	.word	0x0800658b
 80063b0:	20000b74 	.word	0x20000b74

080063b4 <stdio_exit_handler>:
 80063b4:	4a02      	ldr	r2, [pc, #8]	; (80063c0 <stdio_exit_handler+0xc>)
 80063b6:	4903      	ldr	r1, [pc, #12]	; (80063c4 <stdio_exit_handler+0x10>)
 80063b8:	4803      	ldr	r0, [pc, #12]	; (80063c8 <stdio_exit_handler+0x14>)
 80063ba:	f000 b869 	b.w	8006490 <_fwalk_sglue>
 80063be:	bf00      	nop
 80063c0:	20000014 	.word	0x20000014
 80063c4:	08008025 	.word	0x08008025
 80063c8:	20000020 	.word	0x20000020

080063cc <cleanup_stdio>:
 80063cc:	6841      	ldr	r1, [r0, #4]
 80063ce:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <cleanup_stdio+0x34>)
 80063d0:	b510      	push	{r4, lr}
 80063d2:	4299      	cmp	r1, r3
 80063d4:	4604      	mov	r4, r0
 80063d6:	d001      	beq.n	80063dc <cleanup_stdio+0x10>
 80063d8:	f001 fe24 	bl	8008024 <_fflush_r>
 80063dc:	68a1      	ldr	r1, [r4, #8]
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <cleanup_stdio+0x38>)
 80063e0:	4299      	cmp	r1, r3
 80063e2:	d002      	beq.n	80063ea <cleanup_stdio+0x1e>
 80063e4:	4620      	mov	r0, r4
 80063e6:	f001 fe1d 	bl	8008024 <_fflush_r>
 80063ea:	68e1      	ldr	r1, [r4, #12]
 80063ec:	4b06      	ldr	r3, [pc, #24]	; (8006408 <cleanup_stdio+0x3c>)
 80063ee:	4299      	cmp	r1, r3
 80063f0:	d004      	beq.n	80063fc <cleanup_stdio+0x30>
 80063f2:	4620      	mov	r0, r4
 80063f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f8:	f001 be14 	b.w	8008024 <_fflush_r>
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	bf00      	nop
 8006400:	20000b74 	.word	0x20000b74
 8006404:	20000bdc 	.word	0x20000bdc
 8006408:	20000c44 	.word	0x20000c44

0800640c <global_stdio_init.part.0>:
 800640c:	b510      	push	{r4, lr}
 800640e:	4b0b      	ldr	r3, [pc, #44]	; (800643c <global_stdio_init.part.0+0x30>)
 8006410:	4c0b      	ldr	r4, [pc, #44]	; (8006440 <global_stdio_init.part.0+0x34>)
 8006412:	4a0c      	ldr	r2, [pc, #48]	; (8006444 <global_stdio_init.part.0+0x38>)
 8006414:	4620      	mov	r0, r4
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	2104      	movs	r1, #4
 800641a:	2200      	movs	r2, #0
 800641c:	f7ff ff94 	bl	8006348 <std>
 8006420:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006424:	2201      	movs	r2, #1
 8006426:	2109      	movs	r1, #9
 8006428:	f7ff ff8e 	bl	8006348 <std>
 800642c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006430:	2202      	movs	r2, #2
 8006432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006436:	2112      	movs	r1, #18
 8006438:	f7ff bf86 	b.w	8006348 <std>
 800643c:	20000cac 	.word	0x20000cac
 8006440:	20000b74 	.word	0x20000b74
 8006444:	080063b5 	.word	0x080063b5

08006448 <__sfp_lock_acquire>:
 8006448:	4801      	ldr	r0, [pc, #4]	; (8006450 <__sfp_lock_acquire+0x8>)
 800644a:	f000 b920 	b.w	800668e <__retarget_lock_acquire_recursive>
 800644e:	bf00      	nop
 8006450:	20000cb5 	.word	0x20000cb5

08006454 <__sfp_lock_release>:
 8006454:	4801      	ldr	r0, [pc, #4]	; (800645c <__sfp_lock_release+0x8>)
 8006456:	f000 b91b 	b.w	8006690 <__retarget_lock_release_recursive>
 800645a:	bf00      	nop
 800645c:	20000cb5 	.word	0x20000cb5

08006460 <__sinit>:
 8006460:	b510      	push	{r4, lr}
 8006462:	4604      	mov	r4, r0
 8006464:	f7ff fff0 	bl	8006448 <__sfp_lock_acquire>
 8006468:	6a23      	ldr	r3, [r4, #32]
 800646a:	b11b      	cbz	r3, 8006474 <__sinit+0x14>
 800646c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006470:	f7ff bff0 	b.w	8006454 <__sfp_lock_release>
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <__sinit+0x28>)
 8006476:	6223      	str	r3, [r4, #32]
 8006478:	4b04      	ldr	r3, [pc, #16]	; (800648c <__sinit+0x2c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1f5      	bne.n	800646c <__sinit+0xc>
 8006480:	f7ff ffc4 	bl	800640c <global_stdio_init.part.0>
 8006484:	e7f2      	b.n	800646c <__sinit+0xc>
 8006486:	bf00      	nop
 8006488:	080063cd 	.word	0x080063cd
 800648c:	20000cac 	.word	0x20000cac

08006490 <_fwalk_sglue>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	4607      	mov	r7, r0
 8006496:	4688      	mov	r8, r1
 8006498:	4614      	mov	r4, r2
 800649a:	2600      	movs	r6, #0
 800649c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064a0:	f1b9 0901 	subs.w	r9, r9, #1
 80064a4:	d505      	bpl.n	80064b2 <_fwalk_sglue+0x22>
 80064a6:	6824      	ldr	r4, [r4, #0]
 80064a8:	2c00      	cmp	r4, #0
 80064aa:	d1f7      	bne.n	800649c <_fwalk_sglue+0xc>
 80064ac:	4630      	mov	r0, r6
 80064ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b2:	89ab      	ldrh	r3, [r5, #12]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d907      	bls.n	80064c8 <_fwalk_sglue+0x38>
 80064b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064bc:	3301      	adds	r3, #1
 80064be:	d003      	beq.n	80064c8 <_fwalk_sglue+0x38>
 80064c0:	4629      	mov	r1, r5
 80064c2:	4638      	mov	r0, r7
 80064c4:	47c0      	blx	r8
 80064c6:	4306      	orrs	r6, r0
 80064c8:	3568      	adds	r5, #104	; 0x68
 80064ca:	e7e9      	b.n	80064a0 <_fwalk_sglue+0x10>

080064cc <siprintf>:
 80064cc:	b40e      	push	{r1, r2, r3}
 80064ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064d2:	b500      	push	{lr}
 80064d4:	b09c      	sub	sp, #112	; 0x70
 80064d6:	ab1d      	add	r3, sp, #116	; 0x74
 80064d8:	9002      	str	r0, [sp, #8]
 80064da:	9006      	str	r0, [sp, #24]
 80064dc:	9107      	str	r1, [sp, #28]
 80064de:	9104      	str	r1, [sp, #16]
 80064e0:	4808      	ldr	r0, [pc, #32]	; (8006504 <siprintf+0x38>)
 80064e2:	4909      	ldr	r1, [pc, #36]	; (8006508 <siprintf+0x3c>)
 80064e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e8:	9105      	str	r1, [sp, #20]
 80064ea:	6800      	ldr	r0, [r0, #0]
 80064ec:	a902      	add	r1, sp, #8
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	f001 fc18 	bl	8007d24 <_svfiprintf_r>
 80064f4:	2200      	movs	r2, #0
 80064f6:	9b02      	ldr	r3, [sp, #8]
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	b01c      	add	sp, #112	; 0x70
 80064fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006500:	b003      	add	sp, #12
 8006502:	4770      	bx	lr
 8006504:	2000006c 	.word	0x2000006c
 8006508:	ffff0208 	.word	0xffff0208

0800650c <__sread>:
 800650c:	b510      	push	{r4, lr}
 800650e:	460c      	mov	r4, r1
 8006510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006514:	f000 f86c 	bl	80065f0 <_read_r>
 8006518:	2800      	cmp	r0, #0
 800651a:	bfab      	itete	ge
 800651c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800651e:	89a3      	ldrhlt	r3, [r4, #12]
 8006520:	181b      	addge	r3, r3, r0
 8006522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006526:	bfac      	ite	ge
 8006528:	6563      	strge	r3, [r4, #84]	; 0x54
 800652a:	81a3      	strhlt	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__swrite>:
 800652e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006532:	461f      	mov	r7, r3
 8006534:	898b      	ldrh	r3, [r1, #12]
 8006536:	4605      	mov	r5, r0
 8006538:	05db      	lsls	r3, r3, #23
 800653a:	460c      	mov	r4, r1
 800653c:	4616      	mov	r6, r2
 800653e:	d505      	bpl.n	800654c <__swrite+0x1e>
 8006540:	2302      	movs	r3, #2
 8006542:	2200      	movs	r2, #0
 8006544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006548:	f000 f840 	bl	80065cc <_lseek_r>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	4632      	mov	r2, r6
 8006550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	4628      	mov	r0, r5
 8006558:	463b      	mov	r3, r7
 800655a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	f000 b857 	b.w	8006614 <_write_r>

08006566 <__sseek>:
 8006566:	b510      	push	{r4, lr}
 8006568:	460c      	mov	r4, r1
 800656a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656e:	f000 f82d 	bl	80065cc <_lseek_r>
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	bf15      	itete	ne
 8006578:	6560      	strne	r0, [r4, #84]	; 0x54
 800657a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800657e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006582:	81a3      	strheq	r3, [r4, #12]
 8006584:	bf18      	it	ne
 8006586:	81a3      	strhne	r3, [r4, #12]
 8006588:	bd10      	pop	{r4, pc}

0800658a <__sclose>:
 800658a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658e:	f000 b80d 	b.w	80065ac <_close_r>

08006592 <memset>:
 8006592:	4603      	mov	r3, r0
 8006594:	4402      	add	r2, r0
 8006596:	4293      	cmp	r3, r2
 8006598:	d100      	bne.n	800659c <memset+0xa>
 800659a:	4770      	bx	lr
 800659c:	f803 1b01 	strb.w	r1, [r3], #1
 80065a0:	e7f9      	b.n	8006596 <memset+0x4>
	...

080065a4 <_localeconv_r>:
 80065a4:	4800      	ldr	r0, [pc, #0]	; (80065a8 <_localeconv_r+0x4>)
 80065a6:	4770      	bx	lr
 80065a8:	20000160 	.word	0x20000160

080065ac <_close_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	2300      	movs	r3, #0
 80065b0:	4d05      	ldr	r5, [pc, #20]	; (80065c8 <_close_r+0x1c>)
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fc f89e 	bl	80026f8 <_close>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_close_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_close_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20000cb0 	.word	0x20000cb0

080065cc <_lseek_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	4611      	mov	r1, r2
 80065d4:	2200      	movs	r2, #0
 80065d6:	4d05      	ldr	r5, [pc, #20]	; (80065ec <_lseek_r+0x20>)
 80065d8:	602a      	str	r2, [r5, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	f7fc f8b0 	bl	8002740 <_lseek>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_lseek_r+0x1e>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_lseek_r+0x1e>
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	20000cb0 	.word	0x20000cb0

080065f0 <_read_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	2200      	movs	r2, #0
 80065fa:	4d05      	ldr	r5, [pc, #20]	; (8006610 <_read_r+0x20>)
 80065fc:	602a      	str	r2, [r5, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	f7fc f841 	bl	8002686 <_read>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	d102      	bne.n	800660e <_read_r+0x1e>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	b103      	cbz	r3, 800660e <_read_r+0x1e>
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	20000cb0 	.word	0x20000cb0

08006614 <_write_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	4611      	mov	r1, r2
 800661c:	2200      	movs	r2, #0
 800661e:	4d05      	ldr	r5, [pc, #20]	; (8006634 <_write_r+0x20>)
 8006620:	602a      	str	r2, [r5, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	f7fc f84c 	bl	80026c0 <_write>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_write_r+0x1e>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	b103      	cbz	r3, 8006632 <_write_r+0x1e>
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	20000cb0 	.word	0x20000cb0

08006638 <__errno>:
 8006638:	4b01      	ldr	r3, [pc, #4]	; (8006640 <__errno+0x8>)
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	2000006c 	.word	0x2000006c

08006644 <__libc_init_array>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	2600      	movs	r6, #0
 8006648:	4d0c      	ldr	r5, [pc, #48]	; (800667c <__libc_init_array+0x38>)
 800664a:	4c0d      	ldr	r4, [pc, #52]	; (8006680 <__libc_init_array+0x3c>)
 800664c:	1b64      	subs	r4, r4, r5
 800664e:	10a4      	asrs	r4, r4, #2
 8006650:	42a6      	cmp	r6, r4
 8006652:	d109      	bne.n	8006668 <__libc_init_array+0x24>
 8006654:	f002 ff8e 	bl	8009574 <_init>
 8006658:	2600      	movs	r6, #0
 800665a:	4d0a      	ldr	r5, [pc, #40]	; (8006684 <__libc_init_array+0x40>)
 800665c:	4c0a      	ldr	r4, [pc, #40]	; (8006688 <__libc_init_array+0x44>)
 800665e:	1b64      	subs	r4, r4, r5
 8006660:	10a4      	asrs	r4, r4, #2
 8006662:	42a6      	cmp	r6, r4
 8006664:	d105      	bne.n	8006672 <__libc_init_array+0x2e>
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	f855 3b04 	ldr.w	r3, [r5], #4
 800666c:	4798      	blx	r3
 800666e:	3601      	adds	r6, #1
 8006670:	e7ee      	b.n	8006650 <__libc_init_array+0xc>
 8006672:	f855 3b04 	ldr.w	r3, [r5], #4
 8006676:	4798      	blx	r3
 8006678:	3601      	adds	r6, #1
 800667a:	e7f2      	b.n	8006662 <__libc_init_array+0x1e>
 800667c:	08009a60 	.word	0x08009a60
 8006680:	08009a60 	.word	0x08009a60
 8006684:	08009a60 	.word	0x08009a60
 8006688:	08009a64 	.word	0x08009a64

0800668c <__retarget_lock_init_recursive>:
 800668c:	4770      	bx	lr

0800668e <__retarget_lock_acquire_recursive>:
 800668e:	4770      	bx	lr

08006690 <__retarget_lock_release_recursive>:
 8006690:	4770      	bx	lr

08006692 <memchr>:
 8006692:	4603      	mov	r3, r0
 8006694:	b510      	push	{r4, lr}
 8006696:	b2c9      	uxtb	r1, r1
 8006698:	4402      	add	r2, r0
 800669a:	4293      	cmp	r3, r2
 800669c:	4618      	mov	r0, r3
 800669e:	d101      	bne.n	80066a4 <memchr+0x12>
 80066a0:	2000      	movs	r0, #0
 80066a2:	e003      	b.n	80066ac <memchr+0x1a>
 80066a4:	7804      	ldrb	r4, [r0, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	428c      	cmp	r4, r1
 80066aa:	d1f6      	bne.n	800669a <memchr+0x8>
 80066ac:	bd10      	pop	{r4, pc}

080066ae <quorem>:
 80066ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b2:	6903      	ldr	r3, [r0, #16]
 80066b4:	690c      	ldr	r4, [r1, #16]
 80066b6:	4607      	mov	r7, r0
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	db7f      	blt.n	80067bc <quorem+0x10e>
 80066bc:	3c01      	subs	r4, #1
 80066be:	f100 0514 	add.w	r5, r0, #20
 80066c2:	f101 0814 	add.w	r8, r1, #20
 80066c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066d4:	3301      	adds	r3, #1
 80066d6:	429a      	cmp	r2, r3
 80066d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80066dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066e4:	d331      	bcc.n	800674a <quorem+0x9c>
 80066e6:	f04f 0e00 	mov.w	lr, #0
 80066ea:	4640      	mov	r0, r8
 80066ec:	46ac      	mov	ip, r5
 80066ee:	46f2      	mov	sl, lr
 80066f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80066f4:	b293      	uxth	r3, r2
 80066f6:	fb06 e303 	mla	r3, r6, r3, lr
 80066fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066fe:	0c1a      	lsrs	r2, r3, #16
 8006700:	b29b      	uxth	r3, r3
 8006702:	fb06 220e 	mla	r2, r6, lr, r2
 8006706:	ebaa 0303 	sub.w	r3, sl, r3
 800670a:	f8dc a000 	ldr.w	sl, [ip]
 800670e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006712:	fa1f fa8a 	uxth.w	sl, sl
 8006716:	4453      	add	r3, sl
 8006718:	f8dc a000 	ldr.w	sl, [ip]
 800671c:	b292      	uxth	r2, r2
 800671e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006722:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006726:	b29b      	uxth	r3, r3
 8006728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800672c:	4581      	cmp	r9, r0
 800672e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006732:	f84c 3b04 	str.w	r3, [ip], #4
 8006736:	d2db      	bcs.n	80066f0 <quorem+0x42>
 8006738:	f855 300b 	ldr.w	r3, [r5, fp]
 800673c:	b92b      	cbnz	r3, 800674a <quorem+0x9c>
 800673e:	9b01      	ldr	r3, [sp, #4]
 8006740:	3b04      	subs	r3, #4
 8006742:	429d      	cmp	r5, r3
 8006744:	461a      	mov	r2, r3
 8006746:	d32d      	bcc.n	80067a4 <quorem+0xf6>
 8006748:	613c      	str	r4, [r7, #16]
 800674a:	4638      	mov	r0, r7
 800674c:	f001 f992 	bl	8007a74 <__mcmp>
 8006750:	2800      	cmp	r0, #0
 8006752:	db23      	blt.n	800679c <quorem+0xee>
 8006754:	4629      	mov	r1, r5
 8006756:	2000      	movs	r0, #0
 8006758:	3601      	adds	r6, #1
 800675a:	f858 2b04 	ldr.w	r2, [r8], #4
 800675e:	f8d1 c000 	ldr.w	ip, [r1]
 8006762:	b293      	uxth	r3, r2
 8006764:	1ac3      	subs	r3, r0, r3
 8006766:	0c12      	lsrs	r2, r2, #16
 8006768:	fa1f f08c 	uxth.w	r0, ip
 800676c:	4403      	add	r3, r0
 800676e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006772:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006776:	b29b      	uxth	r3, r3
 8006778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800677c:	45c1      	cmp	r9, r8
 800677e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006782:	f841 3b04 	str.w	r3, [r1], #4
 8006786:	d2e8      	bcs.n	800675a <quorem+0xac>
 8006788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800678c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006790:	b922      	cbnz	r2, 800679c <quorem+0xee>
 8006792:	3b04      	subs	r3, #4
 8006794:	429d      	cmp	r5, r3
 8006796:	461a      	mov	r2, r3
 8006798:	d30a      	bcc.n	80067b0 <quorem+0x102>
 800679a:	613c      	str	r4, [r7, #16]
 800679c:	4630      	mov	r0, r6
 800679e:	b003      	add	sp, #12
 80067a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	3b04      	subs	r3, #4
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	d1cd      	bne.n	8006748 <quorem+0x9a>
 80067ac:	3c01      	subs	r4, #1
 80067ae:	e7c8      	b.n	8006742 <quorem+0x94>
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	3b04      	subs	r3, #4
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	d1f0      	bne.n	800679a <quorem+0xec>
 80067b8:	3c01      	subs	r4, #1
 80067ba:	e7eb      	b.n	8006794 <quorem+0xe6>
 80067bc:	2000      	movs	r0, #0
 80067be:	e7ee      	b.n	800679e <quorem+0xf0>

080067c0 <_dtoa_r>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	4616      	mov	r6, r2
 80067c6:	461f      	mov	r7, r3
 80067c8:	69c4      	ldr	r4, [r0, #28]
 80067ca:	b099      	sub	sp, #100	; 0x64
 80067cc:	4605      	mov	r5, r0
 80067ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80067d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80067d6:	b974      	cbnz	r4, 80067f6 <_dtoa_r+0x36>
 80067d8:	2010      	movs	r0, #16
 80067da:	f000 fe1d 	bl	8007418 <malloc>
 80067de:	4602      	mov	r2, r0
 80067e0:	61e8      	str	r0, [r5, #28]
 80067e2:	b920      	cbnz	r0, 80067ee <_dtoa_r+0x2e>
 80067e4:	21ef      	movs	r1, #239	; 0xef
 80067e6:	4bac      	ldr	r3, [pc, #688]	; (8006a98 <_dtoa_r+0x2d8>)
 80067e8:	48ac      	ldr	r0, [pc, #688]	; (8006a9c <_dtoa_r+0x2dc>)
 80067ea:	f001 fc7b 	bl	80080e4 <__assert_func>
 80067ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067f2:	6004      	str	r4, [r0, #0]
 80067f4:	60c4      	str	r4, [r0, #12]
 80067f6:	69eb      	ldr	r3, [r5, #28]
 80067f8:	6819      	ldr	r1, [r3, #0]
 80067fa:	b151      	cbz	r1, 8006812 <_dtoa_r+0x52>
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	2301      	movs	r3, #1
 8006800:	4093      	lsls	r3, r2
 8006802:	604a      	str	r2, [r1, #4]
 8006804:	608b      	str	r3, [r1, #8]
 8006806:	4628      	mov	r0, r5
 8006808:	f000 fefa 	bl	8007600 <_Bfree>
 800680c:	2200      	movs	r2, #0
 800680e:	69eb      	ldr	r3, [r5, #28]
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	1e3b      	subs	r3, r7, #0
 8006814:	bfaf      	iteee	ge
 8006816:	2300      	movge	r3, #0
 8006818:	2201      	movlt	r2, #1
 800681a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800681e:	9305      	strlt	r3, [sp, #20]
 8006820:	bfa8      	it	ge
 8006822:	f8c8 3000 	strge.w	r3, [r8]
 8006826:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800682a:	4b9d      	ldr	r3, [pc, #628]	; (8006aa0 <_dtoa_r+0x2e0>)
 800682c:	bfb8      	it	lt
 800682e:	f8c8 2000 	strlt.w	r2, [r8]
 8006832:	ea33 0309 	bics.w	r3, r3, r9
 8006836:	d119      	bne.n	800686c <_dtoa_r+0xac>
 8006838:	f242 730f 	movw	r3, #9999	; 0x270f
 800683c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006844:	4333      	orrs	r3, r6
 8006846:	f000 8589 	beq.w	800735c <_dtoa_r+0xb9c>
 800684a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800684c:	b953      	cbnz	r3, 8006864 <_dtoa_r+0xa4>
 800684e:	4b95      	ldr	r3, [pc, #596]	; (8006aa4 <_dtoa_r+0x2e4>)
 8006850:	e023      	b.n	800689a <_dtoa_r+0xda>
 8006852:	4b95      	ldr	r3, [pc, #596]	; (8006aa8 <_dtoa_r+0x2e8>)
 8006854:	9303      	str	r3, [sp, #12]
 8006856:	3308      	adds	r3, #8
 8006858:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	9803      	ldr	r0, [sp, #12]
 800685e:	b019      	add	sp, #100	; 0x64
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	4b8f      	ldr	r3, [pc, #572]	; (8006aa4 <_dtoa_r+0x2e4>)
 8006866:	9303      	str	r3, [sp, #12]
 8006868:	3303      	adds	r3, #3
 800686a:	e7f5      	b.n	8006858 <_dtoa_r+0x98>
 800686c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006870:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006878:	2200      	movs	r2, #0
 800687a:	2300      	movs	r3, #0
 800687c:	f7fa f894 	bl	80009a8 <__aeabi_dcmpeq>
 8006880:	4680      	mov	r8, r0
 8006882:	b160      	cbz	r0, 800689e <_dtoa_r+0xde>
 8006884:	2301      	movs	r3, #1
 8006886:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8562 	beq.w	8007356 <_dtoa_r+0xb96>
 8006892:	4b86      	ldr	r3, [pc, #536]	; (8006aac <_dtoa_r+0x2ec>)
 8006894:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	3b01      	subs	r3, #1
 800689a:	9303      	str	r3, [sp, #12]
 800689c:	e7de      	b.n	800685c <_dtoa_r+0x9c>
 800689e:	ab16      	add	r3, sp, #88	; 0x58
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	ab17      	add	r3, sp, #92	; 0x5c
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4628      	mov	r0, r5
 80068a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80068ac:	f001 f98a 	bl	8007bc4 <__d2b>
 80068b0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80068b4:	4682      	mov	sl, r0
 80068b6:	2c00      	cmp	r4, #0
 80068b8:	d07e      	beq.n	80069b8 <_dtoa_r+0x1f8>
 80068ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80068c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80068cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80068d0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80068d4:	4619      	mov	r1, r3
 80068d6:	2200      	movs	r2, #0
 80068d8:	4b75      	ldr	r3, [pc, #468]	; (8006ab0 <_dtoa_r+0x2f0>)
 80068da:	f7f9 fc45 	bl	8000168 <__aeabi_dsub>
 80068de:	a368      	add	r3, pc, #416	; (adr r3, 8006a80 <_dtoa_r+0x2c0>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f7f9 fdf8 	bl	80004d8 <__aeabi_dmul>
 80068e8:	a367      	add	r3, pc, #412	; (adr r3, 8006a88 <_dtoa_r+0x2c8>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 fc3d 	bl	800016c <__adddf3>
 80068f2:	4606      	mov	r6, r0
 80068f4:	4620      	mov	r0, r4
 80068f6:	460f      	mov	r7, r1
 80068f8:	f7f9 fd84 	bl	8000404 <__aeabi_i2d>
 80068fc:	a364      	add	r3, pc, #400	; (adr r3, 8006a90 <_dtoa_r+0x2d0>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f7f9 fde9 	bl	80004d8 <__aeabi_dmul>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4630      	mov	r0, r6
 800690c:	4639      	mov	r1, r7
 800690e:	f7f9 fc2d 	bl	800016c <__adddf3>
 8006912:	4606      	mov	r6, r0
 8006914:	460f      	mov	r7, r1
 8006916:	f7fa f88f 	bl	8000a38 <__aeabi_d2iz>
 800691a:	2200      	movs	r2, #0
 800691c:	4683      	mov	fp, r0
 800691e:	2300      	movs	r3, #0
 8006920:	4630      	mov	r0, r6
 8006922:	4639      	mov	r1, r7
 8006924:	f7fa f84a 	bl	80009bc <__aeabi_dcmplt>
 8006928:	b148      	cbz	r0, 800693e <_dtoa_r+0x17e>
 800692a:	4658      	mov	r0, fp
 800692c:	f7f9 fd6a 	bl	8000404 <__aeabi_i2d>
 8006930:	4632      	mov	r2, r6
 8006932:	463b      	mov	r3, r7
 8006934:	f7fa f838 	bl	80009a8 <__aeabi_dcmpeq>
 8006938:	b908      	cbnz	r0, 800693e <_dtoa_r+0x17e>
 800693a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800693e:	f1bb 0f16 	cmp.w	fp, #22
 8006942:	d857      	bhi.n	80069f4 <_dtoa_r+0x234>
 8006944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006948:	4b5a      	ldr	r3, [pc, #360]	; (8006ab4 <_dtoa_r+0x2f4>)
 800694a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7fa f833 	bl	80009bc <__aeabi_dcmplt>
 8006956:	2800      	cmp	r0, #0
 8006958:	d04e      	beq.n	80069f8 <_dtoa_r+0x238>
 800695a:	2300      	movs	r3, #0
 800695c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006960:	930f      	str	r3, [sp, #60]	; 0x3c
 8006962:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006964:	1b1b      	subs	r3, r3, r4
 8006966:	1e5a      	subs	r2, r3, #1
 8006968:	bf46      	itte	mi
 800696a:	f1c3 0901 	rsbmi	r9, r3, #1
 800696e:	2300      	movmi	r3, #0
 8006970:	f04f 0900 	movpl.w	r9, #0
 8006974:	9209      	str	r2, [sp, #36]	; 0x24
 8006976:	bf48      	it	mi
 8006978:	9309      	strmi	r3, [sp, #36]	; 0x24
 800697a:	f1bb 0f00 	cmp.w	fp, #0
 800697e:	db3d      	blt.n	80069fc <_dtoa_r+0x23c>
 8006980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006982:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006986:	445b      	add	r3, fp
 8006988:	9309      	str	r3, [sp, #36]	; 0x24
 800698a:	2300      	movs	r3, #0
 800698c:	930a      	str	r3, [sp, #40]	; 0x28
 800698e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006990:	2b09      	cmp	r3, #9
 8006992:	d867      	bhi.n	8006a64 <_dtoa_r+0x2a4>
 8006994:	2b05      	cmp	r3, #5
 8006996:	bfc4      	itt	gt
 8006998:	3b04      	subgt	r3, #4
 800699a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800699c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800699e:	bfc8      	it	gt
 80069a0:	2400      	movgt	r4, #0
 80069a2:	f1a3 0302 	sub.w	r3, r3, #2
 80069a6:	bfd8      	it	le
 80069a8:	2401      	movle	r4, #1
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	f200 8086 	bhi.w	8006abc <_dtoa_r+0x2fc>
 80069b0:	e8df f003 	tbb	[pc, r3]
 80069b4:	5637392c 	.word	0x5637392c
 80069b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80069bc:	441c      	add	r4, r3
 80069be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	bfc1      	itttt	gt
 80069c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069ca:	fa09 f903 	lslgt.w	r9, r9, r3
 80069ce:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80069d2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80069d6:	bfd6      	itet	le
 80069d8:	f1c3 0320 	rsble	r3, r3, #32
 80069dc:	ea49 0003 	orrgt.w	r0, r9, r3
 80069e0:	fa06 f003 	lslle.w	r0, r6, r3
 80069e4:	f7f9 fcfe 	bl	80003e4 <__aeabi_ui2d>
 80069e8:	2201      	movs	r2, #1
 80069ea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80069ee:	3c01      	subs	r4, #1
 80069f0:	9213      	str	r2, [sp, #76]	; 0x4c
 80069f2:	e76f      	b.n	80068d4 <_dtoa_r+0x114>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e7b3      	b.n	8006960 <_dtoa_r+0x1a0>
 80069f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80069fa:	e7b2      	b.n	8006962 <_dtoa_r+0x1a2>
 80069fc:	f1cb 0300 	rsb	r3, fp, #0
 8006a00:	930a      	str	r3, [sp, #40]	; 0x28
 8006a02:	2300      	movs	r3, #0
 8006a04:	eba9 090b 	sub.w	r9, r9, fp
 8006a08:	930e      	str	r3, [sp, #56]	; 0x38
 8006a0a:	e7c0      	b.n	800698e <_dtoa_r+0x1ce>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dc55      	bgt.n	8006ac2 <_dtoa_r+0x302>
 8006a16:	2301      	movs	r3, #1
 8006a18:	461a      	mov	r2, r3
 8006a1a:	9306      	str	r3, [sp, #24]
 8006a1c:	9308      	str	r3, [sp, #32]
 8006a1e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006a20:	e00b      	b.n	8006a3a <_dtoa_r+0x27a>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e7f3      	b.n	8006a0e <_dtoa_r+0x24e>
 8006a26:	2300      	movs	r3, #0
 8006a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a2c:	445b      	add	r3, fp
 8006a2e:	9306      	str	r3, [sp, #24]
 8006a30:	3301      	adds	r3, #1
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	9308      	str	r3, [sp, #32]
 8006a36:	bfb8      	it	lt
 8006a38:	2301      	movlt	r3, #1
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	69e8      	ldr	r0, [r5, #28]
 8006a40:	f102 0614 	add.w	r6, r2, #20
 8006a44:	429e      	cmp	r6, r3
 8006a46:	d940      	bls.n	8006aca <_dtoa_r+0x30a>
 8006a48:	6041      	str	r1, [r0, #4]
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f000 fd98 	bl	8007580 <_Balloc>
 8006a50:	9003      	str	r0, [sp, #12]
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d13c      	bne.n	8006ad0 <_dtoa_r+0x310>
 8006a56:	4602      	mov	r2, r0
 8006a58:	f240 11af 	movw	r1, #431	; 0x1af
 8006a5c:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <_dtoa_r+0x2f8>)
 8006a5e:	e6c3      	b.n	80067e8 <_dtoa_r+0x28>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e7e1      	b.n	8006a28 <_dtoa_r+0x268>
 8006a64:	2401      	movs	r4, #1
 8006a66:	2300      	movs	r3, #0
 8006a68:	940b      	str	r4, [sp, #44]	; 0x2c
 8006a6a:	9322      	str	r3, [sp, #136]	; 0x88
 8006a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a70:	2200      	movs	r2, #0
 8006a72:	9306      	str	r3, [sp, #24]
 8006a74:	9308      	str	r3, [sp, #32]
 8006a76:	2312      	movs	r3, #18
 8006a78:	e7d1      	b.n	8006a1e <_dtoa_r+0x25e>
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w
 8006a80:	636f4361 	.word	0x636f4361
 8006a84:	3fd287a7 	.word	0x3fd287a7
 8006a88:	8b60c8b3 	.word	0x8b60c8b3
 8006a8c:	3fc68a28 	.word	0x3fc68a28
 8006a90:	509f79fb 	.word	0x509f79fb
 8006a94:	3fd34413 	.word	0x3fd34413
 8006a98:	080097f8 	.word	0x080097f8
 8006a9c:	0800980f 	.word	0x0800980f
 8006aa0:	7ff00000 	.word	0x7ff00000
 8006aa4:	080097f4 	.word	0x080097f4
 8006aa8:	080097eb 	.word	0x080097eb
 8006aac:	080097c8 	.word	0x080097c8
 8006ab0:	3ff80000 	.word	0x3ff80000
 8006ab4:	08009900 	.word	0x08009900
 8006ab8:	08009867 	.word	0x08009867
 8006abc:	2301      	movs	r3, #1
 8006abe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ac0:	e7d4      	b.n	8006a6c <_dtoa_r+0x2ac>
 8006ac2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ac4:	9306      	str	r3, [sp, #24]
 8006ac6:	9308      	str	r3, [sp, #32]
 8006ac8:	e7b7      	b.n	8006a3a <_dtoa_r+0x27a>
 8006aca:	3101      	adds	r1, #1
 8006acc:	0052      	lsls	r2, r2, #1
 8006ace:	e7b7      	b.n	8006a40 <_dtoa_r+0x280>
 8006ad0:	69eb      	ldr	r3, [r5, #28]
 8006ad2:	9a03      	ldr	r2, [sp, #12]
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	9b08      	ldr	r3, [sp, #32]
 8006ad8:	2b0e      	cmp	r3, #14
 8006ada:	f200 80a8 	bhi.w	8006c2e <_dtoa_r+0x46e>
 8006ade:	2c00      	cmp	r4, #0
 8006ae0:	f000 80a5 	beq.w	8006c2e <_dtoa_r+0x46e>
 8006ae4:	f1bb 0f00 	cmp.w	fp, #0
 8006ae8:	dd34      	ble.n	8006b54 <_dtoa_r+0x394>
 8006aea:	4b9a      	ldr	r3, [pc, #616]	; (8006d54 <_dtoa_r+0x594>)
 8006aec:	f00b 020f 	and.w	r2, fp, #15
 8006af0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006af8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006afc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b00:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006b04:	d016      	beq.n	8006b34 <_dtoa_r+0x374>
 8006b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b0a:	4b93      	ldr	r3, [pc, #588]	; (8006d58 <_dtoa_r+0x598>)
 8006b0c:	2703      	movs	r7, #3
 8006b0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b12:	f7f9 fe0b 	bl	800072c <__aeabi_ddiv>
 8006b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b1a:	f004 040f 	and.w	r4, r4, #15
 8006b1e:	4e8e      	ldr	r6, [pc, #568]	; (8006d58 <_dtoa_r+0x598>)
 8006b20:	b954      	cbnz	r4, 8006b38 <_dtoa_r+0x378>
 8006b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b2a:	f7f9 fdff 	bl	800072c <__aeabi_ddiv>
 8006b2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b32:	e029      	b.n	8006b88 <_dtoa_r+0x3c8>
 8006b34:	2702      	movs	r7, #2
 8006b36:	e7f2      	b.n	8006b1e <_dtoa_r+0x35e>
 8006b38:	07e1      	lsls	r1, r4, #31
 8006b3a:	d508      	bpl.n	8006b4e <_dtoa_r+0x38e>
 8006b3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b44:	f7f9 fcc8 	bl	80004d8 <__aeabi_dmul>
 8006b48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b4c:	3701      	adds	r7, #1
 8006b4e:	1064      	asrs	r4, r4, #1
 8006b50:	3608      	adds	r6, #8
 8006b52:	e7e5      	b.n	8006b20 <_dtoa_r+0x360>
 8006b54:	f000 80a5 	beq.w	8006ca2 <_dtoa_r+0x4e2>
 8006b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b5c:	f1cb 0400 	rsb	r4, fp, #0
 8006b60:	4b7c      	ldr	r3, [pc, #496]	; (8006d54 <_dtoa_r+0x594>)
 8006b62:	f004 020f 	and.w	r2, r4, #15
 8006b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f7f9 fcb3 	bl	80004d8 <__aeabi_dmul>
 8006b72:	2702      	movs	r7, #2
 8006b74:	2300      	movs	r3, #0
 8006b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b7a:	4e77      	ldr	r6, [pc, #476]	; (8006d58 <_dtoa_r+0x598>)
 8006b7c:	1124      	asrs	r4, r4, #4
 8006b7e:	2c00      	cmp	r4, #0
 8006b80:	f040 8084 	bne.w	8006c8c <_dtoa_r+0x4cc>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1d2      	bne.n	8006b2e <_dtoa_r+0x36e>
 8006b88:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006b8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8087 	beq.w	8006ca6 <_dtoa_r+0x4e6>
 8006b98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4b6f      	ldr	r3, [pc, #444]	; (8006d5c <_dtoa_r+0x59c>)
 8006ba0:	f7f9 ff0c 	bl	80009bc <__aeabi_dcmplt>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d07e      	beq.n	8006ca6 <_dtoa_r+0x4e6>
 8006ba8:	9b08      	ldr	r3, [sp, #32]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d07b      	beq.n	8006ca6 <_dtoa_r+0x4e6>
 8006bae:	9b06      	ldr	r3, [sp, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dd38      	ble.n	8006c26 <_dtoa_r+0x466>
 8006bb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4b69      	ldr	r3, [pc, #420]	; (8006d60 <_dtoa_r+0x5a0>)
 8006bbc:	f7f9 fc8c 	bl	80004d8 <__aeabi_dmul>
 8006bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc4:	9c06      	ldr	r4, [sp, #24]
 8006bc6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006bca:	3701      	adds	r7, #1
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f7f9 fc19 	bl	8000404 <__aeabi_i2d>
 8006bd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bd6:	f7f9 fc7f 	bl	80004d8 <__aeabi_dmul>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4b61      	ldr	r3, [pc, #388]	; (8006d64 <_dtoa_r+0x5a4>)
 8006bde:	f7f9 fac5 	bl	800016c <__adddf3>
 8006be2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006be6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bea:	9611      	str	r6, [sp, #68]	; 0x44
 8006bec:	2c00      	cmp	r4, #0
 8006bee:	d15d      	bne.n	8006cac <_dtoa_r+0x4ec>
 8006bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4b5c      	ldr	r3, [pc, #368]	; (8006d68 <_dtoa_r+0x5a8>)
 8006bf8:	f7f9 fab6 	bl	8000168 <__aeabi_dsub>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c04:	4633      	mov	r3, r6
 8006c06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c08:	f7f9 fef6 	bl	80009f8 <__aeabi_dcmpgt>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	f040 8295 	bne.w	800713c <_dtoa_r+0x97c>
 8006c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006c1c:	f7f9 fece 	bl	80009bc <__aeabi_dcmplt>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f040 8289 	bne.w	8007138 <_dtoa_r+0x978>
 8006c26:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006c2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f2c0 8151 	blt.w	8006ed8 <_dtoa_r+0x718>
 8006c36:	f1bb 0f0e 	cmp.w	fp, #14
 8006c3a:	f300 814d 	bgt.w	8006ed8 <_dtoa_r+0x718>
 8006c3e:	4b45      	ldr	r3, [pc, #276]	; (8006d54 <_dtoa_r+0x594>)
 8006c40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c48:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006c4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f280 80da 	bge.w	8006e08 <_dtoa_r+0x648>
 8006c54:	9b08      	ldr	r3, [sp, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f300 80d6 	bgt.w	8006e08 <_dtoa_r+0x648>
 8006c5c:	f040 826b 	bne.w	8007136 <_dtoa_r+0x976>
 8006c60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c64:	2200      	movs	r2, #0
 8006c66:	4b40      	ldr	r3, [pc, #256]	; (8006d68 <_dtoa_r+0x5a8>)
 8006c68:	f7f9 fc36 	bl	80004d8 <__aeabi_dmul>
 8006c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c70:	f7f9 feb8 	bl	80009e4 <__aeabi_dcmpge>
 8006c74:	9c08      	ldr	r4, [sp, #32]
 8006c76:	4626      	mov	r6, r4
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	f040 8241 	bne.w	8007100 <_dtoa_r+0x940>
 8006c7e:	2331      	movs	r3, #49	; 0x31
 8006c80:	9f03      	ldr	r7, [sp, #12]
 8006c82:	f10b 0b01 	add.w	fp, fp, #1
 8006c86:	f807 3b01 	strb.w	r3, [r7], #1
 8006c8a:	e23d      	b.n	8007108 <_dtoa_r+0x948>
 8006c8c:	07e2      	lsls	r2, r4, #31
 8006c8e:	d505      	bpl.n	8006c9c <_dtoa_r+0x4dc>
 8006c90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c94:	f7f9 fc20 	bl	80004d8 <__aeabi_dmul>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	3701      	adds	r7, #1
 8006c9c:	1064      	asrs	r4, r4, #1
 8006c9e:	3608      	adds	r6, #8
 8006ca0:	e76d      	b.n	8006b7e <_dtoa_r+0x3be>
 8006ca2:	2702      	movs	r7, #2
 8006ca4:	e770      	b.n	8006b88 <_dtoa_r+0x3c8>
 8006ca6:	46d8      	mov	r8, fp
 8006ca8:	9c08      	ldr	r4, [sp, #32]
 8006caa:	e78f      	b.n	8006bcc <_dtoa_r+0x40c>
 8006cac:	9903      	ldr	r1, [sp, #12]
 8006cae:	4b29      	ldr	r3, [pc, #164]	; (8006d54 <_dtoa_r+0x594>)
 8006cb0:	4421      	add	r1, r4
 8006cb2:	9112      	str	r1, [sp, #72]	; 0x48
 8006cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cb6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006cbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cc2:	2900      	cmp	r1, #0
 8006cc4:	d054      	beq.n	8006d70 <_dtoa_r+0x5b0>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	4928      	ldr	r1, [pc, #160]	; (8006d6c <_dtoa_r+0x5ac>)
 8006cca:	f7f9 fd2f 	bl	800072c <__aeabi_ddiv>
 8006cce:	463b      	mov	r3, r7
 8006cd0:	4632      	mov	r2, r6
 8006cd2:	f7f9 fa49 	bl	8000168 <__aeabi_dsub>
 8006cd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cda:	9f03      	ldr	r7, [sp, #12]
 8006cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ce0:	f7f9 feaa 	bl	8000a38 <__aeabi_d2iz>
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	f7f9 fb8d 	bl	8000404 <__aeabi_i2d>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cf2:	f7f9 fa39 	bl	8000168 <__aeabi_dsub>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	3430      	adds	r4, #48	; 0x30
 8006cfc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d04:	f807 4b01 	strb.w	r4, [r7], #1
 8006d08:	f7f9 fe58 	bl	80009bc <__aeabi_dcmplt>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d173      	bne.n	8006df8 <_dtoa_r+0x638>
 8006d10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d14:	2000      	movs	r0, #0
 8006d16:	4911      	ldr	r1, [pc, #68]	; (8006d5c <_dtoa_r+0x59c>)
 8006d18:	f7f9 fa26 	bl	8000168 <__aeabi_dsub>
 8006d1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d20:	f7f9 fe4c 	bl	80009bc <__aeabi_dcmplt>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	f040 80b6 	bne.w	8006e96 <_dtoa_r+0x6d6>
 8006d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d2c:	429f      	cmp	r7, r3
 8006d2e:	f43f af7a 	beq.w	8006c26 <_dtoa_r+0x466>
 8006d32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d36:	2200      	movs	r2, #0
 8006d38:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <_dtoa_r+0x5a0>)
 8006d3a:	f7f9 fbcd 	bl	80004d8 <__aeabi_dmul>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <_dtoa_r+0x5a0>)
 8006d4a:	f7f9 fbc5 	bl	80004d8 <__aeabi_dmul>
 8006d4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d52:	e7c3      	b.n	8006cdc <_dtoa_r+0x51c>
 8006d54:	08009900 	.word	0x08009900
 8006d58:	080098d8 	.word	0x080098d8
 8006d5c:	3ff00000 	.word	0x3ff00000
 8006d60:	40240000 	.word	0x40240000
 8006d64:	401c0000 	.word	0x401c0000
 8006d68:	40140000 	.word	0x40140000
 8006d6c:	3fe00000 	.word	0x3fe00000
 8006d70:	4630      	mov	r0, r6
 8006d72:	4639      	mov	r1, r7
 8006d74:	f7f9 fbb0 	bl	80004d8 <__aeabi_dmul>
 8006d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d7e:	9c03      	ldr	r4, [sp, #12]
 8006d80:	9314      	str	r3, [sp, #80]	; 0x50
 8006d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d86:	f7f9 fe57 	bl	8000a38 <__aeabi_d2iz>
 8006d8a:	9015      	str	r0, [sp, #84]	; 0x54
 8006d8c:	f7f9 fb3a 	bl	8000404 <__aeabi_i2d>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d98:	f7f9 f9e6 	bl	8000168 <__aeabi_dsub>
 8006d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d9e:	4606      	mov	r6, r0
 8006da0:	3330      	adds	r3, #48	; 0x30
 8006da2:	f804 3b01 	strb.w	r3, [r4], #1
 8006da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006da8:	460f      	mov	r7, r1
 8006daa:	429c      	cmp	r4, r3
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	d124      	bne.n	8006dfc <_dtoa_r+0x63c>
 8006db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006db6:	4baf      	ldr	r3, [pc, #700]	; (8007074 <_dtoa_r+0x8b4>)
 8006db8:	f7f9 f9d8 	bl	800016c <__adddf3>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 fe18 	bl	80009f8 <__aeabi_dcmpgt>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d163      	bne.n	8006e94 <_dtoa_r+0x6d4>
 8006dcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	49a8      	ldr	r1, [pc, #672]	; (8007074 <_dtoa_r+0x8b4>)
 8006dd4:	f7f9 f9c8 	bl	8000168 <__aeabi_dsub>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4630      	mov	r0, r6
 8006dde:	4639      	mov	r1, r7
 8006de0:	f7f9 fdec 	bl	80009bc <__aeabi_dcmplt>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	f43f af1e 	beq.w	8006c26 <_dtoa_r+0x466>
 8006dea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006dec:	1e7b      	subs	r3, r7, #1
 8006dee:	9314      	str	r3, [sp, #80]	; 0x50
 8006df0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006df4:	2b30      	cmp	r3, #48	; 0x30
 8006df6:	d0f8      	beq.n	8006dea <_dtoa_r+0x62a>
 8006df8:	46c3      	mov	fp, r8
 8006dfa:	e03b      	b.n	8006e74 <_dtoa_r+0x6b4>
 8006dfc:	4b9e      	ldr	r3, [pc, #632]	; (8007078 <_dtoa_r+0x8b8>)
 8006dfe:	f7f9 fb6b 	bl	80004d8 <__aeabi_dmul>
 8006e02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e06:	e7bc      	b.n	8006d82 <_dtoa_r+0x5c2>
 8006e08:	9f03      	ldr	r7, [sp, #12]
 8006e0a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fc89 	bl	800072c <__aeabi_ddiv>
 8006e1a:	f7f9 fe0d 	bl	8000a38 <__aeabi_d2iz>
 8006e1e:	4604      	mov	r4, r0
 8006e20:	f7f9 faf0 	bl	8000404 <__aeabi_i2d>
 8006e24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e28:	f7f9 fb56 	bl	80004d8 <__aeabi_dmul>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4640      	mov	r0, r8
 8006e32:	4649      	mov	r1, r9
 8006e34:	f7f9 f998 	bl	8000168 <__aeabi_dsub>
 8006e38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006e3c:	f807 6b01 	strb.w	r6, [r7], #1
 8006e40:	9e03      	ldr	r6, [sp, #12]
 8006e42:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006e46:	1bbe      	subs	r6, r7, r6
 8006e48:	45b4      	cmp	ip, r6
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	d136      	bne.n	8006ebe <_dtoa_r+0x6fe>
 8006e50:	f7f9 f98c 	bl	800016c <__adddf3>
 8006e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e58:	4680      	mov	r8, r0
 8006e5a:	4689      	mov	r9, r1
 8006e5c:	f7f9 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8006e60:	bb58      	cbnz	r0, 8006eba <_dtoa_r+0x6fa>
 8006e62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e66:	4640      	mov	r0, r8
 8006e68:	4649      	mov	r1, r9
 8006e6a:	f7f9 fd9d 	bl	80009a8 <__aeabi_dcmpeq>
 8006e6e:	b108      	cbz	r0, 8006e74 <_dtoa_r+0x6b4>
 8006e70:	07e3      	lsls	r3, r4, #31
 8006e72:	d422      	bmi.n	8006eba <_dtoa_r+0x6fa>
 8006e74:	4651      	mov	r1, sl
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 fbc2 	bl	8007600 <_Bfree>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e80:	703b      	strb	r3, [r7, #0]
 8006e82:	f10b 0301 	add.w	r3, fp, #1
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f43f ace6 	beq.w	800685c <_dtoa_r+0x9c>
 8006e90:	601f      	str	r7, [r3, #0]
 8006e92:	e4e3      	b.n	800685c <_dtoa_r+0x9c>
 8006e94:	4627      	mov	r7, r4
 8006e96:	463b      	mov	r3, r7
 8006e98:	461f      	mov	r7, r3
 8006e9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e9e:	2a39      	cmp	r2, #57	; 0x39
 8006ea0:	d107      	bne.n	8006eb2 <_dtoa_r+0x6f2>
 8006ea2:	9a03      	ldr	r2, [sp, #12]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d1f7      	bne.n	8006e98 <_dtoa_r+0x6d8>
 8006ea8:	2230      	movs	r2, #48	; 0x30
 8006eaa:	9903      	ldr	r1, [sp, #12]
 8006eac:	f108 0801 	add.w	r8, r8, #1
 8006eb0:	700a      	strb	r2, [r1, #0]
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	3201      	adds	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	e79e      	b.n	8006df8 <_dtoa_r+0x638>
 8006eba:	46d8      	mov	r8, fp
 8006ebc:	e7eb      	b.n	8006e96 <_dtoa_r+0x6d6>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	4b6d      	ldr	r3, [pc, #436]	; (8007078 <_dtoa_r+0x8b8>)
 8006ec2:	f7f9 fb09 	bl	80004d8 <__aeabi_dmul>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4680      	mov	r8, r0
 8006ecc:	4689      	mov	r9, r1
 8006ece:	f7f9 fd6b 	bl	80009a8 <__aeabi_dcmpeq>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d09b      	beq.n	8006e0e <_dtoa_r+0x64e>
 8006ed6:	e7cd      	b.n	8006e74 <_dtoa_r+0x6b4>
 8006ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	f000 80c4 	beq.w	8007068 <_dtoa_r+0x8a8>
 8006ee0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ee2:	2a01      	cmp	r2, #1
 8006ee4:	f300 80a8 	bgt.w	8007038 <_dtoa_r+0x878>
 8006ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006eea:	2a00      	cmp	r2, #0
 8006eec:	f000 80a0 	beq.w	8007030 <_dtoa_r+0x870>
 8006ef0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ef4:	464f      	mov	r7, r9
 8006ef6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006efa:	2101      	movs	r1, #1
 8006efc:	441a      	add	r2, r3
 8006efe:	4628      	mov	r0, r5
 8006f00:	4499      	add	r9, r3
 8006f02:	9209      	str	r2, [sp, #36]	; 0x24
 8006f04:	f000 fc32 	bl	800776c <__i2b>
 8006f08:	4606      	mov	r6, r0
 8006f0a:	b15f      	cbz	r7, 8006f24 <_dtoa_r+0x764>
 8006f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	dd08      	ble.n	8006f24 <_dtoa_r+0x764>
 8006f12:	42bb      	cmp	r3, r7
 8006f14:	bfa8      	it	ge
 8006f16:	463b      	movge	r3, r7
 8006f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f1a:	eba9 0903 	sub.w	r9, r9, r3
 8006f1e:	1aff      	subs	r7, r7, r3
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	9309      	str	r3, [sp, #36]	; 0x24
 8006f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f26:	b1f3      	cbz	r3, 8006f66 <_dtoa_r+0x7a6>
 8006f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80a0 	beq.w	8007070 <_dtoa_r+0x8b0>
 8006f30:	2c00      	cmp	r4, #0
 8006f32:	dd10      	ble.n	8006f56 <_dtoa_r+0x796>
 8006f34:	4631      	mov	r1, r6
 8006f36:	4622      	mov	r2, r4
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f000 fcd5 	bl	80078e8 <__pow5mult>
 8006f3e:	4652      	mov	r2, sl
 8006f40:	4601      	mov	r1, r0
 8006f42:	4606      	mov	r6, r0
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 fc27 	bl	8007798 <__multiply>
 8006f4a:	4680      	mov	r8, r0
 8006f4c:	4651      	mov	r1, sl
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 fb56 	bl	8007600 <_Bfree>
 8006f54:	46c2      	mov	sl, r8
 8006f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f58:	1b1a      	subs	r2, r3, r4
 8006f5a:	d004      	beq.n	8006f66 <_dtoa_r+0x7a6>
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 fcc2 	bl	80078e8 <__pow5mult>
 8006f64:	4682      	mov	sl, r0
 8006f66:	2101      	movs	r1, #1
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f000 fbff 	bl	800776c <__i2b>
 8006f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f70:	4604      	mov	r4, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f340 8082 	ble.w	800707c <_dtoa_r+0x8bc>
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f000 fcb3 	bl	80078e8 <__pow5mult>
 8006f82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f84:	4604      	mov	r4, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	dd7b      	ble.n	8007082 <_dtoa_r+0x8c2>
 8006f8a:	f04f 0800 	mov.w	r8, #0
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f94:	6918      	ldr	r0, [r3, #16]
 8006f96:	f000 fb9b 	bl	80076d0 <__hi0bits>
 8006f9a:	f1c0 0020 	rsb	r0, r0, #32
 8006f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa0:	4418      	add	r0, r3
 8006fa2:	f010 001f 	ands.w	r0, r0, #31
 8006fa6:	f000 8092 	beq.w	80070ce <_dtoa_r+0x90e>
 8006faa:	f1c0 0320 	rsb	r3, r0, #32
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	f340 8085 	ble.w	80070be <_dtoa_r+0x8fe>
 8006fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb6:	f1c0 001c 	rsb	r0, r0, #28
 8006fba:	4403      	add	r3, r0
 8006fbc:	4481      	add	r9, r0
 8006fbe:	4407      	add	r7, r0
 8006fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc2:	f1b9 0f00 	cmp.w	r9, #0
 8006fc6:	dd05      	ble.n	8006fd4 <_dtoa_r+0x814>
 8006fc8:	4651      	mov	r1, sl
 8006fca:	464a      	mov	r2, r9
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 fce5 	bl	800799c <__lshift>
 8006fd2:	4682      	mov	sl, r0
 8006fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	dd05      	ble.n	8006fe6 <_dtoa_r+0x826>
 8006fda:	4621      	mov	r1, r4
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 fcdc 	bl	800799c <__lshift>
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d072      	beq.n	80070d2 <_dtoa_r+0x912>
 8006fec:	4621      	mov	r1, r4
 8006fee:	4650      	mov	r0, sl
 8006ff0:	f000 fd40 	bl	8007a74 <__mcmp>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	da6c      	bge.n	80070d2 <_dtoa_r+0x912>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 fb20 	bl	8007644 <__multadd>
 8007004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007006:	4682      	mov	sl, r0
 8007008:	f10b 3bff 	add.w	fp, fp, #4294967295
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 81ac 	beq.w	800736a <_dtoa_r+0xbaa>
 8007012:	2300      	movs	r3, #0
 8007014:	4631      	mov	r1, r6
 8007016:	220a      	movs	r2, #10
 8007018:	4628      	mov	r0, r5
 800701a:	f000 fb13 	bl	8007644 <__multadd>
 800701e:	9b06      	ldr	r3, [sp, #24]
 8007020:	4606      	mov	r6, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	f300 8093 	bgt.w	800714e <_dtoa_r+0x98e>
 8007028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800702a:	2b02      	cmp	r3, #2
 800702c:	dc59      	bgt.n	80070e2 <_dtoa_r+0x922>
 800702e:	e08e      	b.n	800714e <_dtoa_r+0x98e>
 8007030:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007032:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007036:	e75d      	b.n	8006ef4 <_dtoa_r+0x734>
 8007038:	9b08      	ldr	r3, [sp, #32]
 800703a:	1e5c      	subs	r4, r3, #1
 800703c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703e:	42a3      	cmp	r3, r4
 8007040:	bfbf      	itttt	lt
 8007042:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007044:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007046:	1ae3      	sublt	r3, r4, r3
 8007048:	18d2      	addlt	r2, r2, r3
 800704a:	bfa8      	it	ge
 800704c:	1b1c      	subge	r4, r3, r4
 800704e:	9b08      	ldr	r3, [sp, #32]
 8007050:	bfbe      	ittt	lt
 8007052:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007054:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007056:	2400      	movlt	r4, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	bfb5      	itete	lt
 800705c:	eba9 0703 	sublt.w	r7, r9, r3
 8007060:	464f      	movge	r7, r9
 8007062:	2300      	movlt	r3, #0
 8007064:	9b08      	ldrge	r3, [sp, #32]
 8007066:	e747      	b.n	8006ef8 <_dtoa_r+0x738>
 8007068:	464f      	mov	r7, r9
 800706a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800706c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800706e:	e74c      	b.n	8006f0a <_dtoa_r+0x74a>
 8007070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007072:	e773      	b.n	8006f5c <_dtoa_r+0x79c>
 8007074:	3fe00000 	.word	0x3fe00000
 8007078:	40240000 	.word	0x40240000
 800707c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800707e:	2b01      	cmp	r3, #1
 8007080:	dc18      	bgt.n	80070b4 <_dtoa_r+0x8f4>
 8007082:	9b04      	ldr	r3, [sp, #16]
 8007084:	b9b3      	cbnz	r3, 80070b4 <_dtoa_r+0x8f4>
 8007086:	9b05      	ldr	r3, [sp, #20]
 8007088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800708c:	b993      	cbnz	r3, 80070b4 <_dtoa_r+0x8f4>
 800708e:	9b05      	ldr	r3, [sp, #20]
 8007090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007094:	0d1b      	lsrs	r3, r3, #20
 8007096:	051b      	lsls	r3, r3, #20
 8007098:	b17b      	cbz	r3, 80070ba <_dtoa_r+0x8fa>
 800709a:	f04f 0801 	mov.w	r8, #1
 800709e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a0:	f109 0901 	add.w	r9, r9, #1
 80070a4:	3301      	adds	r3, #1
 80070a6:	9309      	str	r3, [sp, #36]	; 0x24
 80070a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f47f af6f 	bne.w	8006f8e <_dtoa_r+0x7ce>
 80070b0:	2001      	movs	r0, #1
 80070b2:	e774      	b.n	8006f9e <_dtoa_r+0x7de>
 80070b4:	f04f 0800 	mov.w	r8, #0
 80070b8:	e7f6      	b.n	80070a8 <_dtoa_r+0x8e8>
 80070ba:	4698      	mov	r8, r3
 80070bc:	e7f4      	b.n	80070a8 <_dtoa_r+0x8e8>
 80070be:	d080      	beq.n	8006fc2 <_dtoa_r+0x802>
 80070c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070c2:	331c      	adds	r3, #28
 80070c4:	441a      	add	r2, r3
 80070c6:	4499      	add	r9, r3
 80070c8:	441f      	add	r7, r3
 80070ca:	9209      	str	r2, [sp, #36]	; 0x24
 80070cc:	e779      	b.n	8006fc2 <_dtoa_r+0x802>
 80070ce:	4603      	mov	r3, r0
 80070d0:	e7f6      	b.n	80070c0 <_dtoa_r+0x900>
 80070d2:	9b08      	ldr	r3, [sp, #32]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	dc34      	bgt.n	8007142 <_dtoa_r+0x982>
 80070d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070da:	2b02      	cmp	r3, #2
 80070dc:	dd31      	ble.n	8007142 <_dtoa_r+0x982>
 80070de:	9b08      	ldr	r3, [sp, #32]
 80070e0:	9306      	str	r3, [sp, #24]
 80070e2:	9b06      	ldr	r3, [sp, #24]
 80070e4:	b963      	cbnz	r3, 8007100 <_dtoa_r+0x940>
 80070e6:	4621      	mov	r1, r4
 80070e8:	2205      	movs	r2, #5
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 faaa 	bl	8007644 <__multadd>
 80070f0:	4601      	mov	r1, r0
 80070f2:	4604      	mov	r4, r0
 80070f4:	4650      	mov	r0, sl
 80070f6:	f000 fcbd 	bl	8007a74 <__mcmp>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	f73f adbf 	bgt.w	8006c7e <_dtoa_r+0x4be>
 8007100:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007102:	9f03      	ldr	r7, [sp, #12]
 8007104:	ea6f 0b03 	mvn.w	fp, r3
 8007108:	f04f 0800 	mov.w	r8, #0
 800710c:	4621      	mov	r1, r4
 800710e:	4628      	mov	r0, r5
 8007110:	f000 fa76 	bl	8007600 <_Bfree>
 8007114:	2e00      	cmp	r6, #0
 8007116:	f43f aead 	beq.w	8006e74 <_dtoa_r+0x6b4>
 800711a:	f1b8 0f00 	cmp.w	r8, #0
 800711e:	d005      	beq.n	800712c <_dtoa_r+0x96c>
 8007120:	45b0      	cmp	r8, r6
 8007122:	d003      	beq.n	800712c <_dtoa_r+0x96c>
 8007124:	4641      	mov	r1, r8
 8007126:	4628      	mov	r0, r5
 8007128:	f000 fa6a 	bl	8007600 <_Bfree>
 800712c:	4631      	mov	r1, r6
 800712e:	4628      	mov	r0, r5
 8007130:	f000 fa66 	bl	8007600 <_Bfree>
 8007134:	e69e      	b.n	8006e74 <_dtoa_r+0x6b4>
 8007136:	2400      	movs	r4, #0
 8007138:	4626      	mov	r6, r4
 800713a:	e7e1      	b.n	8007100 <_dtoa_r+0x940>
 800713c:	46c3      	mov	fp, r8
 800713e:	4626      	mov	r6, r4
 8007140:	e59d      	b.n	8006c7e <_dtoa_r+0x4be>
 8007142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 80c8 	beq.w	80072da <_dtoa_r+0xb1a>
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	9306      	str	r3, [sp, #24]
 800714e:	2f00      	cmp	r7, #0
 8007150:	dd05      	ble.n	800715e <_dtoa_r+0x99e>
 8007152:	4631      	mov	r1, r6
 8007154:	463a      	mov	r2, r7
 8007156:	4628      	mov	r0, r5
 8007158:	f000 fc20 	bl	800799c <__lshift>
 800715c:	4606      	mov	r6, r0
 800715e:	f1b8 0f00 	cmp.w	r8, #0
 8007162:	d05b      	beq.n	800721c <_dtoa_r+0xa5c>
 8007164:	4628      	mov	r0, r5
 8007166:	6871      	ldr	r1, [r6, #4]
 8007168:	f000 fa0a 	bl	8007580 <_Balloc>
 800716c:	4607      	mov	r7, r0
 800716e:	b928      	cbnz	r0, 800717c <_dtoa_r+0x9bc>
 8007170:	4602      	mov	r2, r0
 8007172:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007176:	4b81      	ldr	r3, [pc, #516]	; (800737c <_dtoa_r+0xbbc>)
 8007178:	f7ff bb36 	b.w	80067e8 <_dtoa_r+0x28>
 800717c:	6932      	ldr	r2, [r6, #16]
 800717e:	f106 010c 	add.w	r1, r6, #12
 8007182:	3202      	adds	r2, #2
 8007184:	0092      	lsls	r2, r2, #2
 8007186:	300c      	adds	r0, #12
 8007188:	f000 ff9e 	bl	80080c8 <memcpy>
 800718c:	2201      	movs	r2, #1
 800718e:	4639      	mov	r1, r7
 8007190:	4628      	mov	r0, r5
 8007192:	f000 fc03 	bl	800799c <__lshift>
 8007196:	46b0      	mov	r8, r6
 8007198:	4606      	mov	r6, r0
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	9a03      	ldr	r2, [sp, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	9308      	str	r3, [sp, #32]
 80071a2:	9b06      	ldr	r3, [sp, #24]
 80071a4:	4413      	add	r3, r2
 80071a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80071a8:	9b04      	ldr	r3, [sp, #16]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	930a      	str	r3, [sp, #40]	; 0x28
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	4621      	mov	r1, r4
 80071b4:	3b01      	subs	r3, #1
 80071b6:	4650      	mov	r0, sl
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	f7ff fa78 	bl	80066ae <quorem>
 80071be:	4641      	mov	r1, r8
 80071c0:	9006      	str	r0, [sp, #24]
 80071c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80071c6:	4650      	mov	r0, sl
 80071c8:	f000 fc54 	bl	8007a74 <__mcmp>
 80071cc:	4632      	mov	r2, r6
 80071ce:	9009      	str	r0, [sp, #36]	; 0x24
 80071d0:	4621      	mov	r1, r4
 80071d2:	4628      	mov	r0, r5
 80071d4:	f000 fc6a 	bl	8007aac <__mdiff>
 80071d8:	68c2      	ldr	r2, [r0, #12]
 80071da:	4607      	mov	r7, r0
 80071dc:	bb02      	cbnz	r2, 8007220 <_dtoa_r+0xa60>
 80071de:	4601      	mov	r1, r0
 80071e0:	4650      	mov	r0, sl
 80071e2:	f000 fc47 	bl	8007a74 <__mcmp>
 80071e6:	4602      	mov	r2, r0
 80071e8:	4639      	mov	r1, r7
 80071ea:	4628      	mov	r0, r5
 80071ec:	920c      	str	r2, [sp, #48]	; 0x30
 80071ee:	f000 fa07 	bl	8007600 <_Bfree>
 80071f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071f6:	9f08      	ldr	r7, [sp, #32]
 80071f8:	ea43 0102 	orr.w	r1, r3, r2
 80071fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fe:	4319      	orrs	r1, r3
 8007200:	d110      	bne.n	8007224 <_dtoa_r+0xa64>
 8007202:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007206:	d029      	beq.n	800725c <_dtoa_r+0xa9c>
 8007208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	dd02      	ble.n	8007214 <_dtoa_r+0xa54>
 800720e:	9b06      	ldr	r3, [sp, #24]
 8007210:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	f883 9000 	strb.w	r9, [r3]
 800721a:	e777      	b.n	800710c <_dtoa_r+0x94c>
 800721c:	4630      	mov	r0, r6
 800721e:	e7ba      	b.n	8007196 <_dtoa_r+0x9d6>
 8007220:	2201      	movs	r2, #1
 8007222:	e7e1      	b.n	80071e8 <_dtoa_r+0xa28>
 8007224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	db04      	blt.n	8007234 <_dtoa_r+0xa74>
 800722a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800722c:	430b      	orrs	r3, r1
 800722e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007230:	430b      	orrs	r3, r1
 8007232:	d120      	bne.n	8007276 <_dtoa_r+0xab6>
 8007234:	2a00      	cmp	r2, #0
 8007236:	dded      	ble.n	8007214 <_dtoa_r+0xa54>
 8007238:	4651      	mov	r1, sl
 800723a:	2201      	movs	r2, #1
 800723c:	4628      	mov	r0, r5
 800723e:	f000 fbad 	bl	800799c <__lshift>
 8007242:	4621      	mov	r1, r4
 8007244:	4682      	mov	sl, r0
 8007246:	f000 fc15 	bl	8007a74 <__mcmp>
 800724a:	2800      	cmp	r0, #0
 800724c:	dc03      	bgt.n	8007256 <_dtoa_r+0xa96>
 800724e:	d1e1      	bne.n	8007214 <_dtoa_r+0xa54>
 8007250:	f019 0f01 	tst.w	r9, #1
 8007254:	d0de      	beq.n	8007214 <_dtoa_r+0xa54>
 8007256:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800725a:	d1d8      	bne.n	800720e <_dtoa_r+0xa4e>
 800725c:	2339      	movs	r3, #57	; 0x39
 800725e:	9a04      	ldr	r2, [sp, #16]
 8007260:	7013      	strb	r3, [r2, #0]
 8007262:	463b      	mov	r3, r7
 8007264:	461f      	mov	r7, r3
 8007266:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800726a:	3b01      	subs	r3, #1
 800726c:	2a39      	cmp	r2, #57	; 0x39
 800726e:	d06b      	beq.n	8007348 <_dtoa_r+0xb88>
 8007270:	3201      	adds	r2, #1
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	e74a      	b.n	800710c <_dtoa_r+0x94c>
 8007276:	2a00      	cmp	r2, #0
 8007278:	dd07      	ble.n	800728a <_dtoa_r+0xaca>
 800727a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800727e:	d0ed      	beq.n	800725c <_dtoa_r+0xa9c>
 8007280:	9a04      	ldr	r2, [sp, #16]
 8007282:	f109 0301 	add.w	r3, r9, #1
 8007286:	7013      	strb	r3, [r2, #0]
 8007288:	e740      	b.n	800710c <_dtoa_r+0x94c>
 800728a:	9b08      	ldr	r3, [sp, #32]
 800728c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800728e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007292:	4293      	cmp	r3, r2
 8007294:	d042      	beq.n	800731c <_dtoa_r+0xb5c>
 8007296:	4651      	mov	r1, sl
 8007298:	2300      	movs	r3, #0
 800729a:	220a      	movs	r2, #10
 800729c:	4628      	mov	r0, r5
 800729e:	f000 f9d1 	bl	8007644 <__multadd>
 80072a2:	45b0      	cmp	r8, r6
 80072a4:	4682      	mov	sl, r0
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	f04f 020a 	mov.w	r2, #10
 80072ae:	4641      	mov	r1, r8
 80072b0:	4628      	mov	r0, r5
 80072b2:	d107      	bne.n	80072c4 <_dtoa_r+0xb04>
 80072b4:	f000 f9c6 	bl	8007644 <__multadd>
 80072b8:	4680      	mov	r8, r0
 80072ba:	4606      	mov	r6, r0
 80072bc:	9b08      	ldr	r3, [sp, #32]
 80072be:	3301      	adds	r3, #1
 80072c0:	9308      	str	r3, [sp, #32]
 80072c2:	e775      	b.n	80071b0 <_dtoa_r+0x9f0>
 80072c4:	f000 f9be 	bl	8007644 <__multadd>
 80072c8:	4631      	mov	r1, r6
 80072ca:	4680      	mov	r8, r0
 80072cc:	2300      	movs	r3, #0
 80072ce:	220a      	movs	r2, #10
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 f9b7 	bl	8007644 <__multadd>
 80072d6:	4606      	mov	r6, r0
 80072d8:	e7f0      	b.n	80072bc <_dtoa_r+0xafc>
 80072da:	9b08      	ldr	r3, [sp, #32]
 80072dc:	9306      	str	r3, [sp, #24]
 80072de:	9f03      	ldr	r7, [sp, #12]
 80072e0:	4621      	mov	r1, r4
 80072e2:	4650      	mov	r0, sl
 80072e4:	f7ff f9e3 	bl	80066ae <quorem>
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072ee:	f807 9b01 	strb.w	r9, [r7], #1
 80072f2:	1afa      	subs	r2, r7, r3
 80072f4:	9b06      	ldr	r3, [sp, #24]
 80072f6:	4293      	cmp	r3, r2
 80072f8:	dd07      	ble.n	800730a <_dtoa_r+0xb4a>
 80072fa:	4651      	mov	r1, sl
 80072fc:	2300      	movs	r3, #0
 80072fe:	220a      	movs	r2, #10
 8007300:	4628      	mov	r0, r5
 8007302:	f000 f99f 	bl	8007644 <__multadd>
 8007306:	4682      	mov	sl, r0
 8007308:	e7ea      	b.n	80072e0 <_dtoa_r+0xb20>
 800730a:	9b06      	ldr	r3, [sp, #24]
 800730c:	f04f 0800 	mov.w	r8, #0
 8007310:	2b00      	cmp	r3, #0
 8007312:	bfcc      	ite	gt
 8007314:	461f      	movgt	r7, r3
 8007316:	2701      	movle	r7, #1
 8007318:	9b03      	ldr	r3, [sp, #12]
 800731a:	441f      	add	r7, r3
 800731c:	4651      	mov	r1, sl
 800731e:	2201      	movs	r2, #1
 8007320:	4628      	mov	r0, r5
 8007322:	f000 fb3b 	bl	800799c <__lshift>
 8007326:	4621      	mov	r1, r4
 8007328:	4682      	mov	sl, r0
 800732a:	f000 fba3 	bl	8007a74 <__mcmp>
 800732e:	2800      	cmp	r0, #0
 8007330:	dc97      	bgt.n	8007262 <_dtoa_r+0xaa2>
 8007332:	d102      	bne.n	800733a <_dtoa_r+0xb7a>
 8007334:	f019 0f01 	tst.w	r9, #1
 8007338:	d193      	bne.n	8007262 <_dtoa_r+0xaa2>
 800733a:	463b      	mov	r3, r7
 800733c:	461f      	mov	r7, r3
 800733e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007342:	2a30      	cmp	r2, #48	; 0x30
 8007344:	d0fa      	beq.n	800733c <_dtoa_r+0xb7c>
 8007346:	e6e1      	b.n	800710c <_dtoa_r+0x94c>
 8007348:	9a03      	ldr	r2, [sp, #12]
 800734a:	429a      	cmp	r2, r3
 800734c:	d18a      	bne.n	8007264 <_dtoa_r+0xaa4>
 800734e:	2331      	movs	r3, #49	; 0x31
 8007350:	f10b 0b01 	add.w	fp, fp, #1
 8007354:	e797      	b.n	8007286 <_dtoa_r+0xac6>
 8007356:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <_dtoa_r+0xbc0>)
 8007358:	f7ff ba9f 	b.w	800689a <_dtoa_r+0xda>
 800735c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800735e:	2b00      	cmp	r3, #0
 8007360:	f47f aa77 	bne.w	8006852 <_dtoa_r+0x92>
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <_dtoa_r+0xbc4>)
 8007366:	f7ff ba98 	b.w	800689a <_dtoa_r+0xda>
 800736a:	9b06      	ldr	r3, [sp, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	dcb6      	bgt.n	80072de <_dtoa_r+0xb1e>
 8007370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007372:	2b02      	cmp	r3, #2
 8007374:	f73f aeb5 	bgt.w	80070e2 <_dtoa_r+0x922>
 8007378:	e7b1      	b.n	80072de <_dtoa_r+0xb1e>
 800737a:	bf00      	nop
 800737c:	08009867 	.word	0x08009867
 8007380:	080097c7 	.word	0x080097c7
 8007384:	080097eb 	.word	0x080097eb

08007388 <_free_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	4605      	mov	r5, r0
 800738c:	2900      	cmp	r1, #0
 800738e:	d040      	beq.n	8007412 <_free_r+0x8a>
 8007390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007394:	1f0c      	subs	r4, r1, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	bfb8      	it	lt
 800739a:	18e4      	addlt	r4, r4, r3
 800739c:	f000 f8e4 	bl	8007568 <__malloc_lock>
 80073a0:	4a1c      	ldr	r2, [pc, #112]	; (8007414 <_free_r+0x8c>)
 80073a2:	6813      	ldr	r3, [r2, #0]
 80073a4:	b933      	cbnz	r3, 80073b4 <_free_r+0x2c>
 80073a6:	6063      	str	r3, [r4, #4]
 80073a8:	6014      	str	r4, [r2, #0]
 80073aa:	4628      	mov	r0, r5
 80073ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073b0:	f000 b8e0 	b.w	8007574 <__malloc_unlock>
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	d908      	bls.n	80073ca <_free_r+0x42>
 80073b8:	6820      	ldr	r0, [r4, #0]
 80073ba:	1821      	adds	r1, r4, r0
 80073bc:	428b      	cmp	r3, r1
 80073be:	bf01      	itttt	eq
 80073c0:	6819      	ldreq	r1, [r3, #0]
 80073c2:	685b      	ldreq	r3, [r3, #4]
 80073c4:	1809      	addeq	r1, r1, r0
 80073c6:	6021      	streq	r1, [r4, #0]
 80073c8:	e7ed      	b.n	80073a6 <_free_r+0x1e>
 80073ca:	461a      	mov	r2, r3
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	b10b      	cbz	r3, 80073d4 <_free_r+0x4c>
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	d9fa      	bls.n	80073ca <_free_r+0x42>
 80073d4:	6811      	ldr	r1, [r2, #0]
 80073d6:	1850      	adds	r0, r2, r1
 80073d8:	42a0      	cmp	r0, r4
 80073da:	d10b      	bne.n	80073f4 <_free_r+0x6c>
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	4401      	add	r1, r0
 80073e0:	1850      	adds	r0, r2, r1
 80073e2:	4283      	cmp	r3, r0
 80073e4:	6011      	str	r1, [r2, #0]
 80073e6:	d1e0      	bne.n	80073aa <_free_r+0x22>
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	4408      	add	r0, r1
 80073ee:	6010      	str	r0, [r2, #0]
 80073f0:	6053      	str	r3, [r2, #4]
 80073f2:	e7da      	b.n	80073aa <_free_r+0x22>
 80073f4:	d902      	bls.n	80073fc <_free_r+0x74>
 80073f6:	230c      	movs	r3, #12
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	e7d6      	b.n	80073aa <_free_r+0x22>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	1821      	adds	r1, r4, r0
 8007400:	428b      	cmp	r3, r1
 8007402:	bf01      	itttt	eq
 8007404:	6819      	ldreq	r1, [r3, #0]
 8007406:	685b      	ldreq	r3, [r3, #4]
 8007408:	1809      	addeq	r1, r1, r0
 800740a:	6021      	streq	r1, [r4, #0]
 800740c:	6063      	str	r3, [r4, #4]
 800740e:	6054      	str	r4, [r2, #4]
 8007410:	e7cb      	b.n	80073aa <_free_r+0x22>
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20000cb8 	.word	0x20000cb8

08007418 <malloc>:
 8007418:	4b02      	ldr	r3, [pc, #8]	; (8007424 <malloc+0xc>)
 800741a:	4601      	mov	r1, r0
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	f000 b823 	b.w	8007468 <_malloc_r>
 8007422:	bf00      	nop
 8007424:	2000006c 	.word	0x2000006c

08007428 <sbrk_aligned>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	4e0e      	ldr	r6, [pc, #56]	; (8007464 <sbrk_aligned+0x3c>)
 800742c:	460c      	mov	r4, r1
 800742e:	6831      	ldr	r1, [r6, #0]
 8007430:	4605      	mov	r5, r0
 8007432:	b911      	cbnz	r1, 800743a <sbrk_aligned+0x12>
 8007434:	f000 fe38 	bl	80080a8 <_sbrk_r>
 8007438:	6030      	str	r0, [r6, #0]
 800743a:	4621      	mov	r1, r4
 800743c:	4628      	mov	r0, r5
 800743e:	f000 fe33 	bl	80080a8 <_sbrk_r>
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	d00a      	beq.n	800745c <sbrk_aligned+0x34>
 8007446:	1cc4      	adds	r4, r0, #3
 8007448:	f024 0403 	bic.w	r4, r4, #3
 800744c:	42a0      	cmp	r0, r4
 800744e:	d007      	beq.n	8007460 <sbrk_aligned+0x38>
 8007450:	1a21      	subs	r1, r4, r0
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fe28 	bl	80080a8 <_sbrk_r>
 8007458:	3001      	adds	r0, #1
 800745a:	d101      	bne.n	8007460 <sbrk_aligned+0x38>
 800745c:	f04f 34ff 	mov.w	r4, #4294967295
 8007460:	4620      	mov	r0, r4
 8007462:	bd70      	pop	{r4, r5, r6, pc}
 8007464:	20000cbc 	.word	0x20000cbc

08007468 <_malloc_r>:
 8007468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800746c:	1ccd      	adds	r5, r1, #3
 800746e:	f025 0503 	bic.w	r5, r5, #3
 8007472:	3508      	adds	r5, #8
 8007474:	2d0c      	cmp	r5, #12
 8007476:	bf38      	it	cc
 8007478:	250c      	movcc	r5, #12
 800747a:	2d00      	cmp	r5, #0
 800747c:	4607      	mov	r7, r0
 800747e:	db01      	blt.n	8007484 <_malloc_r+0x1c>
 8007480:	42a9      	cmp	r1, r5
 8007482:	d905      	bls.n	8007490 <_malloc_r+0x28>
 8007484:	230c      	movs	r3, #12
 8007486:	2600      	movs	r6, #0
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	4630      	mov	r0, r6
 800748c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007490:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007564 <_malloc_r+0xfc>
 8007494:	f000 f868 	bl	8007568 <__malloc_lock>
 8007498:	f8d8 3000 	ldr.w	r3, [r8]
 800749c:	461c      	mov	r4, r3
 800749e:	bb5c      	cbnz	r4, 80074f8 <_malloc_r+0x90>
 80074a0:	4629      	mov	r1, r5
 80074a2:	4638      	mov	r0, r7
 80074a4:	f7ff ffc0 	bl	8007428 <sbrk_aligned>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	4604      	mov	r4, r0
 80074ac:	d155      	bne.n	800755a <_malloc_r+0xf2>
 80074ae:	f8d8 4000 	ldr.w	r4, [r8]
 80074b2:	4626      	mov	r6, r4
 80074b4:	2e00      	cmp	r6, #0
 80074b6:	d145      	bne.n	8007544 <_malloc_r+0xdc>
 80074b8:	2c00      	cmp	r4, #0
 80074ba:	d048      	beq.n	800754e <_malloc_r+0xe6>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	4631      	mov	r1, r6
 80074c0:	4638      	mov	r0, r7
 80074c2:	eb04 0903 	add.w	r9, r4, r3
 80074c6:	f000 fdef 	bl	80080a8 <_sbrk_r>
 80074ca:	4581      	cmp	r9, r0
 80074cc:	d13f      	bne.n	800754e <_malloc_r+0xe6>
 80074ce:	6821      	ldr	r1, [r4, #0]
 80074d0:	4638      	mov	r0, r7
 80074d2:	1a6d      	subs	r5, r5, r1
 80074d4:	4629      	mov	r1, r5
 80074d6:	f7ff ffa7 	bl	8007428 <sbrk_aligned>
 80074da:	3001      	adds	r0, #1
 80074dc:	d037      	beq.n	800754e <_malloc_r+0xe6>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	442b      	add	r3, r5
 80074e2:	6023      	str	r3, [r4, #0]
 80074e4:	f8d8 3000 	ldr.w	r3, [r8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d038      	beq.n	800755e <_malloc_r+0xf6>
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	42a2      	cmp	r2, r4
 80074f0:	d12b      	bne.n	800754a <_malloc_r+0xe2>
 80074f2:	2200      	movs	r2, #0
 80074f4:	605a      	str	r2, [r3, #4]
 80074f6:	e00f      	b.n	8007518 <_malloc_r+0xb0>
 80074f8:	6822      	ldr	r2, [r4, #0]
 80074fa:	1b52      	subs	r2, r2, r5
 80074fc:	d41f      	bmi.n	800753e <_malloc_r+0xd6>
 80074fe:	2a0b      	cmp	r2, #11
 8007500:	d917      	bls.n	8007532 <_malloc_r+0xca>
 8007502:	1961      	adds	r1, r4, r5
 8007504:	42a3      	cmp	r3, r4
 8007506:	6025      	str	r5, [r4, #0]
 8007508:	bf18      	it	ne
 800750a:	6059      	strne	r1, [r3, #4]
 800750c:	6863      	ldr	r3, [r4, #4]
 800750e:	bf08      	it	eq
 8007510:	f8c8 1000 	streq.w	r1, [r8]
 8007514:	5162      	str	r2, [r4, r5]
 8007516:	604b      	str	r3, [r1, #4]
 8007518:	4638      	mov	r0, r7
 800751a:	f104 060b 	add.w	r6, r4, #11
 800751e:	f000 f829 	bl	8007574 <__malloc_unlock>
 8007522:	f026 0607 	bic.w	r6, r6, #7
 8007526:	1d23      	adds	r3, r4, #4
 8007528:	1af2      	subs	r2, r6, r3
 800752a:	d0ae      	beq.n	800748a <_malloc_r+0x22>
 800752c:	1b9b      	subs	r3, r3, r6
 800752e:	50a3      	str	r3, [r4, r2]
 8007530:	e7ab      	b.n	800748a <_malloc_r+0x22>
 8007532:	42a3      	cmp	r3, r4
 8007534:	6862      	ldr	r2, [r4, #4]
 8007536:	d1dd      	bne.n	80074f4 <_malloc_r+0x8c>
 8007538:	f8c8 2000 	str.w	r2, [r8]
 800753c:	e7ec      	b.n	8007518 <_malloc_r+0xb0>
 800753e:	4623      	mov	r3, r4
 8007540:	6864      	ldr	r4, [r4, #4]
 8007542:	e7ac      	b.n	800749e <_malloc_r+0x36>
 8007544:	4634      	mov	r4, r6
 8007546:	6876      	ldr	r6, [r6, #4]
 8007548:	e7b4      	b.n	80074b4 <_malloc_r+0x4c>
 800754a:	4613      	mov	r3, r2
 800754c:	e7cc      	b.n	80074e8 <_malloc_r+0x80>
 800754e:	230c      	movs	r3, #12
 8007550:	4638      	mov	r0, r7
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	f000 f80e 	bl	8007574 <__malloc_unlock>
 8007558:	e797      	b.n	800748a <_malloc_r+0x22>
 800755a:	6025      	str	r5, [r4, #0]
 800755c:	e7dc      	b.n	8007518 <_malloc_r+0xb0>
 800755e:	605b      	str	r3, [r3, #4]
 8007560:	deff      	udf	#255	; 0xff
 8007562:	bf00      	nop
 8007564:	20000cb8 	.word	0x20000cb8

08007568 <__malloc_lock>:
 8007568:	4801      	ldr	r0, [pc, #4]	; (8007570 <__malloc_lock+0x8>)
 800756a:	f7ff b890 	b.w	800668e <__retarget_lock_acquire_recursive>
 800756e:	bf00      	nop
 8007570:	20000cb4 	.word	0x20000cb4

08007574 <__malloc_unlock>:
 8007574:	4801      	ldr	r0, [pc, #4]	; (800757c <__malloc_unlock+0x8>)
 8007576:	f7ff b88b 	b.w	8006690 <__retarget_lock_release_recursive>
 800757a:	bf00      	nop
 800757c:	20000cb4 	.word	0x20000cb4

08007580 <_Balloc>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	69c6      	ldr	r6, [r0, #28]
 8007584:	4604      	mov	r4, r0
 8007586:	460d      	mov	r5, r1
 8007588:	b976      	cbnz	r6, 80075a8 <_Balloc+0x28>
 800758a:	2010      	movs	r0, #16
 800758c:	f7ff ff44 	bl	8007418 <malloc>
 8007590:	4602      	mov	r2, r0
 8007592:	61e0      	str	r0, [r4, #28]
 8007594:	b920      	cbnz	r0, 80075a0 <_Balloc+0x20>
 8007596:	216b      	movs	r1, #107	; 0x6b
 8007598:	4b17      	ldr	r3, [pc, #92]	; (80075f8 <_Balloc+0x78>)
 800759a:	4818      	ldr	r0, [pc, #96]	; (80075fc <_Balloc+0x7c>)
 800759c:	f000 fda2 	bl	80080e4 <__assert_func>
 80075a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075a4:	6006      	str	r6, [r0, #0]
 80075a6:	60c6      	str	r6, [r0, #12]
 80075a8:	69e6      	ldr	r6, [r4, #28]
 80075aa:	68f3      	ldr	r3, [r6, #12]
 80075ac:	b183      	cbz	r3, 80075d0 <_Balloc+0x50>
 80075ae:	69e3      	ldr	r3, [r4, #28]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075b6:	b9b8      	cbnz	r0, 80075e8 <_Balloc+0x68>
 80075b8:	2101      	movs	r1, #1
 80075ba:	fa01 f605 	lsl.w	r6, r1, r5
 80075be:	1d72      	adds	r2, r6, #5
 80075c0:	4620      	mov	r0, r4
 80075c2:	0092      	lsls	r2, r2, #2
 80075c4:	f000 fdac 	bl	8008120 <_calloc_r>
 80075c8:	b160      	cbz	r0, 80075e4 <_Balloc+0x64>
 80075ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075ce:	e00e      	b.n	80075ee <_Balloc+0x6e>
 80075d0:	2221      	movs	r2, #33	; 0x21
 80075d2:	2104      	movs	r1, #4
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fda3 	bl	8008120 <_calloc_r>
 80075da:	69e3      	ldr	r3, [r4, #28]
 80075dc:	60f0      	str	r0, [r6, #12]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e4      	bne.n	80075ae <_Balloc+0x2e>
 80075e4:	2000      	movs	r0, #0
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	6802      	ldr	r2, [r0, #0]
 80075ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075ee:	2300      	movs	r3, #0
 80075f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075f4:	e7f7      	b.n	80075e6 <_Balloc+0x66>
 80075f6:	bf00      	nop
 80075f8:	080097f8 	.word	0x080097f8
 80075fc:	08009878 	.word	0x08009878

08007600 <_Bfree>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	69c6      	ldr	r6, [r0, #28]
 8007604:	4605      	mov	r5, r0
 8007606:	460c      	mov	r4, r1
 8007608:	b976      	cbnz	r6, 8007628 <_Bfree+0x28>
 800760a:	2010      	movs	r0, #16
 800760c:	f7ff ff04 	bl	8007418 <malloc>
 8007610:	4602      	mov	r2, r0
 8007612:	61e8      	str	r0, [r5, #28]
 8007614:	b920      	cbnz	r0, 8007620 <_Bfree+0x20>
 8007616:	218f      	movs	r1, #143	; 0x8f
 8007618:	4b08      	ldr	r3, [pc, #32]	; (800763c <_Bfree+0x3c>)
 800761a:	4809      	ldr	r0, [pc, #36]	; (8007640 <_Bfree+0x40>)
 800761c:	f000 fd62 	bl	80080e4 <__assert_func>
 8007620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007624:	6006      	str	r6, [r0, #0]
 8007626:	60c6      	str	r6, [r0, #12]
 8007628:	b13c      	cbz	r4, 800763a <_Bfree+0x3a>
 800762a:	69eb      	ldr	r3, [r5, #28]
 800762c:	6862      	ldr	r2, [r4, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007634:	6021      	str	r1, [r4, #0]
 8007636:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	080097f8 	.word	0x080097f8
 8007640:	08009878 	.word	0x08009878

08007644 <__multadd>:
 8007644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007648:	4607      	mov	r7, r0
 800764a:	460c      	mov	r4, r1
 800764c:	461e      	mov	r6, r3
 800764e:	2000      	movs	r0, #0
 8007650:	690d      	ldr	r5, [r1, #16]
 8007652:	f101 0c14 	add.w	ip, r1, #20
 8007656:	f8dc 3000 	ldr.w	r3, [ip]
 800765a:	3001      	adds	r0, #1
 800765c:	b299      	uxth	r1, r3
 800765e:	fb02 6101 	mla	r1, r2, r1, r6
 8007662:	0c1e      	lsrs	r6, r3, #16
 8007664:	0c0b      	lsrs	r3, r1, #16
 8007666:	fb02 3306 	mla	r3, r2, r6, r3
 800766a:	b289      	uxth	r1, r1
 800766c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007670:	4285      	cmp	r5, r0
 8007672:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007676:	f84c 1b04 	str.w	r1, [ip], #4
 800767a:	dcec      	bgt.n	8007656 <__multadd+0x12>
 800767c:	b30e      	cbz	r6, 80076c2 <__multadd+0x7e>
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	42ab      	cmp	r3, r5
 8007682:	dc19      	bgt.n	80076b8 <__multadd+0x74>
 8007684:	6861      	ldr	r1, [r4, #4]
 8007686:	4638      	mov	r0, r7
 8007688:	3101      	adds	r1, #1
 800768a:	f7ff ff79 	bl	8007580 <_Balloc>
 800768e:	4680      	mov	r8, r0
 8007690:	b928      	cbnz	r0, 800769e <__multadd+0x5a>
 8007692:	4602      	mov	r2, r0
 8007694:	21ba      	movs	r1, #186	; 0xba
 8007696:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <__multadd+0x84>)
 8007698:	480c      	ldr	r0, [pc, #48]	; (80076cc <__multadd+0x88>)
 800769a:	f000 fd23 	bl	80080e4 <__assert_func>
 800769e:	6922      	ldr	r2, [r4, #16]
 80076a0:	f104 010c 	add.w	r1, r4, #12
 80076a4:	3202      	adds	r2, #2
 80076a6:	0092      	lsls	r2, r2, #2
 80076a8:	300c      	adds	r0, #12
 80076aa:	f000 fd0d 	bl	80080c8 <memcpy>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4638      	mov	r0, r7
 80076b2:	f7ff ffa5 	bl	8007600 <_Bfree>
 80076b6:	4644      	mov	r4, r8
 80076b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076bc:	3501      	adds	r5, #1
 80076be:	615e      	str	r6, [r3, #20]
 80076c0:	6125      	str	r5, [r4, #16]
 80076c2:	4620      	mov	r0, r4
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c8:	08009867 	.word	0x08009867
 80076cc:	08009878 	.word	0x08009878

080076d0 <__hi0bits>:
 80076d0:	0c02      	lsrs	r2, r0, #16
 80076d2:	0412      	lsls	r2, r2, #16
 80076d4:	4603      	mov	r3, r0
 80076d6:	b9ca      	cbnz	r2, 800770c <__hi0bits+0x3c>
 80076d8:	0403      	lsls	r3, r0, #16
 80076da:	2010      	movs	r0, #16
 80076dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076e0:	bf04      	itt	eq
 80076e2:	021b      	lsleq	r3, r3, #8
 80076e4:	3008      	addeq	r0, #8
 80076e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80076ea:	bf04      	itt	eq
 80076ec:	011b      	lsleq	r3, r3, #4
 80076ee:	3004      	addeq	r0, #4
 80076f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80076f4:	bf04      	itt	eq
 80076f6:	009b      	lsleq	r3, r3, #2
 80076f8:	3002      	addeq	r0, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	db05      	blt.n	800770a <__hi0bits+0x3a>
 80076fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007702:	f100 0001 	add.w	r0, r0, #1
 8007706:	bf08      	it	eq
 8007708:	2020      	moveq	r0, #32
 800770a:	4770      	bx	lr
 800770c:	2000      	movs	r0, #0
 800770e:	e7e5      	b.n	80076dc <__hi0bits+0xc>

08007710 <__lo0bits>:
 8007710:	6803      	ldr	r3, [r0, #0]
 8007712:	4602      	mov	r2, r0
 8007714:	f013 0007 	ands.w	r0, r3, #7
 8007718:	d00b      	beq.n	8007732 <__lo0bits+0x22>
 800771a:	07d9      	lsls	r1, r3, #31
 800771c:	d421      	bmi.n	8007762 <__lo0bits+0x52>
 800771e:	0798      	lsls	r0, r3, #30
 8007720:	bf49      	itett	mi
 8007722:	085b      	lsrmi	r3, r3, #1
 8007724:	089b      	lsrpl	r3, r3, #2
 8007726:	2001      	movmi	r0, #1
 8007728:	6013      	strmi	r3, [r2, #0]
 800772a:	bf5c      	itt	pl
 800772c:	2002      	movpl	r0, #2
 800772e:	6013      	strpl	r3, [r2, #0]
 8007730:	4770      	bx	lr
 8007732:	b299      	uxth	r1, r3
 8007734:	b909      	cbnz	r1, 800773a <__lo0bits+0x2a>
 8007736:	2010      	movs	r0, #16
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	b2d9      	uxtb	r1, r3
 800773c:	b909      	cbnz	r1, 8007742 <__lo0bits+0x32>
 800773e:	3008      	adds	r0, #8
 8007740:	0a1b      	lsrs	r3, r3, #8
 8007742:	0719      	lsls	r1, r3, #28
 8007744:	bf04      	itt	eq
 8007746:	091b      	lsreq	r3, r3, #4
 8007748:	3004      	addeq	r0, #4
 800774a:	0799      	lsls	r1, r3, #30
 800774c:	bf04      	itt	eq
 800774e:	089b      	lsreq	r3, r3, #2
 8007750:	3002      	addeq	r0, #2
 8007752:	07d9      	lsls	r1, r3, #31
 8007754:	d403      	bmi.n	800775e <__lo0bits+0x4e>
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	f100 0001 	add.w	r0, r0, #1
 800775c:	d003      	beq.n	8007766 <__lo0bits+0x56>
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	4770      	bx	lr
 8007762:	2000      	movs	r0, #0
 8007764:	4770      	bx	lr
 8007766:	2020      	movs	r0, #32
 8007768:	4770      	bx	lr
	...

0800776c <__i2b>:
 800776c:	b510      	push	{r4, lr}
 800776e:	460c      	mov	r4, r1
 8007770:	2101      	movs	r1, #1
 8007772:	f7ff ff05 	bl	8007580 <_Balloc>
 8007776:	4602      	mov	r2, r0
 8007778:	b928      	cbnz	r0, 8007786 <__i2b+0x1a>
 800777a:	f240 1145 	movw	r1, #325	; 0x145
 800777e:	4b04      	ldr	r3, [pc, #16]	; (8007790 <__i2b+0x24>)
 8007780:	4804      	ldr	r0, [pc, #16]	; (8007794 <__i2b+0x28>)
 8007782:	f000 fcaf 	bl	80080e4 <__assert_func>
 8007786:	2301      	movs	r3, #1
 8007788:	6144      	str	r4, [r0, #20]
 800778a:	6103      	str	r3, [r0, #16]
 800778c:	bd10      	pop	{r4, pc}
 800778e:	bf00      	nop
 8007790:	08009867 	.word	0x08009867
 8007794:	08009878 	.word	0x08009878

08007798 <__multiply>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	4691      	mov	r9, r2
 800779e:	690a      	ldr	r2, [r1, #16]
 80077a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077a4:	460c      	mov	r4, r1
 80077a6:	429a      	cmp	r2, r3
 80077a8:	bfbe      	ittt	lt
 80077aa:	460b      	movlt	r3, r1
 80077ac:	464c      	movlt	r4, r9
 80077ae:	4699      	movlt	r9, r3
 80077b0:	6927      	ldr	r7, [r4, #16]
 80077b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077b6:	68a3      	ldr	r3, [r4, #8]
 80077b8:	6861      	ldr	r1, [r4, #4]
 80077ba:	eb07 060a 	add.w	r6, r7, sl
 80077be:	42b3      	cmp	r3, r6
 80077c0:	b085      	sub	sp, #20
 80077c2:	bfb8      	it	lt
 80077c4:	3101      	addlt	r1, #1
 80077c6:	f7ff fedb 	bl	8007580 <_Balloc>
 80077ca:	b930      	cbnz	r0, 80077da <__multiply+0x42>
 80077cc:	4602      	mov	r2, r0
 80077ce:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80077d2:	4b43      	ldr	r3, [pc, #268]	; (80078e0 <__multiply+0x148>)
 80077d4:	4843      	ldr	r0, [pc, #268]	; (80078e4 <__multiply+0x14c>)
 80077d6:	f000 fc85 	bl	80080e4 <__assert_func>
 80077da:	f100 0514 	add.w	r5, r0, #20
 80077de:	462b      	mov	r3, r5
 80077e0:	2200      	movs	r2, #0
 80077e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077e6:	4543      	cmp	r3, r8
 80077e8:	d321      	bcc.n	800782e <__multiply+0x96>
 80077ea:	f104 0314 	add.w	r3, r4, #20
 80077ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077f2:	f109 0314 	add.w	r3, r9, #20
 80077f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077fa:	9202      	str	r2, [sp, #8]
 80077fc:	1b3a      	subs	r2, r7, r4
 80077fe:	3a15      	subs	r2, #21
 8007800:	f022 0203 	bic.w	r2, r2, #3
 8007804:	3204      	adds	r2, #4
 8007806:	f104 0115 	add.w	r1, r4, #21
 800780a:	428f      	cmp	r7, r1
 800780c:	bf38      	it	cc
 800780e:	2204      	movcc	r2, #4
 8007810:	9201      	str	r2, [sp, #4]
 8007812:	9a02      	ldr	r2, [sp, #8]
 8007814:	9303      	str	r3, [sp, #12]
 8007816:	429a      	cmp	r2, r3
 8007818:	d80c      	bhi.n	8007834 <__multiply+0x9c>
 800781a:	2e00      	cmp	r6, #0
 800781c:	dd03      	ble.n	8007826 <__multiply+0x8e>
 800781e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007822:	2b00      	cmp	r3, #0
 8007824:	d05a      	beq.n	80078dc <__multiply+0x144>
 8007826:	6106      	str	r6, [r0, #16]
 8007828:	b005      	add	sp, #20
 800782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782e:	f843 2b04 	str.w	r2, [r3], #4
 8007832:	e7d8      	b.n	80077e6 <__multiply+0x4e>
 8007834:	f8b3 a000 	ldrh.w	sl, [r3]
 8007838:	f1ba 0f00 	cmp.w	sl, #0
 800783c:	d023      	beq.n	8007886 <__multiply+0xee>
 800783e:	46a9      	mov	r9, r5
 8007840:	f04f 0c00 	mov.w	ip, #0
 8007844:	f104 0e14 	add.w	lr, r4, #20
 8007848:	f85e 2b04 	ldr.w	r2, [lr], #4
 800784c:	f8d9 1000 	ldr.w	r1, [r9]
 8007850:	fa1f fb82 	uxth.w	fp, r2
 8007854:	b289      	uxth	r1, r1
 8007856:	fb0a 110b 	mla	r1, sl, fp, r1
 800785a:	4461      	add	r1, ip
 800785c:	f8d9 c000 	ldr.w	ip, [r9]
 8007860:	0c12      	lsrs	r2, r2, #16
 8007862:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007866:	fb0a c202 	mla	r2, sl, r2, ip
 800786a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800786e:	b289      	uxth	r1, r1
 8007870:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007874:	4577      	cmp	r7, lr
 8007876:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800787a:	f849 1b04 	str.w	r1, [r9], #4
 800787e:	d8e3      	bhi.n	8007848 <__multiply+0xb0>
 8007880:	9a01      	ldr	r2, [sp, #4]
 8007882:	f845 c002 	str.w	ip, [r5, r2]
 8007886:	9a03      	ldr	r2, [sp, #12]
 8007888:	3304      	adds	r3, #4
 800788a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800788e:	f1b9 0f00 	cmp.w	r9, #0
 8007892:	d021      	beq.n	80078d8 <__multiply+0x140>
 8007894:	46ae      	mov	lr, r5
 8007896:	f04f 0a00 	mov.w	sl, #0
 800789a:	6829      	ldr	r1, [r5, #0]
 800789c:	f104 0c14 	add.w	ip, r4, #20
 80078a0:	f8bc b000 	ldrh.w	fp, [ip]
 80078a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078a8:	b289      	uxth	r1, r1
 80078aa:	fb09 220b 	mla	r2, r9, fp, r2
 80078ae:	4452      	add	r2, sl
 80078b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078b4:	f84e 1b04 	str.w	r1, [lr], #4
 80078b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078c0:	f8be 1000 	ldrh.w	r1, [lr]
 80078c4:	4567      	cmp	r7, ip
 80078c6:	fb09 110a 	mla	r1, r9, sl, r1
 80078ca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80078ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078d2:	d8e5      	bhi.n	80078a0 <__multiply+0x108>
 80078d4:	9a01      	ldr	r2, [sp, #4]
 80078d6:	50a9      	str	r1, [r5, r2]
 80078d8:	3504      	adds	r5, #4
 80078da:	e79a      	b.n	8007812 <__multiply+0x7a>
 80078dc:	3e01      	subs	r6, #1
 80078de:	e79c      	b.n	800781a <__multiply+0x82>
 80078e0:	08009867 	.word	0x08009867
 80078e4:	08009878 	.word	0x08009878

080078e8 <__pow5mult>:
 80078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ec:	4615      	mov	r5, r2
 80078ee:	f012 0203 	ands.w	r2, r2, #3
 80078f2:	4606      	mov	r6, r0
 80078f4:	460f      	mov	r7, r1
 80078f6:	d007      	beq.n	8007908 <__pow5mult+0x20>
 80078f8:	4c25      	ldr	r4, [pc, #148]	; (8007990 <__pow5mult+0xa8>)
 80078fa:	3a01      	subs	r2, #1
 80078fc:	2300      	movs	r3, #0
 80078fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007902:	f7ff fe9f 	bl	8007644 <__multadd>
 8007906:	4607      	mov	r7, r0
 8007908:	10ad      	asrs	r5, r5, #2
 800790a:	d03d      	beq.n	8007988 <__pow5mult+0xa0>
 800790c:	69f4      	ldr	r4, [r6, #28]
 800790e:	b97c      	cbnz	r4, 8007930 <__pow5mult+0x48>
 8007910:	2010      	movs	r0, #16
 8007912:	f7ff fd81 	bl	8007418 <malloc>
 8007916:	4602      	mov	r2, r0
 8007918:	61f0      	str	r0, [r6, #28]
 800791a:	b928      	cbnz	r0, 8007928 <__pow5mult+0x40>
 800791c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007920:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <__pow5mult+0xac>)
 8007922:	481d      	ldr	r0, [pc, #116]	; (8007998 <__pow5mult+0xb0>)
 8007924:	f000 fbde 	bl	80080e4 <__assert_func>
 8007928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800792c:	6004      	str	r4, [r0, #0]
 800792e:	60c4      	str	r4, [r0, #12]
 8007930:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007938:	b94c      	cbnz	r4, 800794e <__pow5mult+0x66>
 800793a:	f240 2171 	movw	r1, #625	; 0x271
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ff14 	bl	800776c <__i2b>
 8007944:	2300      	movs	r3, #0
 8007946:	4604      	mov	r4, r0
 8007948:	f8c8 0008 	str.w	r0, [r8, #8]
 800794c:	6003      	str	r3, [r0, #0]
 800794e:	f04f 0900 	mov.w	r9, #0
 8007952:	07eb      	lsls	r3, r5, #31
 8007954:	d50a      	bpl.n	800796c <__pow5mult+0x84>
 8007956:	4639      	mov	r1, r7
 8007958:	4622      	mov	r2, r4
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ff1c 	bl	8007798 <__multiply>
 8007960:	4680      	mov	r8, r0
 8007962:	4639      	mov	r1, r7
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff fe4b 	bl	8007600 <_Bfree>
 800796a:	4647      	mov	r7, r8
 800796c:	106d      	asrs	r5, r5, #1
 800796e:	d00b      	beq.n	8007988 <__pow5mult+0xa0>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	b938      	cbnz	r0, 8007984 <__pow5mult+0x9c>
 8007974:	4622      	mov	r2, r4
 8007976:	4621      	mov	r1, r4
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff ff0d 	bl	8007798 <__multiply>
 800797e:	6020      	str	r0, [r4, #0]
 8007980:	f8c0 9000 	str.w	r9, [r0]
 8007984:	4604      	mov	r4, r0
 8007986:	e7e4      	b.n	8007952 <__pow5mult+0x6a>
 8007988:	4638      	mov	r0, r7
 800798a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798e:	bf00      	nop
 8007990:	080099c8 	.word	0x080099c8
 8007994:	080097f8 	.word	0x080097f8
 8007998:	08009878 	.word	0x08009878

0800799c <__lshift>:
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	460c      	mov	r4, r1
 80079a2:	4607      	mov	r7, r0
 80079a4:	4691      	mov	r9, r2
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	6849      	ldr	r1, [r1, #4]
 80079aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079b4:	f108 0601 	add.w	r6, r8, #1
 80079b8:	42b3      	cmp	r3, r6
 80079ba:	db0b      	blt.n	80079d4 <__lshift+0x38>
 80079bc:	4638      	mov	r0, r7
 80079be:	f7ff fddf 	bl	8007580 <_Balloc>
 80079c2:	4605      	mov	r5, r0
 80079c4:	b948      	cbnz	r0, 80079da <__lshift+0x3e>
 80079c6:	4602      	mov	r2, r0
 80079c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80079cc:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <__lshift+0xd0>)
 80079ce:	4828      	ldr	r0, [pc, #160]	; (8007a70 <__lshift+0xd4>)
 80079d0:	f000 fb88 	bl	80080e4 <__assert_func>
 80079d4:	3101      	adds	r1, #1
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	e7ee      	b.n	80079b8 <__lshift+0x1c>
 80079da:	2300      	movs	r3, #0
 80079dc:	f100 0114 	add.w	r1, r0, #20
 80079e0:	f100 0210 	add.w	r2, r0, #16
 80079e4:	4618      	mov	r0, r3
 80079e6:	4553      	cmp	r3, sl
 80079e8:	db33      	blt.n	8007a52 <__lshift+0xb6>
 80079ea:	6920      	ldr	r0, [r4, #16]
 80079ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079f0:	f104 0314 	add.w	r3, r4, #20
 80079f4:	f019 091f 	ands.w	r9, r9, #31
 80079f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a00:	d02b      	beq.n	8007a5a <__lshift+0xbe>
 8007a02:	468a      	mov	sl, r1
 8007a04:	2200      	movs	r2, #0
 8007a06:	f1c9 0e20 	rsb	lr, r9, #32
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a10:	4310      	orrs	r0, r2
 8007a12:	f84a 0b04 	str.w	r0, [sl], #4
 8007a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a1a:	459c      	cmp	ip, r3
 8007a1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a20:	d8f3      	bhi.n	8007a0a <__lshift+0x6e>
 8007a22:	ebac 0304 	sub.w	r3, ip, r4
 8007a26:	3b15      	subs	r3, #21
 8007a28:	f023 0303 	bic.w	r3, r3, #3
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	f104 0015 	add.w	r0, r4, #21
 8007a32:	4584      	cmp	ip, r0
 8007a34:	bf38      	it	cc
 8007a36:	2304      	movcc	r3, #4
 8007a38:	50ca      	str	r2, [r1, r3]
 8007a3a:	b10a      	cbz	r2, 8007a40 <__lshift+0xa4>
 8007a3c:	f108 0602 	add.w	r6, r8, #2
 8007a40:	3e01      	subs	r6, #1
 8007a42:	4638      	mov	r0, r7
 8007a44:	4621      	mov	r1, r4
 8007a46:	612e      	str	r6, [r5, #16]
 8007a48:	f7ff fdda 	bl	8007600 <_Bfree>
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a56:	3301      	adds	r3, #1
 8007a58:	e7c5      	b.n	80079e6 <__lshift+0x4a>
 8007a5a:	3904      	subs	r1, #4
 8007a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a60:	459c      	cmp	ip, r3
 8007a62:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a66:	d8f9      	bhi.n	8007a5c <__lshift+0xc0>
 8007a68:	e7ea      	b.n	8007a40 <__lshift+0xa4>
 8007a6a:	bf00      	nop
 8007a6c:	08009867 	.word	0x08009867
 8007a70:	08009878 	.word	0x08009878

08007a74 <__mcmp>:
 8007a74:	4603      	mov	r3, r0
 8007a76:	690a      	ldr	r2, [r1, #16]
 8007a78:	6900      	ldr	r0, [r0, #16]
 8007a7a:	b530      	push	{r4, r5, lr}
 8007a7c:	1a80      	subs	r0, r0, r2
 8007a7e:	d10d      	bne.n	8007a9c <__mcmp+0x28>
 8007a80:	3314      	adds	r3, #20
 8007a82:	3114      	adds	r1, #20
 8007a84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a94:	4295      	cmp	r5, r2
 8007a96:	d002      	beq.n	8007a9e <__mcmp+0x2a>
 8007a98:	d304      	bcc.n	8007aa4 <__mcmp+0x30>
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	bd30      	pop	{r4, r5, pc}
 8007a9e:	42a3      	cmp	r3, r4
 8007aa0:	d3f4      	bcc.n	8007a8c <__mcmp+0x18>
 8007aa2:	e7fb      	b.n	8007a9c <__mcmp+0x28>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	e7f8      	b.n	8007a9c <__mcmp+0x28>
	...

08007aac <__mdiff>:
 8007aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	4614      	mov	r4, r2
 8007aba:	f7ff ffdb 	bl	8007a74 <__mcmp>
 8007abe:	1e06      	subs	r6, r0, #0
 8007ac0:	d111      	bne.n	8007ae6 <__mdiff+0x3a>
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	f7ff fd5b 	bl	8007580 <_Balloc>
 8007aca:	4602      	mov	r2, r0
 8007acc:	b928      	cbnz	r0, 8007ada <__mdiff+0x2e>
 8007ace:	f240 2137 	movw	r1, #567	; 0x237
 8007ad2:	4b3a      	ldr	r3, [pc, #232]	; (8007bbc <__mdiff+0x110>)
 8007ad4:	483a      	ldr	r0, [pc, #232]	; (8007bc0 <__mdiff+0x114>)
 8007ad6:	f000 fb05 	bl	80080e4 <__assert_func>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae6:	bfa4      	itt	ge
 8007ae8:	4623      	movge	r3, r4
 8007aea:	462c      	movge	r4, r5
 8007aec:	4638      	mov	r0, r7
 8007aee:	6861      	ldr	r1, [r4, #4]
 8007af0:	bfa6      	itte	ge
 8007af2:	461d      	movge	r5, r3
 8007af4:	2600      	movge	r6, #0
 8007af6:	2601      	movlt	r6, #1
 8007af8:	f7ff fd42 	bl	8007580 <_Balloc>
 8007afc:	4602      	mov	r2, r0
 8007afe:	b918      	cbnz	r0, 8007b08 <__mdiff+0x5c>
 8007b00:	f240 2145 	movw	r1, #581	; 0x245
 8007b04:	4b2d      	ldr	r3, [pc, #180]	; (8007bbc <__mdiff+0x110>)
 8007b06:	e7e5      	b.n	8007ad4 <__mdiff+0x28>
 8007b08:	f102 0814 	add.w	r8, r2, #20
 8007b0c:	46c2      	mov	sl, r8
 8007b0e:	f04f 0c00 	mov.w	ip, #0
 8007b12:	6927      	ldr	r7, [r4, #16]
 8007b14:	60c6      	str	r6, [r0, #12]
 8007b16:	692e      	ldr	r6, [r5, #16]
 8007b18:	f104 0014 	add.w	r0, r4, #20
 8007b1c:	f105 0914 	add.w	r9, r5, #20
 8007b20:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007b24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b28:	3410      	adds	r4, #16
 8007b2a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007b2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b32:	fa1f f18b 	uxth.w	r1, fp
 8007b36:	4461      	add	r1, ip
 8007b38:	fa1f fc83 	uxth.w	ip, r3
 8007b3c:	0c1b      	lsrs	r3, r3, #16
 8007b3e:	eba1 010c 	sub.w	r1, r1, ip
 8007b42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b46:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b4a:	b289      	uxth	r1, r1
 8007b4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007b50:	454e      	cmp	r6, r9
 8007b52:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007b56:	f84a 1b04 	str.w	r1, [sl], #4
 8007b5a:	d8e6      	bhi.n	8007b2a <__mdiff+0x7e>
 8007b5c:	1b73      	subs	r3, r6, r5
 8007b5e:	3b15      	subs	r3, #21
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	3515      	adds	r5, #21
 8007b66:	3304      	adds	r3, #4
 8007b68:	42ae      	cmp	r6, r5
 8007b6a:	bf38      	it	cc
 8007b6c:	2304      	movcc	r3, #4
 8007b6e:	4418      	add	r0, r3
 8007b70:	4443      	add	r3, r8
 8007b72:	461e      	mov	r6, r3
 8007b74:	4605      	mov	r5, r0
 8007b76:	4575      	cmp	r5, lr
 8007b78:	d30e      	bcc.n	8007b98 <__mdiff+0xec>
 8007b7a:	f10e 0103 	add.w	r1, lr, #3
 8007b7e:	1a09      	subs	r1, r1, r0
 8007b80:	f021 0103 	bic.w	r1, r1, #3
 8007b84:	3803      	subs	r0, #3
 8007b86:	4586      	cmp	lr, r0
 8007b88:	bf38      	it	cc
 8007b8a:	2100      	movcc	r1, #0
 8007b8c:	440b      	add	r3, r1
 8007b8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b92:	b189      	cbz	r1, 8007bb8 <__mdiff+0x10c>
 8007b94:	6117      	str	r7, [r2, #16]
 8007b96:	e7a3      	b.n	8007ae0 <__mdiff+0x34>
 8007b98:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b9c:	fa1f f188 	uxth.w	r1, r8
 8007ba0:	4461      	add	r1, ip
 8007ba2:	140c      	asrs	r4, r1, #16
 8007ba4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ba8:	b289      	uxth	r1, r1
 8007baa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007bae:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007bb2:	f846 1b04 	str.w	r1, [r6], #4
 8007bb6:	e7de      	b.n	8007b76 <__mdiff+0xca>
 8007bb8:	3f01      	subs	r7, #1
 8007bba:	e7e8      	b.n	8007b8e <__mdiff+0xe2>
 8007bbc:	08009867 	.word	0x08009867
 8007bc0:	08009878 	.word	0x08009878

08007bc4 <__d2b>:
 8007bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	4617      	mov	r7, r2
 8007bca:	461c      	mov	r4, r3
 8007bcc:	9e08      	ldr	r6, [sp, #32]
 8007bce:	f7ff fcd7 	bl	8007580 <_Balloc>
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	b930      	cbnz	r0, 8007be4 <__d2b+0x20>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	f240 310f 	movw	r1, #783	; 0x30f
 8007bdc:	4b22      	ldr	r3, [pc, #136]	; (8007c68 <__d2b+0xa4>)
 8007bde:	4823      	ldr	r0, [pc, #140]	; (8007c6c <__d2b+0xa8>)
 8007be0:	f000 fa80 	bl	80080e4 <__assert_func>
 8007be4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007be8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007bec:	bb24      	cbnz	r4, 8007c38 <__d2b+0x74>
 8007bee:	2f00      	cmp	r7, #0
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	d026      	beq.n	8007c42 <__d2b+0x7e>
 8007bf4:	4668      	mov	r0, sp
 8007bf6:	9700      	str	r7, [sp, #0]
 8007bf8:	f7ff fd8a 	bl	8007710 <__lo0bits>
 8007bfc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c00:	b1e8      	cbz	r0, 8007c3e <__d2b+0x7a>
 8007c02:	f1c0 0320 	rsb	r3, r0, #32
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	40c2      	lsrs	r2, r0
 8007c0e:	616b      	str	r3, [r5, #20]
 8007c10:	9201      	str	r2, [sp, #4]
 8007c12:	9b01      	ldr	r3, [sp, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bf14      	ite	ne
 8007c18:	2102      	movne	r1, #2
 8007c1a:	2101      	moveq	r1, #1
 8007c1c:	61ab      	str	r3, [r5, #24]
 8007c1e:	6129      	str	r1, [r5, #16]
 8007c20:	b1bc      	cbz	r4, 8007c52 <__d2b+0x8e>
 8007c22:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007c26:	4404      	add	r4, r0
 8007c28:	6034      	str	r4, [r6, #0]
 8007c2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c30:	6018      	str	r0, [r3, #0]
 8007c32:	4628      	mov	r0, r5
 8007c34:	b003      	add	sp, #12
 8007c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c3c:	e7d7      	b.n	8007bee <__d2b+0x2a>
 8007c3e:	6169      	str	r1, [r5, #20]
 8007c40:	e7e7      	b.n	8007c12 <__d2b+0x4e>
 8007c42:	a801      	add	r0, sp, #4
 8007c44:	f7ff fd64 	bl	8007710 <__lo0bits>
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	616b      	str	r3, [r5, #20]
 8007c4e:	3020      	adds	r0, #32
 8007c50:	e7e5      	b.n	8007c1e <__d2b+0x5a>
 8007c52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c56:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007c5a:	6030      	str	r0, [r6, #0]
 8007c5c:	6918      	ldr	r0, [r3, #16]
 8007c5e:	f7ff fd37 	bl	80076d0 <__hi0bits>
 8007c62:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007c66:	e7e2      	b.n	8007c2e <__d2b+0x6a>
 8007c68:	08009867 	.word	0x08009867
 8007c6c:	08009878 	.word	0x08009878

08007c70 <__ssputs_r>:
 8007c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c74:	461f      	mov	r7, r3
 8007c76:	688e      	ldr	r6, [r1, #8]
 8007c78:	4682      	mov	sl, r0
 8007c7a:	42be      	cmp	r6, r7
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	4690      	mov	r8, r2
 8007c80:	680b      	ldr	r3, [r1, #0]
 8007c82:	d82c      	bhi.n	8007cde <__ssputs_r+0x6e>
 8007c84:	898a      	ldrh	r2, [r1, #12]
 8007c86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c8a:	d026      	beq.n	8007cda <__ssputs_r+0x6a>
 8007c8c:	6965      	ldr	r5, [r4, #20]
 8007c8e:	6909      	ldr	r1, [r1, #16]
 8007c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c94:	eba3 0901 	sub.w	r9, r3, r1
 8007c98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c9c:	1c7b      	adds	r3, r7, #1
 8007c9e:	444b      	add	r3, r9
 8007ca0:	106d      	asrs	r5, r5, #1
 8007ca2:	429d      	cmp	r5, r3
 8007ca4:	bf38      	it	cc
 8007ca6:	461d      	movcc	r5, r3
 8007ca8:	0553      	lsls	r3, r2, #21
 8007caa:	d527      	bpl.n	8007cfc <__ssputs_r+0x8c>
 8007cac:	4629      	mov	r1, r5
 8007cae:	f7ff fbdb 	bl	8007468 <_malloc_r>
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	b360      	cbz	r0, 8007d10 <__ssputs_r+0xa0>
 8007cb6:	464a      	mov	r2, r9
 8007cb8:	6921      	ldr	r1, [r4, #16]
 8007cba:	f000 fa05 	bl	80080c8 <memcpy>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc8:	81a3      	strh	r3, [r4, #12]
 8007cca:	6126      	str	r6, [r4, #16]
 8007ccc:	444e      	add	r6, r9
 8007cce:	6026      	str	r6, [r4, #0]
 8007cd0:	463e      	mov	r6, r7
 8007cd2:	6165      	str	r5, [r4, #20]
 8007cd4:	eba5 0509 	sub.w	r5, r5, r9
 8007cd8:	60a5      	str	r5, [r4, #8]
 8007cda:	42be      	cmp	r6, r7
 8007cdc:	d900      	bls.n	8007ce0 <__ssputs_r+0x70>
 8007cde:	463e      	mov	r6, r7
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	4641      	mov	r1, r8
 8007ce4:	6820      	ldr	r0, [r4, #0]
 8007ce6:	f000 f9c5 	bl	8008074 <memmove>
 8007cea:	2000      	movs	r0, #0
 8007cec:	68a3      	ldr	r3, [r4, #8]
 8007cee:	1b9b      	subs	r3, r3, r6
 8007cf0:	60a3      	str	r3, [r4, #8]
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	4433      	add	r3, r6
 8007cf6:	6023      	str	r3, [r4, #0]
 8007cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfc:	462a      	mov	r2, r5
 8007cfe:	f000 fa35 	bl	800816c <_realloc_r>
 8007d02:	4606      	mov	r6, r0
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d1e0      	bne.n	8007cca <__ssputs_r+0x5a>
 8007d08:	4650      	mov	r0, sl
 8007d0a:	6921      	ldr	r1, [r4, #16]
 8007d0c:	f7ff fb3c 	bl	8007388 <_free_r>
 8007d10:	230c      	movs	r3, #12
 8007d12:	f8ca 3000 	str.w	r3, [sl]
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d20:	81a3      	strh	r3, [r4, #12]
 8007d22:	e7e9      	b.n	8007cf8 <__ssputs_r+0x88>

08007d24 <_svfiprintf_r>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	4698      	mov	r8, r3
 8007d2a:	898b      	ldrh	r3, [r1, #12]
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	061b      	lsls	r3, r3, #24
 8007d30:	460d      	mov	r5, r1
 8007d32:	4614      	mov	r4, r2
 8007d34:	b09d      	sub	sp, #116	; 0x74
 8007d36:	d50e      	bpl.n	8007d56 <_svfiprintf_r+0x32>
 8007d38:	690b      	ldr	r3, [r1, #16]
 8007d3a:	b963      	cbnz	r3, 8007d56 <_svfiprintf_r+0x32>
 8007d3c:	2140      	movs	r1, #64	; 0x40
 8007d3e:	f7ff fb93 	bl	8007468 <_malloc_r>
 8007d42:	6028      	str	r0, [r5, #0]
 8007d44:	6128      	str	r0, [r5, #16]
 8007d46:	b920      	cbnz	r0, 8007d52 <_svfiprintf_r+0x2e>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	e0d0      	b.n	8007ef4 <_svfiprintf_r+0x1d0>
 8007d52:	2340      	movs	r3, #64	; 0x40
 8007d54:	616b      	str	r3, [r5, #20]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d60:	2330      	movs	r3, #48	; 0x30
 8007d62:	f04f 0901 	mov.w	r9, #1
 8007d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d6a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007f0c <_svfiprintf_r+0x1e8>
 8007d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d72:	4623      	mov	r3, r4
 8007d74:	469a      	mov	sl, r3
 8007d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d7a:	b10a      	cbz	r2, 8007d80 <_svfiprintf_r+0x5c>
 8007d7c:	2a25      	cmp	r2, #37	; 0x25
 8007d7e:	d1f9      	bne.n	8007d74 <_svfiprintf_r+0x50>
 8007d80:	ebba 0b04 	subs.w	fp, sl, r4
 8007d84:	d00b      	beq.n	8007d9e <_svfiprintf_r+0x7a>
 8007d86:	465b      	mov	r3, fp
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f7ff ff6f 	bl	8007c70 <__ssputs_r>
 8007d92:	3001      	adds	r0, #1
 8007d94:	f000 80a9 	beq.w	8007eea <_svfiprintf_r+0x1c6>
 8007d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d9a:	445a      	add	r2, fp
 8007d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 80a1 	beq.w	8007eea <_svfiprintf_r+0x1c6>
 8007da8:	2300      	movs	r3, #0
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db2:	f10a 0a01 	add.w	sl, sl, #1
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8007dc0:	4654      	mov	r4, sl
 8007dc2:	2205      	movs	r2, #5
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	4850      	ldr	r0, [pc, #320]	; (8007f0c <_svfiprintf_r+0x1e8>)
 8007dca:	f7fe fc62 	bl	8006692 <memchr>
 8007dce:	9a04      	ldr	r2, [sp, #16]
 8007dd0:	b9d8      	cbnz	r0, 8007e0a <_svfiprintf_r+0xe6>
 8007dd2:	06d0      	lsls	r0, r2, #27
 8007dd4:	bf44      	itt	mi
 8007dd6:	2320      	movmi	r3, #32
 8007dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ddc:	0711      	lsls	r1, r2, #28
 8007dde:	bf44      	itt	mi
 8007de0:	232b      	movmi	r3, #43	; 0x2b
 8007de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007de6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dea:	2b2a      	cmp	r3, #42	; 0x2a
 8007dec:	d015      	beq.n	8007e1a <_svfiprintf_r+0xf6>
 8007dee:	4654      	mov	r4, sl
 8007df0:	2000      	movs	r0, #0
 8007df2:	f04f 0c0a 	mov.w	ip, #10
 8007df6:	9a07      	ldr	r2, [sp, #28]
 8007df8:	4621      	mov	r1, r4
 8007dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dfe:	3b30      	subs	r3, #48	; 0x30
 8007e00:	2b09      	cmp	r3, #9
 8007e02:	d94d      	bls.n	8007ea0 <_svfiprintf_r+0x17c>
 8007e04:	b1b0      	cbz	r0, 8007e34 <_svfiprintf_r+0x110>
 8007e06:	9207      	str	r2, [sp, #28]
 8007e08:	e014      	b.n	8007e34 <_svfiprintf_r+0x110>
 8007e0a:	eba0 0308 	sub.w	r3, r0, r8
 8007e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e12:	4313      	orrs	r3, r2
 8007e14:	46a2      	mov	sl, r4
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	e7d2      	b.n	8007dc0 <_svfiprintf_r+0x9c>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	9103      	str	r1, [sp, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbb      	ittet	lt
 8007e26:	425b      	neglt	r3, r3
 8007e28:	f042 0202 	orrlt.w	r2, r2, #2
 8007e2c:	9307      	strge	r3, [sp, #28]
 8007e2e:	9307      	strlt	r3, [sp, #28]
 8007e30:	bfb8      	it	lt
 8007e32:	9204      	strlt	r2, [sp, #16]
 8007e34:	7823      	ldrb	r3, [r4, #0]
 8007e36:	2b2e      	cmp	r3, #46	; 0x2e
 8007e38:	d10c      	bne.n	8007e54 <_svfiprintf_r+0x130>
 8007e3a:	7863      	ldrb	r3, [r4, #1]
 8007e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3e:	d134      	bne.n	8007eaa <_svfiprintf_r+0x186>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	3402      	adds	r4, #2
 8007e44:	1d1a      	adds	r2, r3, #4
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	9203      	str	r2, [sp, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bfb8      	it	lt
 8007e4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007f10 <_svfiprintf_r+0x1ec>
 8007e58:	2203      	movs	r2, #3
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	7821      	ldrb	r1, [r4, #0]
 8007e5e:	f7fe fc18 	bl	8006692 <memchr>
 8007e62:	b138      	cbz	r0, 8007e74 <_svfiprintf_r+0x150>
 8007e64:	2240      	movs	r2, #64	; 0x40
 8007e66:	9b04      	ldr	r3, [sp, #16]
 8007e68:	eba0 000a 	sub.w	r0, r0, sl
 8007e6c:	4082      	lsls	r2, r0
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	3401      	adds	r4, #1
 8007e72:	9304      	str	r3, [sp, #16]
 8007e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e78:	2206      	movs	r2, #6
 8007e7a:	4826      	ldr	r0, [pc, #152]	; (8007f14 <_svfiprintf_r+0x1f0>)
 8007e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e80:	f7fe fc07 	bl	8006692 <memchr>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d038      	beq.n	8007efa <_svfiprintf_r+0x1d6>
 8007e88:	4b23      	ldr	r3, [pc, #140]	; (8007f18 <_svfiprintf_r+0x1f4>)
 8007e8a:	bb1b      	cbnz	r3, 8007ed4 <_svfiprintf_r+0x1b0>
 8007e8c:	9b03      	ldr	r3, [sp, #12]
 8007e8e:	3307      	adds	r3, #7
 8007e90:	f023 0307 	bic.w	r3, r3, #7
 8007e94:	3308      	adds	r3, #8
 8007e96:	9303      	str	r3, [sp, #12]
 8007e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9a:	4433      	add	r3, r6
 8007e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9e:	e768      	b.n	8007d72 <_svfiprintf_r+0x4e>
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	2001      	movs	r0, #1
 8007ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea8:	e7a6      	b.n	8007df8 <_svfiprintf_r+0xd4>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f04f 0c0a 	mov.w	ip, #10
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	3401      	adds	r4, #1
 8007eb4:	9305      	str	r3, [sp, #20]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ebc:	3a30      	subs	r2, #48	; 0x30
 8007ebe:	2a09      	cmp	r2, #9
 8007ec0:	d903      	bls.n	8007eca <_svfiprintf_r+0x1a6>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0c6      	beq.n	8007e54 <_svfiprintf_r+0x130>
 8007ec6:	9105      	str	r1, [sp, #20]
 8007ec8:	e7c4      	b.n	8007e54 <_svfiprintf_r+0x130>
 8007eca:	4604      	mov	r4, r0
 8007ecc:	2301      	movs	r3, #1
 8007ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ed2:	e7f0      	b.n	8007eb6 <_svfiprintf_r+0x192>
 8007ed4:	ab03      	add	r3, sp, #12
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4638      	mov	r0, r7
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <_svfiprintf_r+0x1f8>)
 8007ede:	a904      	add	r1, sp, #16
 8007ee0:	f7fd fe70 	bl	8005bc4 <_printf_float>
 8007ee4:	1c42      	adds	r2, r0, #1
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	d1d6      	bne.n	8007e98 <_svfiprintf_r+0x174>
 8007eea:	89ab      	ldrh	r3, [r5, #12]
 8007eec:	065b      	lsls	r3, r3, #25
 8007eee:	f53f af2d 	bmi.w	8007d4c <_svfiprintf_r+0x28>
 8007ef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ef4:	b01d      	add	sp, #116	; 0x74
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	ab03      	add	r3, sp, #12
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	462a      	mov	r2, r5
 8007f00:	4638      	mov	r0, r7
 8007f02:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <_svfiprintf_r+0x1f8>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	f7fe f8fd 	bl	8006104 <_printf_i>
 8007f0a:	e7eb      	b.n	8007ee4 <_svfiprintf_r+0x1c0>
 8007f0c:	080099d4 	.word	0x080099d4
 8007f10:	080099da 	.word	0x080099da
 8007f14:	080099de 	.word	0x080099de
 8007f18:	08005bc5 	.word	0x08005bc5
 8007f1c:	08007c71 	.word	0x08007c71

08007f20 <__sflush_r>:
 8007f20:	898a      	ldrh	r2, [r1, #12]
 8007f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f24:	4605      	mov	r5, r0
 8007f26:	0710      	lsls	r0, r2, #28
 8007f28:	460c      	mov	r4, r1
 8007f2a:	d457      	bmi.n	8007fdc <__sflush_r+0xbc>
 8007f2c:	684b      	ldr	r3, [r1, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dc04      	bgt.n	8007f3c <__sflush_r+0x1c>
 8007f32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	dc01      	bgt.n	8007f3c <__sflush_r+0x1c>
 8007f38:	2000      	movs	r0, #0
 8007f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f3e:	2e00      	cmp	r6, #0
 8007f40:	d0fa      	beq.n	8007f38 <__sflush_r+0x18>
 8007f42:	2300      	movs	r3, #0
 8007f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f48:	682f      	ldr	r7, [r5, #0]
 8007f4a:	6a21      	ldr	r1, [r4, #32]
 8007f4c:	602b      	str	r3, [r5, #0]
 8007f4e:	d032      	beq.n	8007fb6 <__sflush_r+0x96>
 8007f50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	075a      	lsls	r2, r3, #29
 8007f56:	d505      	bpl.n	8007f64 <__sflush_r+0x44>
 8007f58:	6863      	ldr	r3, [r4, #4]
 8007f5a:	1ac0      	subs	r0, r0, r3
 8007f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f5e:	b10b      	cbz	r3, 8007f64 <__sflush_r+0x44>
 8007f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f62:	1ac0      	subs	r0, r0, r3
 8007f64:	2300      	movs	r3, #0
 8007f66:	4602      	mov	r2, r0
 8007f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	6a21      	ldr	r1, [r4, #32]
 8007f6e:	47b0      	blx	r6
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	d106      	bne.n	8007f84 <__sflush_r+0x64>
 8007f76:	6829      	ldr	r1, [r5, #0]
 8007f78:	291d      	cmp	r1, #29
 8007f7a:	d82b      	bhi.n	8007fd4 <__sflush_r+0xb4>
 8007f7c:	4a28      	ldr	r2, [pc, #160]	; (8008020 <__sflush_r+0x100>)
 8007f7e:	410a      	asrs	r2, r1
 8007f80:	07d6      	lsls	r6, r2, #31
 8007f82:	d427      	bmi.n	8007fd4 <__sflush_r+0xb4>
 8007f84:	2200      	movs	r2, #0
 8007f86:	6062      	str	r2, [r4, #4]
 8007f88:	6922      	ldr	r2, [r4, #16]
 8007f8a:	04d9      	lsls	r1, r3, #19
 8007f8c:	6022      	str	r2, [r4, #0]
 8007f8e:	d504      	bpl.n	8007f9a <__sflush_r+0x7a>
 8007f90:	1c42      	adds	r2, r0, #1
 8007f92:	d101      	bne.n	8007f98 <__sflush_r+0x78>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b903      	cbnz	r3, 8007f9a <__sflush_r+0x7a>
 8007f98:	6560      	str	r0, [r4, #84]	; 0x54
 8007f9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f9c:	602f      	str	r7, [r5, #0]
 8007f9e:	2900      	cmp	r1, #0
 8007fa0:	d0ca      	beq.n	8007f38 <__sflush_r+0x18>
 8007fa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fa6:	4299      	cmp	r1, r3
 8007fa8:	d002      	beq.n	8007fb0 <__sflush_r+0x90>
 8007faa:	4628      	mov	r0, r5
 8007fac:	f7ff f9ec 	bl	8007388 <_free_r>
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	6360      	str	r0, [r4, #52]	; 0x34
 8007fb4:	e7c1      	b.n	8007f3a <__sflush_r+0x1a>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4628      	mov	r0, r5
 8007fba:	47b0      	blx	r6
 8007fbc:	1c41      	adds	r1, r0, #1
 8007fbe:	d1c8      	bne.n	8007f52 <__sflush_r+0x32>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0c5      	beq.n	8007f52 <__sflush_r+0x32>
 8007fc6:	2b1d      	cmp	r3, #29
 8007fc8:	d001      	beq.n	8007fce <__sflush_r+0xae>
 8007fca:	2b16      	cmp	r3, #22
 8007fcc:	d101      	bne.n	8007fd2 <__sflush_r+0xb2>
 8007fce:	602f      	str	r7, [r5, #0]
 8007fd0:	e7b2      	b.n	8007f38 <__sflush_r+0x18>
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd8:	81a3      	strh	r3, [r4, #12]
 8007fda:	e7ae      	b.n	8007f3a <__sflush_r+0x1a>
 8007fdc:	690f      	ldr	r7, [r1, #16]
 8007fde:	2f00      	cmp	r7, #0
 8007fe0:	d0aa      	beq.n	8007f38 <__sflush_r+0x18>
 8007fe2:	0793      	lsls	r3, r2, #30
 8007fe4:	bf18      	it	ne
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	680e      	ldr	r6, [r1, #0]
 8007fea:	bf08      	it	eq
 8007fec:	694b      	ldreq	r3, [r1, #20]
 8007fee:	1bf6      	subs	r6, r6, r7
 8007ff0:	600f      	str	r7, [r1, #0]
 8007ff2:	608b      	str	r3, [r1, #8]
 8007ff4:	2e00      	cmp	r6, #0
 8007ff6:	dd9f      	ble.n	8007f38 <__sflush_r+0x18>
 8007ff8:	4633      	mov	r3, r6
 8007ffa:	463a      	mov	r2, r7
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	6a21      	ldr	r1, [r4, #32]
 8008000:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008004:	47e0      	blx	ip
 8008006:	2800      	cmp	r0, #0
 8008008:	dc06      	bgt.n	8008018 <__sflush_r+0xf8>
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008014:	81a3      	strh	r3, [r4, #12]
 8008016:	e790      	b.n	8007f3a <__sflush_r+0x1a>
 8008018:	4407      	add	r7, r0
 800801a:	1a36      	subs	r6, r6, r0
 800801c:	e7ea      	b.n	8007ff4 <__sflush_r+0xd4>
 800801e:	bf00      	nop
 8008020:	dfbffffe 	.word	0xdfbffffe

08008024 <_fflush_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	690b      	ldr	r3, [r1, #16]
 8008028:	4605      	mov	r5, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b913      	cbnz	r3, 8008034 <_fflush_r+0x10>
 800802e:	2500      	movs	r5, #0
 8008030:	4628      	mov	r0, r5
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	b118      	cbz	r0, 800803e <_fflush_r+0x1a>
 8008036:	6a03      	ldr	r3, [r0, #32]
 8008038:	b90b      	cbnz	r3, 800803e <_fflush_r+0x1a>
 800803a:	f7fe fa11 	bl	8006460 <__sinit>
 800803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f3      	beq.n	800802e <_fflush_r+0xa>
 8008046:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008048:	07d0      	lsls	r0, r2, #31
 800804a:	d404      	bmi.n	8008056 <_fflush_r+0x32>
 800804c:	0599      	lsls	r1, r3, #22
 800804e:	d402      	bmi.n	8008056 <_fflush_r+0x32>
 8008050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008052:	f7fe fb1c 	bl	800668e <__retarget_lock_acquire_recursive>
 8008056:	4628      	mov	r0, r5
 8008058:	4621      	mov	r1, r4
 800805a:	f7ff ff61 	bl	8007f20 <__sflush_r>
 800805e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008060:	4605      	mov	r5, r0
 8008062:	07da      	lsls	r2, r3, #31
 8008064:	d4e4      	bmi.n	8008030 <_fflush_r+0xc>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	059b      	lsls	r3, r3, #22
 800806a:	d4e1      	bmi.n	8008030 <_fflush_r+0xc>
 800806c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806e:	f7fe fb0f 	bl	8006690 <__retarget_lock_release_recursive>
 8008072:	e7dd      	b.n	8008030 <_fflush_r+0xc>

08008074 <memmove>:
 8008074:	4288      	cmp	r0, r1
 8008076:	b510      	push	{r4, lr}
 8008078:	eb01 0402 	add.w	r4, r1, r2
 800807c:	d902      	bls.n	8008084 <memmove+0x10>
 800807e:	4284      	cmp	r4, r0
 8008080:	4623      	mov	r3, r4
 8008082:	d807      	bhi.n	8008094 <memmove+0x20>
 8008084:	1e43      	subs	r3, r0, #1
 8008086:	42a1      	cmp	r1, r4
 8008088:	d008      	beq.n	800809c <memmove+0x28>
 800808a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800808e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008092:	e7f8      	b.n	8008086 <memmove+0x12>
 8008094:	4601      	mov	r1, r0
 8008096:	4402      	add	r2, r0
 8008098:	428a      	cmp	r2, r1
 800809a:	d100      	bne.n	800809e <memmove+0x2a>
 800809c:	bd10      	pop	{r4, pc}
 800809e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080a6:	e7f7      	b.n	8008098 <memmove+0x24>

080080a8 <_sbrk_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	2300      	movs	r3, #0
 80080ac:	4d05      	ldr	r5, [pc, #20]	; (80080c4 <_sbrk_r+0x1c>)
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7fa fb50 	bl	8002758 <_sbrk>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_sbrk_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_sbrk_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20000cb0 	.word	0x20000cb0

080080c8 <memcpy>:
 80080c8:	440a      	add	r2, r1
 80080ca:	4291      	cmp	r1, r2
 80080cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80080d0:	d100      	bne.n	80080d4 <memcpy+0xc>
 80080d2:	4770      	bx	lr
 80080d4:	b510      	push	{r4, lr}
 80080d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080da:	4291      	cmp	r1, r2
 80080dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e0:	d1f9      	bne.n	80080d6 <memcpy+0xe>
 80080e2:	bd10      	pop	{r4, pc}

080080e4 <__assert_func>:
 80080e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080e6:	4614      	mov	r4, r2
 80080e8:	461a      	mov	r2, r3
 80080ea:	4b09      	ldr	r3, [pc, #36]	; (8008110 <__assert_func+0x2c>)
 80080ec:	4605      	mov	r5, r0
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68d8      	ldr	r0, [r3, #12]
 80080f2:	b14c      	cbz	r4, 8008108 <__assert_func+0x24>
 80080f4:	4b07      	ldr	r3, [pc, #28]	; (8008114 <__assert_func+0x30>)
 80080f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080fa:	9100      	str	r1, [sp, #0]
 80080fc:	462b      	mov	r3, r5
 80080fe:	4906      	ldr	r1, [pc, #24]	; (8008118 <__assert_func+0x34>)
 8008100:	f000 f870 	bl	80081e4 <fiprintf>
 8008104:	f000 f880 	bl	8008208 <abort>
 8008108:	4b04      	ldr	r3, [pc, #16]	; (800811c <__assert_func+0x38>)
 800810a:	461c      	mov	r4, r3
 800810c:	e7f3      	b.n	80080f6 <__assert_func+0x12>
 800810e:	bf00      	nop
 8008110:	2000006c 	.word	0x2000006c
 8008114:	080099ef 	.word	0x080099ef
 8008118:	080099fc 	.word	0x080099fc
 800811c:	08009a2a 	.word	0x08009a2a

08008120 <_calloc_r>:
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	fba1 5402 	umull	r5, r4, r1, r2
 8008126:	b934      	cbnz	r4, 8008136 <_calloc_r+0x16>
 8008128:	4629      	mov	r1, r5
 800812a:	f7ff f99d 	bl	8007468 <_malloc_r>
 800812e:	4606      	mov	r6, r0
 8008130:	b928      	cbnz	r0, 800813e <_calloc_r+0x1e>
 8008132:	4630      	mov	r0, r6
 8008134:	bd70      	pop	{r4, r5, r6, pc}
 8008136:	220c      	movs	r2, #12
 8008138:	2600      	movs	r6, #0
 800813a:	6002      	str	r2, [r0, #0]
 800813c:	e7f9      	b.n	8008132 <_calloc_r+0x12>
 800813e:	462a      	mov	r2, r5
 8008140:	4621      	mov	r1, r4
 8008142:	f7fe fa26 	bl	8006592 <memset>
 8008146:	e7f4      	b.n	8008132 <_calloc_r+0x12>

08008148 <__ascii_mbtowc>:
 8008148:	b082      	sub	sp, #8
 800814a:	b901      	cbnz	r1, 800814e <__ascii_mbtowc+0x6>
 800814c:	a901      	add	r1, sp, #4
 800814e:	b142      	cbz	r2, 8008162 <__ascii_mbtowc+0x1a>
 8008150:	b14b      	cbz	r3, 8008166 <__ascii_mbtowc+0x1e>
 8008152:	7813      	ldrb	r3, [r2, #0]
 8008154:	600b      	str	r3, [r1, #0]
 8008156:	7812      	ldrb	r2, [r2, #0]
 8008158:	1e10      	subs	r0, r2, #0
 800815a:	bf18      	it	ne
 800815c:	2001      	movne	r0, #1
 800815e:	b002      	add	sp, #8
 8008160:	4770      	bx	lr
 8008162:	4610      	mov	r0, r2
 8008164:	e7fb      	b.n	800815e <__ascii_mbtowc+0x16>
 8008166:	f06f 0001 	mvn.w	r0, #1
 800816a:	e7f8      	b.n	800815e <__ascii_mbtowc+0x16>

0800816c <_realloc_r>:
 800816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008170:	4680      	mov	r8, r0
 8008172:	4614      	mov	r4, r2
 8008174:	460e      	mov	r6, r1
 8008176:	b921      	cbnz	r1, 8008182 <_realloc_r+0x16>
 8008178:	4611      	mov	r1, r2
 800817a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800817e:	f7ff b973 	b.w	8007468 <_malloc_r>
 8008182:	b92a      	cbnz	r2, 8008190 <_realloc_r+0x24>
 8008184:	f7ff f900 	bl	8007388 <_free_r>
 8008188:	4625      	mov	r5, r4
 800818a:	4628      	mov	r0, r5
 800818c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008190:	f000 f841 	bl	8008216 <_malloc_usable_size_r>
 8008194:	4284      	cmp	r4, r0
 8008196:	4607      	mov	r7, r0
 8008198:	d802      	bhi.n	80081a0 <_realloc_r+0x34>
 800819a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800819e:	d812      	bhi.n	80081c6 <_realloc_r+0x5a>
 80081a0:	4621      	mov	r1, r4
 80081a2:	4640      	mov	r0, r8
 80081a4:	f7ff f960 	bl	8007468 <_malloc_r>
 80081a8:	4605      	mov	r5, r0
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d0ed      	beq.n	800818a <_realloc_r+0x1e>
 80081ae:	42bc      	cmp	r4, r7
 80081b0:	4622      	mov	r2, r4
 80081b2:	4631      	mov	r1, r6
 80081b4:	bf28      	it	cs
 80081b6:	463a      	movcs	r2, r7
 80081b8:	f7ff ff86 	bl	80080c8 <memcpy>
 80081bc:	4631      	mov	r1, r6
 80081be:	4640      	mov	r0, r8
 80081c0:	f7ff f8e2 	bl	8007388 <_free_r>
 80081c4:	e7e1      	b.n	800818a <_realloc_r+0x1e>
 80081c6:	4635      	mov	r5, r6
 80081c8:	e7df      	b.n	800818a <_realloc_r+0x1e>

080081ca <__ascii_wctomb>:
 80081ca:	4603      	mov	r3, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	b141      	cbz	r1, 80081e2 <__ascii_wctomb+0x18>
 80081d0:	2aff      	cmp	r2, #255	; 0xff
 80081d2:	d904      	bls.n	80081de <__ascii_wctomb+0x14>
 80081d4:	228a      	movs	r2, #138	; 0x8a
 80081d6:	f04f 30ff 	mov.w	r0, #4294967295
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	4770      	bx	lr
 80081de:	2001      	movs	r0, #1
 80081e0:	700a      	strb	r2, [r1, #0]
 80081e2:	4770      	bx	lr

080081e4 <fiprintf>:
 80081e4:	b40e      	push	{r1, r2, r3}
 80081e6:	b503      	push	{r0, r1, lr}
 80081e8:	4601      	mov	r1, r0
 80081ea:	ab03      	add	r3, sp, #12
 80081ec:	4805      	ldr	r0, [pc, #20]	; (8008204 <fiprintf+0x20>)
 80081ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f2:	6800      	ldr	r0, [r0, #0]
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	f000 f83d 	bl	8008274 <_vfiprintf_r>
 80081fa:	b002      	add	sp, #8
 80081fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008200:	b003      	add	sp, #12
 8008202:	4770      	bx	lr
 8008204:	2000006c 	.word	0x2000006c

08008208 <abort>:
 8008208:	2006      	movs	r0, #6
 800820a:	b508      	push	{r3, lr}
 800820c:	f000 fa0a 	bl	8008624 <raise>
 8008210:	2001      	movs	r0, #1
 8008212:	f7fa fa2e 	bl	8002672 <_exit>

08008216 <_malloc_usable_size_r>:
 8008216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800821a:	1f18      	subs	r0, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	bfbc      	itt	lt
 8008220:	580b      	ldrlt	r3, [r1, r0]
 8008222:	18c0      	addlt	r0, r0, r3
 8008224:	4770      	bx	lr

08008226 <__sfputc_r>:
 8008226:	6893      	ldr	r3, [r2, #8]
 8008228:	b410      	push	{r4}
 800822a:	3b01      	subs	r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	6093      	str	r3, [r2, #8]
 8008230:	da07      	bge.n	8008242 <__sfputc_r+0x1c>
 8008232:	6994      	ldr	r4, [r2, #24]
 8008234:	42a3      	cmp	r3, r4
 8008236:	db01      	blt.n	800823c <__sfputc_r+0x16>
 8008238:	290a      	cmp	r1, #10
 800823a:	d102      	bne.n	8008242 <__sfputc_r+0x1c>
 800823c:	bc10      	pop	{r4}
 800823e:	f000 b933 	b.w	80084a8 <__swbuf_r>
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	1c58      	adds	r0, r3, #1
 8008246:	6010      	str	r0, [r2, #0]
 8008248:	7019      	strb	r1, [r3, #0]
 800824a:	4608      	mov	r0, r1
 800824c:	bc10      	pop	{r4}
 800824e:	4770      	bx	lr

08008250 <__sfputs_r>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	4606      	mov	r6, r0
 8008254:	460f      	mov	r7, r1
 8008256:	4614      	mov	r4, r2
 8008258:	18d5      	adds	r5, r2, r3
 800825a:	42ac      	cmp	r4, r5
 800825c:	d101      	bne.n	8008262 <__sfputs_r+0x12>
 800825e:	2000      	movs	r0, #0
 8008260:	e007      	b.n	8008272 <__sfputs_r+0x22>
 8008262:	463a      	mov	r2, r7
 8008264:	4630      	mov	r0, r6
 8008266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826a:	f7ff ffdc 	bl	8008226 <__sfputc_r>
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	d1f3      	bne.n	800825a <__sfputs_r+0xa>
 8008272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008274 <_vfiprintf_r>:
 8008274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008278:	460d      	mov	r5, r1
 800827a:	4614      	mov	r4, r2
 800827c:	4698      	mov	r8, r3
 800827e:	4606      	mov	r6, r0
 8008280:	b09d      	sub	sp, #116	; 0x74
 8008282:	b118      	cbz	r0, 800828c <_vfiprintf_r+0x18>
 8008284:	6a03      	ldr	r3, [r0, #32]
 8008286:	b90b      	cbnz	r3, 800828c <_vfiprintf_r+0x18>
 8008288:	f7fe f8ea 	bl	8006460 <__sinit>
 800828c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800828e:	07d9      	lsls	r1, r3, #31
 8008290:	d405      	bmi.n	800829e <_vfiprintf_r+0x2a>
 8008292:	89ab      	ldrh	r3, [r5, #12]
 8008294:	059a      	lsls	r2, r3, #22
 8008296:	d402      	bmi.n	800829e <_vfiprintf_r+0x2a>
 8008298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800829a:	f7fe f9f8 	bl	800668e <__retarget_lock_acquire_recursive>
 800829e:	89ab      	ldrh	r3, [r5, #12]
 80082a0:	071b      	lsls	r3, r3, #28
 80082a2:	d501      	bpl.n	80082a8 <_vfiprintf_r+0x34>
 80082a4:	692b      	ldr	r3, [r5, #16]
 80082a6:	b99b      	cbnz	r3, 80082d0 <_vfiprintf_r+0x5c>
 80082a8:	4629      	mov	r1, r5
 80082aa:	4630      	mov	r0, r6
 80082ac:	f000 f93a 	bl	8008524 <__swsetup_r>
 80082b0:	b170      	cbz	r0, 80082d0 <_vfiprintf_r+0x5c>
 80082b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082b4:	07dc      	lsls	r4, r3, #31
 80082b6:	d504      	bpl.n	80082c2 <_vfiprintf_r+0x4e>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	b01d      	add	sp, #116	; 0x74
 80082be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c2:	89ab      	ldrh	r3, [r5, #12]
 80082c4:	0598      	lsls	r0, r3, #22
 80082c6:	d4f7      	bmi.n	80082b8 <_vfiprintf_r+0x44>
 80082c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ca:	f7fe f9e1 	bl	8006690 <__retarget_lock_release_recursive>
 80082ce:	e7f3      	b.n	80082b8 <_vfiprintf_r+0x44>
 80082d0:	2300      	movs	r3, #0
 80082d2:	9309      	str	r3, [sp, #36]	; 0x24
 80082d4:	2320      	movs	r3, #32
 80082d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082da:	2330      	movs	r3, #48	; 0x30
 80082dc:	f04f 0901 	mov.w	r9, #1
 80082e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80082e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008494 <_vfiprintf_r+0x220>
 80082e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082ec:	4623      	mov	r3, r4
 80082ee:	469a      	mov	sl, r3
 80082f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f4:	b10a      	cbz	r2, 80082fa <_vfiprintf_r+0x86>
 80082f6:	2a25      	cmp	r2, #37	; 0x25
 80082f8:	d1f9      	bne.n	80082ee <_vfiprintf_r+0x7a>
 80082fa:	ebba 0b04 	subs.w	fp, sl, r4
 80082fe:	d00b      	beq.n	8008318 <_vfiprintf_r+0xa4>
 8008300:	465b      	mov	r3, fp
 8008302:	4622      	mov	r2, r4
 8008304:	4629      	mov	r1, r5
 8008306:	4630      	mov	r0, r6
 8008308:	f7ff ffa2 	bl	8008250 <__sfputs_r>
 800830c:	3001      	adds	r0, #1
 800830e:	f000 80a9 	beq.w	8008464 <_vfiprintf_r+0x1f0>
 8008312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008314:	445a      	add	r2, fp
 8008316:	9209      	str	r2, [sp, #36]	; 0x24
 8008318:	f89a 3000 	ldrb.w	r3, [sl]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80a1 	beq.w	8008464 <_vfiprintf_r+0x1f0>
 8008322:	2300      	movs	r3, #0
 8008324:	f04f 32ff 	mov.w	r2, #4294967295
 8008328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800832c:	f10a 0a01 	add.w	sl, sl, #1
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	9307      	str	r3, [sp, #28]
 8008334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008338:	931a      	str	r3, [sp, #104]	; 0x68
 800833a:	4654      	mov	r4, sl
 800833c:	2205      	movs	r2, #5
 800833e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008342:	4854      	ldr	r0, [pc, #336]	; (8008494 <_vfiprintf_r+0x220>)
 8008344:	f7fe f9a5 	bl	8006692 <memchr>
 8008348:	9a04      	ldr	r2, [sp, #16]
 800834a:	b9d8      	cbnz	r0, 8008384 <_vfiprintf_r+0x110>
 800834c:	06d1      	lsls	r1, r2, #27
 800834e:	bf44      	itt	mi
 8008350:	2320      	movmi	r3, #32
 8008352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008356:	0713      	lsls	r3, r2, #28
 8008358:	bf44      	itt	mi
 800835a:	232b      	movmi	r3, #43	; 0x2b
 800835c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008360:	f89a 3000 	ldrb.w	r3, [sl]
 8008364:	2b2a      	cmp	r3, #42	; 0x2a
 8008366:	d015      	beq.n	8008394 <_vfiprintf_r+0x120>
 8008368:	4654      	mov	r4, sl
 800836a:	2000      	movs	r0, #0
 800836c:	f04f 0c0a 	mov.w	ip, #10
 8008370:	9a07      	ldr	r2, [sp, #28]
 8008372:	4621      	mov	r1, r4
 8008374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008378:	3b30      	subs	r3, #48	; 0x30
 800837a:	2b09      	cmp	r3, #9
 800837c:	d94d      	bls.n	800841a <_vfiprintf_r+0x1a6>
 800837e:	b1b0      	cbz	r0, 80083ae <_vfiprintf_r+0x13a>
 8008380:	9207      	str	r2, [sp, #28]
 8008382:	e014      	b.n	80083ae <_vfiprintf_r+0x13a>
 8008384:	eba0 0308 	sub.w	r3, r0, r8
 8008388:	fa09 f303 	lsl.w	r3, r9, r3
 800838c:	4313      	orrs	r3, r2
 800838e:	46a2      	mov	sl, r4
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	e7d2      	b.n	800833a <_vfiprintf_r+0xc6>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	1d19      	adds	r1, r3, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	9103      	str	r1, [sp, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	bfbb      	ittet	lt
 80083a0:	425b      	neglt	r3, r3
 80083a2:	f042 0202 	orrlt.w	r2, r2, #2
 80083a6:	9307      	strge	r3, [sp, #28]
 80083a8:	9307      	strlt	r3, [sp, #28]
 80083aa:	bfb8      	it	lt
 80083ac:	9204      	strlt	r2, [sp, #16]
 80083ae:	7823      	ldrb	r3, [r4, #0]
 80083b0:	2b2e      	cmp	r3, #46	; 0x2e
 80083b2:	d10c      	bne.n	80083ce <_vfiprintf_r+0x15a>
 80083b4:	7863      	ldrb	r3, [r4, #1]
 80083b6:	2b2a      	cmp	r3, #42	; 0x2a
 80083b8:	d134      	bne.n	8008424 <_vfiprintf_r+0x1b0>
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	3402      	adds	r4, #2
 80083be:	1d1a      	adds	r2, r3, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	9203      	str	r2, [sp, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bfb8      	it	lt
 80083c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80083cc:	9305      	str	r3, [sp, #20]
 80083ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008498 <_vfiprintf_r+0x224>
 80083d2:	2203      	movs	r2, #3
 80083d4:	4650      	mov	r0, sl
 80083d6:	7821      	ldrb	r1, [r4, #0]
 80083d8:	f7fe f95b 	bl	8006692 <memchr>
 80083dc:	b138      	cbz	r0, 80083ee <_vfiprintf_r+0x17a>
 80083de:	2240      	movs	r2, #64	; 0x40
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	eba0 000a 	sub.w	r0, r0, sl
 80083e6:	4082      	lsls	r2, r0
 80083e8:	4313      	orrs	r3, r2
 80083ea:	3401      	adds	r4, #1
 80083ec:	9304      	str	r3, [sp, #16]
 80083ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f2:	2206      	movs	r2, #6
 80083f4:	4829      	ldr	r0, [pc, #164]	; (800849c <_vfiprintf_r+0x228>)
 80083f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083fa:	f7fe f94a 	bl	8006692 <memchr>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d03f      	beq.n	8008482 <_vfiprintf_r+0x20e>
 8008402:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <_vfiprintf_r+0x22c>)
 8008404:	bb1b      	cbnz	r3, 800844e <_vfiprintf_r+0x1da>
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	3307      	adds	r3, #7
 800840a:	f023 0307 	bic.w	r3, r3, #7
 800840e:	3308      	adds	r3, #8
 8008410:	9303      	str	r3, [sp, #12]
 8008412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008414:	443b      	add	r3, r7
 8008416:	9309      	str	r3, [sp, #36]	; 0x24
 8008418:	e768      	b.n	80082ec <_vfiprintf_r+0x78>
 800841a:	460c      	mov	r4, r1
 800841c:	2001      	movs	r0, #1
 800841e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008422:	e7a6      	b.n	8008372 <_vfiprintf_r+0xfe>
 8008424:	2300      	movs	r3, #0
 8008426:	f04f 0c0a 	mov.w	ip, #10
 800842a:	4619      	mov	r1, r3
 800842c:	3401      	adds	r4, #1
 800842e:	9305      	str	r3, [sp, #20]
 8008430:	4620      	mov	r0, r4
 8008432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008436:	3a30      	subs	r2, #48	; 0x30
 8008438:	2a09      	cmp	r2, #9
 800843a:	d903      	bls.n	8008444 <_vfiprintf_r+0x1d0>
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0c6      	beq.n	80083ce <_vfiprintf_r+0x15a>
 8008440:	9105      	str	r1, [sp, #20]
 8008442:	e7c4      	b.n	80083ce <_vfiprintf_r+0x15a>
 8008444:	4604      	mov	r4, r0
 8008446:	2301      	movs	r3, #1
 8008448:	fb0c 2101 	mla	r1, ip, r1, r2
 800844c:	e7f0      	b.n	8008430 <_vfiprintf_r+0x1bc>
 800844e:	ab03      	add	r3, sp, #12
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	462a      	mov	r2, r5
 8008454:	4630      	mov	r0, r6
 8008456:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <_vfiprintf_r+0x230>)
 8008458:	a904      	add	r1, sp, #16
 800845a:	f7fd fbb3 	bl	8005bc4 <_printf_float>
 800845e:	4607      	mov	r7, r0
 8008460:	1c78      	adds	r0, r7, #1
 8008462:	d1d6      	bne.n	8008412 <_vfiprintf_r+0x19e>
 8008464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008466:	07d9      	lsls	r1, r3, #31
 8008468:	d405      	bmi.n	8008476 <_vfiprintf_r+0x202>
 800846a:	89ab      	ldrh	r3, [r5, #12]
 800846c:	059a      	lsls	r2, r3, #22
 800846e:	d402      	bmi.n	8008476 <_vfiprintf_r+0x202>
 8008470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008472:	f7fe f90d 	bl	8006690 <__retarget_lock_release_recursive>
 8008476:	89ab      	ldrh	r3, [r5, #12]
 8008478:	065b      	lsls	r3, r3, #25
 800847a:	f53f af1d 	bmi.w	80082b8 <_vfiprintf_r+0x44>
 800847e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008480:	e71c      	b.n	80082bc <_vfiprintf_r+0x48>
 8008482:	ab03      	add	r3, sp, #12
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	462a      	mov	r2, r5
 8008488:	4630      	mov	r0, r6
 800848a:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <_vfiprintf_r+0x230>)
 800848c:	a904      	add	r1, sp, #16
 800848e:	f7fd fe39 	bl	8006104 <_printf_i>
 8008492:	e7e4      	b.n	800845e <_vfiprintf_r+0x1ea>
 8008494:	080099d4 	.word	0x080099d4
 8008498:	080099da 	.word	0x080099da
 800849c:	080099de 	.word	0x080099de
 80084a0:	08005bc5 	.word	0x08005bc5
 80084a4:	08008251 	.word	0x08008251

080084a8 <__swbuf_r>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	460e      	mov	r6, r1
 80084ac:	4614      	mov	r4, r2
 80084ae:	4605      	mov	r5, r0
 80084b0:	b118      	cbz	r0, 80084ba <__swbuf_r+0x12>
 80084b2:	6a03      	ldr	r3, [r0, #32]
 80084b4:	b90b      	cbnz	r3, 80084ba <__swbuf_r+0x12>
 80084b6:	f7fd ffd3 	bl	8006460 <__sinit>
 80084ba:	69a3      	ldr	r3, [r4, #24]
 80084bc:	60a3      	str	r3, [r4, #8]
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	071a      	lsls	r2, r3, #28
 80084c2:	d525      	bpl.n	8008510 <__swbuf_r+0x68>
 80084c4:	6923      	ldr	r3, [r4, #16]
 80084c6:	b31b      	cbz	r3, 8008510 <__swbuf_r+0x68>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	6922      	ldr	r2, [r4, #16]
 80084cc:	b2f6      	uxtb	r6, r6
 80084ce:	1a98      	subs	r0, r3, r2
 80084d0:	6963      	ldr	r3, [r4, #20]
 80084d2:	4637      	mov	r7, r6
 80084d4:	4283      	cmp	r3, r0
 80084d6:	dc04      	bgt.n	80084e2 <__swbuf_r+0x3a>
 80084d8:	4621      	mov	r1, r4
 80084da:	4628      	mov	r0, r5
 80084dc:	f7ff fda2 	bl	8008024 <_fflush_r>
 80084e0:	b9e0      	cbnz	r0, 800851c <__swbuf_r+0x74>
 80084e2:	68a3      	ldr	r3, [r4, #8]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	60a3      	str	r3, [r4, #8]
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	6022      	str	r2, [r4, #0]
 80084ee:	701e      	strb	r6, [r3, #0]
 80084f0:	6962      	ldr	r2, [r4, #20]
 80084f2:	1c43      	adds	r3, r0, #1
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d004      	beq.n	8008502 <__swbuf_r+0x5a>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	07db      	lsls	r3, r3, #31
 80084fc:	d506      	bpl.n	800850c <__swbuf_r+0x64>
 80084fe:	2e0a      	cmp	r6, #10
 8008500:	d104      	bne.n	800850c <__swbuf_r+0x64>
 8008502:	4621      	mov	r1, r4
 8008504:	4628      	mov	r0, r5
 8008506:	f7ff fd8d 	bl	8008024 <_fflush_r>
 800850a:	b938      	cbnz	r0, 800851c <__swbuf_r+0x74>
 800850c:	4638      	mov	r0, r7
 800850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008510:	4621      	mov	r1, r4
 8008512:	4628      	mov	r0, r5
 8008514:	f000 f806 	bl	8008524 <__swsetup_r>
 8008518:	2800      	cmp	r0, #0
 800851a:	d0d5      	beq.n	80084c8 <__swbuf_r+0x20>
 800851c:	f04f 37ff 	mov.w	r7, #4294967295
 8008520:	e7f4      	b.n	800850c <__swbuf_r+0x64>
	...

08008524 <__swsetup_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4b2a      	ldr	r3, [pc, #168]	; (80085d0 <__swsetup_r+0xac>)
 8008528:	4605      	mov	r5, r0
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	460c      	mov	r4, r1
 800852e:	b118      	cbz	r0, 8008538 <__swsetup_r+0x14>
 8008530:	6a03      	ldr	r3, [r0, #32]
 8008532:	b90b      	cbnz	r3, 8008538 <__swsetup_r+0x14>
 8008534:	f7fd ff94 	bl	8006460 <__sinit>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800853e:	0718      	lsls	r0, r3, #28
 8008540:	d422      	bmi.n	8008588 <__swsetup_r+0x64>
 8008542:	06d9      	lsls	r1, r3, #27
 8008544:	d407      	bmi.n	8008556 <__swsetup_r+0x32>
 8008546:	2309      	movs	r3, #9
 8008548:	602b      	str	r3, [r5, #0]
 800854a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800854e:	f04f 30ff 	mov.w	r0, #4294967295
 8008552:	81a3      	strh	r3, [r4, #12]
 8008554:	e034      	b.n	80085c0 <__swsetup_r+0x9c>
 8008556:	0758      	lsls	r0, r3, #29
 8008558:	d512      	bpl.n	8008580 <__swsetup_r+0x5c>
 800855a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800855c:	b141      	cbz	r1, 8008570 <__swsetup_r+0x4c>
 800855e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008562:	4299      	cmp	r1, r3
 8008564:	d002      	beq.n	800856c <__swsetup_r+0x48>
 8008566:	4628      	mov	r0, r5
 8008568:	f7fe ff0e 	bl	8007388 <_free_r>
 800856c:	2300      	movs	r3, #0
 800856e:	6363      	str	r3, [r4, #52]	; 0x34
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	2300      	movs	r3, #0
 800857a:	6063      	str	r3, [r4, #4]
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	f043 0308 	orr.w	r3, r3, #8
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	b94b      	cbnz	r3, 80085a0 <__swsetup_r+0x7c>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008596:	d003      	beq.n	80085a0 <__swsetup_r+0x7c>
 8008598:	4621      	mov	r1, r4
 800859a:	4628      	mov	r0, r5
 800859c:	f000 f883 	bl	80086a6 <__smakebuf_r>
 80085a0:	89a0      	ldrh	r0, [r4, #12]
 80085a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085a6:	f010 0301 	ands.w	r3, r0, #1
 80085aa:	d00a      	beq.n	80085c2 <__swsetup_r+0x9e>
 80085ac:	2300      	movs	r3, #0
 80085ae:	60a3      	str	r3, [r4, #8]
 80085b0:	6963      	ldr	r3, [r4, #20]
 80085b2:	425b      	negs	r3, r3
 80085b4:	61a3      	str	r3, [r4, #24]
 80085b6:	6923      	ldr	r3, [r4, #16]
 80085b8:	b943      	cbnz	r3, 80085cc <__swsetup_r+0xa8>
 80085ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085be:	d1c4      	bne.n	800854a <__swsetup_r+0x26>
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
 80085c2:	0781      	lsls	r1, r0, #30
 80085c4:	bf58      	it	pl
 80085c6:	6963      	ldrpl	r3, [r4, #20]
 80085c8:	60a3      	str	r3, [r4, #8]
 80085ca:	e7f4      	b.n	80085b6 <__swsetup_r+0x92>
 80085cc:	2000      	movs	r0, #0
 80085ce:	e7f7      	b.n	80085c0 <__swsetup_r+0x9c>
 80085d0:	2000006c 	.word	0x2000006c

080085d4 <_raise_r>:
 80085d4:	291f      	cmp	r1, #31
 80085d6:	b538      	push	{r3, r4, r5, lr}
 80085d8:	4604      	mov	r4, r0
 80085da:	460d      	mov	r5, r1
 80085dc:	d904      	bls.n	80085e8 <_raise_r+0x14>
 80085de:	2316      	movs	r3, #22
 80085e0:	6003      	str	r3, [r0, #0]
 80085e2:	f04f 30ff 	mov.w	r0, #4294967295
 80085e6:	bd38      	pop	{r3, r4, r5, pc}
 80085e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085ea:	b112      	cbz	r2, 80085f2 <_raise_r+0x1e>
 80085ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085f0:	b94b      	cbnz	r3, 8008606 <_raise_r+0x32>
 80085f2:	4620      	mov	r0, r4
 80085f4:	f000 f830 	bl	8008658 <_getpid_r>
 80085f8:	462a      	mov	r2, r5
 80085fa:	4601      	mov	r1, r0
 80085fc:	4620      	mov	r0, r4
 80085fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008602:	f000 b817 	b.w	8008634 <_kill_r>
 8008606:	2b01      	cmp	r3, #1
 8008608:	d00a      	beq.n	8008620 <_raise_r+0x4c>
 800860a:	1c59      	adds	r1, r3, #1
 800860c:	d103      	bne.n	8008616 <_raise_r+0x42>
 800860e:	2316      	movs	r3, #22
 8008610:	6003      	str	r3, [r0, #0]
 8008612:	2001      	movs	r0, #1
 8008614:	e7e7      	b.n	80085e6 <_raise_r+0x12>
 8008616:	2400      	movs	r4, #0
 8008618:	4628      	mov	r0, r5
 800861a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800861e:	4798      	blx	r3
 8008620:	2000      	movs	r0, #0
 8008622:	e7e0      	b.n	80085e6 <_raise_r+0x12>

08008624 <raise>:
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <raise+0xc>)
 8008626:	4601      	mov	r1, r0
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	f7ff bfd3 	b.w	80085d4 <_raise_r>
 800862e:	bf00      	nop
 8008630:	2000006c 	.word	0x2000006c

08008634 <_kill_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	2300      	movs	r3, #0
 8008638:	4d06      	ldr	r5, [pc, #24]	; (8008654 <_kill_r+0x20>)
 800863a:	4604      	mov	r4, r0
 800863c:	4608      	mov	r0, r1
 800863e:	4611      	mov	r1, r2
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	f7fa f806 	bl	8002652 <_kill>
 8008646:	1c43      	adds	r3, r0, #1
 8008648:	d102      	bne.n	8008650 <_kill_r+0x1c>
 800864a:	682b      	ldr	r3, [r5, #0]
 800864c:	b103      	cbz	r3, 8008650 <_kill_r+0x1c>
 800864e:	6023      	str	r3, [r4, #0]
 8008650:	bd38      	pop	{r3, r4, r5, pc}
 8008652:	bf00      	nop
 8008654:	20000cb0 	.word	0x20000cb0

08008658 <_getpid_r>:
 8008658:	f7f9 bff4 	b.w	8002644 <_getpid>

0800865c <__swhatbuf_r>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	460c      	mov	r4, r1
 8008660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008664:	4615      	mov	r5, r2
 8008666:	2900      	cmp	r1, #0
 8008668:	461e      	mov	r6, r3
 800866a:	b096      	sub	sp, #88	; 0x58
 800866c:	da0c      	bge.n	8008688 <__swhatbuf_r+0x2c>
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	2100      	movs	r1, #0
 8008672:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008676:	bf0c      	ite	eq
 8008678:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800867c:	2340      	movne	r3, #64	; 0x40
 800867e:	2000      	movs	r0, #0
 8008680:	6031      	str	r1, [r6, #0]
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	b016      	add	sp, #88	; 0x58
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	466a      	mov	r2, sp
 800868a:	f000 f849 	bl	8008720 <_fstat_r>
 800868e:	2800      	cmp	r0, #0
 8008690:	dbed      	blt.n	800866e <__swhatbuf_r+0x12>
 8008692:	9901      	ldr	r1, [sp, #4]
 8008694:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008698:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800869c:	4259      	negs	r1, r3
 800869e:	4159      	adcs	r1, r3
 80086a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086a4:	e7eb      	b.n	800867e <__swhatbuf_r+0x22>

080086a6 <__smakebuf_r>:
 80086a6:	898b      	ldrh	r3, [r1, #12]
 80086a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086aa:	079d      	lsls	r5, r3, #30
 80086ac:	4606      	mov	r6, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	d507      	bpl.n	80086c2 <__smakebuf_r+0x1c>
 80086b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	6123      	str	r3, [r4, #16]
 80086ba:	2301      	movs	r3, #1
 80086bc:	6163      	str	r3, [r4, #20]
 80086be:	b002      	add	sp, #8
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
 80086c2:	466a      	mov	r2, sp
 80086c4:	ab01      	add	r3, sp, #4
 80086c6:	f7ff ffc9 	bl	800865c <__swhatbuf_r>
 80086ca:	9900      	ldr	r1, [sp, #0]
 80086cc:	4605      	mov	r5, r0
 80086ce:	4630      	mov	r0, r6
 80086d0:	f7fe feca 	bl	8007468 <_malloc_r>
 80086d4:	b948      	cbnz	r0, 80086ea <__smakebuf_r+0x44>
 80086d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086da:	059a      	lsls	r2, r3, #22
 80086dc:	d4ef      	bmi.n	80086be <__smakebuf_r+0x18>
 80086de:	f023 0303 	bic.w	r3, r3, #3
 80086e2:	f043 0302 	orr.w	r3, r3, #2
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	e7e3      	b.n	80086b2 <__smakebuf_r+0xc>
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	6020      	str	r0, [r4, #0]
 80086ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	9b00      	ldr	r3, [sp, #0]
 80086f6:	6120      	str	r0, [r4, #16]
 80086f8:	6163      	str	r3, [r4, #20]
 80086fa:	9b01      	ldr	r3, [sp, #4]
 80086fc:	b15b      	cbz	r3, 8008716 <__smakebuf_r+0x70>
 80086fe:	4630      	mov	r0, r6
 8008700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008704:	f000 f81e 	bl	8008744 <_isatty_r>
 8008708:	b128      	cbz	r0, 8008716 <__smakebuf_r+0x70>
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	f023 0303 	bic.w	r3, r3, #3
 8008710:	f043 0301 	orr.w	r3, r3, #1
 8008714:	81a3      	strh	r3, [r4, #12]
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	431d      	orrs	r5, r3
 800871a:	81a5      	strh	r5, [r4, #12]
 800871c:	e7cf      	b.n	80086be <__smakebuf_r+0x18>
	...

08008720 <_fstat_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	2300      	movs	r3, #0
 8008724:	4d06      	ldr	r5, [pc, #24]	; (8008740 <_fstat_r+0x20>)
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	4611      	mov	r1, r2
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	f7f9 ffee 	bl	800270e <_fstat>
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	d102      	bne.n	800873c <_fstat_r+0x1c>
 8008736:	682b      	ldr	r3, [r5, #0]
 8008738:	b103      	cbz	r3, 800873c <_fstat_r+0x1c>
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	bd38      	pop	{r3, r4, r5, pc}
 800873e:	bf00      	nop
 8008740:	20000cb0 	.word	0x20000cb0

08008744 <_isatty_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	2300      	movs	r3, #0
 8008748:	4d05      	ldr	r5, [pc, #20]	; (8008760 <_isatty_r+0x1c>)
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	602b      	str	r3, [r5, #0]
 8008750:	f7f9 ffec 	bl	800272c <_isatty>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_isatty_r+0x1a>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_isatty_r+0x1a>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	20000cb0 	.word	0x20000cb0

08008764 <pow>:
 8008764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008768:	4614      	mov	r4, r2
 800876a:	461d      	mov	r5, r3
 800876c:	4680      	mov	r8, r0
 800876e:	4689      	mov	r9, r1
 8008770:	f000 f866 	bl	8008840 <__ieee754_pow>
 8008774:	4622      	mov	r2, r4
 8008776:	4606      	mov	r6, r0
 8008778:	460f      	mov	r7, r1
 800877a:	462b      	mov	r3, r5
 800877c:	4620      	mov	r0, r4
 800877e:	4629      	mov	r1, r5
 8008780:	f7f8 f944 	bl	8000a0c <__aeabi_dcmpun>
 8008784:	bbc8      	cbnz	r0, 80087fa <pow+0x96>
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f8 f90b 	bl	80009a8 <__aeabi_dcmpeq>
 8008792:	b1b8      	cbz	r0, 80087c4 <pow+0x60>
 8008794:	2200      	movs	r2, #0
 8008796:	2300      	movs	r3, #0
 8008798:	4620      	mov	r0, r4
 800879a:	4629      	mov	r1, r5
 800879c:	f7f8 f904 	bl	80009a8 <__aeabi_dcmpeq>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d141      	bne.n	8008828 <pow+0xc4>
 80087a4:	4620      	mov	r0, r4
 80087a6:	4629      	mov	r1, r5
 80087a8:	f000 f844 	bl	8008834 <finite>
 80087ac:	b328      	cbz	r0, 80087fa <pow+0x96>
 80087ae:	2200      	movs	r2, #0
 80087b0:	2300      	movs	r3, #0
 80087b2:	4620      	mov	r0, r4
 80087b4:	4629      	mov	r1, r5
 80087b6:	f7f8 f901 	bl	80009bc <__aeabi_dcmplt>
 80087ba:	b1f0      	cbz	r0, 80087fa <pow+0x96>
 80087bc:	f7fd ff3c 	bl	8006638 <__errno>
 80087c0:	2322      	movs	r3, #34	; 0x22
 80087c2:	e019      	b.n	80087f8 <pow+0x94>
 80087c4:	4630      	mov	r0, r6
 80087c6:	4639      	mov	r1, r7
 80087c8:	f000 f834 	bl	8008834 <finite>
 80087cc:	b9c8      	cbnz	r0, 8008802 <pow+0x9e>
 80087ce:	4640      	mov	r0, r8
 80087d0:	4649      	mov	r1, r9
 80087d2:	f000 f82f 	bl	8008834 <finite>
 80087d6:	b1a0      	cbz	r0, 8008802 <pow+0x9e>
 80087d8:	4620      	mov	r0, r4
 80087da:	4629      	mov	r1, r5
 80087dc:	f000 f82a 	bl	8008834 <finite>
 80087e0:	b178      	cbz	r0, 8008802 <pow+0x9e>
 80087e2:	4632      	mov	r2, r6
 80087e4:	463b      	mov	r3, r7
 80087e6:	4630      	mov	r0, r6
 80087e8:	4639      	mov	r1, r7
 80087ea:	f7f8 f90f 	bl	8000a0c <__aeabi_dcmpun>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d0e4      	beq.n	80087bc <pow+0x58>
 80087f2:	f7fd ff21 	bl	8006638 <__errno>
 80087f6:	2321      	movs	r3, #33	; 0x21
 80087f8:	6003      	str	r3, [r0, #0]
 80087fa:	4630      	mov	r0, r6
 80087fc:	4639      	mov	r1, r7
 80087fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008802:	2200      	movs	r2, #0
 8008804:	2300      	movs	r3, #0
 8008806:	4630      	mov	r0, r6
 8008808:	4639      	mov	r1, r7
 800880a:	f7f8 f8cd 	bl	80009a8 <__aeabi_dcmpeq>
 800880e:	2800      	cmp	r0, #0
 8008810:	d0f3      	beq.n	80087fa <pow+0x96>
 8008812:	4640      	mov	r0, r8
 8008814:	4649      	mov	r1, r9
 8008816:	f000 f80d 	bl	8008834 <finite>
 800881a:	2800      	cmp	r0, #0
 800881c:	d0ed      	beq.n	80087fa <pow+0x96>
 800881e:	4620      	mov	r0, r4
 8008820:	4629      	mov	r1, r5
 8008822:	f000 f807 	bl	8008834 <finite>
 8008826:	e7c8      	b.n	80087ba <pow+0x56>
 8008828:	2600      	movs	r6, #0
 800882a:	4f01      	ldr	r7, [pc, #4]	; (8008830 <pow+0xcc>)
 800882c:	e7e5      	b.n	80087fa <pow+0x96>
 800882e:	bf00      	nop
 8008830:	3ff00000 	.word	0x3ff00000

08008834 <finite>:
 8008834:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008838:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800883c:	0fc0      	lsrs	r0, r0, #31
 800883e:	4770      	bx	lr

08008840 <__ieee754_pow>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	b093      	sub	sp, #76	; 0x4c
 8008846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800884a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800884e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008852:	4689      	mov	r9, r1
 8008854:	ea56 0102 	orrs.w	r1, r6, r2
 8008858:	4680      	mov	r8, r0
 800885a:	d111      	bne.n	8008880 <__ieee754_pow+0x40>
 800885c:	1803      	adds	r3, r0, r0
 800885e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8008862:	4152      	adcs	r2, r2
 8008864:	4299      	cmp	r1, r3
 8008866:	4b82      	ldr	r3, [pc, #520]	; (8008a70 <__ieee754_pow+0x230>)
 8008868:	4193      	sbcs	r3, r2
 800886a:	f080 84ba 	bcs.w	80091e2 <__ieee754_pow+0x9a2>
 800886e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	f7f7 fc79 	bl	800016c <__adddf3>
 800887a:	4683      	mov	fp, r0
 800887c:	468c      	mov	ip, r1
 800887e:	e06f      	b.n	8008960 <__ieee754_pow+0x120>
 8008880:	4b7c      	ldr	r3, [pc, #496]	; (8008a74 <__ieee754_pow+0x234>)
 8008882:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8008886:	429c      	cmp	r4, r3
 8008888:	464d      	mov	r5, r9
 800888a:	4682      	mov	sl, r0
 800888c:	dc06      	bgt.n	800889c <__ieee754_pow+0x5c>
 800888e:	d101      	bne.n	8008894 <__ieee754_pow+0x54>
 8008890:	2800      	cmp	r0, #0
 8008892:	d1ec      	bne.n	800886e <__ieee754_pow+0x2e>
 8008894:	429e      	cmp	r6, r3
 8008896:	dc01      	bgt.n	800889c <__ieee754_pow+0x5c>
 8008898:	d10f      	bne.n	80088ba <__ieee754_pow+0x7a>
 800889a:	b172      	cbz	r2, 80088ba <__ieee754_pow+0x7a>
 800889c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80088a0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80088a4:	ea55 050a 	orrs.w	r5, r5, sl
 80088a8:	d1e1      	bne.n	800886e <__ieee754_pow+0x2e>
 80088aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80088ae:	18db      	adds	r3, r3, r3
 80088b0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80088b4:	4152      	adcs	r2, r2
 80088b6:	429d      	cmp	r5, r3
 80088b8:	e7d5      	b.n	8008866 <__ieee754_pow+0x26>
 80088ba:	2d00      	cmp	r5, #0
 80088bc:	da39      	bge.n	8008932 <__ieee754_pow+0xf2>
 80088be:	4b6e      	ldr	r3, [pc, #440]	; (8008a78 <__ieee754_pow+0x238>)
 80088c0:	429e      	cmp	r6, r3
 80088c2:	dc52      	bgt.n	800896a <__ieee754_pow+0x12a>
 80088c4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80088c8:	429e      	cmp	r6, r3
 80088ca:	f340 849d 	ble.w	8009208 <__ieee754_pow+0x9c8>
 80088ce:	1533      	asrs	r3, r6, #20
 80088d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088d4:	2b14      	cmp	r3, #20
 80088d6:	dd0f      	ble.n	80088f8 <__ieee754_pow+0xb8>
 80088d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80088dc:	fa22 f103 	lsr.w	r1, r2, r3
 80088e0:	fa01 f303 	lsl.w	r3, r1, r3
 80088e4:	4293      	cmp	r3, r2
 80088e6:	f040 848f 	bne.w	8009208 <__ieee754_pow+0x9c8>
 80088ea:	f001 0101 	and.w	r1, r1, #1
 80088ee:	f1c1 0302 	rsb	r3, r1, #2
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	b182      	cbz	r2, 8008918 <__ieee754_pow+0xd8>
 80088f6:	e05d      	b.n	80089b4 <__ieee754_pow+0x174>
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	d159      	bne.n	80089b0 <__ieee754_pow+0x170>
 80088fc:	f1c3 0314 	rsb	r3, r3, #20
 8008900:	fa46 f103 	asr.w	r1, r6, r3
 8008904:	fa01 f303 	lsl.w	r3, r1, r3
 8008908:	42b3      	cmp	r3, r6
 800890a:	f040 847a 	bne.w	8009202 <__ieee754_pow+0x9c2>
 800890e:	f001 0101 	and.w	r1, r1, #1
 8008912:	f1c1 0302 	rsb	r3, r1, #2
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	4b58      	ldr	r3, [pc, #352]	; (8008a7c <__ieee754_pow+0x23c>)
 800891a:	429e      	cmp	r6, r3
 800891c:	d132      	bne.n	8008984 <__ieee754_pow+0x144>
 800891e:	2f00      	cmp	r7, #0
 8008920:	f280 846b 	bge.w	80091fa <__ieee754_pow+0x9ba>
 8008924:	4642      	mov	r2, r8
 8008926:	464b      	mov	r3, r9
 8008928:	2000      	movs	r0, #0
 800892a:	4954      	ldr	r1, [pc, #336]	; (8008a7c <__ieee754_pow+0x23c>)
 800892c:	f7f7 fefe 	bl	800072c <__aeabi_ddiv>
 8008930:	e7a3      	b.n	800887a <__ieee754_pow+0x3a>
 8008932:	2300      	movs	r3, #0
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	2a00      	cmp	r2, #0
 8008938:	d13c      	bne.n	80089b4 <__ieee754_pow+0x174>
 800893a:	4b4e      	ldr	r3, [pc, #312]	; (8008a74 <__ieee754_pow+0x234>)
 800893c:	429e      	cmp	r6, r3
 800893e:	d1eb      	bne.n	8008918 <__ieee754_pow+0xd8>
 8008940:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008944:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008948:	ea53 030a 	orrs.w	r3, r3, sl
 800894c:	f000 8449 	beq.w	80091e2 <__ieee754_pow+0x9a2>
 8008950:	4b4b      	ldr	r3, [pc, #300]	; (8008a80 <__ieee754_pow+0x240>)
 8008952:	429c      	cmp	r4, r3
 8008954:	dd0b      	ble.n	800896e <__ieee754_pow+0x12e>
 8008956:	2f00      	cmp	r7, #0
 8008958:	f2c0 8449 	blt.w	80091ee <__ieee754_pow+0x9ae>
 800895c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008960:	4658      	mov	r0, fp
 8008962:	4661      	mov	r1, ip
 8008964:	b013      	add	sp, #76	; 0x4c
 8008966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896a:	2302      	movs	r3, #2
 800896c:	e7e2      	b.n	8008934 <__ieee754_pow+0xf4>
 800896e:	2f00      	cmp	r7, #0
 8008970:	f04f 0b00 	mov.w	fp, #0
 8008974:	f04f 0c00 	mov.w	ip, #0
 8008978:	daf2      	bge.n	8008960 <__ieee754_pow+0x120>
 800897a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800897e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008982:	e7ed      	b.n	8008960 <__ieee754_pow+0x120>
 8008984:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008988:	d106      	bne.n	8008998 <__ieee754_pow+0x158>
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	f7f7 fda1 	bl	80004d8 <__aeabi_dmul>
 8008996:	e770      	b.n	800887a <__ieee754_pow+0x3a>
 8008998:	4b3a      	ldr	r3, [pc, #232]	; (8008a84 <__ieee754_pow+0x244>)
 800899a:	429f      	cmp	r7, r3
 800899c:	d10a      	bne.n	80089b4 <__ieee754_pow+0x174>
 800899e:	2d00      	cmp	r5, #0
 80089a0:	db08      	blt.n	80089b4 <__ieee754_pow+0x174>
 80089a2:	4640      	mov	r0, r8
 80089a4:	4649      	mov	r1, r9
 80089a6:	b013      	add	sp, #76	; 0x4c
 80089a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	f000 bd0a 	b.w	80093c4 <__ieee754_sqrt>
 80089b0:	2300      	movs	r3, #0
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	4640      	mov	r0, r8
 80089b6:	4649      	mov	r1, r9
 80089b8:	f000 fc58 	bl	800926c <fabs>
 80089bc:	4683      	mov	fp, r0
 80089be:	468c      	mov	ip, r1
 80089c0:	f1ba 0f00 	cmp.w	sl, #0
 80089c4:	d128      	bne.n	8008a18 <__ieee754_pow+0x1d8>
 80089c6:	b124      	cbz	r4, 80089d2 <__ieee754_pow+0x192>
 80089c8:	4b2c      	ldr	r3, [pc, #176]	; (8008a7c <__ieee754_pow+0x23c>)
 80089ca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d122      	bne.n	8008a18 <__ieee754_pow+0x1d8>
 80089d2:	2f00      	cmp	r7, #0
 80089d4:	da07      	bge.n	80089e6 <__ieee754_pow+0x1a6>
 80089d6:	465a      	mov	r2, fp
 80089d8:	4663      	mov	r3, ip
 80089da:	2000      	movs	r0, #0
 80089dc:	4927      	ldr	r1, [pc, #156]	; (8008a7c <__ieee754_pow+0x23c>)
 80089de:	f7f7 fea5 	bl	800072c <__aeabi_ddiv>
 80089e2:	4683      	mov	fp, r0
 80089e4:	468c      	mov	ip, r1
 80089e6:	2d00      	cmp	r5, #0
 80089e8:	daba      	bge.n	8008960 <__ieee754_pow+0x120>
 80089ea:	9b00      	ldr	r3, [sp, #0]
 80089ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80089f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80089f4:	431c      	orrs	r4, r3
 80089f6:	d108      	bne.n	8008a0a <__ieee754_pow+0x1ca>
 80089f8:	465a      	mov	r2, fp
 80089fa:	4663      	mov	r3, ip
 80089fc:	4658      	mov	r0, fp
 80089fe:	4661      	mov	r1, ip
 8008a00:	f7f7 fbb2 	bl	8000168 <__aeabi_dsub>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	e790      	b.n	800892c <__ieee754_pow+0xec>
 8008a0a:	9b00      	ldr	r3, [sp, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d1a7      	bne.n	8008960 <__ieee754_pow+0x120>
 8008a10:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008a14:	469c      	mov	ip, r3
 8008a16:	e7a3      	b.n	8008960 <__ieee754_pow+0x120>
 8008a18:	0feb      	lsrs	r3, r5, #31
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	930c      	str	r3, [sp, #48]	; 0x30
 8008a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a20:	9b00      	ldr	r3, [sp, #0]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	d104      	bne.n	8008a30 <__ieee754_pow+0x1f0>
 8008a26:	4642      	mov	r2, r8
 8008a28:	464b      	mov	r3, r9
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	e7e7      	b.n	8008a00 <__ieee754_pow+0x1c0>
 8008a30:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <__ieee754_pow+0x248>)
 8008a32:	429e      	cmp	r6, r3
 8008a34:	f340 80f6 	ble.w	8008c24 <__ieee754_pow+0x3e4>
 8008a38:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008a3c:	429e      	cmp	r6, r3
 8008a3e:	4b10      	ldr	r3, [pc, #64]	; (8008a80 <__ieee754_pow+0x240>)
 8008a40:	dd09      	ble.n	8008a56 <__ieee754_pow+0x216>
 8008a42:	429c      	cmp	r4, r3
 8008a44:	dc0c      	bgt.n	8008a60 <__ieee754_pow+0x220>
 8008a46:	2f00      	cmp	r7, #0
 8008a48:	da0c      	bge.n	8008a64 <__ieee754_pow+0x224>
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	b013      	add	sp, #76	; 0x4c
 8008a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a52:	f000 bcb2 	b.w	80093ba <__math_oflow>
 8008a56:	429c      	cmp	r4, r3
 8008a58:	dbf5      	blt.n	8008a46 <__ieee754_pow+0x206>
 8008a5a:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <__ieee754_pow+0x23c>)
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	dd15      	ble.n	8008a8c <__ieee754_pow+0x24c>
 8008a60:	2f00      	cmp	r7, #0
 8008a62:	dcf2      	bgt.n	8008a4a <__ieee754_pow+0x20a>
 8008a64:	2000      	movs	r0, #0
 8008a66:	b013      	add	sp, #76	; 0x4c
 8008a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	f000 bca0 	b.w	80093b0 <__math_uflow>
 8008a70:	fff00000 	.word	0xfff00000
 8008a74:	7ff00000 	.word	0x7ff00000
 8008a78:	433fffff 	.word	0x433fffff
 8008a7c:	3ff00000 	.word	0x3ff00000
 8008a80:	3fefffff 	.word	0x3fefffff
 8008a84:	3fe00000 	.word	0x3fe00000
 8008a88:	41e00000 	.word	0x41e00000
 8008a8c:	4661      	mov	r1, ip
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4658      	mov	r0, fp
 8008a92:	4b5f      	ldr	r3, [pc, #380]	; (8008c10 <__ieee754_pow+0x3d0>)
 8008a94:	f7f7 fb68 	bl	8000168 <__aeabi_dsub>
 8008a98:	a355      	add	r3, pc, #340	; (adr r3, 8008bf0 <__ieee754_pow+0x3b0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	f7f7 fd19 	bl	80004d8 <__aeabi_dmul>
 8008aa6:	a354      	add	r3, pc, #336	; (adr r3, 8008bf8 <__ieee754_pow+0x3b8>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	4606      	mov	r6, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	f7f7 fd10 	bl	80004d8 <__aeabi_dmul>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4682      	mov	sl, r0
 8008abc:	468b      	mov	fp, r1
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	4b54      	ldr	r3, [pc, #336]	; (8008c14 <__ieee754_pow+0x3d4>)
 8008ac4:	f7f7 fd08 	bl	80004d8 <__aeabi_dmul>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	a14c      	add	r1, pc, #304	; (adr r1, 8008c00 <__ieee754_pow+0x3c0>)
 8008ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ad2:	f7f7 fb49 	bl	8000168 <__aeabi_dsub>
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	462b      	mov	r3, r5
 8008ada:	f7f7 fcfd 	bl	80004d8 <__aeabi_dmul>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	494c      	ldr	r1, [pc, #304]	; (8008c18 <__ieee754_pow+0x3d8>)
 8008ae6:	f7f7 fb3f 	bl	8000168 <__aeabi_dsub>
 8008aea:	4622      	mov	r2, r4
 8008aec:	462b      	mov	r3, r5
 8008aee:	4680      	mov	r8, r0
 8008af0:	4689      	mov	r9, r1
 8008af2:	4620      	mov	r0, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7f7 fcef 	bl	80004d8 <__aeabi_dmul>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4640      	mov	r0, r8
 8008b00:	4649      	mov	r1, r9
 8008b02:	f7f7 fce9 	bl	80004d8 <__aeabi_dmul>
 8008b06:	a340      	add	r3, pc, #256	; (adr r3, 8008c08 <__ieee754_pow+0x3c8>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f7f7 fce4 	bl	80004d8 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4650      	mov	r0, sl
 8008b16:	4659      	mov	r1, fp
 8008b18:	f7f7 fb26 	bl	8000168 <__aeabi_dsub>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4604      	mov	r4, r0
 8008b22:	460d      	mov	r5, r1
 8008b24:	4630      	mov	r0, r6
 8008b26:	4639      	mov	r1, r7
 8008b28:	f7f7 fb20 	bl	800016c <__adddf3>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	4632      	mov	r2, r6
 8008b30:	463b      	mov	r3, r7
 8008b32:	4682      	mov	sl, r0
 8008b34:	468b      	mov	fp, r1
 8008b36:	f7f7 fb17 	bl	8000168 <__aeabi_dsub>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 fb11 	bl	8000168 <__aeabi_dsub>
 8008b46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b4a:	9b00      	ldr	r3, [sp, #0]
 8008b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	4313      	orrs	r3, r2
 8008b52:	f04f 0600 	mov.w	r6, #0
 8008b56:	f04f 0200 	mov.w	r2, #0
 8008b5a:	bf0c      	ite	eq
 8008b5c:	4b2f      	ldreq	r3, [pc, #188]	; (8008c1c <__ieee754_pow+0x3dc>)
 8008b5e:	4b2c      	ldrne	r3, [pc, #176]	; (8008c10 <__ieee754_pow+0x3d0>)
 8008b60:	4604      	mov	r4, r0
 8008b62:	460d      	mov	r5, r1
 8008b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b68:	e9cd 2300 	strd	r2, r3, [sp]
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	f7f7 fafa 	bl	8000168 <__aeabi_dsub>
 8008b74:	4652      	mov	r2, sl
 8008b76:	465b      	mov	r3, fp
 8008b78:	f7f7 fcae 	bl	80004d8 <__aeabi_dmul>
 8008b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b80:	4680      	mov	r8, r0
 8008b82:	4689      	mov	r9, r1
 8008b84:	4620      	mov	r0, r4
 8008b86:	4629      	mov	r1, r5
 8008b88:	f7f7 fca6 	bl	80004d8 <__aeabi_dmul>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 faea 	bl	800016c <__adddf3>
 8008b98:	4632      	mov	r2, r6
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	4689      	mov	r9, r1
 8008ba0:	4650      	mov	r0, sl
 8008ba2:	4659      	mov	r1, fp
 8008ba4:	f7f7 fc98 	bl	80004d8 <__aeabi_dmul>
 8008ba8:	4604      	mov	r4, r0
 8008baa:	460d      	mov	r5, r1
 8008bac:	460b      	mov	r3, r1
 8008bae:	4602      	mov	r2, r0
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008bb8:	f7f7 fad8 	bl	800016c <__adddf3>
 8008bbc:	4b18      	ldr	r3, [pc, #96]	; (8008c20 <__ieee754_pow+0x3e0>)
 8008bbe:	4682      	mov	sl, r0
 8008bc0:	4299      	cmp	r1, r3
 8008bc2:	460f      	mov	r7, r1
 8008bc4:	460e      	mov	r6, r1
 8008bc6:	f340 82e7 	ble.w	8009198 <__ieee754_pow+0x958>
 8008bca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008bce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008bd2:	4303      	orrs	r3, r0
 8008bd4:	f000 81e2 	beq.w	8008f9c <__ieee754_pow+0x75c>
 8008bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2300      	movs	r3, #0
 8008be0:	f7f7 feec 	bl	80009bc <__aeabi_dcmplt>
 8008be4:	3800      	subs	r0, #0
 8008be6:	bf18      	it	ne
 8008be8:	2001      	movne	r0, #1
 8008bea:	e72f      	b.n	8008a4c <__ieee754_pow+0x20c>
 8008bec:	f3af 8000 	nop.w
 8008bf0:	60000000 	.word	0x60000000
 8008bf4:	3ff71547 	.word	0x3ff71547
 8008bf8:	f85ddf44 	.word	0xf85ddf44
 8008bfc:	3e54ae0b 	.word	0x3e54ae0b
 8008c00:	55555555 	.word	0x55555555
 8008c04:	3fd55555 	.word	0x3fd55555
 8008c08:	652b82fe 	.word	0x652b82fe
 8008c0c:	3ff71547 	.word	0x3ff71547
 8008c10:	3ff00000 	.word	0x3ff00000
 8008c14:	3fd00000 	.word	0x3fd00000
 8008c18:	3fe00000 	.word	0x3fe00000
 8008c1c:	bff00000 	.word	0xbff00000
 8008c20:	408fffff 	.word	0x408fffff
 8008c24:	4bd4      	ldr	r3, [pc, #848]	; (8008f78 <__ieee754_pow+0x738>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	402b      	ands	r3, r5
 8008c2a:	b943      	cbnz	r3, 8008c3e <__ieee754_pow+0x3fe>
 8008c2c:	4658      	mov	r0, fp
 8008c2e:	4661      	mov	r1, ip
 8008c30:	4bd2      	ldr	r3, [pc, #840]	; (8008f7c <__ieee754_pow+0x73c>)
 8008c32:	f7f7 fc51 	bl	80004d8 <__aeabi_dmul>
 8008c36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008c3a:	4683      	mov	fp, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	1523      	asrs	r3, r4, #20
 8008c40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c44:	4413      	add	r3, r2
 8008c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c48:	4bcd      	ldr	r3, [pc, #820]	; (8008f80 <__ieee754_pow+0x740>)
 8008c4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008c4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008c52:	429c      	cmp	r4, r3
 8008c54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008c58:	dd08      	ble.n	8008c6c <__ieee754_pow+0x42c>
 8008c5a:	4bca      	ldr	r3, [pc, #808]	; (8008f84 <__ieee754_pow+0x744>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	f340 8164 	ble.w	8008f2a <__ieee754_pow+0x6ea>
 8008c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c64:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008c68:	3301      	adds	r3, #1
 8008c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c6c:	2600      	movs	r6, #0
 8008c6e:	00f3      	lsls	r3, r6, #3
 8008c70:	930d      	str	r3, [sp, #52]	; 0x34
 8008c72:	4bc5      	ldr	r3, [pc, #788]	; (8008f88 <__ieee754_pow+0x748>)
 8008c74:	4658      	mov	r0, fp
 8008c76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c7e:	4629      	mov	r1, r5
 8008c80:	461a      	mov	r2, r3
 8008c82:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008c86:	4623      	mov	r3, r4
 8008c88:	f7f7 fa6e 	bl	8000168 <__aeabi_dsub>
 8008c8c:	46da      	mov	sl, fp
 8008c8e:	462b      	mov	r3, r5
 8008c90:	4652      	mov	r2, sl
 8008c92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008c96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c9a:	f7f7 fa67 	bl	800016c <__adddf3>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	49b9      	ldr	r1, [pc, #740]	; (8008f8c <__ieee754_pow+0x74c>)
 8008ca6:	f7f7 fd41 	bl	800072c <__aeabi_ddiv>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008cb6:	f7f7 fc0f 	bl	80004d8 <__aeabi_dmul>
 8008cba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008cbe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008cc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2200      	movs	r2, #0
 8008cca:	46ab      	mov	fp, r5
 8008ccc:	106d      	asrs	r5, r5, #1
 8008cce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008cd2:	9304      	str	r3, [sp, #16]
 8008cd4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008cd8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008cdc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4614      	mov	r4, r2
 8008ce6:	461d      	mov	r5, r3
 8008ce8:	f7f7 fbf6 	bl	80004d8 <__aeabi_dmul>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008cf4:	f7f7 fa38 	bl	8000168 <__aeabi_dsub>
 8008cf8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	460f      	mov	r7, r1
 8008d00:	4620      	mov	r0, r4
 8008d02:	4629      	mov	r1, r5
 8008d04:	f7f7 fa30 	bl	8000168 <__aeabi_dsub>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4650      	mov	r0, sl
 8008d0e:	4659      	mov	r1, fp
 8008d10:	f7f7 fa2a 	bl	8000168 <__aeabi_dsub>
 8008d14:	4642      	mov	r2, r8
 8008d16:	464b      	mov	r3, r9
 8008d18:	f7f7 fbde 	bl	80004d8 <__aeabi_dmul>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 fa20 	bl	8000168 <__aeabi_dsub>
 8008d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d2c:	f7f7 fbd4 	bl	80004d8 <__aeabi_dmul>
 8008d30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d34:	4682      	mov	sl, r0
 8008d36:	468b      	mov	fp, r1
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	f7f7 fbcc 	bl	80004d8 <__aeabi_dmul>
 8008d40:	a37b      	add	r3, pc, #492	; (adr r3, 8008f30 <__ieee754_pow+0x6f0>)
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	4604      	mov	r4, r0
 8008d48:	460d      	mov	r5, r1
 8008d4a:	f7f7 fbc5 	bl	80004d8 <__aeabi_dmul>
 8008d4e:	a37a      	add	r3, pc, #488	; (adr r3, 8008f38 <__ieee754_pow+0x6f8>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 fa0a 	bl	800016c <__adddf3>
 8008d58:	4622      	mov	r2, r4
 8008d5a:	462b      	mov	r3, r5
 8008d5c:	f7f7 fbbc 	bl	80004d8 <__aeabi_dmul>
 8008d60:	a377      	add	r3, pc, #476	; (adr r3, 8008f40 <__ieee754_pow+0x700>)
 8008d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d66:	f7f7 fa01 	bl	800016c <__adddf3>
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	462b      	mov	r3, r5
 8008d6e:	f7f7 fbb3 	bl	80004d8 <__aeabi_dmul>
 8008d72:	a375      	add	r3, pc, #468	; (adr r3, 8008f48 <__ieee754_pow+0x708>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f7f7 f9f8 	bl	800016c <__adddf3>
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	462b      	mov	r3, r5
 8008d80:	f7f7 fbaa 	bl	80004d8 <__aeabi_dmul>
 8008d84:	a372      	add	r3, pc, #456	; (adr r3, 8008f50 <__ieee754_pow+0x710>)
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	f7f7 f9ef 	bl	800016c <__adddf3>
 8008d8e:	4622      	mov	r2, r4
 8008d90:	462b      	mov	r3, r5
 8008d92:	f7f7 fba1 	bl	80004d8 <__aeabi_dmul>
 8008d96:	a370      	add	r3, pc, #448	; (adr r3, 8008f58 <__ieee754_pow+0x718>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f7f7 f9e6 	bl	800016c <__adddf3>
 8008da0:	4622      	mov	r2, r4
 8008da2:	4606      	mov	r6, r0
 8008da4:	460f      	mov	r7, r1
 8008da6:	462b      	mov	r3, r5
 8008da8:	4620      	mov	r0, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	f7f7 fb94 	bl	80004d8 <__aeabi_dmul>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4630      	mov	r0, r6
 8008db6:	4639      	mov	r1, r7
 8008db8:	f7f7 fb8e 	bl	80004d8 <__aeabi_dmul>
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	460d      	mov	r5, r1
 8008dc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	f7f7 f9d0 	bl	800016c <__adddf3>
 8008dcc:	4652      	mov	r2, sl
 8008dce:	465b      	mov	r3, fp
 8008dd0:	f7f7 fb82 	bl	80004d8 <__aeabi_dmul>
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	462b      	mov	r3, r5
 8008dd8:	f7f7 f9c8 	bl	800016c <__adddf3>
 8008ddc:	4642      	mov	r2, r8
 8008dde:	4606      	mov	r6, r0
 8008de0:	460f      	mov	r7, r1
 8008de2:	464b      	mov	r3, r9
 8008de4:	4640      	mov	r0, r8
 8008de6:	4649      	mov	r1, r9
 8008de8:	f7f7 fb76 	bl	80004d8 <__aeabi_dmul>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008df4:	2200      	movs	r2, #0
 8008df6:	4b66      	ldr	r3, [pc, #408]	; (8008f90 <__ieee754_pow+0x750>)
 8008df8:	f7f7 f9b8 	bl	800016c <__adddf3>
 8008dfc:	4632      	mov	r2, r6
 8008dfe:	463b      	mov	r3, r7
 8008e00:	f7f7 f9b4 	bl	800016c <__adddf3>
 8008e04:	2400      	movs	r4, #0
 8008e06:	460d      	mov	r5, r1
 8008e08:	4622      	mov	r2, r4
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	4649      	mov	r1, r9
 8008e10:	f7f7 fb62 	bl	80004d8 <__aeabi_dmul>
 8008e14:	2200      	movs	r2, #0
 8008e16:	4680      	mov	r8, r0
 8008e18:	4689      	mov	r9, r1
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	4b5c      	ldr	r3, [pc, #368]	; (8008f90 <__ieee754_pow+0x750>)
 8008e20:	f7f7 f9a2 	bl	8000168 <__aeabi_dsub>
 8008e24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e28:	f7f7 f99e 	bl	8000168 <__aeabi_dsub>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 f998 	bl	8000168 <__aeabi_dsub>
 8008e38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e3c:	f7f7 fb4c 	bl	80004d8 <__aeabi_dmul>
 8008e40:	4622      	mov	r2, r4
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	462b      	mov	r3, r5
 8008e48:	4650      	mov	r0, sl
 8008e4a:	4659      	mov	r1, fp
 8008e4c:	f7f7 fb44 	bl	80004d8 <__aeabi_dmul>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4630      	mov	r0, r6
 8008e56:	4639      	mov	r1, r7
 8008e58:	f7f7 f988 	bl	800016c <__adddf3>
 8008e5c:	2400      	movs	r4, #0
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4640      	mov	r0, r8
 8008e68:	4649      	mov	r1, r9
 8008e6a:	f7f7 f97f 	bl	800016c <__adddf3>
 8008e6e:	a33c      	add	r3, pc, #240	; (adr r3, 8008f60 <__ieee754_pow+0x720>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	4620      	mov	r0, r4
 8008e76:	460d      	mov	r5, r1
 8008e78:	f7f7 fb2e 	bl	80004d8 <__aeabi_dmul>
 8008e7c:	4642      	mov	r2, r8
 8008e7e:	464b      	mov	r3, r9
 8008e80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e84:	4620      	mov	r0, r4
 8008e86:	4629      	mov	r1, r5
 8008e88:	f7f7 f96e 	bl	8000168 <__aeabi_dsub>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 f968 	bl	8000168 <__aeabi_dsub>
 8008e98:	a333      	add	r3, pc, #204	; (adr r3, 8008f68 <__ieee754_pow+0x728>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 fb1b 	bl	80004d8 <__aeabi_dmul>
 8008ea2:	a333      	add	r3, pc, #204	; (adr r3, 8008f70 <__ieee754_pow+0x730>)
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	460f      	mov	r7, r1
 8008eac:	4620      	mov	r0, r4
 8008eae:	4629      	mov	r1, r5
 8008eb0:	f7f7 fb12 	bl	80004d8 <__aeabi_dmul>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 f956 	bl	800016c <__adddf3>
 8008ec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ec2:	4b34      	ldr	r3, [pc, #208]	; (8008f94 <__ieee754_pow+0x754>)
 8008ec4:	4413      	add	r3, r2
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 f94f 	bl	800016c <__adddf3>
 8008ece:	4680      	mov	r8, r0
 8008ed0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ed2:	4689      	mov	r9, r1
 8008ed4:	f7f7 fa96 	bl	8000404 <__aeabi_i2d>
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ee0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ee2:	4b2d      	ldr	r3, [pc, #180]	; (8008f98 <__ieee754_pow+0x758>)
 8008ee4:	4413      	add	r3, r2
 8008ee6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008eea:	4642      	mov	r2, r8
 8008eec:	464b      	mov	r3, r9
 8008eee:	f7f7 f93d 	bl	800016c <__adddf3>
 8008ef2:	4632      	mov	r2, r6
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	f7f7 f939 	bl	800016c <__adddf3>
 8008efa:	4622      	mov	r2, r4
 8008efc:	462b      	mov	r3, r5
 8008efe:	f7f7 f935 	bl	800016c <__adddf3>
 8008f02:	2000      	movs	r0, #0
 8008f04:	4622      	mov	r2, r4
 8008f06:	462b      	mov	r3, r5
 8008f08:	4682      	mov	sl, r0
 8008f0a:	468b      	mov	fp, r1
 8008f0c:	f7f7 f92c 	bl	8000168 <__aeabi_dsub>
 8008f10:	4632      	mov	r2, r6
 8008f12:	463b      	mov	r3, r7
 8008f14:	f7f7 f928 	bl	8000168 <__aeabi_dsub>
 8008f18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f1c:	f7f7 f924 	bl	8000168 <__aeabi_dsub>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4640      	mov	r0, r8
 8008f26:	4649      	mov	r1, r9
 8008f28:	e60b      	b.n	8008b42 <__ieee754_pow+0x302>
 8008f2a:	2601      	movs	r6, #1
 8008f2c:	e69f      	b.n	8008c6e <__ieee754_pow+0x42e>
 8008f2e:	bf00      	nop
 8008f30:	4a454eef 	.word	0x4a454eef
 8008f34:	3fca7e28 	.word	0x3fca7e28
 8008f38:	93c9db65 	.word	0x93c9db65
 8008f3c:	3fcd864a 	.word	0x3fcd864a
 8008f40:	a91d4101 	.word	0xa91d4101
 8008f44:	3fd17460 	.word	0x3fd17460
 8008f48:	518f264d 	.word	0x518f264d
 8008f4c:	3fd55555 	.word	0x3fd55555
 8008f50:	db6fabff 	.word	0xdb6fabff
 8008f54:	3fdb6db6 	.word	0x3fdb6db6
 8008f58:	33333303 	.word	0x33333303
 8008f5c:	3fe33333 	.word	0x3fe33333
 8008f60:	e0000000 	.word	0xe0000000
 8008f64:	3feec709 	.word	0x3feec709
 8008f68:	dc3a03fd 	.word	0xdc3a03fd
 8008f6c:	3feec709 	.word	0x3feec709
 8008f70:	145b01f5 	.word	0x145b01f5
 8008f74:	be3e2fe0 	.word	0xbe3e2fe0
 8008f78:	7ff00000 	.word	0x7ff00000
 8008f7c:	43400000 	.word	0x43400000
 8008f80:	0003988e 	.word	0x0003988e
 8008f84:	000bb679 	.word	0x000bb679
 8008f88:	08009a30 	.word	0x08009a30
 8008f8c:	3ff00000 	.word	0x3ff00000
 8008f90:	40080000 	.word	0x40080000
 8008f94:	08009a50 	.word	0x08009a50
 8008f98:	08009a40 	.word	0x08009a40
 8008f9c:	a39c      	add	r3, pc, #624	; (adr r3, 8009210 <__ieee754_pow+0x9d0>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 f8e1 	bl	800016c <__adddf3>
 8008faa:	4622      	mov	r2, r4
 8008fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fb0:	462b      	mov	r3, r5
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	f7f7 f8d7 	bl	8000168 <__aeabi_dsub>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fc2:	f7f7 fd19 	bl	80009f8 <__aeabi_dcmpgt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f47f ae06 	bne.w	8008bd8 <__ieee754_pow+0x398>
 8008fcc:	4aa2      	ldr	r2, [pc, #648]	; (8009258 <__ieee754_pow+0xa18>)
 8008fce:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	f340 8100 	ble.w	80091d8 <__ieee754_pow+0x998>
 8008fd8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008fdc:	151b      	asrs	r3, r3, #20
 8008fde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008fe2:	fa4a fa03 	asr.w	sl, sl, r3
 8008fe6:	44b2      	add	sl, r6
 8008fe8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008fec:	489b      	ldr	r0, [pc, #620]	; (800925c <__ieee754_pow+0xa1c>)
 8008fee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008ff2:	4108      	asrs	r0, r1
 8008ff4:	ea00 030a 	and.w	r3, r0, sl
 8008ff8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008ffc:	f1c1 0114 	rsb	r1, r1, #20
 8009000:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009004:	fa4a fa01 	asr.w	sl, sl, r1
 8009008:	2e00      	cmp	r6, #0
 800900a:	f04f 0200 	mov.w	r2, #0
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	bfb8      	it	lt
 8009014:	f1ca 0a00 	rsblt	sl, sl, #0
 8009018:	f7f7 f8a6 	bl	8000168 <__aeabi_dsub>
 800901c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009024:	2400      	movs	r4, #0
 8009026:	4642      	mov	r2, r8
 8009028:	464b      	mov	r3, r9
 800902a:	f7f7 f89f 	bl	800016c <__adddf3>
 800902e:	a37a      	add	r3, pc, #488	; (adr r3, 8009218 <__ieee754_pow+0x9d8>)
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	4620      	mov	r0, r4
 8009036:	460d      	mov	r5, r1
 8009038:	f7f7 fa4e 	bl	80004d8 <__aeabi_dmul>
 800903c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009040:	4606      	mov	r6, r0
 8009042:	460f      	mov	r7, r1
 8009044:	4620      	mov	r0, r4
 8009046:	4629      	mov	r1, r5
 8009048:	f7f7 f88e 	bl	8000168 <__aeabi_dsub>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4640      	mov	r0, r8
 8009052:	4649      	mov	r1, r9
 8009054:	f7f7 f888 	bl	8000168 <__aeabi_dsub>
 8009058:	a371      	add	r3, pc, #452	; (adr r3, 8009220 <__ieee754_pow+0x9e0>)
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	f7f7 fa3b 	bl	80004d8 <__aeabi_dmul>
 8009062:	a371      	add	r3, pc, #452	; (adr r3, 8009228 <__ieee754_pow+0x9e8>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	4680      	mov	r8, r0
 800906a:	4689      	mov	r9, r1
 800906c:	4620      	mov	r0, r4
 800906e:	4629      	mov	r1, r5
 8009070:	f7f7 fa32 	bl	80004d8 <__aeabi_dmul>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4640      	mov	r0, r8
 800907a:	4649      	mov	r1, r9
 800907c:	f7f7 f876 	bl	800016c <__adddf3>
 8009080:	4604      	mov	r4, r0
 8009082:	460d      	mov	r5, r1
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4630      	mov	r0, r6
 800908a:	4639      	mov	r1, r7
 800908c:	f7f7 f86e 	bl	800016c <__adddf3>
 8009090:	4632      	mov	r2, r6
 8009092:	463b      	mov	r3, r7
 8009094:	4680      	mov	r8, r0
 8009096:	4689      	mov	r9, r1
 8009098:	f7f7 f866 	bl	8000168 <__aeabi_dsub>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4620      	mov	r0, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7f7 f860 	bl	8000168 <__aeabi_dsub>
 80090a8:	4642      	mov	r2, r8
 80090aa:	4606      	mov	r6, r0
 80090ac:	460f      	mov	r7, r1
 80090ae:	464b      	mov	r3, r9
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 fa10 	bl	80004d8 <__aeabi_dmul>
 80090b8:	a35d      	add	r3, pc, #372	; (adr r3, 8009230 <__ieee754_pow+0x9f0>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	4604      	mov	r4, r0
 80090c0:	460d      	mov	r5, r1
 80090c2:	f7f7 fa09 	bl	80004d8 <__aeabi_dmul>
 80090c6:	a35c      	add	r3, pc, #368	; (adr r3, 8009238 <__ieee754_pow+0x9f8>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f7f7 f84c 	bl	8000168 <__aeabi_dsub>
 80090d0:	4622      	mov	r2, r4
 80090d2:	462b      	mov	r3, r5
 80090d4:	f7f7 fa00 	bl	80004d8 <__aeabi_dmul>
 80090d8:	a359      	add	r3, pc, #356	; (adr r3, 8009240 <__ieee754_pow+0xa00>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f7f7 f845 	bl	800016c <__adddf3>
 80090e2:	4622      	mov	r2, r4
 80090e4:	462b      	mov	r3, r5
 80090e6:	f7f7 f9f7 	bl	80004d8 <__aeabi_dmul>
 80090ea:	a357      	add	r3, pc, #348	; (adr r3, 8009248 <__ieee754_pow+0xa08>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 f83a 	bl	8000168 <__aeabi_dsub>
 80090f4:	4622      	mov	r2, r4
 80090f6:	462b      	mov	r3, r5
 80090f8:	f7f7 f9ee 	bl	80004d8 <__aeabi_dmul>
 80090fc:	a354      	add	r3, pc, #336	; (adr r3, 8009250 <__ieee754_pow+0xa10>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	f7f7 f833 	bl	800016c <__adddf3>
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f7f7 f9e5 	bl	80004d8 <__aeabi_dmul>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4640      	mov	r0, r8
 8009114:	4649      	mov	r1, r9
 8009116:	f7f7 f827 	bl	8000168 <__aeabi_dsub>
 800911a:	4604      	mov	r4, r0
 800911c:	460d      	mov	r5, r1
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4640      	mov	r0, r8
 8009124:	4649      	mov	r1, r9
 8009126:	f7f7 f9d7 	bl	80004d8 <__aeabi_dmul>
 800912a:	2200      	movs	r2, #0
 800912c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 f816 	bl	8000168 <__aeabi_dsub>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009144:	f7f7 faf2 	bl	800072c <__aeabi_ddiv>
 8009148:	4632      	mov	r2, r6
 800914a:	4604      	mov	r4, r0
 800914c:	460d      	mov	r5, r1
 800914e:	463b      	mov	r3, r7
 8009150:	4640      	mov	r0, r8
 8009152:	4649      	mov	r1, r9
 8009154:	f7f7 f9c0 	bl	80004d8 <__aeabi_dmul>
 8009158:	4632      	mov	r2, r6
 800915a:	463b      	mov	r3, r7
 800915c:	f7f7 f806 	bl	800016c <__adddf3>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4620      	mov	r0, r4
 8009166:	4629      	mov	r1, r5
 8009168:	f7f6 fffe 	bl	8000168 <__aeabi_dsub>
 800916c:	4642      	mov	r2, r8
 800916e:	464b      	mov	r3, r9
 8009170:	f7f6 fffa 	bl	8000168 <__aeabi_dsub>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	2000      	movs	r0, #0
 800917a:	4939      	ldr	r1, [pc, #228]	; (8009260 <__ieee754_pow+0xa20>)
 800917c:	f7f6 fff4 	bl	8000168 <__aeabi_dsub>
 8009180:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009184:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009188:	da29      	bge.n	80091de <__ieee754_pow+0x99e>
 800918a:	4652      	mov	r2, sl
 800918c:	f000 f874 	bl	8009278 <scalbn>
 8009190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009194:	f7ff bbfd 	b.w	8008992 <__ieee754_pow+0x152>
 8009198:	4b32      	ldr	r3, [pc, #200]	; (8009264 <__ieee754_pow+0xa24>)
 800919a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800919e:	429f      	cmp	r7, r3
 80091a0:	f77f af14 	ble.w	8008fcc <__ieee754_pow+0x78c>
 80091a4:	4b30      	ldr	r3, [pc, #192]	; (8009268 <__ieee754_pow+0xa28>)
 80091a6:	440b      	add	r3, r1
 80091a8:	4303      	orrs	r3, r0
 80091aa:	d009      	beq.n	80091c0 <__ieee754_pow+0x980>
 80091ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091b0:	2200      	movs	r2, #0
 80091b2:	2300      	movs	r3, #0
 80091b4:	f7f7 fc02 	bl	80009bc <__aeabi_dcmplt>
 80091b8:	3800      	subs	r0, #0
 80091ba:	bf18      	it	ne
 80091bc:	2001      	movne	r0, #1
 80091be:	e452      	b.n	8008a66 <__ieee754_pow+0x226>
 80091c0:	4622      	mov	r2, r4
 80091c2:	462b      	mov	r3, r5
 80091c4:	f7f6 ffd0 	bl	8000168 <__aeabi_dsub>
 80091c8:	4642      	mov	r2, r8
 80091ca:	464b      	mov	r3, r9
 80091cc:	f7f7 fc0a 	bl	80009e4 <__aeabi_dcmpge>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	f43f aefb 	beq.w	8008fcc <__ieee754_pow+0x78c>
 80091d6:	e7e9      	b.n	80091ac <__ieee754_pow+0x96c>
 80091d8:	f04f 0a00 	mov.w	sl, #0
 80091dc:	e720      	b.n	8009020 <__ieee754_pow+0x7e0>
 80091de:	4621      	mov	r1, r4
 80091e0:	e7d6      	b.n	8009190 <__ieee754_pow+0x950>
 80091e2:	f04f 0b00 	mov.w	fp, #0
 80091e6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009260 <__ieee754_pow+0xa20>
 80091ea:	f7ff bbb9 	b.w	8008960 <__ieee754_pow+0x120>
 80091ee:	f04f 0b00 	mov.w	fp, #0
 80091f2:	f04f 0c00 	mov.w	ip, #0
 80091f6:	f7ff bbb3 	b.w	8008960 <__ieee754_pow+0x120>
 80091fa:	4640      	mov	r0, r8
 80091fc:	4649      	mov	r1, r9
 80091fe:	f7ff bb3c 	b.w	800887a <__ieee754_pow+0x3a>
 8009202:	9200      	str	r2, [sp, #0]
 8009204:	f7ff bb88 	b.w	8008918 <__ieee754_pow+0xd8>
 8009208:	2300      	movs	r3, #0
 800920a:	f7ff bb72 	b.w	80088f2 <__ieee754_pow+0xb2>
 800920e:	bf00      	nop
 8009210:	652b82fe 	.word	0x652b82fe
 8009214:	3c971547 	.word	0x3c971547
 8009218:	00000000 	.word	0x00000000
 800921c:	3fe62e43 	.word	0x3fe62e43
 8009220:	fefa39ef 	.word	0xfefa39ef
 8009224:	3fe62e42 	.word	0x3fe62e42
 8009228:	0ca86c39 	.word	0x0ca86c39
 800922c:	be205c61 	.word	0xbe205c61
 8009230:	72bea4d0 	.word	0x72bea4d0
 8009234:	3e663769 	.word	0x3e663769
 8009238:	c5d26bf1 	.word	0xc5d26bf1
 800923c:	3ebbbd41 	.word	0x3ebbbd41
 8009240:	af25de2c 	.word	0xaf25de2c
 8009244:	3f11566a 	.word	0x3f11566a
 8009248:	16bebd93 	.word	0x16bebd93
 800924c:	3f66c16c 	.word	0x3f66c16c
 8009250:	5555553e 	.word	0x5555553e
 8009254:	3fc55555 	.word	0x3fc55555
 8009258:	3fe00000 	.word	0x3fe00000
 800925c:	fff00000 	.word	0xfff00000
 8009260:	3ff00000 	.word	0x3ff00000
 8009264:	4090cbff 	.word	0x4090cbff
 8009268:	3f6f3400 	.word	0x3f6f3400

0800926c <fabs>:
 800926c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009270:	4619      	mov	r1, r3
 8009272:	4770      	bx	lr
 8009274:	0000      	movs	r0, r0
	...

08009278 <scalbn>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	4616      	mov	r6, r2
 800927c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009280:	4604      	mov	r4, r0
 8009282:	460d      	mov	r5, r1
 8009284:	460b      	mov	r3, r1
 8009286:	b992      	cbnz	r2, 80092ae <scalbn+0x36>
 8009288:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800928c:	4303      	orrs	r3, r0
 800928e:	d03c      	beq.n	800930a <scalbn+0x92>
 8009290:	4b31      	ldr	r3, [pc, #196]	; (8009358 <scalbn+0xe0>)
 8009292:	2200      	movs	r2, #0
 8009294:	f7f7 f920 	bl	80004d8 <__aeabi_dmul>
 8009298:	4b30      	ldr	r3, [pc, #192]	; (800935c <scalbn+0xe4>)
 800929a:	4604      	mov	r4, r0
 800929c:	429e      	cmp	r6, r3
 800929e:	460d      	mov	r5, r1
 80092a0:	da0f      	bge.n	80092c2 <scalbn+0x4a>
 80092a2:	a329      	add	r3, pc, #164	; (adr r3, 8009348 <scalbn+0xd0>)
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f7f7 f916 	bl	80004d8 <__aeabi_dmul>
 80092ac:	e006      	b.n	80092bc <scalbn+0x44>
 80092ae:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80092b2:	42ba      	cmp	r2, r7
 80092b4:	d109      	bne.n	80092ca <scalbn+0x52>
 80092b6:	4602      	mov	r2, r0
 80092b8:	f7f6 ff58 	bl	800016c <__adddf3>
 80092bc:	4604      	mov	r4, r0
 80092be:	460d      	mov	r5, r1
 80092c0:	e023      	b.n	800930a <scalbn+0x92>
 80092c2:	460b      	mov	r3, r1
 80092c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80092c8:	3a36      	subs	r2, #54	; 0x36
 80092ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 80092ce:	428e      	cmp	r6, r1
 80092d0:	dd0e      	ble.n	80092f0 <scalbn+0x78>
 80092d2:	a31f      	add	r3, pc, #124	; (adr r3, 8009350 <scalbn+0xd8>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80092dc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80092e0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80092e4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80092e8:	481d      	ldr	r0, [pc, #116]	; (8009360 <scalbn+0xe8>)
 80092ea:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80092ee:	e7db      	b.n	80092a8 <scalbn+0x30>
 80092f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80092f4:	4432      	add	r2, r6
 80092f6:	428a      	cmp	r2, r1
 80092f8:	dceb      	bgt.n	80092d2 <scalbn+0x5a>
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	dd08      	ble.n	8009310 <scalbn+0x98>
 80092fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009302:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009306:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800930a:	4620      	mov	r0, r4
 800930c:	4629      	mov	r1, r5
 800930e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009310:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009314:	da0c      	bge.n	8009330 <scalbn+0xb8>
 8009316:	a30c      	add	r3, pc, #48	; (adr r3, 8009348 <scalbn+0xd0>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009320:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009324:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009328:	480e      	ldr	r0, [pc, #56]	; (8009364 <scalbn+0xec>)
 800932a:	f041 011f 	orr.w	r1, r1, #31
 800932e:	e7bb      	b.n	80092a8 <scalbn+0x30>
 8009330:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009334:	3236      	adds	r2, #54	; 0x36
 8009336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800933a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800933e:	4620      	mov	r0, r4
 8009340:	4629      	mov	r1, r5
 8009342:	2200      	movs	r2, #0
 8009344:	4b08      	ldr	r3, [pc, #32]	; (8009368 <scalbn+0xf0>)
 8009346:	e7af      	b.n	80092a8 <scalbn+0x30>
 8009348:	c2f8f359 	.word	0xc2f8f359
 800934c:	01a56e1f 	.word	0x01a56e1f
 8009350:	8800759c 	.word	0x8800759c
 8009354:	7e37e43c 	.word	0x7e37e43c
 8009358:	43500000 	.word	0x43500000
 800935c:	ffff3cb0 	.word	0xffff3cb0
 8009360:	8800759c 	.word	0x8800759c
 8009364:	c2f8f359 	.word	0xc2f8f359
 8009368:	3c900000 	.word	0x3c900000

0800936c <with_errno>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	4604      	mov	r4, r0
 8009370:	460d      	mov	r5, r1
 8009372:	4616      	mov	r6, r2
 8009374:	f7fd f960 	bl	8006638 <__errno>
 8009378:	4629      	mov	r1, r5
 800937a:	6006      	str	r6, [r0, #0]
 800937c:	4620      	mov	r0, r4
 800937e:	bd70      	pop	{r4, r5, r6, pc}

08009380 <xflow>:
 8009380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009382:	4615      	mov	r5, r2
 8009384:	461c      	mov	r4, r3
 8009386:	b180      	cbz	r0, 80093aa <xflow+0x2a>
 8009388:	4610      	mov	r0, r2
 800938a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800938e:	e9cd 0100 	strd	r0, r1, [sp]
 8009392:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009396:	4628      	mov	r0, r5
 8009398:	4621      	mov	r1, r4
 800939a:	f7f7 f89d 	bl	80004d8 <__aeabi_dmul>
 800939e:	2222      	movs	r2, #34	; 0x22
 80093a0:	b003      	add	sp, #12
 80093a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093a6:	f7ff bfe1 	b.w	800936c <with_errno>
 80093aa:	4610      	mov	r0, r2
 80093ac:	4619      	mov	r1, r3
 80093ae:	e7ee      	b.n	800938e <xflow+0xe>

080093b0 <__math_uflow>:
 80093b0:	2200      	movs	r2, #0
 80093b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093b6:	f7ff bfe3 	b.w	8009380 <xflow>

080093ba <__math_oflow>:
 80093ba:	2200      	movs	r2, #0
 80093bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80093c0:	f7ff bfde 	b.w	8009380 <xflow>

080093c4 <__ieee754_sqrt>:
 80093c4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8009568 <__ieee754_sqrt+0x1a4>
 80093c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80093d0:	460b      	mov	r3, r1
 80093d2:	4606      	mov	r6, r0
 80093d4:	460d      	mov	r5, r1
 80093d6:	460a      	mov	r2, r1
 80093d8:	4604      	mov	r4, r0
 80093da:	d10e      	bne.n	80093fa <__ieee754_sqrt+0x36>
 80093dc:	4602      	mov	r2, r0
 80093de:	f7f7 f87b 	bl	80004d8 <__aeabi_dmul>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4630      	mov	r0, r6
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f6 febf 	bl	800016c <__adddf3>
 80093ee:	4606      	mov	r6, r0
 80093f0:	460d      	mov	r5, r1
 80093f2:	4630      	mov	r0, r6
 80093f4:	4629      	mov	r1, r5
 80093f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fa:	2900      	cmp	r1, #0
 80093fc:	dc0d      	bgt.n	800941a <__ieee754_sqrt+0x56>
 80093fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009402:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009406:	d0f4      	beq.n	80093f2 <__ieee754_sqrt+0x2e>
 8009408:	b139      	cbz	r1, 800941a <__ieee754_sqrt+0x56>
 800940a:	4602      	mov	r2, r0
 800940c:	f7f6 feac 	bl	8000168 <__aeabi_dsub>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	f7f7 f98a 	bl	800072c <__aeabi_ddiv>
 8009418:	e7e9      	b.n	80093ee <__ieee754_sqrt+0x2a>
 800941a:	1512      	asrs	r2, r2, #20
 800941c:	f000 8089 	beq.w	8009532 <__ieee754_sqrt+0x16e>
 8009420:	2500      	movs	r5, #0
 8009422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009426:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800942a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800942e:	07d2      	lsls	r2, r2, #31
 8009430:	bf5c      	itt	pl
 8009432:	005b      	lslpl	r3, r3, #1
 8009434:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009438:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800943c:	bf58      	it	pl
 800943e:	0064      	lslpl	r4, r4, #1
 8009440:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009444:	0062      	lsls	r2, r4, #1
 8009446:	2016      	movs	r0, #22
 8009448:	4629      	mov	r1, r5
 800944a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800944e:	1076      	asrs	r6, r6, #1
 8009450:	190f      	adds	r7, r1, r4
 8009452:	429f      	cmp	r7, r3
 8009454:	bfde      	ittt	le
 8009456:	1bdb      	suble	r3, r3, r7
 8009458:	1939      	addle	r1, r7, r4
 800945a:	192d      	addle	r5, r5, r4
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	3801      	subs	r0, #1
 8009460:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009464:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009468:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800946c:	d1f0      	bne.n	8009450 <__ieee754_sqrt+0x8c>
 800946e:	4604      	mov	r4, r0
 8009470:	2720      	movs	r7, #32
 8009472:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009476:	428b      	cmp	r3, r1
 8009478:	eb0c 0e00 	add.w	lr, ip, r0
 800947c:	dc02      	bgt.n	8009484 <__ieee754_sqrt+0xc0>
 800947e:	d113      	bne.n	80094a8 <__ieee754_sqrt+0xe4>
 8009480:	4596      	cmp	lr, r2
 8009482:	d811      	bhi.n	80094a8 <__ieee754_sqrt+0xe4>
 8009484:	f1be 0f00 	cmp.w	lr, #0
 8009488:	eb0e 000c 	add.w	r0, lr, ip
 800948c:	da56      	bge.n	800953c <__ieee754_sqrt+0x178>
 800948e:	2800      	cmp	r0, #0
 8009490:	db54      	blt.n	800953c <__ieee754_sqrt+0x178>
 8009492:	f101 0801 	add.w	r8, r1, #1
 8009496:	1a5b      	subs	r3, r3, r1
 8009498:	4641      	mov	r1, r8
 800949a:	4596      	cmp	lr, r2
 800949c:	bf88      	it	hi
 800949e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80094a2:	eba2 020e 	sub.w	r2, r2, lr
 80094a6:	4464      	add	r4, ip
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	3f01      	subs	r7, #1
 80094ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80094b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80094b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80094b8:	d1dd      	bne.n	8009476 <__ieee754_sqrt+0xb2>
 80094ba:	4313      	orrs	r3, r2
 80094bc:	d01b      	beq.n	80094f6 <__ieee754_sqrt+0x132>
 80094be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800956c <__ieee754_sqrt+0x1a8>
 80094c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009570 <__ieee754_sqrt+0x1ac>
 80094c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80094ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80094ce:	f7f6 fe4b 	bl	8000168 <__aeabi_dsub>
 80094d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f7 fa77 	bl	80009d0 <__aeabi_dcmple>
 80094e2:	b140      	cbz	r0, 80094f6 <__ieee754_sqrt+0x132>
 80094e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80094e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80094ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80094f0:	d126      	bne.n	8009540 <__ieee754_sqrt+0x17c>
 80094f2:	463c      	mov	r4, r7
 80094f4:	3501      	adds	r5, #1
 80094f6:	106b      	asrs	r3, r5, #1
 80094f8:	0864      	lsrs	r4, r4, #1
 80094fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80094fe:	07ea      	lsls	r2, r5, #31
 8009500:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009504:	bf48      	it	mi
 8009506:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800950a:	4620      	mov	r0, r4
 800950c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009510:	e76d      	b.n	80093ee <__ieee754_sqrt+0x2a>
 8009512:	0ae3      	lsrs	r3, r4, #11
 8009514:	3915      	subs	r1, #21
 8009516:	0564      	lsls	r4, r4, #21
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0fa      	beq.n	8009512 <__ieee754_sqrt+0x14e>
 800951c:	02d8      	lsls	r0, r3, #11
 800951e:	d50a      	bpl.n	8009536 <__ieee754_sqrt+0x172>
 8009520:	f1c2 0020 	rsb	r0, r2, #32
 8009524:	fa24 f000 	lsr.w	r0, r4, r0
 8009528:	1e55      	subs	r5, r2, #1
 800952a:	4094      	lsls	r4, r2
 800952c:	4303      	orrs	r3, r0
 800952e:	1b4a      	subs	r2, r1, r5
 8009530:	e776      	b.n	8009420 <__ieee754_sqrt+0x5c>
 8009532:	4611      	mov	r1, r2
 8009534:	e7f0      	b.n	8009518 <__ieee754_sqrt+0x154>
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	3201      	adds	r2, #1
 800953a:	e7ef      	b.n	800951c <__ieee754_sqrt+0x158>
 800953c:	4688      	mov	r8, r1
 800953e:	e7aa      	b.n	8009496 <__ieee754_sqrt+0xd2>
 8009540:	f7f6 fe14 	bl	800016c <__adddf3>
 8009544:	e9da 8900 	ldrd	r8, r9, [sl]
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4640      	mov	r0, r8
 800954e:	4649      	mov	r1, r9
 8009550:	f7f7 fa34 	bl	80009bc <__aeabi_dcmplt>
 8009554:	b120      	cbz	r0, 8009560 <__ieee754_sqrt+0x19c>
 8009556:	1ca1      	adds	r1, r4, #2
 8009558:	bf08      	it	eq
 800955a:	3501      	addeq	r5, #1
 800955c:	3402      	adds	r4, #2
 800955e:	e7ca      	b.n	80094f6 <__ieee754_sqrt+0x132>
 8009560:	3401      	adds	r4, #1
 8009562:	f024 0401 	bic.w	r4, r4, #1
 8009566:	e7c6      	b.n	80094f6 <__ieee754_sqrt+0x132>
 8009568:	7ff00000 	.word	0x7ff00000
 800956c:	200001e0 	.word	0x200001e0
 8009570:	200001e8 	.word	0x200001e8

08009574 <_init>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr

08009580 <_fini>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	bf00      	nop
 8009584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009586:	bc08      	pop	{r3}
 8009588:	469e      	mov	lr, r3
 800958a:	4770      	bx	lr
