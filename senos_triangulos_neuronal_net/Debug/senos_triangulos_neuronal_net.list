
senos_triangulos_neuronal_net.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002049c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000938c  08020670  08020670  00021670  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080299fc  080299fc  00030390  2**0
                  CONTENTS
  4 .ARM          00000008  080299fc  080299fc  0002a9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029a04  08029a04  00030390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08029a04  08029a04  0002aa04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08029a10  08029a10  0002aa10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005390  20000000  08029a18  0002b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20005390  0802eda8  00030390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057f4  0802eda8  000307f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY
 12 .debug_info   00180871  00000000  00000000  000303c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00010bcf  00000000  00000000  001b0c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005138  00000000  00000000  001c1800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003ed5  00000000  00000000  001c6938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a9f1  00000000  00000000  001ca80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00060a25  00000000  00000000  002051fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001f0d2a  00000000  00000000  00265c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0045694d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00019160  00000000  00000000  00456990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0046faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20005390 	.word	0x20005390
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08020654 	.word	0x08020654

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20005394 	.word	0x20005394
 800020c:	08020654 	.word	0x08020654

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 b9eb 	b.w	80010e0 <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9a0 	b.w	80010e0 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d14e      	bne.n	8000ece <__udivmoddi4+0xaa>
 8000e30:	4694      	mov	ip, r2
 8000e32:	458c      	cmp	ip, r1
 8000e34:	4686      	mov	lr, r0
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	d962      	bls.n	8000f02 <__udivmoddi4+0xde>
 8000e3c:	b14a      	cbz	r2, 8000e52 <__udivmoddi4+0x2e>
 8000e3e:	f1c2 0320 	rsb	r3, r2, #32
 8000e42:	4091      	lsls	r1, r2
 8000e44:	fa20 f303 	lsr.w	r3, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f f68c 	uxth.w	r6, ip
 8000e5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x64>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e7a:	f080 8112 	bcs.w	80010a2 <__udivmoddi4+0x27e>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 810f 	bls.w	80010a2 <__udivmoddi4+0x27e>
 8000e84:	3c02      	subs	r4, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a59      	subs	r1, r3, r1
 8000e8a:	fa1f f38e 	uxth.w	r3, lr
 8000e8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e92:	fb07 1110 	mls	r1, r7, r0, r1
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f606 	mul.w	r6, r0, r6
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x94>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eaa:	f080 80fc 	bcs.w	80010a6 <__udivmoddi4+0x282>
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	f240 80f9 	bls.w	80010a6 <__udivmoddi4+0x282>
 8000eb4:	4463      	add	r3, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	b11d      	cbz	r5, 8000eca <__udivmoddi4+0xa6>
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d905      	bls.n	8000ede <__udivmoddi4+0xba>
 8000ed2:	b10d      	cbz	r5, 8000ed8 <__udivmoddi4+0xb4>
 8000ed4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4608      	mov	r0, r1
 8000edc:	e7f5      	b.n	8000eca <__udivmoddi4+0xa6>
 8000ede:	fab3 f183 	clz	r1, r3
 8000ee2:	2900      	cmp	r1, #0
 8000ee4:	d146      	bne.n	8000f74 <__udivmoddi4+0x150>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d302      	bcc.n	8000ef0 <__udivmoddi4+0xcc>
 8000eea:	4290      	cmp	r0, r2
 8000eec:	f0c0 80f0 	bcc.w	80010d0 <__udivmoddi4+0x2ac>
 8000ef0:	1a86      	subs	r6, r0, r2
 8000ef2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d0e6      	beq.n	8000eca <__udivmoddi4+0xa6>
 8000efc:	e9c5 6300 	strd	r6, r3, [r5]
 8000f00:	e7e3      	b.n	8000eca <__udivmoddi4+0xa6>
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	f040 8090 	bne.w	8001028 <__udivmoddi4+0x204>
 8000f08:	eba1 040c 	sub.w	r4, r1, ip
 8000f0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f10:	fa1f f78c 	uxth.w	r7, ip
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f26:	fb07 f006 	mul.w	r0, r7, r6
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x11c>
 8000f2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x11a>
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	f200 80cd 	bhi.w	80010d8 <__udivmoddi4+0x2b4>
 8000f3e:	4626      	mov	r6, r4
 8000f40:	1a1c      	subs	r4, r3, r0
 8000f42:	fa1f f38e 	uxth.w	r3, lr
 8000f46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f52:	fb00 f707 	mul.w	r7, r0, r7
 8000f56:	429f      	cmp	r7, r3
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x148>
 8000f5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f62:	d202      	bcs.n	8000f6a <__udivmoddi4+0x146>
 8000f64:	429f      	cmp	r7, r3
 8000f66:	f200 80b0 	bhi.w	80010ca <__udivmoddi4+0x2a6>
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	1bdb      	subs	r3, r3, r7
 8000f6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f72:	e7a5      	b.n	8000ec0 <__udivmoddi4+0x9c>
 8000f74:	f1c1 0620 	rsb	r6, r1, #32
 8000f78:	408b      	lsls	r3, r1
 8000f7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f84:	fa04 f301 	lsl.w	r3, r4, r1
 8000f88:	ea43 030c 	orr.w	r3, r3, ip
 8000f8c:	40f4      	lsrs	r4, r6
 8000f8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f92:	0c38      	lsrs	r0, r7, #16
 8000f94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f98:	fbb4 fef0 	udiv	lr, r4, r0
 8000f9c:	fa1f fc87 	uxth.w	ip, r7
 8000fa0:	fb00 441e 	mls	r4, r0, lr, r4
 8000fa4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa8:	fb0e f90c 	mul.w	r9, lr, ip
 8000fac:	45a1      	cmp	r9, r4
 8000fae:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb2:	d90a      	bls.n	8000fca <__udivmoddi4+0x1a6>
 8000fb4:	193c      	adds	r4, r7, r4
 8000fb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fba:	f080 8084 	bcs.w	80010c6 <__udivmoddi4+0x2a2>
 8000fbe:	45a1      	cmp	r9, r4
 8000fc0:	f240 8081 	bls.w	80010c6 <__udivmoddi4+0x2a2>
 8000fc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc8:	443c      	add	r4, r7
 8000fca:	eba4 0409 	sub.w	r4, r4, r9
 8000fce:	fa1f f983 	uxth.w	r9, r3
 8000fd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x1d2>
 8000fe6:	193c      	adds	r4, r7, r4
 8000fe8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fec:	d267      	bcs.n	80010be <__udivmoddi4+0x29a>
 8000fee:	45a4      	cmp	ip, r4
 8000ff0:	d965      	bls.n	80010be <__udivmoddi4+0x29a>
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	443c      	add	r4, r7
 8000ff6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ffa:	fba0 9302 	umull	r9, r3, r0, r2
 8000ffe:	eba4 040c 	sub.w	r4, r4, ip
 8001002:	429c      	cmp	r4, r3
 8001004:	46ce      	mov	lr, r9
 8001006:	469c      	mov	ip, r3
 8001008:	d351      	bcc.n	80010ae <__udivmoddi4+0x28a>
 800100a:	d04e      	beq.n	80010aa <__udivmoddi4+0x286>
 800100c:	b155      	cbz	r5, 8001024 <__udivmoddi4+0x200>
 800100e:	ebb8 030e 	subs.w	r3, r8, lr
 8001012:	eb64 040c 	sbc.w	r4, r4, ip
 8001016:	fa04 f606 	lsl.w	r6, r4, r6
 800101a:	40cb      	lsrs	r3, r1
 800101c:	431e      	orrs	r6, r3
 800101e:	40cc      	lsrs	r4, r1
 8001020:	e9c5 6400 	strd	r6, r4, [r5]
 8001024:	2100      	movs	r1, #0
 8001026:	e750      	b.n	8000eca <__udivmoddi4+0xa6>
 8001028:	f1c2 0320 	rsb	r3, r2, #32
 800102c:	fa20 f103 	lsr.w	r1, r0, r3
 8001030:	fa0c fc02 	lsl.w	ip, ip, r2
 8001034:	fa24 f303 	lsr.w	r3, r4, r3
 8001038:	4094      	lsls	r4, r2
 800103a:	430c      	orrs	r4, r1
 800103c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001040:	fa00 fe02 	lsl.w	lr, r0, r2
 8001044:	fa1f f78c 	uxth.w	r7, ip
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3110 	mls	r1, r8, r0, r3
 8001050:	0c23      	lsrs	r3, r4, #16
 8001052:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001056:	fb00 f107 	mul.w	r1, r0, r7
 800105a:	4299      	cmp	r1, r3
 800105c:	d908      	bls.n	8001070 <__udivmoddi4+0x24c>
 800105e:	eb1c 0303 	adds.w	r3, ip, r3
 8001062:	f100 36ff 	add.w	r6, r0, #4294967295
 8001066:	d22c      	bcs.n	80010c2 <__udivmoddi4+0x29e>
 8001068:	4299      	cmp	r1, r3
 800106a:	d92a      	bls.n	80010c2 <__udivmoddi4+0x29e>
 800106c:	3802      	subs	r0, #2
 800106e:	4463      	add	r3, ip
 8001070:	1a5b      	subs	r3, r3, r1
 8001072:	b2a4      	uxth	r4, r4
 8001074:	fbb3 f1f8 	udiv	r1, r3, r8
 8001078:	fb08 3311 	mls	r3, r8, r1, r3
 800107c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001080:	fb01 f307 	mul.w	r3, r1, r7
 8001084:	42a3      	cmp	r3, r4
 8001086:	d908      	bls.n	800109a <__udivmoddi4+0x276>
 8001088:	eb1c 0404 	adds.w	r4, ip, r4
 800108c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001090:	d213      	bcs.n	80010ba <__udivmoddi4+0x296>
 8001092:	42a3      	cmp	r3, r4
 8001094:	d911      	bls.n	80010ba <__udivmoddi4+0x296>
 8001096:	3902      	subs	r1, #2
 8001098:	4464      	add	r4, ip
 800109a:	1ae4      	subs	r4, r4, r3
 800109c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010a0:	e739      	b.n	8000f16 <__udivmoddi4+0xf2>
 80010a2:	4604      	mov	r4, r0
 80010a4:	e6f0      	b.n	8000e88 <__udivmoddi4+0x64>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e706      	b.n	8000eb8 <__udivmoddi4+0x94>
 80010aa:	45c8      	cmp	r8, r9
 80010ac:	d2ae      	bcs.n	800100c <__udivmoddi4+0x1e8>
 80010ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80010b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80010b6:	3801      	subs	r0, #1
 80010b8:	e7a8      	b.n	800100c <__udivmoddi4+0x1e8>
 80010ba:	4631      	mov	r1, r6
 80010bc:	e7ed      	b.n	800109a <__udivmoddi4+0x276>
 80010be:	4603      	mov	r3, r0
 80010c0:	e799      	b.n	8000ff6 <__udivmoddi4+0x1d2>
 80010c2:	4630      	mov	r0, r6
 80010c4:	e7d4      	b.n	8001070 <__udivmoddi4+0x24c>
 80010c6:	46d6      	mov	lr, sl
 80010c8:	e77f      	b.n	8000fca <__udivmoddi4+0x1a6>
 80010ca:	4463      	add	r3, ip
 80010cc:	3802      	subs	r0, #2
 80010ce:	e74d      	b.n	8000f6c <__udivmoddi4+0x148>
 80010d0:	4606      	mov	r6, r0
 80010d2:	4623      	mov	r3, r4
 80010d4:	4608      	mov	r0, r1
 80010d6:	e70f      	b.n	8000ef8 <__udivmoddi4+0xd4>
 80010d8:	3e02      	subs	r6, #2
 80010da:	4463      	add	r3, ip
 80010dc:	e730      	b.n	8000f40 <__udivmoddi4+0x11c>
 80010de:	bf00      	nop

080010e0 <__aeabi_idiv0>:
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f2:	eef0 7ae7 	vabs.f32	s15, s15
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	ed87 0a01 	vstr	s0, [r7, #4]
 800110e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001112:	f019 f9b5 	bl	801a480 <expf>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
 800111a:	eeb0 0a67 	vmov.f32	s0, s15
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	ed87 0a01 	vstr	s0, [r7, #4]
 800112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001132:	eef0 7ae7 	vabs.f32	s15, s15
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_ZSt3logf>:
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	ed87 0a01 	vstr	s0, [r7, #4]
 800114e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001152:	f019 f9cb 	bl	801a4ec <logf>
 8001156:	eef0 7a40 	vmov.f32	s15, s0
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	ed87 0a01 	vstr	s0, [r7, #4]
 800116e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001172:	f019 fa5f 	bl	801a634 <sinf>
 8001176:	eef0 7a40 	vmov.f32	s15, s0
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	ed87 0a01 	vstr	s0, [r7, #4]
 800118e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001192:	f019 fa07 	bl	801a5a4 <sqrtf>
 8001196:	eef0 7a40 	vmov.f32	s15, s0
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80011ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b2:	fef8 7a67 	vrinta.f32	s15, s15
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	2203      	movs	r2, #3
 8001222:	4798      	blx	r3
    }
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf0c      	ite	eq
 800123e:	2301      	moveq	r3, #1
 8001240:	2300      	movne	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
 8001254:	bf00      	nop
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	7039      	strb	r1, [r7, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	7138      	strb	r0, [r7, #4]
 8001280:	bf00      	nop
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	fab3 f383 	clz	r3, r3
 800129c:	f1c3 031f 	rsb	r3, r3, #31
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80012c8:	4a17      	ldr	r2, [pc, #92]	@ (8001328 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80012ca:	2137      	movs	r1, #55	@ 0x37
 80012cc:	4817      	ldr	r0, [pc, #92]	@ (800132c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80012ce:	f01c f9dd 	bl	801d68c <__assert_func>

	if(align && size)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d01f      	beq.n	8001318 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d01c      	beq.n	8001318 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3301      	adds	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4413      	add	r3, r2
 80012ea:	2101      	movs	r1, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f016 f85f 	bl	80173b0 <_Z9ei_callocjj>
 80012f2:	60f8      	str	r0, [r7, #12]

		if(p)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00e      	beq.n	8001318 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	425b      	negs	r3, r3
 8001306:	4013      	ands	r3, r2
 8001308:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad2      	subs	r2, r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3b02      	subs	r3, #2
 8001314:	b292      	uxth	r2, r2
 8001316:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001318:	697b      	ldr	r3, [r7, #20]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	08020670 	.word	0x08020670
 8001328:	0802068c 	.word	0x0802068c
 800132c:	080206c4 	.word	0x080206c4

08001330 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001340:	4a0b      	ldr	r2, [pc, #44]	@ (8001370 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001342:	215a      	movs	r1, #90	@ 0x5a
 8001344:	480b      	ldr	r0, [pc, #44]	@ (8001374 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8001346:	f01c f9a1 	bl	801d68c <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001350:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	425b      	negs	r3, r3
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f016 f835 	bl	80173cc <_Z7ei_freePv>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	08020748 	.word	0x08020748
 8001370:	0802074c 	.word	0x0802074c
 8001374:	080206c4 	.word	0x080206c4

08001378 <_ZNSt14_Bit_referenceC1EPmm>:
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _GLIBCXX20_CONSTEXPR
    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <_ZNKSt14_Bit_referencecvbEv>:
#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    operator bool() const _GLIBCXX_NOEXCEPT
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf14      	ite	ne
 80013b6:	2301      	movne	r3, #1
 80013b8:	2300      	moveq	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_ZNSt14_Bit_referenceaSEb>:

    _GLIBCXX20_CONSTEXPR
    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e009      	b.n	8001402 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
      return *this;
 8001402:	687b      	ldr	r3, [r7, #4]
    }
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	}
    }

    _GLIBCXX20_CONSTEXPR
    void
    _M_incr(ptrdiff_t __i)
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	da00      	bge.n	8001456 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8001454:	331f      	adds	r3, #31
 8001456:	115b      	asrs	r3, r3, #5
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	441a      	add	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	425a      	negs	r2, r3
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	f002 021f 	and.w	r2, r2, #31
 800146c:	bf58      	it	pl
 800146e:	4253      	negpl	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	da07      	bge.n	8001488 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3320      	adds	r3, #32
 800147c:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	1f1a      	subs	r2, r3, #4
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	605a      	str	r2, [r3, #4]
    }
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_ZNSt13_Bit_iteratorC1Ev>:
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ffb1 	bl	8001410 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZNSt13_Bit_iteratorC1EPmj>:

    _GLIBCXX20_CONSTEXPR
    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffa0 	bl	8001410 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_ZNKSt13_Bit_iteratordeEv>:
    _M_const_cast() const
    { return *this; }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator*() const
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff3f 	bl	8001378 <_ZNSt14_Bit_referenceC1EPmm>
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_ZNSt13_Bit_iteratorpLEi>:
      return __tmp;
    }

    _GLIBCXX20_CONSTEXPR
    iterator&
    operator+=(difference_type __i)
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6839      	ldr	r1, [r7, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff90 	bl	8001436 <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8001516:	687b      	ldr	r3, [r7, #4]
    }
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_ZNKSt13_Bit_iteratorixEi>:
      return *this;
    }

    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    reference
    operator[](difference_type __i) const
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
    { return *(*this + __i); }
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f80b 	bl	8001550 <_ZStplRKSt13_Bit_iteratori>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f107 0210 	add.w	r2, r7, #16
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ffc9 	bl	80014da <_ZNKSt13_Bit_iteratordeEv>
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_ZStplRKSt13_Bit_iteratori>:

    _GLIBCXX_NODISCARD
    friend _GLIBCXX20_CONSTEXPR iterator
    operator+(const iterator& __x, difference_type __n)
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001564:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff ffc9 	bl	8001502 <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001570:	bf00      	nop
    }
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_ZSt16__fill_bvector_nPmjb>:
  // Fill N full words, as if using memset, but usable in constant expressions.
  __attribute__((__nonnull__))
  _GLIBCXX20_CONSTEXPR
  inline void
  __fill_bvector_n(_Bit_type* __p, size_t __n, bool __x) _GLIBCXX_NOEXCEPT
  {
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	4613      	mov	r3, r2
 8001586:	71fb      	strb	r3, [r7, #7]
      for (size_t __i = 0; __i < __n; ++__i)
	__p[__i] = __x ? ~0ul : 0ul;
      return;
    }
#endif
    __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <_ZSt16__fill_bvector_nPmjb+0x1a>
 800158e:	f04f 31ff 	mov.w	r1, #4294967295
 8001592:	e000      	b.n	8001596 <_ZSt16__fill_bvector_nPmjb+0x1c>
 8001594:	2100      	movs	r1, #0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	461a      	mov	r2, r3
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f01d f921 	bl	801e7e4 <memset>
  }
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	731a      	strb	r2, [r3, #12]
 80015ca:	e00e      	b.n	80015ea <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	2101      	movs	r1, #1
 80015d8:	4618      	mov	r0, r3
 80015da:	f015 fee9 	bl	80173b0 <_Z9ei_callocjj>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2201      	movs	r2, #1
 80015e8:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7b1b      	ldrb	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f015 fed5 	bl	80173cc <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	fb01 f303 	mul.w	r3, r1, r3
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
    }
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	ed87 0a01 	vstr	s0, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001668:	edd7 7a05 	vldr	s15, [r7, #20]
 800166c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	db09      	blt.n	800168a <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001676:	ed97 0a05 	vldr	s0, [r7, #20]
 800167a:	f018 ff93 	bl	801a5a4 <sqrtf>
 800167e:	eef0 7a40 	vmov.f32	s15, s0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001688:	e004      	b.n	8001694 <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001692:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN2ei5numpy3sumEPfj>:
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(int16_t));

        return EIDSP_OK;
    }

    static float sum(float *input_array, size_t input_array_size) {
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	e00e      	b.n	80016d8 <_ZN2ei5numpy3sumEPfj+0x34>
            res += input_array[ix];
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ce:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3301      	adds	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3ec      	bcc.n	80016ba <_ZN2ei5numpy3sumEPfj+0x16>
        }
        return res;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	ee07 3a90 	vmov	s15, r3
    }
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b096      	sub	sp, #88	@ 0x58
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6852      	ldr	r2, [r2, #4]
 8001704:	fb02 f303 	mul.w	r3, r2, r3
 8001708:	3b01      	subs	r3, #1
 800170a:	64bb      	str	r3, [r7, #72]	@ 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 800170c:	2301      	movs	r3, #1
 800170e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        ei_vector<bool> done(size+1,false);
 8001710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001712:	1c59      	adds	r1, r3, #1
 8001714:	2300      	movs	r3, #0
 8001716:	77fb      	strb	r3, [r7, #31]
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	f107 021f 	add.w	r2, r7, #31
 8001720:	f107 0008 	add.w	r0, r7, #8
 8001724:	f008 fa57 	bl	8009bd6 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001728:	2301      	movs	r3, #1
 800172a:	653b      	str	r3, [r7, #80]	@ 0x50
        while (1)
        {
            cycleBegin = i;
 800172c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800172e:	647b      	str	r3, [r7, #68]	@ 0x44
            temp = matrix->buffer[i];
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	657b      	str	r3, [r7, #84]	@ 0x54
            do
            {
                size_t col = i % matrix->cols;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001744:	fbb3 f1f2 	udiv	r1, r3, r2
 8001748:	fb01 f202 	mul.w	r2, r1, r2
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	643b      	str	r3, [r7, #64]	@ 0x40
                size_t row = i / matrix->cols;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001768:	4413      	add	r3, r2
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38
                float temp2 = matrix->buffer[next];
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	637b      	str	r3, [r7, #52]	@ 0x34
                matrix->buffer[next] = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001786:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800178a:	657b      	str	r3, [r7, #84]	@ 0x54
                done[next] = true;
 800178c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001796:	4618      	mov	r0, r3
 8001798:	f008 fa45 	bl	8009c26 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 800179c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a0:	2101      	movs	r1, #1
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe10 	bl	80013c8 <_ZNSt14_Bit_referenceaSEb>
                i = next;
 80017a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017aa:	653b      	str	r3, [r7, #80]	@ 0x50
            }
            while (i != cycleBegin);
 80017ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d1c4      	bne.n	800173e <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 80017b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80017b8:	e009      	b.n	80017ce <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xda>
                all_done_mark++; // move the high water mark so we don't look again
 80017ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017bc:	3301      	adds	r3, #1
 80017be:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if(i>=size) { goto LOOP_END; }
 80017c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d213      	bcs.n	80017f0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 80017c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017ca:	3301      	adds	r3, #1
 80017cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80017ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017d2:	f107 0108 	add.w	r1, r7, #8
 80017d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017d8:	4618      	mov	r0, r3
 80017da:	f008 fa24 	bl	8009c26 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 80017de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fddb 	bl	800139e <_ZNKSt14_Bit_referencecvbEv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1e5      	bne.n	80017ba <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
            }
        }
 80017ee:	e79d      	b.n	800172c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                if(i>=size) { goto LOOP_END; }
 80017f0:	bf00      	nop
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	1d1a      	adds	r2, r3, #4
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3308      	adds	r3, #8
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f008 fa2a 	bl	8009c56 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4618      	mov	r0, r3
 8001808:	f008 fa00 	bl	8009c0c <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
 800180c:	3758      	adds	r7, #88	@ 0x58
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	4619      	mov	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	461a      	mov	r2, r3
 800182a:	f000 f817 	bl	800185c <_ZN2ei5numpy9transposeEPfii>
 800182e:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	e00c      	b.n	8001854 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001846:	893a      	ldrh	r2, [r7, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 800184c:	897a      	ldrh	r2, [r7, #10]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 8001852:	2300      	movs	r3, #0
    }
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b08f      	sub	sp, #60	@ 0x3c
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001870:	2300      	movs	r3, #0
 8001872:	f7ff fe9a 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <_ZN2ei5numpy9transposeEPfii+0x24>
 800187c:	4c23      	ldr	r4, [pc, #140]	@ (800190c <_ZN2ei5numpy9transposeEPfii+0xb0>)
 800187e:	e03b      	b.n	80018f8 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001886:	4c21      	ldr	r4, [pc, #132]	@ (800190c <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001888:	e036      	b.n	80018f8 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001890:	da03      	bge.n	800189a <_ZN2ei5numpy9transposeEPfii+0x3e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001898:	db01      	blt.n	800189e <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 800189a:	4c1d      	ldr	r4, [pc, #116]	@ (8001910 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 800189c:	e02c      	b.n	80018f8 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	83bb      	strh	r3, [r7, #28]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	83fb      	strh	r3, [r7, #30]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	82bb      	strh	r3, [r7, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        };
 80018bc:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 80018be:	f107 0214 	add.w	r2, r7, #20
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f011 fbde 	bl	801308a <arm_mat_trans_f32>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (status != ARM_MATH_SUCCESS) {
 80018d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 80018dc:	f997 4037 	ldrsb.w	r4, [r7, #55]	@ 0x37
 80018e0:	e00a      	b.n	80018f8 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 80018e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	fb02 f303 	mul.w	r3, r2, r3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	461a      	mov	r2, r3
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f01d f858 	bl	801e9a6 <memcpy>

        return EIDSP_OK;
 80018f6:	2400      	movs	r4, #0
    }
 80018f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fe7f 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8001902:	4623      	mov	r3, r4
 8001904:	4618      	mov	r0, r3
 8001906:	373c      	adds	r7, #60	@ 0x3c
 8001908:	46bd      	mov	sp, r7
 800190a:	bd90      	pop	{r4, r7, pc}
 800190c:	fffffc16 	.word	0xfffffc16
 8001910:	fffffc0c 	.word	0xfffffc0c

08001914 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001920:	edd7 7a00 	vldr	s15, [r7]
 8001924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001928:	eef4 7a47 	vcmp.f32	s15, s14
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	d101      	bne.n	8001936 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001932:	2300      	movs	r3, #0
 8001934:	e033      	b.n	800199e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800193e:	d204      	bcs.n	800194a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001948:	d301      	bcc.n	800194e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 800194c:	e027      	b.n	800199e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	b29b      	uxth	r3, r3
 8001954:	82bb      	strh	r3, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	b29b      	uxth	r3, r3
 800195c:	82fb      	strh	r3, [r7, #22]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	b29b      	uxth	r3, r3
 800196a:	81bb      	strh	r3, [r7, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	b29b      	uxth	r3, r3
 8001972:	81fb      	strh	r3, [r7, #14]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 800197a:	f107 020c 	add.w	r2, r7, #12
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4611      	mov	r1, r2
 8001984:	ed97 0a00 	vldr	s0, [r7]
 8001988:	4618      	mov	r0, r3
 800198a:	f011 fb48 	bl	801301e <arm_mat_scale_f32>
 800198e:	4603      	mov	r3, r0
 8001990:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	e000      	b.n	800199e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 800199c:	2300      	movs	r3, #0
    }
 800199e:	4618      	mov	r0, r3
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	fffffc0c 	.word	0xfffffc0c

080019ac <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e014      	b.n	80019e8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x3c>
            matrix->buffer[ix] -= subtraction;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	ed93 7a00 	vldr	s14, [r3]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	edd7 7a00 	vldr	s15, [r7]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6892      	ldr	r2, [r2, #8]
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3e1      	bcc.n	80019be <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x12>
        }
        return EIDSP_OK;
 80019fa:	2300      	movs	r3, #0
    }
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d001      	beq.n	8001a22 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a1e:	4c26      	ldr	r4, [pc, #152]	@ (8001ab8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001a20:	e045      	b.n	8001aae <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d001      	beq.n	8001a2e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a2a:	4c23      	ldr	r4, [pc, #140]	@ (8001ab8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001a2c:	e03f      	b.n	8001aae <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e036      	b.n	8001aa2 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x9a>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689d      	ldr	r5, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	69f9      	ldr	r1, [r7, #28]
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	f107 0008 	add.w	r0, r7, #8
 8001a4e:	462a      	mov	r2, r5
 8001a50:	2101      	movs	r1, #1
 8001a52:	f7ff fdaa 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5a>
 8001a5c:	4c17      	ldr	r4, [pc, #92]	@ (8001abc <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001a5e:	2500      	movs	r5, #0
 8001a60:	e015      	b.n	8001a8e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff97 	bl	80019ac <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001a7e:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x84>
                EIDSP_ERR(ret);
 8001a86:	69bc      	ldr	r4, [r7, #24]
 8001a88:	2500      	movs	r5, #0
 8001a8a:	e000      	b.n	8001a8e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            }
        }
 8001a8c:	2501      	movs	r5, #1
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fdb4 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8001a98:	2d01      	cmp	r5, #1
 8001a9a:	d108      	bne.n	8001aae <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d3c3      	bcc.n	8001a34 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2c>

        return EIDSP_OK;
 8001aac:	2400      	movs	r4, #0
    }
 8001aae:	4623      	mov	r3, r4
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab8:	fffffc14 	.word	0xfffffc14
 8001abc:	fffffc16 	.word	0xfffffc16

08001ac0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d001      	beq.n	8001ada <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ad6:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ad8:	e028      	b.n	8001b2c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d001      	beq.n	8001ae6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ae4:	e022      	b.n	8001b2c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e019      	b.n	8001b20 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	18d0      	adds	r0, r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f107 0208 	add.w	r2, r7, #8
 8001b06:	4619      	mov	r1, r3
 8001b08:	f011 fb2f 	bl	801316a <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d3e0      	bcc.n	8001aec <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2c>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001b2a:	2300      	movs	r3, #0
    }
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	fffffc14 	.word	0xfffffc14

08001b38 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b4e:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001b50:	e028      	b.n	8001ba4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001b5c:	e022      	b.n	8001ba4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	e019      	b.n	8001b98 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	18d0      	adds	r0, r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f107 0208 	add.w	r2, r7, #8
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f011 fac4 	bl	801310c <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3e0      	bcc.n	8001b64 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001ba2:	2300      	movs	r3, #0
    }
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	fffffc14 	.word	0xfffffc14

08001bb0 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    /**
     * Get the stdev value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bc6:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001bc8:	e043      	b.n	8001c52 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }
        if (output_matrix->cols != 1) {
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bd2:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001bd4:	e03d      	b.n	8001c52 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e034      	b.n	8001c46 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x96>
#if EIDSP_USE_CMSIS_DSP
            float std;
            float var;
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	69f9      	ldr	r1, [r7, #28]
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	18d0      	adds	r0, r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f107 020c 	add.w	r2, r7, #12
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f000 fc96 	bl	8002528 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001c06:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	db09      	blt.n	8001c28 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x78>
      *pOut = sqrtf(in);
 8001c14:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c18:	f018 fcc4 	bl	801a5a4 <sqrtf>
 8001c1c:	eef0 7a40 	vmov.f32	s15, s0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001c26:	e004      	b.n	8001c32 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x82>
      *pOut = 0.0f;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001c30:	bf00      	nop
            output_matrix->buffer[row] = std;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d3c5      	bcc.n	8001bdc <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sqrt(std / input_matrix->cols);
#endif
        }

        return EIDSP_OK;
 8001c50:	2300      	movs	r3, #0
    }
 8001c52:	4618      	mov	r0, r3
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	fffffc14 	.word	0xfffffc14

08001c60 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    /**
     * Get the skewness value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c76:	4b47      	ldr	r3, [pc, #284]	@ (8001d94 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001c78:	e087      	b.n	8001d8a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }
        if (output_matrix->cols != 1) {
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d001      	beq.n	8001c86 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c82:	4b44      	ldr	r3, [pc, #272]	@ (8001d94 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001c84:	e081      	b.n	8001d8a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e078      	b.n	8001d7e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x11e>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate the mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	69f9      	ldr	r1, [r7, #28]
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	18d0      	adds	r0, r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f107 0210 	add.w	r2, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f011 fa30 	bl	801310c <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	69f9      	ldr	r1, [r7, #28]
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	18d0      	adds	r0, r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f107 020c 	add.w	r2, r7, #12
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f000 fc2e 	bl	8002528 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_3
            float m_3;
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	69f9      	ldr	r1, [r7, #28]
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	18d0      	adds	r0, r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce6:	f107 0208 	add.w	r2, r7, #8
 8001cea:	eeb0 0a67 	vmov.f32	s0, s15
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f000 fd18 	bl	8002724 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>

            // Calculate (variance)^(3/2)
            arm_sqrt_f32(var * var * var, &var);
 8001cf4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d08:	edc7 7a06 	vstr	s15, [r7, #24]
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001d12:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	db09      	blt.n	8001d34 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xd4>
      *pOut = sqrtf(in);
 8001d20:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d24:	f018 fc3e 	bl	801a5a4 <sqrtf>
 8001d28:	eef0 7a40 	vmov.f32	s15, s0
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001d32:	e004      	b.n	8001d3e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xde>
      *pOut = 0.0f;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d3c:	bf00      	nop

            // Calculate skew = (m_3) / (variance)^(3/2)
            if (var == 0.0f) {
 8001d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	d108      	bne.n	8001d5e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xfe>
                output_matrix->buffer[row] = 0.0f;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e00c      	b.n	8001d78 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x118>
            } else {
                output_matrix->buffer[row] = m_3 / var;
 8001d5e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d62:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d74:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d381      	bcc.n	8001c8c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = m_3 / m_2;
            }
#endif
        }

        return EIDSP_OK;
 8001d88:	2300      	movs	r3, #0
    }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	fffffc14 	.word	0xfffffc14

08001d98 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    /**
     * Get the kurtosis value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d001      	beq.n	8001db2 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001dae:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001db0:	e06d      	b.n	8001e8e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }
        if (output_matrix->cols != 1) {
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001dba:	4b37      	ldr	r3, [pc, #220]	@ (8001e98 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001dbc:	e067      	b.n	8001e8e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e05e      	b.n	8001e82 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xea>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	6979      	ldr	r1, [r7, #20]
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	18d0      	adds	r0, r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f107 0210 	add.w	r2, r7, #16
 8001dde:	4619      	mov	r1, r3
 8001de0:	f011 f994 	bl	801310c <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	6979      	ldr	r1, [r7, #20]
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	18d0      	adds	r0, r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f107 020c 	add.w	r2, r7, #12
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f000 fb92 	bl	8002528 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_4
            float m_4;
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	18d0      	adds	r0, r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e1e:	f107 0208 	add.w	r2, r7, #8
 8001e22:	eeb0 0a67 	vmov.f32	s0, s15
 8001e26:	4619      	mov	r1, r3
 8001e28:	f000 fd37 	bl	800289a <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>

            // Calculate Fisher kurtosis = (m_4 / variance^2) - 3
            var = var * var;
 8001e2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e38:	edc7 7a03 	vstr	s15, [r7, #12]
            if (var == 0.0f) {
 8001e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d107      	bne.n	8001e5a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xc2>
                output_matrix->buffer[row] = -3.0f;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	4a11      	ldr	r2, [pc, #68]	@ (8001e9c <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x104>)
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e010      	b.n	8001e7c <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xe4>
            } else {
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 8001e5a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e78:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d39b      	bcc.n	8001dc4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = (m_4 / variance) - 3.0f;
            }
#endif
        }

        return EIDSP_OK;
 8001e8c:	2300      	movs	r3, #0
    }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	fffffc14 	.word	0xfffffc14
 8001e9c:	c0400000 	.word	0xc0400000

08001ea0 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b098      	sub	sp, #96	@ 0x60
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	657b      	str	r3, [r7, #84]	@ 0x54
        if (output_size != n_fft_out_features) {
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d001      	beq.n	8001ec2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001ebe:	4c65      	ldr	r4, [pc, #404]	@ (8002054 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001ec0:	e0c2      	b.n	8002048 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d901      	bls.n	8001ece <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001eca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ecc:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001ece:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	f7ff fb67 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8001edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001ee2:	4c5d      	ldr	r4, [pc, #372]	@ (8002058 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001ee4:	e0ab      	b.n	800203e <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001eec:	4c5a      	ldr	r4, [pc, #360]	@ (8002058 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001eee:	e0a6      	b.n	800203e <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001ef0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	f01c fd54 	bl	801e9a6 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001efe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	18d0      	adds	r0, r2, r3
 8001f06:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2100      	movs	r1, #0
 8001f12:	f01c fc67 	bl	801e7e4 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001f16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d025      	beq.n	8001f68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f1e:	2b40      	cmp	r3, #64	@ 0x40
 8001f20:	d022      	beq.n	8001f68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f24:	2b80      	cmp	r3, #128	@ 0x80
 8001f26:	d01f      	beq.n	8001f68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f2e:	d01b      	beq.n	8001f68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f36:	d017      	beq.n	8001f68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001f38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f3e:	d013      	beq.n	8001f68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f46:	d00f      	beq.n	8001f68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f4e:	d00b      	beq.n	8001f68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f54:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f000 fa4e 	bl	80023f8 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001f5c:	6538      	str	r0, [r7, #80]	@ 0x50
            if (ret != EIDSP_OK) {
 8001f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d068      	beq.n	8002036 <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8001f64:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8001f66:	e06a      	b.n	800203e <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fd58 	bl	8002a24 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001f74:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8001f7c:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001f7e:	e05d      	b.n	800203c <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001f80:	f107 0014 	add.w	r0, r7, #20
 8001f84:	2300      	movs	r3, #0
 8001f86:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001f88:	2101      	movs	r1, #1
 8001f8a:	f7ff fb0e 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8001f94:	4c30      	ldr	r4, [pc, #192]	@ (8002058 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001f96:	2500      	movs	r5, #0
 8001f98:	e045      	b.n	8002026 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001fa0:	4c2d      	ldr	r4, [pc, #180]	@ (8002058 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001fa2:	2500      	movs	r5, #0
 8001fa4:	e03f      	b.n	8002026 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001fa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f013 fc78 	bl	80158a4 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fc0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001fc4:	440b      	add	r3, r1
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	440b      	add	r3, r1
 8001fcc:	6852      	ldr	r2, [r2, #4]
 8001fce:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fd8:	e01f      	b.n	800201a <_ZN2ei5numpy4rfftEPKfjPfjj+0x17a>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f107 0210 	add.w	r2, r7, #16
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f011 f8be 	bl	801316a <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001fee:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001ff2:	f7ff fb2f 	bl	8001654 <_ZN2ei5numpy4sqrtEf>
 8001ff6:	eeb0 7a40 	vmov.f32	s14, s0
 8001ffa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200a:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 800200e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002010:	3302      	adds	r3, #2
 8002012:	65fb      	str	r3, [r7, #92]	@ 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8002014:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002016:	3301      	adds	r3, #1
 8002018:	65bb      	str	r3, [r7, #88]	@ 0x58
 800201a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201c:	3b01      	subs	r3, #1
 800201e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002020:	429a      	cmp	r2, r3
 8002022:	d3da      	bcc.n	8001fda <_ZN2ei5numpy4rfftEPKfjPfjj+0x13a>
            }
        }
 8002024:	2501      	movs	r5, #1
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fae8 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8002030:	2d01      	cmp	r5, #1
 8002032:	d103      	bne.n	800203c <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8002034:	e000      	b.n	8002038 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
        }
 8002036:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002038:	2400      	movs	r4, #0
 800203a:	e000      	b.n	800203e <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 800203c:	bf00      	nop
    }
 800203e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fadc 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8002048:	4623      	mov	r3, r4
 800204a:	4618      	mov	r0, r3
 800204c:	3760      	adds	r7, #96	@ 0x60
 800204e:	46bd      	mov	sp, r7
 8002050:	bdb0      	pop	{r4, r5, r7, pc}
 8002052:	bf00      	nop
 8002054:	fffffc11 	.word	0xfffffc11
 8002058:	fffffc16 	.word	0xfffffc16

0800205c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b098      	sub	sp, #96	@ 0x60
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 800206a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800206c:	085b      	lsrs	r3, r3, #1
 800206e:	3301      	adds	r3, #1
 8002070:	653b      	str	r3, [r7, #80]	@ 0x50
        if (output_size != n_fft_out_features) {
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002076:	429a      	cmp	r2, r3
 8002078:	d001      	beq.n	800207e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 800207a:	4c6f      	ldr	r4, [pc, #444]	@ (8002238 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 800207c:	e0d6      	b.n	800222c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002082:	429a      	cmp	r2, r3
 8002084:	d901      	bls.n	800208a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8002086:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002088:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 800208a:	2300      	movs	r3, #0
 800208c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (src_size == n_fft) {
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002092:	429a      	cmp	r2, r3
 8002094:	d101      	bne.n	800209a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 800209a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800209e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020a0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80020a2:	2101      	movs	r1, #1
 80020a4:	f7ff fa81 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 80020a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 80020ae:	4c63      	ldr	r4, [pc, #396]	@ (800223c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80020b0:	e0b7      	b.n	8002222 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 80020b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80020b8:	4c60      	ldr	r4, [pc, #384]	@ (800223c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80020ba:	e0b2      	b.n	8002222 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 80020bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d112      	bne.n	80020e8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 80020c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	461a      	mov	r2, r3
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	f01c fc6b 	bl	801e9a6 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 80020d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	18d0      	adds	r0, r2, r3
 80020d8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	461a      	mov	r2, r3
 80020e2:	2100      	movs	r1, #0
 80020e4:	f01c fb7e 	bl	801e7e4 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80020e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d025      	beq.n	800213a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020f0:	2b40      	cmp	r3, #64	@ 0x40
 80020f2:	d022      	beq.n	800213a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020f6:	2b80      	cmp	r3, #128	@ 0x80
 80020f8:	d01f      	beq.n	800213a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002100:	d01b      	beq.n	800213a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002108:	d017      	beq.n	800213a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 800210a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002110:	d013      	beq.n	800213a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002112:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002118:	d00f      	beq.n	800213a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800211a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800211c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002120:	d00b      	beq.n	800213a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8002122:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002126:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	f000 f9d7 	bl	80024dc <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 800212e:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if (ret != EIDSP_OK) {
 8002130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d071      	beq.n	800221a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8002136:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8002138:	e073      	b.n	8002222 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 800213a:	f107 0320 	add.w	r3, r7, #32
 800213e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fc6f 	bl	8002a24 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002146:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (status != ARM_MATH_SUCCESS) {
 8002148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 800214e:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8002150:	e066      	b.n	8002220 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8002152:	f107 0010 	add.w	r0, r7, #16
 8002156:	2300      	movs	r3, #0
 8002158:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800215a:	2101      	movs	r1, #1
 800215c:	f7ff fa25 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8002166:	4c35      	ldr	r4, [pc, #212]	@ (800223c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002168:	2500      	movs	r5, #0
 800216a:	e04e      	b.n	800220a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002172:	4c32      	ldr	r4, [pc, #200]	@ (800223c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002174:	2500      	movs	r5, #0
 8002176:	e048      	b.n	800220a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002178:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	f107 0020 	add.w	r0, r7, #32
 8002180:	2300      	movs	r3, #0
 8002182:	f013 fb8f 	bl	80158a4 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800219a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800219e:	440b      	add	r3, r1
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	440b      	add	r3, r1
 80021a6:	6852      	ldr	r2, [r2, #4]
 80021a8:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 80021aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80021ac:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 80021be:	2302      	movs	r3, #2
 80021c0:	65bb      	str	r3, [r7, #88]	@ 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80021c2:	2301      	movs	r3, #1
 80021c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80021c6:	e01a      	b.n	80021fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1a2>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	440b      	add	r3, r1
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021e0:	3301      	adds	r3, #1
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	440b      	add	r3, r1
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80021f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021f4:	3302      	adds	r3, #2
 80021f6:	65bb      	str	r3, [r7, #88]	@ 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80021f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fa:	3301      	adds	r3, #1
 80021fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80021fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002200:	3b01      	subs	r3, #1
 8002202:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002204:	429a      	cmp	r2, r3
 8002206:	d3df      	bcc.n	80021c8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16c>
            }
        }
 8002208:	2501      	movs	r5, #1
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f9f6 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8002214:	2d01      	cmp	r5, #1
 8002216:	d103      	bne.n	8002220 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8002218:	e000      	b.n	800221c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
        }
 800221a:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 800221c:	2400      	movs	r4, #0
 800221e:	e000      	b.n	8002222 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 8002220:	bf00      	nop
    }
 8002222:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f9ea 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 800222c:	4623      	mov	r3, r4
 800222e:	4618      	mov	r0, r3
 8002230:	3760      	adds	r7, #96	@ 0x60
 8002232:	46bd      	mov	sp, r7
 8002234:	bdb0      	pop	{r4, r5, r7, pc}
 8002236:	bf00      	nop
 8002238:	fffffc11 	.word	0xfffffc11
 800223c:	fffffc16 	.word	0xfffffc16

08002240 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	ed87 0a03 	vstr	s0, [r7, #12]
 800224a:	edc7 0a02 	vstr	s1, [r7, #8]
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800225e:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8002260:	e03f      	b.n	80022e2 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d104      	bne.n	8002272 <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e037      	b.n	80022e2 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8002272:	ed97 7a02 	vldr	s14, [r7, #8]
 8002276:	edd7 7a03 	vldr	s15, [r7, #12]
 800227a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3b01      	subs	r3, #1
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800228a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228e:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e015      	b.n	80022c4 <_ZN2ei5numpy8linspaceEffmPf+0x84>
            out[ix] = start + ix * step;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ba:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d3e4      	bcc.n	8002298 <_ZN2ei5numpy8linspaceEffmPf+0x58>
        }

        // last entry always stop
        out[number - 1] = stop;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80022e0:	2300      	movs	r3, #0
    }
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	fffffc10 	.word	0xfffffc10

080022f4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	e062      	b.n	80023c8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xd4>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6811      	ldr	r1, [r2, #0]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	0092      	lsls	r2, r2, #2
 8002316:	188c      	adds	r4, r1, r2
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 800231e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002322:	eef0 7ae7 	vabs.f32	s15, s15
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	4618      	mov	r0, r3
 800232c:	eeb0 0a67 	vmov.f32	s0, s15
 8002330:	f018 f956 	bl	801a5e0 <frexpf>
 8002334:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002338:	4b2a      	ldr	r3, [pc, #168]	@ (80023e4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 800233a:	60fb      	str	r3, [r7, #12]
        y *= f;
 800233c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002340:	edd7 7a04 	vldr	s15, [r7, #16]
 8002344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002348:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 800234c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002350:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80023e8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 8002354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002358:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 800235c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002360:	edd7 7a04 	vldr	s15, [r7, #16]
 8002364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002368:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 800236c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002370:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80023ec <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 8002374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002378:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 800237c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002380:	edd7 7a04 	vldr	s15, [r7, #16]
 8002384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002388:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 800238c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002390:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80023f0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 8002394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002398:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 80023b2:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 80023b6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80023f4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 80023ba:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80023be:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6892      	ldr	r2, [r2, #8]
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d393      	bcc.n	8002302 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe>
        }

        return EIDSP_OK;
 80023da:	2300      	movs	r3, #0
    }
 80023dc:	4618      	mov	r0, r3
 80023de:	3724      	adds	r7, #36	@ 0x24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}
 80023e4:	3f9da1a8 	.word	0x3f9da1a8
 80023e8:	4083caf5 	.word	0x4083caf5
 80023ec:	40c0b3fb 	.word	0x40c0b3fb
 80023f0:	404892e0 	.word	0x404892e0
 80023f4:	3e9a209b 	.word	0x3e9a209b

080023f8 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b08a      	sub	sp, #40	@ 0x28
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4618      	mov	r0, r3
 800240c:	f014 ffc4 	bl	8017398 <_Z9ei_mallocj>
 8002410:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002418:	4b2f      	ldr	r3, [pc, #188]	@ (80024d8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800241a:	e058      	b.n	80024ce <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f107 0310 	add.w	r3, r7, #16
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	f014 fc09 	bl	8016c40 <kiss_fftr_alloc>
 800242e:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002436:	69b8      	ldr	r0, [r7, #24]
 8002438:	f014 ffc8 	bl	80173cc <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800243c:	4b26      	ldr	r3, [pc, #152]	@ (80024d8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800243e:	e046      	b.n	80024ce <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f014 fd1f 	bl	8016e88 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e033      	b.n	80024b8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc0>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4413      	add	r3, r2
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	2002      	movs	r0, #2
 800245e:	eeb0 0a67 	vmov.f32	s0, s15
 8002462:	f007 fc17 	bl	8009c94 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002466:	ec55 4b10 	vmov	r4, r5, d0
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4413      	add	r3, r2
 8002472:	edd3 7a01 	vldr	s15, [r3, #4]
 8002476:	2002      	movs	r0, #2
 8002478:	eeb0 0a67 	vmov.f32	s0, s15
 800247c:	f007 fc0a 	bl	8009c94 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002480:	ec53 2b10 	vmov	r2, r3, d0
 8002484:	4620      	mov	r0, r4
 8002486:	4629      	mov	r1, r5
 8002488:	f7fd ff30 	bl	80002ec <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f7fe fbd8 	bl	8000c48 <__aeabi_d2f>
 8002498:	4601      	mov	r1, r0
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	18d4      	adds	r4, r2, r3
 80024a2:	ee00 1a10 	vmov	s0, r1
 80024a6:	f7ff f8d5 	bl	8001654 <_ZN2ei5numpy4sqrtEf>
 80024aa:	eef0 7a40 	vmov.f32	s15, s0
 80024ae:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3c7      	bcc.n	8002450 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x58>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80024c0:	6978      	ldr	r0, [r7, #20]
 80024c2:	f014 ff83 	bl	80173cc <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80024c6:	69b8      	ldr	r0, [r7, #24]
 80024c8:	f014 ff80 	bl	80173cc <_Z7ei_freePv>

        return EIDSP_OK;
 80024cc:	2300      	movs	r3, #0
    }
 80024ce:	4618      	mov	r0, r3
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bdb0      	pop	{r4, r5, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	fffffc16 	.word	0xfffffc16

080024dc <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2300      	movs	r3, #0
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	f014 fba2 	bl	8016c40 <kiss_fftr_alloc>
 80024fc:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002504:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8002506:	e008      	b.n	800251a <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	68f9      	ldr	r1, [r7, #12]
 800250c:	6978      	ldr	r0, [r7, #20]
 800250e:	f014 fcbb 	bl	8016e88 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f014 ff5a 	bl	80173cc <_Z7ei_freePv>

        return EIDSP_OK;
 8002518:	2300      	movs	r3, #0
    }
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	fffffc16 	.word	0xfffffc16

08002528 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 8002528:	b480      	push	{r7}
 800252a:	b08b      	sub	sp, #44	@ 0x2c
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d804      	bhi.n	8002554 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
            return;
 8002552:	e0e2      	b.n	800271a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24

        while (blkCnt > 0U) {
 800255a:	e02e      	b.n	80025ba <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x92>
            sum += *pInput++;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	1d1a      	adds	r2, r3, #4
 8002560:	61ba      	str	r2, [r7, #24]
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ed97 7a08 	vldr	s14, [r7, #32]
 800256a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256e:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	1d1a      	adds	r2, r3, #4
 8002576:	61ba      	str	r2, [r7, #24]
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002584:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	1d1a      	adds	r2, r3, #4
 800258c:	61ba      	str	r2, [r7, #24]
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	ed97 7a08 	vldr	s14, [r7, #32]
 8002596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259a:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	1d1a      	adds	r2, r3, #4
 80025a2:	61ba      	str	r2, [r7, #24]
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80025ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b0:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	3b01      	subs	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (blkCnt > 0U) {
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1cd      	bne.n	800255c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x34>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24

        while (blkCnt > 0U) {
 80025c8:	e00d      	b.n	80025e6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xbe>
            sum += *pInput++;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	1d1a      	adds	r2, r3, #4
 80025ce:	61ba      	str	r2, [r7, #24]
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80025d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025dc:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	3b01      	subs	r3, #1
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (blkCnt > 0U) {
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ee      	bne.n	80025ca <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa2>
        }

        fMean = sum / (float32_t)blockSize;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025f6:	edd7 6a08 	vldr	s13, [r7, #32]
 80025fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025fe:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24

        while (blkCnt > 0U) {
 800260c:	e056      	b.n	80026bc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x194>
            fValue = *pInput++ - fMean;
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	1d1a      	adds	r2, r3, #4
 8002612:	61ba      	str	r2, [r7, #24]
 8002614:	ed93 7a00 	vldr	s14, [r3]
 8002618:	edd7 7a05 	vldr	s15, [r7, #20]
 800261c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002620:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002624:	edd7 7a04 	vldr	s15, [r7, #16]
 8002628:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800262c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002634:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1d1a      	adds	r2, r3, #4
 800263c:	61ba      	str	r2, [r7, #24]
 800263e:	ed93 7a00 	vldr	s14, [r3]
 8002642:	edd7 7a05 	vldr	s15, [r7, #20]
 8002646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264a:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800264e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002652:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002656:	ed97 7a07 	vldr	s14, [r7, #28]
 800265a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265e:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1d1a      	adds	r2, r3, #4
 8002666:	61ba      	str	r2, [r7, #24]
 8002668:	ed93 7a00 	vldr	s14, [r3]
 800266c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002674:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002678:	edd7 7a04 	vldr	s15, [r7, #16]
 800267c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002680:	ed97 7a07 	vldr	s14, [r7, #28]
 8002684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002688:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1d1a      	adds	r2, r3, #4
 8002690:	61ba      	str	r2, [r7, #24]
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	edd7 7a05 	vldr	s15, [r7, #20]
 800269a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269e:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80026a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80026ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b2:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	3b01      	subs	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
        while (blkCnt > 0U) {
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1a5      	bne.n	800260e <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe6>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24

        while (blkCnt > 0U) {
 80026ca:	e017      	b.n	80026fc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1d4>
            fValue = *pInput++ - fMean;
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	1d1a      	adds	r2, r3, #4
 80026d0:	61ba      	str	r2, [r7, #24]
 80026d2:	ed93 7a00 	vldr	s14, [r3]
 80026d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026de:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80026e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80026e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80026ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f2:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	3b01      	subs	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
        while (blkCnt > 0U) {
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1e4      	bne.n	80026cc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a4>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800270c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	edc3 7a00 	vstr	s15, [r3]
    }
 800271a:	372c      	adds	r7, #44	@ 0x2c
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before cubing
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	@ 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002732:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 8002740:	e06e      	b.n	8002820 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0xfc>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1d1a      	adds	r2, r3, #4
 8002746:	60fa      	str	r2, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	617b      	str	r3, [r7, #20]
            in = in - mean;
 800274c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002750:	edd7 7a01 	vldr	s15, [r7, #4]
 8002754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002758:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 800275c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002760:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002764:	edd7 7a05 	vldr	s15, [r7, #20]
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1d1a      	adds	r2, r3, #4
 800277c:	60fa      	str	r2, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002782:	ed97 7a05 	vldr	s14, [r7, #20]
 8002786:	edd7 7a01 	vldr	s15, [r7, #4]
 800278a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278e:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002792:	edd7 7a05 	vldr	s15, [r7, #20]
 8002796:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800279a:	edd7 7a05 	vldr	s15, [r7, #20]
 800279e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80027a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027aa:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1d1a      	adds	r2, r3, #4
 80027b2:	60fa      	str	r2, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80027b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80027bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c4:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80027c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80027dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e0:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1d1a      	adds	r2, r3, #4
 80027e8:	60fa      	str	r2, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80027ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80027f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fa:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80027fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002802:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002806:	edd7 7a05 	vldr	s15, [r7, #20]
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002816:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b01      	subs	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d18d      	bne.n	8002742 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 800282e:	e01d      	b.n	800286c <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x148>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1d1a      	adds	r2, r3, #4
 8002834:	60fa      	str	r2, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	617b      	str	r3, [r7, #20]
            in = in - mean;
 800283a:	ed97 7a05 	vldr	s14, [r7, #20]
 800283e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002846:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 800284a:	edd7 7a05 	vldr	s15, [r7, #20]
 800284e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002852:	edd7 7a05 	vldr	s15, [r7, #20]
 8002856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285a:	ed97 7a06 	vldr	s14, [r7, #24]
 800285e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002862:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3b01      	subs	r3, #1
 800286a:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1de      	bne.n	8002830 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x10c>
        }

        sum = sum / blockSize;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800287c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002884:	edc7 7a06 	vstr	s15, [r7, #24]
        /* Store result to destination */
        *pResult = sum;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	601a      	str	r2, [r3, #0]
    }
 800288e:	bf00      	nop
 8002890:	3724      	adds	r7, #36	@ 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before calculating fourth power
     * @param      pResult    The fourth central moment of the input
     */
    static void cmsis_arm_fourth_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 800289a:	b480      	push	{r7}
 800289c:	b08b      	sub	sp, #44	@ 0x2c
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	ed87 0a01 	vstr	s0, [r7, #4]
 80028a8:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24

        while (blkCnt > 0U) {
 80028b6:	e076      	b.n	80029a6 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x10c>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1d1a      	adds	r2, r3, #4
 80028bc:	60fa      	str	r2, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80028c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80028c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ce:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 80028d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80028d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028da:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 80028de:	edd7 7a05 	vldr	s15, [r7, #20]
 80028e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80028ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ee:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1d1a      	adds	r2, r3, #4
 80028f6:	60fa      	str	r2, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80028fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002900:	edd7 7a01 	vldr	s15, [r7, #4]
 8002904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002908:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 800290c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002910:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002914:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002918:	edd7 7a05 	vldr	s15, [r7, #20]
 800291c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002920:	ed97 7a08 	vldr	s14, [r7, #32]
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1d1a      	adds	r2, r3, #4
 8002930:	60fa      	str	r2, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002936:	ed97 7a07 	vldr	s14, [r7, #28]
 800293a:	edd7 7a01 	vldr	s15, [r7, #4]
 800293e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002942:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002946:	edd7 7a07 	vldr	s15, [r7, #28]
 800294a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800294e:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002952:	edd7 7a05 	vldr	s15, [r7, #20]
 8002956:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800295a:	ed97 7a08 	vldr	s14, [r7, #32]
 800295e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002962:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1d1a      	adds	r2, r3, #4
 800296a:	60fa      	str	r2, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002970:	ed97 7a07 	vldr	s14, [r7, #28]
 8002974:	edd7 7a01 	vldr	s15, [r7, #4]
 8002978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297c:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002980:	edd7 7a07 	vldr	s15, [r7, #28]
 8002984:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002988:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 800298c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002990:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002994:	ed97 7a08 	vldr	s14, [r7, #32]
 8002998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299c:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	3b01      	subs	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (blkCnt > 0U) {
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d185      	bne.n	80028b8 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24

        while (blkCnt > 0U) {
 80029b4:	e01f      	b.n	80029f6 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x15c>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1d1a      	adds	r2, r3, #4
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80029c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80029c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029cc:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 80029d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80029d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029d8:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 80029dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80029e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80029e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ec:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	3b01      	subs	r3, #1
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (blkCnt > 0U) {
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1dc      	bne.n	80029b6 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x11c>
        }

        sum = sum / blockSize;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a06:	edd7 6a08 	vldr	s13, [r7, #32]
 8002a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a0e:	edc7 7a08 	vstr	s15, [r7, #32]
        /* Store result to destination */
        *pResult = sum;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	601a      	str	r2, [r3, #0]
    }
 8002a18:	bf00      	nop
 8002a1a:	372c      	adds	r7, #44	@ 0x2c
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
    {
// ARM cores (ex M55) with Helium extensions (MVEF) need special treatment (Issue 2843)
#if EI_CLASSIFIER_HAS_FFT_INFO == 1 && !defined(ARM_MATH_MVEF) && !defined(EI_CLASSIFIER_LOAD_ALL_FFTS)
        arm_status status;
        switch (n_fft) {
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b40      	cmp	r3, #64	@ 0x40
 8002a32:	d11f      	bne.n	8002a74 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x50>
                break;
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_64 == 1
            case 64: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60fb      	str	r3, [r7, #12]
                S->fftLen = 32U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len32.bitRevLength;
 8002a44:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a46:	899a      	ldrh	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len32.pBitRevTable;
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len32.pTwiddle;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 64U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2240      	movs	r2, #64	@ 0x40
 8002a60:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_64;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a08      	ldr	r2, [pc, #32]	@ (8002a88 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002a66:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	72fb      	strb	r3, [r7, #11]
                break;
 8002a6c:	bf00      	nop
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
 8002a6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a72:	e000      	b.n	8002a76 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x52>
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x68>)
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	080246c4 	.word	0x080246c4
 8002a88:	080245c4 	.word	0x080245c4
 8002a8c:	fffffc08 	.word	0xfffffc08

08002a90 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 8002a9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d001      	beq.n	8002ab2 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002aae:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002ab0:	e050      	b.n	8002b54 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002ab2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7ff f9ef 	bl	8001ea0 <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002ac2:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	e042      	b.n	8002b54 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e03a      	b.n	8002b4a <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xba>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002ad4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ade:	ee17 0a90 	vmov	r0, s15
 8002ae2:	f7fd fd61 	bl	80005a8 <__aeabi_f2d>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	f04f 0000 	mov.w	r0, #0
 8002aee:	491c      	ldr	r1, [pc, #112]	@ (8002b60 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 8002af0:	f7fd fedc 	bl	80008ac <__aeabi_ddiv>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	ed93 7a00 	vldr	s14, [r3]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b18:	ee17 0a90 	vmov	r0, s15
 8002b1c:	f7fd fd44 	bl	80005a8 <__aeabi_f2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002b24:	4620      	mov	r0, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	f7fd fd96 	bl	8000658 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	18d4      	adds	r4, r2, r3
 8002b3c:	f7fe f884 	bl	8000c48 <__aeabi_d2f>
 8002b40:	4603      	mov	r3, r0
 8002b42:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d3c0      	bcc.n	8002ad4 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x44>
        }

        return EIDSP_OK;
 8002b52:	2300      	movs	r3, #0
    }
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5c:	fffffc14 	.word	0xfffffc14
 8002b60:	3ff00000 	.word	0x3ff00000

08002b64 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b093      	sub	sp, #76	@ 0x4c
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        bool do_saved_point = false;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 8002b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	3301      	adds	r3, #1
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002b86:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc4 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	f107 0218 	add.w	r2, r7, #24
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f007 f8af 	bl	8009cf8 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d20b      	bcs.n	8002bba <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ba6:	f014 fc03 	bl	80173b0 <_Z9ei_callocjj>
 8002baa:	6378      	str	r0, [r7, #52]	@ 0x34
            p_fft_out.reset(fft_out);
 8002bac:	f107 0310 	add.w	r3, r7, #16
 8002bb0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f007 f8d6 	bl	8009d64 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 8002bb8:	e00b      	b.n	8002bd2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
            do_saved_point = true;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 8002bd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2100      	movs	r1, #0
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f01b fe00 	bl	801e7e4 <memset>
        int input_ix = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	@ 0x30
        while (input_ix < (int)input_size) {
 8002be8:	e05d      	b.n	8002ca6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bee:	4413      	add	r3, r2
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d203      	bcs.n	8002bfe <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9a>
                                                                        : input_size - input_ix;
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	e000      	b.n	8002c00 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9c>
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c00:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	18d0      	adds	r0, r2, r3
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c1a:	6a39      	ldr	r1, [r7, #32]
 8002c1c:	f7ff ff38 	bl	8002a90 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 8002c20:	61f8      	str	r0, [r7, #28]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xc8>
 8002c28:	69fc      	ldr	r4, [r7, #28]
 8002c2a:	e041      	b.n	8002cb0 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c34:	e017      	b.n	8002c66 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x102>
                output[j] = std::max(output[j], fft_out[i]);
 8002c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	18d0      	adds	r0, r2, r3
 8002c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c44:	4413      	add	r3, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	f007 f8a0 	bl	8009d8c <_ZSt3maxIfERKT_S2_S2_>
 8002c4c:	4601      	mov	r1, r0
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	680a      	ldr	r2, [r1, #0]
 8002c58:	601a      	str	r2, [r3, #0]
                j++;
 8002c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c62:	3301      	adds	r3, #1
 8002c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d3e3      	bcc.n	8002c36 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd2>
            }
            if (do_overlap) {
 8002c6e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d013      	beq.n	8002c9e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x13a>
                if (do_saved_point) {
 8002c76:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x12e>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c8a:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                }
                input_ix += fft_points / 2;
 8002c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c94:	085a      	lsrs	r2, r3, #1
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	4413      	add	r3, r2
 8002c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c9c:	e003      	b.n	8002ca6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            }
            else {
                input_ix += fft_points;
 8002c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca2:	4413      	add	r3, r2
 8002ca4:	633b      	str	r3, [r7, #48]	@ 0x30
        while (input_ix < (int)input_size) {
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002caa:	429a      	cmp	r2, r3
 8002cac:	db9d      	blt.n	8002bea <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x86>
            }
        }

        return EIDSP_OK;
 8002cae:	2400      	movs	r4, #0
    }
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f007 f834 	bl	8009d22 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 8002cba:	4623      	mov	r3, r4
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3744      	adds	r7, #68	@ 0x44
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	080173cd 	.word	0x080173cd

08002cc8 <_ZN2ei5numpy8varianceEPfj>:

    static float variance(float *input, size_t size)
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
    {
        // Use CMSIS either way.  Will fall back to straight C when needed
        float temp;
#if EIDSP_USE_CMSIS_DSP
        arm_var_f32(input, size, &temp);
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6839      	ldr	r1, [r7, #0]
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f010 fa8d 	bl	80131fa <arm_var_f32>
        for (size_t i = 0; i < size; i++) {
            temp += (input[i] - mean) * (input[i] - mean);
        }
        temp /= (size - 1);
#endif
        return temp;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	ee07 3a90 	vmov	s15, r3
    }
 8002ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e013      	b.n	8002d28 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
            if (input[ix] == 0) {
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	d105      	bne.n	8002d22 <_ZN2ei5numpy13zero_handlingEPfj+0x32>
                input[ix] = 1e-10;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a08      	ldr	r2, [pc, #32]	@ (8002d40 <_ZN2ei5numpy13zero_handlingEPfj+0x50>)
 8002d20:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3301      	adds	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d3e7      	bcc.n	8002d00 <_ZN2ei5numpy13zero_handlingEPfj+0x10>
            }
        }
    }
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	2edbe6ff 	.word	0x2edbe6ff

08002d44 <_ZN2ei5numpy18underflow_handlingEPfjf>:
     * @param input Array
     * @param input_size Size of array
     * @param epsilon Smallest valid non-zero value
     * @returns void
     */
    static void underflow_handling(float* input, size_t input_size, float epsilon = 1e-07f)
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e021      	b.n	8002d9c <_ZN2ei5numpy18underflow_handlingEPfjf+0x58>
            if (fabs(input[ix]) < epsilon) {
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	eeb0 0a67 	vmov.f32	s0, s15
 8002d68:	f7fe f9dc 	bl	8001124 <_ZSt4fabsf>
 8002d6c:	eeb0 7a40 	vmov.f32	s14, s0
 8002d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	bfcc      	ite	gt
 8002d7e:	2301      	movgt	r3, #1
 8002d80:	2300      	movle	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <_ZN2ei5numpy18underflow_handlingEPfjf+0x52>
                input[ix] = 0.0f;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d3d9      	bcc.n	8002d58 <_ZN2ei5numpy18underflow_handlingEPfjf+0x14>
            }
        }
    }
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_ZN18ei_impulse_state_tC1EPK10ei_impulse>:
typedef DspHandle* _dsp_handle_ptr_t;
public:
    const ei_impulse_t *impulse; // keep a pointer to the impulse
    _dsp_handle_ptr_t *dsp_handles;
    bool is_temp_handle = false; // to know if we're using the old (stateless) API
    ei_impulse_state_t(const ei_impulse_t *impulse)
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
        : impulse(impulse)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	721a      	strb	r2, [r3, #8]
    {
        const auto num_dsp_blocks = impulse->dsp_blocks_size;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc8:	60bb      	str	r3, [r7, #8]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f014 fae2 	bl	8017398 <_Z9ei_mallocj>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	605a      	str	r2, [r3, #4]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e009      	b.n	8002df4 <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x46>
            dsp_handles[ix] = nullptr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3301      	adds	r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d3f1      	bcc.n	8002de0 <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x32>
        }
    }
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZN18ei_impulse_state_t14get_dsp_handleEj>:

    DspHandle* get_dsp_handle(size_t ix) {
 8002e06:	b590      	push	{r4, r7, lr}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
        if (dsp_handles[ix] == nullptr) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d115      	bne.n	8002e4c <_ZN18ei_impulse_state_t14get_dsp_handleEj+0x46>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	015b      	lsls	r3, r3, #5
 8002e2a:	4413      	add	r3, r2
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	0152      	lsls	r2, r2, #5
 8002e38:	440a      	add	r2, r1
 8002e3a:	68d0      	ldr	r0, [r2, #12]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6851      	ldr	r1, [r2, #4]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	0092      	lsls	r2, r2, #2
 8002e44:	188c      	adds	r4, r1, r2
 8002e46:	4798      	blx	r3
 8002e48:	4603      	mov	r3, r0
 8002e4a:	6023      	str	r3, [r4, #0]
        }
        return dsp_handles[ix];
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	681b      	ldr	r3, [r3, #0]
    }
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <_ZN18ei_impulse_state_t5resetEv>:

    void reset()
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    {
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e01e      	b.n	8002eac <_ZN18ei_impulse_state_t5resetEv+0x4c>
            if (dsp_handles[ix] != nullptr) {
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d013      	beq.n	8002ea6 <_ZN18ei_impulse_state_t5resetEv+0x46>
                delete dsp_handles[ix];
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <_ZN18ei_impulse_state_t5resetEv+0x38>
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	320c      	adds	r2, #12
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	4790      	blx	r2
                dsp_handles[ix] = nullptr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d3da      	bcc.n	8002e6e <_ZN18ei_impulse_state_t5resetEv+0xe>
            }
        }
    }
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <_ZN18ei_impulse_state_tD1Ev>:

    void operator delete[](void* ptr) {
        ei_free(ptr);
    }

    ~ei_impulse_state_t()
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
    {
        reset();
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffc8 	bl	8002e60 <_ZN18ei_impulse_state_t5resetEv>
        ei_free(dsp_handles);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f014 fa79 	bl	80173cc <_Z7ei_freePv>
    }
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>:
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
        : state(impulse), impulse(impulse) {};
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6839      	ldr	r1, [r7, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff5b 	bl	8002dae <_ZN18ei_impulse_state_tC1EPK10ei_impulse>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0c:	b095      	sub	sp, #84	@ 0x54
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6178      	str	r0, [r7, #20]
 8002f12:	ed87 0a04 	vstr	s0, [r7, #16]
 8002f16:	edc7 0a03 	vstr	s1, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	da00      	bge.n	8002f28 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x20>
 8002f26:	3301      	adds	r3, #1
 8002f28:	105b      	asrs	r3, r3, #1
 8002f2a:	643b      	str	r3, [r7, #64]	@ 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7fd fb3b 	bl	80005a8 <__aeabi_f2d>
 8002f32:	a3a9      	add	r3, pc, #676	@ (adr r3, 80031d8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd fb8e 	bl	8000658 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4690      	mov	r8, r2
 8002f42:	4699      	mov	r9, r3
 8002f44:	6938      	ldr	r0, [r7, #16]
 8002f46:	f7fd fb2f 	bl	80005a8 <__aeabi_f2d>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4640      	mov	r0, r8
 8002f50:	4649      	mov	r1, r9
 8002f52:	f7fd fcab 	bl	80008ac <__aeabi_ddiv>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	ec43 2b17 	vmov	d7, r2, r3
 8002f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f62:	eef0 0a67 	vmov.f32	s1, s15
 8002f66:	f017 fa57 	bl	801a418 <tan>
 8002f6a:	ec53 2b10 	vmov	r2, r3, d0
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	f7fd fe69 	bl	8000c48 <__aeabi_d2f>
 8002f76:	4603      	mov	r3, r0
 8002f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        float a2 = pow(a, 2);
 8002f7a:	2002      	movs	r0, #2
 8002f7c:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8002f80:	f006 fe88 	bl	8009c94 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f84:	ec53 2b10 	vmov	r2, r3, d0
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f7fd fe5c 	bl	8000c48 <__aeabi_d2f>
 8002f90:	4603      	mov	r3, r0
 8002f92:	63bb      	str	r3, [r7, #56]	@ 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f96:	2104      	movs	r1, #4
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f014 fa09 	bl	80173b0 <_Z9ei_callocjj>
 8002f9e:	6378      	str	r0, [r7, #52]	@ 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f014 fa03 	bl	80173b0 <_Z9ei_callocjj>
 8002faa:	6338      	str	r0, [r7, #48]	@ 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fae:	2104      	movs	r1, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f014 f9fd 	bl	80173b0 <_Z9ei_callocjj>
 8002fb6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fba:	2104      	movs	r1, #4
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f014 f9f7 	bl	80173b0 <_Z9ei_callocjj>
 8002fc2:	62b8      	str	r0, [r7, #40]	@ 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc6:	2104      	movs	r1, #4
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f014 f9f1 	bl	80173b0 <_Z9ei_callocjj>
 8002fce:	6278      	str	r0, [r7, #36]	@ 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd2:	2104      	movs	r1, #4
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f014 f9eb 	bl	80173b0 <_Z9ei_callocjj>
 8002fda:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 8002fdc:	2300      	movs	r3, #0
 8002fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fe0:	e0e3      	b.n	80031aa <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2a2>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002fe2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002fe4:	f7fd face 	bl	8000584 <__aeabi_i2d>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	f7fd f97e 	bl	80002ec <__adddf3>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	4b78      	ldr	r3, [pc, #480]	@ (80031e0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 8002ffe:	f7fd f975 	bl	80002ec <__adddf3>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	a373      	add	r3, pc, #460	@ (adr r3, 80031d8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f7fd fb22 	bl	8000658 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4690      	mov	r8, r2
 800301a:	4699      	mov	r9, r3
 800301c:	6978      	ldr	r0, [r7, #20]
 800301e:	f7fd fab1 	bl	8000584 <__aeabi_i2d>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	f7fd f961 	bl	80002ec <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4640      	mov	r0, r8
 8003030:	4649      	mov	r1, r9
 8003032:	f7fd fc3b 	bl	80008ac <__aeabi_ddiv>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	ec43 2b17 	vmov	d7, r2, r3
 800303e:	eeb0 0a47 	vmov.f32	s0, s14
 8003042:	eef0 0a67 	vmov.f32	s1, s15
 8003046:	f017 f993 	bl	801a370 <sin>
 800304a:	ec53 2b10 	vmov	r2, r3, d0
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fdf9 	bl	8000c48 <__aeabi_d2f>
 8003056:	4603      	mov	r3, r0
 8003058:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 800305a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800305c:	f7fd faa4 	bl	80005a8 <__aeabi_f2d>
 8003060:	4680      	mov	r8, r0
 8003062:	4689      	mov	r9, r1
 8003064:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003066:	f7fd fa9f 	bl	80005a8 <__aeabi_f2d>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	f7fd f93d 	bl	80002ec <__adddf3>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4692      	mov	sl, r2
 8003078:	469b      	mov	fp, r3
 800307a:	69f8      	ldr	r0, [r7, #28]
 800307c:	f7fd fa94 	bl	80005a8 <__aeabi_f2d>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4650      	mov	r0, sl
 8003086:	4659      	mov	r1, fp
 8003088:	f7fd fae6 	bl	8000658 <__aeabi_dmul>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4640      	mov	r0, r8
 8003092:	4649      	mov	r1, r9
 8003094:	f7fd f92a 	bl	80002ec <__adddf3>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	4b4e      	ldr	r3, [pc, #312]	@ (80031e0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 80030a6:	f7fd f921 	bl	80002ec <__adddf3>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	f7fd fdc9 	bl	8000c48 <__aeabi_d2f>
 80030b6:	4603      	mov	r3, r0
 80030b8:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 80030ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030c0:	4413      	add	r3, r2
 80030c2:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80030c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80030ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ce:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80030d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80030da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030de:	ee17 0a90 	vmov	r0, s15
 80030e2:	f7fd fa61 	bl	80005a8 <__aeabi_f2d>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	f7fd f8ff 	bl	80002ec <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4690      	mov	r8, r2
 80030f4:	4699      	mov	r9, r3
 80030f6:	6938      	ldr	r0, [r7, #16]
 80030f8:	f7fd fa56 	bl	80005a8 <__aeabi_f2d>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4640      	mov	r0, r8
 8003102:	4649      	mov	r1, r9
 8003104:	f7fd fbd2 	bl	80008ac <__aeabi_ddiv>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003116:	18d6      	adds	r6, r2, r3
 8003118:	f7fd fd96 	bl	8000c48 <__aeabi_d2f>
 800311c:	4603      	mov	r3, r0
 800311e:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8003120:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003122:	f7fd fa41 	bl	80005a8 <__aeabi_f2d>
 8003126:	4680      	mov	r8, r0
 8003128:	4689      	mov	r9, r1
 800312a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800312c:	f7fd fa3c 	bl	80005a8 <__aeabi_f2d>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	f7fd f8da 	bl	80002ec <__adddf3>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4692      	mov	sl, r2
 800313e:	469b      	mov	fp, r3
 8003140:	69f8      	ldr	r0, [r7, #28]
 8003142:	f7fd fa31 	bl	80005a8 <__aeabi_f2d>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4650      	mov	r0, sl
 800314c:	4659      	mov	r1, fp
 800314e:	f7fd fa83 	bl	8000658 <__aeabi_dmul>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4640      	mov	r0, r8
 8003158:	4649      	mov	r1, r9
 800315a:	f7fd f8c5 	bl	80002e8 <__aeabi_dsub>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 800316c:	f7fd f8be 	bl	80002ec <__adddf3>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4614      	mov	r4, r2
 8003176:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800317a:	6938      	ldr	r0, [r7, #16]
 800317c:	f7fd fa14 	bl	80005a8 <__aeabi_f2d>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4620      	mov	r0, r4
 8003186:	4629      	mov	r1, r5
 8003188:	f7fd fb90 	bl	80008ac <__aeabi_ddiv>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800319a:	18d6      	adds	r6, r2, r3
 800319c:	f7fd fd54 	bl	8000c48 <__aeabi_d2f>
 80031a0:	4603      	mov	r3, r0
 80031a2:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 80031a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a6:	3301      	adds	r3, #1
 80031a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ae:	429a      	cmp	r2, r3
 80031b0:	f6ff af17 	blt.w	8002fe2 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xda>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80031b4:	2300      	movs	r3, #0
 80031b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031b8:	e0a9      	b.n	800330e <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 80031ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	441a      	add	r2, r3
 80031c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	440b      	add	r3, r1
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80031ce:	2300      	movs	r3, #0
 80031d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d2:	e094      	b.n	80032fe <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
 80031d4:	f3af 8000 	nop.w
 80031d8:	54442d18 	.word	0x54442d18
 80031dc:	400921fb 	.word	0x400921fb
 80031e0:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80031e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ea:	4413      	add	r3, r2
 80031ec:	ed93 7a00 	vldr	s14, [r3]
 80031f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f6:	4413      	add	r3, r2
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003206:	4413      	add	r3, r2
 8003208:	edd3 6a00 	vldr	s13, [r3]
 800320c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	4413      	add	r3, r2
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800321c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	edd3 7a00 	vldr	s15, [r3]
 800322c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003232:	4413      	add	r3, r2
 8003234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003238:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 800323c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003242:	4413      	add	r3, r2
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f9ae 	bl	80005a8 <__aeabi_f2d>
 800324c:	4604      	mov	r4, r0
 800324e:	460d      	mov	r5, r1
 8003250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003256:	4413      	add	r3, r2
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f9a4 	bl	80005a8 <__aeabi_f2d>
 8003260:	4680      	mov	r8, r0
 8003262:	4689      	mov	r9, r1
 8003264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326a:	4413      	add	r3, r2
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f99a 	bl	80005a8 <__aeabi_f2d>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	f7fd f838 	bl	80002ec <__adddf3>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4640      	mov	r0, r8
 8003282:	4649      	mov	r1, r9
 8003284:	f7fd f832 	bl	80002ec <__adddf3>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4690      	mov	r8, r2
 800328e:	4699      	mov	r9, r3
 8003290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	4413      	add	r3, r2
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd f984 	bl	80005a8 <__aeabi_f2d>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4640      	mov	r0, r8
 80032a6:	4649      	mov	r1, r9
 80032a8:	f7fd f820 	bl	80002ec <__adddf3>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4620      	mov	r0, r4
 80032b2:	4629      	mov	r1, r5
 80032b4:	f7fd f9d0 	bl	8000658 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	18d4      	adds	r4, r2, r3
 80032c8:	f7fd fcbe 	bl	8000c48 <__aeabi_d2f>
 80032cc:	4603      	mov	r3, r0
 80032ce:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80032d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d6:	441a      	add	r2, r3
 80032d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	440b      	add	r3, r1
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80032e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032ea:	441a      	add	r2, r3
 80032ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032f2:	440b      	add	r3, r1
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80032f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032fa:	3301      	adds	r3, #1
 80032fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003302:	429a      	cmp	r2, r3
 8003304:	f6ff af6e 	blt.w	80031e4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 8003308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800330a:	3301      	adds	r3, #1
 800330c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800330e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	f4ff af51 	bcc.w	80031ba <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2b2>
            }
        }

        ei_free(A);
 8003318:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800331a:	f014 f857 	bl	80173cc <_Z7ei_freePv>
        ei_free(d1);
 800331e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003320:	f014 f854 	bl	80173cc <_Z7ei_freePv>
        ei_free(d2);
 8003324:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003326:	f014 f851 	bl	80173cc <_Z7ei_freePv>
        ei_free(w0);
 800332a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800332c:	f014 f84e 	bl	80173cc <_Z7ei_freePv>
        ei_free(w1);
 8003330:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003332:	f014 f84b 	bl	80173cc <_Z7ei_freePv>
        ei_free(w2);
 8003336:	6a38      	ldr	r0, [r7, #32]
 8003338:	f014 f848 	bl	80173cc <_Z7ei_freePv>
    }
 800333c:	bf00      	nop
 800333e:	3754      	adds	r7, #84	@ 0x54
 8003340:	46bd      	mov	sp, r7
 8003342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003346:	bf00      	nop

08003348 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8003348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334c:	b095      	sub	sp, #84	@ 0x54
 800334e:	af00      	add	r7, sp, #0
 8003350:	6178      	str	r0, [r7, #20]
 8003352:	ed87 0a04 	vstr	s0, [r7, #16]
 8003356:	edc7 0a03 	vstr	s1, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	da00      	bge.n	8003368 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x20>
 8003366:	3301      	adds	r3, #1
 8003368:	105b      	asrs	r3, r3, #1
 800336a:	643b      	str	r3, [r7, #64]	@ 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7fd f91b 	bl	80005a8 <__aeabi_f2d>
 8003372:	a3a9      	add	r3, pc, #676	@ (adr r3, 8003618 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fd f96e 	bl	8000658 <__aeabi_dmul>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4690      	mov	r8, r2
 8003382:	4699      	mov	r9, r3
 8003384:	6938      	ldr	r0, [r7, #16]
 8003386:	f7fd f90f 	bl	80005a8 <__aeabi_f2d>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4640      	mov	r0, r8
 8003390:	4649      	mov	r1, r9
 8003392:	f7fd fa8b 	bl	80008ac <__aeabi_ddiv>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	ec43 2b17 	vmov	d7, r2, r3
 800339e:	eeb0 0a47 	vmov.f32	s0, s14
 80033a2:	eef0 0a67 	vmov.f32	s1, s15
 80033a6:	f017 f837 	bl	801a418 <tan>
 80033aa:	ec53 2b10 	vmov	r2, r3, d0
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	f7fd fc49 	bl	8000c48 <__aeabi_d2f>
 80033b6:	4603      	mov	r3, r0
 80033b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        float a2 = pow(a, 2);
 80033ba:	2002      	movs	r0, #2
 80033bc:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80033c0:	f006 fc68 	bl	8009c94 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80033c4:	ec53 2b10 	vmov	r2, r3, d0
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	f7fd fc3c 	bl	8000c48 <__aeabi_d2f>
 80033d0:	4603      	mov	r3, r0
 80033d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 80033d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d6:	2104      	movs	r1, #4
 80033d8:	4618      	mov	r0, r3
 80033da:	f013 ffe9 	bl	80173b0 <_Z9ei_callocjj>
 80033de:	6378      	str	r0, [r7, #52]	@ 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 80033e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e2:	2104      	movs	r1, #4
 80033e4:	4618      	mov	r0, r3
 80033e6:	f013 ffe3 	bl	80173b0 <_Z9ei_callocjj>
 80033ea:	6338      	str	r0, [r7, #48]	@ 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 80033ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ee:	2104      	movs	r1, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f013 ffdd 	bl	80173b0 <_Z9ei_callocjj>
 80033f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 80033f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033fa:	2104      	movs	r1, #4
 80033fc:	4618      	mov	r0, r3
 80033fe:	f013 ffd7 	bl	80173b0 <_Z9ei_callocjj>
 8003402:	62b8      	str	r0, [r7, #40]	@ 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8003404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003406:	2104      	movs	r1, #4
 8003408:	4618      	mov	r0, r3
 800340a:	f013 ffd1 	bl	80173b0 <_Z9ei_callocjj>
 800340e:	6278      	str	r0, [r7, #36]	@ 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8003410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003412:	2104      	movs	r1, #4
 8003414:	4618      	mov	r0, r3
 8003416:	f013 ffcb 	bl	80173b0 <_Z9ei_callocjj>
 800341a:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 800341c:	2300      	movs	r3, #0
 800341e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003420:	e0e3      	b.n	80035ea <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2a2>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8003422:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003424:	f7fd f8ae 	bl	8000584 <__aeabi_i2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	f7fc ff5e 	bl	80002ec <__adddf3>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	4b78      	ldr	r3, [pc, #480]	@ (8003620 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 800343e:	f7fc ff55 	bl	80002ec <__adddf3>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	a373      	add	r3, pc, #460	@ (adr r3, 8003618 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f7fd f902 	bl	8000658 <__aeabi_dmul>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4690      	mov	r8, r2
 800345a:	4699      	mov	r9, r3
 800345c:	6978      	ldr	r0, [r7, #20]
 800345e:	f7fd f891 	bl	8000584 <__aeabi_i2d>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	f7fc ff41 	bl	80002ec <__adddf3>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4640      	mov	r0, r8
 8003470:	4649      	mov	r1, r9
 8003472:	f7fd fa1b 	bl	80008ac <__aeabi_ddiv>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	ec43 2b17 	vmov	d7, r2, r3
 800347e:	eeb0 0a47 	vmov.f32	s0, s14
 8003482:	eef0 0a67 	vmov.f32	s1, s15
 8003486:	f016 ff73 	bl	801a370 <sin>
 800348a:	ec53 2b10 	vmov	r2, r3, d0
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f7fd fbd9 	bl	8000c48 <__aeabi_d2f>
 8003496:	4603      	mov	r3, r0
 8003498:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 800349a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800349c:	f7fd f884 	bl	80005a8 <__aeabi_f2d>
 80034a0:	4680      	mov	r8, r0
 80034a2:	4689      	mov	r9, r1
 80034a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80034a6:	f7fd f87f 	bl	80005a8 <__aeabi_f2d>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	f7fc ff1d 	bl	80002ec <__adddf3>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4692      	mov	sl, r2
 80034b8:	469b      	mov	fp, r3
 80034ba:	69f8      	ldr	r0, [r7, #28]
 80034bc:	f7fd f874 	bl	80005a8 <__aeabi_f2d>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4650      	mov	r0, sl
 80034c6:	4659      	mov	r1, fp
 80034c8:	f7fd f8c6 	bl	8000658 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4640      	mov	r0, r8
 80034d2:	4649      	mov	r1, r9
 80034d4:	f7fc ff0a 	bl	80002ec <__adddf3>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	4b4e      	ldr	r3, [pc, #312]	@ (8003620 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 80034e6:	f7fc ff01 	bl	80002ec <__adddf3>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	f7fd fba9 	bl	8000c48 <__aeabi_d2f>
 80034f6:	4603      	mov	r3, r0
 80034f8:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 80034fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003500:	4413      	add	r3, r2
 8003502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003506:	ed97 7a04 	vldr	s14, [r7, #16]
 800350a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800350e:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8003512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003516:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800351a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351e:	ee17 0a90 	vmov	r0, s15
 8003522:	f7fd f841 	bl	80005a8 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	f7fc fedf 	bl	80002ec <__adddf3>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4690      	mov	r8, r2
 8003534:	4699      	mov	r9, r3
 8003536:	6938      	ldr	r0, [r7, #16]
 8003538:	f7fd f836 	bl	80005a8 <__aeabi_f2d>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4640      	mov	r0, r8
 8003542:	4649      	mov	r1, r9
 8003544:	f7fd f9b2 	bl	80008ac <__aeabi_ddiv>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003556:	18d6      	adds	r6, r2, r3
 8003558:	f7fd fb76 	bl	8000c48 <__aeabi_d2f>
 800355c:	4603      	mov	r3, r0
 800355e:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8003560:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003562:	f7fd f821 	bl	80005a8 <__aeabi_f2d>
 8003566:	4680      	mov	r8, r0
 8003568:	4689      	mov	r9, r1
 800356a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800356c:	f7fd f81c 	bl	80005a8 <__aeabi_f2d>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	f7fc feba 	bl	80002ec <__adddf3>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4692      	mov	sl, r2
 800357e:	469b      	mov	fp, r3
 8003580:	69f8      	ldr	r0, [r7, #28]
 8003582:	f7fd f811 	bl	80005a8 <__aeabi_f2d>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4650      	mov	r0, sl
 800358c:	4659      	mov	r1, fp
 800358e:	f7fd f863 	bl	8000658 <__aeabi_dmul>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4640      	mov	r0, r8
 8003598:	4649      	mov	r1, r9
 800359a:	f7fc fea5 	bl	80002e8 <__aeabi_dsub>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 80035ac:	f7fc fe9e 	bl	80002ec <__adddf3>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4614      	mov	r4, r2
 80035b6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80035ba:	6938      	ldr	r0, [r7, #16]
 80035bc:	f7fc fff4 	bl	80005a8 <__aeabi_f2d>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4620      	mov	r0, r4
 80035c6:	4629      	mov	r1, r5
 80035c8:	f7fd f970 	bl	80008ac <__aeabi_ddiv>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035da:	18d6      	adds	r6, r2, r3
 80035dc:	f7fd fb34 	bl	8000c48 <__aeabi_d2f>
 80035e0:	4603      	mov	r3, r0
 80035e2:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 80035e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035e6:	3301      	adds	r3, #1
 80035e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ee:	429a      	cmp	r2, r3
 80035f0:	f6ff af17 	blt.w	8003422 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xda>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80035f4:	2300      	movs	r3, #0
 80035f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f8:	e0a9      	b.n	800374e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 80035fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	441a      	add	r2, r3
 8003602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	440b      	add	r3, r1
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 800360e:	2300      	movs	r3, #0
 8003610:	647b      	str	r3, [r7, #68]	@ 0x44
 8003612:	e094      	b.n	800373e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
 8003614:	f3af 8000 	nop.w
 8003618:	54442d18 	.word	0x54442d18
 800361c:	400921fb 	.word	0x400921fb
 8003620:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8003624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362a:	4413      	add	r3, r2
 800362c:	ed93 7a00 	vldr	s14, [r3]
 8003630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003636:	4413      	add	r3, r2
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003646:	4413      	add	r3, r2
 8003648:	edd3 6a00 	vldr	s13, [r3]
 800364c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	4413      	add	r3, r2
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	edd3 7a00 	vldr	s15, [r3]
 800366c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003672:	4413      	add	r3, r2
 8003674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003678:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 800367c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff8e 	bl	80005a8 <__aeabi_f2d>
 800368c:	4604      	mov	r4, r0
 800368e:	460d      	mov	r5, r1
 8003690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003696:	4413      	add	r3, r2
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff84 	bl	80005a8 <__aeabi_f2d>
 80036a0:	4680      	mov	r8, r0
 80036a2:	4689      	mov	r9, r1
 80036a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036aa:	4413      	add	r3, r2
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc ff7a 	bl	80005a8 <__aeabi_f2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	f7fc fe18 	bl	80002ec <__adddf3>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4640      	mov	r0, r8
 80036c2:	4649      	mov	r1, r9
 80036c4:	f7fc fe10 	bl	80002e8 <__aeabi_dsub>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4690      	mov	r8, r2
 80036ce:	4699      	mov	r9, r3
 80036d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	6a3a      	ldr	r2, [r7, #32]
 80036d6:	4413      	add	r3, r2
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fc ff64 	bl	80005a8 <__aeabi_f2d>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4640      	mov	r0, r8
 80036e6:	4649      	mov	r1, r9
 80036e8:	f7fc fe00 	bl	80002ec <__adddf3>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4620      	mov	r0, r4
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7fc ffb0 	bl	8000658 <__aeabi_dmul>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	18d4      	adds	r4, r2, r3
 8003708:	f7fd fa9e 	bl	8000c48 <__aeabi_d2f>
 800370c:	4603      	mov	r3, r0
 800370e:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8003710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003716:	441a      	add	r2, r3
 8003718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	6a39      	ldr	r1, [r7, #32]
 800371e:	440b      	add	r3, r1
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8003724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800372a:	441a      	add	r2, r3
 800372c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003732:	440b      	add	r3, r1
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8003738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800373a:	3301      	adds	r3, #1
 800373c:	647b      	str	r3, [r7, #68]	@ 0x44
 800373e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003742:	429a      	cmp	r2, r3
 8003744:	f6ff af6e 	blt.w	8003624 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 8003748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800374a:	3301      	adds	r3, #1
 800374c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800374e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	f4ff af51 	bcc.w	80035fa <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2b2>
            }
        }

        ei_free(A);
 8003758:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800375a:	f013 fe37 	bl	80173cc <_Z7ei_freePv>
        ei_free(d1);
 800375e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003760:	f013 fe34 	bl	80173cc <_Z7ei_freePv>
        ei_free(d2);
 8003764:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003766:	f013 fe31 	bl	80173cc <_Z7ei_freePv>
        ei_free(w0);
 800376a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800376c:	f013 fe2e 	bl	80173cc <_Z7ei_freePv>
        ei_free(w1);
 8003770:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003772:	f013 fe2b 	bl	80173cc <_Z7ei_freePv>
        ei_free(w2);
 8003776:	6a38      	ldr	r0, [r7, #32]
 8003778:	f013 fe28 	bl	80173cc <_Z7ei_freePv>
    }
 800377c:	bf00      	nop
 800377e:	3754      	adds	r7, #84	@ 0x54
 8003780:	46bd      	mov	sp, r7
 8003782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003786:	bf00      	nop

08003788 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	ed87 0a02 	vstr	s0, [r7, #8]
 8003794:	edc7 0a01 	vstr	s1, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e01e      	b.n	80037e0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_lowpass(
 80037a2:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	6979      	ldr	r1, [r7, #20]
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 80037c6:	441a      	add	r2, r3
                matrix->cols);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80037cc:	4621      	mov	r1, r4
 80037ce:	edd7 0a01 	vldr	s1, [r7, #4]
 80037d2:	ed97 0a02 	vldr	s0, [r7, #8]
 80037d6:	f7ff fb97 	bl	8002f08 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3301      	adds	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d3db      	bcc.n	80037a2 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 80037ea:	2300      	movs	r3, #0
    }
 80037ec:	4618      	mov	r0, r3
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd90      	pop	{r4, r7, pc}

080037f4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003800:	edc7 0a01 	vstr	s1, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e01e      	b.n	800384c <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_highpass(
 800380e:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	6979      	ldr	r1, [r7, #20]
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	6979      	ldr	r1, [r7, #20]
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8003832:	441a      	add	r2, r3
                matrix->cols);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 8003838:	4621      	mov	r1, r4
 800383a:	edd7 0a01 	vldr	s1, [r7, #4]
 800383e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003842:	f7ff fd81 	bl	8003348 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	3301      	adds	r3, #1
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	429a      	cmp	r2, r3
 8003854:	d3db      	bcc.n	800380e <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 8003856:	2300      	movs	r3, #0
    }
 8003858:	4618      	mov	r0, r3
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd90      	pop	{r4, r7, pc}

08003860 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 8003860:	b480      	push	{r7}
 8003862:	b091      	sub	sp, #68	@ 0x44
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	ed87 0a01 	vstr	s0, [r7, #4]
 800386e:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003878:	4b61      	ldr	r3, [pc, #388]	@ (8003a00 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 800387a:	e0ba      	b.n	80039f2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        if (output_matrix->cols != 1) {
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d001      	beq.n	8003888 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003884:	4b5e      	ldr	r3, [pc, #376]	@ (8003a00 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8003886:	e0b4      	b.n	80039f2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        uint16_t out_ix = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        size_t in_size = input_matrix->cols;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
        float *in = input_matrix->buffer;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 80038a4:	4b57      	ldr	r3, [pc, #348]	@ (8003a04 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a4>)
 80038a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	637b      	str	r3, [r7, #52]	@ 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80038ae:	2300      	movs	r3, #0
 80038b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038b2:	e028      	b.n	8003906 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa6>
            if (in[ix] < min) {
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	4413      	add	r3, r2
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80038c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	dd05      	ble.n	80038da <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x7a>
                min = in[ix];
 80038ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	4413      	add	r3, r2
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
            if (in[ix] > max) {
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	6a3a      	ldr	r2, [r7, #32]
 80038e0:	4413      	add	r3, r2
 80038e2:	edd3 7a00 	vldr	s15, [r3]
 80038e6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80038ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f2:	d505      	bpl.n	8003900 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa0>
                max = in[ix];
 80038f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	6a3a      	ldr	r2, [r7, #32]
 80038fa:	4413      	add	r3, r2
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	3301      	adds	r3, #1
 8003904:	633b      	str	r3, [r7, #48]	@ 0x30
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	3b01      	subs	r3, #1
 800390a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800390c:	429a      	cmp	r2, r3
 800390e:	d3d1      	bcc.n	80038b4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x54>
            }
        }


        float prev = in[0];
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 8003916:	2301      	movs	r3, #1
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800391a:	e05f      	b.n	80039dc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x17c>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 800391c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	4413      	add	r3, r2
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800392c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	d549      	bpl.n	80039ca <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	6a3a      	ldr	r2, [r7, #32]
 800393c:	4413      	add	r3, r2
 800393e:	ed93 7a00 	vldr	s14, [r3]
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	3301      	adds	r3, #1
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	6a3a      	ldr	r2, [r7, #32]
 800394a:	4413      	add	r3, r2
 800394c:	edd3 7a00 	vldr	s15, [r3]
 8003950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003958:	dd37      	ble.n	80039ca <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800395a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	6a3a      	ldr	r2, [r7, #32]
 8003960:	4413      	add	r3, r2
 8003962:	ed93 7a00 	vldr	s14, [r3]
 8003966:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800396a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	6a3a      	ldr	r2, [r7, #32]
 8003974:	4413      	add	r3, r2
 8003976:	edd3 6a00 	vldr	s13, [r3]
 800397a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397c:	3301      	adds	r3, #1
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	6a3a      	ldr	r2, [r7, #32]
 8003982:	4413      	add	r3, r2
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800398c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003990:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003994:	ed97 7a05 	vldr	s14, [r7, #20]
 8003998:	edd7 7a01 	vldr	s15, [r7, #4]
 800399c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	dd11      	ble.n	80039ca <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                    out[out_ix] = ix;
 80039a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4413      	add	r3, r2
 80039ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039b0:	ee07 2a90 	vmov	s15, r2
 80039b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b8:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 80039bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80039be:	3301      	adds	r3, #1
 80039c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                    if (out_ix == out_size) break;
 80039c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d00e      	beq.n	80039e8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
                }
            }

            prev = in[ix];
 80039ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	6a3a      	ldr	r2, [r7, #32]
 80039d0:	4413      	add	r3, r2
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	3301      	adds	r3, #1
 80039da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	3b01      	subs	r3, #1
 80039e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d39a      	bcc.n	800391c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xbc>
 80039e6:	e000      	b.n	80039ea <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x18a>
                    if (out_ix == out_size) break;
 80039e8:	bf00      	nop
        }

        *peaks_found = out_ix;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80039ee:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80039f0:	2300      	movs	r3, #0
    }
 80039f2:	4618      	mov	r0, r3
 80039f4:	3744      	adds	r7, #68	@ 0x44
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	fffffc14 	.word	0xfffffc14
 8003a04:	7f7fffff 	.word	0x7f7fffff

08003a08 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f006 fbd0 	bl	800a1b8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ffeb 	bl	8003a08 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5c:	bfcc      	ite	gt
 8003a5e:	2301      	movgt	r3, #1
 8003a60:	2300      	movle	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
        });
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	ed2d 8b02 	vpush	{d8}
 8003a76:	b09c      	sub	sp, #112	@ 0x70
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6178      	str	r0, [r7, #20]
 8003a7c:	6139      	str	r1, [r7, #16]
 8003a7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a82:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a92:	4c95      	ldr	r4, [pc, #596]	@ (8003ce8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003a94:	e121      	b.n	8003cda <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        if (output_matrix->cols != 2) {
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d001      	beq.n	8003aa2 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a9e:	4c92      	ldr	r4, [pc, #584]	@ (8003ce8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003aa0:	e11b      	b.n	8003cda <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        if (output_matrix->rows == 0) {
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003aaa:	2400      	movs	r4, #0
 8003aac:	e115      	b.n	8003cda <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        int N = static_cast<int>(fft_length);
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	663b      	str	r3, [r7, #96]	@ 0x60
        float T = 1.0f / sampling_freq;
 8003ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ab6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003abe:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8003aca:	2300      	movs	r3, #0
 8003acc:	2101      	movs	r1, #1
 8003ace:	f7fd fd6c 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 8003ad8:	4c84      	ldr	r4, [pc, #528]	@ (8003cec <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003ada:	e0f9      	b.n	8003cd0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8003adc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003ae0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ae4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ae8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003aec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	da00      	bge.n	8003af4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x84>
 8003af2:	3301      	adds	r3, #1
 8003af4:	105b      	asrs	r3, r3, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f006 fb4c 	bl	800a194 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003afc:	ec53 2b10 	vmov	r2, r3, d0
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	f7fd f880 	bl	8000c08 <__aeabi_d2uiz>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	eef0 0a48 	vmov.f32	s1, s16
 8003b14:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8003cf0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003b18:	f7fe fb92 	bl	8002240 <_ZN2ei5numpy8linspaceEffmPf>
 8003b1c:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (ret != EIDSP_OK) {
 8003b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb8>
            EIDSP_ERR(ret);
 8003b24:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8003b26:	e0d3      	b.n	8003cd0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4619      	mov	r1, r3
 8003b36:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f7fd fd34 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xdc>
 8003b48:	4c68      	ldr	r4, [pc, #416]	@ (8003cec <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003b4a:	e0bc      	b.n	8003cc6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 8003b4c:	f107 0236 	add.w	r2, r7, #54	@ 0x36
 8003b50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b54:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8003cf0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6978      	ldr	r0, [r7, #20]
 8003b5c:	f7ff fe80 	bl	8003860 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003b60:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (ret != EIDSP_OK) {
 8003b62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfc>
            EIDSP_ERR(ret);
 8003b68:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8003b6a:	e0ac      	b.n	8003cc6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ei_vector<freq_peak_t> peaks;
 8003b6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff56 	bl	8003a22 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8003b7c:	e03c      	b.n	8003bf8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x188>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b82:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b92:	ee17 3a90 	vmov	r3, s15
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ba4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb4:	ee17 3a90 	vmov	r3, s15
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
            if (d.amplitude < threshold) {
 8003bc0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003bc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd0:	dd05      	ble.n	8003bde <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x16e>
                d.freq = 0.0f;
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
            peaks.push_back(d);
 8003bde:	f107 0220 	add.w	r2, r7, #32
 8003be2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f006 fb22 	bl	800a232 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003bee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8003bf8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003bfc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	dbbd      	blt.n	8003b7e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10e>
        sort(peaks.begin(), peaks.end(),
 8003c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c06:	4618      	mov	r0, r3
 8003c08:	f006 fb39 	bl	800a27e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c12:	4618      	mov	r0, r3
 8003c14:	f006 fb43 	bl	800a29e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	462a      	mov	r2, r5
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f006 fb4e 	bl	800a2c0 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003c24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f006 fb5b 	bl	800a2e4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8003c2e:	66b8      	str	r0, [r7, #104]	@ 0x68
 8003c30:	e010      	b.n	8003c54 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e4>
            freq_peak_t d;
            d.freq = 0;
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 8003c3e:	f107 0218 	add.w	r2, r7, #24
 8003c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f006 faf2 	bl	800a232 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003c4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c50:	3301      	adds	r3, #1
 8003c52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d3e9      	bcc.n	8003c32 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1c2>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003c5e:	2300      	movs	r3, #0
 8003c60:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c62:	e025      	b.n	8003cb0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x240>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8003c64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c68:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f006 fb4a 	bl	800a304 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	6802      	ldr	r2, [r0, #0]
 8003c84:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8003c86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c8a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f006 fb39 	bl	800a304 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	6842      	ldr	r2, [r0, #4]
 8003ca8:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003caa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cac:	3301      	adds	r3, #1
 8003cae:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3d4      	bcc.n	8003c64 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f4>
        }

        return EIDSP_OK;
 8003cba:	2400      	movs	r4, #0
    }
 8003cbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f006 fa9b 	bl	800a1fc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 8003cc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fc98 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8003cd0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fd fc93 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8003cda:	4623      	mov	r3, r4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3770      	adds	r7, #112	@ 0x70
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	ecbd 8b02 	vpop	{d8}
 8003ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce8:	fffffc14 	.word	0xfffffc14
 8003cec:	fffffc16 	.word	0xfffffc16
 8003cf0:	00000000 	.word	0x00000000

08003cf4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b093      	sub	sp, #76	@ 0x4c
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6178      	str	r0, [r7, #20]
 8003cfc:	6139      	str	r1, [r7, #16]
 8003cfe:	60fa      	str	r2, [r7, #12]
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d103      	bne.n	8003d16 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d16:	4c7b      	ldr	r4, [pc, #492]	@ (8003f04 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d18:	e0ef      	b.n	8003efa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d001      	beq.n	8003d26 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d22:	4c78      	ldr	r4, [pc, #480]	@ (8003f04 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d24:	e0e9      	b.n	8003efa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d105      	bne.n	8003d40 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d40:	4c70      	ldr	r4, [pc, #448]	@ (8003f04 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d42:	e0da      	b.n	8003efa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d50:	4c6c      	ldr	r4, [pc, #432]	@ (8003f04 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d52:	e0d2      	b.n	8003efa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	1e5a      	subs	r2, r3, #1
 8003d5a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2101      	movs	r1, #1
 8003d62:	f7fd fc22 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8003d6c:	4c66      	ldr	r4, [pc, #408]	@ (8003f08 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003d6e:	e0bf      	b.n	8003ef0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	1e5a      	subs	r2, r3, #1
 8003d76:	f107 0018 	add.w	r0, r7, #24
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	f7fd fc14 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003d88:	4c5f      	ldr	r4, [pc, #380]	@ (8003f08 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003d8a:	e0ac      	b.n	8003ee6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003d92:	e063      	b.n	8003e5c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            float t = freq_matrix->buffer[ix];
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            float v = fft_matrix->buffer[ix];
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	63bb      	str	r3, [r7, #56]	@ 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003dba:	e043      	b.n	8003e44 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x150>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	edd3 7a00 	vldr	s15, [r3]
 8003dcc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	db2f      	blt.n	8003e3a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003de2:	3301      	adds	r3, #1
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df8:	d51f      	bpl.n	8003e3a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
                    buckets.buffer[ex] += v;
 8003dfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	ed93 7a00 	vldr	s14, [r3]
 8003e08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e1a:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	edd3 7a00 	vldr	s15, [r3]
 8003e2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e34:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8003e38:	e00b      	b.n	8003e52 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15e>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003e3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003e44:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3b4      	bcc.n	8003dbc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xc8>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003e52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003e56:	3301      	adds	r3, #1
 8003e58:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003e5c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d395      	bcc.n	8003d94 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa0>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003e6e:	e032      	b.n	8003ed6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e2>
            if (bucket_count.buffer[ex] == 0.0f) {
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	edd3 7a00 	vldr	s15, [r3]
 8003e7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e86:	d109      	bne.n	8003e9c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1a8>
                output_matrix->buffer[ex] = 0.0f;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e017      	b.n	8003ecc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1d8>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003e9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	edd3 6a00 	vldr	s13, [r3]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	ed93 7a00 	vldr	s14, [r3]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec8:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003ecc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003ed6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d3c5      	bcc.n	8003e70 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17c>
            }
        }

        return EIDSP_OK;
 8003ee4:	2400      	movs	r4, #0
    }
 8003ee6:	f107 0318 	add.w	r3, r7, #24
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd fb88 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8003ef0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fd fb83 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8003efa:	4623      	mov	r3, r4
 8003efc:	4618      	mov	r0, r3
 8003efe:	374c      	adds	r7, #76	@ 0x4c
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd90      	pop	{r4, r7, pc}
 8003f04:	fffffc14 	.word	0xfffffc14
 8003f08:	fffffc16 	.word	0xfffffc16

08003f0c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	ed2d 8b02 	vpush	{d8}
 8003f12:	b09b      	sub	sp, #108	@ 0x6c
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	6178      	str	r0, [r7, #20]
 8003f18:	6139      	str	r1, [r7, #16]
 8003f1a:	60fa      	str	r2, [r7, #12]
 8003f1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f20:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f2a:	4c82      	ldr	r4, [pc, #520]	@ (8004134 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f2c:	e192      	b.n	8004254 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	0852      	lsrs	r2, r2, #1
 8003f3e:	b292      	uxth	r2, r2
 8003f40:	3201      	adds	r2, #1
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d001      	beq.n	8003f4a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f46:	4c7b      	ldr	r4, [pc, #492]	@ (8004134 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f48:	e184      	b.n	8004254 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	0852      	lsrs	r2, r2, #1
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	3201      	adds	r2, #1
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d001      	beq.n	8003f66 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f62:	4c74      	ldr	r4, [pc, #464]	@ (8004134 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f64:	e176      	b.n	8004254 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f6e:	4c72      	ldr	r4, [pc, #456]	@ (8004138 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f70:	e170      	b.n	8004254 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f7a:	4c6f      	ldr	r4, [pc, #444]	@ (8004138 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f7c:	e16a      	b.n	8004254 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f86:	4c6c      	ldr	r4, [pc, #432]	@ (8004138 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f88:	e164      	b.n	8004254 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8003f9a:	f7fd fb06 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8003f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8003fa4:	4c64      	ldr	r4, [pc, #400]	@ (8004138 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003fa6:	e150      	b.n	800424a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

        if (n_fft > input_matrix->cols) {
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d904      	bls.n	8003fc2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8003fc0:	e006      	b.n	8003fd0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d201      	bcs.n	8003fd0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003fd0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8003fd4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2101      	movs	r1, #1
 8003fdc:	f7fd fae5 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8003fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 8003fe6:	4c54      	ldr	r4, [pc, #336]	@ (8004138 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003fe8:	e12a      	b.n	8004240 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8003ff0:	e00c      	b.n	800400c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x100>
            triage_segments.buffer[ix] = 1.0f;
 8003ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004000:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8004002:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8004006:	3301      	adds	r3, #1
 8004008:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800400c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8004010:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8004014:	429a      	cmp	r2, r3
 8004016:	d3ec      	bcc.n	8003ff2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe6>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 8004018:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800401c:	ee07 3a90 	vmov	s15, r3
 8004020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004024:	edd7 7a02 	vldr	s15, [r7, #8]
 8004028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800402c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004034:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8004038:	2300      	movs	r3, #0
 800403a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800403e:	e025      	b.n	800408c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x180>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8004040:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004056:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800405a:	ed97 6a02 	vldr	s12, [r7, #8]
 800405e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004062:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004066:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800406a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407e:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8004082:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004086:	3301      	adds	r3, #1
 8004088:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8004096:	429a      	cmp	r2, r3
 8004098:	d9d2      	bls.n	8004040 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x134>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 800409a:	f107 001c 	add.w	r0, r7, #28
 800409e:	2300      	movs	r3, #0
 80040a0:	2201      	movs	r2, #1
 80040a2:	2101      	movs	r1, #1
 80040a4:	f7fd fa81 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 80040ae:	4c22      	ldr	r4, [pc, #136]	@ (8004138 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 80040b0:	e0c1      	b.n	8004236 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 80040b2:	f107 021c 	add.w	r2, r7, #28
 80040b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd fd3b 	bl	8001b38 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 80040c2:	6538      	str	r0, [r7, #80]	@ 0x50
        if (ret != EIDSP_OK) {
 80040c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 80040ca:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 80040cc:	e0b3      	b.n	8004236 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 80040ce:	f107 021c 	add.w	r2, r7, #28
 80040d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fd fc95 	bl	8001a08 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 80040de:	6538      	str	r0, [r7, #80]	@ 0x50
        if (ret != EIDSP_OK) {
 80040e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 80040e6:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 80040e8:	e0a5      	b.n	8004236 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3301      	adds	r3, #1
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f013 f95a 	bl	80173b0 <_Z9ei_callocjj>
 80040fc:	64f8      	str	r0, [r7, #76]	@ 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 80040fe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004100:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	b29b      	uxth	r3, r3
 8004108:	3301      	adds	r3, #1
 800410a:	461a      	mov	r2, r3
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	4613      	mov	r3, r2
 8004112:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004114:	f7fd ffa2 	bl	800205c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 8004118:	6538      	str	r0, [r7, #80]	@ 0x50
        if (ret != EIDSP_OK) {
 800411a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x21e>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8004120:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004122:	f013 f953 	bl	80173cc <_Z7ei_freePv>
            EIDSP_ERR(ret);
 8004126:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8004128:	e085      	b.n	8004236 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 800412a:	2300      	movs	r3, #0
 800412c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004130:	e076      	b.n	8004220 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x314>
 8004132:	bf00      	nop
 8004134:	fffffc14 	.word	0xfffffc14
 8004138:	fffffc16 	.word	0xfffffc16
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 800413c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004144:	4413      	add	r3, r2
 8004146:	ed93 7a00 	vldr	s14, [r3]
 800414a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004152:	4413      	add	r3, r2
 8004154:	edd3 7a00 	vldr	s15, [r3]
 8004158:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 800415c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004164:	4413      	add	r3, r2
 8004166:	ed93 7a01 	vldr	s14, [r3, #4]
 800416a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004172:	4413      	add	r3, r2
 8004174:	edd3 7a01 	vldr	s15, [r3, #4]
 8004178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417c:	eeb0 0a67 	vmov.f32	s0, s15
 8004180:	f7fc ffb0 	bl	80010e4 <_ZSt3absf>
 8004184:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8004188:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004190:	4413      	add	r3, r2
 8004192:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004196:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 800419a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041a2:	4413      	add	r3, r2
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 80041aa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041b2:	4413      	add	r3, r2
 80041b4:	ed93 7a00 	vldr	s14, [r3]
 80041b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041c0:	4413      	add	r3, r2
 80041c2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80041c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ca:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80041d8:	429a      	cmp	r2, r3
 80041da:	d00f      	beq.n	80041fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2f0>
                fft_output[ix].r *= 2;
 80041dc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041e4:	4413      	add	r3, r2
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041f2:	4413      	add	r3, r2
 80041f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041f8:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 80041fc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004204:	441a      	add	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6819      	ldr	r1, [r3, #0]
 800420a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8004216:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800421a:	3301      	adds	r3, #1
 800421c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	b29b      	uxth	r3, r3
 8004226:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 800422a:	429a      	cmp	r2, r3
 800422c:	d986      	bls.n	800413c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x230>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 800422e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004230:	f013 f8cc 	bl	80173cc <_Z7ei_freePv>

        return EIDSP_OK;
 8004234:	2400      	movs	r4, #0
    }
 8004236:	f107 031c 	add.w	r3, r7, #28
 800423a:	4618      	mov	r0, r3
 800423c:	f7fd f9e0 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8004240:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd f9db 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 800424a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd f9d6 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8004254:	4623      	mov	r3, r4
 8004256:	4618      	mov	r0, r3
 8004258:	3764      	adds	r7, #100	@ 0x64
 800425a:	46bd      	mov	sp, r7
 800425c:	ecbd 8b02 	vpop	{d8}
 8004260:	bd90      	pop	{r4, r7, pc}
 8004262:	bf00      	nop

08004264 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b089      	sub	sp, #36	@ 0x24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6859      	ldr	r1, [r3, #4]
 8004270:	f107 000c 	add.w	r0, r7, #12
 8004274:	2300      	movs	r3, #0
 8004276:	2201      	movs	r2, #1
 8004278:	f7fd f997 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 8004282:	4c12      	ldr	r4, [pc, #72]	@ (80042cc <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 8004284:	e018      	b.n	80042b8 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fd fc53 	bl	8001b38 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8004292:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800429a:	4c0d      	ldr	r4, [pc, #52]	@ (80042d0 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 800429c:	e00c      	b.n	80042b8 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 800429e:	f107 030c 	add.w	r3, r7, #12
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fd fbaf 	bl	8001a08 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 80042aa:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80042b2:	4c07      	ldr	r4, [pc, #28]	@ (80042d0 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 80042b4:	e000      	b.n	80042b8 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 80042b6:	2400      	movs	r4, #0
    }
 80042b8:	f107 030c 	add.w	r3, r7, #12
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fd f99f 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 80042c2:	4623      	mov	r3, r4
 80042c4:	4618      	mov	r0, r3
 80042c6:	3724      	adds	r7, #36	@ 0x24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd90      	pop	{r4, r7, pc}
 80042cc:	fffffc16 	.word	0xfffffc16
 80042d0:	fffffc14 	.word	0xfffffc14

080042d4 <_ZN2ei8spectral3dotEPKfS2_j>:
namespace spectral {

using fvec = ei_vector<float>;

inline float dot(const float *x, const float *y, size_t sz)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
    float sum = 0.0f;
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e016      	b.n	800431a <_ZN2ei8spectral3dotEPKfS2_j+0x46>
        sum += x[i] * y[i];
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	ed93 7a00 	vldr	s14, [r3]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	4413      	add	r3, r2
 8004300:	edd3 7a00 	vldr	s15, [r3]
 8004304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004308:	ed97 7a05 	vldr	s14, [r7, #20]
 800430c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004310:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	3301      	adds	r3, #1
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d3e4      	bcc.n	80042ec <_ZN2ei8spectral3dotEPKfS2_j+0x18>
    }
    return sum;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	ee07 3a90 	vmov	s15, r3
}
 8004328:	eeb0 0a67 	vmov.f32	s0, s15
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>:

inline void histo(const fvec &x, size_t nbins, fvec &h, bool normalize = false)
{
 8004336:	b590      	push	{r4, r7, lr}
 8004338:	b08f      	sub	sp, #60	@ 0x3c
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	70fb      	strb	r3, [r7, #3]
    float min = *std::min_element(x.begin(), x.end());
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f005 fde9 	bl	8009f1c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800434a:	4604      	mov	r4, r0
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f005 fdf5 	bl	8009f3c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 8004352:	4603      	mov	r3, r0
 8004354:	4619      	mov	r1, r3
 8004356:	4620      	mov	r0, r4
 8004358:	f005 ffe4 	bl	800a324 <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 800435c:	4603      	mov	r3, r0
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4618      	mov	r0, r3
 8004366:	f005 fe22 	bl	8009fae <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800436a:	4603      	mov	r3, r0
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	62bb      	str	r3, [r7, #40]	@ 0x28
    float max = *std::max_element(x.begin(), x.end());
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f005 fdd3 	bl	8009f1c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 8004376:	4604      	mov	r4, r0
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f005 fddf 	bl	8009f3c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800437e:	4603      	mov	r3, r0
 8004380:	4619      	mov	r1, r3
 8004382:	4620      	mov	r0, r4
 8004384:	f005 fe3e 	bl	800a004 <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 8004388:	4603      	mov	r3, r0
 800438a:	61bb      	str	r3, [r7, #24]
 800438c:	f107 0318 	add.w	r3, r7, #24
 8004390:	4618      	mov	r0, r3
 8004392:	f005 fe0c 	bl	8009fae <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 8004396:	4603      	mov	r3, r0
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	627b      	str	r3, [r7, #36]	@ 0x24
    float step = (max - min) / nbins;
 800439c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80043a0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b6:	edc7 7a08 	vstr	s15, [r7, #32]
    h.resize(nbins);
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f005 ffc2 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
    for (size_t i = 0; i < x.size(); i++) {
 80043c2:	2300      	movs	r3, #0
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c6:	e02a      	b.n	800441e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xe8>
        size_t bin = (x[i] - min) / step;
 80043c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f005 fe5b 	bl	800a086 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80043d0:	4603      	mov	r3, r0
 80043d2:	ed93 7a00 	vldr	s14, [r3]
 80043d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80043de:	ed97 7a08 	vldr	s14, [r7, #32]
 80043e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ea:	ee17 3a90 	vmov	r3, s15
 80043ee:	633b      	str	r3, [r7, #48]	@ 0x30
        if (bin >= nbins)
 80043f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xc8>
            bin = nbins - 1;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	633b      	str	r3, [r7, #48]	@ 0x30
        h[bin]++;
 80043fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f005 fd66 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8004406:	4603      	mov	r3, r0
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004410:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004414:	edc3 7a00 	vstr	s15, [r3]
    for (size_t i = 0; i < x.size(); i++) {
 8004418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441a:	3301      	adds	r3, #1
 800441c:	637b      	str	r3, [r7, #52]	@ 0x34
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f005 fbba 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8004424:	4602      	mov	r2, r0
 8004426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004428:	4293      	cmp	r3, r2
 800442a:	bf34      	ite	cc
 800442c:	2301      	movcc	r3, #1
 800442e:	2300      	movcs	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1c8      	bne.n	80043c8 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x92>
    }
    if (normalize) {
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d024      	beq.n	8004486 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x150>
        float s = numpy::sum(h.data(), h.size());
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f005 fbbb 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8004442:	4604      	mov	r4, r0
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f005 fba7 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800444a:	4603      	mov	r3, r0
 800444c:	4619      	mov	r1, r3
 800444e:	4620      	mov	r0, r4
 8004450:	f7fd f928 	bl	80016a4 <_ZN2ei5numpy3sumEPfj>
 8004454:	ed87 0a07 	vstr	s0, [r7, #28]
        for (size_t i = 0; i < nbins; i++) {
 8004458:	2300      	movs	r3, #0
 800445a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800445c:	e00f      	b.n	800447e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x148>
            h[i] /= s;
 800445e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f005 fd36 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8004466:	4603      	mov	r3, r0
 8004468:	edd3 6a00 	vldr	s13, [r3]
 800446c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004474:	edc3 7a00 	vstr	s15, [r3]
        for (size_t i = 0; i < nbins; i++) {
 8004478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447a:	3301      	adds	r3, #1
 800447c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800447e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	429a      	cmp	r2, r3
 8004484:	d3eb      	bcc.n	800445e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x128>
        }
    }
}
 8004486:	bf00      	nop
 8004488:	373c      	adds	r7, #60	@ 0x3c
 800448a:	46bd      	mov	sp, r7
 800448c:	bd90      	pop	{r4, r7, pc}
	...

08004490 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>:
            h[i] = wav[0][n - i - 1];
            g[i] = wav[1][n - i - 1];
        }
    }

    static void find_filter(const char *wav, fvec &h, fvec &g)
 8004490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004492:	b0ab      	sub	sp, #172	@ 0xac
 8004494:	af26      	add	r7, sp, #152	@ 0x98
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
    {
        if (strcmp(wav, "bior1.3") == 0) get_filter<6>(bior1p3, h, g);
 800449c:	49ae      	ldr	r1, [pc, #696]	@ (8004758 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c8>)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7fb feb6 	bl	8000210 <strcmp>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d113      	bne.n	80044d2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
 80044aa:	4eac      	ldr	r6, [pc, #688]	@ (800475c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2cc>)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	9308      	str	r3, [sp, #32]
 80044b4:	466d      	mov	r5, sp
 80044b6:	f106 0410 	add.w	r4, r6, #16
 80044ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80044c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044ca:	f005 ff92 	bl	800a3f2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
        else assert(0); // wavelet not in the list
    }
 80044ce:	f000 bd9a 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior1.5") == 0) get_filter<10>(bior1p5, h, g);
 80044d2:	49a3      	ldr	r1, [pc, #652]	@ (8004760 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d0>)
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7fb fe9b 	bl	8000210 <strcmp>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d117      	bne.n	8004510 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80>
 80044e0:	4ea0      	ldr	r6, [pc, #640]	@ (8004764 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d4>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80044ea:	466d      	mov	r5, sp
 80044ec:	f106 0410 	add.w	r4, r6, #16
 80044f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004500:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004504:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004508:	f005 ffe0 	bl	800a4cc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800450c:	f000 bd7b 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.2") == 0) get_filter<6>(bior2p2, h, g);
 8004510:	4995      	ldr	r1, [pc, #596]	@ (8004768 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d8>)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7fb fe7c 	bl	8000210 <strcmp>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d113      	bne.n	8004546 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6>
 800451e:	4e93      	ldr	r6, [pc, #588]	@ (800476c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2dc>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	9309      	str	r3, [sp, #36]	@ 0x24
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	9308      	str	r3, [sp, #32]
 8004528:	466d      	mov	r5, sp
 800452a:	f106 0410 	add.w	r4, r6, #16
 800452e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004532:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004536:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800453a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800453e:	f005 ff58 	bl	800a3f2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004542:	f000 bd60 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.4") == 0) get_filter<10>(bior2p4, h, g);
 8004546:	498a      	ldr	r1, [pc, #552]	@ (8004770 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e0>)
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7fb fe61 	bl	8000210 <strcmp>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d117      	bne.n	8004584 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xf4>
 8004554:	4e87      	ldr	r6, [pc, #540]	@ (8004774 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e4>)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	9311      	str	r3, [sp, #68]	@ 0x44
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	9310      	str	r3, [sp, #64]	@ 0x40
 800455e:	466d      	mov	r5, sp
 8004560:	f106 0410 	add.w	r4, r6, #16
 8004564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800456a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800456c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800456e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004570:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004574:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004578:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800457c:	f005 ffa6 	bl	800a4cc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004580:	f000 bd41 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.6") == 0) get_filter<14>(bior2p6, h, g);
 8004584:	497c      	ldr	r1, [pc, #496]	@ (8004778 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e8>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7fb fe42 	bl	8000210 <strcmp>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d111      	bne.n	80045b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x126>
 8004592:	4c7a      	ldr	r4, [pc, #488]	@ (800477c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2ec>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	9319      	str	r3, [sp, #100]	@ 0x64
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	9318      	str	r3, [sp, #96]	@ 0x60
 800459c:	4668      	mov	r0, sp
 800459e:	f104 0310 	add.w	r3, r4, #16
 80045a2:	2260      	movs	r2, #96	@ 0x60
 80045a4:	4619      	mov	r1, r3
 80045a6:	f01a f9fe 	bl	801e9a6 <memcpy>
 80045aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045ae:	f005 fffa 	bl	800a5a6 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80045b2:	f000 bd28 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.8") == 0) get_filter<18>(bior2p8, h, g);
 80045b6:	4972      	ldr	r1, [pc, #456]	@ (8004780 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f0>)
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7fb fe29 	bl	8000210 <strcmp>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d111      	bne.n	80045e8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
 80045c4:	4c6f      	ldr	r4, [pc, #444]	@ (8004784 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f4>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	9321      	str	r3, [sp, #132]	@ 0x84
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80045ce:	4668      	mov	r0, sp
 80045d0:	f104 0310 	add.w	r3, r4, #16
 80045d4:	2280      	movs	r2, #128	@ 0x80
 80045d6:	4619      	mov	r1, r3
 80045d8:	f01a f9e5 	bl	801e9a6 <memcpy>
 80045dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045e0:	f006 f852 	bl	800a688 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80045e4:	f000 bd0f 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.1") == 0) get_filter<4>(bior3p1, h, g);
 80045e8:	4967      	ldr	r1, [pc, #412]	@ (8004788 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f8>)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7fb fe10 	bl	8000210 <strcmp>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d110      	bne.n	8004618 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x188>
 80045f6:	4c65      	ldr	r4, [pc, #404]	@ (800478c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2fc>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	9305      	str	r3, [sp, #20]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	9304      	str	r3, [sp, #16]
 8004600:	466d      	mov	r5, sp
 8004602:	f104 0310 	add.w	r3, r4, #16
 8004606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004608:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800460c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004610:	f006 f8a8 	bl	800a764 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004614:	f000 bcf7 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.3") == 0) get_filter<8>(bior3p3, h, g);
 8004618:	495d      	ldr	r1, [pc, #372]	@ (8004790 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x300>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7fb fdf8 	bl	8000210 <strcmp>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d115      	bne.n	8004652 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c2>
 8004626:	4e5b      	ldr	r6, [pc, #364]	@ (8004794 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x304>)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	930d      	str	r3, [sp, #52]	@ 0x34
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	930c      	str	r3, [sp, #48]	@ 0x30
 8004630:	466d      	mov	r5, sp
 8004632:	f106 0410 	add.w	r4, r6, #16
 8004636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800463a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800463c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800463e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004642:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004646:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800464a:	f006 f8f5 	bl	800a838 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800464e:	f000 bcda 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.5") == 0) get_filter<12>(bior3p5, h, g);
 8004652:	4951      	ldr	r1, [pc, #324]	@ (8004798 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x308>)
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7fb fddb 	bl	8000210 <strcmp>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d111      	bne.n	8004684 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1f4>
 8004660:	4c4e      	ldr	r4, [pc, #312]	@ (800479c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x30c>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	9315      	str	r3, [sp, #84]	@ 0x54
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	9314      	str	r3, [sp, #80]	@ 0x50
 800466a:	4668      	mov	r0, sp
 800466c:	f104 0310 	add.w	r3, r4, #16
 8004670:	2250      	movs	r2, #80	@ 0x50
 8004672:	4619      	mov	r1, r3
 8004674:	f01a f997 	bl	801e9a6 <memcpy>
 8004678:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800467c:	f006 f949 	bl	800a912 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004680:	f000 bcc1 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.7") == 0) get_filter<16>(bior3p7, h, g);
 8004684:	4946      	ldr	r1, [pc, #280]	@ (80047a0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x310>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7fb fdc2 	bl	8000210 <strcmp>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d111      	bne.n	80046b6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x226>
 8004692:	4c44      	ldr	r4, [pc, #272]	@ (80047a4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x314>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	931d      	str	r3, [sp, #116]	@ 0x74
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	931c      	str	r3, [sp, #112]	@ 0x70
 800469c:	4668      	mov	r0, sp
 800469e:	f104 0310 	add.w	r3, r4, #16
 80046a2:	2270      	movs	r2, #112	@ 0x70
 80046a4:	4619      	mov	r1, r3
 80046a6:	f01a f97e 	bl	801e9a6 <memcpy>
 80046aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046ae:	f006 f99a 	bl	800a9e6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80046b2:	f000 bca8 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.9") == 0) get_filter<20>(bior3p9, h, g);
 80046b6:	493c      	ldr	r1, [pc, #240]	@ (80047a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x318>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7fb fda9 	bl	8000210 <strcmp>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d111      	bne.n	80046e8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x258>
 80046c4:	4c39      	ldr	r4, [pc, #228]	@ (80047ac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x31c>)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	9325      	str	r3, [sp, #148]	@ 0x94
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	9324      	str	r3, [sp, #144]	@ 0x90
 80046ce:	4668      	mov	r0, sp
 80046d0:	f104 0310 	add.w	r3, r4, #16
 80046d4:	2290      	movs	r2, #144	@ 0x90
 80046d6:	4619      	mov	r1, r3
 80046d8:	f01a f965 	bl	801e9a6 <memcpy>
 80046dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046e0:	f006 f9f2 	bl	800aac8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80046e4:	f000 bc8f 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior4.4") == 0) get_filter<10>(bior4p4, h, g);
 80046e8:	4931      	ldr	r1, [pc, #196]	@ (80047b0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x320>)
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7fb fd90 	bl	8000210 <strcmp>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d117      	bne.n	8004726 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x296>
 80046f6:	4e2f      	ldr	r6, [pc, #188]	@ (80047b4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x324>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8004700:	466d      	mov	r5, sp
 8004702:	f106 0410 	add.w	r4, r6, #16
 8004706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800470a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800470c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800470e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004712:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004716:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800471a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800471e:	f005 fed5 	bl	800a4cc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004722:	f000 bc70 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior5.5") == 0) get_filter<12>(bior5p5, h, g);
 8004726:	4924      	ldr	r1, [pc, #144]	@ (80047b8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x328>)
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f7fb fd71 	bl	8000210 <strcmp>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d145      	bne.n	80047c0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x330>
 8004734:	4c21      	ldr	r4, [pc, #132]	@ (80047bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32c>)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	9315      	str	r3, [sp, #84]	@ 0x54
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	9314      	str	r3, [sp, #80]	@ 0x50
 800473e:	4668      	mov	r0, sp
 8004740:	f104 0310 	add.w	r3, r4, #16
 8004744:	2250      	movs	r2, #80	@ 0x50
 8004746:	4619      	mov	r1, r3
 8004748:	f01a f92d 	bl	801e9a6 <memcpy>
 800474c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004750:	f006 f8df 	bl	800a912 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004754:	f000 bc57 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004758:	08020778 	.word	0x08020778
 800475c:	08022fe8 	.word	0x08022fe8
 8004760:	08020780 	.word	0x08020780
 8004764:	08023018 	.word	0x08023018
 8004768:	08020788 	.word	0x08020788
 800476c:	08023068 	.word	0x08023068
 8004770:	08020790 	.word	0x08020790
 8004774:	08023098 	.word	0x08023098
 8004778:	08020798 	.word	0x08020798
 800477c:	080230e8 	.word	0x080230e8
 8004780:	080207a0 	.word	0x080207a0
 8004784:	08023158 	.word	0x08023158
 8004788:	080207a8 	.word	0x080207a8
 800478c:	080231e8 	.word	0x080231e8
 8004790:	080207b0 	.word	0x080207b0
 8004794:	08023208 	.word	0x08023208
 8004798:	080207b8 	.word	0x080207b8
 800479c:	08023248 	.word	0x08023248
 80047a0:	080207c0 	.word	0x080207c0
 80047a4:	080232a8 	.word	0x080232a8
 80047a8:	080207c8 	.word	0x080207c8
 80047ac:	08023328 	.word	0x08023328
 80047b0:	080207d0 	.word	0x080207d0
 80047b4:	080233c8 	.word	0x080233c8
 80047b8:	080207d8 	.word	0x080207d8
 80047bc:	08023418 	.word	0x08023418
        else if (strcmp(wav, "bior6.8") == 0) get_filter<18>(bior6p8, h, g);
 80047c0:	49b1      	ldr	r1, [pc, #708]	@ (8004a88 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5f8>)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7fb fd24 	bl	8000210 <strcmp>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d111      	bne.n	80047f2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x362>
 80047ce:	4caf      	ldr	r4, [pc, #700]	@ (8004a8c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5fc>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	9321      	str	r3, [sp, #132]	@ 0x84
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	9320      	str	r3, [sp, #128]	@ 0x80
 80047d8:	4668      	mov	r0, sp
 80047da:	f104 0310 	add.w	r3, r4, #16
 80047de:	2280      	movs	r2, #128	@ 0x80
 80047e0:	4619      	mov	r1, r3
 80047e2:	f01a f8e0 	bl	801e9a6 <memcpy>
 80047e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047ea:	f005 ff4d 	bl	800a688 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80047ee:	f000 bc0a 	b.w	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif1") == 0) get_filter<6>(coif1, h, g);
 80047f2:	49a7      	ldr	r1, [pc, #668]	@ (8004a90 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x600>)
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7fb fd0b 	bl	8000210 <strcmp>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d112      	bne.n	8004826 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x396>
 8004800:	4ea4      	ldr	r6, [pc, #656]	@ (8004a94 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x604>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	9309      	str	r3, [sp, #36]	@ 0x24
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	9308      	str	r3, [sp, #32]
 800480a:	466d      	mov	r5, sp
 800480c:	f106 0410 	add.w	r4, r6, #16
 8004810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004814:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004818:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800481c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004820:	f005 fde7 	bl	800a3f2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004824:	e3ef      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif2") == 0) get_filter<12>(coif2, h, g);
 8004826:	499c      	ldr	r1, [pc, #624]	@ (8004a98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x608>)
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7fb fcf1 	bl	8000210 <strcmp>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d110      	bne.n	8004856 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3c6>
 8004834:	4c99      	ldr	r4, [pc, #612]	@ (8004a9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x60c>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	9315      	str	r3, [sp, #84]	@ 0x54
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	9314      	str	r3, [sp, #80]	@ 0x50
 800483e:	4668      	mov	r0, sp
 8004840:	f104 0310 	add.w	r3, r4, #16
 8004844:	2250      	movs	r2, #80	@ 0x50
 8004846:	4619      	mov	r1, r3
 8004848:	f01a f8ad 	bl	801e9a6 <memcpy>
 800484c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004850:	f006 f85f 	bl	800a912 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004854:	e3d7      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif3") == 0) get_filter<18>(coif3, h, g);
 8004856:	4992      	ldr	r1, [pc, #584]	@ (8004aa0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x610>)
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7fb fcd9 	bl	8000210 <strcmp>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d110      	bne.n	8004886 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3f6>
 8004864:	4c8f      	ldr	r4, [pc, #572]	@ (8004aa4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x614>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	9321      	str	r3, [sp, #132]	@ 0x84
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	9320      	str	r3, [sp, #128]	@ 0x80
 800486e:	4668      	mov	r0, sp
 8004870:	f104 0310 	add.w	r3, r4, #16
 8004874:	2280      	movs	r2, #128	@ 0x80
 8004876:	4619      	mov	r1, r3
 8004878:	f01a f895 	bl	801e9a6 <memcpy>
 800487c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004880:	f005 ff02 	bl	800a688 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004884:	e3bf      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db2") == 0) get_filter<4>(db2, h, g);
 8004886:	4988      	ldr	r1, [pc, #544]	@ (8004aa8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x618>)
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7fb fcc1 	bl	8000210 <strcmp>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10f      	bne.n	80048b4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x424>
 8004894:	4c85      	ldr	r4, [pc, #532]	@ (8004aac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x61c>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	9305      	str	r3, [sp, #20]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	9304      	str	r3, [sp, #16]
 800489e:	466d      	mov	r5, sp
 80048a0:	f104 0310 	add.w	r3, r4, #16
 80048a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048ae:	f005 ff59 	bl	800a764 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048b2:	e3a8      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db3") == 0) get_filter<6>(db3, h, g);
 80048b4:	497e      	ldr	r1, [pc, #504]	@ (8004ab0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x620>)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7fb fcaa 	bl	8000210 <strcmp>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d112      	bne.n	80048e8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x458>
 80048c2:	4e7c      	ldr	r6, [pc, #496]	@ (8004ab4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x624>)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	9308      	str	r3, [sp, #32]
 80048cc:	466d      	mov	r5, sp
 80048ce:	f106 0410 	add.w	r4, r6, #16
 80048d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048e2:	f005 fd86 	bl	800a3f2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048e6:	e38e      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db4") == 0) get_filter<8>(db4, h, g);
 80048e8:	4973      	ldr	r1, [pc, #460]	@ (8004ab8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x628>)
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7fb fc90 	bl	8000210 <strcmp>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d114      	bne.n	8004920 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x490>
 80048f6:	4e71      	ldr	r6, [pc, #452]	@ (8004abc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x62c>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8004900:	466d      	mov	r5, sp
 8004902:	f106 0410 	add.w	r4, r6, #16
 8004906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800490a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800490c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800490e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004912:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004916:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800491a:	f005 ff8d 	bl	800a838 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800491e:	e372      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db5") == 0) get_filter<10>(db5, h, g);
 8004920:	4967      	ldr	r1, [pc, #412]	@ (8004ac0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x630>)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7fb fc74 	bl	8000210 <strcmp>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4cc>
 800492e:	4e65      	ldr	r6, [pc, #404]	@ (8004ac4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x634>)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	9311      	str	r3, [sp, #68]	@ 0x44
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	9310      	str	r3, [sp, #64]	@ 0x40
 8004938:	466d      	mov	r5, sp
 800493a:	f106 0410 	add.w	r4, r6, #16
 800493e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800494a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800494e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004952:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004956:	f005 fdb9 	bl	800a4cc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800495a:	e354      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db6") == 0) get_filter<12>(db6, h, g);
 800495c:	495a      	ldr	r1, [pc, #360]	@ (8004ac8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x638>)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7fb fc56 	bl	8000210 <strcmp>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d110      	bne.n	800498c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4fc>
 800496a:	4c58      	ldr	r4, [pc, #352]	@ (8004acc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x63c>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	9315      	str	r3, [sp, #84]	@ 0x54
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	9314      	str	r3, [sp, #80]	@ 0x50
 8004974:	4668      	mov	r0, sp
 8004976:	f104 0310 	add.w	r3, r4, #16
 800497a:	2250      	movs	r2, #80	@ 0x50
 800497c:	4619      	mov	r1, r3
 800497e:	f01a f812 	bl	801e9a6 <memcpy>
 8004982:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004986:	f005 ffc4 	bl	800a912 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800498a:	e33c      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db7") == 0) get_filter<14>(db7, h, g);
 800498c:	4950      	ldr	r1, [pc, #320]	@ (8004ad0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x640>)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7fb fc3e 	bl	8000210 <strcmp>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d110      	bne.n	80049bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x52c>
 800499a:	4c4e      	ldr	r4, [pc, #312]	@ (8004ad4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x644>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	9319      	str	r3, [sp, #100]	@ 0x64
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	9318      	str	r3, [sp, #96]	@ 0x60
 80049a4:	4668      	mov	r0, sp
 80049a6:	f104 0310 	add.w	r3, r4, #16
 80049aa:	2260      	movs	r2, #96	@ 0x60
 80049ac:	4619      	mov	r1, r3
 80049ae:	f019 fffa 	bl	801e9a6 <memcpy>
 80049b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049b6:	f005 fdf6 	bl	800a5a6 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049ba:	e324      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db8") == 0) get_filter<16>(db8, h, g);
 80049bc:	4946      	ldr	r1, [pc, #280]	@ (8004ad8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x648>)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7fb fc26 	bl	8000210 <strcmp>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d110      	bne.n	80049ec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x55c>
 80049ca:	4c44      	ldr	r4, [pc, #272]	@ (8004adc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x64c>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	931d      	str	r3, [sp, #116]	@ 0x74
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	931c      	str	r3, [sp, #112]	@ 0x70
 80049d4:	4668      	mov	r0, sp
 80049d6:	f104 0310 	add.w	r3, r4, #16
 80049da:	2270      	movs	r2, #112	@ 0x70
 80049dc:	4619      	mov	r1, r3
 80049de:	f019 ffe2 	bl	801e9a6 <memcpy>
 80049e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049e6:	f005 fffe 	bl	800a9e6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049ea:	e30c      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db9") == 0) get_filter<18>(db9, h, g);
 80049ec:	493c      	ldr	r1, [pc, #240]	@ (8004ae0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x650>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f7fb fc0e 	bl	8000210 <strcmp>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d110      	bne.n	8004a1c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x58c>
 80049fa:	4c3a      	ldr	r4, [pc, #232]	@ (8004ae4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x654>)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	9321      	str	r3, [sp, #132]	@ 0x84
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	9320      	str	r3, [sp, #128]	@ 0x80
 8004a04:	4668      	mov	r0, sp
 8004a06:	f104 0310 	add.w	r3, r4, #16
 8004a0a:	2280      	movs	r2, #128	@ 0x80
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	f019 ffca 	bl	801e9a6 <memcpy>
 8004a12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a16:	f005 fe37 	bl	800a688 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a1a:	e2f4      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db10") == 0) get_filter<20>(db10, h, g);
 8004a1c:	4932      	ldr	r1, [pc, #200]	@ (8004ae8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x658>)
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f7fb fbf6 	bl	8000210 <strcmp>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d110      	bne.n	8004a4c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5bc>
 8004a2a:	4c30      	ldr	r4, [pc, #192]	@ (8004aec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x65c>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	9325      	str	r3, [sp, #148]	@ 0x94
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	9324      	str	r3, [sp, #144]	@ 0x90
 8004a34:	4668      	mov	r0, sp
 8004a36:	f104 0310 	add.w	r3, r4, #16
 8004a3a:	2290      	movs	r2, #144	@ 0x90
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f019 ffb2 	bl	801e9a6 <memcpy>
 8004a42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a46:	f006 f83f 	bl	800aac8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a4a:	e2dc      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "haar") == 0) get_filter<2>(haar, h, g);
 8004a4c:	4928      	ldr	r1, [pc, #160]	@ (8004af0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x660>)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7fb fbde 	bl	8000210 <strcmp>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d14e      	bne.n	8004af8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x668>
 8004a5a:	4b26      	ldr	r3, [pc, #152]	@ (8004af4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x664>)
 8004a5c:	ed93 6a00 	vldr	s12, [r3]
 8004a60:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a64:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a68:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	68b8      	ldr	r0, [r7, #8]
 8004a70:	eeb0 0a46 	vmov.f32	s0, s12
 8004a74:	eef0 0a66 	vmov.f32	s1, s13
 8004a78:	eeb0 1a47 	vmov.f32	s2, s14
 8004a7c:	eef0 1a67 	vmov.f32	s3, s15
 8004a80:	f006 f890 	bl	800aba4 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a84:	e2bf      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004a86:	bf00      	nop
 8004a88:	080207e0 	.word	0x080207e0
 8004a8c:	08023478 	.word	0x08023478
 8004a90:	080207e8 	.word	0x080207e8
 8004a94:	08023508 	.word	0x08023508
 8004a98:	080207f0 	.word	0x080207f0
 8004a9c:	08023538 	.word	0x08023538
 8004aa0:	080207f8 	.word	0x080207f8
 8004aa4:	08023598 	.word	0x08023598
 8004aa8:	08020800 	.word	0x08020800
 8004aac:	08023628 	.word	0x08023628
 8004ab0:	08020804 	.word	0x08020804
 8004ab4:	08023648 	.word	0x08023648
 8004ab8:	08020808 	.word	0x08020808
 8004abc:	08023678 	.word	0x08023678
 8004ac0:	0802080c 	.word	0x0802080c
 8004ac4:	080236b8 	.word	0x080236b8
 8004ac8:	08020810 	.word	0x08020810
 8004acc:	08023708 	.word	0x08023708
 8004ad0:	08020814 	.word	0x08020814
 8004ad4:	08023768 	.word	0x08023768
 8004ad8:	08020818 	.word	0x08020818
 8004adc:	080237d8 	.word	0x080237d8
 8004ae0:	0802081c 	.word	0x0802081c
 8004ae4:	08023858 	.word	0x08023858
 8004ae8:	08020820 	.word	0x08020820
 8004aec:	080238e8 	.word	0x080238e8
 8004af0:	08020828 	.word	0x08020828
 8004af4:	08023988 	.word	0x08023988
        else if (strcmp(wav, "rbio1.3") == 0) get_filter<6>(rbio1p3, h, g);
 8004af8:	49a8      	ldr	r1, [pc, #672]	@ (8004d9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x90c>)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7fb fb88 	bl	8000210 <strcmp>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d112      	bne.n	8004b2c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x69c>
 8004b06:	4ea6      	ldr	r6, [pc, #664]	@ (8004da0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x910>)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	9308      	str	r3, [sp, #32]
 8004b10:	466d      	mov	r5, sp
 8004b12:	f106 0410 	add.w	r4, r6, #16
 8004b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b22:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b26:	f005 fc64 	bl	800a3f2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b2a:	e26c      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio1.5") == 0) get_filter<10>(rbio1p5, h, g);
 8004b2c:	499d      	ldr	r1, [pc, #628]	@ (8004da4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x914>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7fb fb6e 	bl	8000210 <strcmp>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x6d8>
 8004b3a:	4e9b      	ldr	r6, [pc, #620]	@ (8004da8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x918>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	9310      	str	r3, [sp, #64]	@ 0x40
 8004b44:	466d      	mov	r5, sp
 8004b46:	f106 0410 	add.w	r4, r6, #16
 8004b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b5a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b5e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b62:	f005 fcb3 	bl	800a4cc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b66:	e24e      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.2") == 0) get_filter<6>(rbio2p2, h, g);
 8004b68:	4990      	ldr	r1, [pc, #576]	@ (8004dac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x91c>)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7fb fb50 	bl	8000210 <strcmp>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d112      	bne.n	8004b9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x70c>
 8004b76:	4e8e      	ldr	r6, [pc, #568]	@ (8004db0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x920>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	9308      	str	r3, [sp, #32]
 8004b80:	466d      	mov	r5, sp
 8004b82:	f106 0410 	add.w	r4, r6, #16
 8004b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b8e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b92:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b96:	f005 fc2c 	bl	800a3f2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b9a:	e234      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.4") == 0) get_filter<10>(rbio2p4, h, g);
 8004b9c:	4985      	ldr	r1, [pc, #532]	@ (8004db4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x924>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7fb fb36 	bl	8000210 <strcmp>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d116      	bne.n	8004bd8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x748>
 8004baa:	4e83      	ldr	r6, [pc, #524]	@ (8004db8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x928>)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	9311      	str	r3, [sp, #68]	@ 0x44
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8004bb4:	466d      	mov	r5, sp
 8004bb6:	f106 0410 	add.w	r4, r6, #16
 8004bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004bce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004bd2:	f005 fc7b 	bl	800a4cc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004bd6:	e216      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.6") == 0) get_filter<14>(rbio2p6, h, g);
 8004bd8:	4978      	ldr	r1, [pc, #480]	@ (8004dbc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92c>)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f7fb fb18 	bl	8000210 <strcmp>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d110      	bne.n	8004c08 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x778>
 8004be6:	4c76      	ldr	r4, [pc, #472]	@ (8004dc0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x930>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	9319      	str	r3, [sp, #100]	@ 0x64
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	9318      	str	r3, [sp, #96]	@ 0x60
 8004bf0:	4668      	mov	r0, sp
 8004bf2:	f104 0310 	add.w	r3, r4, #16
 8004bf6:	2260      	movs	r2, #96	@ 0x60
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	f019 fed4 	bl	801e9a6 <memcpy>
 8004bfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c02:	f005 fcd0 	bl	800a5a6 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c06:	e1fe      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.8") == 0) get_filter<18>(rbio2p8, h, g);
 8004c08:	496e      	ldr	r1, [pc, #440]	@ (8004dc4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x934>)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7fb fb00 	bl	8000210 <strcmp>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d110      	bne.n	8004c38 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7a8>
 8004c16:	4c6c      	ldr	r4, [pc, #432]	@ (8004dc8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x938>)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	9321      	str	r3, [sp, #132]	@ 0x84
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	9320      	str	r3, [sp, #128]	@ 0x80
 8004c20:	4668      	mov	r0, sp
 8004c22:	f104 0310 	add.w	r3, r4, #16
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f019 febc 	bl	801e9a6 <memcpy>
 8004c2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c32:	f005 fd29 	bl	800a688 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c36:	e1e6      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.1") == 0) get_filter<4>(rbio3p1, h, g);
 8004c38:	4964      	ldr	r1, [pc, #400]	@ (8004dcc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x93c>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7fb fae8 	bl	8000210 <strcmp>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10f      	bne.n	8004c66 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7d6>
 8004c46:	4c62      	ldr	r4, [pc, #392]	@ (8004dd0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x940>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	9305      	str	r3, [sp, #20]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	466d      	mov	r5, sp
 8004c52:	f104 0310 	add.w	r3, r4, #16
 8004c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c58:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c60:	f005 fd80 	bl	800a764 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c64:	e1cf      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.3") == 0) get_filter<8>(rbio3p3, h, g);
 8004c66:	495b      	ldr	r1, [pc, #364]	@ (8004dd4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x944>)
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7fb fad1 	bl	8000210 <strcmp>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d114      	bne.n	8004c9e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80e>
 8004c74:	4e58      	ldr	r6, [pc, #352]	@ (8004dd8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x948>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	930d      	str	r3, [sp, #52]	@ 0x34
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8004c7e:	466d      	mov	r5, sp
 8004c80:	f106 0410 	add.w	r4, r6, #16
 8004c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c94:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004c98:	f005 fdce 	bl	800a838 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c9c:	e1b3      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.5") == 0) get_filter<12>(rbio3p5, h, g);
 8004c9e:	494f      	ldr	r1, [pc, #316]	@ (8004ddc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x94c>)
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7fb fab5 	bl	8000210 <strcmp>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d110      	bne.n	8004cce <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x83e>
 8004cac:	4c4c      	ldr	r4, [pc, #304]	@ (8004de0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x950>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	9315      	str	r3, [sp, #84]	@ 0x54
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	9314      	str	r3, [sp, #80]	@ 0x50
 8004cb6:	4668      	mov	r0, sp
 8004cb8:	f104 0310 	add.w	r3, r4, #16
 8004cbc:	2250      	movs	r2, #80	@ 0x50
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	f019 fe71 	bl	801e9a6 <memcpy>
 8004cc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cc8:	f005 fe23 	bl	800a912 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004ccc:	e19b      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.7") == 0) get_filter<16>(rbio3p7, h, g);
 8004cce:	4945      	ldr	r1, [pc, #276]	@ (8004de4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x954>)
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7fb fa9d 	bl	8000210 <strcmp>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d110      	bne.n	8004cfe <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x86e>
 8004cdc:	4c42      	ldr	r4, [pc, #264]	@ (8004de8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x958>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	931d      	str	r3, [sp, #116]	@ 0x74
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	931c      	str	r3, [sp, #112]	@ 0x70
 8004ce6:	4668      	mov	r0, sp
 8004ce8:	f104 0310 	add.w	r3, r4, #16
 8004cec:	2270      	movs	r2, #112	@ 0x70
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f019 fe59 	bl	801e9a6 <memcpy>
 8004cf4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cf8:	f005 fe75 	bl	800a9e6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004cfc:	e183      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.9") == 0) get_filter<20>(rbio3p9, h, g);
 8004cfe:	493b      	ldr	r1, [pc, #236]	@ (8004dec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x95c>)
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7fb fa85 	bl	8000210 <strcmp>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d110      	bne.n	8004d2e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x89e>
 8004d0c:	4c38      	ldr	r4, [pc, #224]	@ (8004df0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x960>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	9325      	str	r3, [sp, #148]	@ 0x94
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	9324      	str	r3, [sp, #144]	@ 0x90
 8004d16:	4668      	mov	r0, sp
 8004d18:	f104 0310 	add.w	r3, r4, #16
 8004d1c:	2290      	movs	r2, #144	@ 0x90
 8004d1e:	4619      	mov	r1, r3
 8004d20:	f019 fe41 	bl	801e9a6 <memcpy>
 8004d24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d28:	f005 fece 	bl	800aac8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d2c:	e16b      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio4.4") == 0) get_filter<10>(rbio4p4, h, g);
 8004d2e:	4931      	ldr	r1, [pc, #196]	@ (8004df4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x964>)
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7fb fa6d 	bl	8000210 <strcmp>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d116      	bne.n	8004d6a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x8da>
 8004d3c:	4e2e      	ldr	r6, [pc, #184]	@ (8004df8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x968>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	9311      	str	r3, [sp, #68]	@ 0x44
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d46:	466d      	mov	r5, sp
 8004d48:	f106 0410 	add.w	r4, r6, #16
 8004d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d5c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004d60:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004d64:	f005 fbb2 	bl	800a4cc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d68:	e14d      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio5.5") == 0) get_filter<12>(rbio5p5, h, g);
 8004d6a:	4924      	ldr	r1, [pc, #144]	@ (8004dfc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x96c>)
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7fb fa4f 	bl	8000210 <strcmp>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d145      	bne.n	8004e04 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x974>
 8004d78:	4c21      	ldr	r4, [pc, #132]	@ (8004e00 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x970>)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	9314      	str	r3, [sp, #80]	@ 0x50
 8004d82:	4668      	mov	r0, sp
 8004d84:	f104 0310 	add.w	r3, r4, #16
 8004d88:	2250      	movs	r2, #80	@ 0x50
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f019 fe0b 	bl	801e9a6 <memcpy>
 8004d90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d94:	f005 fdbd 	bl	800a912 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d98:	e135      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004d9a:	bf00      	nop
 8004d9c:	08020830 	.word	0x08020830
 8004da0:	08023998 	.word	0x08023998
 8004da4:	08020838 	.word	0x08020838
 8004da8:	080239c8 	.word	0x080239c8
 8004dac:	08020840 	.word	0x08020840
 8004db0:	08023a18 	.word	0x08023a18
 8004db4:	08020848 	.word	0x08020848
 8004db8:	08023a48 	.word	0x08023a48
 8004dbc:	08020850 	.word	0x08020850
 8004dc0:	08023a98 	.word	0x08023a98
 8004dc4:	08020858 	.word	0x08020858
 8004dc8:	08023b08 	.word	0x08023b08
 8004dcc:	08020860 	.word	0x08020860
 8004dd0:	08023b98 	.word	0x08023b98
 8004dd4:	08020868 	.word	0x08020868
 8004dd8:	08023bb8 	.word	0x08023bb8
 8004ddc:	08020870 	.word	0x08020870
 8004de0:	08023bf8 	.word	0x08023bf8
 8004de4:	08020878 	.word	0x08020878
 8004de8:	08023c58 	.word	0x08023c58
 8004dec:	08020880 	.word	0x08020880
 8004df0:	08023cd8 	.word	0x08023cd8
 8004df4:	08020888 	.word	0x08020888
 8004df8:	08023d78 	.word	0x08023d78
 8004dfc:	08020890 	.word	0x08020890
 8004e00:	08023dc8 	.word	0x08023dc8
        else if (strcmp(wav, "rbio6.8") == 0) get_filter<18>(rbio6p8, h, g);
 8004e04:	4981      	ldr	r1, [pc, #516]	@ (800500c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb7c>)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7fb fa02 	bl	8000210 <strcmp>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d110      	bne.n	8004e34 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9a4>
 8004e12:	4c7f      	ldr	r4, [pc, #508]	@ (8005010 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb80>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	9321      	str	r3, [sp, #132]	@ 0x84
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	9320      	str	r3, [sp, #128]	@ 0x80
 8004e1c:	4668      	mov	r0, sp
 8004e1e:	f104 0310 	add.w	r3, r4, #16
 8004e22:	2280      	movs	r2, #128	@ 0x80
 8004e24:	4619      	mov	r1, r3
 8004e26:	f019 fdbe 	bl	801e9a6 <memcpy>
 8004e2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e2e:	f005 fc2b 	bl	800a688 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e32:	e0e8      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym2") == 0) get_filter<4>(sym2, h, g);
 8004e34:	4977      	ldr	r1, [pc, #476]	@ (8005014 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb84>)
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7fb f9ea 	bl	8000210 <strcmp>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9d2>
 8004e42:	4c75      	ldr	r4, [pc, #468]	@ (8005018 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb88>)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	9305      	str	r3, [sp, #20]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	466d      	mov	r5, sp
 8004e4e:	f104 0310 	add.w	r3, r4, #16
 8004e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004e58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e5c:	f005 fc82 	bl	800a764 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e60:	e0d1      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym3") == 0) get_filter<6>(sym3, h, g);
 8004e62:	496e      	ldr	r1, [pc, #440]	@ (800501c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8c>)
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7fb f9d3 	bl	8000210 <strcmp>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d112      	bne.n	8004e96 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa06>
 8004e70:	4e6b      	ldr	r6, [pc, #428]	@ (8005020 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb90>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	9308      	str	r3, [sp, #32]
 8004e7a:	466d      	mov	r5, sp
 8004e7c:	f106 0410 	add.w	r4, r6, #16
 8004e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e88:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004e8c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004e90:	f005 faaf 	bl	800a3f2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e94:	e0b7      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym4") == 0) get_filter<8>(sym4, h, g);
 8004e96:	4963      	ldr	r1, [pc, #396]	@ (8005024 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb94>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7fb f9b9 	bl	8000210 <strcmp>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d114      	bne.n	8004ece <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa3e>
 8004ea4:	4e60      	ldr	r6, [pc, #384]	@ (8005028 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb98>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	930d      	str	r3, [sp, #52]	@ 0x34
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	930c      	str	r3, [sp, #48]	@ 0x30
 8004eae:	466d      	mov	r5, sp
 8004eb0:	f106 0410 	add.w	r4, r6, #16
 8004eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ebc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ec0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ec4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ec8:	f005 fcb6 	bl	800a838 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004ecc:	e09b      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym5") == 0) get_filter<10>(sym5, h, g);
 8004ece:	4957      	ldr	r1, [pc, #348]	@ (800502c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb9c>)
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7fb f99d 	bl	8000210 <strcmp>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d116      	bne.n	8004f0a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa7a>
 8004edc:	4e54      	ldr	r6, [pc, #336]	@ (8005030 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba0>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	9311      	str	r3, [sp, #68]	@ 0x44
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	9310      	str	r3, [sp, #64]	@ 0x40
 8004ee6:	466d      	mov	r5, sp
 8004ee8:	f106 0410 	add.w	r4, r6, #16
 8004eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004efc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004f00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004f04:	f005 fae2 	bl	800a4cc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f08:	e07d      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym6") == 0) get_filter<12>(sym6, h, g);
 8004f0a:	494a      	ldr	r1, [pc, #296]	@ (8005034 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba4>)
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7fb f97f 	bl	8000210 <strcmp>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d110      	bne.n	8004f3a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xaaa>
 8004f18:	4c47      	ldr	r4, [pc, #284]	@ (8005038 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba8>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	9314      	str	r3, [sp, #80]	@ 0x50
 8004f22:	4668      	mov	r0, sp
 8004f24:	f104 0310 	add.w	r3, r4, #16
 8004f28:	2250      	movs	r2, #80	@ 0x50
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	f019 fd3b 	bl	801e9a6 <memcpy>
 8004f30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f34:	f005 fced 	bl	800a912 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f38:	e065      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
 8004f3a:	4940      	ldr	r1, [pc, #256]	@ (800503c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbac>)
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7fb f967 	bl	8000210 <strcmp>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d110      	bne.n	8004f6a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xada>
 8004f48:	4c3d      	ldr	r4, [pc, #244]	@ (8005040 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb0>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	9318      	str	r3, [sp, #96]	@ 0x60
 8004f52:	4668      	mov	r0, sp
 8004f54:	f104 0310 	add.w	r3, r4, #16
 8004f58:	2260      	movs	r2, #96	@ 0x60
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	f019 fd23 	bl	801e9a6 <memcpy>
 8004f60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f64:	f005 fb1f 	bl	800a5a6 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f68:	e04d      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
 8004f6a:	4936      	ldr	r1, [pc, #216]	@ (8005044 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb4>)
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7fb f94f 	bl	8000210 <strcmp>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d110      	bne.n	8004f9a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb0a>
 8004f78:	4c33      	ldr	r4, [pc, #204]	@ (8005048 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb8>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	931d      	str	r3, [sp, #116]	@ 0x74
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	931c      	str	r3, [sp, #112]	@ 0x70
 8004f82:	4668      	mov	r0, sp
 8004f84:	f104 0310 	add.w	r3, r4, #16
 8004f88:	2270      	movs	r2, #112	@ 0x70
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f019 fd0b 	bl	801e9a6 <memcpy>
 8004f90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f94:	f005 fd27 	bl	800a9e6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f98:	e035      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
 8004f9a:	492c      	ldr	r1, [pc, #176]	@ (800504c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbbc>)
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7fb f937 	bl	8000210 <strcmp>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d110      	bne.n	8004fca <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb3a>
 8004fa8:	4c29      	ldr	r4, [pc, #164]	@ (8005050 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc0>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	9321      	str	r3, [sp, #132]	@ 0x84
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	9320      	str	r3, [sp, #128]	@ 0x80
 8004fb2:	4668      	mov	r0, sp
 8004fb4:	f104 0310 	add.w	r3, r4, #16
 8004fb8:	2280      	movs	r2, #128	@ 0x80
 8004fba:	4619      	mov	r1, r3
 8004fbc:	f019 fcf3 	bl	801e9a6 <memcpy>
 8004fc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fc4:	f005 fb60 	bl	800a688 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004fc8:	e01d      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
 8004fca:	4922      	ldr	r1, [pc, #136]	@ (8005054 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc4>)
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7fb f91f 	bl	8000210 <strcmp>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d110      	bne.n	8004ffa <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6a>
 8004fd8:	4c1f      	ldr	r4, [pc, #124]	@ (8005058 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc8>)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	9325      	str	r3, [sp, #148]	@ 0x94
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	9324      	str	r3, [sp, #144]	@ 0x90
 8004fe2:	4668      	mov	r0, sp
 8004fe4:	f104 0310 	add.w	r3, r4, #16
 8004fe8:	2290      	movs	r2, #144	@ 0x90
 8004fea:	4619      	mov	r1, r3
 8004fec:	f019 fcdb 	bl	801e9a6 <memcpy>
 8004ff0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ff4:	f005 fd68 	bl	800aac8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004ff8:	e005      	b.n	8005006 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else assert(0); // wavelet not in the list
 8004ffa:	4b18      	ldr	r3, [pc, #96]	@ (800505c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbcc>)
 8004ffc:	4a18      	ldr	r2, [pc, #96]	@ (8005060 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd0>)
 8004ffe:	2184      	movs	r1, #132	@ 0x84
 8005000:	4818      	ldr	r0, [pc, #96]	@ (8005064 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd4>)
 8005002:	f018 fb43 	bl	801d68c <__assert_func>
    }
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800500c:	08020898 	.word	0x08020898
 8005010:	08023e28 	.word	0x08023e28
 8005014:	080208a0 	.word	0x080208a0
 8005018:	08023eb8 	.word	0x08023eb8
 800501c:	080208a8 	.word	0x080208a8
 8005020:	08023ed8 	.word	0x08023ed8
 8005024:	080208b0 	.word	0x080208b0
 8005028:	08023f08 	.word	0x08023f08
 800502c:	080208b8 	.word	0x080208b8
 8005030:	08023f48 	.word	0x08023f48
 8005034:	080208c0 	.word	0x080208c0
 8005038:	08023f98 	.word	0x08023f98
 800503c:	080208c8 	.word	0x080208c8
 8005040:	08023ff8 	.word	0x08023ff8
 8005044:	080208d0 	.word	0x080208d0
 8005048:	08024068 	.word	0x08024068
 800504c:	080208d8 	.word	0x080208d8
 8005050:	080240e8 	.word	0x080240e8
 8005054:	080208e0 	.word	0x080208e0
 8005058:	08024178 	.word	0x08024178
 800505c:	080208e8 	.word	0x080208e8
 8005060:	080208ec 	.word	0x080208ec
 8005064:	08020954 	.word	0x08020954

08005068 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>:
      _Vector_base() = default;
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4618      	mov	r0, r3
 8005074:	f005 fdee 	bl	800ac54 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>:
      vector() = default;
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff ffeb 	bl	8005068 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>:

    static void calculate_entropy(const fvec &y, fvec &features)
 800509c:	b580      	push	{r7, lr}
 800509e:	ed2d 8b02 	vpush	{d8}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
    {
        fvec h;
 80050aa:	f107 0310 	add.w	r3, r7, #16
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ffe7 	bl	8005082 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        histo(y, 100, h, true);
 80050b4:	f107 0210 	add.w	r2, r7, #16
 80050b8:	2301      	movs	r3, #1
 80050ba:	2164      	movs	r1, #100	@ 0x64
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff f93a 	bl	8004336 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>
        // entropy = -sum(prob * log(prob)
        float entropy = 0.0f;
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 80050c8:	2300      	movs	r3, #0
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	e035      	b.n	800513a <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x9e>
            if (h[i] > 0.0f) {
 80050ce:	f107 0310 	add.w	r3, r7, #16
 80050d2:	69f9      	ldr	r1, [r7, #28]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f004 fefc 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80050da:	4603      	mov	r3, r0
 80050dc:	edd3 7a00 	vldr	s15, [r3]
 80050e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e8:	bfcc      	ite	gt
 80050ea:	2301      	movgt	r3, #1
 80050ec:	2300      	movle	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01f      	beq.n	8005134 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x98>
                entropy -= h[i] * log(h[i]);
 80050f4:	f107 0310 	add.w	r3, r7, #16
 80050f8:	69f9      	ldr	r1, [r7, #28]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f004 fee9 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005100:	4603      	mov	r3, r0
 8005102:	ed93 8a00 	vldr	s16, [r3]
 8005106:	f107 0310 	add.w	r3, r7, #16
 800510a:	69f9      	ldr	r1, [r7, #28]
 800510c:	4618      	mov	r0, r3
 800510e:	f004 fee0 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005112:	4603      	mov	r3, r0
 8005114:	edd3 7a00 	vldr	s15, [r3]
 8005118:	eeb0 0a67 	vmov.f32	s0, s15
 800511c:	f7fc f812 	bl	8001144 <_ZSt3logf>
 8005120:	eef0 7a40 	vmov.f32	s15, s0
 8005124:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005128:	ed97 7a03 	vldr	s14, [r7, #12]
 800512c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005130:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	3301      	adds	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	f107 0310 	add.w	r3, r7, #16
 800513e:	4618      	mov	r0, r3
 8005140:	f004 fd2a 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005144:	4602      	mov	r2, r0
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	4293      	cmp	r3, r2
 800514a:	bf34      	ite	cc
 800514c:	2301      	movcc	r3, #1
 800514e:	2300      	movcs	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1bb      	bne.n	80050ce <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x32>
            }
        }
        features.push_back(entropy);
 8005156:	f107 030c 	add.w	r3, r7, #12
 800515a:	4619      	mov	r1, r3
 800515c:	6838      	ldr	r0, [r7, #0]
 800515e:	f005 fd86 	bl	800ac6e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 8005162:	f107 0310 	add.w	r3, r7, #16
 8005166:	4618      	mov	r0, r3
 8005168:	f004 fe98 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	ecbd 8b02 	vpop	{d8}
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>:

    static float get_percentile_from_sorted(const fvec &sorted, float percentile)
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	ed87 0a00 	vstr	s0, [r7]
    {
        // adding 0.5 is a trick to get rounding out of C flooring behavior during cast
        size_t index = (size_t) ((percentile * (sorted.size()-1)) + 0.5);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f004 fd07 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800518a:	4603      	mov	r3, r0
 800518c:	3b01      	subs	r3, #1
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005196:	edd7 7a00 	vldr	s15, [r7]
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	ee17 0a90 	vmov	r0, s15
 80051a2:	f7fb fa01 	bl	80005a8 <__aeabi_f2d>
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf+0x64>)
 80051ac:	f7fb f89e 	bl	80002ec <__adddf3>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f7fb fd26 	bl	8000c08 <__aeabi_d2uiz>
 80051bc:	4603      	mov	r3, r0
 80051be:	60fb      	str	r3, [r7, #12]
        return sorted[index];
 80051c0:	68f9      	ldr	r1, [r7, #12]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f004 ff5f 	bl	800a086 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80051c8:	4603      	mov	r3, r0
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	ee07 3a90 	vmov	s15, r3
    }
 80051d0:	eeb0 0a67 	vmov.f32	s0, s15
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	3fe00000 	.word	0x3fe00000

080051e0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_statistics(const fvec &y, fvec &features, float mean)
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b097      	sub	sp, #92	@ 0x5c
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        fvec sorted = y;
 80051ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f004 ff6a 	bl	800a0ce <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>
        std::sort(sorted.begin(), sorted.end());
 80051fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80051fe:	4618      	mov	r0, r3
 8005200:	f004 fddd 	bl	8009dbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 8005204:	4604      	mov	r4, r0
 8005206:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800520a:	4618      	mov	r0, r3
 800520c:	f004 fde7 	bl	8009dde <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 8005210:	4603      	mov	r3, r0
 8005212:	4619      	mov	r1, r3
 8005214:	4620      	mov	r0, r4
 8005216:	f004 fed6 	bl	8009fc6 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>
        features.push_back(get_percentile_from_sorted(sorted,0.05));
 800521a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800521e:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 8005420 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x240>
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff ffa8 	bl	8005178 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 8005228:	eef0 7a40 	vmov.f32	s15, s0
 800522c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8005230:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005234:	4619      	mov	r1, r3
 8005236:	68b8      	ldr	r0, [r7, #8]
 8005238:	f005 fd3e 	bl	800acb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.25));
 800523c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005240:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff ff97 	bl	8005178 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800524a:	eef0 7a40 	vmov.f32	s15, s0
 800524e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8005252:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005256:	4619      	mov	r1, r3
 8005258:	68b8      	ldr	r0, [r7, #8]
 800525a:	f005 fd2d 	bl	800acb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.75));
 800525e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005262:	eeb6 0a08 	vmov.f32	s0, #104	@ 0x3f400000  0.750
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ff86 	bl	8005178 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800526c:	eef0 7a40 	vmov.f32	s15, s0
 8005270:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8005274:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005278:	4619      	mov	r1, r3
 800527a:	68b8      	ldr	r0, [r7, #8]
 800527c:	f005 fd1c 	bl	800acb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.95));
 8005280:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005284:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8005424 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x244>
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff ff75 	bl	8005178 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800528e:	eef0 7a40 	vmov.f32	s15, s0
 8005292:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8005296:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800529a:	4619      	mov	r1, r3
 800529c:	68b8      	ldr	r0, [r7, #8]
 800529e:	f005 fd0b 	bl	800acb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.5));
 80052a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80052a6:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ff64 	bl	8005178 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 80052b0:	eef0 7a40 	vmov.f32	s15, s0
 80052b4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 80052b8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80052bc:	4619      	mov	r1, r3
 80052be:	68b8      	ldr	r0, [r7, #8]
 80052c0:	f005 fcfa 	bl	800acb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f004 fc67 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80052ca:	4604      	mov	r4, r0
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f004 fe8a 	bl	8009fe6 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80052d8:	4622      	mov	r2, r4
 80052da:	2101      	movs	r1, #1
 80052dc:	f7fc f965 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 80052e0:	f107 0014 	add.w	r0, r7, #20
 80052e4:	2300      	movs	r3, #0
 80052e6:	2201      	movs	r2, #1
 80052e8:	2101      	movs	r1, #1
 80052ea:	f7fc f95e 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>

        features.push_back(mean);
 80052ee:	1d3b      	adds	r3, r7, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	68b8      	ldr	r0, [r7, #8]
 80052f4:	f005 fcbb 	bl	800ac6e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::stdev(&x, &out) == EIDSP_OK)
 80052f8:	f107 0214 	add.w	r2, r7, #20
 80052fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f7fc fc54 	bl	8001bb0 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x14e>
            features.push_back(out.get_row_ptr(0)[0]);
 8005318:	f107 0314 	add.w	r3, r7, #20
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f7fc f984 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005324:	4603      	mov	r3, r0
 8005326:	4619      	mov	r1, r3
 8005328:	68b8      	ldr	r0, [r7, #8]
 800532a:	f005 fca0 	bl	800ac6e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        features.push_back(numpy::variance(const_cast<float *>(y.data()), y.size()));
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f004 fe59 	bl	8009fe6 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005334:	4604      	mov	r4, r0
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f004 fc2e 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800533c:	4603      	mov	r3, r0
 800533e:	4619      	mov	r1, r3
 8005340:	4620      	mov	r0, r4
 8005342:	f7fd fcc1 	bl	8002cc8 <_ZN2ei5numpy8varianceEPfj>
 8005346:	eef0 7a40 	vmov.f32	s15, s0
 800534a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 800534e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005352:	4619      	mov	r1, r3
 8005354:	68b8      	ldr	r0, [r7, #8]
 8005356:	f005 fcaf 	bl	800acb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        if (numpy::rms(&x, &out) == EIDSP_OK)
 800535a:	f107 0214 	add.w	r2, r7, #20
 800535e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005362:	4611      	mov	r1, r2
 8005364:	4618      	mov	r0, r3
 8005366:	f7fc fbab 	bl	8001ac0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf0c      	ite	eq
 8005370:	2301      	moveq	r3, #1
 8005372:	2300      	movne	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1b0>
            features.push_back(out.get_row_ptr(0)[0]);
 800537a:	f107 0314 	add.w	r3, r7, #20
 800537e:	2100      	movs	r1, #0
 8005380:	4618      	mov	r0, r3
 8005382:	f7fc f953 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005386:	4603      	mov	r3, r0
 8005388:	4619      	mov	r1, r3
 800538a:	68b8      	ldr	r0, [r7, #8]
 800538c:	f005 fc6f 	bl	800ac6e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::skew(&x, &out) == EIDSP_OK)
 8005390:	f107 0214 	add.w	r2, r7, #20
 8005394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005398:	4611      	mov	r1, r2
 800539a:	4618      	mov	r0, r3
 800539c:	f7fc fc60 	bl	8001c60 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1e6>
            features.push_back(out.get_row_ptr(0)[0]);
 80053b0:	f107 0314 	add.w	r3, r7, #20
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fc f938 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 80053bc:	4603      	mov	r3, r0
 80053be:	4619      	mov	r1, r3
 80053c0:	68b8      	ldr	r0, [r7, #8]
 80053c2:	f005 fc54 	bl	800ac6e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::kurtosis(&x, &out) == EIDSP_OK)
 80053c6:	f107 0214 	add.w	r2, r7, #20
 80053ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053ce:	4611      	mov	r1, r2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fc fce1 	bl	8001d98 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x21c>
            features.push_back(out.get_row_ptr(0)[0]);
 80053e6:	f107 0314 	add.w	r3, r7, #20
 80053ea:	2100      	movs	r1, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fc f91d 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 80053f2:	4603      	mov	r3, r0
 80053f4:	4619      	mov	r1, r3
 80053f6:	68b8      	ldr	r0, [r7, #8]
 80053f8:	f005 fc39 	bl	800ac6e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 80053fc:	f107 0314 	add.w	r3, r7, #20
 8005400:	4618      	mov	r0, r3
 8005402:	f7fc f8fd 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8005406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800540a:	4618      	mov	r0, r3
 800540c:	f7fc f8f8 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8005410:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005414:	4618      	mov	r0, r3
 8005416:	f004 fd41 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800541a:	375c      	adds	r7, #92	@ 0x5c
 800541c:	46bd      	mov	sp, r7
 800541e:	bd90      	pop	{r4, r7, pc}
 8005420:	3d4ccccd 	.word	0x3d4ccccd
 8005424:	3f733333 	.word	0x3f733333

08005428 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_crossings(const fvec &y, fvec &features, float mean)
 8005428:	b580      	push	{r7, lr}
 800542a:	ed2d 8b02 	vpush	{d8}
 800542e:	b08a      	sub	sp, #40	@ 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        size_t zc = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
        for (size_t i = 1; i < y.size(); i++) {
 800543e:	2301      	movs	r3, #1
 8005440:	623b      	str	r3, [r7, #32]
 8005442:	e021      	b.n	8005488 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x60>
            if (y[i] * y[i - 1] < 0) {
 8005444:	6a39      	ldr	r1, [r7, #32]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f004 fe1d 	bl	800a086 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800544c:	4603      	mov	r3, r0
 800544e:	ed93 8a00 	vldr	s16, [r3]
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	3b01      	subs	r3, #1
 8005456:	4619      	mov	r1, r3
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f004 fe14 	bl	800a086 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800545e:	4603      	mov	r3, r0
 8005460:	edd3 7a00 	vldr	s15, [r3]
 8005464:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005470:	bf4c      	ite	mi
 8005472:	2301      	movmi	r3, #1
 8005474:	2300      	movpl	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x5a>
                zc++;
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	3301      	adds	r3, #1
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
        for (size_t i = 1; i < y.size(); i++) {
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	3301      	adds	r3, #1
 8005486:	623b      	str	r3, [r7, #32]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f004 fb85 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800548e:	4602      	mov	r2, r0
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	4293      	cmp	r3, r2
 8005494:	bf34      	ite	cc
 8005496:	2301      	movcc	r3, #1
 8005498:	2300      	movcs	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1d1      	bne.n	8005444 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1c>
            }
        }
        features.push_back(zc / (float)y.size());
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f004 fb74 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80054b0:	ee07 0a90 	vmov	s15, r0
 80054b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054b8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80054bc:	edc7 7a04 	vstr	s15, [r7, #16]
 80054c0:	f107 0310 	add.w	r3, r7, #16
 80054c4:	4619      	mov	r1, r3
 80054c6:	68b8      	ldr	r0, [r7, #8]
 80054c8:	f005 fbf6 	bl	800acb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        size_t mc = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 80054d0:	2301      	movs	r3, #1
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	e029      	b.n	800552a <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x102>
            if ((y[i] - mean) * (y[i - 1] - mean) < 0) {
 80054d6:	69b9      	ldr	r1, [r7, #24]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f004 fdd4 	bl	800a086 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80054de:	4603      	mov	r3, r0
 80054e0:	ed93 7a00 	vldr	s14, [r3]
 80054e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80054e8:	ee37 8a67 	vsub.f32	s16, s14, s15
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	4619      	mov	r1, r3
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f004 fdc7 	bl	800a086 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80054f8:	4603      	mov	r3, r0
 80054fa:	ed93 7a00 	vldr	s14, [r3]
 80054fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005506:	ee68 7a27 	vmul.f32	s15, s16, s15
 800550a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	bf4c      	ite	mi
 8005514:	2301      	movmi	r3, #1
 8005516:	2300      	movpl	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xfc>
                mc++;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3301      	adds	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	3301      	adds	r3, #1
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f004 fb34 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005530:	4602      	mov	r2, r0
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	4293      	cmp	r3, r2
 8005536:	bf34      	ite	cc
 8005538:	2301      	movcc	r3, #1
 800553a:	2300      	movcs	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1c9      	bne.n	80054d6 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xae>
            }
        }
        features.push_back(mc / (float)y.size());
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f004 fb23 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005552:	ee07 0a90 	vmov	s15, r0
 8005556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800555a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800555e:	edc7 7a05 	vstr	s15, [r7, #20]
 8005562:	f107 0314 	add.w	r3, r7, #20
 8005566:	4619      	mov	r1, r3
 8005568:	68b8      	ldr	r0, [r7, #8]
 800556a:	f005 fba5 	bl	800acb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
    }
 800556e:	bf00      	nop
 8005570:	3728      	adds	r7, #40	@ 0x28
 8005572:	46bd      	mov	sp, r7
 8005574:	ecbd 8b02 	vpop	{d8}
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>:

    static void
    dwt(const float *x, size_t nx, const float *h, const float *g, size_t nh, fvec &a, fvec &d)
 800557c:	b5b0      	push	{r4, r5, r7, lr}
 800557e:	b090      	sub	sp, #64	@ 0x40
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
    {
        assert(nh <= 20 && nh > 0 && nx > 0);
 800558a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800558c:	2b14      	cmp	r3, #20
 800558e:	d805      	bhi.n	800559c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c>
 800559c:	4b67      	ldr	r3, [pc, #412]	@ (800573c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c0>)
 800559e:	4a68      	ldr	r2, [pc, #416]	@ (8005740 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c4>)
 80055a0:	21cb      	movs	r1, #203	@ 0xcb
 80055a2:	4868      	ldr	r0, [pc, #416]	@ (8005744 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c8>)
 80055a4:	f018 f872 	bl	801d68c <__assert_func>
        size_t nx_padded = nx + nh * 2 - 2;
 80055a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055aa:	005a      	lsls	r2, r3, #1
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4413      	add	r3, r2
 80055b0:	3b02      	subs	r3, #2
 80055b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        fvec x_padded(nx_padded);
 80055b4:	f107 0220 	add.w	r2, r7, #32
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055be:	4618      	mov	r0, r3
 80055c0:	f004 fc52 	bl	8009e68 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>

        // symmetric padding (default in PyWavelet)
        for (size_t i = 0; i < nh - 2; i++)
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c8:	e012      	b.n	80055f0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x74>
            x_padded[i] = x[nh - 3 - i];
 80055ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	3b03      	subs	r3, #3
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	18d4      	adds	r4, r2, r3
 80055d8:	f107 0314 	add.w	r3, r7, #20
 80055dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055de:	4618      	mov	r0, r3
 80055e0:	f004 fc77 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh - 2; i++)
 80055ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ec:	3301      	adds	r3, #1
 80055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f2:	3b02      	subs	r3, #2
 80055f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d3e7      	bcc.n	80055ca <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e>
        for (size_t i = 0; i < nx; i++)
 80055fa:	2300      	movs	r3, #0
 80055fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055fe:	e013      	b.n	8005628 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xac>
            x_padded[i + nh - 2] = x[i];
 8005600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	18d4      	adds	r4, r2, r3
 8005608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800560a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800560c:	4413      	add	r3, r2
 800560e:	1e9a      	subs	r2, r3, #2
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f004 fc5b 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800561c:	4602      	mov	r2, r0
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nx; i++)
 8005622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005624:	3301      	adds	r3, #1
 8005626:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005628:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	d3e7      	bcc.n	8005600 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x84>
        for (size_t i = 0; i < nh; i++)
 8005630:	2300      	movs	r3, #0
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
 8005634:	e018      	b.n	8005668 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xec>
            x_padded[i + nx + nh - 2] = x[nx - 1 - i];
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	18d4      	adds	r4, r2, r3
 8005644:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	441a      	add	r2, r3
 800564a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564c:	4413      	add	r3, r2
 800564e:	1e9a      	subs	r2, r3, #2
 8005650:	f107 0314 	add.w	r3, r7, #20
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f004 fc3b 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800565c:	4602      	mov	r2, r0
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh; i++)
 8005662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005664:	3301      	adds	r3, #1
 8005666:	637b      	str	r3, [r7, #52]	@ 0x34
 8005668:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800566a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800566c:	429a      	cmp	r2, r3
 800566e:	d3e2      	bcc.n	8005636 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xba>

        size_t ny = (nx + nh - 1) / 2;
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005674:	4413      	add	r3, r2
 8005676:	3b01      	subs	r3, #1
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	62bb      	str	r3, [r7, #40]	@ 0x28
        a.resize(ny);
 800567c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005680:	f004 fe61 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        d.resize(ny);
 8005684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005686:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005688:	f004 fe5d 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>

        // decimate and filter
        const float *xx = x_padded.data();
 800568c:	f107 0314 	add.w	r3, r7, #20
 8005690:	4618      	mov	r0, r3
 8005692:	f004 fa91 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005696:	6278      	str	r0, [r7, #36]	@ 0x24
        for (size_t i = 0; i < ny; i++) {
 8005698:	2300      	movs	r3, #0
 800569a:	633b      	str	r3, [r7, #48]	@ 0x30
 800569c:	e026      	b.n	80056ec <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x170>
            a[i] = dot(xx + 2 * i, h, nh);
 800569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a4:	18d5      	adds	r5, r2, r3
 80056a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056a8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80056aa:	f004 fc12 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80056ae:	4604      	mov	r4, r0
 80056b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7fe fe0d 	bl	80042d4 <_ZN2ei8spectral3dotEPKfS2_j>
 80056ba:	eef0 7a40 	vmov.f32	s15, s0
 80056be:	edc4 7a00 	vstr	s15, [r4]
            d[i] = dot(xx + 2 * i, g, nh);
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c8:	18d5      	adds	r5, r2, r3
 80056ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056cc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80056ce:	f004 fc00 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80056d2:	4604      	mov	r4, r0
 80056d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	4628      	mov	r0, r5
 80056da:	f7fe fdfb 	bl	80042d4 <_ZN2ei8spectral3dotEPKfS2_j>
 80056de:	eef0 7a40 	vmov.f32	s15, s0
 80056e2:	edc4 7a00 	vstr	s15, [r4]
        for (size_t i = 0; i < ny; i++) {
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	3301      	adds	r3, #1
 80056ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d3d4      	bcc.n	800569e <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x122>
        }

        numpy::underflow_handling(d.data(), d.size());
 80056f4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80056f6:	f004 fa5f 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80056fa:	4604      	mov	r4, r0
 80056fc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80056fe:	f004 fa4b 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005702:	4603      	mov	r3, r0
 8005704:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8005748 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 8005708:	4619      	mov	r1, r3
 800570a:	4620      	mov	r0, r4
 800570c:	f7fd fb1a 	bl	8002d44 <_ZN2ei5numpy18underflow_handlingEPfjf>
        numpy::underflow_handling(a.data(), a.size());
 8005710:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005712:	f004 fa51 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005716:	4604      	mov	r4, r0
 8005718:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800571a:	f004 fa3d 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800571e:	4603      	mov	r3, r0
 8005720:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8005748 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 8005724:	4619      	mov	r1, r3
 8005726:	4620      	mov	r0, r4
 8005728:	f7fd fb0c 	bl	8002d44 <_ZN2ei5numpy18underflow_handlingEPfjf>
    }
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4618      	mov	r0, r3
 8005732:	f004 fbb3 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005736:	3740      	adds	r7, #64	@ 0x40
 8005738:	46bd      	mov	sp, r7
 800573a:	bdb0      	pop	{r4, r5, r7, pc}
 800573c:	080209d4 	.word	0x080209d4
 8005740:	080209f4 	.word	0x080209f4
 8005744:	08020954 	.word	0x08020954
 8005748:	33d6bf95 	.word	0x33d6bf95

0800574c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>:

    static void extract_features(fvec& y, fvec &features)
 800574c:	b590      	push	{r4, r7, lr}
 800574e:	b08d      	sub	sp, #52	@ 0x34
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
    {
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f004 fa1e 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800575c:	4604      	mov	r4, r0
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f004 fa2a 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005764:	4603      	mov	r3, r0
 8005766:	f107 001c 	add.w	r0, r7, #28
 800576a:	4622      	mov	r2, r4
 800576c:	2101      	movs	r1, #1
 800576e:	f7fb ff1c 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 8005772:	f107 000c 	add.w	r0, r7, #12
 8005776:	2300      	movs	r3, #0
 8005778:	2201      	movs	r2, #1
 800577a:	2101      	movs	r1, #1
 800577c:	f7fb ff15 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
        if (numpy::mean(&x, &out) != EIDSP_OK)
 8005780:	f107 020c 	add.w	r2, r7, #12
 8005784:	f107 031c 	add.w	r3, r7, #28
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f7fc f9d4 	bl	8001b38 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x60>
            assert(0);
 80057a0:	4b15      	ldr	r3, [pc, #84]	@ (80057f8 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xac>)
 80057a2:	4a16      	ldr	r2, [pc, #88]	@ (80057fc <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb0>)
 80057a4:	21eb      	movs	r1, #235	@ 0xeb
 80057a6:	4816      	ldr	r0, [pc, #88]	@ (8005800 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb4>)
 80057a8:	f017 ff70 	bl	801d68c <__assert_func>
        float mean = out.get_row_ptr(0)[0];
 80057ac:	f107 030c 	add.w	r3, r7, #12
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fb ff3a 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 80057b8:	4603      	mov	r3, r0
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        calculate_entropy(y, features);
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fc6b 	bl	800509c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>
        calculate_crossings(y, features, mean);
 80057c6:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fe2b 	bl	8005428 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
        calculate_statistics(y, features, mean);
 80057d2:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fd01 	bl	80051e0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
    }
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fb ff0c 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 80057e8:	f107 031c 	add.w	r3, r7, #28
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fb ff07 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 80057f2:	3734      	adds	r7, #52	@ 0x34
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd90      	pop	{r4, r7, pc}
 80057f8:	080208e8 	.word	0x080208e8
 80057fc:	08020a80 	.word	0x08020a80
 8005800:	08020954 	.word	0x08020954

08005804 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static void
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
 8005804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005808:	b098      	sub	sp, #96	@ 0x60
 800580a:	af04      	add	r7, sp, #16
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
    {
        assert(level > 0 && level < 8);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	dd02      	ble.n	8005820 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1c>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b07      	cmp	r3, #7
 800581e:	dd05      	ble.n	800582c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x28>
 8005820:	4b6e      	ldr	r3, [pc, #440]	@ (80059dc <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1d8>)
 8005822:	4a6f      	ldr	r2, [pc, #444]	@ (80059e0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1dc>)
 8005824:	21f6      	movs	r1, #246	@ 0xf6
 8005826:	486f      	ldr	r0, [pc, #444]	@ (80059e4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1e0>)
 8005828:	f017 ff30 	bl	801d68c <__assert_func>

        fvec h;
 800582c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fc26 	bl	8005082 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec g;
 8005836:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fc21 	bl	8005082 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        find_filter(wav, h, g);
 8005840:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005844:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fe fe20 	bl	8004490 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>

        features.clear();
 8005850:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005852:	f005 fa42 	bl	800acda <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>
        fvec a;
 8005856:	f107 0320 	add.w	r3, r7, #32
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fc11 	bl	8005082 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec d;
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fc0c 	bl	8005082 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        dwt(x, len, h.data(), g.data(), h.size(), a, d);
 800586a:	68bc      	ldr	r4, [r7, #8]
 800586c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005870:	4618      	mov	r0, r3
 8005872:	f004 f9a1 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005876:	4605      	mov	r5, r0
 8005878:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800587c:	4618      	mov	r0, r3
 800587e:	f004 f99b 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005882:	4606      	mov	r6, r0
 8005884:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005888:	4618      	mov	r0, r3
 800588a:	f004 f985 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800588e:	4602      	mov	r2, r0
 8005890:	f107 0314 	add.w	r3, r7, #20
 8005894:	9302      	str	r3, [sp, #8]
 8005896:	f107 0320 	add.w	r3, r7, #32
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	9200      	str	r2, [sp, #0]
 800589e:	4633      	mov	r3, r6
 80058a0:	462a      	mov	r2, r5
 80058a2:	4621      	mov	r1, r4
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7ff fe69 	bl	800557c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
        extract_features(d, features);
 80058aa:	f107 0314 	add.w	r3, r7, #20
 80058ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ff4b 	bl	800574c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 1; l < level; l++) {
 80058b6:	2301      	movs	r3, #1
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ba:	e033      	b.n	8005924 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x120>
            dwt(a.data(), a.size(), h.data(), g.data(), h.size(), a, d);
 80058bc:	f107 0320 	add.w	r3, r7, #32
 80058c0:	4618      	mov	r0, r3
 80058c2:	f004 f979 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058c6:	4604      	mov	r4, r0
 80058c8:	f107 0320 	add.w	r3, r7, #32
 80058cc:	4618      	mov	r0, r3
 80058ce:	f004 f963 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80058d2:	4605      	mov	r5, r0
 80058d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80058d8:	4618      	mov	r0, r3
 80058da:	f004 f96d 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058de:	4606      	mov	r6, r0
 80058e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058e4:	4618      	mov	r0, r3
 80058e6:	f004 f967 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058ea:	4680      	mov	r8, r0
 80058ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80058f0:	4618      	mov	r0, r3
 80058f2:	f004 f951 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80058f6:	4602      	mov	r2, r0
 80058f8:	f107 0314 	add.w	r3, r7, #20
 80058fc:	9302      	str	r3, [sp, #8]
 80058fe:	f107 0320 	add.w	r3, r7, #32
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	9200      	str	r2, [sp, #0]
 8005906:	4643      	mov	r3, r8
 8005908:	4632      	mov	r2, r6
 800590a:	4629      	mov	r1, r5
 800590c:	4620      	mov	r0, r4
 800590e:	f7ff fe35 	bl	800557c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
            extract_features(d, features);
 8005912:	f107 0314 	add.w	r3, r7, #20
 8005916:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff ff17 	bl	800574c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>
        for (int l = 1; l < level; l++) {
 800591e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005920:	3301      	adds	r3, #1
 8005922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005924:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	dbc7      	blt.n	80058bc <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xb8>
        }

        extract_features(a, features);
 800592c:	f107 0320 	add.w	r3, r7, #32
 8005930:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff ff0a 	bl	800574c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 8005938:	2300      	movs	r3, #0
 800593a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800593c:	e02c      	b.n	8005998 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x194>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 800593e:	2300      	movs	r3, #0
 8005940:	647b      	str	r3, [r7, #68]	@ 0x44
 8005942:	e023      	b.n	800598c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x188>
                std::swap(
                    features[l * NUM_FEATHERS_PER_COMP + i],
 8005944:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	461a      	mov	r2, r3
 8005950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005952:	4413      	add	r3, r2
 8005954:	4619      	mov	r1, r3
 8005956:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005958:	f004 fabb 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800595c:	4604      	mov	r4, r0
                    features[(level - l) * NUM_FEATHERS_PER_COMP + i]);
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	461a      	mov	r2, r3
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	461a      	mov	r2, r3
 8005970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005972:	4413      	add	r3, r2
 8005974:	4619      	mov	r1, r3
 8005976:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005978:	f004 faab 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800597c:	4603      	mov	r3, r0
                std::swap(
 800597e:	4619      	mov	r1, r3
 8005980:	4620      	mov	r0, r4
 8005982:	f005 f9b8 	bl	800acf6 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 8005986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005988:	3301      	adds	r3, #1
 800598a:	647b      	str	r3, [r7, #68]	@ 0x44
 800598c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800598e:	2b0d      	cmp	r3, #13
 8005990:	ddd8      	ble.n	8005944 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x140>
        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 8005992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005994:	3301      	adds	r3, #1
 8005996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	da00      	bge.n	80059a0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x19c>
 800599e:	3301      	adds	r3, #1
 80059a0:	105b      	asrs	r3, r3, #1
 80059a2:	461a      	mov	r2, r3
 80059a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a6:	4293      	cmp	r3, r2
 80059a8:	ddc9      	ble.n	800593e <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x13a>
            }
        }
    }
 80059aa:	f107 0314 	add.w	r3, r7, #20
 80059ae:	4618      	mov	r0, r3
 80059b0:	f004 fa74 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80059b4:	f107 0320 	add.w	r3, r7, #32
 80059b8:	4618      	mov	r0, r3
 80059ba:	f004 fa6f 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80059be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80059c2:	4618      	mov	r0, r3
 80059c4:	f004 fa6a 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80059c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80059cc:	4618      	mov	r0, r3
 80059ce:	f004 fa65 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80059d2:	3750      	adds	r7, #80	@ 0x50
 80059d4:	46bd      	mov	sp, r7
 80059d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059da:	bf00      	nop
 80059dc:	08020ae0 	.word	0x08020ae0
 80059e0:	08020af8 	.word	0x08020af8
 80059e4:	08020954 	.word	0x08020954

080059e8 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static int dwt_features(const float *x, int len, const char *wav, int level, fvec &features)
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
    {
        assert(level <= 7);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b07      	cmp	r3, #7
 80059fa:	dd06      	ble.n	8005a0a <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x22>
 80059fc:	4b17      	ldr	r3, [pc, #92]	@ (8005a5c <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x74>)
 80059fe:	4a18      	ldr	r2, [pc, #96]	@ (8005a60 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 8005a00:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8005a04:	4817      	ldr	r0, [pc, #92]	@ (8005a64 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 8005a06:	f017 fe41 	bl	801d68c <__assert_func>

        assert(features.size() == 0); // make sure features is empty
 8005a0a:	69b8      	ldr	r0, [r7, #24]
 8005a0c:	f004 f8c4 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d006      	beq.n	8005a24 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x3c>
 8005a16:	4b14      	ldr	r3, [pc, #80]	@ (8005a68 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x80>)
 8005a18:	4a11      	ldr	r2, [pc, #68]	@ (8005a60 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 8005a1a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005a1e:	4811      	ldr	r0, [pc, #68]	@ (8005a64 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 8005a20:	f017 fe34 	bl	801d68c <__assert_func>
        features.reserve((level + 1) * NUM_FEATHERS_PER_COMP);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	4619      	mov	r1, r3
 8005a34:	69b8      	ldr	r0, [r7, #24]
 8005a36:	f005 f993 	bl	800ad60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>

        wavedec_features(x, len, wav, level, features);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff fedd 	bl	8005804 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>

        return features.size();
 8005a4a:	69b8      	ldr	r0, [r7, #24]
 8005a4c:	f004 f8a4 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005a50:	4603      	mov	r3, r0
    }
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08020b68 	.word	0x08020b68
 8005a60:	08020b74 	.word	0x08020b74
 8005a64:	08020954 	.word	0x08020954
 8005a68:	08020be0 	.word	0x08020be0

08005a6c <_ZN2ei8spectral7wavelet14check_min_sizeEii>:

    static bool check_min_size(int len, int level)
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
    {
        int min_size = 32 * (1 << level);
 8005a76:	2220      	movs	r2, #32
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	60fb      	str	r3, [r7, #12]
        return (len >= min_size);
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	bfac      	ite	ge
 8005a88:	2301      	movge	r3, #1
 8005a8a:	2300      	movlt	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
    }
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

public:
    static int extract_wavelet_features(
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b094      	sub	sp, #80	@ 0x50
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7fb fe21 	bl	80016f4 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7fb ff29 	bl	8001914 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8005ac2:	63b8      	str	r0, [r7, #56]	@ 0x38
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	e0b0      	b.n	8005c30 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	4959      	ldr	r1, [pc, #356]	@ (8005c38 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19c>)
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fa fb9b 	bl	8000210 <strcmp>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d117      	bne.n	8005b10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x74>
            if (config->filter_order) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d034      	beq.n	8005b52 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	edd3 7a06 	vldr	s15, [r3, #24]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	4619      	mov	r1, r3
 8005af6:	eef0 0a67 	vmov.f32	s1, s15
 8005afa:	ed97 0a00 	vldr	s0, [r7]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7fd fe42 	bl	8003788 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8005b04:	6338      	str	r0, [r7, #48]	@ 0x30
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d022      	beq.n	8005b52 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	e08f      	b.n	8005c30 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	4949      	ldr	r1, [pc, #292]	@ (8005c3c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a0>)
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fa fb7a 	bl	8000210 <strcmp>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d117      	bne.n	8005b52 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
            if (config->filter_order) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d013      	beq.n	8005b52 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	4619      	mov	r1, r3
 8005b38:	eef0 0a67 	vmov.f32	s1, s15
 8005b3c:	ed97 0a00 	vldr	s0, [r7]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7fd fe57 	bl	80037f4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8005b46:	6378      	str	r0, [r7, #52]	@ 0x34
 8005b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b50:	e06e      	b.n	8005c30 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    config->filter_cutoff,
                    config->filter_order));
            }
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7fe fb86 	bl	8004264 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8005b58:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc8>
 8005b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b62:	e065      	b.n	8005c30 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        int out_idx = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	647b      	str	r3, [r7, #68]	@ 0x44
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005b68:	2300      	movs	r3, #0
 8005b6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b6c:	e05a      	b.n	8005c24 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x188>
            float *data_window = input_matrix->get_row_ptr(row);
 8005b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7fb fd5b 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005b76:	62b8      	str	r0, [r7, #40]	@ 0x28
            size_t data_size = input_matrix->cols;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (!check_min_size(data_size, config->wavelet_level))
 8005b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b84:	4619      	mov	r1, r3
 8005b86:	4610      	mov	r0, r2
 8005b88:	f7ff ff70 	bl	8005a6c <_ZN2ei8spectral7wavelet14check_min_sizeEii>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f083 0301 	eor.w	r3, r3, #1
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
                EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8005b98:	4b29      	ldr	r3, [pc, #164]	@ (8005c40 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a4>)
 8005b9a:	e049      	b.n	8005c30 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

            fvec features;
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fa6e 	bl	8005082 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
            size_t num_features = dwt_features(
 8005ba6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005bb0:	f107 0314 	add.w	r3, r7, #20
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bba:	f7ff ff15 	bl	80059e8 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>
 8005bbe:	4603      	mov	r3, r0
                data_window,
                data_size,
                config->wavelet,
                config->wavelet_level,
                features);
 8005bc0:	623b      	str	r3, [r7, #32]

            assert(num_features == output_matrix->cols / input_matrix->rows);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d006      	beq.n	8005be2 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c44 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a8>)
 8005bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c48 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1ac>)
 8005bd8:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8005bdc:	481b      	ldr	r0, [pc, #108]	@ (8005c4c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b0>)
 8005bde:	f017 fd55 	bl	801d68c <__assert_func>
            for (size_t i = 0; i < num_features; i++) {
 8005be2:	2300      	movs	r3, #0
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005be6:	e011      	b.n	8005c0c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x170>
                output_matrix->buffer[out_idx++] = features[i];
 8005be8:	f107 0314 	add.w	r3, r7, #20
 8005bec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f004 f96f 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	6479      	str	r1, [r7, #68]	@ 0x44
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	6802      	ldr	r2, [r0, #0]
 8005c04:	601a      	str	r2, [r3, #0]
            for (size_t i = 0; i < num_features; i++) {
 8005c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c08:	3301      	adds	r3, #1
 8005c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3e9      	bcc.n	8005be8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14c>
            }
        }
 8005c14:	f107 0314 	add.w	r3, r7, #20
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f004 f93f 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c20:	3301      	adds	r3, #1
 8005c22:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d39f      	bcc.n	8005b6e <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd2>
        return EIDSP_OK;
 8005c2e:	2300      	movs	r3, #0
    }
 8005c30:	4618      	mov	r0, r3
 8005c32:	3748      	adds	r7, #72	@ 0x48
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	08020bf8 	.word	0x08020bf8
 8005c3c:	08020bfc 	.word	0x08020bfc
 8005c40:	fffffc11 	.word	0xfffffc11
 8005c44:	08020c04 	.word	0x08020c04
 8005c48:	08020c40 	.word	0x08020c40
 8005c4c:	08020954 	.word	0x08020954

08005c50 <_ZN2ei6signal18get_decimated_sizeEjj>:
        for (size_t ix = 0; ix < output_size; ix++) {
            output[ix] = filtered[ix * factor];
        }
    }

    static size_t get_decimated_size(size_t input_size, size_t factor)
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
    {
        return (input_size + factor - 1) / factor;
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	4413      	add	r3, r2
 8005c60:	1e5a      	subs	r2, r3, #1
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	fbb2 f3f3 	udiv	r3, r2, r3
    }
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <_ZN2ei6signal7sosfiltC1EPKfS3_j>:
        const float *coeff; // 6 * num_sections coefficients
        float* zi;
        fvec zi_vec; // 2 * num_sections initial conditions
        size_t num_sections;

        sosfilt(const float *coeff_, const float *zi_, size_t num_sections_)
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
            : coeff(coeff_),
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	601a      	str	r2, [r3, #0]
              zi_vec(zi_, zi_ + (num_sections_ * 2)),
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f103 0008 	add.w	r0, r3, #8
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	441a      	add	r2, r3
 8005c96:	f107 0314 	add.w	r3, r7, #20
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	f005 f8e0 	bl	800ae60 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>
              num_sections(num_sections_)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	615a      	str	r2, [r3, #20]
        {
            zi = zi_vec.data();
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	4618      	mov	r0, r3
 8005cac:	f003 ff84 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]
        }
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <_ZN2ei6signal7sosfilt3runEPKfjPf>:
         * This is the counterpart of scipy.signal.sosfilt .
         * @param input Input signal
         * @param output Output signal. Can be the same as input for in place
         * @param x_size Minimum size of input and output signal
         */
        void run(const float *input, const size_t size, float* output)
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
        {
            assert(num_sections > 0);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d105      	bne.n	8005ce2 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x22>
 8005cd6:	4b21      	ldr	r3, [pc, #132]	@ (8005d5c <_ZN2ei6signal7sosfilt3runEPKfjPf+0x9c>)
 8005cd8:	4a21      	ldr	r2, [pc, #132]	@ (8005d60 <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa0>)
 8005cda:	216e      	movs	r1, #110	@ 0x6e
 8005cdc:	4821      	ldr	r0, [pc, #132]	@ (8005d64 <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa4>)
 8005cde:	f017 fcd5 	bl	801d68c <__assert_func>

            iir2(input, output, size, coeff, coeff + 3, zi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6819      	ldr	r1, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	6852      	ldr	r2, [r2, #4]
 8005cf0:	9201      	str	r2, [sp, #4]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	68b8      	ldr	r0, [r7, #8]
 8005cfc:	f000 f8cc 	bl	8005e98 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>

            for (size_t sect = 1; sect < num_sections; sect++) {
 8005d00:	2301      	movs	r3, #1
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	e020      	b.n	8005d48 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x88>
                iir2(
                    output,
                    output,
                    size,
                    coeff + sect * 6,
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6819      	ldr	r1, [r3, #0]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	4413      	add	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
                iir2(
 8005d14:	18c8      	adds	r0, r1, r3
                    coeff + sect * 6 + 3,
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6819      	ldr	r1, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	330c      	adds	r3, #12
                iir2(
 8005d26:	440b      	add	r3, r1
                    zi + sect * 2);
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	6851      	ldr	r1, [r2, #4]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	00d2      	lsls	r2, r2, #3
                iir2(
 8005d30:	440a      	add	r2, r1
 8005d32:	9201      	str	r2, [sp, #4]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	4603      	mov	r3, r0
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6838      	ldr	r0, [r7, #0]
 8005d3e:	f000 f8ab 	bl	8005e98 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>
            for (size_t sect = 1; sect < num_sections; sect++) {
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	3301      	adds	r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d3d9      	bcc.n	8005d06 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x46>
            }
        }
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	08020cc4 	.word	0x08020cc4
 8005d60:	08020cd8 	.word	0x08020cd8
 8005d64:	08020d14 	.word	0x08020d14

08005d68 <_ZN2ei6signal7sosfilt4initEf>:

        void init(float x0)
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	ed87 0a00 	vstr	s0, [r7]
        {
            for (size_t sect = 0; sect < num_sections; sect++) {
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e028      	b.n	8005dcc <_ZN2ei6signal7sosfilt4initEf+0x64>
                zi[sect * 2] *= x0;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4413      	add	r3, r2
 8005d84:	ed93 7a00 	vldr	s14, [r3]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4413      	add	r3, r2
 8005d92:	edd7 7a00 	vldr	s15, [r7]
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc3 7a00 	vstr	s15, [r3]
                zi[sect * 2 + 1] *= x0;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	3304      	adds	r3, #4
 8005da8:	4413      	add	r3, r2
 8005daa:	ed93 7a00 	vldr	s14, [r3]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	3304      	adds	r3, #4
 8005db8:	4413      	add	r3, r2
 8005dba:	edd7 7a00 	vldr	s15, [r7]
 8005dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc2:	edc3 7a00 	vstr	s15, [r3]
            for (size_t sect = 0; sect < num_sections; sect++) {
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d3d1      	bcc.n	8005d7a <_ZN2ei6signal7sosfilt4initEf+0x12>
            }
        }
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>:
     * @param input Input signal
     * @param output Output signal
     * @param factor Decimation factor
     * @param sos Second-order section
     */
    static void decimate_simple(
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	@ 0x28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
        float *output,
        const size_t output_size,
        size_t factor,
        sosfilt &sos)
    {
        sos.init(input[0]);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	edd3 7a00 	vldr	s15, [r3]
 8005df8:	eeb0 0a67 	vmov.f32	s0, s15
 8005dfc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005dfe:	f7ff ffb3 	bl	8005d68 <_ZN2ei6signal7sosfilt4initEf>

        fvec filtered(input_size);
 8005e02:	f107 021c 	add.w	r2, r7, #28
 8005e06:	f107 0310 	add.w	r3, r7, #16
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f004 f82b 	bl	8009e68 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
        sos.run(input, input_size, filtered.data());
 8005e12:	f107 0310 	add.w	r3, r7, #16
 8005e16:	4618      	mov	r0, r3
 8005e18:	f003 fece 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	68f9      	ldr	r1, [r7, #12]
 8005e22:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005e24:	f7ff ff4c 	bl	8005cc0 <_ZN2ei6signal7sosfilt3runEPKfjPf>

        size_t expected_size = get_decimated_size(input_size, factor);
 8005e28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e2a:	68b8      	ldr	r0, [r7, #8]
 8005e2c:	f7ff ff10 	bl	8005c50 <_ZN2ei6signal18get_decimated_sizeEjj>
 8005e30:	6238      	str	r0, [r7, #32]
        assert(output_size >= expected_size);
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d205      	bcs.n	8005e46 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x62>
 8005e3a:	4b14      	ldr	r3, [pc, #80]	@ (8005e8c <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xa8>)
 8005e3c:	4a14      	ldr	r2, [pc, #80]	@ (8005e90 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xac>)
 8005e3e:	219c      	movs	r1, #156	@ 0x9c
 8005e40:	4814      	ldr	r0, [pc, #80]	@ (8005e94 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xb0>)
 8005e42:	f017 fc23 	bl	801d68c <__assert_func>

        for (size_t ix = 0; ix < expected_size; ix++) {
 8005e46:	2300      	movs	r3, #0
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4a:	e013      	b.n	8005e74 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x90>
            output[ix] = filtered[ix * factor];
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e50:	fb03 f202 	mul.w	r2, r3, r2
 8005e54:	f107 0310 	add.w	r3, r7, #16
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f004 f839 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005e60:	4601      	mov	r1, r0
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4413      	add	r3, r2
 8005e6a:	680a      	ldr	r2, [r1, #0]
 8005e6c:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < expected_size; ix++) {
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e70:	3301      	adds	r3, #1
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d3e7      	bcc.n	8005e4c <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x68>
        }
    }
 8005e7c:	f107 0310 	add.w	r3, r7, #16
 8005e80:	4618      	mov	r0, r3
 8005e82:	f004 f80b 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005e86:	3728      	adds	r7, #40	@ 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	08020d90 	.word	0x08020d90
 8005e90:	08020db0 	.word	0x08020db0
 8005e94:	08020d14 	.word	0x08020d14

08005e98 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>:
            }
            d[jx - 1] = b[jx] * xx - a[jx] * y[ix];
        }
    }

    static void iir2(const float *x, float *y, size_t n, const float *b, const float *a, float *d)
 8005e98:	b480      	push	{r7}
 8005e9a:	b089      	sub	sp, #36	@ 0x24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
        /*
         a[0]*y[n] = b[0] * x[n]               + d[0][n-1]
           d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]
           d[1][n] = b[2] * x[n] - a[2] * y[n]
         */
        const float one_over_a0 = 1.0f / a[0];
 8005ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea8:	ed93 7a00 	vldr	s14, [r3]
 8005eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb4:	edc7 7a06 	vstr	s15, [r7, #24]
        for (size_t ix = 0; ix < n; ix++) {
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e063      	b.n	8005f86 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0xee>
            const float xx = x[ix];
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	617b      	str	r3, [r7, #20]
            y[ix] = b[0] * xx + d[0];
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	ed93 7a00 	vldr	s14, [r3]
 8005ed0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eda:	edd3 7a00 	vldr	s15, [r3]
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eea:	edc3 7a00 	vstr	s15, [r3]
            y[ix] *= one_over_a0;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	ed93 7a00 	vldr	s14, [r3]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	4413      	add	r3, r2
 8005f02:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0a:	edc3 7a00 	vstr	s15, [r3]
            d[0] = b[1] * xx - a[1] * y[ix] + d[1];
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	3304      	adds	r3, #4
 8005f12:	ed93 7a00 	vldr	s14, [r3]
 8005f16:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	3304      	adds	r3, #4
 8005f22:	edd3 6a00 	vldr	s13, [r3]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	edd3 7a00 	vldr	s15, [r3]
 8005f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	edd3 7a00 	vldr	s15, [r3]
 8005f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	edc3 7a00 	vstr	s15, [r3]
            d[1] = b[2] * xx - a[2] * y[ix];
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	3308      	adds	r3, #8
 8005f50:	ed93 7a00 	vldr	s14, [r3]
 8005f54:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5e:	3308      	adds	r3, #8
 8005f60:	edd3 6a00 	vldr	s13, [r3]
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	edd3 7a00 	vldr	s15, [r3]
 8005f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f76:	3304      	adds	r3, #4
 8005f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f7c:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < n; ix++) {
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	3301      	adds	r3, #1
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d397      	bcc.n	8005ebe <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0x26>
        }
    }
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
 8005f92:	3724      	adds	r7, #36	@ 0x24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8005f9c:	b5b0      	push	{r4, r5, r7, lr}
 8005f9e:	b0b0      	sub	sp, #192	@ 0xc0
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	6178      	str	r0, [r7, #20]
 8005fa4:	6139      	str	r1, [r7, #16]
 8005fa6:	ed87 0a03 	vstr	s0, [r7, #12]
 8005faa:	4611      	mov	r1, r2
 8005fac:	edc7 0a01 	vstr	s1, [r7, #4]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	ed87 1a00 	vstr	s2, [r7]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	72fb      	strb	r3, [r7, #11]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d001      	beq.n	8005fce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005fca:	4cbe      	ldr	r4, [pc, #760]	@ (80062c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005fcc:	e227      	b.n	800641e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	689d      	ldr	r5, [r3, #8]
 8005fd2:	f897 10cc 	ldrb.w	r1, [r7, #204]	@ 0xcc
 8005fd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2001      	movs	r0, #1
 8005fe0:	f000 fa22 	bl	8006428 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	429d      	cmp	r5, r3
 8005fe8:	bf14      	ite	ne
 8005fea:	2301      	movne	r3, #1
 8005fec:	2300      	moveq	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005ff4:	4cb3      	ldr	r4, [pc, #716]	@ (80062c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005ff6:	e212      	b.n	800641e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 8005ff8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d001      	beq.n	8006006 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006002:	4cb0      	ldr	r4, [pc, #704]	@ (80062c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006004:	e20b      	b.n	800641e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 800600e:	6938      	ldr	r0, [r7, #16]
 8006010:	f7fe f928 	bl	8004264 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8006014:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
 8006018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8006020:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8006024:	e1fb      	b.n	800641e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8006026:	7afb      	ldrb	r3, [r7, #11]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d110      	bne.n	800604e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 800602c:	7abb      	ldrb	r3, [r7, #10]
 800602e:	4619      	mov	r1, r3
 8006030:	edd7 0a01 	vldr	s1, [r7, #4]
 8006034:	ed97 0a03 	vldr	s0, [r7, #12]
 8006038:	6938      	ldr	r0, [r7, #16]
 800603a:	f7fd fba5 	bl	8003788 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800603e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8006042:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d015      	beq.n	8006076 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800604a:	4c9e      	ldr	r4, [pc, #632]	@ (80062c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800604c:	e1e7      	b.n	800641e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 800604e:	7afb      	ldrb	r3, [r7, #11]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d110      	bne.n	8006076 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8006054:	7abb      	ldrb	r3, [r7, #10]
 8006056:	4619      	mov	r1, r3
 8006058:	edd7 0a01 	vldr	s1, [r7, #4]
 800605c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006060:	6938      	ldr	r0, [r7, #16]
 8006062:	f7fd fbc7 	bl	80037f4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8006066:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 800606a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006072:	4c94      	ldr	r4, [pc, #592]	@ (80062c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006074:	e1d3      	b.n	800641e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8006076:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800607a:	2300      	movs	r3, #0
 800607c:	2201      	movs	r2, #1
 800607e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006082:	f7fb fa92 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8006086:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 800608e:	4c8e      	ldr	r4, [pc, #568]	@ (80062c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006090:	e1c0      	b.n	8006414 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8006092:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8006096:	4619      	mov	r1, r3
 8006098:	6938      	ldr	r0, [r7, #16]
 800609a:	f7fb fd11 	bl	8001ac0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800609e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        if (ret != EIDSP_OK) {
 80060a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80060aa:	4c86      	ldr	r4, [pc, #536]	@ (80062c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80060ac:	e1b2      	b.n	8006414 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 80060ae:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	461a      	mov	r2, r3
 80060b6:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 80060ba:	2300      	movs	r3, #0
 80060bc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060c0:	f7fb fa73 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 80060c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 80060ca:	4c7f      	ldr	r4, [pc, #508]	@ (80062c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80060cc:	e19d      	b.n	800640a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80060ce:	2300      	movs	r3, #0
 80060d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060d4:	e191      	b.n	80063fa <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x45e>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	689d      	ldr	r5, [r3, #8]
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80060f2:	462a      	mov	r2, r5
 80060f4:	2101      	movs	r1, #1
 80060f6:	f7fb fa58 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 80060fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x16a>
 8006100:	4c71      	ldr	r4, [pc, #452]	@ (80062c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006102:	2500      	movs	r5, #0
 8006104:	e16d      	b.n	80063e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 8006106:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	b29b      	uxth	r3, r3
 800610e:	3301      	adds	r3, #1
 8006110:	461a      	mov	r2, r3
 8006112:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8006116:	2300      	movs	r3, #0
 8006118:	2101      	movs	r1, #1
 800611a:	f7fb fa46 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 800611e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x18e>
 8006124:	4c68      	ldr	r4, [pc, #416]	@ (80062c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006126:	2500      	movs	r5, #0
 8006128:	e151      	b.n	80063ce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 800612a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800612c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800612e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006130:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8006132:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	462b      	mov	r3, r5
 800613a:	f7fb feb1 	bl	8001ea0 <_ZN2ei5numpy4rfftEPKfjPfjj>
 800613e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
            if (ret != EIDSP_OK) {
 8006142:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1b4>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800614a:	4c5e      	ldr	r4, [pc, #376]	@ (80062c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800614c:	2500      	movs	r5, #0
 800614e:	e13e      	b.n	80063ce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8006150:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006164:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006168:	eeb0 0a47 	vmov.f32	s0, s14
 800616c:	4618      	mov	r0, r3
 800616e:	f7fb fbd1 	bl	8001914 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8006172:	f897 10cc 	ldrb.w	r1, [r7, #204]	@ 0xcc
 8006176:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800617a:	2300      	movs	r3, #0
 800617c:	2202      	movs	r2, #2
 800617e:	f7fb fa14 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8006182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006184:	2b00      	cmp	r3, #0
 8006186:	d102      	bne.n	800618e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1f2>
 8006188:	4c4f      	ldr	r4, [pc, #316]	@ (80062c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800618a:	2500      	movs	r5, #0
 800618c:	e115      	b.n	80063ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 800618e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8006192:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8006196:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800619a:	edd7 0a00 	vldr	s1, [r7]
 800619e:	ed97 0a03 	vldr	s0, [r7, #12]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fd fc64 	bl	8003a70 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 80061a8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 80061ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x21e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80061b4:	4c43      	ldr	r4, [pc, #268]	@ (80062c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80061b6:	2500      	movs	r5, #0
 80061b8:	e0ff      	b.n	80063ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 80061ba:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80061be:	085b      	lsrs	r3, r3, #1
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3301      	adds	r3, #1
 80061c4:	461a      	mov	r2, r3
 80061c6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80061ca:	2300      	movs	r3, #0
 80061cc:	2101      	movs	r1, #1
 80061ce:	f7fb f9ec 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 80061d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d102      	bne.n	80061de <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x242>
 80061d8:	4c3b      	ldr	r4, [pc, #236]	@ (80062c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80061da:	2500      	movs	r5, #0
 80061dc:	e0e3      	b.n	80063a6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 80061de:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3301      	adds	r3, #1
 80061e8:	461a      	mov	r2, r3
 80061ea:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80061ee:	2300      	movs	r3, #0
 80061f0:	2101      	movs	r1, #1
 80061f2:	f7fb f9da 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 80061f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x266>
 80061fc:	4c32      	ldr	r4, [pc, #200]	@ (80062c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80061fe:	2500      	movs	r5, #0
 8006200:	e0c7      	b.n	8006392 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            ret = spectral::processing::periodogram(&axis_matrix,
 8006202:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8006206:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800620a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800620e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8006212:	ed97 0a03 	vldr	s0, [r7, #12]
 8006216:	f7fd fe79 	bl	8003f0c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 800621a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 800621e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x292>
                EIDSP_ERR(ret);
 8006226:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 800622a:	2500      	movs	r5, #0
 800622c:	e0b1      	b.n	8006392 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 800622e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	1e59      	subs	r1, r3, #1
 8006236:	f107 0018 	add.w	r0, r7, #24
 800623a:	2300      	movs	r3, #0
 800623c:	2201      	movs	r2, #1
 800623e:	f7fb f9b4 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2b2>
 8006248:	4c1f      	ldr	r4, [pc, #124]	@ (80062c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800624a:	2500      	movs	r5, #0
 800624c:	e097      	b.n	800637e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            ret = spectral::processing::spectral_power_edges(
 800624e:	f107 0318 	add.w	r3, r7, #24
 8006252:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006256:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800625a:	ed97 0a03 	vldr	s0, [r7, #12]
 800625e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006262:	f7fd fd47 	bl	8003cf4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8006266:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 800626a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2de>
                EIDSP_ERR(ret);
 8006272:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 8006276:	2500      	movs	r5, #0
 8006278:	e081      	b.n	800637e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8006286:	fb01 f303 	mul.w	r3, r1, r3
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

            size_t fx = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8006298:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800629c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062a8:	1c59      	adds	r1, r3, #1
 80062aa:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80062b4:	440b      	add	r3, r1
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062c0:	e030      	b.n	8006324 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x388>
 80062c2:	bf00      	nop
 80062c4:	fffffc14 	.word	0xfffffc14
 80062c8:	fffffc16 	.word	0xfffffc16
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 80062cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062d0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	441a      	add	r2, r3
 80062dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062e0:	1c59      	adds	r1, r3, #1
 80062e2:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80062ec:	440b      	add	r3, r1
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 80062f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062f6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80062fa:	fb01 f303 	mul.w	r3, r1, r3
 80062fe:	3301      	adds	r3, #1
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	441a      	add	r2, r3
 8006304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8006314:	440b      	add	r3, r1
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 800631a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800631e:	3301      	adds	r3, #1
 8006320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006326:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800632a:	429a      	cmp	r2, r3
 800632c:	d3ce      	bcc.n	80062cc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x330>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 800632e:	2300      	movs	r3, #0
 8006330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006334:	e01d      	b.n	8006372 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3d6>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800633e:	fb01 f303 	mul.w	r3, r1, r3
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	ed93 7a00 	vldr	s14, [r3]
 800634a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800635a:	4413      	add	r3, r2
 800635c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006364:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8006368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800636c:	3301      	adds	r3, #1
 800636e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006378:	429a      	cmp	r2, r3
 800637a:	d3dc      	bcc.n	8006336 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39a>
            }
        }
 800637c:	2501      	movs	r5, #1
 800637e:	f107 0318 	add.w	r3, r7, #24
 8006382:	4618      	mov	r0, r3
 8006384:	f7fb f93c 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8006388:	2d01      	cmp	r5, #1
 800638a:	d101      	bne.n	8006390 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f4>
 800638c:	2501      	movs	r5, #1
 800638e:	e000      	b.n	8006392 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
 8006390:	2500      	movs	r5, #0
 8006392:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006396:	4618      	mov	r0, r3
 8006398:	f7fb f932 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 800639c:	2d01      	cmp	r5, #1
 800639e:	d101      	bne.n	80063a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x408>
 80063a0:	2501      	movs	r5, #1
 80063a2:	e000      	b.n	80063a6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
 80063a4:	2500      	movs	r5, #0
 80063a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fb f928 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 80063b0:	2d01      	cmp	r5, #1
 80063b2:	d101      	bne.n	80063b8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41c>
 80063b4:	2501      	movs	r5, #1
 80063b6:	e000      	b.n	80063ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
 80063b8:	2500      	movs	r5, #0
 80063ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fb f91e 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 80063c4:	2d01      	cmp	r5, #1
 80063c6:	d101      	bne.n	80063cc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x430>
 80063c8:	2501      	movs	r5, #1
 80063ca:	e000      	b.n	80063ce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
 80063cc:	2500      	movs	r5, #0
 80063ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fb f914 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 80063d8:	2d01      	cmp	r5, #1
 80063da:	d101      	bne.n	80063e0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x444>
 80063dc:	2501      	movs	r5, #1
 80063de:	e000      	b.n	80063e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>
 80063e0:	2500      	movs	r5, #0
 80063e2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fb f90a 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 80063ec:	2d01      	cmp	r5, #1
 80063ee:	d10c      	bne.n	800640a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80063f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063f4:	3301      	adds	r3, #1
 80063f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006402:	429a      	cmp	r2, r3
 8006404:	f4ff ae67 	bcc.w	80060d6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x13a>

        return EIDSP_OK;
 8006408:	2400      	movs	r4, #0
    }
 800640a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800640e:	4618      	mov	r0, r3
 8006410:	f7fb f8f6 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8006414:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8006418:	4618      	mov	r0, r3
 800641a:	f7fb f8f1 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 800641e:	4623      	mov	r3, r4
 8006420:	4618      	mov	r0, r3
 8006422:	37b8      	adds	r7, #184	@ 0xb8
 8006424:	46bd      	mov	sp, r7
 8006426:	bdb0      	pop	{r4, r5, r7, pc}

08006428 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3301      	adds	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	4413      	add	r3, r2
 800645c:	3b01      	subs	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8006460:	697b      	ldr	r3, [r7, #20]
    }
 8006462:	4618      	mov	r0, r3
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
	...

08006470 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8006470:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8006474:	b0b3      	sub	sp, #204	@ 0xcc
 8006476:	af04      	add	r7, sp, #16
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
 800647e:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	edd3 7a03 	vldr	s15, [r3, #12]
 8006488:	eeb0 0a67 	vmov.f32	s0, s15
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7fb fa41 	bl	8001914 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8006492:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
        if (ret != EIDSP_OK) {
 8006496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 800649e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80064a2:	488c      	ldr	r0, [pc, #560]	@ (80066d4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 80064a4:	f002 fcc2 	bl	8008e2c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80064a8:	f8d7 40a8 	ldr.w	r4, [r7, #168]	@ 0xa8
 80064ac:	e10b      	b.n	80066c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f7fb f9af 	bl	8001812 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 80064b4:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
        if (ret != EIDSP_OK) {
 80064b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 80064c0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80064c4:	4884      	ldr	r0, [pc, #528]	@ (80066d8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 80064c6:	f002 fcb1 	bl	8008e2c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80064ca:	f8d7 40a8 	ldr.w	r4, [r7, #168]	@ 0xa8
 80064ce:	e0fa      	b.n	80066c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 80064d0:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80064d4:	2300      	movs	r3, #0
 80064d6:	2201      	movs	r2, #1
 80064d8:	2140      	movs	r1, #64	@ 0x40
 80064da:	f7fb f866 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

        char spectral_str[128] = { 0 };
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	f107 0318 	add.w	r3, r7, #24
 80064ec:	227c      	movs	r2, #124	@ 0x7c
 80064ee:	2100      	movs	r1, #0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f018 f977 	bl	801e7e4 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7f9 fee8 	bl	80002d0 <strlen>
 8006500:	4603      	mov	r3, r0
 8006502:	2b7f      	cmp	r3, #127	@ 0x7f
 8006504:	d901      	bls.n	800650a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8006506:	4c75      	ldr	r4, [pc, #468]	@ (80066dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 8006508:	e0d8      	b.n	80066bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
        memcpy(
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006512:	4618      	mov	r0, r3
 8006514:	f7f9 fedc 	bl	80002d0 <strlen>
 8006518:	4602      	mov	r2, r0
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	4621      	mov	r1, r4
 8006520:	4618      	mov	r0, r3
 8006522:	f018 fa40 	bl	801e9a6 <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 8006526:	f107 0314 	add.w	r3, r7, #20
 800652a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while (spectral_ptr != NULL) {
 800652e:	e03e      	b.n	80065ae <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            while ((*spectral_ptr) == ' ') {
                spectral_ptr++;
 8006530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006534:	3301      	adds	r3, #1
 8006536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            while ((*spectral_ptr) == ' ') {
 800653a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b20      	cmp	r3, #32
 8006542:	d0f5      	beq.n	8006530 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc0>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8006544:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8006548:	f017 f8be 	bl	801d6c8 <atof>
 800654c:	ec59 8b10 	vmov	r8, r9, d0
 8006550:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006554:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006558:	1c59      	adds	r1, r3, #1
 800655a:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	18d4      	adds	r4, r2, r3
 8006562:	4640      	mov	r0, r8
 8006564:	4649      	mov	r1, r9
 8006566:	f7fa fb6f 	bl	8000c48 <__aeabi_d2f>
 800656a:	4603      	mov	r3, r0
 800656c:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 800656e:	e009      	b.n	8006584 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x114>
                spectral_ptr++;
 8006570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006574:	3301      	adds	r3, #1
 8006576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                if (*spectral_ptr == '\0')
 800657a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x120>
            while ((*spectral_ptr != ',')) {
 8006584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b2c      	cmp	r3, #44	@ 0x2c
 800658c:	d1f0      	bne.n	8006570 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
 800658e:	e000      	b.n	8006592 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
                    break;
 8006590:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 8006592:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
                spectral_ptr = NULL;
 800659c:	2300      	movs	r3, #0
 800659e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a2:	e004      	b.n	80065ae <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            }
            else {
                spectral_ptr++;
 80065a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80065a8:	3301      	adds	r3, #1
 80065aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while (spectral_ptr != NULL) {
 80065ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1c1      	bne.n	800653a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 80065b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80065ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80065c2:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 80065c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80065c8:	461a      	mov	r2, r3
 80065ca:	2001      	movs	r0, #1
 80065cc:	f7ff ff2c 	bl	8006428 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80065d0:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	6852      	ldr	r2, [r2, #4]
 80065dc:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	4619      	mov	r1, r3
 80065e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80065ea:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d001      	beq.n	80065f6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80065f2:	4c3b      	ldr	r4, [pc, #236]	@ (80066e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 80065f4:	e062      	b.n	80066bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80065fc:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	461a      	mov	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	4935      	ldr	r1, [pc, #212]	@ (80066e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 800660e:	4618      	mov	r0, r3
 8006610:	f7f9 fdfe 	bl	8000210 <strcmp>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 800661a:	2301      	movs	r3, #1
 800661c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8006620:	e00f      	b.n	8006642 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	4930      	ldr	r1, [pc, #192]	@ (80066e8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 8006628:	4618      	mov	r0, r3
 800662a:	f7f9 fdf1 	bl	8000210 <strcmp>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 8006634:	2302      	movs	r3, #2
 8006636:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 800663a:	e002      	b.n	8006642 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 800663c:	2300      	movs	r3, #0
 800663e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	edd3 7a06 	vldr	s15, [r3, #24]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 800664c:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        ret = spectral::feature::spectral_analysis(
 8006652:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6a92      	ldr	r2, [r2, #40]	@ 0x28
        ret = spectral::feature::spectral_analysis(
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	ed91 7a0b 	vldr	s14, [r1, #44]	@ 0x2c
 8006660:	f897 00af 	ldrb.w	r0, [r7, #175]	@ 0xaf
 8006664:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8006668:	9102      	str	r1, [sp, #8]
 800666a:	9201      	str	r2, [sp, #4]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	eeb0 1a47 	vmov.f32	s2, s14
 8006672:	4623      	mov	r3, r4
 8006674:	eef0 0a67 	vmov.f32	s1, s15
 8006678:	4602      	mov	r2, r0
 800667a:	ed97 0a00 	vldr	s0, [r7]
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	f7ff fc8b 	bl	8005f9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8006686:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 800668a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8006692:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8006696:	4815      	ldr	r0, [pc, #84]	@ (80066ec <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8006698:	f002 fbc8 	bl	8008e2c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800669c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	@ 0xa8
 80066a0:	e00c      	b.n	80066bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80066ac:	fb03 f202 	mul.w	r2, r3, r2
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2201      	movs	r2, #1
 80066b8:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 80066ba:	2400      	movs	r4, #0
    }
 80066bc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fa ff9d 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 80066c6:	4623      	mov	r3, r4
 80066c8:	4618      	mov	r0, r3
 80066ca:	37bc      	adds	r7, #188	@ 0xbc
 80066cc:	46bd      	mov	sp, r7
 80066ce:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80066d2:	bf00      	nop
 80066d4:	08020e10 	.word	0x08020e10
 80066d8:	08020e34 	.word	0x08020e34
 80066dc:	fffffc10 	.word	0xfffffc10
 80066e0:	fffffc14 	.word	0xfffffc14
 80066e4:	08020bf8 	.word	0x08020bf8
 80066e8:	08020bfc 	.word	0x08020bfc
 80066ec:	08020e5c 	.word	0x08020e5c

080066f0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80066fa:	6138      	str	r0, [r7, #16]
 80066fc:	edc7 0a03 	vstr	s1, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        if (filter_cutoff > sampling_freq / 2) {
 8006706:	ed97 7a05 	vldr	s14, [r7, #20]
 800670a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800670e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006712:	ed97 7a03 	vldr	s14, [r7, #12]
 8006716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671e:	dd07      	ble.n	8006730 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x40>
            filter_cutoff = sampling_freq / 2;
 8006720:	ed97 7a05 	vldr	s14, [r7, #20]
 8006724:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800672c:	edc7 7a03 	vstr	s15, [r7, #12]
        }
        float bin = filter_cutoff * fft_length / sampling_freq;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800673a:	edd7 7a03 	vldr	s15, [r7, #12]
 800673e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006742:	ed97 7a05 	vldr	s14, [r7, #20]
 8006746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d021      	beq.n	8006798 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 8006754:	69f8      	ldr	r0, [r7, #28]
 8006756:	f7f9 ff27 	bl	80005a8 <__aeabi_f2d>
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	4b1b      	ldr	r3, [pc, #108]	@ (80067cc <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 8006760:	f7f9 fdc2 	bl	80002e8 <__aeabi_dsub>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4610      	mov	r0, r2
 800676a:	4619      	mov	r1, r3
 800676c:	f7fa fa4c 	bl	8000c08 <__aeabi_d2uiz>
 8006770:	4603      	mov	r3, r0
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x96>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	e000      	b.n	8006788 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x98>
 8006786:	2301      	movs	r3, #1
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 8006796:	e014      	b.n	80067c2 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xd2>
            *start_bin = 1;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 800679e:	69f8      	ldr	r0, [r7, #28]
 80067a0:	f7f9 ff02 	bl	80005a8 <__aeabi_f2d>
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	4b08      	ldr	r3, [pc, #32]	@ (80067cc <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 80067aa:	f7f9 fd9f 	bl	80002ec <__adddf3>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4610      	mov	r0, r2
 80067b4:	4619      	mov	r1, r3
 80067b6:	f7fa fa27 	bl	8000c08 <__aeabi_d2uiz>
 80067ba:	4603      	mov	r3, r0
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
    }
 80067c2:	bf00      	nop
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	3fe00000 	.word	0x3fe00000

080067d0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>:
    /**
     * @brief Calculates the spectral analysis features.
     *
     * @return the number of features calculated
     */
    static size_t extract_spec_features(
 80067d0:	b5b0      	push	{r4, r5, r7, lr}
 80067d2:	b0ba      	sub	sp, #232	@ 0xe8
 80067d4:	af04      	add	r7, sp, #16
 80067d6:	6178      	str	r0, [r7, #20]
 80067d8:	6139      	str	r1, [r7, #16]
 80067da:	60fa      	str	r2, [r7, #12]
 80067dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80067e0:	71fb      	strb	r3, [r7, #7]
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq,
        const bool remove_mean = true,
        const bool transpose_and_scale_input = true)
    {
        if (transpose_and_scale_input) {
 80067e2:	f897 30e8 	ldrb.w	r3, [r7, #232]	@ 0xe8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d013      	beq.n	8006812 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
            // transpose the matrix so we have one row per axis
            numpy::transpose_in_place(input_matrix);
 80067ea:	6978      	ldr	r0, [r7, #20]
 80067ec:	f7fa ff82 	bl	80016f4 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

            // func tests for scale of 1 and does a no op in that case
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80067f6:	eeb0 0a67 	vmov.f32	s0, s15
 80067fa:	6978      	ldr	r0, [r7, #20]
 80067fc:	f7fb f88a 	bl	8001914 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8006800:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 8006804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
 800680c:	f8d7 40b4 	ldr.w	r4, [r7, #180]	@ 0xb4
 8006810:	e297      	b.n	8006d42 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        }

        bool do_filter = false;
 8006812:	2300      	movs	r3, #0
 8006814:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	49cd      	ldr	r1, [pc, #820]	@ (8006b54 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x384>)
 800681e:	4618      	mov	r0, r3
 8006820:	f7f9 fcf6 	bl	8000210 <strcmp>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d121      	bne.n	800686e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x9e>
            if( config->filter_order ) {
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d016      	beq.n	8006860 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	edd3 7a06 	vldr	s15, [r3, #24]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	4619      	mov	r1, r3
 8006840:	eef0 0a67 	vmov.f32	s1, s15
 8006844:	ed97 0a02 	vldr	s0, [r7, #8]
 8006848:	6978      	ldr	r0, [r7, #20]
 800684a:	f7fc ff9d 	bl	8003788 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800684e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8006852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
 800685a:	f8d7 40ac 	ldr.w	r4, [r7, #172]	@ 0xac
 800685e:	e270      	b.n	8006d42 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
            is_high_pass = false;
 8006866:	2300      	movs	r3, #0
 8006868:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
 800686c:	e029      	b.n	80068c2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	49b9      	ldr	r1, [pc, #740]	@ (8006b58 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x388>)
 8006874:	4618      	mov	r0, r3
 8006876:	f7f9 fccb 	bl	8000210 <strcmp>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d120      	bne.n	80068c2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
            if( config->filter_order ) {
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d016      	beq.n	80068b6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	edd3 7a06 	vldr	s15, [r3, #24]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	4619      	mov	r1, r3
 8006896:	eef0 0a67 	vmov.f32	s1, s15
 800689a:	ed97 0a02 	vldr	s0, [r7, #8]
 800689e:	6978      	ldr	r0, [r7, #20]
 80068a0:	f7fc ffa8 	bl	80037f4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 80068a4:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
 80068a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
 80068b0:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80068b4:	e245      	b.n	8006d42 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
            is_high_pass = true;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
        }

        if (remove_mean){
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
            EI_TRY(processing::subtract_mean(input_matrix));
 80068c8:	6978      	ldr	r0, [r7, #20]
 80068ca:	f7fd fccb 	bl	8004264 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 80068ce:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 80068d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
 80068da:	f8d7 40a8 	ldr.w	r4, [r7, #168]	@ 0xa8
 80068de:	e230      	b.n	8006d42 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        }

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 80068e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d012      	beq.n	800690e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x13e>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            get_start_stop_bin(
 80068ec:	4618      	mov	r0, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80068f4:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 80068f8:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80068fc:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8006900:	eef0 0a67 	vmov.f32	s1, s15
 8006904:	ed97 0a02 	vldr	s0, [r7, #8]
 8006908:	f7ff fef2 	bl	80066f0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 800690c:	e009      	b.n	8006922 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x152>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 800690e:	2301      	movs	r3, #1
 8006910:	67bb      	str	r3, [r7, #120]	@ 0x78
            stop_bin = config->fft_length / 2 + 1;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	da00      	bge.n	800691c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x14c>
 800691a:	3301      	adds	r3, #1
 800691c:	105b      	asrs	r3, r3, #1
 800691e:	3301      	adds	r3, #1
 8006920:	677b      	str	r3, [r7, #116]	@ 0x74
        }
        size_t num_bins = stop_bin - start_bin;
 8006922:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        float *feature_out = output_matrix->buffer;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        const float *feature_out_ori = feature_out;
 8006934:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800693c:	2300      	movs	r3, #0
 800693e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006942:	e1ed      	b.n	8006d20 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x550>
            float *data_window = input_matrix->get_row_ptr(row);
 8006944:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8006948:	6978      	ldr	r0, [r7, #20]
 800694a:	f7fa fe6f 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 800694e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
            size_t data_size = input_matrix->cols;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

            matrix_t rms_in_matrix(1, data_size, data_window);
 800695a:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800695e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006962:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006966:	2101      	movs	r1, #1
 8006968:	f7fa fe1f 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 800696c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8006970:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006974:	2201      	movs	r2, #1
 8006976:	2101      	movs	r1, #1
 8006978:	f7fa fe17 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 800697c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8006980:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f7fb f89a 	bl	8001ac0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800698c:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 8006990:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1d0>
 8006998:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800699c:	2500      	movs	r5, #0
 800699e:	e1a9      	b.n	8006cf4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>

            feature_out++;
 80069a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80069a4:	3304      	adds	r3, #4
 80069a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 80069aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80069ae:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80069b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            if (stddev == 0.0f) {
 80069b6:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 80069ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80069be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c2:	d102      	bne.n	80069ca <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1fa>
                stddev = 1e-10f;
 80069c4:	4b65      	ldr	r3, [pc, #404]	@ (8006b5c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x38c>)
 80069c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            float k_sum = 0;
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 80069da:	2300      	movs	r3, #0
 80069dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80069e0:	e03c      	b.n	8006a5c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x28c>
                temp = data_window[i] * data_window[i] * data_window[i];
 80069e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80069ec:	4413      	add	r3, r2
 80069ee:	ed93 7a00 	vldr	s14, [r3]
 80069f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80069fc:	4413      	add	r3, r2
 80069fe:	edd3 7a00 	vldr	s15, [r3]
 8006a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006a10:	4413      	add	r3, r2
 8006a12:	edd3 7a00 	vldr	s15, [r3]
 8006a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
                s_sum += temp;
 8006a1e:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8006a22:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a2a:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
                k_sum += temp * data_window[i];
 8006a2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006a38:	4413      	add	r3, r2
 8006a3a:	ed93 7a00 	vldr	s14, [r3]
 8006a3e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a46:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8006a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a4e:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
            for (size_t i = 0; i < data_size; i++) {
 8006a52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a56:	3301      	adds	r3, #1
 8006a58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d3bc      	bcc.n	80069e2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x212>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 8006a68:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8006a6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a70:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 8006a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a78:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            *feature_out++ = (s_sum / data_size) / temp;
 8006a7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a88:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8006a8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006a94:	1d1a      	adds	r2, r3, #4
 8006a96:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8006a9a:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8006a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aa2:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8006aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab2:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8006ab6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006aba:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8006abe:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8006ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006ace:	1d1a      	adds	r2, r3, #4
 8006ad0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8006ad4:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8006ad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006adc:	edc3 7a00 	vstr	s15, [r3]

            if (config->implementation_version == 4) {
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	889b      	ldrh	r3, [r3, #4]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	f040 80c0 	bne.w	8006c6a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x49a>

                size_t fft_out_size = config->fft_length / 2 + 1;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	da00      	bge.n	8006af4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x324>
 8006af2:	3301      	adds	r3, #1
 8006af4:	105b      	asrs	r3, r3, #1
 8006af6:	3301      	adds	r3, #1
 8006af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                ei_vector<float> fft_out(fft_out_size);
 8006afc:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8006b00:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006b04:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f003 f9ad 	bl	8009e68 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
                EI_TRY(numpy::welch_max_hold(
 8006b0e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006b12:	4618      	mov	r0, r3
 8006b14:	f003 f850 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	4619      	mov	r1, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b26:	9302      	str	r3, [sp, #8]
 8006b28:	9101      	str	r1, [sp, #4]
 8006b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8006b36:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8006b3a:	f7fc f813 	bl	8002b64 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8006b3e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8006b42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x390>
 8006b4a:	f8d7 4080 	ldr.w	r4, [r7, #128]	@ 0x80
 8006b4e:	2500      	movs	r5, #0
 8006b50:	e082      	b.n	8006c58 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x488>
 8006b52:	bf00      	nop
 8006b54:	08020bf8 	.word	0x08020bf8
 8006b58:	08020bfc 	.word	0x08020bfc
 8006b5c:	2edbe6ff 	.word	0x2edbe6ff
                    0,
                    fft_out_size,
                    config->fft_length,
                    config->do_fft_overlap));

                matrix_t x(1, fft_out.size(), const_cast<float *>(fft_out.data()));
 8006b60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006b64:	4618      	mov	r0, r3
 8006b66:	f003 f817 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006b70:	4618      	mov	r0, r3
 8006b72:	f003 f821 	bl	8009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8006b7c:	462a      	mov	r2, r5
 8006b7e:	2101      	movs	r1, #1
 8006b80:	f7fa fd13 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
                matrix_t out(1, 1);
 8006b84:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	f7fa fd0c 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>

                *feature_out++ = (numpy::skew(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006b92:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006b96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fb f85f 	bl	8001c60 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d108      	bne.n	8006bba <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ea>
 8006ba8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fa fd3c 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	e001      	b.n	8006bbe <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ee>
 8006bba:	f04f 0200 	mov.w	r2, #0
 8006bbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006bc2:	1d19      	adds	r1, r3, #4
 8006bc4:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8006bc8:	601a      	str	r2, [r3, #0]
                *feature_out++ = (numpy::kurtosis(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006bca:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006bce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fb f8df 	bl	8001d98 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d108      	bne.n	8006bf2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x422>
 8006be0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fa fd20 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006bec:	4603      	mov	r3, r0
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	e001      	b.n	8006bf6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x426>
 8006bf2:	f04f 0200 	mov.w	r2, #0
 8006bf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006bfa:	1d19      	adds	r1, r3, #4
 8006bfc:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8006c00:	601a      	str	r2, [r3, #0]

                for (size_t i = start_bin; i < stop_bin; i++) {
 8006c02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c08:	e016      	b.n	8006c38 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x468>
                    feature_out[i - start_bin] = fft_out[i];
 8006c0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006c0e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8006c12:	4618      	mov	r0, r3
 8006c14:	f003 f95d 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8006c18:	4601      	mov	r1, r0
 8006c1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c28:	4413      	add	r3, r2
 8006c2a:	680a      	ldr	r2, [r1, #0]
 8006c2c:	601a      	str	r2, [r3, #0]
                for (size_t i = start_bin; i < stop_bin; i++) {
 8006c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c32:	3301      	adds	r3, #1
 8006c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d3e3      	bcc.n	8006c0a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x43a>
                }
            } else {
 8006c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fa fcda 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8006c4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fa fcd5 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8006c56:	2501      	movs	r5, #1
 8006c58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f003 f91d 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8006c62:	2d01      	cmp	r5, #1
 8006c64:	d01f      	beq.n	8006ca6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d6>
 8006c66:	2500      	movs	r5, #0
 8006c68:	e044      	b.n	8006cf4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>
                EI_TRY(numpy::welch_max_hold(
 8006c6a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006c6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c72:	4610      	mov	r0, r2
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	f892 2035 	ldrb.w	r2, [r2, #53]	@ 0x35
 8006c7a:	9202      	str	r2, [sp, #8]
 8006c7c:	9001      	str	r0, [sp, #4]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	460b      	mov	r3, r1
 8006c82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c86:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8006c8a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8006c8e:	f7fb ff69 	bl	8002b64 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8006c92:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8006c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d6>
 8006c9e:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 8006ca2:	2500      	movs	r5, #0
 8006ca4:	e026      	b.n	8006cf4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>
                    start_bin,
                    stop_bin,
                    config->fft_length,
                    config->do_fft_overlap));
            }
            if (config->do_log) {
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d018      	beq.n	8006ce2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x512>
                numpy::zero_handling(feature_out, num_bins);
 8006cb0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006cb4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8006cb8:	f7fc f81a 	bl	8002cf0 <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 8006cbc:	f107 0018 	add.w	r0, r7, #24
 8006cc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006cca:	f7fa fc6e 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 8006cce:	f107 0318 	add.w	r3, r7, #24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fb fb0e 	bl	80022f4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
            }
 8006cd8:	f107 0318 	add.w	r3, r7, #24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fa fc8f 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
            feature_out += num_bins;
 8006ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006cec:	4413      	add	r3, r2
 8006cee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        }
 8006cf2:	2501      	movs	r5, #1
 8006cf4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fa fc81 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8006cfe:	2d01      	cmp	r5, #1
 8006d00:	d101      	bne.n	8006d06 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x536>
 8006d02:	2501      	movs	r5, #1
 8006d04:	e000      	b.n	8006d08 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x538>
 8006d06:	2500      	movs	r5, #0
 8006d08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fa fc77 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8006d12:	2d01      	cmp	r5, #1
 8006d14:	d115      	bne.n	8006d42 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006d16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	f4ff ae0b 	bcc.w	8006944 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x174>
        size_t num_features = feature_out - feature_out_ori;
 8006d2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	109b      	asrs	r3, r3, #2
 8006d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        return num_features;
 8006d3e:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
    }
 8006d42:	4623      	mov	r3, r4
 8006d44:	4618      	mov	r0, r3
 8006d46:	37d8      	adds	r7, #216	@ 0xd8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bdb0      	pop	{r4, r5, r7, pc}

08006d4c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        size_t n_features =
            extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	2301      	movs	r3, #1
 8006d62:	ed97 0a00 	vldr	s0, [r7]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7ff fd30 	bl	80067d0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8006d70:	6178      	str	r0, [r7, #20]
        return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d101      	bne.n	8006d80 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x34>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e000      	b.n	8006d82 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
 8006d80:	4b02      	ldr	r3, [pc, #8]	@ (8006d8c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x40>)
    }
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	fffffc14 	.word	0xfffffc14

08006d90 <_ZN2ei8spectral7feature15get_ratio_comboEi>:
        } else {
            return extract_spectral_analysis_features_v2(input_matrix, output_matrix, config, sampling_freq);
        }
    }

    static ei_vector<int> get_ratio_combo(int r)
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b09a      	sub	sp, #104	@ 0x68
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
    {
        if (r == 1 || r == 3 || r == 10) {
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d005      	beq.n	8006dac <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d002      	beq.n	8006dac <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b0a      	cmp	r3, #10
 8006daa:	d10f      	bne.n	8006dcc <_ZN2ei8spectral7feature15get_ratio_comboEi+0x3c>
            return {r};
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	f107 0310 	add.w	r3, r7, #16
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	2301      	movs	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	f107 0314 	add.w	r3, r7, #20
 8006dbe:	f107 0208 	add.w	r2, r7, #8
 8006dc2:	ca06      	ldmia	r2, {r1, r2}
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f004 f868 	bl	800ae9a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
            return {10, 10, 10};
        } else {
            assert(0);
        }
        return {0}; // to make linter happy
    }
 8006dca:	e04e      	b.n	8006e6a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 30) {
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b1e      	cmp	r3, #30
 8006dd0:	d114      	bne.n	8006dfc <_ZN2ei8spectral7feature15get_ratio_comboEi+0x6c>
            return {3, 10};
 8006dd2:	4a28      	ldr	r2, [pc, #160]	@ (8006e74 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe4>)
 8006dd4:	f107 0320 	add.w	r3, r7, #32
 8006dd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ddc:	e883 0003 	stmia.w	r3, {r0, r1}
 8006de0:	f107 0320 	add.w	r3, r7, #32
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	2302      	movs	r3, #2
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006dee:	f107 0218 	add.w	r2, r7, #24
 8006df2:	ca06      	ldmia	r2, {r1, r2}
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f004 f850 	bl	800ae9a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006dfa:	e036      	b.n	8006e6a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 100) {
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b64      	cmp	r3, #100	@ 0x64
 8006e00:	d114      	bne.n	8006e2c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x9c>
            return {10, 10};
 8006e02:	4a1d      	ldr	r2, [pc, #116]	@ (8006e78 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe8>)
 8006e04:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006e10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e16:	2302      	movs	r3, #2
 8006e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e1a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006e1e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006e22:	ca06      	ldmia	r2, {r1, r2}
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f004 f838 	bl	800ae9a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006e2a:	e01e      	b.n	8006e6a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 1000) {
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e32:	d113      	bne.n	8006e5c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xcc>
            return {10, 10, 10};
 8006e34:	4a11      	ldr	r2, [pc, #68]	@ (8006e7c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xec>)
 8006e36:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006e3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006e40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006e44:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e46:	2303      	movs	r3, #3
 8006e48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006e4e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8006e52:	ca06      	ldmia	r2, {r1, r2}
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f004 f820 	bl	800ae9a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006e5a:	e006      	b.n	8006e6a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
            assert(0);
 8006e5c:	4b08      	ldr	r3, [pc, #32]	@ (8006e80 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf0>)
 8006e5e:	4a09      	ldr	r2, [pc, #36]	@ (8006e84 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf4>)
 8006e60:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8006e64:	4808      	ldr	r0, [pc, #32]	@ (8006e88 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf8>)
 8006e66:	f016 fc11 	bl	801d68c <__assert_func>
    }
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	3768      	adds	r7, #104	@ 0x68
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	08020f54 	.word	0x08020f54
 8006e78:	08020f5c 	.word	0x08020f5c
 8006e7c:	08020f64 	.word	0x08020f64
 8006e80:	080208e8 	.word	0x080208e8
 8006e84:	08020e90 	.word	0x08020e90
 8006e88:	08020ed4 	.word	0x08020ed4

08006e8c <_ZN2ei6signal7sosfiltD1Ev>:
    struct sosfilt {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3308      	adds	r3, #8
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f002 ffff 	bl	8009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>:

    // can do in-place or out-of-place
    static size_t _decimate(matrix_t *input_matrix, matrix_t *output_matrix, size_t ratio)
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b092      	sub	sp, #72	@ 0x48
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
        static float sos_zi_deci_10[] = { 1.38071060429997e-06f,   -1.146570262401316e-06f,
                                          0.00020862168862901534f, -0.0001782374705409433f,
                                          0.016663820918116152f,   -0.015002020730727955f,
                                          0.9773862470492868f,     -0.9420150059170858 };

        assert(ratio == 3 || ratio == 10);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d009      	beq.n	8006ece <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b0a      	cmp	r3, #10
 8006ebe:	d006      	beq.n	8006ece <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8006ec0:	4b27      	ldr	r3, [pc, #156]	@ (8006f60 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xb8>)
 8006ec2:	4a28      	ldr	r2, [pc, #160]	@ (8006f64 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xbc>)
 8006ec4:	f240 212b 	movw	r1, #555	@ 0x22b
 8006ec8:	4827      	ldr	r0, [pc, #156]	@ (8006f68 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc0>)
 8006eca:	f016 fbdf 	bl	801d68c <__assert_func>

        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d101      	bne.n	8006ed8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x30>
 8006ed4:	4b25      	ldr	r3, [pc, #148]	@ (8006f6c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc4>)
 8006ed6:	e000      	b.n	8006eda <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x32>
 8006ed8:	4b25      	ldr	r3, [pc, #148]	@ (8006f70 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc8>)
 8006eda:	63bb      	str	r3, [r7, #56]	@ 0x38
        float* sos_zi = ratio == 3 ? sos_zi_deci_3 : sos_zi_deci_10;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d101      	bne.n	8006ee6 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x3e>
 8006ee2:	4b24      	ldr	r3, [pc, #144]	@ (8006f74 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xcc>)
 8006ee4:	e000      	b.n	8006ee8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x40>
 8006ee6:	4b24      	ldr	r3, [pc, #144]	@ (8006f78 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xd0>)
 8006ee8:	637b      	str	r3, [r7, #52]	@ 0x34

        const size_t out_size = signal::get_decimated_size(input_matrix->cols, ratio);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe fead 	bl	8005c50 <_ZN2ei6signal18get_decimated_sizeEjj>
 8006ef6:	6338      	str	r0, [r7, #48]	@ 0x30

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006ef8:	2300      	movs	r3, #0
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006efc:	e026      	b.n	8006f4c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xa4>
            const float *x = input_matrix->get_row_ptr(row);
 8006efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7fa fb93 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006f06:	62f8      	str	r0, [r7, #44]	@ 0x2c
            float *y = output_matrix->get_row_ptr(row);
 8006f08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f0a:	68b8      	ldr	r0, [r7, #8]
 8006f0c:	f7fa fb8e 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006f10:	62b8      	str	r0, [r7, #40]	@ 0x28
            signal::sosfilt sosfilt(sos, sos_zi, 4);
 8006f12:	f107 0010 	add.w	r0, r7, #16
 8006f16:	2304      	movs	r3, #4
 8006f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f1c:	f7fe feaa 	bl	8005c74 <_ZN2ei6signal7sosfiltC1EPKfS3_j>
            signal::decimate_simple(
                x,
                input_matrix->cols,
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6899      	ldr	r1, [r3, #8]
                y,
                output_matrix->cols,
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	689a      	ldr	r2, [r3, #8]
            signal::decimate_simple(
 8006f28:	f107 0310 	add.w	r3, r7, #16
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	4613      	mov	r3, r2
 8006f34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f38:	f7fe ff54 	bl	8005de4 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>
                ratio,
                sosfilt);
        }
 8006f3c:	f107 0310 	add.w	r3, r7, #16
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff ffa3 	bl	8006e8c <_ZN2ei6signal7sosfiltD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f48:	3301      	adds	r3, #1
 8006f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d3d3      	bcc.n	8006efe <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x56>

        return out_size;
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3740      	adds	r7, #64	@ 0x40
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	08020f70 	.word	0x08020f70
 8006f64:	08020f8c 	.word	0x08020f8c
 8006f68:	08020ed4 	.word	0x08020ed4
 8006f6c:	20000000 	.word	0x20000000
 8006f70:	20000080 	.word	0x20000080
 8006f74:	20000060 	.word	0x20000060
 8006f78:	200000e0 	.word	0x200000e0

08006f7c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v4(
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b0b5      	sub	sp, #212	@ 0xd4
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_p,
        const float sampling_freq)
    {
        auto config_copy = *config_p;
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006f92:	4611      	mov	r1, r2
 8006f94:	2244      	movs	r2, #68	@ 0x44
 8006f96:	4618      	mov	r0, r3
 8006f98:	f017 fd05 	bl	801e9a6 <memcpy>
        auto config = &config_copy;
 8006f9c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        if (strcmp(config->analysis_type, "Wavelet") == 0) {
 8006fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	4998      	ldr	r1, [pc, #608]	@ (800720c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x290>)
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7f9 f92f 	bl	8000210 <strcmp>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d109      	bne.n	8006fcc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x50>
            return wavelet::extract_wavelet_features(input_matrix, output_matrix, config, sampling_freq);
 8006fb8:	ed97 0a00 	vldr	s0, [r7]
 8006fbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7fe fd6a 	bl	8005a9c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 8006fc8:	4604      	mov	r4, r0
 8006fca:	e19e      	b.n	800730a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else if (config->extra_low_freq == false && config->input_decimation_ratio == 1) {
 8006fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d11b      	bne.n	8007010 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
 8006fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d116      	bne.n	8007010 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
            size_t n_features =
                extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	ed97 0a00 	vldr	s0, [r7]
 8006fec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff fbec 	bl	80067d0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8006ff8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007004:	429a      	cmp	r2, r3
 8007006:	d101      	bne.n	800700c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x90>
 8007008:	2400      	movs	r4, #0
 800700a:	e17e      	b.n	800730a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 800700c:	4c80      	ldr	r4, [pc, #512]	@ (8007210 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x294>)
 800700e:	e17c      	b.n	800730a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else {
            numpy::transpose_in_place(input_matrix);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7fa fb6f 	bl	80016f4 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8007016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800701a:	edd3 7a03 	vldr	s15, [r3, #12]
 800701e:	eeb0 0a67 	vmov.f32	s0, s15
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7fa fc76 	bl	8001914 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8007028:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 800702c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
 8007034:	f8d7 40a8 	ldr.w	r4, [r7, #168]	@ 0xa8
 8007038:	e167      	b.n	800730a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>

            if (config->input_decimation_ratio > 1) {
 800703a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b01      	cmp	r3, #1
 8007042:	f340 8086 	ble.w	8007152 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d6>
                ei_vector<int> ratio_combo = get_ratio_combo(config->input_decimation_ratio);
 8007046:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff fe9c 	bl	8006d90 <_ZN2ei8spectral7feature15get_ratio_comboEi>
                size_t out_size = input_matrix->cols;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                for (int r : ratio_combo) {
 8007060:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007068:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800706c:	f003 ff36 	bl	800aedc <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>
 8007070:	4603      	mov	r3, r0
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
 8007074:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8007078:	f003 ff40 	bl	800aefc <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>
 800707c:	4603      	mov	r3, r0
 800707e:	623b      	str	r3, [r7, #32]
 8007080:	e016      	b.n	80070b0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
 8007082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007086:	4618      	mov	r0, r3
 8007088:	f003 ff71 	bl	800af6e <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>
 800708c:	4603      	mov	r3, r0
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    out_size = _decimate(input_matrix, input_matrix, r);
 8007094:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007098:	461a      	mov	r2, r3
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff ff03 	bl	8006ea8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>
 80070a2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
                for (int r : ratio_combo) {
 80070a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070aa:	4618      	mov	r0, r3
 80070ac:	f003 ff4f 	bl	800af4e <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>
 80070b0:	f107 0220 	add.w	r2, r7, #32
 80070b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f003 ff2f 	bl	800af1e <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1dd      	bne.n	8007082 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                }

                // rearrange input matrix to be in the right shape after decimation
                float* out = input_matrix->get_row_ptr(0) + out_size;
 80070c6:	2100      	movs	r1, #0
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7fa faaf 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 80070ce:	4602      	mov	r2, r0
 80070d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 80070dc:	2301      	movs	r3, #1
 80070de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070e2:	e027      	b.n	8007134 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b8>
                    float *row = input_matrix->get_row_ptr(r);
 80070e4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7fa fa9f 	bl	800162c <_ZN2ei9ei_matrix11get_row_ptrEj>
 80070ee:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                    for(size_t c = 0; c < out_size; c++) {
 80070f2:	2300      	movs	r3, #0
 80070f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070f8:	e011      	b.n	800711e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a2>
                        *out++ = row[c];
 80070fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8007104:	441a      	add	r2, r3
 8007106:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800710a:	1d19      	adds	r1, r3, #4
 800710c:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	601a      	str	r2, [r3, #0]
                    for(size_t c = 0; c < out_size; c++) {
 8007114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007118:	3301      	adds	r3, #1
 800711a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800711e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007126:	429a      	cmp	r2, r3
 8007128:	d3e7      	bcc.n	80070fa <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x17e>
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 800712a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800712e:	3301      	adds	r3, #1
 8007130:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800713c:	429a      	cmp	r2, r3
 800713e:	d3d1      	bcc.n	80070e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x168>
                    }
                }
                input_matrix->cols = out_size;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007146:	609a      	str	r2, [r3, #8]
            }
 8007148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800714c:	4618      	mov	r0, r3
 800714e:	f002 ff6a 	bl	800a026 <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>

            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
 8007152:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007160:	edd7 6a00 	vldr	s13, [r7]
 8007164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007168:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98

            // filter here, before decimating, instead of inside extract_spec_features
            if (strcmp(config->filter_type, "low") == 0) {
 800716c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	4928      	ldr	r1, [pc, #160]	@ (8007214 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x298>)
 8007174:	4618      	mov	r0, r3
 8007176:	f7f9 f84b 	bl	8000210 <strcmp>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d11d      	bne.n	80071bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x240>
                if( config->filter_order ) {
 8007180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d048      	beq.n	800721c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_lowpass_filter(
 800718a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800718e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007192:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	4619      	mov	r1, r3
 800719c:	eef0 0a67 	vmov.f32	s1, s15
 80071a0:	ed97 0a26 	vldr	s0, [r7, #152]	@ 0x98
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7fc faef 	bl	8003788 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 80071aa:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 80071ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d032      	beq.n	800721c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 80071b6:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 80071ba:	e0a6      	b.n	800730a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
                        new_sampling_freq,
                        config->filter_cutoff,
                        config->filter_order));
                }
            }
            else if (strcmp(config->filter_type, "high") == 0) {
 80071bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	4915      	ldr	r1, [pc, #84]	@ (8007218 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x29c>)
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7f9 f823 	bl	8000210 <strcmp>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d125      	bne.n	800721c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                if( config->filter_order ) {
 80071d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d020      	beq.n	800721c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_highpass_filter(
 80071da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071de:	edd3 7a06 	vldr	s15, [r3, #24]
 80071e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	4619      	mov	r1, r3
 80071ec:	eef0 0a67 	vmov.f32	s1, s15
 80071f0:	ed97 0a26 	vldr	s0, [r7, #152]	@ 0x98
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7fc fafd 	bl	80037f4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 80071fa:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 80071fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 8007206:	f8d7 4094 	ldr.w	r4, [r7, #148]	@ 0x94
 800720a:	e07e      	b.n	800730a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 800720c:	08020fe4 	.word	0x08020fe4
 8007210:	fffffc14 	.word	0xfffffc14
 8007214:	08020bf8 	.word	0x08020bf8
 8007218:	08020bfc 	.word	0x08020bfc
                        config->filter_order));
                }
            }
            
            // set the filter order to 0, so that we won't double filter
            config->filter_order = 0;
 800721c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007220:	2200      	movs	r2, #0
 8007222:	61da      	str	r2, [r3, #28]

            // do this before extract_spec_features because extract_spec_features modifies the matrix
            constexpr size_t decimation = 10;
 8007224:	230a      	movs	r3, #10
 8007226:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            const size_t decimated_size =
                signal::get_decimated_size(input_matrix->cols, decimation);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	210a      	movs	r1, #10
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fd0d 	bl	8005c50 <_ZN2ei6signal18get_decimated_sizeEjj>
 8007236:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            matrix_t lf_signal(input_matrix->rows, decimated_size);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6859      	ldr	r1, [r3, #4]
 800723e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8007242:	2300      	movs	r3, #0
 8007244:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007248:	f7fa f9af 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
            _decimate(input_matrix, &lf_signal, decimation);
 800724c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007250:	220a      	movs	r2, #10
 8007252:	4619      	mov	r1, r3
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff fe27 	bl	8006ea8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>

            size_t n_features = extract_spec_features(
 800725a:	2300      	movs	r3, #0
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	2301      	movs	r3, #1
 8007260:	ed97 0a26 	vldr	s0, [r7, #152]	@ 0x98
 8007264:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff fab0 	bl	80067d0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8007270:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
                config,
                new_sampling_freq,
                true,
                false);

            if (n_features > 0 && config->extra_low_freq) {
 8007274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d038      	beq.n	80072ee <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
 800727c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d032      	beq.n	80072ee <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
                // disable filtering post decimation
                matrix_t lf_features(1, output_matrix->rows * output_matrix->cols - n_features,
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	6892      	ldr	r2, [r2, #8]
 8007290:	fb03 f202 	mul.w	r2, r3, r2
                    output_matrix->buffer + n_features);
 8007294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007298:	1ad1      	subs	r1, r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	f107 0010 	add.w	r0, r7, #16
 80072aa:	460a      	mov	r2, r1
 80072ac:	2101      	movs	r1, #1
 80072ae:	f7fa f97c 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>

                n_features += extract_spec_features(
 80072b2:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80072b6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80072ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80072be:	f107 0110 	add.w	r1, r7, #16
 80072c2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80072c6:	2300      	movs	r3, #0
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2301      	movs	r3, #1
 80072cc:	eeb0 0a47 	vmov.f32	s0, s14
 80072d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072d4:	f7ff fa7c 	bl	80067d0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 80072d8:	4602      	mov	r2, r0
 80072da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072de:	4413      	add	r3, r2
 80072e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                    &lf_features,
                    config,
                    new_sampling_freq / decimation,
                    true,
                    false);
            }
 80072e4:	f107 0310 	add.w	r3, r7, #16
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fa f989 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d101      	bne.n	80072fe <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x382>
 80072fa:	2400      	movs	r4, #0
 80072fc:	e000      	b.n	8007300 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x384>
 80072fe:	4c05      	ldr	r4, [pc, #20]	@ (8007314 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x398>)
        }
 8007300:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007304:	4618      	mov	r0, r3
 8007306:	f7fa f97b 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
    }
 800730a:	4623      	mov	r3, r4
 800730c:	4618      	mov	r0, r3
 800730e:	37cc      	adds	r7, #204	@ 0xcc
 8007310:	46bd      	mov	sp, r7
 8007312:	bd90      	pop	{r4, r7, pc}
 8007314:	fffffc14 	.word	0xfffffc14

08007318 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4618      	mov	r0, r3
 8007324:	f7f9 ff70 	bl	8001208 <_ZNSt14_Function_baseD1Ev>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <_ZN2ei11ei_signal_tC1Ev>:
} DCT_NORMALIZATION_MODE;

/**
 * Sensor signal structure
 */
typedef struct ei_signal_t {
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4618      	mov	r0, r3
 800733e:	f003 fe35 	bl	800afac <_ZNSt8functionIFijjPfEEC1Ev>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <_ZN2ei11ei_signal_tD1Ev>:
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff ffde 	bl	8007318 <_ZNSt8functionIFijjPfEED1Ev>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b08b      	sub	sp, #44	@ 0x2c
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	627b      	str	r3, [r7, #36]	@ 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007382:	6892      	ldr	r2, [r2, #8]
 8007384:	fbb3 f1f2 	udiv	r1, r3, r2
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	461a      	mov	r2, r3
 800738e:	f107 0014 	add.w	r0, r7, #20
 8007392:	2300      	movs	r3, #0
 8007394:	f7fa f909 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800739e:	4c23      	ldr	r4, [pc, #140]	@ (800742c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc4>)
 80073a0:	e039      	b.n	8007416 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2100      	movs	r1, #0
 80073ac:	f002 fec4 	bl	800a138 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	491e      	ldr	r1, [pc, #120]	@ (8007430 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>)
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7f8 ff2a 	bl	8000210 <strcmp>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d128      	bne.n	8007414 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>
        if (config->implementation_version == 1) {
 80073c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c4:	889b      	ldrh	r3, [r3, #4]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d10a      	bne.n	80073e0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 80073ca:	f107 0314 	add.w	r3, r7, #20
 80073ce:	ed97 0a00 	vldr	s0, [r7]
 80073d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff f84a 	bl	8006470 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073dc:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073de:	e01a      	b.n	8007416 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else if (config->implementation_version == 4) {
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	889b      	ldrh	r3, [r3, #4]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d10a      	bne.n	80073fe <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
            return spectral::feature::extract_spectral_analysis_features_v4(
 80073e8:	f107 0314 	add.w	r3, r7, #20
 80073ec:	ed97 0a00 	vldr	s0, [r7]
 80073f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fdc1 	bl	8006f7c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073fa:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073fc:	e00b      	b.n	8007416 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80073fe:	f107 0314 	add.w	r3, r7, #20
 8007402:	ed97 0a00 	vldr	s0, [r7]
 8007406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fc9e 	bl	8006d4c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 8007410:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 8007412:	e000      	b.n	8007416 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 8007414:	4c07      	ldr	r4, [pc, #28]	@ (8007434 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xcc>)
}
 8007416:	f107 0314 	add.w	r3, r7, #20
 800741a:	4618      	mov	r0, r3
 800741c:	f7fa f8f0 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 8007420:	4623      	mov	r3, r4
 8007422:	4618      	mov	r0, r3
 8007424:	372c      	adds	r7, #44	@ 0x2c
 8007426:	46bd      	mov	sp, r7
 8007428:	bd90      	pop	{r4, r7, pc}
 800742a:	bf00      	nop
 800742c:	fffffc16 	.word	0xfffffc16
 8007430:	08021160 	.word	0x08021160
 8007434:	fffffc0a 	.word	0xfffffc0a

08007438 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	605a      	str	r2, [r3, #4]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	609a      	str	r2, [r3, #8]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	60da      	str	r2, [r3, #12]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3310      	adds	r3, #16
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff ff65 	bl	8007332 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	f000 f832 	bl	80074f2 <_ZN14SignalWithAxes8get_dataEjjPf>
 800748e:	4603      	mov	r3, r0
        };
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d102      	bne.n	80074b4 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	e01a      	b.n	80074ea <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691a      	ldr	r2, [r3, #16]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6892      	ldr	r2, [r2, #8]
 80074c8:	fb03 f202 	mul.w	r2, r3, r2
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	621a      	str	r2, [r3, #32]
        };
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f103 0210 	add.w	r2, r3, #16
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60fb      	str	r3, [r7, #12]
        };
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f003 fd98 	bl	800b016 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>
#endif
        return &wrapped_signal;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3310      	adds	r3, #16
    }
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b08a      	sub	sp, #40	@ 0x28
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	fbb2 f3f3 	udiv	r3, r2, r3
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	68d2      	ldr	r2, [r2, #12]
 800750e:	6992      	ldr	r2, [r2, #24]
 8007510:	fb02 f303 	mul.w	r3, r2, r3
 8007514:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	68d2      	ldr	r2, [r2, #12]
 8007524:	6992      	ldr	r2, [r2, #24]
 8007526:	fb02 f303 	mul.w	r3, r2, r3
 800752a:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	627b      	str	r3, [r7, #36]	@ 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	623b      	str	r3, [r7, #32]
 8007534:	e02a      	b.n	800758c <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8007536:	2300      	movs	r3, #0
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	e01c      	b.n	8007576 <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	4413      	add	r3, r2
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	461a      	mov	r2, r3
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	18d1      	adds	r1, r2, r3
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	627a      	str	r2, [r7, #36]	@ 0x24
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	4413      	add	r3, r2
 800755e:	2201      	movs	r2, #1
 8007560:	f002 fdea 	bl	800a138 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8007564:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <_ZN14SignalWithAxes8get_dataEjjPf+0x7e>
                    return r;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	e014      	b.n	800759a <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	3301      	adds	r3, #1
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	429a      	cmp	r2, r3
 800757e:	d3dd      	bcc.n	800753c <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	6a3a      	ldr	r2, [r7, #32]
 8007588:	4413      	add	r3, r2
 800758a:	623b      	str	r3, [r7, #32]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4413      	add	r3, r2
 8007592:	6a3a      	ldr	r2, [r7, #32]
 8007594:	429a      	cmp	r2, r3
 8007596:	d3ce      	bcc.n	8007536 <_ZN14SignalWithAxes8get_dataEjjPf+0x44>
                }
            }
        }

        return 0;
 8007598:	2300      	movs	r3, #0
    }
 800759a:	4618      	mov	r0, r3
 800759c:	3728      	adds	r7, #40	@ 0x28
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_ZN19ei_impulse_handle_tD1Ev>:
class ei_impulse_handle_t {
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fb fc88 	bl	8002ec2 <_ZN18ei_impulse_state_tD1Ev>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80075ca:	f06f 0314 	mvn.w	r3, #20
#endif
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 80075da:	b480      	push	{r7}
 80075dc:	b087      	sub	sp, #28
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6178      	str	r0, [r7, #20]
 80075e2:	6139      	str	r1, [r7, #16]
 80075e4:	60fa      	str	r2, [r7, #12]
 80075e6:	ed87 0a02 	vstr	s0, [r7, #8]
 80075ea:	edc7 0a01 	vstr	s1, [r7, #4]
 80075ee:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80075f0:	f06f 0314 	mvn.w	r3, #20
#endif
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	6178      	str	r0, [r7, #20]
 8007608:	6139      	str	r1, [r7, #16]
 800760a:	60fa      	str	r2, [r7, #12]
 800760c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007610:	edc7 0a01 	vstr	s1, [r7, #4]
 8007614:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8007616:	2300      	movs	r3, #0
 8007618:	61fb      	str	r3, [r7, #28]
 800761a:	e03e      	b.n	800769a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x9a>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f993 3000 	ldrsb.w	r3, [r3]
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800762e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007636:	ed97 7a01 	vldr	s14, [r7, #4]
 800763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763e:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d011      	beq.n	800766c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x6c>
            ei_printf("%s:\t", impulse->categories[ix]);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4619      	mov	r1, r3
 8007658:	4816      	ldr	r0, [pc, #88]	@ (80076b4 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 800765a:	f001 fbe7 	bl	8008e2c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800765e:	ed97 0a06 	vldr	s0, [r7, #24]
 8007662:	f00f fd95 	bl	8017190 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8007666:	4814      	ldr	r0, [pc, #80]	@ (80076b8 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb8>)
 8007668:	f001 fbe0 	bl	8008e2c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	6819      	ldr	r1, [r3, #0]
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	3201      	adds	r2, #1
 8007680:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	3301      	adds	r3, #1
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	4413      	add	r3, r2
 800768e:	3304      	adds	r3, #4
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	3301      	adds	r3, #1
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 80076a0:	461a      	mov	r2, r3
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d3b9      	bcc.n	800761c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1c>
    }

    return EI_IMPULSE_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	08021404 	.word	0x08021404
 80076b8:	0802115c 	.word	0x0802115c

080076bc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	e031      	b.n	8007734 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x78>
        float value = data[ix];
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	4413      	add	r3, r2
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	613b      	str	r3, [r7, #16]

        if (debug) {
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d011      	beq.n	8007706 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x4a>
            ei_printf("%s:\t", impulse->categories[ix]);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	4816      	ldr	r0, [pc, #88]	@ (800774c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 80076f4:	f001 fb9a 	bl	8008e2c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80076f8:	ed97 0a04 	vldr	s0, [r7, #16]
 80076fc:	f00f fd48 	bl	8017190 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8007700:	4813      	ldr	r0, [pc, #76]	@ (8007750 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8007702:	f001 fb93 	bl	8008e2c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	6819      	ldr	r1, [r3, #0]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	3201      	adds	r2, #1
 800771a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	3301      	adds	r3, #1
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	4413      	add	r3, r2
 8007728:	3304      	adds	r3, #4
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	3301      	adds	r3, #1
 8007732:	617b      	str	r3, [r7, #20]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 800773a:	461a      	mov	r2, r3
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	4293      	cmp	r3, r2
 8007740:	d3c6      	bcc.n	80076d0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x14>
    }

    return EI_IMPULSE_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	08021404 	.word	0x08021404
 8007750:	0802115c 	.word	0x0802115c

08007754 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the visual anomaly result structures from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_visual_ad_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	70fb      	strb	r3, [r7, #3]
    }

    result->visual_ad_grid_cells = results.data();
    result->visual_ad_count = results.size();
#endif // EI_CLASSIFIER_HAS_VISUAL_ANOMALY
    return EI_IMPULSE_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov5(const ei_impulse_t *impulse,
                                                                              ei_impulse_result_t *result,
                                                                              int version,
                                                                              float *data,
                                                                              size_t output_features_count,
                                                                              bool debug = false) {
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800777e:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>:
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolox(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                             float *data,
                                                                             size_t output_features_count,
                                                                             bool debug = false) {
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	607a      	str	r2, [r7, #4]
 800779a:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800779c:	f06f 0314 	mvn.w	r3, #20
#endif // EI_HAS_YOLOX
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov7(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                              float *data,
                                                                              size_t output_features_count) {
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077ba:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_YOLOV7
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_decode_detections(const ei_impulse_t *impulse,
                                                                                     ei_impulse_result_t *result,
                                                                                     float *data,
                                                                                     size_t output_features_count,
                                                                                     bool debug = false) {
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_DECODE_DETECTIONS
    return fill_result_struct_tao_decode_detections_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077d8:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_DETECT_DETECTIONS
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov3(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV3
    return fill_result_struct_tao_yolov3_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077f6:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV3
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov4(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8007814:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e01e      	b.n	8007876 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x52>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	ed93 7a00 	vldr	s14, [r3]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	4413      	add	r3, r2
 800784c:	edd3 7a00 	vldr	s15, [r3]
 8007850:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	4413      	add	r3, r2
 800785c:	ed93 7a00 	vldr	s14, [r3]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800786c:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	3301      	adds	r3, #1
 8007874:	617b      	str	r3, [r7, #20]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d3dc      	bcc.n	8007838 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x14>
    }
}
 800787e:	bf00      	nop
 8007880:	bf00      	nop
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 800788c:	b5b0      	push	{r4, r5, r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 8007898:	f04f 0300 	mov.w	r3, #0
 800789c:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 800789e:	2300      	movs	r3, #0
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	e029      	b.n	80078f8 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x6c>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	ed93 7a00 	vldr	s14, [r3]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	edd3 7a00 	vldr	s15, [r3]
 80078be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078c2:	2002      	movs	r0, #2
 80078c4:	eeb0 0a67 	vmov.f32	s0, s15
 80078c8:	f002 f9e4 	bl	8009c94 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80078cc:	ec55 4b10 	vmov	r4, r5, d0
 80078d0:	6978      	ldr	r0, [r7, #20]
 80078d2:	f7f8 fe69 	bl	80005a8 <__aeabi_f2d>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	4620      	mov	r0, r4
 80078dc:	4629      	mov	r1, r5
 80078de:	f7f8 fd05 	bl	80002ec <__adddf3>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4610      	mov	r0, r2
 80078e8:	4619      	mov	r1, r3
 80078ea:	f7f9 f9ad 	bl	8000c48 <__aeabi_d2f>
 80078ee:	4603      	mov	r3, r0
 80078f0:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	3301      	adds	r3, #1
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d3d1      	bcc.n	80078a4 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x18>
    }
    return sqrt(dist) - cluster->max_error;
 8007900:	ed97 0a05 	vldr	s0, [r7, #20]
 8007904:	f7f9 fc3e 	bl	8001184 <_ZSt4sqrtf>
 8007908:	eeb0 7a40 	vmov.f32	s14, s0
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007912:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8007916:	eeb0 0a67 	vmov.f32	s0, s15
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bdb0      	pop	{r4, r5, r7, pc}

08007920 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 800792e:	4b15      	ldr	r3, [pc, #84]	@ (8007984 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x64>)
 8007930:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8007932:	2300      	movs	r3, #0
 8007934:	61bb      	str	r3, [r7, #24]
 8007936:	e018      	b.n	800796a <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4a>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	4413      	add	r3, r2
 8007940:	461a      	mov	r2, r3
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f7ff ffa1 	bl	800788c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 800794a:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 800794e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007952:	edd7 7a07 	vldr	s15, [r7, #28]
 8007956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795e:	d501      	bpl.n	8007964 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x44>
            min = dist;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	3301      	adds	r3, #1
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d3e2      	bcc.n	8007938 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x18>
        }
    }
    return min;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	ee07 3a90 	vmov	s15, r3
}
 8007978:	eeb0 0a67 	vmov.f32	s0, s15
 800797c:	3720      	adds	r7, #32
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	447a0000 	.word	0x447a0000

08007988 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    uint32_t anom_axes_size,
    const uint16_t *anom_axis,
    float *input)
{
 8007988:	b480      	push	{r7}
 800798a:	b08d      	sub	sp, #52	@ 0x34
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
    if (input_block_ids_size == 1) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d11a      	bne.n	80079d2 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x4a>
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 800799c:	2300      	movs	r3, #0
 800799e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079a0:	e012      	b.n	80079c8 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x40>
            input[ix] = fmatrix[0].matrix->buffer[anom_axis[ix]];
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079ae:	440b      	add	r3, r1
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	441a      	add	r2, r3
 80079b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079bc:	440b      	add	r3, r1
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 80079c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c4:	3301      	adds	r3, #1
 80079c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d3e8      	bcc.n	80079a2 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x1a>
 80079d0:	e053      	b.n	8007a7a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
    else {
#if EI_CLASSIFIER_SINGLE_FEATURE_INPUT == 0
        ei::matrix_t* matrix = NULL;
#endif
        // tracks where we are now in the combined feature matrix
        uint32_t global_buf_pos = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]
        // we add the size of passed matrix to it
        uint32_t buf_offset = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	62bb      	str	r3, [r7, #40]	@ 0x28
        // current index of input feature
        uint32_t input_pos = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	627b      	str	r3, [r7, #36]	@ 0x24

        for (size_t i = 0; i < input_block_ids_size; i++) {
 80079de:	2300      	movs	r3, #0
 80079e0:	623b      	str	r3, [r7, #32]
 80079e2:	e044      	b.n	8007a6e <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xe6>
            if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, anom_axes_size)) {
                ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
                return EI_IMPULSE_INVALID_SIZE;
            }
#else
            ei::matrix_t* matrix = fmatrix[0].matrix;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	617b      	str	r3, [r7, #20]
#endif
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 80079ea:	2300      	movs	r3, #0
 80079ec:	61fb      	str	r3, [r7, #28]
 80079ee:	e02c      	b.n	8007a4a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xc2>
                global_buf_pos = anom_axis[input_pos];
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079f6:	4413      	add	r3, r2
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	61bb      	str	r3, [r7, #24]
                if (global_buf_pos <= buf_offset + (matrix->rows * matrix->cols)) {
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	6892      	ldr	r2, [r2, #8]
 8007a04:	fb03 f202 	mul.w	r2, r3, r2
 8007a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0a:	4413      	add	r3, r2
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d820      	bhi.n	8007a54 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xcc>
                    input[input_pos] = matrix->buffer[anom_axis[input_pos] - buf_offset];
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a1c:	440b      	add	r3, r1
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	4619      	mov	r1, r3
 8007a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a24:	1acb      	subs	r3, r1, r3
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	441a      	add	r2, r3
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a30:	440b      	add	r3, r1
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	601a      	str	r2, [r3, #0]
                    input_pos++;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	3301      	adds	r3, #1
 8007a3a:	627b      	str	r3, [r7, #36]	@ 0x24
                if (input_pos >= anom_axes_size) { goto end; }
 8007a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d219      	bcs.n	8007a78 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf0>
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	3301      	adds	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d3ce      	bcc.n	80079f0 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x68>
 8007a52:	e000      	b.n	8007a56 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xce>
                }
                else {
                    break;
 8007a54:	bf00      	nop
                }
            }
            buf_offset += matrix->rows * matrix->cols;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	6892      	ldr	r2, [r2, #8]
 8007a5e:	fb02 f303 	mul.w	r3, r2, r3
 8007a62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a64:	4413      	add	r3, r2
 8007a66:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (size_t i = 0; i < input_block_ids_size; i++) {
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	623b      	str	r3, [r7, #32]
 8007a6e:	6a3a      	ldr	r2, [r7, #32]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d3b6      	bcc.n	80079e4 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x5c>
        }
        end:;
 8007a76:	e000      	b.n	8007a7a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
                if (input_pos >= anom_axes_size) { goto end; }
 8007a78:	bf00      	nop
    }
    return EI_IMPULSE_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3734      	adds	r7, #52	@ 0x34
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08e      	sub	sp, #56	@ 0x38
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
    ei_learning_block_config_anomaly_kmeans_t *block_config = (ei_learning_block_config_anomaly_kmeans_t*)config_ptr;
 8007a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a98:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint64_t anomaly_start_ms = ei_read_timer_ms();
 8007a9a:	f00f fb5b 	bl	8017154 <_Z16ei_read_timer_msv>
 8007a9e:	e9c7 0108 	strd	r0, r1, [r7, #32]

    float *input = (float*)ei_malloc(block_config->anom_axes_size * sizeof(float));
 8007aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa4:	891b      	ldrh	r3, [r3, #8]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f00f fc75 	bl	8017398 <_Z9ei_mallocj>
 8007aae:	61f8      	str	r0, [r7, #28]
    if (!input) {
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x3a>
        ei_printf("Failed to allocate memory for anomaly input buffer");
 8007ab6:	4829      	ldr	r0, [pc, #164]	@ (8007b5c <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd4>)
 8007ab8:	f001 f9b8 	bl	8008e2c <_Z9ei_printfPKcz>
        return EI_IMPULSE_OUT_OF_MEMORY;
 8007abc:	f06f 030a 	mvn.w	r3, #10
 8007ac0:	e047      	b.n	8007b52 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xca>
    }

    extract_anomaly_input_values(fmatrix, input_block_ids, input_block_ids_size, block_config->anom_axes_size, block_config->anom_axis, input);
 8007ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac4:	891b      	ldrh	r3, [r3, #8]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	9201      	str	r2, [sp, #4]
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	68b8      	ldr	r0, [r7, #8]
 8007ada:	f7ff ff55 	bl	8007988 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>

    standard_scaler(input, block_config->anom_scale, block_config->anom_mean, block_config->anom_axes_size);
 8007ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae0:	6959      	ldr	r1, [r3, #20]
 8007ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae8:	891b      	ldrh	r3, [r3, #8]
 8007aea:	69f8      	ldr	r0, [r7, #28]
 8007aec:	f7ff fe9a 	bl	8007824 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
    float anomaly = get_min_distance_to_cluster(
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8007af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af2:	891b      	ldrh	r3, [r3, #8]
    float anomaly = get_min_distance_to_cluster(
 8007af4:	4619      	mov	r1, r3
 8007af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af8:	68da      	ldr	r2, [r3, #12]
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8007afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007afc:	8a1b      	ldrh	r3, [r3, #16]
    float anomaly = get_min_distance_to_cluster(
 8007afe:	69f8      	ldr	r0, [r7, #28]
 8007b00:	f7ff ff0e 	bl	8007920 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 8007b04:	ed87 0a06 	vstr	s0, [r7, #24]

    uint64_t anomaly_end_ms = ei_read_timer_ms();
 8007b08:	f00f fb24 	bl	8017154 <_Z16ei_read_timer_msv>
 8007b0c:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (debug) {
 8007b10:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00d      	beq.n	8007b34 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xac>
        ei_printf("Anomaly score (time: %d ms.): ", static_cast<int>(anomaly_end_ms - anomaly_start_ms));
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	4619      	mov	r1, r3
 8007b20:	480f      	ldr	r0, [pc, #60]	@ (8007b60 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd8>)
 8007b22:	f001 f983 	bl	8008e2c <_Z9ei_printfPKcz>
        ei_printf_float(anomaly);
 8007b26:	ed97 0a06 	vldr	s0, [r7, #24]
 8007b2a:	f00f fb31 	bl	8017190 <_Z15ei_printf_floatf>
        ei_printf("\n");
 8007b2e:	480d      	ldr	r0, [pc, #52]	@ (8007b64 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xdc>)
 8007b30:	f001 f97c 	bl	8008e2c <_Z9ei_printfPKcz>
    }

    result->timing.anomaly = anomaly_end_ms - anomaly_start_ms;
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b3e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    result->anomaly = anomaly;
 8007b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    ei_free(input);
 8007b4a:	69f8      	ldr	r0, [r7, #28]
 8007b4c:	f00f fc3e 	bl	80173cc <_Z7ei_freePv>

    return EI_IMPULSE_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3730      	adds	r7, #48	@ 0x30
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	0802140c 	.word	0x0802140c
 8007b60:	08021440 	.word	0x08021440
 8007b64:	0802115c 	.word	0x0802115c

08007b68 <_ZL17pre_cast_quantizefflb>:
#define __EI_QUANTIZE__H__

#include <algorithm>
#include <cmath>

static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007b72:	edc7 0a02 	vstr	s1, [r7, #8]
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]

    int32_t max_value = is_signed ? 127 : 255;
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <_ZL17pre_cast_quantizefflb+0x1e>
 8007b82:	237f      	movs	r3, #127	@ 0x7f
 8007b84:	e000      	b.n	8007b88 <_ZL17pre_cast_quantizefflb+0x20>
 8007b86:	23ff      	movs	r3, #255	@ 0xff
 8007b88:	61bb      	str	r3, [r7, #24]
    int32_t min_value = is_signed ? -128 : 0;
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <_ZL17pre_cast_quantizefflb+0x2e>
 8007b90:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8007b94:	e000      	b.n	8007b98 <_ZL17pre_cast_quantizefflb+0x30>
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 8007b9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8007b9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ba2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8007baa:	f7f9 fafb 	bl	80011a4 <_ZSt5roundf>
 8007bae:	eef0 7a40 	vmov.f32	s15, s0
 8007bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bb6:	ee17 2a90 	vmov	r2, s15
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	61fb      	str	r3, [r7, #28]
 8007bc0:	f107 0214 	add.w	r2, r7, #20
 8007bc4:	f107 031c 	add.w	r3, r7, #28
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f003 faef 	bl	800b1ae <_ZSt3maxIlERKT_S2_S2_>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	f107 0318 	add.w	r3, r7, #24
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4610      	mov	r0, r2
 8007bda:	f003 fad4 	bl	800b186 <_ZSt3minIlERKT_S2_S2_>
 8007bde:	4603      	mov	r3, r0
 8007be0:	681b      	ldr	r3, [r3, #0]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08e      	sub	sp, #56	@ 0x38
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
    size_t matrix_els = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t input_idx = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	633b      	str	r3, [r7, #48]	@ 0x30

    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007c02:	2300      	movs	r3, #0
 8007c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c06:	e098      	b.n	8007d3a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14e>
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	61fb      	str	r3, [r7, #28]
#endif

        matrix_els += matrix->rows * matrix->cols;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	6892      	ldr	r2, [r2, #8]
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c1c:	4413      	add	r3, r2
 8007c1e:	637b      	str	r3, [r7, #52]	@ 0x34

        switch (input->type) {
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b09      	cmp	r3, #9
 8007c26:	d024      	beq.n	8007c72 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x86>
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	dc7a      	bgt.n	8007d22 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d002      	beq.n	8007c36 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d04a      	beq.n	8007cca <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xde>
 8007c34:	e075      	b.n	8007d22 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
            case kTfLiteFloat32: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c36:	2300      	movs	r3, #0
 8007c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c3a:	e010      	b.n	8007c5e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x72>
                    input->data.f[input_idx++] = matrix->buffer[ix];
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	441a      	add	r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6859      	ldr	r1, [r3, #4]
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	1c58      	adds	r0, r3, #1
 8007c4e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	440b      	add	r3, r1
 8007c54:	6812      	ldr	r2, [r2, #0]
 8007c56:	601a      	str	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	69fa      	ldr	r2, [r7, #28]
 8007c64:	6892      	ldr	r2, [r2, #8]
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d3e5      	bcc.n	8007c3c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x50>
                }
                break;
 8007c70:	e060      	b.n	8007d34 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c72:	2300      	movs	r3, #0
 8007c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c76:	e01e      	b.n	8007cb6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xca>
                    float val = (float)matrix->buffer[ix];
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	61bb      	str	r3, [r7, #24]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2101      	movs	r1, #1
 8007c92:	4618      	mov	r0, r3
 8007c94:	eef0 0a67 	vmov.f32	s1, s15
 8007c98:	ed97 0a06 	vldr	s0, [r7, #24]
 8007c9c:	f7ff ff64 	bl	8007b68 <_ZL17pre_cast_quantizefflb>
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca6:	1c59      	adds	r1, r3, #1
 8007ca8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007caa:	4413      	add	r3, r2
 8007cac:	b242      	sxtb	r2, r0
 8007cae:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	6892      	ldr	r2, [r2, #8]
 8007cbe:	fb02 f303 	mul.w	r3, r2, r3
 8007cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d3d7      	bcc.n	8007c78 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8c>
                }
                break;
 8007cc8:	e034      	b.n	8007d34 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cca:	2300      	movs	r3, #0
 8007ccc:	623b      	str	r3, [r7, #32]
 8007cce:	e01e      	b.n	8007d0e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x122>
                    float val = (float)matrix->buffer[ix];
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	617b      	str	r3, [r7, #20]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4618      	mov	r0, r3
 8007cec:	eef0 0a67 	vmov.f32	s1, s15
 8007cf0:	ed97 0a05 	vldr	s0, [r7, #20]
 8007cf4:	f7ff ff38 	bl	8007b68 <_ZL17pre_cast_quantizefflb>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfe:	1c59      	adds	r1, r3, #1
 8007d00:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d02:	4413      	add	r3, r2
 8007d04:	b2c2      	uxtb	r2, r0
 8007d06:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	623b      	str	r3, [r7, #32]
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	6892      	ldr	r2, [r2, #8]
 8007d16:	fb02 f303 	mul.w	r3, r2, r3
 8007d1a:	6a3a      	ldr	r2, [r7, #32]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d3d7      	bcc.n	8007cd0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe4>
                break;
 8007d20:	e008      	b.n	8007d34 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	4619      	mov	r1, r3
 8007d28:	4814      	ldr	r0, [pc, #80]	@ (8007d7c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x190>)
 8007d2a:	f001 f87f 	bl	8008e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8007d2e:	f06f 030c 	mvn.w	r3, #12
 8007d32:	e01e      	b.n	8007d72 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d36:	3301      	adds	r3, #1
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	f4ff af62 	bcc.w	8007c08 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1c>
            }
        }
    }

    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	089b      	lsrs	r3, r3, #2
 8007d4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d00f      	beq.n	8007d70 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d00a      	beq.n	8007d70 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
            (int)input->bytes, (int)matrix_els);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	699b      	ldr	r3, [r3, #24]
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d62:	461a      	mov	r2, r3
 8007d64:	4806      	ldr	r0, [pc, #24]	@ (8007d80 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x194>)
 8007d66:	f001 f861 	bl	8008e2c <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
 8007d6a:	f06f 0317 	mvn.w	r3, #23
 8007d6e:	e000      	b.n	8007d72 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    }

    return EI_IMPULSE_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3738      	adds	r7, #56	@ 0x38
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	08021460 	.word	0x08021460
 8007d80:	08021484 	.word	0x08021484

08007d84 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b088      	sub	sp, #32
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	6892      	ldr	r2, [r2, #8]
 8007d96:	fb02 f303 	mul.w	r3, r2, r3
 8007d9a:	617b      	str	r3, [r7, #20]

    switch (output->type) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b09      	cmp	r3, #9
 8007da2:	d026      	beq.n	8007df2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x6e>
 8007da4:	2b09      	cmp	r3, #9
 8007da6:	f300 8093 	bgt.w	8007ed0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d002      	beq.n	8007db4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x30>
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d057      	beq.n	8007e62 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xde>
 8007db2:	e08d      	b.n	8007ed0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	089b      	lsrs	r3, r3, #2
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d00e      	beq.n	8007dde <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x5a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	da00      	bge.n	8007dca <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
 8007dc8:	3303      	adds	r3, #3
 8007dca:	109b      	asrs	r3, r3, #2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	4846      	ldr	r0, [pc, #280]	@ (8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007dd4:	f001 f82a 	bl	8008e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007dd8:	f06f 0317 	mvn.w	r3, #23
 8007ddc:	e082      	b.n	8007ee4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6859      	ldr	r1, [r3, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	461a      	mov	r2, r3
 8007dec:	f016 fddb 	bl	801e9a6 <memcpy>
            break;
 8007df0:	e077      	b.n	8007ee2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteInt8: {
            if (output->bytes != matrix_els) {
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d00a      	beq.n	8007e12 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8e>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007e00:	4619      	mov	r1, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	461a      	mov	r2, r3
 8007e06:	4839      	ldr	r0, [pc, #228]	@ (8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007e08:	f001 f810 	bl	8008e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007e0c:	f06f 0317 	mvn.w	r3, #23
 8007e10:	e068      	b.n	8007ee4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	e01e      	b.n	8007e56 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd2>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f993 3000 	ldrsb.w	r3, [r3]
 8007e24:	461a      	mov	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3e:	edc7 7a04 	vstr	s15, [r7, #16]
                output_matrix->buffer[ix] = value;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	3301      	adds	r3, #1
 8007e54:	61fb      	str	r3, [r7, #28]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d3db      	bcc.n	8007e18 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x94>
            }
            break;
 8007e60:	e03f      	b.n	8007ee2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d00a      	beq.n	8007e82 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xfe>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007e70:	4619      	mov	r1, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	461a      	mov	r2, r3
 8007e76:	481d      	ldr	r0, [pc, #116]	@ (8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007e78:	f000 ffd8 	bl	8008e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007e7c:	f06f 0317 	mvn.w	r3, #23
 8007e80:	e030      	b.n	8007ee4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e82:	2300      	movs	r3, #0
 8007e84:	61bb      	str	r3, [r7, #24]
 8007e86:	e01d      	b.n	8007ec4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x140>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	4413      	add	r3, r2
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eac:	edc7 7a03 	vstr	s15, [r7, #12]
                output_matrix->buffer[ix] = value;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	61bb      	str	r3, [r7, #24]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d3dc      	bcc.n	8007e88 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x104>
            }
            break;
 8007ece:	e008      	b.n	8007ee2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        default: {
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4806      	ldr	r0, [pc, #24]	@ (8007ef0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x16c>)
 8007ed8:	f000 ffa8 	bl	8008e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
 8007edc:	f06f 030d 	mvn.w	r3, #13
 8007ee0:	e000      	b.n	8007ee4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
        }
    }

    return EI_IMPULSE_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3720      	adds	r7, #32
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	0802150c 	.word	0x0802150c
 8007ef0:	08021550 	.word	0x08021550

08007ef4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08c      	sub	sp, #48	@ 0x30
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	789b      	ldrb	r3, [r3, #2]
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	f040 822d 	bne.w	800836c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x478>
        switch (block_config->object_detection_last_layer) {
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	2b09      	cmp	r3, #9
 8007f1c:	f200 821c 	bhi.w	8008358 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x464>
 8007f20:	a201      	add	r2, pc, #4	@ (adr r2, 8007f28 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007fc3 	.word	0x08007fc3
 8007f2c:	08007f51 	.word	0x08007f51
 8007f30:	08007fcf 	.word	0x08007fcf
 8007f34:	080080ab 	.word	0x080080ab
 8007f38:	08007fcf 	.word	0x08007fcf
 8007f3c:	080080cb 	.word	0x080080cb
 8007f40:	08008113 	.word	0x08008113
 8007f44:	08008113 	.word	0x08008113
 8007f48:	080081d1 	.word	0x080081d1
 8007f4c:	0800829b 	.word	0x0800829b
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b09      	cmp	r3, #9
 8007f56:	bf0c      	ite	eq
 8007f58:	2301      	moveq	r3, #1
 8007f5a:	2300      	movne	r3, #0
 8007f5c:	74fb      	strb	r3, [r7, #19]
                if (int8_output) {
 8007f5e:	7cfb      	ldrb	r3, [r7, #19]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01d      	beq.n	8007fa0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xac>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	ee07 3a90 	vmov	s15, r3
 8007f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f7e:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	460b      	mov	r3, r1
 8007f88:	eef0 0a47 	vmov.f32	s1, s14
 8007f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8007f90:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f7ff fb21 	bl	80075da <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
                        impulse->fomo_output_size, impulse->fomo_output_size);
                }
                break;
 8007f9e:	e233      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685a      	ldr	r2, [r3, #4]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007fa8:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7ff fb01 	bl	80075bc <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8007fc0:	e222      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 8007fc2:	48a4      	ldr	r0, [pc, #656]	@ (8008254 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x360>)
 8007fc4:	f000 ff32 	bl	8008e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8007fc8:	f06f 0309 	mvn.w	r3, #9
 8007fcc:	e21e      	b.n	800840c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                int version = impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI ?
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
 8007fd4:	2b05      	cmp	r3, #5
 8007fd6:	d101      	bne.n	8007fdc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xe8>
 8007fd8:	2305      	movs	r3, #5
 8007fda:	e000      	b.n	8007fde <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xea>
 8007fdc:	2306      	movs	r3, #6
 8007fde:	617b      	str	r3, [r7, #20]
                    5 : 6;

                if (output->type == kTfLiteInt8) {
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	d11e      	bne.n	8008026 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x132>
                    fill_res = fill_result_struct_quantized_yolov5(
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        result,
                        version,
                        output->data.int8,
                        output->params.zero_point,
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 8007ff0:	ee07 3a90 	vmov	s15, r3
 8007ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 8008002:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008006:	9201      	str	r2, [sp, #4]
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	eef0 0a47 	vmov.f32	s1, s14
 800800e:	eeb0 0a67 	vmov.f32	s0, s15
 8008012:	460b      	mov	r3, r1
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f003 f8f0 	bl	800b1fe <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 800801e:	4603      	mov	r3, r0
 8008020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8008024:	e1f0      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b03      	cmp	r3, #3
 800802c:	d11e      	bne.n	800806c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x178>
                    fill_res = fill_result_struct_quantized_yolov5(
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6859      	ldr	r1, [r3, #4]
                        output->params.zero_point,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 8008048:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800804c:	9201      	str	r2, [sp, #4]
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	eef0 0a47 	vmov.f32	s1, s14
 8008054:	eeb0 0a67 	vmov.f32	s0, s15
 8008058:	460b      	mov	r3, r1
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f003 f8e0 	bl	800b224 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 800806a:	e1cd      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d111      	bne.n	8008098 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1a4>
                    fill_res = fill_result_struct_f32_yolov5(
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6859      	ldr	r1, [r3, #4]
                        impulse->tflite_output_features_count,
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_yolov5(
 800807c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008080:	9201      	str	r2, [sp, #4]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	460b      	mov	r3, r1
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff fb70 	bl	8007770 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>
 8008090:	4603      	mov	r3, r0
 8008092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8008096:	e1b7      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	4619      	mov	r1, r3
 800809e:	486e      	ldr	r0, [pc, #440]	@ (8008258 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
 80080a0:	f000 fec4 	bl	8008e2c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80080a4:	f06f 0309 	mvn.w	r3, #9
 80080a8:	e1b0      	b.n	800840c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    fill_res = fill_result_struct_f32_yolox(
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.f,
                        impulse->tflite_output_features_count,
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_yolox(
 80080b2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	460b      	mov	r3, r1
 80080ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7ff fb66 	bl	800778e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                        debug);
                #endif
                break;
 80080c8:	e19e      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            case EI_CLASSIFIER_LAST_LAYER_YOLOV7: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    size_t output_feature_count = 1;
 80080ca:	2301      	movs	r3, #1
 80080cc:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80080ce:	2300      	movs	r3, #0
 80080d0:	61fb      	str	r3, [r7, #28]
 80080d2:	e00d      	b.n	80080f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1fc>
                        output_feature_count *= output->dims->data[ix];
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	fb02 f303 	mul.w	r3, r2, r3
 80080e8:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	3301      	adds	r3, #1
 80080ee:	61fb      	str	r3, [r7, #28]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	dbeb      	blt.n	80080d4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1e0>
                    }
                    fill_res = fill_result_struct_f32_yolov7(
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f7ff fb51 	bl	80077ac <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                        impulse,
                        result,
                        output->data.f,
                        output_feature_count);
                #endif
                break;
 8008110:	e17a      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_SSD:
            case EI_CLASSIFIER_LAST_LAYER_TAO_RETINANET: {

                if (output->type == kTfLiteInt8) {
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b09      	cmp	r3, #9
 8008118:	d11c      	bne.n	8008154 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x260>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008134:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	460b      	mov	r3, r1
 800813c:	eef0 0a47 	vmov.f32	s1, s14
 8008140:	eeb0 0a67 	vmov.f32	s0, s15
 8008144:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f003 f87f 	bl	800b24a <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 800814c:	4603      	mov	r3, r0
 800814e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8008152:	e159      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b03      	cmp	r3, #3
 800815a:	d11c      	bne.n	8008196 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2a2>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008164:	ee07 3a90 	vmov	s15, r3
 8008168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008176:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	460b      	mov	r3, r1
 800817e:	eef0 0a47 	vmov.f32	s1, s14
 8008182:	eeb0 0a67 	vmov.f32	s0, s15
 8008186:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f003 f871 	bl	800b270 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8008194:	e138      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d10f      	bne.n	80081be <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2ca>
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 80081a6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	460b      	mov	r3, r1
 80081ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff fb0a 	bl	80077ca <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 80081bc:	e124      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	4619      	mov	r1, r3
 80081c4:	4825      	ldr	r0, [pc, #148]	@ (800825c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
 80081c6:	f000 fe31 	bl	8008e2c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80081ca:	f06f 0309 	mvn.w	r3, #9
 80081ce:	e11d      	b.n	800840c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV3: {

                if (output->type == kTfLiteInt8) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b09      	cmp	r3, #9
 80081d6:	d11c      	bne.n	8008212 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x31e>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081f2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	460b      	mov	r3, r1
 80081fa:	eef0 0a47 	vmov.f32	s1, s14
 80081fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008202:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f003 f846 	bl	800b296 <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8008210:	e0fa      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b03      	cmp	r3, #3
 8008218:	d122      	bne.n	8008260 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8008234:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	460b      	mov	r3, r1
 800823c:	eef0 0a47 	vmov.f32	s1, s14
 8008240:	eeb0 0a67 	vmov.f32	s0, s15
 8008244:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f003 f838 	bl	800b2bc <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 800824c:	4603      	mov	r3, r0
 800824e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8008252:	e0d9      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
 8008254:	08021578 	.word	0x08021578
 8008258:	080215c0 	.word	0x080215c0
 800825c:	080215f8 	.word	0x080215f8
                else if (output->type == kTfLiteFloat32) {
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d10f      	bne.n	8008288 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x394>
                    fill_res = fill_result_struct_f32_tao_yolov3(
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov3(
 8008270:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	460b      	mov	r3, r1
 8008278:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff fab4 	bl	80077e8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>
 8008280:	4603      	mov	r3, r0
 8008282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8008286:	e0bf      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	4619      	mov	r1, r3
 800828e:	4861      	ldr	r0, [pc, #388]	@ (8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x520>)
 8008290:	f000 fdcc 	bl	8008e2c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8008294:	f06f 0309 	mvn.w	r3, #9
 8008298:	e0b8      	b.n	800840c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV4: {

                if (output->type == kTfLiteInt8) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b09      	cmp	r3, #9
 80082a0:	d11c      	bne.n	80082dc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3e8>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082bc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	460b      	mov	r3, r1
 80082c4:	eef0 0a47 	vmov.f32	s1, s14
 80082c8:	eeb0 0a67 	vmov.f32	s0, s15
 80082cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f003 f807 	bl	800b2e2 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80082da:	e095      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d11c      	bne.n	800831e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x42a>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082ec:	ee07 3a90 	vmov	s15, r3
 80082f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082fe:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	460b      	mov	r3, r1
 8008306:	eef0 0a47 	vmov.f32	s1, s14
 800830a:	eeb0 0a67 	vmov.f32	s0, s15
 800830e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f002 fff9 	bl	800b308 <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008316:	4603      	mov	r3, r0
 8008318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 800831c:	e074      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d10f      	bne.n	8008346 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x452>
                    fill_res = fill_result_struct_f32_tao_yolov4(
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov4(
 800832e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	460b      	mov	r3, r1
 8008336:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7ff fa64 	bl	8007806 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>
 800833e:	4603      	mov	r3, r0
 8008340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8008344:	e060      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	4619      	mov	r1, r3
 800834c:	4832      	ldr	r0, [pc, #200]	@ (8008418 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x524>)
 800834e:	f000 fd6d 	bl	8008e2c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8008352:	f06f 0309 	mvn.w	r3, #9
 8008356:	e059      	b.n	800840c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 800835e:	4619      	mov	r1, r3
 8008360:	482e      	ldr	r0, [pc, #184]	@ (800841c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x528>)
 8008362:	f000 fd63 	bl	8008e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8008366:	f06f 0309 	mvn.w	r3, #9
 800836a:	e04f      	b.n	800840c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	789b      	ldrb	r3, [r3, #2]
 8008370:	2b05      	cmp	r3, #5
 8008372:	d113      	bne.n	800839c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4a8>
    {
        if (!result->copy_output) {
 8008374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008376:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 800837a:	f083 0301 	eor.w	r3, r3, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d041      	beq.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            fill_res = fill_result_visual_ad_struct_f32(impulse, result, output->data.f, debug);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800838c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff f9e0 	bl	8007754 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 8008394:	4603      	mov	r3, r0
 8008396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800839a:	e035      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
 800839c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800839e:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80083a2:	f083 0301 	eor.w	r3, r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d02d      	beq.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b09      	cmp	r3, #9
 80083b2:	bf0c      	ite	eq
 80083b4:	2301      	moveq	r3, #1
 80083b6:	2300      	movne	r3, #0
 80083b8:	76fb      	strb	r3, [r7, #27]
            if (int8_output) {
 80083ba:	7efb      	ldrb	r3, [r7, #27]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d018      	beq.n	80083f2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4fe>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80083d6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80083da:	eef0 0a47 	vmov.f32	s1, s14
 80083de:	eeb0 0a67 	vmov.f32	s0, s15
 80083e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7ff f90b 	bl	8007600 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80083f0:	e00a      	b.n	8008408 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            else {
                fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80083fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7ff f95d 	bl	80076bc <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 8008402:	4603      	mov	r3, r0
 8008404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return fill_res;
 8008408:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800840c:	4618      	mov	r0, r3
 800840e:	3728      	adds	r7, #40	@ 0x28
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	0802162c 	.word	0x0802162c
 8008418:	08021660 	.word	0x08021660
 800841c:	08021694 	.word	0x08021694

08008420 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>:
    uint64_t *ctx_start_us,
    TfLiteTensor* input,
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	603b      	str	r3, [r7, #0]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	617b      	str	r3, [r7, #20]

    *ctx_start_us = ei_read_timer_us();
 8008434:	f00e fe9b 	bl	801716e <_Z16ei_read_timer_usv>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	4829      	ldr	r0, [pc, #164]	@ (80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xcc>)
 8008448:	4798      	blx	r3
 800844a:	4603      	mov	r3, r0
 800844c:	74fb      	strb	r3, [r7, #19]
    if (init_status != kTfLiteOk) {
 800844e:	7cfb      	ldrb	r3, [r7, #19]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d007      	beq.n	8008464 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x44>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
 8008454:	7cfb      	ldrb	r3, [r7, #19]
 8008456:	4619      	mov	r1, r3
 8008458:	4825      	ldr	r0, [pc, #148]	@ (80084f0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xd0>)
 800845a:	f000 fce7 	bl	8008e2c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 800845e:	f06f 0305 	mvn.w	r3, #5
 8008462:	e03f      	b.n	80084e4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	2000      	movs	r0, #0
 800846c:	4798      	blx	r3
 800846e:	4603      	mov	r3, r0
 8008470:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 8008472:	7cbb      	ldrb	r3, [r7, #18]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x5e>
        return EI_IMPULSE_TFLITE_ERROR;
 8008478:	f06f 0302 	mvn.w	r3, #2
 800847c:	e032      	b.n	80084e4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	7a92      	ldrb	r2, [r2, #10]
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	4603      	mov	r3, r0
 800848e:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 8008490:	7cbb      	ldrb	r3, [r7, #18]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x7c>
        return EI_IMPULSE_TFLITE_ERROR;
 8008496:	f06f 0302 	mvn.w	r3, #2
 800849a:	e023      	b.n	80084e4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d11d      	bne.n	80084e2 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	7b12      	ldrb	r2, [r2, #12]
 80084ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80084b8:	7cbb      	ldrb	r3, [r7, #18]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xa4>
            return EI_IMPULSE_TFLITE_ERROR;
 80084be:	f06f 0302 	mvn.w	r3, #2
 80084c2:	e00f      	b.n	80084e4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	7ad2      	ldrb	r2, [r2, #11]
 80084cc:	6a39      	ldr	r1, [r7, #32]
 80084ce:	4610      	mov	r0, r2
 80084d0:	4798      	blx	r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80084d6:	7cbb      	ldrb	r3, [r7, #18]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
            return EI_IMPULSE_TFLITE_ERROR;
 80084dc:	f06f 0302 	mvn.w	r3, #2
 80084e0:	e000      	b.n	80084e4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
    }

    return EI_IMPULSE_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	080012ad 	.word	0x080012ad
 80084f0:	080216c8 	.word	0x080216c8

080084f4 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80084f4:	b5b0      	push	{r4, r5, r7, lr}
 80084f6:	b08e      	sub	sp, #56	@ 0x38
 80084f8:	af04      	add	r7, sp, #16
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	e9c7 2300 	strd	r2, r3, [r7]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	627b      	str	r3, [r7, #36]	@ 0x24

    if (graph_config->model_invoke() != kTfLiteOk) {
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	4798      	blx	r3
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	bf14      	ite	ne
 8008514:	2301      	movne	r3, #1
 8008516:	2300      	moveq	r3, #0
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x30>
        return EI_IMPULSE_TFLITE_ERROR;
 800851e:	f06f 0302 	mvn.w	r3, #2
 8008522:	e04d      	b.n	80085c0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 8008524:	f00e fe23 	bl	801716e <_Z16ei_read_timer_usv>
 8008528:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 800852c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008534:	1a84      	subs	r4, r0, r2
 8008536:	eb61 0503 	sbc.w	r5, r1, r3
 800853a:	4622      	mov	r2, r4
 800853c:	462b      	mov	r3, r5
 800853e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008540:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8008544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008546:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	@ 0xf0
 800854a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800854e:	f04f 0300 	mov.w	r3, #0
 8008552:	f7f8 fbc9 	bl	8000ce8 <__aeabi_ldivmod>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800855c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8008560:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8008564:	2b00      	cmp	r3, #0
 8008566:	d006      	beq.n	8008576 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x82>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8008568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800856a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800856e:	4619      	mov	r1, r3
 8008570:	4815      	ldr	r0, [pc, #84]	@ (80085c8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xd4>)
 8008572:	f000 fc5b 	bl	8008e2c <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 8008576:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800857a:	9302      	str	r3, [sp, #8]
 800857c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008586:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff fcb2 	bl	8007ef4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
 8008590:	4603      	mov	r3, r0
 8008592:	75fb      	strb	r3, [r7, #23]
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
 8008594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xae>
        return fill_res;
 800859c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085a0:	e00e      	b.n	80085c0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80085a2:	f00e fdcf 	bl	8017144 <_Z29ei_run_impulse_check_canceledv>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f113 0f02 	cmn.w	r3, #2
 80085ac:	bf0c      	ite	eq
 80085ae:	2301      	moveq	r3, #1
 80085b0:	2300      	movne	r3, #0
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xca>
        return EI_IMPULSE_CANCELED;
 80085b8:	f06f 0301 	mvn.w	r3, #1
 80085bc:	e000      	b.n	80085c0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    return EI_IMPULSE_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3728      	adds	r7, #40	@ 0x28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bdb0      	pop	{r4, r5, r7, pc}
 80085c8:	080216f8 	.word	0x080216f8

080085cc <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 80085cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ce:	b0d7      	sub	sp, #348	@ 0x15c
 80085d0:	af06      	add	r7, sp, #24
 80085d2:	f507 76a0 	add.w	r6, r7, #320	@ 0x140
 80085d6:	f5a6 769a 	sub.w	r6, r6, #308	@ 0x134
 80085da:	6030      	str	r0, [r6, #0]
 80085dc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80085e0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80085e4:	6001      	str	r1, [r0, #0]
 80085e6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80085ea:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 80085ee:	600a      	str	r2, [r1, #0]
 80085f0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80085f4:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80085f8:	6013      	str	r3, [r2, #0]
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
 80085fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80085fe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 8008602:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 800860c:	f00e fdaf 	bl	801716e <_Z16ei_read_timer_usv>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8008618:	4b65      	ldr	r3, [pc, #404]	@ (80087b0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 800861a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800861e:	f507 7292 	add.w	r2, r7, #292	@ 0x124
 8008622:	f107 0310 	add.w	r3, r7, #16
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fb65 	bl	8009cf8 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 800862e:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8008632:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8008636:	f107 0118 	add.w	r1, r7, #24
 800863a:	f107 0310 	add.w	r3, r7, #16
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	4603      	mov	r3, r0
 800864e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8008652:	f7ff fee5 	bl	8008420 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>
 8008656:	4603      	mov	r3, r0
 8008658:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 800865c:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9e>
        return init_res;
 8008664:	f997 4137 	ldrsb.w	r4, [r7, #311]	@ 0x137
 8008668:	e096      	b.n	8008798 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 800866a:	f107 0310 	add.w	r3, r7, #16
 800866e:	4618      	mov	r0, r3
 8008670:	f002 fe5d 	bl	800b32e <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8008674:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 8008678:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800867c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008684:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008688:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008690:	4413      	add	r3, r2
 8008692:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 8008696:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800869a:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800869e:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 80086a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80086a6:	f5a3 709c 	sub.w	r0, r3, #312	@ 0x138
 80086aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	6800      	ldr	r0, [r0, #0]
 80086b8:	f7ff fa98 	bl	8007bec <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    if (input_res != EI_IMPULSE_OK) {
 80086c2:	f997 312b 	ldrsb.w	r3, [r7, #299]	@ 0x12b
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x104>
        return input_res;
 80086ca:	f997 412b 	ldrsb.w	r4, [r7, #299]	@ 0x12b
 80086ce:	e063      	b.n	8008798 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 80086d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086d4:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80086d8:	f5a1 709a 	sub.w	r0, r1, #308	@ 0x134
 80086dc:	f897 1164 	ldrb.w	r1, [r7, #356]	@ 0x164
 80086e0:	9105      	str	r1, [sp, #20]
 80086e2:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 80086e6:	9104      	str	r1, [sp, #16]
 80086e8:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 80086ec:	9103      	str	r1, [sp, #12]
 80086ee:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80086f2:	9102      	str	r1, [sp, #8]
 80086f4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80086f8:	9101      	str	r1, [sp, #4]
 80086fa:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80086fe:	9100      	str	r1, [sp, #0]
 8008700:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8008704:	6800      	ldr	r0, [r0, #0]
 8008706:	f7ff fef5 	bl	80084f4 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>
 800870a:	4603      	mov	r3, r0
 800870c:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
 8008710:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008714:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8008718:	2b00      	cmp	r3, #0
 800871a:	d023      	beq.n	8008764 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
 800871c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008720:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008728:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800872c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4413      	add	r3, r2
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800873a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	4413      	add	r3, r2
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f7ff fb1a 	bl	8007d84 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
 8008750:	4603      	mov	r3, r0
 8008752:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
        if (output_res != EI_IMPULSE_OK) {
 8008756:	f997 3129 	ldrsb.w	r3, [r7, #297]	@ 0x129
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
            return output_res;
 800875e:	f997 4129 	ldrsb.w	r4, [r7, #297]	@ 0x129
 8008762:	e019      	b.n	8008798 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
        }
    }

    graph_config->model_reset(ei_aligned_free);
 8008764:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4811      	ldr	r0, [pc, #68]	@ (80087b0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 800876c:	4798      	blx	r3

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 800876e:	f00e fcfe 	bl	801716e <_Z16ei_read_timer_usv>
 8008772:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008776:	1a84      	subs	r4, r0, r2
 8008778:	eb61 0503 	sbc.w	r5, r1, r3
 800877c:	4622      	mov	r2, r4
 800877e:	462b      	mov	r3, r5
 8008780:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 8008784:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

    if (run_res != EI_IMPULSE_OK) {
 8008788:	f997 312a 	ldrsb.w	r3, [r7, #298]	@ 0x12a
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1ca>
        return run_res;
 8008790:	f997 412a 	ldrsb.w	r4, [r7, #298]	@ 0x12a
 8008794:	e000      	b.n	8008798 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    return EI_IMPULSE_OK;
 8008796:	2400      	movs	r4, #0
}
 8008798:	f107 0310 	add.w	r3, r7, #16
 800879c:	4618      	mov	r0, r3
 800879e:	f001 fac0 	bl	8009d22 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 80087a2:	4623      	mov	r3, r4
 80087a4:	4618      	mov	r0, r3
 80087a6:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ae:	bf00      	nop
 80087b0:	08001331 	.word	0x08001331

080087b4 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80087b4:	b5b0      	push	{r4, r5, r7, lr}
 80087b6:	b094      	sub	sp, #80	@ 0x50
 80087b8:	af04      	add	r7, sp, #16
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	70fb      	strb	r3, [r7, #3]
    auto& impulse = handle->impulse;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	330c      	adds	r3, #12
 80087c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 80087c8:	2300      	movs	r3, #0
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087cc:	e02f      	b.n	800882e <run_inference+0x7a>

        ei_learning_block_t block = impulse->learning_blocks[ix];
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087d6:	015b      	lsls	r3, r3, #5
 80087d8:	4413      	add	r3, r2
 80087da:	f107 0414 	add.w	r4, r7, #20
 80087de:	461d      	mov	r5, r3
 80087e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80087e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        result->copy_output = block.keep_output;
 80087ec:	7e3a      	ldrb	r2, [r7, #24]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 80087f4:	69fc      	ldr	r4, [r7, #28]
 80087f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 80087fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fe:	6a3a      	ldr	r2, [r7, #32]
 8008800:	78f9      	ldrb	r1, [r7, #3]
 8008802:	9103      	str	r1, [sp, #12]
 8008804:	9202      	str	r2, [sp, #8]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	9201      	str	r2, [sp, #4]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	462b      	mov	r3, r5
 800880e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	47a0      	blx	r4
 8008814:	4603      	mov	r3, r0
 8008816:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (res != EI_IMPULSE_OK) {
 800881a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <run_inference+0x74>
            return res;
 8008822:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008826:	e017      	b.n	8008858 <run_inference+0xa4>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8008828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882a:	3301      	adds	r3, #1
 800882c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008834:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008836:	429a      	cmp	r2, r3
 8008838:	d3c9      	bcc.n	80087ce <run_inference+0x1a>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800883a:	f00e fc83 	bl	8017144 <_Z29ei_run_impulse_check_canceledv>
 800883e:	4603      	mov	r3, r0
 8008840:	f113 0f02 	cmn.w	r3, #2
 8008844:	bf0c      	ite	eq
 8008846:	2301      	moveq	r3, #1
 8008848:	2300      	movne	r3, #0
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <run_inference+0xa2>
        return EI_IMPULSE_CANCELED;
 8008850:	f06f 0301 	mvn.w	r3, #1
 8008854:	e000      	b.n	8008858 <run_inference+0xa4>
    }

    return EI_IMPULSE_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3740      	adds	r7, #64	@ 0x40
 800885c:	46bd      	mov	sp, r7
 800885e:	bdb0      	pop	{r4, r5, r7, pc}

08008860 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f002 fd93 	bl	800b39c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	4611      	mov	r1, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff ffe5 	bl	8008860 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3310      	adds	r3, #16
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe fd4d 	bl	800734c <_ZN2ei11ei_signal_tD1Ev>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 80088bc:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80088c0:	b0a6      	sub	sp, #152	@ 0x98
 80088c2:	af02      	add	r7, sp, #8
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	70fb      	strb	r3, [r7, #3]
 80088cc:	2600      	movs	r6, #0
    if(!handle) {
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <process_impulse+0x1e>
        return EI_IMPULSE_INFERENCE_ERROR;
 80088d4:	f06f 0615 	mvn.w	r6, #21
 80088d8:	e24c      	b.n	8008d74 <process_impulse+0x4b8>
    if (can_run_classifier_image_quantized(handle->impulse, block) == EI_IMPULSE_OK) {
        return run_classifier_image_quantized(handle->impulse, signal, result, debug);
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 80088da:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80088de:	2100      	movs	r1, #0
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f015 ff7f 	bl	801e7e4 <memset>
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088f2:	4413      	add	r3, r2
 80088f4:	67bb      	str	r3, [r7, #120]	@ 0x78

    // smart pointer to features array
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 80088f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088fc:	d201      	bcs.n	8008902 <process_impulse+0x46>
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	e001      	b.n	8008906 <process_impulse+0x4a>
 8008902:	f04f 33ff 	mov.w	r3, #4294967295
 8008906:	4618      	mov	r0, r3
 8008908:	f011 fbf5 	bl	801a0f6 <_Znaj>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008914:	4611      	mov	r1, r2
 8008916:	4618      	mov	r0, r3
 8008918:	f002 fbac 	bl	800b074 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>
    ei_feature_t* features = features_ptr.get();
 800891c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008920:	4618      	mov	r0, r3
 8008922:	f002 fbd5 	bl	800b0d0 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>
 8008926:	6778      	str	r0, [r7, #116]	@ 0x74
    memset(features, 0, sizeof(ei_feature_t) * block_num);
 8008928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	461a      	mov	r2, r3
 800892e:	2100      	movs	r1, #0
 8008930:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8008932:	f015 ff57 	bl	801e7e4 <memset>

    // have it outside of the loop to avoid going out of scope
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
 8008936:	6fbc      	ldr	r4, [r7, #120]	@ 0x78
 8008938:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800893c:	429c      	cmp	r4, r3
 800893e:	d202      	bcs.n	8008946 <process_impulse+0x8a>
 8008940:	1ca3      	adds	r3, r4, #2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	e001      	b.n	800894a <process_impulse+0x8e>
 8008946:	f04f 33ff 	mov.w	r3, #4294967295
 800894a:	4618      	mov	r0, r3
 800894c:	f011 fbd3 	bl	801a0f6 <_Znaj>
 8008950:	4603      	mov	r3, r0
 8008952:	461d      	mov	r5, r3
 8008954:	2304      	movs	r3, #4
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	1d2b      	adds	r3, r5, #4
 800895a:	601c      	str	r4, [r3, #0]
 800895c:	f105 0308 	add.w	r3, r5, #8
 8008960:	1e62      	subs	r2, r4, #1
 8008962:	4614      	mov	r4, r2
 8008964:	4698      	mov	r8, r3
 8008966:	e005      	b.n	8008974 <process_impulse+0xb8>
 8008968:	4640      	mov	r0, r8
 800896a:	f002 fd07 	bl	800b37c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>
 800896e:	3c01      	subs	r4, #1
 8008970:	f108 0804 	add.w	r8, r8, #4
 8008974:	2c00      	cmp	r4, #0
 8008976:	daf7      	bge.n	8008968 <process_impulse+0xac>
 8008978:	f105 0308 	add.w	r3, r5, #8
 800897c:	673b      	str	r3, [r7, #112]	@ 0x70

    uint64_t dsp_start_us = ei_read_timer_us();
 800897e:	f00e fbf6 	bl	801716e <_Z16ei_read_timer_usv>
 8008982:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68

    size_t out_features_index = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 800898c:	2300      	movs	r3, #0
 800898e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008992:	e13c      	b.n	8008c0e <process_impulse+0x352>
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800899a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800899e:	015b      	lsls	r3, r3, #5
 80089a0:	4413      	add	r3, r2
 80089a2:	f107 0410 	add.w	r4, r7, #16
 80089a6:	461d      	mov	r5, r3
 80089a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80089b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 80089b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80089bc:	18d4      	adds	r4, r2, r3
 80089be:	2010      	movs	r0, #16
 80089c0:	f011 fb88 	bl	801a0d4 <_Znwj>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461d      	mov	r5, r3
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	2300      	movs	r3, #0
 80089cc:	2101      	movs	r1, #1
 80089ce:	4628      	mov	r0, r5
 80089d0:	f7f8 fdeb 	bl	80015aa <_ZN2ei9ei_matrixC1EmmPf>
 80089d4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80089d8:	4629      	mov	r1, r5
 80089da:	4618      	mov	r0, r3
 80089dc:	f002 fb95 	bl	800b10a <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80089e0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80089e4:	4619      	mov	r1, r3
 80089e6:	4620      	mov	r0, r4
 80089e8:	f7ff ff4a 	bl	8008880 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 80089ec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80089f0:	4618      	mov	r0, r3
 80089f2:	f002 fb99 	bl	800b128 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
        features[ix].matrix = matrix_ptrs[ix].get();
 80089f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80089fe:	18d1      	adds	r1, r2, r3
 8008a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008a08:	18d4      	adds	r4, r2, r3
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	f002 fbae 	bl	800b16c <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>
 8008a10:	4603      	mov	r3, r0
 8008a12:	6023      	str	r3, [r4, #0]
        features[ix].blockId = block.blockId;
 8008a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008a1c:	4413      	add	r3, r2
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	605a      	str	r2, [r3, #4]

        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a28:	441a      	add	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d922      	bls.n	8008a7a <process_impulse+0x1be>
            ei_printf("ERR: Would write outside feature buffer\n");
 8008a34:	48a6      	ldr	r0, [pc, #664]	@ (8008cd0 <process_impulse+0x414>)
 8008a36:	f000 f9f9 	bl	8008e2c <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8008a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d019      	beq.n	8008a74 <process_impulse+0x1b8>
 8008a40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a42:	3b04      	subs	r3, #4
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008a4a:	18d4      	adds	r4, r2, r3
 8008a4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a4e:	429c      	cmp	r4, r3
 8008a50:	d004      	beq.n	8008a5c <process_impulse+0x1a0>
 8008a52:	3c04      	subs	r4, #4
 8008a54:	4620      	mov	r0, r4
 8008a56:	f002 fb67 	bl	800b128 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008a5a:	e7f7      	b.n	8008a4c <process_impulse+0x190>
 8008a5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a5e:	f1a3 0208 	sub.w	r2, r3, #8
 8008a62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a64:	3b04      	subs	r3, #4
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3302      	adds	r3, #2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4610      	mov	r0, r2
 8008a70:	f011 fb2e 	bl	801a0d0 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008a74:	f06f 0604 	mvn.w	r6, #4
 8008a78:	e176      	b.n	8008d68 <process_impulse+0x4ac>
            delete[] matrix_ptrs;
            return EI_IMPULSE_DSP_ERROR;
        }
        auto internal_signal = signal;
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, handle->impulse);
 8008a7a:	6a3a      	ldr	r2, [r7, #32]
 8008a7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	f7fe fcd4 	bl	8007438 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        auto internal_signal = swa.get_signal();
 8008a90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fcff 	bl	8007498 <_ZN14SignalWithAxes10get_signalEv>
 8008a9a:	6638      	str	r0, [r7, #96]	@ 0x60
#endif

        int ret;
        if (block.factory) { // ie, if we're using state
 8008a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d038      	beq.n	8008b14 <process_impulse+0x258>
            // Msg user
            static bool has_printed = false;
            if (!has_printed) {
 8008aa2:	4b8c      	ldr	r3, [pc, #560]	@ (8008cd4 <process_impulse+0x418>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f083 0301 	eor.w	r3, r3, #1
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <process_impulse+0x20c>
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
 8008ab0:	4b89      	ldr	r3, [pc, #548]	@ (8008cd8 <process_impulse+0x41c>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4889      	ldr	r0, [pc, #548]	@ (8008cdc <process_impulse+0x420>)
 8008ab8:	f000 f9b8 	bl	8008e2c <_Z9ei_printfPKcz>
 8008abc:	4888      	ldr	r0, [pc, #544]	@ (8008ce0 <process_impulse+0x424>)
 8008abe:	f000 f9b5 	bl	8008e2c <_Z9ei_printfPKcz>
                has_printed = true;
 8008ac2:	4b84      	ldr	r3, [pc, #528]	@ (8008cd4 <process_impulse+0x418>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]
            }

            // getter has a lazy init, so we can just call it
            auto dsp_handle = handle->state.get_dsp_handle(ix);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fa f999 	bl	8002e06 <_ZN18ei_impulse_state_t14get_dsp_handleEj>
 8008ad4:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if(dsp_handle) {
 8008ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d017      	beq.n	8008b0c <process_impulse+0x250>
                ret = dsp_handle->extract(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8008adc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	681c      	ldr	r4, [r3, #0]
 8008ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008aec:	4413      	add	r3, r2
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	69f9      	ldr	r1, [r7, #28]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8008afa:	eeb0 0a67 	vmov.f32	s0, s15
 8008afe:	460b      	mov	r3, r1
 8008b00:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008b02:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8008b04:	47a0      	blx	r4
 8008b06:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 8008b0a:	e016      	b.n	8008b3a <process_impulse+0x27e>
            } else {
                return EI_IMPULSE_OUT_OF_MEMORY;
 8008b0c:	f06f 060a 	mvn.w	r6, #10
 8008b10:	2400      	movs	r4, #0
 8008b12:	e06f      	b.n	8008bf4 <process_impulse+0x338>
            }
        } else {
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008b1a:	00d2      	lsls	r2, r2, #3
 8008b1c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8008b1e:	440a      	add	r2, r1
 8008b20:	6811      	ldr	r1, [r2, #0]
 8008b22:	69f8      	ldr	r0, [r7, #28]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	68d2      	ldr	r2, [r2, #12]
 8008b28:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 8008b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8008b30:	4602      	mov	r2, r0
 8008b32:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8008b34:	4798      	blx	r3
 8008b36:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
        }

        if (ret != EIDSP_OK) {
 8008b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d025      	beq.n	8008b8e <process_impulse+0x2d2>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8008b42:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8008b46:	4867      	ldr	r0, [pc, #412]	@ (8008ce4 <process_impulse+0x428>)
 8008b48:	f000 f970 	bl	8008e2c <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8008b4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d019      	beq.n	8008b86 <process_impulse+0x2ca>
 8008b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b54:	3b04      	subs	r3, #4
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008b5c:	18d4      	adds	r4, r2, r3
 8008b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b60:	429c      	cmp	r4, r3
 8008b62:	d004      	beq.n	8008b6e <process_impulse+0x2b2>
 8008b64:	3c04      	subs	r4, #4
 8008b66:	4620      	mov	r0, r4
 8008b68:	f002 fade 	bl	800b128 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008b6c:	e7f7      	b.n	8008b5e <process_impulse+0x2a2>
 8008b6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b70:	f1a3 0208 	sub.w	r2, r3, #8
 8008b74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b76:	3b04      	subs	r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4610      	mov	r0, r2
 8008b82:	f011 faa5 	bl	801a0d0 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008b86:	f06f 0604 	mvn.w	r6, #4
 8008b8a:	2400      	movs	r4, #0
 8008b8c:	e032      	b.n	8008bf4 <process_impulse+0x338>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8008b8e:	f00e fad9 	bl	8017144 <_Z29ei_run_impulse_check_canceledv>
 8008b92:	4603      	mov	r3, r0
 8008b94:	f113 0f02 	cmn.w	r3, #2
 8008b98:	bf0c      	ite	eq
 8008b9a:	2301      	moveq	r3, #1
 8008b9c:	2300      	movne	r3, #0
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d020      	beq.n	8008be6 <process_impulse+0x32a>
            delete[] matrix_ptrs;
 8008ba4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d019      	beq.n	8008bde <process_impulse+0x322>
 8008baa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bac:	3b04      	subs	r3, #4
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008bb4:	18d4      	adds	r4, r2, r3
 8008bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	d004      	beq.n	8008bc6 <process_impulse+0x30a>
 8008bbc:	3c04      	subs	r4, #4
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f002 fab2 	bl	800b128 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008bc4:	e7f7      	b.n	8008bb6 <process_impulse+0x2fa>
 8008bc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bc8:	f1a3 0208 	sub.w	r2, r3, #8
 8008bcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bce:	3b04      	subs	r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f011 fa79 	bl	801a0d0 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
 8008bde:	f06f 0601 	mvn.w	r6, #1
 8008be2:	2400      	movs	r4, #0
 8008be4:	e006      	b.n	8008bf4 <process_impulse+0x338>
        }

        out_features_index += block.n_output_features;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8008bec:	4413      	add	r3, r2
 8008bee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    }
 8008bf2:	2401      	movs	r4, #1
 8008bf4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff fe51 	bl	80088a0 <_ZN14SignalWithAxesD1Ev>
 8008bfe:	2c01      	cmp	r4, #1
 8008c00:	f040 80b2 	bne.w	8008d68 <process_impulse+0x4ac>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8008c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c08:	3301      	adds	r3, #1
 8008c0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c14:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	f4ff aebb 	bcc.w	8008994 <process_impulse+0xd8>
            features[handle->impulse->dsp_blocks_size + ix].blockId = block.blockId;
        }
    }
#endif // EI_CLASSIFIER_SINGLE_FEATURE_INPUT

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8008c1e:	f00e faa6 	bl	801716e <_Z16ei_read_timer_usv>
 8008c22:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008c26:	ebb0 0a02 	subs.w	sl, r0, r2
 8008c2a:	eb61 0b03 	sbc.w	fp, r1, r3
 8008c2e:	4652      	mov	r2, sl
 8008c30:	465b      	mov	r3, fp
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	@ 0xe8
 8008c3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008c42:	f04f 0300 	mov.w	r3, #0
 8008c46:	f7f8 f84f 	bl	8000ce8 <__aeabi_ldivmod>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

    if (debug) {
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d057      	beq.n	8008d0a <process_impulse+0x44e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c60:	4619      	mov	r1, r3
 8008c62:	4821      	ldr	r0, [pc, #132]	@ (8008ce8 <process_impulse+0x42c>)
 8008c64:	f000 f8e2 	bl	8008e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c6e:	e047      	b.n	8008d00 <process_impulse+0x444>
            if (features[ix].matrix == nullptr) {
 8008c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008c78:	4413      	add	r3, r2
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d039      	beq.n	8008cf4 <process_impulse+0x438>
                continue;
            }
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008c80:	2300      	movs	r3, #0
 8008c82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008c84:	e015      	b.n	8008cb2 <process_impulse+0x3f6>
                ei_printf_float(features[ix].matrix->buffer[jx]);
 8008c86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008c8e:	4413      	add	r3, r2
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	edd3 7a00 	vldr	s15, [r3]
 8008c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8008ca2:	f00e fa75 	bl	8017190 <_Z15ei_printf_floatf>
                ei_printf(" ");
 8008ca6:	4811      	ldr	r0, [pc, #68]	@ (8008cec <process_impulse+0x430>)
 8008ca8:	f000 f8c0 	bl	8008e2c <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008cac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008cae:	3301      	adds	r3, #1
 8008cb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008cba:	4413      	add	r3, r2
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d3df      	bcc.n	8008c86 <process_impulse+0x3ca>
            }
            ei_printf("\n");
 8008cc6:	480a      	ldr	r0, [pc, #40]	@ (8008cf0 <process_impulse+0x434>)
 8008cc8:	f000 f8b0 	bl	8008e2c <_Z9ei_printfPKcz>
 8008ccc:	e013      	b.n	8008cf6 <process_impulse+0x43a>
 8008cce:	bf00      	nop
 8008cd0:	080217a4 	.word	0x080217a4
 8008cd4:	200053c0 	.word	0x200053c0
 8008cd8:	20000100 	.word	0x20000100
 8008cdc:	080217d0 	.word	0x080217d0
 8008ce0:	080217d8 	.word	0x080217d8
 8008ce4:	08021844 	.word	0x08021844
 8008ce8:	0802186c 	.word	0x0802186c
 8008cec:	08021880 	.word	0x08021880
 8008cf0:	0802115c 	.word	0x0802115c
                continue;
 8008cf4:	bf00      	nop
        for (size_t ix = 0; ix < block_num; ix++) {
 8008cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d3b2      	bcc.n	8008c70 <process_impulse+0x3b4>
        }
    }

    if (debug) {
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <process_impulse+0x45a>
        ei_printf("Running impulse...\n");
 8008d10:	481b      	ldr	r0, [pc, #108]	@ (8008d80 <process_impulse+0x4c4>)
 8008d12:	f000 f88b 	bl	8008e2c <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f7ff fd49 	bl	80087b4 <run_inference>
 8008d22:	4603      	mov	r3, r0
 8008d24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    delete[] matrix_ptrs;
 8008d28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d019      	beq.n	8008d62 <process_impulse+0x4a6>
 8008d2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d30:	3b04      	subs	r3, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008d38:	18d4      	adds	r4, r2, r3
 8008d3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d3c:	429c      	cmp	r4, r3
 8008d3e:	d004      	beq.n	8008d4a <process_impulse+0x48e>
 8008d40:	3c04      	subs	r4, #4
 8008d42:	4620      	mov	r0, r4
 8008d44:	f002 f9f0 	bl	800b128 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008d48:	e7f7      	b.n	8008d3a <process_impulse+0x47e>
 8008d4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d4c:	f1a3 0208 	sub.w	r2, r3, #8
 8008d50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d52:	3b04      	subs	r3, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3302      	adds	r3, #2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	f011 f9b7 	bl	801a0d0 <_ZdaPvj>
    return res;
 8008d62:	f997 6067 	ldrsb.w	r6, [r7, #103]	@ 0x67
 8008d66:	e000      	b.n	8008d6a <process_impulse+0x4ae>
            return EI_IMPULSE_DSP_ERROR;
 8008d68:	bf00      	nop
}
 8008d6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f002 f98f 	bl	800b092 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
 8008d74:	4633      	mov	r3, r6
 8008d76:	4618      	mov	r0, r3
 8008d78:	3790      	adds	r7, #144	@ 0x90
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8008d80:	08021884 	.word	0x08021884

08008d84 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	71fb      	strb	r3, [r7, #7]
    return process_impulse(&ei_default_impulse, signal, result, debug);
 8008d92:	4805      	ldr	r0, [pc, #20]	@ (8008da8 <run_classifier+0x24>)
 8008d94:	79fb      	ldrb	r3, [r7, #7]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	68f9      	ldr	r1, [r7, #12]
 8008d9a:	f7ff fd8f 	bl	80088bc <process_impulse>
 8008d9e:	4603      	mov	r3, r0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	200053b0 	.word	0x200053b0

08008dac <_Z16get_feature_datajjPf>:
// paste the raw features here
static float features[] = {
		30749, 34043, 37039, 36323, 39051, 45529, 43724, 45593, 49800, 50463, 53130, 51696, 53603, 57032, 60473, 61536, 58188, 63183, 62104, 61365, 65535, 64528, 65535, 65535, 65535, 65535, 63794, 65535, 65535, 65535, 65535, 62766, 62417, 58771, 61178, 62013, 58565, 55129, 53201, 52766, 50652, 49142, 45793, 48470, 43238, 39837, 40734, 37189, 37725, 36303, 33895, 31726, 31396, 27335, 24382, 19623, 21751, 20946, 16467, 14942, 11986, 11358, 12805, 5867, 6413, 6269, 6629, 1236, 6093, 0, 4461, 3264, 440, 0, 0, 2829, 0, 1504, 3537, 1114, 3965, 4, 1543, 5916, 2189, 6415, 4691, 7370, 8532, 14361, 14830, 16800, 16503, 21295, 23178, 21161, 22924, 23359, 27530, 31542, 31641, 33081, 37313, 38026, 40576, 40276, 47997, 44194, 47977, 50060, 52351, 56254, 54909, 56734, 56440, 58027, 62454, 63782, 65194, 60914, 64415, 63883, 65535, 65535, 62995, 65535, 63760, 65535, 62891, 64179, 64698, 65181, 63221, 62524, 61486, 62386, 58504, 56750, 53191, 51841, 52163, 50318, 48745, 47906, 45976, 40901, 42645, 41924, 36916, 35619, 30238, 33390, 30255, 26976, 23198, 20183, 23281, 18213, 18912, 14871, 11932, 14035, 13294, 8753, 10643, 3225, 5161, 2725, 0, 2763, 2645, 0, 0, 3059, 0, 1348, 0, 1492, 3409, 3757, 3713, 1497, 4955, 4635, 7439, 4771, 6470, 11742, 11070, 10834, 11934, 15587, 16670, 16422, 21732, 23760, 27052, 26101, 29300, 30621, 33046, 35752, 36429, 36573, 42567, 45877, 46507, 44257, 50384, 47476, 54845, 52412, 52245, 53916, 55832, 58377, 57882, 62036, 63325, 61135, 65535, 63813, 64421, 64827, 65535, 65535, 64589, 63084, 65348, 65535, 61309, 64712, 61129, 59051, 62147, 60390, 55840, 56387, 52504, 54125, 48915, 47061, 45327, 49785, 44099, 44907, 43759, 37061, 39501, 36084, 32198, 33125, 31601, 27409, 22519, 22457, 23727, 18279, 18072, 12917, 11520, 12511, 7232, 5881, 8710, 6441, 6375, 984, 4702, 947, 0, 0, 0, 0, 0, 1767, 0, 3276, 375, 0, 2412, 5480, 4552, 4828, 2127, 5042, 8533, 9618, 13218, 10902, 10364, 12154, 17555, 17307, 19738, 24182, 24255, 28088, 25489, 31583, 32032, 37086, 38397, 38632, 42394, 44441, 42531, 47123, 46395, 51475, 51380, 50606, 53477, 55166, 59837, 57106, 58856, 61234, 65415, 65535, 64142, 61408, 62920, 65535, 65535, 64403, 65535, 62525, 63778, 61695, 63249, 61422, 64596, 64371, 61598, 60702, 55505, 59376, 52463, 54107, 51703, 51089, 46244, 49597, 42116, 44512, 41754, 42062, 39199, 37933, 29697, 31600, 31596, 26794, 21554, 22906, 20361, 19159, 17598, 17021, 12303, 9620, 9098, 8124, 9538, 3795, 2778, 1685, 5992, 56, 0, 1132, 1819, 732, 0, 1569, 0, 0, 0, 2043, 3975, 3451, 5729, 6003, 4351, 4317, 6678, 8636, 12464, 12102, 13098, 12473, 19210, 21532, 17473, 22505, 21394, 29876, 30128, 28328, 32993, 35771, 35812, 41118, 39317, 40513, 42881, 43608, 48617, 53545, 48785, 53939, 57397, 54513, 55341, 61813, 59289, 63584, 61741, 62976, 61647, 61676, 65150, 64870, 63512, 65535, 65535, 65535, 64703, 63269, 63226, 63850, 64874, 63135, 57869, 57003, 60616, 57142, 54320, 50668, 53948, 52755, 48573, 49241, 45657, 43319, 38674, 36518, 37967, 34204, 35983, 32673, 25569, 26495, 21911, 21668, 18623, 21880, 15321, 14979, 12835, 12164, 11687, 11334, 4804, 3468, 4641, 2468, 4729, 2602, 2982, 343, 3144, 0, 476, 0, 1284, 0, 0, 1138, 4400, 4660, 5336, 2091, 6311, 7709, 7330, 5929, 7927, 14656, 15775, 15656, 16048, 20855, 23755, 23519, 24819, 23946, 29738, 31226, 30618, 33964, 34164, 40826, 42431, 40423, 42687, 44233, 46663, 51370, 52582, 51906, 58421, 54486, 58857, 60433, 59469, 61030, 63391, 62153, 61840, 64357, 63495, 63375, 65384, 65535, 64804, 65535, 63310, 65535, 63618, 63529, 64238, 59673, 59042, 58527, 60256, 59630, 52601, 53893, 49605, 50481, 50075, 43580, 43899, 45809, 40198, 37469, 36822, 32584, 32051, 29598, 28804, 24893, 23228, 24149, 23351, 19896, 14019, 16674, 12845, 12817, 10434, 9259, 6937, 3557, 7260, 7151, 2931, 1807, 0, 0, 1063, 0, 1976, 193, 0, 0, 3779, 578, 0, 827, 5617, 810, 2247, 8893, 10394, 8175, 10748, 10535, 10633, 14356, 18984, 21374, 17525, 22263, 25807, 27043, 27752, 28844, 31901, 32750, 35985, 36181, 40137, 39915, 43387, 47577, 50277, 49654, 54915, 54700, 52174, 56789, 59742, 61038, 60087, 59933, 59779, 64413, 63698, 61777, 64812, 64744, 63252, 62662, 64455, 62690, 63730, 63222, 63628, 65535, 61336, 61832, 59411, 60768, 56090, 57673, 52610, 55405, 55177, 47355, 46665, 47575, 46289, 40063, 43029, 41949, 39350, 34475, 35999, 28535, 30872, 27308, 23379, 22587, 19572, 21609, 14972, 15203, 15614, 14099, 7122, 7788, 9132, 3972, 6872, 7212, 1881, 0, 0, 3535, 447, 1499, 0, 0, 1785, 397, 0, 2140, 1883, 3492, 438, 5834, 7007, 3198, 9089, 7848, 7658, 12326, 11872, 12855, 15147, 20694, 20852, 25897, 21511, 28848, 30246, 30541, 32281, 36747, 35067, 37186, 41813, 40610, 48073, 45713, 51533, 51693, 52663, 55308, 52760, 56256, 57019, 62164, 59336, 63902, 61721, 64847, 64121, 63512, 65535, 65535, 63819, 65535, 64291, 63301, 65535, 64081, 65535, 65535, 60744, 62328, 60821, 61948, 56342, 55085, 55913, 52971, 54308, 53158, 49051, 49104, 45022, 46076, 39289, 38936, 35023, 36305, 32108, 31119, 27609, 26703, 22605, 22183, 20235, 19166, 15675, 12137, 10578, 11094, 12662, 7191, 7243, 4724, 6536, 6602, 5203, 0, 1980, 3501, 0, 0, 0, 2661, 1423, 1895, 2888, 3709, 4399, 953, 2994, 3288, 4627, 3927, 4323, 8119, 7103, 10879, 10703, 16076, 16937, 16130, 22779, 20391, 21878, 26768, 26362, 27914, 34808, 32527, 37575, 37596, 37720, 39658, 46903, 43477, 49448, 48151, 49390, 51195, 57889, 57351, 55730, 58601, 62634, 61753, 61576, 64621, 65535, 64574, 64685, 65535, 65535, 64498, 62977, 65535, 65535, 65535, 65535, 64959, 65192, 60911, 57666, 61665, 58501, 57838, 55796, 56908, 53501, 47429, 47321, 47044, 43599, 40057, 39229, 37782, 34433, 34541, 31974, 28429, 27818, 25329, 22509, 23768, 23930, 18436, 14914, 13343, 12050, 12147, 7291, 8345, 10587, 6698, 3312, 1146, 4565, 4692, 4271, 0, 3821, 0, 2277, 1328, 0, 2329, 0, 3623, 2404, 783, 357, 4204, 8297, 3333, 8015, 6142, 13561, 9216, 10646, 14001, 18376, 17112, 18163, 22905, 21825, 27355, 26989, 29474, 35539, 33678, 36131, 41877, 42529, 44994, 46106, 45319, 46388, 49222, 49621, 50922, 52689, 53802, 56761, 56190, 63287, 60408, 64487, 60512, 65535, 64053, 63159, 64417, 62679, 62642, 65535, 65535, 65535, 65535, 65535, 61253, 59984, 63185, 61195, 58451, 59793, 58176, 57527, 53501, 49324, 49474, 50260, 44618, 42565, 45515, 37953, 38625, 39877, 36583, 33825, 32095, 30675, 27309, 26682, 20071, 18169, 16740, 13766, 14564, 13103, 11422, 8193, 10392, 6332, 8379, 5410, 4337, 6356, 1573, 4179, 1684, 0, 0, 1662, 0, 1854, 3491, 754, 0, 1300, 4023, 4550, 7111, 7235, 4754, 7226, 11777, 8853, 11070, 12363, 14617, 19642, 21777, 17835, 23187, 25156, 28545, 31651, 31524, 35742, 34984, 36079, 41769, 43570, 43301, 46445, 45739, 47117, 53062, 53218, 53332, 54483, 58380, 55339, 62108, 61479, 63905, 61374, 63470, 62825, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 62705, 62987, 63015, 65535, 64472, 63916, 59870, 59323, 60156, 58599, 56705, 50486, 49817, 53210, 47122, 46429, 46827, 43300, 40963, 41113, 40002, 37045, 31684, 28922, 31169, 23570, 22697, 20048, 20169, 19157, 18715, 13943, 13251, 10305, 7418, 10190, 10612, 3364, 8174, 4984, 2565, 5472, 0, 2274, 0, 0, 0, 0, 0, 3520, 0, 1858, 0, 493, 2132, 6390, 6282, 8737, 9320, 6445, 12585, 8773, 12673, 13934, 15202, 20540, 22228, 25761, 22733, 24996, 26362, 30450, 32113, 36687, 38755, 39355, 40513, 41299, 42201, 48161, 51812, 53422, 53554, 51255, 56030, 57444, 61045, 56169, 57741, 62791, 60589, 60204, 64607, 65535, 63775, 63773, 65535, 63082, 65535, 65535, 64333, 64571, 64300, 61189, 65535, 60983, 60300, 61711, 59883, 57528, 56009, 55853, 54114, 48056, 47595, 48525, 41755, 40990, 40405, 37743, 39512, 34414, 32735, 29150, 31232, 27143, 23508, 23120, 19350, 16281, 17198, 13789, 15263, 13765, 12834, 9848, 9761, 8951, 8290, 4144, 4336, 4177, 0, 0, 0, 0, 0, 0, 1234, 0, 1503, 0, 4529, 0, 5221, 887, 3759, 9394, 8520, 9884, 7233, 10180, 14606, 12176, 19739, 21469, 22169, 20224, 23963, 26255, 29801, 27454, 31672, 36372, 35336, 40390, 39933, 41254, 45596, 49806, 45800, 48583, 52624, 54874, 56725, 59916, 60814, 61431, 62973, 59254, 61859, 59965, 63724, 62556, 65535, 65535, 65535, 65535, 64792, 65535, 65535, 65514, 62684, 61513, 63291, 63038, 58204, 59290, 55827, 56313, 55780, 52439, 55043, 48834, 51805, 43988, 46915, 42578, 38978, 40536, 33849, 34487, 35855, 32517, 28237, 29237, 27825, 23634, 18515, 17446, 16687, 12029, 14146, 11797, 9809, 7298, 6579, 8799, 6713, 4029, 3577, 5346, 0, 4235, 2456, 0, 1079, 2744, 853, 259, 0, 1114, 1158, 0, 1880, 3410, 6150, 6841, 7992, 9042, 7471, 9661, 10883, 14431, 18470, 20003, 21375, 23280, 26207, 27545, 26663, 29157, 32171, 33200, 39949, 38723, 38798, 42801, 46183, 45102, 49707, 53225, 54857, 55290, 58282, 54673, 58790, 58780, 58041, 60870, 60295, 64240, 64919, 62832, 65535, 65535, 65535, 63945, 65535, 65535, 62345, 63865, 65535, 62950, 63121, 59464, 60593, 60270, 60090, 58403, 52961, 54285, 53573, 51383, 48860, 45641, 46660, 42710, 39073, 37672, 35836, 33561, 33846, 27929, 27165, 27364, 23400, 19500, 22930, 20581, 19398, 17708, 13403, 9770, 8693, 9223, 10775, 4004, 4066, 4028, 1493, 3778, 1628, 4169, 0, 1202, 290, 2065, 414, 0, 622, 2751, 1790, 33, 5819, 5210, 4512, 4923, 6035, 10877, 9716, 14658, 14565, 17014, 18371, 20676, 20232, 24391, 24245, 26696, 27945, 28644, 32589, 36268, 35790, 39694, 39158, 40492, 45596, 48694, 51291, 50421, 51714, 56850, 52966, 57962, 57615, 56305, 58365, 61054, 62793, 63072, 65535, 65089, 61968, 65535, 65535, 65535, 63514, 63964, 61819, 65535, 65535, 62828, 62923, 62799, 59312, 62176, 59843, 57594, 56498, 53022, 51957, 52320, 47439, 48011, 44085, 41033, 44061, 39672, 37520, 34705, 29581, 31655, 29673, 23592, 25214, 24897, 22280, 20383, 19529, 12378, 14110, 10482, 8105, 6389, 5284, 7766, 3539, 5544, 238, 1986, 0, 3550, 1020, 747, 0, 0, 1123, 3313, 0, 998, 4258, 1457, 370, 1542, 5917, 3352, 5776, 10591, 8419, 9477, 15589, 16586, 18419, 21596, 20175, 23991, 22153, 26250, 30995, 33824, 32653, 34795, 36113, 39128, 40238, 42910, 43562, 46540, 46562, 47608, 51301, 53484, 52351, 54797, 57483, 58233, 63202, 61300, 59834, 60232, 65535, 62137, 65535, 63907, 65535, 65535, 65535, 65535, 65535, 65535, 64501, 61755, 64618, 64276, 61115, 59231, 59349, 53819, 55998, 54662, 52235, 51999, 45521, 45089, 45321, 41038, 41981, 36759, 40125, 33268, 30891, 32692, 31134, 23414, 24413, 22024, 18037, 16308, 20213, 13929, 10584, 12708, 9442, 10539, 4481, 6134, 3405, 1726, 0, 0, 1771, 3122, 0, 3254, 0, 0, 2020, 212, 3220, 2058, 0, 4944, 3679, 1672, 2319, 9215, 4552, 6194, 7092, 11214, 15065, 16081, 19858, 21933, 18627, 22491, 27296, 25008, 26663, 33415, 30094, 33752, 38506, 41857, 38850, 46073, 42534, 48829, 49123, 52942, 52161, 53969, 54116, 55750, 56168, 60040, 60470, 62544, 61267, 65289, 62356, 63105, 65535, 65403, 65071, 65535, 65023, 65535, 63820, 62247, 64320, 64375, 60515, 63160, 58238, 57423, 56352, 55677, 55421, 52475, 49371, 53331, 48242, 48795, 42555, 46152, 39400, 37308, 36179, 34228, 30327, 29477, 25832, 23682, 22886, 25439, 20007, 20405, 17535, 14243, 14367, 12191, 12563, 11724, 10544, 8962, 3111, 3906, 5315, 585, 0, 1420, 2233, 875, 0, 1432, 2437, 2044, 1656, 2628, 2743, 1503, 4091, 5997, 3550, 7583, 5152, 11016, 12144, 15101, 11069, 16807, 16025, 17159, 19903, 25041, 24728, 28893, 25804, 27448, 31520, 35392, 39609, 41900, 43687, 41509, 46598, 47449, 50605, 48640, 50364, 54822, 54125, 57835, 54830, 58131, 62557, 64550, 62950, 65510, 60746, 63437, 65356, 64054, 65260, 63447, 63451, 65535, 64672, 65535, 65535, 65506, 59913, 64353, 62784, 61255, 59050, 57131, 56527, 53722, 51022, 52775, 48928, 49188, 41781, 44062, 41696, 36174, 35310, 34029, 32235, 29466, 27027, 25469, 24765, 19786, 23437, 18860, 19899, 16119, 10907, 8766, 7922, 11356, 10163, 5796, 4004, 2056, 1025, 3279, 49, 1217, 0, 3013, 320, 0, 2644, 1151, 1117, 0, 1907, 1215, 2274, 831, 2912, 9247, 6243, 5945, 8394, 11464, 15224, 14867, 17186, 21273, 23177, 23039, 26765, 28637, 29259, 28935, 32328, 37185, 35532, 37983, 43728, 41668, 43571, 46528, 48658, 48245, 54756, 56178, 53152, 55143, 57498, 62318, 57932, 58830, 60079, 64279, 60918, 65535, 65535, 65535, 64011, 63081, 65535, 65535, 62427, 65535, 64308, 64163, 64850, 61047, 58723, 59630, 59130, 56821, 57858, 52426, 50609, 49243, 51790, 43559, 47188, 43477, 42476, 36821, 37347, 31897, 33063, 28984, 28040, 24431, 24049, 19974, 23757, 21852, 15104, 16371, 15162, 10283, 8172, 10675, 6721, 6469, 2544, 937, 1964, 5174, 789, 0, 0, 0, 0, 0, 0, 784, 3113, 0, 3647, 3522, 4661, 4406, 4790, 9341, 9874, 10467, 9424, 11620, 14131, 17605, 19012, 20953, 20193, 22301, 23357, 26163, 27632, 32617, 32591, 35828, 38438, 40198, 42897, 42502, 46297, 46888, 49098, 49084, 54571, 53235, 58287, 55875, 59988, 60443, 58634, 63304, 59280, 62211, 62761, 63413, 63849, 65535, 63285, 63616, 64539, 64596, 65535, 65535, 65535, 61460, 59558, 59704, 57240, 57079, 57520, 53975, 52063, 55180, 49086, 48036, 49300, 44939, 47366, 43778, 37646, 38042, 35677, 38089, 34880, 31854, 29033, 27386, 24918, 20254, 23224, 16017, 16857, 15416, 15587, 12935, 8456, 10592, 10213, 5125, 6338, 3191, 3783, 3905, 0, 0, 1942, 0, 0, 2887, 2209, 323, 0, 2184, 553, 487, 4570, 1024, 7321, 4931, 6318, 11683, 9020, 9801, 16044, 15962, 18096, 17824, 20184, 22353, 23067, 29206, 27690, 29896, 33670, 35880, 35963, 37961, 42628, 41306, 47387, 44934, 46666, 47306, 53918, 51336, 53342, 55690, 60011, 62325, 61527, 61858, 64882, 61681, 65535, 64971, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 64373, 61403, 65001, 65366, 62198, 63541, 56649, 58110, 59308, 53841, 50477, 52220, 50029, 49753, 46540, 46866, 40027, 39618, 41359, 34496, 37113, 33646, 28274, 29673, 26108, 26735, 21950, 22578, 19256, 17172, 17712, 13034, 14740, 11001, 9806, 6585, 6097, 5787, 4551, 1421, 0, 0, 0, 1013, 903, 3310, 0, 132, 647, 0, 0, 1312, 4113, 3344, 5134, 3466, 3194, 10171, 11004, 11854, 14829, 12176, 12029, 17650, 21158, 18499, 21279, 27146, 28077, 26175, 27941, 30398, 37575, 34284, 36929, 38324, 39855, 42753, 48401, 51788, 50714, 52965, 55329, 56652, 58012, 59495, 58564, 57307, 63690, 59602, 62497, 64456, 63420, 63675, 65120, 63015, 64939, 62359, 65535, 65535, 61432, 65535, 63333, 63611, 59837, 62853, 59668, 55381, 56451, 52270, 52899, 54731, 47632, 46498, 46965, 47972, 44891, 39032, 39746, 35842, 34793, 32016, 33581, 29079, 25706, 23405, 25299, 21650, 18758, 13929, 15287, 13626, 9538, 12588, 8563, 5757, 3004, 7844, 3683, 2223, 1107, 944, 2183, 0, 1854, 1822, 1113, 0, 0, 0, 2355, 1096, 3344, 4789, 4053, 1829, 7809, 8638, 9897, 11288, 12727, 10528, 16619, 18874, 19453, 21904, 20074, 22899, 26881, 28835, 32350, 30199, 32350, 36849, 37726, 42942, 41101, 42718, 43500, 50134, 51271, 54653, 53835, 57915, 58495, 56643, 59138, 62617, 63517, 60155, 64602, 61495, 65535, 65102, 65535, 65535, 64206, 65535, 63172, 62045, 65535, 65535, 62009, 65277, 62901, 63331, 58512, 60209, 59047, 56944, 56358, 52599, 51863, 46602, 47897, 47240, 42332, 41427, 40860, 39399, 32662, 31004, 31718, 27761, 28430, 25896, 19770, 21601, 19331, 19586, 17464, 14539, 14342, 10030, 7291, 5033, 3275, 7192, 2737, 5786, 4987, 1509, 0, 0, 0, 0, 612, 0, 1228, 0, 0, 0, 1285, 1539, 4315, 5587, 7407, 6385, 10068, 8859, 12505, 10483, 17332, 19845, 19128, 23772, 19959, 21965, 26336, 27311, 32270, 34400, 34236, 37793, 36953, 43759, 43746, 44951, 45237, 47625, 53185, 53015, 53727, 57531, 57658, 58952, 60198, 61687, 58517, 59884, 60740, 64650, 62229, 65535, 65535, 65535, 65535, 63831, 64923, 65535, 65535, 62218, 60957, 62937, 63266, 61390, 57607, 60436, 54985, 53593, 53085, 49069, 53514, 49119, 44480, 44567, 44622, 42958, 38338, 33769, 34705, 31279, 27563, 29612, 25668, 24635, 22261, 21471, 15774, 18417, 16030, 11995, 12756, 12627, 10349, 9749, 6463, 5049, 5213, 4225, 4158, 3105, 4299, 2149, 0, 0, 1168, 0, 0, 0, 0, 3623, 1598, 3785, 4774, 4435, 9314, 7795, 7766, 7144, 14850, 16463, 13801, 17563, 17818, 22111, 24951, 27881, 28009, 28272, 31173, 34972, 34193, 35177, 36572, 43322, 40481, 46153, 47596, 49682, 52254, 52228, 54510, 53226, 59538, 56085, 56362, 60247, 62707, 63897, 60895, 65535, 65252, 65535, 65535, 65535, 65535, 65535, 65520, 64036, 62314, 62709, 64735, 65064, 62019, 58105, 60909, 54817, 59492, 51963, 55278, 49216, 47931, 47456, 44383, 42421, 42948, 43133, 40255, 39309, 36870, 30405, 29134, 27238, 29614, 26935, 21545, 22562, 21562, 16374, 14411, 14131, 9271, 12812, 6617, 6827, 8376, 8251, 3643, 2296, 4665, 3356, 2494, 803, 0, 2437, 2029, 0, 2231, 310, 3300, 1118, 605, 3315, 1965, 1893, 3318, 10075, 10353, 8844, 8769, 14703, 13884, 14261, 20656, 22522, 19791, 23199, 27308, 28048, 32789, 34067, 32905, 39885, 39918, 39208, 41234, 43549, 45955, 48851, 49532, 51880, 50526, 53357, 55052, 60136, 60914, 59902, 62824, 59549, 65028, 64269, 62366, 65535, 62819, 63125, 62862, 64801, 65476, 64349, 65265, 65535, 60266, 62438, 59184, 60272, 62302, 56104, 56988, 52357, 50429, 55058, 48383, 48540, 43871, 42705, 42954, 39512, 36090, 33797, 32217, 34244, 30114, 25632, 29827, 24300, 22439, 23057, 19774, 19463, 14866, 13990, 9993, 7304, 6838, 9610, 6151, 8301, 3147, 2814, 720, 1466, 0, 2424, 0, 0, 2803, 759, 2146, 1934, 3770, 2568, 0, 579, 2692, 6409, 6507, 7025, 11460, 10737, 14362, 12128, 13409, 20096, 19492, 18308, 23407, 22662, 29093, 26621, 32417, 29810, 36617, 35221, 42115, 39297, 40623, 42308, 46201, 51005, 50526, 51059, 51032, 52049, 53589, 59006, 59978, 60822, 61746, 61090, 63488, 65481, 65535, 64211, 63370, 64481, 65535, 65535, 63187, 65535, 65301, 61642, 65535, 65015, 59842, 57830, 57875, 55072, 56506, 55877, 54786, 50375, 50053, 51712, 44277, 44811, 41709, 40441, 40000, 34324, 37149, 33696, 31857, 25582, 25548, 26031, 19727, 18537, 18378, 14570, 17977, 10559, 10538, 8744, 6156, 10568, 7205, 8142, 3456, 3096, 0, 114, 1937, 0, 0, 0, 1160, 0, 0, 0, 2553, 3063, 0, 5069, 6970, 7024, 4332, 6094, 8424, 9562, 13835, 10431, 12857, 15604, 18408, 23142, 22256, 22072, 27428, 29140, 32971, 29867, 35032, 34299, 37858, 39022, 40317, 44847, 43991, 49569, 49478, 50159, 53293, 53313, 55654, 54883, 60600, 58478, 64218, 60946, 62335, 64703, 65220, 64601, 65535, 62440, 62343, 65210, 65504, 64401, 62351, 61040, 60458, 60250, 62221, 63162, 59046, 59127, 55634, 52720, 51652, 53923, 47197, 45277, 47973, 43137, 45703, 40362, 40913, 37456, 36902, 33900, 29206, 26265, 27369, 24759, 21738, 21811, 20892, 16934, 14147, 13913, 12349, 12393, 9106, 8852, 7627, 6383, 6651, 1435, 3030, 0, 4150, 0, 0, 1066, 936, 2575, 0, 2239, 0, 0, 996, 1966, 3334, 5827, 3980, 9033, 9095, 8489, 14285, 16244, 13164, 16876, 19052, 20399, 23071, 26575, 24649, 28739, 33799, 34298, 35538, 37149, 41893, 43363, 44365, 43809, 44833, 45598, 51437, 55131, 53724, 58298, 56314, 56091, 59672, 57707, 60253, 61309, 62323, 61188, 63241, 65535, 62914, 65535, 65535, 65535, 65535, 63226, 61708, 62532, 63457, 59769, 63755, 62990, 61812, 57484, 57444, 52022, 55466, 53450, 51365, 49993, 44417, 45563, 45713, 40821, 39182, 39186, 32682, 31685, 29244, 30102, 25719, 26277, 20626, 19131, 20559, 17706, 14894, 11351, 12069, 9734, 10954, 7193, 4023, 2351, 6678, 4431, 0, 4488, 1584, 2849, 3093, 2766, 576, 0, 0, 3332, 2359, 1429, 0, 5825, 6575, 6084, 3642, 7463, 10026, 10384, 12917, 15615, 17347, 18254, 19111, 19199, 21059, 26088, 27158, 26441, 30785, 33715, 37066, 36876, 40872, 39855, 43001, 42837, 45327, 49353, 49672, 49447, 54790, 54716, 57607, 55698, 59439, 57994, 58978, 65517, 60246, 65011, 65216, 65535, 65535, 64283, 65535, 65535, 65535, 65535, 64568, 61687, 64277, 62904, 62847, 62815, 59628, 58667, 58229, 52104, 52942, 49576, 50725, 50141, 47577, 44540, 42664, 40053, 37427, 36335, 33778, 33523, 33388, 27379, 27324, 21980, 22225, 21868, 16699, 17582, 12577, 13232, 13001, 12723, 6335, 7487, 3253, 2631, 5536, 2126, 2524, 1442, 2789, 2652, 0, 324, 2595, 0, 3457, 2101, 317, 1363, 0, 5473, 1347, 2988, 4082, 5471, 8006, 13167, 14714, 13500, 15861, 14394, 21824, 23850, 25126, 21428, 27248, 30975, 32863, 33693, 34193, 37113, 36728, 38427, 40324, 45422, 45778, 50956, 50594, 52601, 55117, 53173, 57811, 58219, 59981, 60186, 63268, 61730, 65535, 61196, 65413, 65418, 65535, 65535, 63213, 65153, 64903, 65535, 65535, 65535, 64123, 60069, 63052, 59601, 59722, 59452, 56200, 57237, 54957, 54151, 51788, 45927, 43718, 46096, 41242, 40366, 38289, 37404, 33329, 32005, 29510, 26177, 27390, 26206, 21392, 20148, 18087, 18097, 13602, 12523, 13275, 13157, 6863, 7521, 3272, 7607, 1439, 4229, 1479, 703, 3929, 1458, 0, 1966, 2379, 260, 1552, 1638, 2523, 0, 2259, 5867, 1114, 6125, 9322, 7899, 8807, 9637, 10540, 13116, 15695, 15086, 16481, 23962, 21423, 22453, 27464, 29936, 30040, 30565, 33709, 37731, 41297, 39077, 40410, 44961, 48430, 47231, 49832, 54292, 52923, 55897, 53912, 57437, 62504, 62956, 59100, 64106, 60064, 63056, 61985, 64847, 62184, 65535, 65535, 65025, 62509, 64028, 63190, 63533, 64038, 64312, 58987, 57442, 57297, 61047, 55438, 54316, 51617, 54712, 49090, 48034, 47546, 42922, 45717, 40337, 41078, 34762, 36335, 31700, 27700, 26979, 26474, 25603, 20397, 17805, 19102, 18716, 15514, 15017, 12366, 13259, 9942, 9563, 8057, 7723, 3903, 3981, 3091, 3400, 0, 464, 0, 2957, 3009, 0, 0, 2656, 3748, 0, 2121, 5597, 2248, 3338, 8676, 10579, 9434, 9849, 13590, 10903, 15145, 16954, 18256, 19055, 25137, 26764, 29726, 30597, 33257, 31330, 35131, 38257, 39649, 39154, 39650, 42026, 43966, 50610, 51349, 50701, 55971, 52693, 56754, 54937, 59832, 63483, 60182, 64729, 65058, 65003, 62986, 65535, 65535, 65535, 65535, 64482, 65535, 61952, 65535, 65535, 62150, 61705, 62529, 62413, 59615, 55994, 56532, 52906, 54773, 54245, 52362, 49442, 48230, 47236, 44366, 39383, 36538, 36672, 33230, 35227, 29625, 29201, 28075, 27143, 24877, 19098, 16057, 19609, 16983, 13693, 9742, 7362, 9176, 8875, 5634, 2339, 1691, 1221, 4103, 0, 2811, 3128, 0, 2542, 0, 0, 0, 0, 3769, 3156, 4272, 4828, 3173, 2302, 9197, 8881, 6339, 7279, 13030, 12862, 14587, 20114, 18808, 20638, 24460, 21863, 29756, 30665, 27461, 31698, 37197, 34777, 41889, 39679, 43285, 41809, 45630, 49581, 50925, 54020, 54032, 54373, 55110, 56891, 57013, 59576, 64072, 63381, 63441, 61342, 64639, 63866, 65535, 64411, 65535, 65535, 62793, 65535, 63527, 64334, 62178, 60729, 60843, 59525, 57779, 55517, 54318, 55277, 55450, 51182, 49964, 50473, 47221, 45601, 45090, 41550, 36909, 38381, 36078, 33971, 30991, 25467, 29648, 22681, 21470, 22743, 18203, 14014, 12796, 12095, 11850, 11564, 8833, 10152, 3248, 2302, 1449, 1113, 2787, 103, 0, 3551, 2140, 1483, 0, 2593, 1539, 1739, 3765, 4082, 808, 3999, 6852, 3920, 6254, 7447, 10954, 11724, 14396, 13817, 17966, 16067, 20943, 19119, 21113, 22760, 24285, 31153, 29219, 35831, 32222, 37445, 36575, 43936, 39810, 42813, 47490, 49136, 47577, 54718, 54745, 52513, 54568, 56105, 58882, 61715, 59353, 60107, 65375, 65461, 64645, 65535, 65535, 63028, 64026, 64769, 64605, 63135, 62092, 60718, 61118, 62598, 59477, 57583, 60873, 58871, 55248, 54504, 53355, 52284, 52438, 50330, 44328, 43782, 45067, 39761, 42183, 35174, 37144, 32547, 32985, 27013, 28561, 25647, 21340, 18347, 19266, 20075, 15936, 16048, 10477, 11522, 9016, 6086, 3312, 5206, 7323, 433, 1105, 0, 0, 2638, 0, 0, 0, 929, 0, 0, 2461, 315, 1611, 5353, 6432, 5584, 6336, 6155, 11648, 13317, 9984, 16009, 16725, 18594, 20053, 17950, 23666, 26983, 25838, 25655, 30861, 30793, 32903, 39721, 37459, 42520, 41173, 44254, 46739, 45621, 48632, 50609, 50619, 56820, 56086, 60549, 59735, 60287, 58247, 64946, 60162, 65535, 62154, 65535, 65535, 65535, 65535, 65535, 62445, 65535, 65532, 61709, 64566, 62388, 60014, 63657, 56747, 58406, 53426, 54324, 52796, 54080, 51588, 51562, 47683, 46010, 43001, 41581, 42078, 34661, 32068, 33763, 29591, 26142, 24864, 22799, 23580, 19207, 17652, 16392, 14781, 16303, 11984, 13033, 11414, 7082, 7232, 6520, 6191, 1883, 2816, 0, 2912, 2124, 1164, 0, 378, 0, 691, 0, 850, 392, 4100, 2645, 1440, 7867, 6637, 10051, 9228, 8083, 14753, 13312, 17749, 14494, 17898, 18164, 20435, 26623, 25687, 28867, 27574, 32035, 37963, 35683, 37130, 41621, 43932, 44873, 46528, 50844, 51349, 48781, 54142, 52536, 55211, 56465, 60787, 63131, 60253, 61874, 61473, 60852, 62864, 63695, 63362, 65535, 63313, 65535, 64853, 63691, 63097, 64148, 63978, 64813, 59514, 58497, 57774, 55374, 56311, 54615, 56393, 53943, 50509, 50152, 45219, 46716, 45828, 41579, 38207, 38913, 32231, 31133, 29817, 27675, 25463, 25908, 21154, 19402, 22091, 14118, 13081, 13344, 11111, 12988, 9434, 9298, 3994, 7742, 3062, 3430, 2090, 1832, 1585, 3594, 0, 3102, 0, 1246, 0, 0, 0, 596, 3934, 3410, 6898, 3496, 3197, 9936, 11553, 12545, 11123, 12622, 13100, 15082, 18326, 17848, 20034, 21458, 26358, 31496, 27916, 32138, 34366, 35497, 41173, 43655, 44785, 47776, 48278, 48589, 52608, 53295, 52711, 57727, 56661, 59257, 57843, 61290, 59290, 61980, 60829, 63209, 65535, 64823, 64905, 64063, 65508, 63810, 63285, 64899, 61762, 61484, 60739, 64510, 58907, 62951, 60284, 60336, 55624, 52352, 53360, 50362, 53132, 48421, 47950, 46380, 45016, 43373, 35938, 39643, 35368, 31676, 30617, 30804, 26188, 24826, 22675, 22185, 20126, 13941, 12800, 10265, 14883, 11882, 11357, 10730, 4885, 6832, 6582, 5811, 5014, 106, 745, 2553, 0, 0, 2911, 2955, 2725, 1334, 0, 1791, 0, 2971, 6783, 6809, 9182, 4750, 10583, 9214, 14290, 16311, 13004, 18833, 18718, 20658, 22283, 26526, 26843, 27140, 30285, 33722, 33665, 38920, 36575, 41096, 41337, 46606, 47210, 50597, 48474, 51703, 54976, 52543, 56393, 56133, 56825, 58078, 61711, 62873, 62010, 62391, 65535, 63188, 65535, 65535, 65535, 65535, 63607, 65535, 62932, 65235, 62499, 60894, 63498, 57656, 56575, 59946, 55722, 51933, 55501, 53048, 47338, 46939, 46944, 46206, 42246, 42852, 39476, 34411, 34018, 35860, 28727, 25750, 26360, 25083, 19943, 21056, 21696, 15656, 13458, 13896, 13835, 10526, 7300, 5208, 8055, 5009, 5739, 1496, 1236, 93, 0, 0, 0, 995, 2076, 0, 2579, 0, 2098, 641, 3479, 1872, 6028, 6697, 8596, 5745, 8057, 11234, 12494, 14624, 12318, 19144, 21836, 17449, 24032, 22003, 26741, 31711, 28736, 32680, 34938, 34012, 38103, 37959, 45934, 47590, 44029, 51766, 52113, 53599, 56801, 58410, 53555, 56720, 61158, 57681, 59604, 62703, 61698, 64005, 65535, 64348, 65535, 65535, 65291, 63130, 64745, 63959, 63415, 63992, 62282, 64796, 64642, 59022, 60131, 57389, 58394, 53860, 53330, 49417, 48246, 46713, 48187, 44981, 42703, 38904, 41012, 36588, 37098, 31244, 29616, 31559, 29671, 24896, 24955, 18184, 20700, 14730, 12603, 13790, 10496, 10164, 9832, 7345, 4386, 7544, 7234, 2776, 0, 314, 2992, 0, 3087, 0, 2426, 0, 0, 1336, 2078, 0, 1742, 3996, 4803, 2205, 8257, 9527, 9987, 11498, 9351, 15868, 13613, 18785, 15859, 21578, 23796, 23014, 28974, 30787, 29265, 35086, 37994, 39556, 37409, 38349, 42214, 41777, 47555, 46063, 47557, 53175, 52055, 53471, 54136, 56473, 58128, 63361, 63266, 64093, 63570, 64426, 62765, 62870, 65535, 65430, 63390, 65535, 65535, 63526, 63792, 62432, 64841, 64990, 61448, 63579, 57807, 58430, 56454, 54988, 55711, 50844, 49994, 51196, 46283, 43816, 43833, 39945, 37174, 34942, 36304, 32950, 31169, 31885, 28881, 27330, 23341, 21918, 19498, 13903, 13461, 16336, 12759, 8237, 10487, 5348, 4101, 2912, 7017, 1663, 2675, 1246, 0, 1296, 1330, 708, 0, 0, 865, 402, 2387, 2229, 4369, 5173, 3448, 2189, 5419, 5685, 8423, 11237, 10828, 11505, 17212, 15598, 18359, 18311, 25669, 24131, 23383, 30720, 30102, 33800, 33625, 39487, 39523, 40033, 39953, 45327, 49165, 49114, 50301, 51181, 50891, 58220, 55038, 55626, 56007, 60369, 59487, 61044, 65535, 65535, 65535, 64272, 65535, 62326, 62586, 65535, 65535, 64307, 65535, 65320, 65535, 59427, 63506, 62457, 57729, 56487, 57664, 56507, 52800, 54494, 48818, 47444, 45684, 45868, 40337, 41878, 39439, 38253, 32526, 32797, 28917, 31724, 26545, 25813, 24144, 23004, 19106, 17846, 16015, 10463, 12258, 8348, 11734, 4732, 7312, 2859, 6861, 2116, 5315, 279, 3454, 1096, 3366, 2382, 2821, 0, 2597, 290, 3584, 1972, 225, 811, 2297, 3685, 8805, 9463, 9360, 7819, 14916, 14420, 15493, 18824, 20752, 20367, 21154, 21942, 27228, 27658, 30051, 35509, 33364, 34273, 36979, 40665, 43494, 42330, 47039, 50505, 53190, 50951, 51366, 56363, 55937, 59525, 60861, 57476, 60266, 63728, 65535, 64530, 61781, 63203, 65126, 65535, 62810, 65427, 62727, 62859, 63269, 65535, 61378, 59726, 63528, 57836, 57067, 60328, 57532, 56740, 52141, 54783, 48564, 49578, 44441, 45698, 40417, 39891, 40604, 35752, 31589, 32876, 31010, 31833, 27394, 24355, 24055, 21131, 15625, 15937, 12813, 13574, 12390, 8133, 8625, 9373, 6722, 7749, 4009, 302, 4785, 4768, 0, 0, 800, 3016, 1735, 997, 0, 0, 2475, 0, 0, 934, 1201, 3633, 3391, 10417, 11587, 8198, 12148, 15051, 12125, 19764, 15631, 21534, 24630, 25509, 24752, 30368, 31151, 30887, 36456, 36755, 40249, 37992, 45549, 46905, 45227, 46554, 51368, 48945, 52149, 57909, 56196, 57039, 56110, 61346, 59914, 60555, 62211, 63012, 65535, 64941, 65535, 64204, 65535, 63342, 63733, 64412, 63453, 62309, 65417, 63146, 64550, 60635, 56078, 55654, 54940, 56444, 51979, 54806, 51013, 49433, 46308, 41768, 45749, 41277, 36479, 38812, 32464, 33042, 30764, 31228, 28284, 27194, 25330, 20124, 19793, 19703, 17882, 11232, 14276, 12157, 11873, 5233, 3465, 5802, 5976, 5871, 4975, 4057, 2803, 0, 0, 0, 2974, 0, 2187, 0, 1297, 0, 4787, 768, 2093, 8356, 7185, 7942, 6453, 8178, 13832, 14548, 15346, 13803, 15876, 23429, 20320, 23673, 28587, 31494, 30805, 29552, 35039, 38016, 41314, 38170, 39668, 46277, 49224, 51653, 49886, 50773, 52827, 52253, 56370, 55176, 61108, 59448, 62381, 63842, 63444, 64385, 62247, 64031, 65535, 65535, 62855, 65208, 65302, 65535, 65535, 63280, 65384, 59294, 61930, 62336, 62248, 58115, 57984, 52427, 50830, 49723, 47540, 48695, 48513, 43080, 44525, 43628, 36874, 37717, 32416, 30393, 29063, 28762, 29302, 21586, 22692, 17636, 21191, 18214, 18186, 16415, 14999, 10486, 6135, 4489, 3639, 3496, 5720, 1158, 1861, 4511, 0, 0, 0, 2374, 3081, 2206, 2333, 0, 1506, 331, 1620, 2360, 3114, 4820, 3446, 5292, 7089, 9177, 8801, 11637, 18269, 20030, 20302, 22468, 23444, 23272, 24691, 31033, 28064, 31682, 32514, 38637, 38418, 38764, 44168, 47586, 45928, 46293, 49345, 54555, 53216, 56834, 58826, 55680, 57812, 60661, 63332, 62396, 60189, 63502, 63349, 65535, 65535, 65535, 65535, 63797, 65535, 65535, 62966, 63486, 60283, 63254, 59994, 57590, 60972, 58792, 59373, 53235, 56483, 52822, 48416, 46907, 44958, 45418, 42999, 41932, 40632, 38716, 35128, 34108, 29280, 28809, 29143, 23032, 19734, 17848, 19121, 16928, 15753, 10794, 12454, 10112, 5956, 6789, 9031, 7425, 1517, 3926, 3867, 3435, 3049, 0, 0, 189, 0, 0, 0, 3621, 0, 2821, 2076, 2610, 5543, 3534, 6470, 8947, 7413, 8663, 10808, 13042, 13477, 16014, 20712, 18592, 20621, 24550, 27250, 25528, 30924, 31640, 37271, 37034, 36265, 42211, 41206, 47953, 49296, 50075, 49258, 55239, 56421, 58386, 55998, 58223, 61320, 62746, 61178, 59777, 61415, 65535, 62237, 64631, 65535, 65535, 64298, 64740, 62878, 63580, 64887, 65211, 61471, 60603, 58748, 62996, 61270, 60156, 57008, 54314, 52346, 50415, 53488, 50329, 47245, 43661, 39778, 41668, 35669, 34041, 32213, 30883, 32135, 28412, 27627, 22381, 22680, 23484, 15653, 19024, 17276, 14581, 9634, 8380, 6971, 6269, 6859, 4286, 1907, 2616, 4454, 4126, 2348, 0, 1078, 2119, 0, 2867, 2540, 2985, 2455, 2992, 0, 6043, 1205, 6118, 4539, 4619, 11208, 9403, 10668, 12609, 16701, 18079, 15967, 23918, 21829, 25319, 27094, 25985, 29837, 32266, 33012, 37705, 38074, 42009, 45856, 45670, 46409, 45752, 48423, 55109, 53656, 52776, 54259, 59575, 58934, 63256, 59568, 61784, 62087, 63572, 65535, 63914, 65535, 62616, 62953, 63385, 65370, 65535, 62450, 65535, 63306, 64060, 61862, 61446, 62434, 55379, 57328, 52375, 54097, 50935, 51612, 51722, 49901, 42015, 42223, 41590, 39858, 34731, 37006, 35187, 30741, 31072, 26517, 26006, 21831, 17822, 21127, 17086, 17465, 13249, 14884, 12709, 7751, 10050, 5301, 6907, 6334, 5870, 1638, 0, 1922, 1473, 959, 100, 2540, 0, 0, 0, 4250, 0, 1129, 6004, 5794, 6713, 9052, 6971, 6402, 11215, 10176, 16508, 16511, 16024, 19344, 21522, 23087, 24266, 29142, 25569, 30103, 31193, 37393, 36443, 39262, 40428, 42362, 46258, 47284, 48480, 51004, 51220, 53944, 56522, 54785, 57511, 56515, 57285, 64218, 64451, 65535, 65535, 65535, 65535, 63592, 65535, 62481, 63951, 64031, 65535, 62783, 61729, 60931, 64335, 63752, 62588, 60995, 58564, 54822, 56425, 52405, 53039, 50483, 45819, 44141, 46802, 40595, 38900, 41359, 33808, 36837, 35895, 33022, 29035, 29645, 21660, 21668, 17541, 15819, 17235, 13422, 15429, 11908, 10948, 11532, 4932, 6484, 4875, 5978, 3270, 2103, 0, 315, 0, 2903, 0, 0, 1615, 0, 1011, 3007, 1306, 1589, 2607, 3576, 2921, 5381, 8719, 6122, 8215, 10575, 16741, 13382, 19008, 15932, 17746, 22745, 22795, 27819, 25840, 30534, 32433, 37215, 38643, 41235, 40898, 45695, 45700, 49385, 45352, 53151, 52864, 56334, 55222, 59271, 57654, 61150, 60969, 58894, 61873, 60195, 65535, 64674, 62782, 65535, 63040, 63249, 62589, 65535, 62839, 64298, 65535, 63802, 62538, 59615, 59301, 56961, 57007, 58781, 56892, 56474, 50932, 52000, 45443, 44909, 43531, 39700, 37867, 37604, 37494, 31598, 33753, 32493, 29806, 28862, 21921, 24606, 18709, 21606, 17454, 15172, 11406, 11028, 8164, 6063, 8221, 9390, 4577, 5507, 2331, 2187, 4065, 0, 146, 0, 960, 1675, 1936, 0, 1128, 0, 0, 4135, 0, 7329, 6375, 5105, 4999, 11738, 9911, 10357, 11331, 13170, 14005, 20787, 20296, 25607, 26502, 27064, 25699, 30937
};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4a06      	ldr	r2, [pc, #24]	@ (8008dd8 <_Z16get_feature_datajjPf+0x2c>)
 8008dbe:	1899      	adds	r1, r3, r2
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f015 fded 	bl	801e9a6 <memcpy>
    return 0;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20000180 	.word	0x20000180

08008ddc <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b0b4      	sub	sp, #208	@ 0xd0
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8008de6:	f107 0308 	add.w	r3, r7, #8
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f015 fcd4 	bl	801e79c <vsiprintf>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bfcc      	ite	gt
 8008dfa:	2301      	movgt	r3, #1
 8008dfc:	2300      	movle	r3, #0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00c      	beq.n	8008e1e <_Z6vprintPKcSt9__va_list+0x42>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 180); // send message via UART
 8008e04:	f107 0308 	add.w	r3, r7, #8
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7f7 fa61 	bl	80002d0 <strlen>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	f107 0108 	add.w	r1, r7, #8
 8008e16:	23b4      	movs	r3, #180	@ 0xb4
 8008e18:	4803      	ldr	r0, [pc, #12]	@ (8008e28 <_Z6vprintPKcSt9__va_list+0x4c>)
 8008e1a:	f009 f8e3 	bl	8011fe4 <HAL_UART_Transmit>
    }
}
 8008e1e:	bf00      	nop
 8008e20:	37d0      	adds	r7, #208	@ 0xd0
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	200053c4 	.word	0x200053c4

08008e2c <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8008e2c:	b40f      	push	{r0, r1, r2, r3}
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b082      	sub	sp, #8
 8008e32:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8008e34:	f107 0314 	add.w	r3, r7, #20
 8008e38:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	6938      	ldr	r0, [r7, #16]
 8008e3e:	f7ff ffcd 	bl	8008ddc <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e4c:	b004      	add	sp, #16
 8008e4e:	4770      	bx	lr

08008e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b0ca      	sub	sp, #296	@ 0x128
 8008e54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e56:	f007 fc12 	bl	801067e <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8008e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fa67 	bl	8007332 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 8008e64:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008e68:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  signal.get_data = &get_feature_data;
 8008e6c:	4b23      	ldr	r3, [pc, #140]	@ (8008efc <main+0xac>)
 8008e6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8008e72:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8008e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f002 f8ab 	bl	800afd8 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e82:	f000 f83f 	bl	8008f04 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e86:	f000 f8e3 	bl	8009050 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8008e8a:	f000 f8ad 	bl	8008fe8 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  float t = 0.0;
 8008e94:	f04f 0300 	mov.w	r3, #0
 8008e98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ei_impulse_result_t result = { 0 };
 8008e9c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008ea0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8008eaa:	461a      	mov	r2, r3
 8008eac:	2100      	movs	r1, #0
 8008eae:	f015 fc99 	bl	801e7e4 <memset>
	  run_classifier(&signal, &result, false);
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff ff62 	bl	8008d84 <run_classifier>

	  if (result.classification[0].value < result.classification[1].value) {
 8008ec0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008ec4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008ec8:	ed93 7a03 	vldr	s14, [r3, #12]
 8008ecc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008ed0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008ed4:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ed8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee0:	d505      	bpl.n	8008eee <main+0x9e>
		 //ei_printf("triangulo\r\n");
		 func(false,100);
 8008ee2:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8008f00 <main+0xb0>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f000 fd2a 	bl	8009940 <_Z4funcbf>
 8008eec:	e7d6      	b.n	8008e9c <main+0x4c>
	  }else{
		//ei_printf("seno\r\n");
		func(true,100);
 8008eee:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8008f00 <main+0xb0>
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	f000 fd24 	bl	8009940 <_Z4funcbf>
	if(i>=999){ //se setea a 0
		t = 0.0;
		i = 0;
	}
	*/
  }
 8008ef8:	e7d0      	b.n	8008e9c <main+0x4c>
 8008efa:	bf00      	nop
 8008efc:	08008dad 	.word	0x08008dad
 8008f00:	42c80000 	.word	0x42c80000

08008f04 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b094      	sub	sp, #80	@ 0x50
 8008f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f0a:	f107 0320 	add.w	r3, r7, #32
 8008f0e:	2230      	movs	r2, #48	@ 0x30
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f015 fc66 	bl	801e7e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f18:	f107 030c 	add.w	r3, r7, #12
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	605a      	str	r2, [r3, #4]
 8008f22:	609a      	str	r2, [r3, #8]
 8008f24:	60da      	str	r2, [r3, #12]
 8008f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f28:	4b2d      	ldr	r3, [pc, #180]	@ (8008fe0 <_Z18SystemClock_Configv+0xdc>)
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8008fe0 <_Z18SystemClock_Configv+0xdc>)
 8008f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f32:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f34:	4b2a      	ldr	r3, [pc, #168]	@ (8008fe0 <_Z18SystemClock_Configv+0xdc>)
 8008f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f3c:	60bb      	str	r3, [r7, #8]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f40:	4b28      	ldr	r3, [pc, #160]	@ (8008fe4 <_Z18SystemClock_Configv+0xe0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008f48:	4a26      	ldr	r2, [pc, #152]	@ (8008fe4 <_Z18SystemClock_Configv+0xe0>)
 8008f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	4b24      	ldr	r3, [pc, #144]	@ (8008fe4 <_Z18SystemClock_Configv+0xe0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008f58:	607b      	str	r3, [r7, #4]
 8008f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008f60:	2301      	movs	r3, #1
 8008f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008f64:	2310      	movs	r3, #16
 8008f66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8008f70:	230a      	movs	r3, #10
 8008f72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8008f74:	23d2      	movs	r3, #210	@ 0xd2
 8008f76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008f78:	2302      	movs	r3, #2
 8008f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f80:	f107 0320 	add.w	r3, r7, #32
 8008f84:	4618      	mov	r0, r3
 8008f86:	f007 ff65 	bl	8010e54 <HAL_RCC_OscConfig>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bf14      	ite	ne
 8008f90:	2301      	movne	r3, #1
 8008f92:	2300      	moveq	r3, #0
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8008f9a:	f000 fdf7 	bl	8009b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f9e:	230f      	movs	r3, #15
 8008fa0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008faa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008fae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008fb6:	f107 030c 	add.w	r3, r7, #12
 8008fba:	2105      	movs	r1, #5
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f008 f9ed 	bl	801139c <HAL_RCC_ClockConfig>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bf14      	ite	ne
 8008fc8:	2301      	movne	r3, #1
 8008fca:	2300      	moveq	r3, #0
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8008fd2:	f000 fddb 	bl	8009b8c <Error_Handler>
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	3750      	adds	r7, #80	@ 0x50
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	40023800 	.word	0x40023800
 8008fe4:	40007000 	.word	0x40007000

08008fe8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008fec:	4b16      	ldr	r3, [pc, #88]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008fee:	4a17      	ldr	r2, [pc, #92]	@ (800904c <_ZL19MX_USART1_UART_Initv+0x64>)
 8008ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008ff2:	4b15      	ldr	r3, [pc, #84]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008ffa:	4b13      	ldr	r3, [pc, #76]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009000:	4b11      	ldr	r3, [pc, #68]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009002:	2200      	movs	r2, #0
 8009004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009006:	4b10      	ldr	r3, [pc, #64]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009008:	2200      	movs	r2, #0
 800900a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800900c:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 800900e:	220c      	movs	r2, #12
 8009010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009012:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009014:	2200      	movs	r2, #0
 8009016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009018:	4b0b      	ldr	r3, [pc, #44]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 800901a:	2200      	movs	r2, #0
 800901c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800901e:	4b0a      	ldr	r3, [pc, #40]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009020:	2200      	movs	r2, #0
 8009022:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009024:	4b08      	ldr	r3, [pc, #32]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009026:	2200      	movs	r2, #0
 8009028:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800902a:	4807      	ldr	r0, [pc, #28]	@ (8009048 <_ZL19MX_USART1_UART_Initv+0x60>)
 800902c:	f008 ff8c 	bl	8011f48 <HAL_UART_Init>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	bf14      	ite	ne
 8009036:	2301      	movne	r3, #1
 8009038:	2300      	moveq	r3, #0
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8009040:	f000 fda4 	bl	8009b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009044:	bf00      	nop
 8009046:	bd80      	pop	{r7, pc}
 8009048:	200053c4 	.word	0x200053c4
 800904c:	40011000 	.word	0x40011000

08009050 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b090      	sub	sp, #64	@ 0x40
 8009054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009056:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	605a      	str	r2, [r3, #4]
 8009060:	609a      	str	r2, [r3, #8]
 8009062:	60da      	str	r2, [r3, #12]
 8009064:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009066:	4bad      	ldr	r3, [pc, #692]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	4aac      	ldr	r2, [pc, #688]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 800906c:	f043 0310 	orr.w	r3, r3, #16
 8009070:	6313      	str	r3, [r2, #48]	@ 0x30
 8009072:	4baa      	ldr	r3, [pc, #680]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009076:	f003 0310 	and.w	r3, r3, #16
 800907a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800907c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800907e:	4ba7      	ldr	r3, [pc, #668]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009082:	4aa6      	ldr	r2, [pc, #664]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009088:	6313      	str	r3, [r2, #48]	@ 0x30
 800908a:	4ba4      	ldr	r3, [pc, #656]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 800908c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800908e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009092:	627b      	str	r3, [r7, #36]	@ 0x24
 8009094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009096:	4ba1      	ldr	r3, [pc, #644]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909a:	4aa0      	ldr	r2, [pc, #640]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 800909c:	f043 0302 	orr.w	r3, r3, #2
 80090a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80090a2:	4b9e      	ldr	r3, [pc, #632]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	623b      	str	r3, [r7, #32]
 80090ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80090ae:	4b9b      	ldr	r3, [pc, #620]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b2:	4a9a      	ldr	r2, [pc, #616]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090b4:	f043 0308 	orr.w	r3, r3, #8
 80090b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80090ba:	4b98      	ldr	r3, [pc, #608]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090be:	f003 0308 	and.w	r3, r3, #8
 80090c2:	61fb      	str	r3, [r7, #28]
 80090c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80090c6:	4b95      	ldr	r3, [pc, #596]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ca:	4a94      	ldr	r2, [pc, #592]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090cc:	f043 0304 	orr.w	r3, r3, #4
 80090d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80090d2:	4b92      	ldr	r3, [pc, #584]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	61bb      	str	r3, [r7, #24]
 80090dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80090de:	4b8f      	ldr	r3, [pc, #572]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e2:	4a8e      	ldr	r2, [pc, #568]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090e4:	f043 0301 	orr.w	r3, r3, #1
 80090e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80090ea:	4b8c      	ldr	r3, [pc, #560]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80090f6:	4b89      	ldr	r3, [pc, #548]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fa:	4a88      	ldr	r2, [pc, #544]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 80090fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009100:	6313      	str	r3, [r2, #48]	@ 0x30
 8009102:	4b86      	ldr	r3, [pc, #536]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800910a:	613b      	str	r3, [r7, #16]
 800910c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800910e:	4b83      	ldr	r3, [pc, #524]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009112:	4a82      	ldr	r2, [pc, #520]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009118:	6313      	str	r3, [r2, #48]	@ 0x30
 800911a:	4b80      	ldr	r3, [pc, #512]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 800911c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8009126:	4b7d      	ldr	r3, [pc, #500]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912a:	4a7c      	ldr	r2, [pc, #496]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 800912c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009130:	6313      	str	r3, [r2, #48]	@ 0x30
 8009132:	4b7a      	ldr	r3, [pc, #488]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800913a:	60bb      	str	r3, [r7, #8]
 800913c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800913e:	4b77      	ldr	r3, [pc, #476]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009142:	4a76      	ldr	r2, [pc, #472]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009144:	f043 0320 	orr.w	r3, r3, #32
 8009148:	6313      	str	r3, [r2, #48]	@ 0x30
 800914a:	4b74      	ldr	r3, [pc, #464]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 800914c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914e:	f003 0320 	and.w	r3, r3, #32
 8009152:	607b      	str	r3, [r7, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009156:	4b71      	ldr	r3, [pc, #452]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915a:	4a70      	ldr	r2, [pc, #448]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 800915c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009160:	6313      	str	r3, [r2, #48]	@ 0x30
 8009162:	4b6e      	ldr	r3, [pc, #440]	@ (800931c <_ZL12MX_GPIO_Initv+0x2cc>)
 8009164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800916e:	2201      	movs	r2, #1
 8009170:	2120      	movs	r1, #32
 8009172:	486b      	ldr	r0, [pc, #428]	@ (8009320 <_ZL12MX_GPIO_Initv+0x2d0>)
 8009174:	f007 fe54 	bl	8010e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8009178:	2200      	movs	r2, #0
 800917a:	f241 010c 	movw	r1, #4108	@ 0x100c
 800917e:	4869      	ldr	r0, [pc, #420]	@ (8009324 <_ZL12MX_GPIO_Initv+0x2d4>)
 8009180:	f007 fe4e 	bl	8010e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8009184:	2200      	movs	r2, #0
 8009186:	2108      	movs	r1, #8
 8009188:	4867      	ldr	r0, [pc, #412]	@ (8009328 <_ZL12MX_GPIO_Initv+0x2d8>)
 800918a:	f007 fe49 	bl	8010e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800918e:	2200      	movs	r2, #0
 8009190:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009194:	4865      	ldr	r0, [pc, #404]	@ (800932c <_ZL12MX_GPIO_Initv+0x2dc>)
 8009196:	f007 fe43 	bl	8010e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800919a:	2200      	movs	r2, #0
 800919c:	21c8      	movs	r1, #200	@ 0xc8
 800919e:	4864      	ldr	r0, [pc, #400]	@ (8009330 <_ZL12MX_GPIO_Initv+0x2e0>)
 80091a0:	f007 fe3e 	bl	8010e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80091a4:	2310      	movs	r3, #16
 80091a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091a8:	2302      	movs	r3, #2
 80091aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ac:	2300      	movs	r3, #0
 80091ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091b0:	2300      	movs	r3, #0
 80091b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80091b4:	230e      	movs	r3, #14
 80091b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80091b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80091bc:	4619      	mov	r1, r3
 80091be:	485d      	ldr	r0, [pc, #372]	@ (8009334 <_ZL12MX_GPIO_Initv+0x2e4>)
 80091c0:	f007 fc82 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80091c4:	2308      	movs	r3, #8
 80091c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091c8:	2300      	movs	r3, #0
 80091ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091cc:	2300      	movs	r3, #0
 80091ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80091d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80091d4:	4619      	mov	r1, r3
 80091d6:	4857      	ldr	r0, [pc, #348]	@ (8009334 <_ZL12MX_GPIO_Initv+0x2e4>)
 80091d8:	f007 fc76 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80091dc:	2304      	movs	r3, #4
 80091de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091e0:	2302      	movs	r3, #2
 80091e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091e4:	2300      	movs	r3, #0
 80091e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091e8:	2303      	movs	r3, #3
 80091ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80091ec:	2309      	movs	r3, #9
 80091ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80091f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80091f4:	4619      	mov	r1, r3
 80091f6:	484f      	ldr	r0, [pc, #316]	@ (8009334 <_ZL12MX_GPIO_Initv+0x2e4>)
 80091f8:	f007 fc66 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80091fc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009202:	2302      	movs	r3, #2
 8009204:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009206:	2300      	movs	r3, #0
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800920a:	2303      	movs	r3, #3
 800920c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800920e:	230b      	movs	r3, #11
 8009210:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009212:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009216:	4619      	mov	r1, r3
 8009218:	4845      	ldr	r0, [pc, #276]	@ (8009330 <_ZL12MX_GPIO_Initv+0x2e0>)
 800921a:	f007 fc55 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800921e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8009222:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009224:	2302      	movs	r3, #2
 8009226:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009228:	2300      	movs	r3, #0
 800922a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800922c:	2303      	movs	r3, #3
 800922e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009230:	230c      	movs	r3, #12
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009234:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009238:	4619      	mov	r1, r3
 800923a:	483e      	ldr	r0, [pc, #248]	@ (8009334 <_ZL12MX_GPIO_Initv+0x2e4>)
 800923c:	f007 fc44 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8009240:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009246:	2312      	movs	r3, #18
 8009248:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800924a:	2300      	movs	r3, #0
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800924e:	2300      	movs	r3, #0
 8009250:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009252:	2304      	movs	r3, #4
 8009254:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009256:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800925a:	4619      	mov	r1, r3
 800925c:	4836      	ldr	r0, [pc, #216]	@ (8009338 <_ZL12MX_GPIO_Initv+0x2e8>)
 800925e:	f007 fc33 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8009262:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8009266:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009268:	2302      	movs	r3, #2
 800926a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800926c:	2300      	movs	r3, #0
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009270:	2303      	movs	r3, #3
 8009272:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009274:	230a      	movs	r3, #10
 8009276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009278:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800927c:	4619      	mov	r1, r3
 800927e:	482e      	ldr	r0, [pc, #184]	@ (8009338 <_ZL12MX_GPIO_Initv+0x2e8>)
 8009280:	f007 fc22 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8009284:	2310      	movs	r3, #16
 8009286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009288:	2302      	movs	r3, #2
 800928a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800928c:	2300      	movs	r3, #0
 800928e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009290:	2300      	movs	r3, #0
 8009292:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009294:	2302      	movs	r3, #2
 8009296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8009298:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800929c:	4619      	mov	r1, r3
 800929e:	4826      	ldr	r0, [pc, #152]	@ (8009338 <_ZL12MX_GPIO_Initv+0x2e8>)
 80092a0:	f007 fc12 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80092a4:	2380      	movs	r3, #128	@ 0x80
 80092a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092a8:	2302      	movs	r3, #2
 80092aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092b0:	2300      	movs	r3, #0
 80092b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80092b4:	2308      	movs	r3, #8
 80092b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80092b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80092bc:	4619      	mov	r1, r3
 80092be:	4818      	ldr	r0, [pc, #96]	@ (8009320 <_ZL12MX_GPIO_Initv+0x2d0>)
 80092c0:	f007 fc02 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80092c4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80092c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ca:	2302      	movs	r3, #2
 80092cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092d2:	2303      	movs	r3, #3
 80092d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80092d6:	230c      	movs	r3, #12
 80092d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80092de:	4619      	mov	r1, r3
 80092e0:	4816      	ldr	r0, [pc, #88]	@ (800933c <_ZL12MX_GPIO_Initv+0x2ec>)
 80092e2:	f007 fbf1 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80092e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ec:	2302      	movs	r3, #2
 80092ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092f0:	2300      	movs	r3, #0
 80092f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80092f8:	2301      	movs	r3, #1
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80092fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009300:	4619      	mov	r1, r3
 8009302:	480f      	ldr	r0, [pc, #60]	@ (8009340 <_ZL12MX_GPIO_Initv+0x2f0>)
 8009304:	f007 fbe0 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8009308:	2360      	movs	r3, #96	@ 0x60
 800930a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800930c:	2302      	movs	r3, #2
 800930e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009310:	2300      	movs	r3, #0
 8009312:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009314:	2300      	movs	r3, #0
 8009316:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009318:	230d      	movs	r3, #13
 800931a:	e013      	b.n	8009344 <_ZL12MX_GPIO_Initv+0x2f4>
 800931c:	40023800 	.word	0x40023800
 8009320:	40020c00 	.word	0x40020c00
 8009324:	40022000 	.word	0x40022000
 8009328:	40022800 	.word	0x40022800
 800932c:	40021c00 	.word	0x40021c00
 8009330:	40021800 	.word	0x40021800
 8009334:	40021000 	.word	0x40021000
 8009338:	40020400 	.word	0x40020400
 800933c:	40020800 	.word	0x40020800
 8009340:	40020000 	.word	0x40020000
 8009344:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009346:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800934a:	4619      	mov	r1, r3
 800934c:	48bc      	ldr	r0, [pc, #752]	@ (8009640 <_ZL12MX_GPIO_Initv+0x5f0>)
 800934e:	f007 fbbb 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8009352:	2340      	movs	r3, #64	@ 0x40
 8009354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009356:	2302      	movs	r3, #2
 8009358:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800935a:	2300      	movs	r3, #0
 800935c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800935e:	2303      	movs	r3, #3
 8009360:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8009362:	230a      	movs	r3, #10
 8009364:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8009366:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800936a:	4619      	mov	r1, r3
 800936c:	48b5      	ldr	r0, [pc, #724]	@ (8009644 <_ZL12MX_GPIO_Initv+0x5f4>)
 800936e:	f007 fbab 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8009372:	f248 1333 	movw	r3, #33075	@ 0x8133
 8009376:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009378:	2302      	movs	r3, #2
 800937a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800937c:	2300      	movs	r3, #0
 800937e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009380:	2303      	movs	r3, #3
 8009382:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009384:	230c      	movs	r3, #12
 8009386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009388:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800938c:	4619      	mov	r1, r3
 800938e:	48ae      	ldr	r0, [pc, #696]	@ (8009648 <_ZL12MX_GPIO_Initv+0x5f8>)
 8009390:	f007 fb9a 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8009394:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8009398:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800939a:	2302      	movs	r3, #2
 800939c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093a2:	2300      	movs	r3, #0
 80093a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80093a6:	230e      	movs	r3, #14
 80093a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80093aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80093ae:	4619      	mov	r1, r3
 80093b0:	48a6      	ldr	r0, [pc, #664]	@ (800964c <_ZL12MX_GPIO_Initv+0x5fc>)
 80093b2:	f007 fb89 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80093b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093bc:	2300      	movs	r3, #0
 80093be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c0:	2300      	movs	r3, #0
 80093c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80093c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80093c8:	4619      	mov	r1, r3
 80093ca:	48a0      	ldr	r0, [pc, #640]	@ (800964c <_ZL12MX_GPIO_Initv+0x5fc>)
 80093cc:	f007 fb7c 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80093d0:	2340      	movs	r3, #64	@ 0x40
 80093d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80093d4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80093d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80093de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80093e2:	4619      	mov	r1, r3
 80093e4:	489a      	ldr	r0, [pc, #616]	@ (8009650 <_ZL12MX_GPIO_Initv+0x600>)
 80093e6:	f007 fb6f 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80093ea:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80093ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093f0:	2302      	movs	r3, #2
 80093f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f4:	2300      	movs	r3, #0
 80093f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093f8:	2303      	movs	r3, #3
 80093fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80093fc:	230c      	movs	r3, #12
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009400:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009404:	4619      	mov	r1, r3
 8009406:	4892      	ldr	r0, [pc, #584]	@ (8009650 <_ZL12MX_GPIO_Initv+0x600>)
 8009408:	f007 fb5e 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800940c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009412:	2302      	movs	r3, #2
 8009414:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009416:	2300      	movs	r3, #0
 8009418:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800941a:	2303      	movs	r3, #3
 800941c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800941e:	230a      	movs	r3, #10
 8009420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009422:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009426:	4619      	mov	r1, r3
 8009428:	488a      	ldr	r0, [pc, #552]	@ (8009654 <_ZL12MX_GPIO_Initv+0x604>)
 800942a:	f007 fb4d 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800942e:	23f0      	movs	r3, #240	@ 0xf0
 8009430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009432:	2302      	movs	r3, #2
 8009434:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009436:	2300      	movs	r3, #0
 8009438:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800943a:	2300      	movs	r3, #0
 800943c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800943e:	230a      	movs	r3, #10
 8009440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009442:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009446:	4619      	mov	r1, r3
 8009448:	4883      	ldr	r0, [pc, #524]	@ (8009658 <_ZL12MX_GPIO_Initv+0x608>)
 800944a:	f007 fb3d 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800944e:	23f7      	movs	r3, #247	@ 0xf7
 8009450:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009452:	2302      	movs	r3, #2
 8009454:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009456:	2300      	movs	r3, #0
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800945a:	2300      	movs	r3, #0
 800945c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800945e:	230e      	movs	r3, #14
 8009460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8009462:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009466:	4619      	mov	r1, r3
 8009468:	487c      	ldr	r0, [pc, #496]	@ (800965c <_ZL12MX_GPIO_Initv+0x60c>)
 800946a:	f007 fb2d 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800946e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009474:	2302      	movs	r3, #2
 8009476:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009478:	2300      	movs	r3, #0
 800947a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800947c:	2300      	movs	r3, #0
 800947e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009480:	2309      	movs	r3, #9
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8009484:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009488:	4619      	mov	r1, r3
 800948a:	486f      	ldr	r0, [pc, #444]	@ (8009648 <_ZL12MX_GPIO_Initv+0x5f8>)
 800948c:	f007 fb1c 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8009490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009496:	2302      	movs	r3, #2
 8009498:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800949a:	2300      	movs	r3, #0
 800949c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800949e:	2300      	movs	r3, #0
 80094a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80094a2:	230a      	movs	r3, #10
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80094a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80094aa:	4619      	mov	r1, r3
 80094ac:	4866      	ldr	r0, [pc, #408]	@ (8009648 <_ZL12MX_GPIO_Initv+0x5f8>)
 80094ae:	f007 fb0b 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80094b2:	2320      	movs	r3, #32
 80094b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094b6:	2301      	movs	r3, #1
 80094b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094be:	2300      	movs	r3, #0
 80094c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80094c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80094c6:	4619      	mov	r1, r3
 80094c8:	4861      	ldr	r0, [pc, #388]	@ (8009650 <_ZL12MX_GPIO_Initv+0x600>)
 80094ca:	f007 fafd 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80094ce:	2308      	movs	r3, #8
 80094d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d2:	2302      	movs	r3, #2
 80094d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094da:	2300      	movs	r3, #0
 80094dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80094de:	230d      	movs	r3, #13
 80094e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80094e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80094e6:	4619      	mov	r1, r3
 80094e8:	4859      	ldr	r0, [pc, #356]	@ (8009650 <_ZL12MX_GPIO_Initv+0x600>)
 80094ea:	f007 faed 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80094ee:	f241 030c 	movw	r3, #4108	@ 0x100c
 80094f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094f4:	2301      	movs	r3, #1
 80094f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094fc:	2300      	movs	r3, #0
 80094fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009500:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009504:	4619      	mov	r1, r3
 8009506:	4854      	ldr	r0, [pc, #336]	@ (8009658 <_ZL12MX_GPIO_Initv+0x608>)
 8009508:	f007 fade 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800950c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009512:	2300      	movs	r3, #0
 8009514:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009516:	2300      	movs	r3, #0
 8009518:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800951a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800951e:	4619      	mov	r1, r3
 8009520:	484f      	ldr	r0, [pc, #316]	@ (8009660 <_ZL12MX_GPIO_Initv+0x610>)
 8009522:	f007 fad1 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8009526:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800952a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800952c:	2302      	movs	r3, #2
 800952e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009530:	2300      	movs	r3, #0
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009534:	2303      	movs	r3, #3
 8009536:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009538:	230c      	movs	r3, #12
 800953a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800953c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009540:	4619      	mov	r1, r3
 8009542:	4848      	ldr	r0, [pc, #288]	@ (8009664 <_ZL12MX_GPIO_Initv+0x614>)
 8009544:	f007 fac0 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8009548:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800954c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800954e:	2302      	movs	r3, #2
 8009550:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009552:	2300      	movs	r3, #0
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009556:	2300      	movs	r3, #0
 8009558:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800955a:	230e      	movs	r3, #14
 800955c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800955e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009562:	4619      	mov	r1, r3
 8009564:	483c      	ldr	r0, [pc, #240]	@ (8009658 <_ZL12MX_GPIO_Initv+0x608>)
 8009566:	f007 faaf 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800956a:	2308      	movs	r3, #8
 800956c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800956e:	2301      	movs	r3, #1
 8009570:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009572:	2300      	movs	r3, #0
 8009574:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009576:	2300      	movs	r3, #0
 8009578:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800957a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800957e:	4619      	mov	r1, r3
 8009580:	4836      	ldr	r0, [pc, #216]	@ (800965c <_ZL12MX_GPIO_Initv+0x60c>)
 8009582:	f007 faa1 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8009586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800958a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800958c:	2302      	movs	r3, #2
 800958e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009590:	2300      	movs	r3, #0
 8009592:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009594:	2300      	movs	r3, #0
 8009596:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009598:	230d      	movs	r3, #13
 800959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800959c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80095a0:	4619      	mov	r1, r3
 80095a2:	4829      	ldr	r0, [pc, #164]	@ (8009648 <_ZL12MX_GPIO_Initv+0x5f8>)
 80095a4:	f007 fa90 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80095a8:	2310      	movs	r3, #16
 80095aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095ac:	2300      	movs	r3, #0
 80095ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80095b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80095b8:	4619      	mov	r1, r3
 80095ba:	4825      	ldr	r0, [pc, #148]	@ (8009650 <_ZL12MX_GPIO_Initv+0x600>)
 80095bc:	f007 fa84 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80095c0:	2304      	movs	r3, #4
 80095c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095c4:	2302      	movs	r3, #2
 80095c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c8:	2300      	movs	r3, #0
 80095ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095cc:	2303      	movs	r3, #3
 80095ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80095d0:	230c      	movs	r3, #12
 80095d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80095d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80095d8:	4619      	mov	r1, r3
 80095da:	481d      	ldr	r0, [pc, #116]	@ (8009650 <_ZL12MX_GPIO_Initv+0x600>)
 80095dc:	f007 fa74 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80095e0:	f248 0304 	movw	r3, #32772	@ 0x8004
 80095e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095e6:	2300      	movs	r3, #0
 80095e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80095ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80095f2:	4619      	mov	r1, r3
 80095f4:	481c      	ldr	r0, [pc, #112]	@ (8009668 <_ZL12MX_GPIO_Initv+0x618>)
 80095f6:	f007 fa67 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80095fa:	2302      	movs	r3, #2
 80095fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095fe:	2302      	movs	r3, #2
 8009600:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009602:	2300      	movs	r3, #0
 8009604:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009606:	2300      	movs	r3, #0
 8009608:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800960a:	2305      	movs	r3, #5
 800960c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800960e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009612:	4619      	mov	r1, r3
 8009614:	4810      	ldr	r0, [pc, #64]	@ (8009658 <_ZL12MX_GPIO_Initv+0x608>)
 8009616:	f007 fa57 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800961a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800961e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009620:	2301      	movs	r3, #1
 8009622:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009624:	2300      	movs	r3, #0
 8009626:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009628:	2300      	movs	r3, #0
 800962a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800962c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009630:	4619      	mov	r1, r3
 8009632:	480d      	ldr	r0, [pc, #52]	@ (8009668 <_ZL12MX_GPIO_Initv+0x618>)
 8009634:	f007 fa48 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8009638:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800963c:	e016      	b.n	800966c <_ZL12MX_GPIO_Initv+0x61c>
 800963e:	bf00      	nop
 8009640:	40021000 	.word	0x40021000
 8009644:	40020400 	.word	0x40020400
 8009648:	40021800 	.word	0x40021800
 800964c:	40022400 	.word	0x40022400
 8009650:	40020c00 	.word	0x40020c00
 8009654:	40020000 	.word	0x40020000
 8009658:	40022000 	.word	0x40022000
 800965c:	40022800 	.word	0x40022800
 8009660:	40020800 	.word	0x40020800
 8009664:	40021400 	.word	0x40021400
 8009668:	40021c00 	.word	0x40021c00
 800966c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800966e:	2302      	movs	r3, #2
 8009670:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009672:	2300      	movs	r3, #0
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009676:	2300      	movs	r3, #0
 8009678:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800967a:	230d      	movs	r3, #13
 800967c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800967e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009682:	4619      	mov	r1, r3
 8009684:	48a5      	ldr	r0, [pc, #660]	@ (800991c <_ZL12MX_GPIO_Initv+0x8cc>)
 8009686:	f007 fa1f 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800968a:	2301      	movs	r3, #1
 800968c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800968e:	2302      	movs	r3, #2
 8009690:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009692:	2300      	movs	r3, #0
 8009694:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009696:	2300      	movs	r3, #0
 8009698:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800969a:	2302      	movs	r3, #2
 800969c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800969e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80096a2:	4619      	mov	r1, r3
 80096a4:	489e      	ldr	r0, [pc, #632]	@ (8009920 <_ZL12MX_GPIO_Initv+0x8d0>)
 80096a6:	f007 fa0f 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80096aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b0:	2302      	movs	r3, #2
 80096b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b4:	2300      	movs	r3, #0
 80096b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096b8:	2300      	movs	r3, #0
 80096ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80096bc:	2301      	movs	r3, #1
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80096c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80096c4:	4619      	mov	r1, r3
 80096c6:	4897      	ldr	r0, [pc, #604]	@ (8009924 <_ZL12MX_GPIO_Initv+0x8d4>)
 80096c8:	f007 f9fe 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80096cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80096d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80096d2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80096d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d8:	2300      	movs	r3, #0
 80096da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80096dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80096e0:	4619      	mov	r1, r3
 80096e2:	488f      	ldr	r0, [pc, #572]	@ (8009920 <_ZL12MX_GPIO_Initv+0x8d0>)
 80096e4:	f007 f9f0 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80096e8:	23c0      	movs	r3, #192	@ 0xc0
 80096ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096ec:	2302      	movs	r3, #2
 80096ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f0:	2300      	movs	r3, #0
 80096f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096f4:	2303      	movs	r3, #3
 80096f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80096f8:	2308      	movs	r3, #8
 80096fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009700:	4619      	mov	r1, r3
 8009702:	4889      	ldr	r0, [pc, #548]	@ (8009928 <_ZL12MX_GPIO_Initv+0x8d8>)
 8009704:	f007 f9e0 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8009708:	2310      	movs	r3, #16
 800970a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800970c:	2302      	movs	r3, #2
 800970e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009710:	2300      	movs	r3, #0
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009714:	2303      	movs	r3, #3
 8009716:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009718:	230a      	movs	r3, #10
 800971a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800971c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009720:	4619      	mov	r1, r3
 8009722:	487e      	ldr	r0, [pc, #504]	@ (800991c <_ZL12MX_GPIO_Initv+0x8cc>)
 8009724:	f007 f9d0 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8009728:	2328      	movs	r3, #40	@ 0x28
 800972a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800972c:	2302      	movs	r3, #2
 800972e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009730:	2300      	movs	r3, #0
 8009732:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009734:	2303      	movs	r3, #3
 8009736:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009738:	230c      	movs	r3, #12
 800973a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800973c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009740:	4619      	mov	r1, r3
 8009742:	4876      	ldr	r0, [pc, #472]	@ (800991c <_ZL12MX_GPIO_Initv+0x8cc>)
 8009744:	f007 f9c0 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8009748:	23c8      	movs	r3, #200	@ 0xc8
 800974a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800974c:	2301      	movs	r3, #1
 800974e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009750:	2300      	movs	r3, #0
 8009752:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009754:	2300      	movs	r3, #0
 8009756:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800975c:	4619      	mov	r1, r3
 800975e:	4873      	ldr	r0, [pc, #460]	@ (800992c <_ZL12MX_GPIO_Initv+0x8dc>)
 8009760:	f007 f9b2 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8009764:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8009768:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800976a:	2303      	movs	r3, #3
 800976c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800976e:	2300      	movs	r3, #0
 8009770:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009772:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009776:	4619      	mov	r1, r3
 8009778:	486d      	ldr	r0, [pc, #436]	@ (8009930 <_ZL12MX_GPIO_Initv+0x8e0>)
 800977a:	f007 f9a5 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800977e:	2308      	movs	r3, #8
 8009780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009782:	2302      	movs	r3, #2
 8009784:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009786:	2300      	movs	r3, #0
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800978a:	2303      	movs	r3, #3
 800978c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800978e:	230c      	movs	r3, #12
 8009790:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8009792:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009796:	4619      	mov	r1, r3
 8009798:	4863      	ldr	r0, [pc, #396]	@ (8009928 <_ZL12MX_GPIO_Initv+0x8d8>)
 800979a:	f007 f995 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800979e:	2305      	movs	r3, #5
 80097a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097a2:	2302      	movs	r3, #2
 80097a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097aa:	2303      	movs	r3, #3
 80097ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80097ae:	230a      	movs	r3, #10
 80097b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097b6:	4619      	mov	r1, r3
 80097b8:	485b      	ldr	r0, [pc, #364]	@ (8009928 <_ZL12MX_GPIO_Initv+0x8d8>)
 80097ba:	f007 f985 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80097be:	2332      	movs	r3, #50	@ 0x32
 80097c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097c2:	2302      	movs	r3, #2
 80097c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097ca:	2303      	movs	r3, #3
 80097cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097ce:	230b      	movs	r3, #11
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097d6:	4619      	mov	r1, r3
 80097d8:	4853      	ldr	r0, [pc, #332]	@ (8009928 <_ZL12MX_GPIO_Initv+0x8d8>)
 80097da:	f007 f975 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80097de:	2304      	movs	r3, #4
 80097e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e2:	2302      	movs	r3, #2
 80097e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097ea:	2303      	movs	r3, #3
 80097ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80097ee:	2309      	movs	r3, #9
 80097f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097f6:	4619      	mov	r1, r3
 80097f8:	484e      	ldr	r0, [pc, #312]	@ (8009934 <_ZL12MX_GPIO_Initv+0x8e4>)
 80097fa:	f007 f965 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80097fe:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8009802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009804:	2302      	movs	r3, #2
 8009806:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009808:	2300      	movs	r3, #0
 800980a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800980c:	2303      	movs	r3, #3
 800980e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009810:	2309      	movs	r3, #9
 8009812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009814:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009818:	4619      	mov	r1, r3
 800981a:	4847      	ldr	r0, [pc, #284]	@ (8009938 <_ZL12MX_GPIO_Initv+0x8e8>)
 800981c:	f007 f954 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8009820:	2304      	movs	r3, #4
 8009822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009824:	2300      	movs	r3, #0
 8009826:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009828:	2300      	movs	r3, #0
 800982a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800982c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009830:	4619      	mov	r1, r3
 8009832:	483e      	ldr	r0, [pc, #248]	@ (800992c <_ZL12MX_GPIO_Initv+0x8dc>)
 8009834:	f007 f948 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009838:	2386      	movs	r3, #134	@ 0x86
 800983a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800983c:	2302      	movs	r3, #2
 800983e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009840:	2300      	movs	r3, #0
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009844:	2303      	movs	r3, #3
 8009846:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009848:	230b      	movs	r3, #11
 800984a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800984c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009850:	4619      	mov	r1, r3
 8009852:	4834      	ldr	r0, [pc, #208]	@ (8009924 <_ZL12MX_GPIO_Initv+0x8d4>)
 8009854:	f007 f938 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8009858:	2301      	movs	r3, #1
 800985a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800985c:	2303      	movs	r3, #3
 800985e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009860:	2300      	movs	r3, #0
 8009862:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8009864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009868:	4619      	mov	r1, r3
 800986a:	482e      	ldr	r0, [pc, #184]	@ (8009924 <_ZL12MX_GPIO_Initv+0x8d4>)
 800986c:	f007 f92c 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8009870:	2350      	movs	r3, #80	@ 0x50
 8009872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009874:	2302      	movs	r3, #2
 8009876:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009878:	2300      	movs	r3, #0
 800987a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800987c:	2300      	movs	r3, #0
 800987e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009880:	230d      	movs	r3, #13
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009884:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009888:	4619      	mov	r1, r3
 800988a:	4826      	ldr	r0, [pc, #152]	@ (8009924 <_ZL12MX_GPIO_Initv+0x8d4>)
 800988c:	f007 f91c 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8009890:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8009894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009896:	2312      	movs	r3, #18
 8009898:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800989a:	2300      	movs	r3, #0
 800989c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800989e:	2303      	movs	r3, #3
 80098a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80098a2:	2304      	movs	r3, #4
 80098a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80098a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80098aa:	4619      	mov	r1, r3
 80098ac:	481b      	ldr	r0, [pc, #108]	@ (800991c <_ZL12MX_GPIO_Initv+0x8cc>)
 80098ae:	f007 f90b 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80098b2:	2328      	movs	r3, #40	@ 0x28
 80098b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098b6:	2302      	movs	r3, #2
 80098b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098be:	2303      	movs	r3, #3
 80098c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80098c2:	230a      	movs	r3, #10
 80098c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80098ca:	4619      	mov	r1, r3
 80098cc:	4815      	ldr	r0, [pc, #84]	@ (8009924 <_ZL12MX_GPIO_Initv+0x8d4>)
 80098ce:	f007 f8fb 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80098d2:	2340      	movs	r3, #64	@ 0x40
 80098d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098d6:	2302      	movs	r3, #2
 80098d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098de:	2300      	movs	r3, #0
 80098e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80098e2:	2309      	movs	r3, #9
 80098e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80098e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80098ea:	4619      	mov	r1, r3
 80098ec:	480b      	ldr	r0, [pc, #44]	@ (800991c <_ZL12MX_GPIO_Initv+0x8cc>)
 80098ee:	f007 f8eb 	bl	8010ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80098f2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80098f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098f8:	2302      	movs	r3, #2
 80098fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009900:	2300      	movs	r3, #0
 8009902:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009904:	2305      	movs	r3, #5
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009908:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800990c:	4619      	mov	r1, r3
 800990e:	4809      	ldr	r0, [pc, #36]	@ (8009934 <_ZL12MX_GPIO_Initv+0x8e4>)
 8009910:	f007 f8da 	bl	8010ac8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009914:	bf00      	nop
 8009916:	3740      	adds	r7, #64	@ 0x40
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	40021c00 	.word	0x40021c00
 8009920:	40022000 	.word	0x40022000
 8009924:	40020000 	.word	0x40020000
 8009928:	40020800 	.word	0x40020800
 800992c:	40021800 	.word	0x40021800
 8009930:	40021400 	.word	0x40021400
 8009934:	40020400 	.word	0x40020400
 8009938:	40020c00 	.word	0x40020c00
 800993c:	00000000 	.word	0x00000000

08009940 <_Z4funcbf>:

/* USER CODE BEGIN 4 */
void func(bool s,float f){
 8009940:	b580      	push	{r7, lr}
 8009942:	b08c      	sub	sp, #48	@ 0x30
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	ed87 0a00 	vstr	s0, [r7]
 800994c:	71fb      	strb	r3, [r7, #7]

	char msg[5];//buffer de salida

	//Señal triangular
	if (s == false) {
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	2b00      	cmp	r3, #0
 8009952:	f040 809b 	bne.w	8009a8c <_Z4funcbf+0x14c>

		int sample;
		float t = 0;
 8009956:	f04f 0300 	mov.w	r3, #0
 800995a:	62bb      	str	r3, [r7, #40]	@ 0x28
		float y; // resultado

		for (sample = 0; sample < f/2; ++sample){ //f/2 muestras
 800995c:	2300      	movs	r3, #0
 800995e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009960:	e038      	b.n	80099d4 <_Z4funcbf+0x94>

			y = 255.0*t;
 8009962:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8009966:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8009b78 <_Z4funcbf+0x238>
 800996a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800996e:	edc7 7a07 	vstr	s15, [r7, #28]

			sprintf(msg,"%d\n\r",(uint16_t)y);
 8009972:	edd7 7a07 	vldr	s15, [r7, #28]
 8009976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800997a:	ee17 3a90 	vmov	r3, s15
 800997e:	b29b      	uxth	r3, r3
 8009980:	461a      	mov	r2, r3
 8009982:	f107 0308 	add.w	r3, r7, #8
 8009986:	497d      	ldr	r1, [pc, #500]	@ (8009b7c <_Z4funcbf+0x23c>)
 8009988:	4618      	mov	r0, r3
 800998a:	f014 fe8d 	bl	801e6a8 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 800998e:	f107 0308 	add.w	r3, r7, #8
 8009992:	4618      	mov	r0, r3
 8009994:	f7f6 fc9c 	bl	80002d0 <strlen>
 8009998:	4603      	mov	r3, r0
 800999a:	b29a      	uxth	r2, r3
 800999c:	f107 0108 	add.w	r1, r7, #8
 80099a0:	2364      	movs	r3, #100	@ 0x64
 80099a2:	4877      	ldr	r0, [pc, #476]	@ (8009b80 <_Z4funcbf+0x240>)
 80099a4:	f008 fb1e 	bl	8011fe4 <HAL_UART_Transmit>
			HAL_Delay(5);
 80099a8:	2005      	movs	r0, #5
 80099aa:	f006 fec5 	bl	8010738 <HAL_Delay>

			t += 0.001;//avanzamos en el tiempo
 80099ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099b0:	f7f6 fdfa 	bl	80005a8 <__aeabi_f2d>
 80099b4:	a36c      	add	r3, pc, #432	@ (adr r3, 8009b68 <_Z4funcbf+0x228>)
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f7f6 fc97 	bl	80002ec <__adddf3>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4610      	mov	r0, r2
 80099c4:	4619      	mov	r1, r3
 80099c6:	f7f7 f93f 	bl	8000c48 <__aeabi_d2f>
 80099ca:	4603      	mov	r3, r0
 80099cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (sample = 0; sample < f/2; ++sample){ //f/2 muestras
 80099ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d0:	3301      	adds	r3, #1
 80099d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099de:	edd7 6a00 	vldr	s13, [r7]
 80099e2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80099e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80099ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f2:	d4b6      	bmi.n	8009962 <_Z4funcbf+0x22>
		}

		for (sample = 0; sample < f/2; ++sample){ //f/2 muestras
 80099f4:	2300      	movs	r3, #0
 80099f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f8:	e038      	b.n	8009a6c <_Z4funcbf+0x12c>
			y = 255.0*t;
 80099fa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80099fe:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8009b78 <_Z4funcbf+0x238>
 8009a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a06:	edc7 7a07 	vstr	s15, [r7, #28]

			sprintf(msg,"%d\n\r",(uint16_t)y);
 8009a0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a12:	ee17 3a90 	vmov	r3, s15
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	461a      	mov	r2, r3
 8009a1a:	f107 0308 	add.w	r3, r7, #8
 8009a1e:	4957      	ldr	r1, [pc, #348]	@ (8009b7c <_Z4funcbf+0x23c>)
 8009a20:	4618      	mov	r0, r3
 8009a22:	f014 fe41 	bl	801e6a8 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 8009a26:	f107 0308 	add.w	r3, r7, #8
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7f6 fc50 	bl	80002d0 <strlen>
 8009a30:	4603      	mov	r3, r0
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	f107 0108 	add.w	r1, r7, #8
 8009a38:	2364      	movs	r3, #100	@ 0x64
 8009a3a:	4851      	ldr	r0, [pc, #324]	@ (8009b80 <_Z4funcbf+0x240>)
 8009a3c:	f008 fad2 	bl	8011fe4 <HAL_UART_Transmit>
			HAL_Delay(5);
 8009a40:	2005      	movs	r0, #5
 8009a42:	f006 fe79 	bl	8010738 <HAL_Delay>

			t -= 0.001;//avanzamos en el tiempo
 8009a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a48:	f7f6 fdae 	bl	80005a8 <__aeabi_f2d>
 8009a4c:	a346      	add	r3, pc, #280	@ (adr r3, 8009b68 <_Z4funcbf+0x228>)
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f7f6 fc49 	bl	80002e8 <__aeabi_dsub>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	f7f7 f8f3 	bl	8000c48 <__aeabi_d2f>
 8009a62:	4603      	mov	r3, r0
 8009a64:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (sample = 0; sample < f/2; ++sample){ //f/2 muestras
 8009a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a68:	3301      	adds	r3, #1
 8009a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a76:	edd7 6a00 	vldr	s13, [r7]
 8009a7a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8009a7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8a:	d4b6      	bmi.n	80099fa <_Z4funcbf+0xba>
		}

	}

	if (s == true){
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d163      	bne.n	8009b5a <_Z4funcbf+0x21a>
		//senoidal
		float w = 2*3.1416; //velocidad angular
 8009a92:	4b3c      	ldr	r3, [pc, #240]	@ (8009b84 <_Z4funcbf+0x244>)
 8009a94:	61bb      	str	r3, [r7, #24]
		float y; // resultado
		float a = 127.5; //amplitud
 8009a96:	4b3c      	ldr	r3, [pc, #240]	@ (8009b88 <_Z4funcbf+0x248>)
 8009a98:	617b      	str	r3, [r7, #20]

		int sample;
		float t = 0;
 8009a9a:	f04f 0300 	mov.w	r3, #0
 8009a9e:	623b      	str	r3, [r7, #32]
		for (sample = 0; sample < 1000; ++sample){ //1000 muestras
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aa4:	e055      	b.n	8009b52 <_Z4funcbf+0x212>

			y = a*sin(w*t*f) + 127.5;
 8009aa6:	ed97 7a06 	vldr	s14, [r7, #24]
 8009aaa:	edd7 7a08 	vldr	s15, [r7, #32]
 8009aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ab2:	edd7 7a00 	vldr	s15, [r7]
 8009ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aba:	eeb0 0a67 	vmov.f32	s0, s15
 8009abe:	f7f7 fb51 	bl	8001164 <_ZSt3sinf>
 8009ac2:	eeb0 7a40 	vmov.f32	s14, s0
 8009ac6:	edd7 7a05 	vldr	s15, [r7, #20]
 8009aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ace:	ee17 0a90 	vmov	r0, s15
 8009ad2:	f7f6 fd69 	bl	80005a8 <__aeabi_f2d>
 8009ad6:	a326      	add	r3, pc, #152	@ (adr r3, 8009b70 <_Z4funcbf+0x230>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7f6 fc06 	bl	80002ec <__adddf3>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	f7f7 f8ae 	bl	8000c48 <__aeabi_d2f>
 8009aec:	4603      	mov	r3, r0
 8009aee:	613b      	str	r3, [r7, #16]

			sprintf(msg,"%d\n\r",(uint16_t)y);
 8009af0:	edd7 7a04 	vldr	s15, [r7, #16]
 8009af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af8:	ee17 3a90 	vmov	r3, s15
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	461a      	mov	r2, r3
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	491d      	ldr	r1, [pc, #116]	@ (8009b7c <_Z4funcbf+0x23c>)
 8009b06:	4618      	mov	r0, r3
 8009b08:	f014 fdce 	bl	801e6a8 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 8009b0c:	f107 0308 	add.w	r3, r7, #8
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7f6 fbdd 	bl	80002d0 <strlen>
 8009b16:	4603      	mov	r3, r0
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	f107 0108 	add.w	r1, r7, #8
 8009b1e:	2364      	movs	r3, #100	@ 0x64
 8009b20:	4817      	ldr	r0, [pc, #92]	@ (8009b80 <_Z4funcbf+0x240>)
 8009b22:	f008 fa5f 	bl	8011fe4 <HAL_UART_Transmit>
			HAL_Delay(5);
 8009b26:	2005      	movs	r0, #5
 8009b28:	f006 fe06 	bl	8010738 <HAL_Delay>

			t += 0.001;//avanzamos en el tiempo
 8009b2c:	6a38      	ldr	r0, [r7, #32]
 8009b2e:	f7f6 fd3b 	bl	80005a8 <__aeabi_f2d>
 8009b32:	a30d      	add	r3, pc, #52	@ (adr r3, 8009b68 <_Z4funcbf+0x228>)
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f7f6 fbd8 	bl	80002ec <__adddf3>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4610      	mov	r0, r2
 8009b42:	4619      	mov	r1, r3
 8009b44:	f7f7 f880 	bl	8000c48 <__aeabi_d2f>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	623b      	str	r3, [r7, #32]
		for (sample = 0; sample < 1000; ++sample){ //1000 muestras
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	3301      	adds	r3, #1
 8009b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b58:	dba5      	blt.n	8009aa6 <_Z4funcbf+0x166>
		}
	}

}
 8009b5a:	bf00      	nop
 8009b5c:	3730      	adds	r7, #48	@ 0x30
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	f3af 8000 	nop.w
 8009b68:	d2f1a9fc 	.word	0xd2f1a9fc
 8009b6c:	3f50624d 	.word	0x3f50624d
 8009b70:	00000000 	.word	0x00000000
 8009b74:	405fe000 	.word	0x405fe000
 8009b78:	437f0000 	.word	0x437f0000
 8009b7c:	08021924 	.word	0x08021924
 8009b80:	200053c4 	.word	0x200053c4
 8009b84:	40c90ff9 	.word	0x40c90ff9
 8009b88:	42ff0000 	.word	0x42ff0000

08009b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009b90:	b672      	cpsid	i
}
 8009b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009b94:	bf00      	nop
 8009b96:	e7fd      	b.n	8009b94 <Error_Handler+0x8>

08009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>:

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	109b      	asrs	r3, r3, #2
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 fc04 	bl	800b3d4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      vector(size_type __n, const bool& __value,
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	60f8      	str	r0, [r7, #12]
 8009bde:	60b9      	str	r1, [r7, #8]
 8009be0:	607a      	str	r2, [r7, #4]
 8009be2:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 fbff 	bl	800b3ec <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
	_M_initialize(__n);
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f001 fc1e 	bl	800b432 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f001 fc54 	bl	800b4aa <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT { }
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fbff 	bl	800b41a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      operator[](size_type __n)
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b086      	sub	sp, #24
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
      { return begin()[__n]; }
 8009c32:	f107 0310 	add.w	r3, r7, #16
 8009c36:	68b9      	ldr	r1, [r7, #8]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f001 fc54 	bl	800b4e6 <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f107 0110 	add.w	r1, r7, #16
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7f7 fc6a 	bl	8001520 <_ZNKSt13_Bit_iteratorixEi>
 8009c4c:	bf00      	nop
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f001 fc50 	bl	800b506 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009c66:	4603      	mov	r3, r0
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009c6c:	6838      	ldr	r0, [r7, #0]
 8009c6e:	f001 fc4a 	bl	800b506 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009c72:	4603      	mov	r3, r0
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009c7a:	f107 030c 	add.w	r3, r7, #12
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 fc41 	bl	800b506 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009c84:	4603      	mov	r3, r0
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	601a      	str	r2, [r3, #0]
    }
 8009c8c:	bf00      	nop
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8009c94:	b5b0      	push	{r4, r5, r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8009c9e:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7f6 fc81 	bl	80005a8 <__aeabi_f2d>
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	460d      	mov	r5, r1
 8009caa:	6838      	ldr	r0, [r7, #0]
 8009cac:	f7f6 fc6a 	bl	8000584 <__aeabi_i2d>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	ec43 2b11 	vmov	d1, r2, r3
 8009cb8:	ec45 4b10 	vmov	d0, r4, r5
 8009cbc:	f010 fa2e 	bl	801a11c <pow>
 8009cc0:	eeb0 7a40 	vmov.f32	s14, s0
 8009cc4:	eef0 7a60 	vmov.f32	s15, s1
    }
 8009cc8:	eeb0 0a47 	vmov.f32	s0, s14
 8009ccc:	eef0 0a67 	vmov.f32	s1, s15
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bdb0      	pop	{r4, r5, r7, pc}

08009cd6 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	60f8      	str	r0, [r7, #12]
 8009cde:	60b9      	str	r1, [r7, #8]
 8009ce0:	607a      	str	r2, [r7, #4]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	68b9      	ldr	r1, [r7, #8]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f001 fc43 	bl	800b574 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
	unique_ptr(pointer __p,
 8009cf8:	b590      	push	{r4, r7, lr}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009d04:	68fc      	ldr	r4, [r7, #12]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f001 fc29 	bl	800b55e <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68b9      	ldr	r1, [r7, #8]
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff ffdf 	bl	8009cd6 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd90      	pop	{r4, r7, pc}

08009d22 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
      ~unique_ptr() noexcept
 8009d22:	b590      	push	{r4, r7, lr}
 8009d24:	b085      	sub	sp, #20
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f001 fc37 	bl	800b5a0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8009d32:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f001 fc3c 	bl	800b5ba <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8009d42:	4603      	mov	r3, r0
 8009d44:	681c      	ldr	r4, [r3, #0]
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f001 fc44 	bl	800b5d4 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4618      	mov	r0, r3
 8009d52:	47a0      	blx	r4
	__ptr = pointer();
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
      }
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd90      	pop	{r4, r7, pc}

08009d64 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      _GLIBCXX23_CONSTEXPR
      void
      reset(pointer __p = pointer()) noexcept
 8009d64:	b590      	push	{r4, r7, lr}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8009d6e:	687c      	ldr	r4, [r7, #4]
 8009d70:	463b      	mov	r3, r7
 8009d72:	4618      	mov	r0, r3
 8009d74:	f001 fc2e 	bl	800b5d4 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f001 fc33 	bl	800b5ea <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd90      	pop	{r4, r7, pc}

08009d8c <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	ed93 7a00 	vldr	s14, [r3]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	edd3 7a00 	vldr	s15, [r3]
 8009da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009daa:	d501      	bpl.n	8009db0 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	e000      	b.n	8009db2 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8009db0:	687b      	ldr	r3, [r7, #4]
    }
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	f107 030c 	add.w	r3, r7, #12
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f001 fc2a 	bl	800b628 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	1d1a      	adds	r2, r3, #4
 8009dea:	f107 030c 	add.w	r3, r7, #12
 8009dee:	4611      	mov	r1, r2
 8009df0:	4618      	mov	r0, r3
 8009df2:	f001 fc19 	bl	800b628 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 fc1c 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009e10:	4603      	mov	r3, r0
 8009e12:	681c      	ldr	r4, [r3, #0]
 8009e14:	6838      	ldr	r0, [r7, #0]
 8009e16:	f001 fc17 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	429c      	cmp	r4, r3
 8009e20:	bf14      	ite	ne
 8009e22:	2301      	movne	r3, #1
 8009e24:	2300      	moveq	r3, #0
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd90      	pop	{r4, r7, pc}

08009e30 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	1d1a      	adds	r2, r3, #4
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
	return *this;
 8009e42:	687b      	ldr	r3, [r7, #4]
      }
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8009e68:	b590      	push	{r4, r7, lr}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8009e74:	68fc      	ldr	r4, [r7, #12]
 8009e76:	6879      	ldr	r1, [r7, #4]
 8009e78:	68b8      	ldr	r0, [r7, #8]
 8009e7a:	f001 fbf1 	bl	800b660 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	4619      	mov	r1, r3
 8009e84:	4620      	mov	r0, r4
 8009e86:	f001 fc09 	bl	800b69c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
      { _M_default_initialize(__n); }
 8009e8a:	68b9      	ldr	r1, [r7, #8]
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f001 fc19 	bl	800b6c4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd90      	pop	{r4, r7, pc}

08009e9c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009e9c:	b5b0      	push	{r4, r5, r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681c      	ldr	r4, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f001 fc20 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 8009eb4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f001 fc25 	bl	800b70a <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      }
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 f815 	bl	8009ef2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bdb0      	pop	{r4, r5, r7, pc}

08009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
      }
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	689a      	ldr	r2, [r3, #8]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 fc17 	bl	800b740 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      }
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4618      	mov	r0, r3
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	f107 030c 	add.w	r3, r7, #12
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 fc1a 	bl	800b766 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	1d1a      	adds	r2, r3, #4
 8009f48:	f107 030c 	add.w	r3, r7, #12
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f001 fc09 	bl	800b766 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009f5e:	b590      	push	{r4, r7, lr}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 fc0c 	bl	800b786 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	681c      	ldr	r4, [r3, #0]
 8009f72:	6838      	ldr	r0, [r7, #0]
 8009f74:	f001 fc07 	bl	800b786 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	429c      	cmp	r4, r3
 8009f7e:	bf14      	ite	ne
 8009f80:	2301      	movne	r3, #1
 8009f82:	2300      	moveq	r3, #0
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd90      	pop	{r4, r7, pc}

08009f8e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	1d1a      	adds	r2, r3, #4
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	601a      	str	r2, [r3, #0]
	return *this;
 8009fa0:	687b      	ldr	r3, [r7, #4]
      }
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8009fc6:	b590      	push	{r4, r7, lr}
 8009fc8:	b083      	sub	sp, #12
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 8009fd0:	f7f7 f93e 	bl	8001250 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fbdf 	bl	800b79c <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 8009fde:	bf00      	nop
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd90      	pop	{r4, r7, pc}

08009fe6 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:

      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 f9ed 	bl	800b3d4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
   *  @return  Iterator referencing the first instance of the largest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
 800a004:	b590      	push	{r4, r7, lr}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__max_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 800a00e:	f7f7 f91f 	bl	8001250 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__max_element(__first, __last,
 800a012:	4622      	mov	r2, r4
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 fbed 	bl	800b7f6 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 800a01c:	4603      	mov	r3, r0
    }
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	bd90      	pop	{r4, r7, pc}

0800a026 <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a026:	b5b0      	push	{r4, r5, r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681c      	ldr	r4, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4618      	mov	r0, r3
 800a03a:	f001 fc2f 	bl	800b89c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800a03e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a040:	461a      	mov	r2, r3
 800a042:	4629      	mov	r1, r5
 800a044:	4620      	mov	r0, r4
 800a046:	f001 fc34 	bl	800b8b2 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>
      }
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 f805 	bl	800a05c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bdb0      	pop	{r4, r5, r7, pc}

0800a05c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800a074:	461a      	mov	r2, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f001 fc36 	bl	800b8e8 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>
      }
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
      }
 800a09a:	4618      	mov	r0, r3
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d201      	bcs.n	800a0c0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	e000      	b.n	800a0c2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800a0c0:	687b      	ldr	r3, [r7, #4]
    }
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>:
      vector(const vector& __x)
 800a0ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800a0d8:	687c      	ldr	r4, [r7, #4]
 800a0da:	6838      	ldr	r0, [r7, #0]
 800a0dc:	f7ff fd5c 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f001 fc12 	bl	800b90e <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f001 fc19 	bl	800b924 <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>
 800a0f2:	f107 030c 	add.w	r3, r7, #12
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f001 face 	bl	800b69c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a100:	6838      	ldr	r0, [r7, #0]
 800a102:	f7ff ff0b 	bl	8009f1c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800a106:	4605      	mov	r5, r0
 800a108:	6838      	ldr	r0, [r7, #0]
 800a10a:	f7ff ff17 	bl	8009f3c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800a10e:	4606      	mov	r6, r0
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4618      	mov	r0, r3
 800a118:	f001 faec 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800a11c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a11e:	4622      	mov	r2, r4
 800a120:	4631      	mov	r1, r6
 800a122:	4628      	mov	r0, r5
 800a124:	f001 fc0a 	bl	800b93c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>
 800a128:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	605a      	str	r2, [r3, #4]
      }
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a138 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 800a138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	603b      	str	r3, [r7, #0]
      {
	if (_M_empty())
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7f7 f86f 	bl	800122e <_ZNKSt14_Function_base8_M_emptyEv>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	  __throw_bad_function_call();
 800a156:	f00f ffd3 	bl	801a100 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	68dc      	ldr	r4, [r3, #12]
 800a15e:	68fd      	ldr	r5, [r7, #12]
 800a160:	f107 0308 	add.w	r3, r7, #8
 800a164:	4618      	mov	r0, r3
 800a166:	f001 fc1a 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a16a:	4606      	mov	r6, r0
 800a16c:	1d3b      	adds	r3, r7, #4
 800a16e:	4618      	mov	r0, r3
 800a170:	f001 fc15 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a174:	4680      	mov	r8, r0
 800a176:	463b      	mov	r3, r7
 800a178:	4618      	mov	r0, r3
 800a17a:	f001 fc1b 	bl	800b9b4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800a17e:	4603      	mov	r3, r0
 800a180:	4642      	mov	r2, r8
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	47a0      	blx	r4
 800a188:	4603      	mov	r3, r0
      }
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a194 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7f6 f9f1 	bl	8000584 <__aeabi_i2d>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	ec43 2b17 	vmov	d7, r2, r3
 800a1aa:	eeb0 0a47 	vmov.f32	s0, s14
 800a1ae:	eef0 0a67 	vmov.f32	s1, s15
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f001 fc01 	bl	800b9ca <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	689a      	ldr	r2, [r3, #8]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f001 fc00 	bl	800b9f2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a1fc:	b5b0      	push	{r4, r5, r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681c      	ldr	r4, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4618      	mov	r0, r3
 800a210:	f001 fc02 	bl	800ba18 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800a214:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a216:	461a      	mov	r2, r3
 800a218:	4629      	mov	r1, r5
 800a21a:	4620      	mov	r0, r4
 800a21c:	f001 fc07 	bl	800ba2e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      }
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff ffd5 	bl	800a1d2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bdb0      	pop	{r4, r5, r7, pc}

0800a232 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	429a      	cmp	r2, r3
 800a246:	d00d      	beq.n	800a264 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	4619      	mov	r1, r3
 800a252:	f001 fc07 	bl	800ba64 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f103 0208 	add.w	r2, r3, #8
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800a262:	e008      	b.n	800a276 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f81a 	bl	800a29e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 800a26a:	4603      	mov	r3, r0
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f001 fc21 	bl	800bab8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	f107 030c 	add.w	r3, r7, #12
 800a28c:	4611      	mov	r1, r2
 800a28e:	4618      	mov	r0, r3
 800a290:	f001 fcce 	bl	800bc30 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	1d1a      	adds	r2, r3, #4
 800a2aa:	f107 030c 	add.w	r3, r7, #12
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f001 fcbd 	bl	800bc30 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a2c0:	b590      	push	{r4, r7, lr}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	713a      	strb	r2, [r7, #4]
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f001 fcbf 	bl	800bc50 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f001 fccd 	bl	800bc76 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd90      	pop	{r4, r7, pc}

0800a2e4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	10db      	asrs	r3, r3, #3
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	00db      	lsls	r3, r3, #3
 800a316:	4413      	add	r3, r2
      }
 800a318:	4618      	mov	r0, r3
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800a324:	b590      	push	{r4, r7, lr}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
				__gnu_cxx::__ops::__iter_less_iter());
 800a32e:	f7f6 ff8f 	bl	8001250 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800a332:	4622      	mov	r2, r4
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 fcca 	bl	800bcd0 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 800a33c:	4603      	mov	r3, r0
    }
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	bd90      	pop	{r4, r7, pc}

0800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>:
      resize(size_type __new_size)
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff fc21 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a356:	4602      	mov	r2, r0
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	4293      	cmp	r3, r2
 800a35c:	bf8c      	ite	hi
 800a35e:	2301      	movhi	r3, #1
 800a360:	2300      	movls	r3, #0
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00a      	beq.n	800a37e <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7ff fc15 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a36e:	4602      	mov	r2, r0
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	1a9b      	subs	r3, r3, r2
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f001 fce0 	bl	800bd3c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>
      }
 800a37c:	e014      	b.n	800a3a8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	else if (__new_size < size())
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7ff fc0a 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a384:	4602      	mov	r2, r0
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	4293      	cmp	r3, r2
 800a38a:	bf34      	ite	cc
 800a38c:	2301      	movcc	r3, #1
 800a38e:	2300      	movcs	r3, #0
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d008      	beq.n	800a3a8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f001 fd80 	bl	800bea8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
      }
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>:
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      [[__nodiscard__]]
      constexpr const_reference
      operator[](size_type __n) const noexcept
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f805 	bl	800a3ce <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>
 800a3c4:	4603      	mov	r3, r0
      }
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	4413      	add	r3, r2
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	b590      	push	{r4, r7, lr}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	f107 0418 	add.w	r4, r7, #24
 800a3fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a402:	2306      	movs	r3, #6
 800a404:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a40a:	f7ff ff9c 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800a412:	f7ff ff98 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a416:	2300      	movs	r3, #0
 800a418:	607b      	str	r3, [r7, #4]
 800a41a:	e02a      	b.n	800a472 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a41c:	2100      	movs	r1, #0
 800a41e:	f107 0018 	add.w	r0, r7, #24
 800a422:	f7ff ffc5 	bl	800a3b0 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	3b01      	subs	r3, #1
 800a42e:	4619      	mov	r1, r3
 800a430:	f001 fd5b 	bl	800beea <_ZNKSt5arrayIfLj6EEixEj>
 800a434:	4604      	mov	r4, r0
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a43a:	f7ff fd4a 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a43e:	4602      	mov	r2, r0
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a444:	2101      	movs	r1, #1
 800a446:	f107 0018 	add.w	r0, r7, #24
 800a44a:	f7ff ffb1 	bl	800a3b0 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	3b01      	subs	r3, #1
 800a456:	4619      	mov	r1, r3
 800a458:	f001 fd47 	bl	800beea <_ZNKSt5arrayIfLj6EEixEj>
 800a45c:	4604      	mov	r4, r0
 800a45e:	6879      	ldr	r1, [r7, #4]
 800a460:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800a462:	f7ff fd36 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a466:	4602      	mov	r2, r0
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	3301      	adds	r3, #1
 800a470:	607b      	str	r3, [r7, #4]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d3d0      	bcc.n	800a41c <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a47a:	bf00      	nop
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a486:	b004      	add	sp, #16
 800a488:	4770      	bx	lr

0800a48a <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b082      	sub	sp, #8
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 f805 	bl	800a4a8 <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>
 800a49e:	4603      	mov	r3, r0
      }
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	4413      	add	r3, r2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	b590      	push	{r4, r7, lr}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	f107 0418 	add.w	r4, r7, #24
 800a4d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a4dc:	230a      	movs	r3, #10
 800a4de:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800a4e4:	f7ff ff2f 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4ec:	f7ff ff2b 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	607b      	str	r3, [r7, #4]
 800a4f4:	e02a      	b.n	800a54c <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	f107 0018 	add.w	r0, r7, #24
 800a4fc:	f7ff ffc5 	bl	800a48a <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	3b01      	subs	r3, #1
 800a508:	4619      	mov	r1, r3
 800a50a:	f001 fcfd 	bl	800bf08 <_ZNKSt5arrayIfLj10EEixEj>
 800a50e:	4604      	mov	r4, r0
 800a510:	6879      	ldr	r1, [r7, #4]
 800a512:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800a514:	f7ff fcdd 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a518:	4602      	mov	r2, r0
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a51e:	2101      	movs	r1, #1
 800a520:	f107 0018 	add.w	r0, r7, #24
 800a524:	f7ff ffb1 	bl	800a48a <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	3b01      	subs	r3, #1
 800a530:	4619      	mov	r1, r3
 800a532:	f001 fce9 	bl	800bf08 <_ZNKSt5arrayIfLj10EEixEj>
 800a536:	4604      	mov	r4, r0
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a53c:	f7ff fcc9 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a540:	4602      	mov	r2, r0
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	3301      	adds	r3, #1
 800a54a:	607b      	str	r3, [r7, #4]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	429a      	cmp	r2, r3
 800a552:	d3d0      	bcc.n	800a4f6 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a554:	bf00      	nop
 800a556:	bf00      	nop
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a560:	b004      	add	sp, #16
 800a562:	4770      	bx	lr

0800a564 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	4618      	mov	r0, r3
 800a574:	f000 f805 	bl	800a582 <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>
 800a578:	4603      	mov	r3, r0
      }
 800a57a:	4618      	mov	r0, r3
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a582:	b480      	push	{r7}
 800a584:	b083      	sub	sp, #12
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	4613      	mov	r3, r2
 800a590:	00db      	lsls	r3, r3, #3
 800a592:	1a9b      	subs	r3, r3, r2
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	4413      	add	r3, r2
 800a59a:	4618      	mov	r0, r3
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	b590      	push	{r4, r7, lr}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	f107 0418 	add.w	r4, r7, #24
 800a5b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a5b6:	230e      	movs	r3, #14
 800a5b8:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a5ba:	6839      	ldr	r1, [r7, #0]
 800a5bc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800a5c0:	f7ff fec1 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800a5ca:	f7ff febc 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	e02c      	b.n	800a62e <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	f107 0018 	add.w	r0, r7, #24
 800a5da:	f7ff ffc3 	bl	800a564 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f001 fc9d 	bl	800bf26 <_ZNKSt5arrayIfLj14EEixEj>
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800a5f4:	f7ff fc6d 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a5fe:	2101      	movs	r1, #1
 800a600:	f107 0018 	add.w	r0, r7, #24
 800a604:	f7ff ffae 	bl	800a564 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	3b01      	subs	r3, #1
 800a610:	4619      	mov	r1, r3
 800a612:	f001 fc88 	bl	800bf26 <_ZNKSt5arrayIfLj14EEixEj>
 800a616:	4604      	mov	r4, r0
 800a618:	6879      	ldr	r1, [r7, #4]
 800a61a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800a61e:	f7ff fc58 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a622:	4602      	mov	r2, r0
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3301      	adds	r3, #1
 800a62c:	607b      	str	r3, [r7, #4]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d3ce      	bcc.n	800a5d4 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a636:	bf00      	nop
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a642:	b004      	add	sp, #16
 800a644:	4770      	bx	lr

0800a646 <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6839      	ldr	r1, [r7, #0]
 800a654:	4618      	mov	r0, r3
 800a656:	f000 f805 	bl	800a664 <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>
 800a65a:	4603      	mov	r3, r0
      }
 800a65c:	4618      	mov	r0, r3
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	4613      	mov	r3, r2
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	4413      	add	r3, r2
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	4413      	add	r3, r2
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a688:	b084      	sub	sp, #16
 800a68a:	b590      	push	{r4, r7, lr}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	f107 0418 	add.w	r4, r7, #24
 800a694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a698:	2312      	movs	r3, #18
 800a69a:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800a6a2:	f7ff fe50 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800a6ac:	f7ff fe4b 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	607b      	str	r3, [r7, #4]
 800a6b4:	e02c      	b.n	800a710 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	f107 0018 	add.w	r0, r7, #24
 800a6bc:	f7ff ffc3 	bl	800a646 <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	f001 fc3b 	bl	800bf44 <_ZNKSt5arrayIfLj18EEixEj>
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800a6d6:	f7ff fbfc 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	f107 0018 	add.w	r0, r7, #24
 800a6e6:	f7ff ffae 	bl	800a646 <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	f001 fc26 	bl	800bf44 <_ZNKSt5arrayIfLj18EEixEj>
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	6879      	ldr	r1, [r7, #4]
 800a6fc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800a700:	f7ff fbe7 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a704:	4602      	mov	r2, r0
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3301      	adds	r3, #1
 800a70e:	607b      	str	r3, [r7, #4]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	429a      	cmp	r2, r3
 800a716:	d3ce      	bcc.n	800a6b6 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a724:	b004      	add	sp, #16
 800a726:	4770      	bx	lr

0800a728 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6839      	ldr	r1, [r7, #0]
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f805 	bl	800a746 <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>
 800a73c:	4603      	mov	r3, r0
      }
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a746:	b480      	push	{r7}
 800a748:	b083      	sub	sp, #12
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	011b      	lsls	r3, r3, #4
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	4413      	add	r3, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a764:	b084      	sub	sp, #16
 800a766:	b590      	push	{r4, r7, lr}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	f107 0418 	add.w	r4, r7, #24
 800a770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a774:	2304      	movs	r3, #4
 800a776:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a77c:	f7ff fde3 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a784:	f7ff fddf 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a788:	2300      	movs	r3, #0
 800a78a:	607b      	str	r3, [r7, #4]
 800a78c:	e02a      	b.n	800a7e4 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a78e:	2100      	movs	r1, #0
 800a790:	f107 0018 	add.w	r0, r7, #24
 800a794:	f7ff ffc8 	bl	800a728 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	f001 fbde 	bl	800bf62 <_ZNKSt5arrayIfLj4EEixEj>
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	6879      	ldr	r1, [r7, #4]
 800a7aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a7ac:	f7ff fb91 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	f107 0018 	add.w	r0, r7, #24
 800a7bc:	f7ff ffb4 	bl	800a728 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	f001 fbca 	bl	800bf62 <_ZNKSt5arrayIfLj4EEixEj>
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	6879      	ldr	r1, [r7, #4]
 800a7d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a7d4:	f7ff fb7d 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	607b      	str	r3, [r7, #4]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d3d0      	bcc.n	800a78e <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a7ec:	bf00      	nop
 800a7ee:	bf00      	nop
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a7f8:	b004      	add	sp, #16
 800a7fa:	4770      	bx	lr

0800a7fc <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f805 	bl	800a81a <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>
 800a810:	4603      	mov	r3, r0
      }
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	015b      	lsls	r3, r3, #5
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	4413      	add	r3, r2
 800a82c:	4618      	mov	r0, r3
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a838:	b084      	sub	sp, #16
 800a83a:	b590      	push	{r4, r7, lr}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	f107 0418 	add.w	r4, r7, #24
 800a844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a848:	2308      	movs	r3, #8
 800a84a:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a850:	f7ff fd79 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800a858:	f7ff fd75 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a85c:	2300      	movs	r3, #0
 800a85e:	607b      	str	r3, [r7, #4]
 800a860:	e02a      	b.n	800a8b8 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a862:	2100      	movs	r1, #0
 800a864:	f107 0018 	add.w	r0, r7, #24
 800a868:	f7ff ffc8 	bl	800a7fc <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	3b01      	subs	r3, #1
 800a874:	4619      	mov	r1, r3
 800a876:	f001 fb83 	bl	800bf80 <_ZNKSt5arrayIfLj8EEixEj>
 800a87a:	4604      	mov	r4, r0
 800a87c:	6879      	ldr	r1, [r7, #4]
 800a87e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a880:	f7ff fb27 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a884:	4602      	mov	r2, r0
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a88a:	2101      	movs	r1, #1
 800a88c:	f107 0018 	add.w	r0, r7, #24
 800a890:	f7ff ffb4 	bl	800a7fc <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	4619      	mov	r1, r3
 800a89e:	f001 fb6f 	bl	800bf80 <_ZNKSt5arrayIfLj8EEixEj>
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800a8a8:	f7ff fb13 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	607b      	str	r3, [r7, #4]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d3d0      	bcc.n	800a862 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a8c0:	bf00      	nop
 800a8c2:	bf00      	nop
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a8cc:	b004      	add	sp, #16
 800a8ce:	4770      	bx	lr

0800a8d0 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 f805 	bl	800a8ee <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>
 800a8e4:	4603      	mov	r3, r0
      }
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	005b      	lsls	r3, r3, #1
 800a8fe:	4413      	add	r3, r2
 800a900:	011b      	lsls	r3, r3, #4
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	4413      	add	r3, r2
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a912:	b084      	sub	sp, #16
 800a914:	b590      	push	{r4, r7, lr}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	f107 0418 	add.w	r4, r7, #24
 800a91e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a922:	230c      	movs	r3, #12
 800a924:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800a92a:	f7ff fd0c 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800a932:	f7ff fd08 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a936:	2300      	movs	r3, #0
 800a938:	607b      	str	r3, [r7, #4]
 800a93a:	e02a      	b.n	800a992 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a93c:	2100      	movs	r1, #0
 800a93e:	f107 0018 	add.w	r0, r7, #24
 800a942:	f7ff ffc5 	bl	800a8d0 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	3b01      	subs	r3, #1
 800a94e:	4619      	mov	r1, r3
 800a950:	f001 fb25 	bl	800bf9e <_ZNKSt5arrayIfLj12EEixEj>
 800a954:	4604      	mov	r4, r0
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800a95a:	f7ff faba 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a95e:	4602      	mov	r2, r0
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a964:	2101      	movs	r1, #1
 800a966:	f107 0018 	add.w	r0, r7, #24
 800a96a:	f7ff ffb1 	bl	800a8d0 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	3b01      	subs	r3, #1
 800a976:	4619      	mov	r1, r3
 800a978:	f001 fb11 	bl	800bf9e <_ZNKSt5arrayIfLj12EEixEj>
 800a97c:	4604      	mov	r4, r0
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800a982:	f7ff faa6 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a986:	4602      	mov	r2, r0
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3301      	adds	r3, #1
 800a990:	607b      	str	r3, [r7, #4]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	429a      	cmp	r2, r3
 800a998:	d3d0      	bcc.n	800a93c <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a9a6:	b004      	add	sp, #16
 800a9a8:	4770      	bx	lr

0800a9aa <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 f805 	bl	800a9c8 <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>
 800a9be:	4603      	mov	r3, r0
      }
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	019b      	lsls	r3, r3, #6
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	4413      	add	r3, r2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	b590      	push	{r4, r7, lr}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	f107 0418 	add.w	r4, r7, #24
 800a9f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a9f6:	2310      	movs	r3, #16
 800a9f8:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800aa00:	f7ff fca1 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800aa0a:	f7ff fc9c 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800aa0e:	2300      	movs	r3, #0
 800aa10:	607b      	str	r3, [r7, #4]
 800aa12:	e02c      	b.n	800aa6e <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800aa14:	2100      	movs	r1, #0
 800aa16:	f107 0018 	add.w	r0, r7, #24
 800aa1a:	f7ff ffc6 	bl	800a9aa <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	3b01      	subs	r3, #1
 800aa26:	4619      	mov	r1, r3
 800aa28:	f001 fac8 	bl	800bfbc <_ZNKSt5arrayIfLj16EEixEj>
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800aa34:	f7ff fa4d 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800aa3e:	2101      	movs	r1, #1
 800aa40:	f107 0018 	add.w	r0, r7, #24
 800aa44:	f7ff ffb1 	bl	800a9aa <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	4619      	mov	r1, r3
 800aa52:	f001 fab3 	bl	800bfbc <_ZNKSt5arrayIfLj16EEixEj>
 800aa56:	4604      	mov	r4, r0
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800aa5e:	f7ff fa38 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800aa62:	4602      	mov	r2, r0
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	607b      	str	r3, [r7, #4]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d3ce      	bcc.n	800aa14 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800aa76:	bf00      	nop
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aa82:	b004      	add	sp, #16
 800aa84:	4770      	bx	lr

0800aa86 <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 f805 	bl	800aaa4 <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>
 800aa9a:	4603      	mov	r3, r0
      }
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	011b      	lsls	r3, r3, #4
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	4413      	add	r3, r2
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800aac8:	b084      	sub	sp, #16
 800aaca:	b590      	push	{r4, r7, lr}
 800aacc:	b083      	sub	sp, #12
 800aace:	af00      	add	r7, sp, #0
 800aad0:	f107 0418 	add.w	r4, r7, #24
 800aad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800aad8:	2314      	movs	r3, #20
 800aada:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800aae2:	f7ff fc30 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800aaec:	f7ff fc2b 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	607b      	str	r3, [r7, #4]
 800aaf4:	e02c      	b.n	800ab50 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	f107 0018 	add.w	r0, r7, #24
 800aafc:	f7ff ffc3 	bl	800aa86 <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	3b01      	subs	r3, #1
 800ab08:	4619      	mov	r1, r3
 800ab0a:	f001 fa66 	bl	800bfda <_ZNKSt5arrayIfLj20EEixEj>
 800ab0e:	4604      	mov	r4, r0
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800ab16:	f7ff f9dc 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800ab20:	2101      	movs	r1, #1
 800ab22:	f107 0018 	add.w	r0, r7, #24
 800ab26:	f7ff ffae 	bl	800aa86 <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	3b01      	subs	r3, #1
 800ab32:	4619      	mov	r1, r3
 800ab34:	f001 fa51 	bl	800bfda <_ZNKSt5arrayIfLj20EEixEj>
 800ab38:	4604      	mov	r4, r0
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800ab40:	f7ff f9c7 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800ab44:	4602      	mov	r2, r0
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	607b      	str	r3, [r7, #4]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d3ce      	bcc.n	800aaf6 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800ab58:	bf00      	nop
 800ab5a:	bf00      	nop
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ab64:	b004      	add	sp, #16
 800ab66:	4770      	bx	lr

0800ab68 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 f805 	bl	800ab86 <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>
 800ab7c:	4603      	mov	r3, r0
      }
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	4413      	add	r3, r2
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800aba4:	b590      	push	{r4, r7, lr}
 800aba6:	b089      	sub	sp, #36	@ 0x24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	eeb0 6a40 	vmov.f32	s12, s0
 800abae:	eef0 6a60 	vmov.f32	s13, s1
 800abb2:	eeb0 7a41 	vmov.f32	s14, s2
 800abb6:	eef0 7a61 	vmov.f32	s15, s3
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
 800abbe:	ed87 6a02 	vstr	s12, [r7, #8]
 800abc2:	edc7 6a03 	vstr	s13, [r7, #12]
 800abc6:	ed87 7a04 	vstr	s14, [r7, #16]
 800abca:	edc7 7a05 	vstr	s15, [r7, #20]
        size_t n = wav[0].size();
 800abce:	2302      	movs	r3, #2
 800abd0:	61bb      	str	r3, [r7, #24]
        h.resize(n);
 800abd2:	69b9      	ldr	r1, [r7, #24]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff fbb6 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800abda:	69b9      	ldr	r1, [r7, #24]
 800abdc:	6838      	ldr	r0, [r7, #0]
 800abde:	f7ff fbb2 	bl	800a346 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800abe2:	2300      	movs	r3, #0
 800abe4:	61fb      	str	r3, [r7, #28]
 800abe6:	e02c      	b.n	800ac42 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x9e>
            h[i] = wav[0][n - i - 1];
 800abe8:	f107 0308 	add.w	r3, r7, #8
 800abec:	2100      	movs	r1, #0
 800abee:	4618      	mov	r0, r3
 800abf0:	f7ff ffba 	bl	800ab68 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800abf4:	69ba      	ldr	r2, [r7, #24]
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	3b01      	subs	r3, #1
 800abfc:	4619      	mov	r1, r3
 800abfe:	f001 f9fb 	bl	800bff8 <_ZNKSt5arrayIfLj2EEixEj>
 800ac02:	4604      	mov	r4, r0
 800ac04:	69f9      	ldr	r1, [r7, #28]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff f963 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800ac12:	f107 0308 	add.w	r3, r7, #8
 800ac16:	2101      	movs	r1, #1
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff ffa5 	bl	800ab68 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800ac1e:	69ba      	ldr	r2, [r7, #24]
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	3b01      	subs	r3, #1
 800ac26:	4619      	mov	r1, r3
 800ac28:	f001 f9e6 	bl	800bff8 <_ZNKSt5arrayIfLj2EEixEj>
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	69f9      	ldr	r1, [r7, #28]
 800ac30:	6838      	ldr	r0, [r7, #0]
 800ac32:	f7ff f94e 	bl	8009ed2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800ac36:	4602      	mov	r2, r0
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	61fb      	str	r3, [r7, #28]
 800ac42:	69fa      	ldr	r2, [r7, #28]
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d3ce      	bcc.n	800abe8 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x44>
    }
 800ac4a:	bf00      	nop
 800ac4c:	bf00      	nop
 800ac4e:	3724      	adds	r7, #36	@ 0x24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd90      	pop	{r4, r7, pc}

0800ac54 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f001 f9d9 	bl	800c016 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>:
      push_back(const value_type& __x)
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d00c      	beq.n	800ac9e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f001 f9d6 	bl	800c03e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	    ++this->_M_impl._M_finish;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	1d1a      	adds	r2, r3, #4
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	605a      	str	r2, [r3, #4]
      }
 800ac9c:	e008      	b.n	800acb0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff f89d 	bl	8009dde <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800aca4:	4603      	mov	r3, r0
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f001 f9da 	bl	800c064 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>:

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800acc2:	6838      	ldr	r0, [r7, #0]
 800acc4:	f001 fa8a 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800acc8:	4603      	mov	r3, r0
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f001 fa90 	bl	800c1f2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>
 800acd2:	bf00      	nop
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>:
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      void
      clear() _GLIBCXX_NOEXCEPT
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f001 f8dd 	bl	800bea8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
 800acee:	bf00      	nop
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f001 fa6b 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ad06:	4603      	mov	r3, r0
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800ad0c:	6838      	ldr	r0, [r7, #0]
 800ad0e:	f001 fa65 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ad12:	4603      	mov	r3, r0
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800ad1a:	f107 030c 	add.w	r3, r7, #12
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f001 fa5c 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ad24:	4603      	mov	r3, r0
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	601a      	str	r2, [r3, #0]
    }
 800ad2c:	bf00      	nop
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>:
      _S_use_relocate()
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 f805 	bl	800ad4a <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800ad40:	4603      	mov	r3, r0
      }
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800ad4a:	b480      	push	{r7}
 800ad4c:	b083      	sub	sp, #12
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800ad52:	2301      	movs	r3, #1
      }
 800ad54:	4618      	mov	r0, r3
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
 800ad60:	b5b0      	push	{r4, r5, r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f001 fa6f 	bl	800c24e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800ad70:	4602      	mov	r2, r0
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	4293      	cmp	r3, r2
 800ad76:	bf8c      	ite	hi
 800ad78:	2301      	movhi	r3, #1
 800ad7a:	2300      	movls	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 800ad82:	4836      	ldr	r0, [pc, #216]	@ (800ae5c <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xfc>)
 800ad84:	f00f f9b9 	bl	801a0fa <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f001 fa71 	bl	800c270 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	4293      	cmp	r3, r2
 800ad94:	bf8c      	ite	hi
 800ad96:	2301      	movhi	r3, #1
 800ad98:	2300      	movls	r3, #0
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d059      	beq.n	800ae54 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xf4>
	{
	  const size_type __old_size = size();
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7fe fef9 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800ada6:	60b8      	str	r0, [r7, #8]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800ada8:	f7ff ffc4 	bl	800ad34 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d014      	beq.n	800addc <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x7c>
	    {
	      __tmp = this->_M_allocate(__n);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6839      	ldr	r1, [r7, #0]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f001 fa6a 	bl	800c290 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800adbc:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681c      	ldr	r4, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fc93 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800adce:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	4629      	mov	r1, r5
 800add4:	4620      	mov	r0, r4
 800add6:	f001 fa6f 	bl	800c2b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800adda:	e01f      	b.n	800ae1c <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xbc>
	    }
	  else
#endif
	    {
	      __tmp = _M_allocate_and_copy(__n,
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 fa7d 	bl	800c2e0 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800ade6:	4604      	mov	r4, r0
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	4618      	mov	r0, r3
 800adee:	f001 fa77 	bl	800c2e0 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800adf2:	4603      	mov	r3, r0
 800adf4:	4622      	mov	r2, r4
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fa80 	bl	800c2fe <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>
 800adfe:	60f8      	str	r0, [r7, #12]
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681c      	ldr	r4, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fc72 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800ae10:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ae12:	461a      	mov	r2, r3
 800ae14:	4629      	mov	r1, r5
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 fc77 	bl	800b70a <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f000 fc86 	bl	800b740 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	441a      	add	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	441a      	add	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	609a      	str	r2, [r3, #8]
	}
    }
 800ae54:	bf00      	nop
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bdb0      	pop	{r4, r5, r7, pc}
 800ae5c:	0802192c 	.word	0x0802192c

0800ae60 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>:
	vector(_InputIterator __first, _InputIterator __last,
 800ae60:	b5b0      	push	{r4, r5, r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
	: _Base(__a)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 fa5f 	bl	800c336 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>
	  _M_range_initialize(__first, __last,
 800ae78:	68bc      	ldr	r4, [r7, #8]
			      std::__iterator_category(__first));
 800ae7a:	f107 0308 	add.w	r3, r7, #8
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 fa68 	bl	800c354 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
	  _M_range_initialize(__first, __last,
 800ae84:	462b      	mov	r3, r5
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	4621      	mov	r1, r4
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f001 fa6d 	bl	800c36a <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>
	}
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4618      	mov	r0, r3
 800ae94:	3718      	adds	r7, #24
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bdb0      	pop	{r4, r5, r7, pc}

0800ae9a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>:
      vector(initializer_list<value_type> __l,
 800ae9a:	b5b0      	push	{r4, r5, r7, lr}
 800ae9c:	b086      	sub	sp, #24
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	1d38      	adds	r0, r7, #4
 800aea4:	e880 0006 	stmia.w	r0, {r1, r2}
 800aea8:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f001 fab2 	bl	800c418 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
 800aeb4:	1d3b      	adds	r3, r7, #4
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f001 fa90 	bl	800c3dc <_ZNKSt16initializer_listIiE5beginEv>
 800aebc:	4604      	mov	r4, r0
 800aebe:	1d3b      	adds	r3, r7, #4
 800aec0:	4618      	mov	r0, r3
 800aec2:	f001 fa97 	bl	800c3f4 <_ZNKSt16initializer_listIiE3endEv>
 800aec6:	4602      	mov	r2, r0
 800aec8:	462b      	mov	r3, r5
 800aeca:	4621      	mov	r1, r4
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f001 fab2 	bl	800c436 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>
      }
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	4618      	mov	r0, r3
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bdb0      	pop	{r4, r5, r7, pc}

0800aedc <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	f107 030c 	add.w	r3, r7, #12
 800aeea:	4611      	mov	r1, r2
 800aeec:	4618      	mov	r0, r3
 800aeee:	f001 fadb 	bl	800c4a8 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	1d1a      	adds	r2, r3, #4
 800af08:	f107 030c 	add.w	r3, r7, #12
 800af0c:	4611      	mov	r1, r2
 800af0e:	4618      	mov	r0, r3
 800af10:	f001 faca 	bl	800c4a8 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800af1e:	b590      	push	{r4, r7, lr}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f001 facd 	bl	800c4c8 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800af2e:	4603      	mov	r3, r0
 800af30:	681c      	ldr	r4, [r3, #0]
 800af32:	6838      	ldr	r0, [r7, #0]
 800af34:	f001 fac8 	bl	800c4c8 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800af38:	4603      	mov	r3, r0
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	429c      	cmp	r4, r3
 800af3e:	bf14      	ite	ne
 800af40:	2301      	movne	r3, #1
 800af42:	2300      	moveq	r3, #0
 800af44:	b2db      	uxtb	r3, r3
 800af46:	4618      	mov	r0, r3
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd90      	pop	{r4, r7, pc}

0800af4e <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800af4e:	b480      	push	{r7}
 800af50:	b083      	sub	sp, #12
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
	++_M_current;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	1d1a      	adds	r2, r3, #4
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	601a      	str	r2, [r3, #0]
	return *this;
 800af60:	687b      	ldr	r3, [r7, #4]
      }
 800af62:	4618      	mov	r0, r3
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4618      	mov	r0, r3
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	461a      	mov	r2, r3
 800af92:	2300      	movs	r3, #0
 800af94:	6013      	str	r3, [r2, #0]
 800af96:	6053      	str	r3, [r2, #4]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	609a      	str	r2, [r3, #8]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	461a      	mov	r2, r3
 800afb8:	2300      	movs	r3, #0
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	6053      	str	r3, [r2, #4]
 800afbe:	6093      	str	r3, [r2, #8]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff ffdf 	bl	800af86 <_ZNSt14_Function_baseC1Ev>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	60da      	str	r2, [r3, #12]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4618      	mov	r0, r3
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800afe2:	6838      	ldr	r0, [r7, #0]
 800afe4:	f001 fa7b 	bl	800c4de <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800afe8:	4602      	mov	r2, r0
 800afea:	f107 0308 	add.w	r3, r7, #8
 800afee:	4611      	mov	r1, r2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f001 fa7f 	bl	800c4f4 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>
 800aff6:	f107 0308 	add.w	r3, r7, #8
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 fa8d 	bl	800b51c <_ZNSt8functionIFijjPfEE4swapERS2_>
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	4618      	mov	r0, r3
 800b008:	f7fc f986 	bl	8007318 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800b00c:	687b      	ldr	r3, [r7, #4]
	}
 800b00e:	4618      	mov	r0, r3
 800b010:	3718      	adds	r7, #24
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 800b016:	b580      	push	{r7, lr}
 800b018:	b086      	sub	sp, #24
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800b020:	6838      	ldr	r0, [r7, #0]
 800b022:	f001 fa99 	bl	800c558 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800b026:	4602      	mov	r2, r0
 800b028:	f107 0308 	add.w	r3, r7, #8
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f001 fa9e 	bl	800c570 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>
 800b034:	f107 0308 	add.w	r3, r7, #8
 800b038:	6879      	ldr	r1, [r7, #4]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fa6e 	bl	800b51c <_ZNSt8functionIFijjPfEE4swapERS2_>
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	4618      	mov	r0, r3
 800b046:	f7fc f967 	bl	8007318 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800b04a:	687b      	ldr	r3, [r7, #4]
	}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	4611      	mov	r1, r2
 800b064:	4618      	mov	r0, r3
 800b066:	f001 fab3 	bl	800c5d0 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>:
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	_GLIBCXX23_CONSTEXPR
	explicit
	unique_ptr(_Up __p) noexcept
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	4618      	mov	r0, r3
 800b084:	f7ff ffe6 	bl	800b054 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>
        { }
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4618      	mov	r0, r3
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:

      /// Destructor, invokes the deleter if the stored pointer is not null.
#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~unique_ptr()
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f001 faab 	bl	800c5f8 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800b0a2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d009      	beq.n	800b0c0 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 fab0 	bl	800c612 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4610      	mov	r0, r2
 800b0bc:	f001 fab6 	bl	800c62c <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>
	__ptr = pointer();
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
      }
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f001 fab5 	bl	800c64a <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f001 fab3 	bl	800c666 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4618      	mov	r0, r3
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	4618      	mov	r0, r3
 800b11a:	f7ff ffe6 	bl	800b0ea <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4618      	mov	r0, r3
 800b134:	f001 faab 	bl	800c68e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800b138:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00c      	beq.n	800b15c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 fab0 	bl	800c6a8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>
 800b148:	4604      	mov	r4, r0
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f001 fab9 	bl	800c6c2 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>
 800b150:	4603      	mov	r3, r0
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	4620      	mov	r0, r4
 800b158:	f001 fabe 	bl	800c6d8 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
	__ptr = pointer();
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]
      }
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4618      	mov	r0, r3
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd90      	pop	{r4, r7, pc}

0800b16c <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4618      	mov	r0, r3
 800b178:	f001 fac1 	bl	800c6fe <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800b17c:	4603      	mov	r3, r0
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b186:	b480      	push	{r7}
 800b188:	b083      	sub	sp, #12
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	da01      	bge.n	800b1a0 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	e000      	b.n	800b1a2 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800b1a0:	687b      	ldr	r3, [r7, #4]
    }
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b1ae:	b480      	push	{r7}
 800b1b0:	b083      	sub	sp, #12
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	da01      	bge.n	800b1c8 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	e000      	b.n	800b1ca <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800b1c8:	687b      	ldr	r3, [r7, #4]
    }
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b1d6:	b480      	push	{r7}
 800b1d8:	b083      	sub	sp, #12
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d201      	bcs.n	800b1f0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	e000      	b.n	800b1f2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b1f0:	687b      	ldr	r3, [r7, #4]
    }
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800b1fe:	b480      	push	{r7}
 800b200:	b087      	sub	sp, #28
 800b202:	af00      	add	r7, sp, #0
 800b204:	6178      	str	r0, [r7, #20]
 800b206:	6139      	str	r1, [r7, #16]
 800b208:	60fa      	str	r2, [r7, #12]
 800b20a:	60bb      	str	r3, [r7, #8]
 800b20c:	ed87 0a01 	vstr	s0, [r7, #4]
 800b210:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b214:	f06f 0314 	mvn.w	r3, #20
}
 800b218:	4618      	mov	r0, r3
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6178      	str	r0, [r7, #20]
 800b22c:	6139      	str	r1, [r7, #16]
 800b22e:	60fa      	str	r2, [r7, #12]
 800b230:	60bb      	str	r3, [r7, #8]
 800b232:	ed87 0a01 	vstr	s0, [r7, #4]
 800b236:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b23a:	f06f 0314 	mvn.w	r3, #20
}
 800b23e:	4618      	mov	r0, r3
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800b24a:	b480      	push	{r7}
 800b24c:	b087      	sub	sp, #28
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6178      	str	r0, [r7, #20]
 800b252:	6139      	str	r1, [r7, #16]
 800b254:	60fa      	str	r2, [r7, #12]
 800b256:	ed87 0a02 	vstr	s0, [r7, #8]
 800b25a:	edc7 0a01 	vstr	s1, [r7, #4]
 800b25e:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b260:	f06f 0314 	mvn.w	r3, #20
}
 800b264:	4618      	mov	r0, r3
 800b266:	371c      	adds	r7, #28
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800b270:	b480      	push	{r7}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	6178      	str	r0, [r7, #20]
 800b278:	6139      	str	r1, [r7, #16]
 800b27a:	60fa      	str	r2, [r7, #12]
 800b27c:	ed87 0a02 	vstr	s0, [r7, #8]
 800b280:	edc7 0a01 	vstr	s1, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b286:	f06f 0314 	mvn.w	r3, #20
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	371c      	adds	r7, #28
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800b296:	b480      	push	{r7}
 800b298:	b087      	sub	sp, #28
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6178      	str	r0, [r7, #20]
 800b29e:	6139      	str	r1, [r7, #16]
 800b2a0:	60fa      	str	r2, [r7, #12]
 800b2a2:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2a6:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2aa:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b2ac:	f06f 0314 	mvn.w	r3, #20
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	371c      	adds	r7, #28
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800b2bc:	b480      	push	{r7}
 800b2be:	b087      	sub	sp, #28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6178      	str	r0, [r7, #20]
 800b2c4:	6139      	str	r1, [r7, #16]
 800b2c6:	60fa      	str	r2, [r7, #12]
 800b2c8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2cc:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2d0:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b2d2:	f06f 0314 	mvn.w	r3, #20
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:

/**
 * Fill the result structure from a quantized output tensor
*/
template<typename T>
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800b2e2:	b480      	push	{r7}
 800b2e4:	b087      	sub	sp, #28
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6178      	str	r0, [r7, #20]
 800b2ea:	6139      	str	r1, [r7, #16]
 800b2ec:	60fa      	str	r2, [r7, #12]
 800b2ee:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2f2:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2f6:	603b      	str	r3, [r7, #0]
                                                                                      size_t output_features_count,
                                                                                      bool debug = false) {
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, zero_point, scale, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b2f8:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	371c      	adds	r7, #28
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800b308:	b480      	push	{r7}
 800b30a:	b087      	sub	sp, #28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6178      	str	r0, [r7, #20]
 800b310:	6139      	str	r1, [r7, #16]
 800b312:	60fa      	str	r2, [r7, #12]
 800b314:	ed87 0a02 	vstr	s0, [r7, #8]
 800b318:	edc7 0a01 	vstr	s1, [r7, #4]
 800b31c:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b31e:	f06f 0314 	mvn.w	r3, #20
}
 800b322:	4618      	mov	r0, r3
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 800b32e:	b580      	push	{r7, lr}
 800b330:	b082      	sub	sp, #8
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4618      	mov	r0, r3
 800b33a:	f001 f9ee 	bl	800c71a <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b33e:	4603      	mov	r3, r0
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4618      	mov	r0, r3
 800b354:	f001 f9ef 	bl	800c736 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b362:	b580      	push	{r7, lr}
 800b364:	b082      	sub	sp, #8
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff ffeb 	bl	800b348 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4618      	mov	r0, r3
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	: _M_t()
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff ffe8 	bl	800b362 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>
	{ }
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4618      	mov	r0, r3
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800b3a6:	6838      	ldr	r0, [r7, #0]
 800b3a8:	f001 f9f2 	bl	800c790 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f001 f9cd 	bl	800c750 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800b3b6:	6838      	ldr	r0, [r7, #0]
 800b3b8:	f001 f9ff 	bl	800c7ba <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f001 fa08 	bl	800c7d4 <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f001 f9f8 	bl	800c7ba <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
	return *this;
 800b3ca:	687b      	ldr	r3, [r7, #4]
      }
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>:
#endif

      template<typename _Up>
	_GLIBCXX20_CONSTEXPR
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 800b3ec:	b590      	push	{r4, r7, lr}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800b3f6:	687c      	ldr	r4, [r7, #4]
 800b3f8:	f107 030c 	add.w	r3, r7, #12
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f001 f9f3 	bl	800c7ea <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 800b404:	f107 030c 	add.w	r3, r7, #12
 800b408:	4619      	mov	r1, r3
 800b40a:	4620      	mov	r0, r4
 800b40c:	f001 f9f9 	bl	800c802 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4618      	mov	r0, r3
 800b414:	3714      	adds	r7, #20
 800b416:	46bd      	mov	sp, r7
 800b418:	bd90      	pop	{r4, r7, pc}

0800b41a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b082      	sub	sp, #8
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 f9fb 	bl	800c81e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
      _M_initialize(size_type __n)
 800b432:	b590      	push	{r4, r7, lr}
 800b434:	b089      	sub	sp, #36	@ 0x24
 800b436:	af00      	add	r7, sp, #0
 800b438:	60f8      	str	r0, [r7, #12]
 800b43a:	60b9      	str	r1, [r7, #8]
	if (__n)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d02f      	beq.n	800b4a2 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x70>
	    _Bit_pointer __q = this->_M_allocate(__n);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	68b9      	ldr	r1, [r7, #8]
 800b446:	4618      	mov	r0, r3
 800b448:	f001 fa0e 	bl	800c868 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 800b44c:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 800b44e:	68b8      	ldr	r0, [r7, #8]
 800b450:	f001 fa1e 	bl	800c890 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800b454:	4603      	mov	r3, r0
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	69fa      	ldr	r2, [r7, #28]
 800b45a:	441a      	add	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 800b460:	69f8      	ldr	r0, [r7, #28]
 800b462:	f001 fa22 	bl	800c8aa <_ZSt11__addressofImEPT_RS0_>
 800b466:	4601      	mov	r1, r0
 800b468:	f107 0314 	add.w	r3, r7, #20
 800b46c:	2200      	movs	r2, #0
 800b46e:	4618      	mov	r0, r3
 800b470:	f7f6 f822 	bl	80014b8 <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	461a      	mov	r2, r3
 800b478:	f107 0314 	add.w	r3, r7, #20
 800b47c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b480:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	68fc      	ldr	r4, [r7, #12]
 800b488:	463b      	mov	r3, r7
 800b48a:	f107 0114 	add.w	r1, r7, #20
 800b48e:	4618      	mov	r0, r3
 800b490:	f7f6 f85e 	bl	8001550 <_ZStplRKSt13_Bit_iteratori>
 800b494:	f104 0308 	add.w	r3, r4, #8
 800b498:	463a      	mov	r2, r7
 800b49a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b49e:	e883 0003 	stmia.w	r3, {r0, r1}
      }
 800b4a2:	bf00      	nop
 800b4a4:	3724      	adds	r7, #36	@ 0x24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd90      	pop	{r4, r7, pc}

0800b4aa <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:
      _M_initialize_value(bool __x) _GLIBCXX_NOEXCEPT
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	70fb      	strb	r3, [r7, #3]
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00d      	beq.n	800b4de <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x34>
	  __fill_bvector_n(__p, this->_M_impl._M_end_addr() - __p, __x);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f001 f9fb 	bl	800c8c0 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	109b      	asrs	r3, r3, #2
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	78fb      	ldrb	r3, [r7, #3]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f7f6 f84e 	bl	800157a <_ZSt16__fill_bvector_nPmjb>
      }
 800b4de:	bf00      	nop
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b082      	sub	sp, #8
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7f5 ffdd 	bl	80014b8 <_ZNSt13_Bit_iteratorC1EPmj>
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800b506:	b480      	push	{r7}
 800b508:	b083      	sub	sp, #12
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4618      	mov	r0, r3
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	4611      	mov	r1, r2
 800b52c:	4618      	mov	r0, r3
 800b52e:	f001 f9dd 	bl	800c8ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f103 0208 	add.w	r2, r3, #8
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	3308      	adds	r3, #8
 800b53c:	4619      	mov	r1, r3
 800b53e:	4610      	mov	r0, r2
 800b540:	f001 f9fb 	bl	800c93a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f103 020c 	add.w	r2, r3, #12
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	330c      	adds	r3, #12
 800b54e:	4619      	mov	r1, r3
 800b550:	4610      	mov	r0, r2
 800b552:	f001 fa11 	bl	800c978 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800b556:	bf00      	nop
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b55e:	b480      	push	{r7}
 800b560:	b083      	sub	sp, #12
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 800b574:	b590      	push	{r4, r7, lr}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800b580:	68fc      	ldr	r4, [r7, #12]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 fa17 	bl	800c9b6 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b588:	4602      	mov	r2, r0
 800b58a:	f107 0308 	add.w	r3, r7, #8
 800b58e:	4619      	mov	r1, r3
 800b590:	4620      	mov	r0, r4
 800b592:	f001 fa1b 	bl	800c9cc <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd90      	pop	{r4, r7, pc}

0800b5a0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f001 fa27 	bl	800c9fe <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f001 fa27 	bl	800ca18 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff ffd3 	bl	800b5a0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ffcd 	bl	800b5a0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b606:	4602      	mov	r2, r0
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d006      	beq.n	800b620 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f001 fa00 	bl	800ca18 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b618:	4603      	mov	r3, r0
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	4798      	blx	r3
      }
 800b620:	bf00      	nop
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4618      	mov	r0, r3
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4618      	mov	r0, r3
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
	...

0800b660 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b66a:	f107 030c 	add.w	r3, r7, #12
 800b66e:	4618      	mov	r0, r3
 800b670:	f001 f9df 	bl	800ca32 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800b674:	4602      	mov	r2, r0
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4293      	cmp	r3, r2
 800b67a:	bf8c      	ite	hi
 800b67c:	2301      	movhi	r3, #1
 800b67e:	2300      	movls	r3, #0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b00      	cmp	r3, #0
 800b684:	d002      	beq.n	800b68c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b686:	4804      	ldr	r0, [pc, #16]	@ (800b698 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b688:	f00e fd37 	bl	801a0fa <_ZSt20__throw_length_errorPKc>
	return __n;
 800b68c:	687b      	ldr	r3, [r7, #4]
      }
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	0802193c 	.word	0x0802193c

0800b69c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6879      	ldr	r1, [r7, #4]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f001 f9da 	bl	800ca66 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800b6b2:	68b9      	ldr	r1, [r7, #8]
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f001 f9e4 	bl	800ca82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 800b6c4:	b590      	push	{r4, r7, lr}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 f80d 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800b6da:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b6dc:	461a      	mov	r2, r3
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f001 f9e9 	bl	800cab8 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800b6e6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	605a      	str	r2, [r3, #4]
      }
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd90      	pop	{r4, r7, pc}

0800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4618      	mov	r0, r3
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>:
   */

  template<typename _ForwardIterator, typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	60f8      	str	r0, [r7, #12]
 800b712:	60b9      	str	r1, [r7, #8]
 800b714:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 800b716:	e00a      	b.n	800b72e <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0x24>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f001 f9ec 	bl	800caf6 <_ZSt11__addressofIfEPT_RS0_>
 800b71e:	4603      	mov	r3, r0
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 f9f2 	bl	800cb0c <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3304      	adds	r3, #4
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	429a      	cmp	r2, r3
 800b734:	d1f0      	bne.n	800b718 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0xe>
					      std::__addressof(*__first));
#endif
    }
 800b736:	bf00      	nop
 800b738:	bf00      	nop
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
	if (__p)
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d005      	beq.n	800b75e <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	68b9      	ldr	r1, [r7, #8]
 800b758:	4618      	mov	r0, r3
 800b75a:	f001 f9e5 	bl	800cb28 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>
      }
 800b75e:	bf00      	nop
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b766:	b480      	push	{r7}
 800b768:	b083      	sub	sp, #12
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4618      	mov	r0, r3
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4618      	mov	r0, r3
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b79c:	b5b0      	push	{r4, r5, r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800b7a8:	f107 0208 	add.w	r2, r7, #8
 800b7ac:	f107 030c 	add.w	r3, r7, #12
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fb24 	bl	8009e00 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d017      	beq.n	800b7ee <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800b7be:	f107 020c 	add.w	r2, r7, #12
 800b7c2:	f107 0308 	add.w	r3, r7, #8
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f001 f9e1 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7f5 fd5c 	bl	800128e <_ZSt4__lgi>
 800b7d6:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800b7d8:	005a      	lsls	r2, r3, #1
 800b7da:	462b      	mov	r3, r5
 800b7dc:	68b9      	ldr	r1, [r7, #8]
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f001 f9eb 	bl	800cbba <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	68b9      	ldr	r1, [r7, #8]
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f001 fa1d 	bl	800cc28 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bdb0      	pop	{r4, r5, r7, pc}

0800b7f6 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b086      	sub	sp, #24
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	60b9      	str	r1, [r7, #8]
 800b800:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return __first;
 800b802:	f107 0208 	add.w	r2, r7, #8
 800b806:	f107 030c 	add.w	r3, r7, #12
 800b80a:	4611      	mov	r1, r2
 800b80c:	4618      	mov	r0, r3
 800b80e:	f001 fa43 	bl	800cc98 <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	e01d      	b.n	800b858 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b820:	e00a      	b.n	800b838 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__result, __first))
 800b822:	1d3b      	adds	r3, r7, #4
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	6979      	ldr	r1, [r7, #20]
 800b828:	4618      	mov	r0, r3
 800b82a:	f001 fa4d 	bl	800ccc8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d001      	beq.n	800b838 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b838:	f107 030c 	add.w	r3, r7, #12
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fe fba6 	bl	8009f8e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b842:	4602      	mov	r2, r0
 800b844:	f107 0308 	add.w	r3, r7, #8
 800b848:	4619      	mov	r1, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	f7fe fb87 	bl	8009f5e <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1e5      	bne.n	800b822 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800b856:	697b      	ldr	r3, [r7, #20]
    }
 800b858:	4618      	mov	r0, r3
 800b85a:	3718      	adds	r7, #24
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b86a:	f107 030c 	add.w	r3, r7, #12
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fa4f 	bl	800cd12 <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>
 800b874:	4602      	mov	r2, r0
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4293      	cmp	r3, r2
 800b87a:	bf8c      	ite	hi
 800b87c:	2301      	movhi	r3, #1
 800b87e:	2300      	movls	r3, #0
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b886:	4804      	ldr	r0, [pc, #16]	@ (800b898 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b888:	f00e fc37 	bl	801a0fa <_ZSt20__throw_length_errorPKc>
	return __n;
 800b88c:	687b      	ldr	r3, [r7, #4]
      }
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	0802193c 	.word	0x0802193c

0800b89c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	60f8      	str	r0, [r7, #12]
 800b8ba:	60b9      	str	r1, [r7, #8]
 800b8bc:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800b8be:	e00a      	b.n	800b8d6 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f001 fa4e 	bl	800cd62 <_ZSt11__addressofIiEPT_RS0_>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f001 fa54 	bl	800cd78 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d1f0      	bne.n	800b8c0 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0xe>
    }
 800b8de:	bf00      	nop
 800b8e0:	bf00      	nop
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
	if (__p)
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d005      	beq.n	800b906 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	68b9      	ldr	r1, [r7, #8]
 800b900:	4618      	mov	r0, r3
 800b902:	f001 fa47 	bl	800cd94 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>
      }
 800b906:	bf00      	nop
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800b924:	b590      	push	{r4, r7, lr}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f001 fa40 	bl	800cdb2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>
 800b932:	bf00      	nop
 800b934:	4620      	mov	r0, r4
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd90      	pop	{r4, r7, pc}

0800b93c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b93c:	b590      	push	{r4, r7, lr}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
 800b948:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __first != __last; ++__first, (void)++__cur)
 800b94e:	e016      	b.n	800b97e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800b950:	6978      	ldr	r0, [r7, #20]
 800b952:	f001 f8d0 	bl	800caf6 <_ZSt11__addressofIfEPT_RS0_>
 800b956:	4604      	mov	r4, r0
 800b958:	f107 030c 	add.w	r3, r7, #12
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fe fb26 	bl	8009fae <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b962:	4603      	mov	r3, r0
 800b964:	461a      	mov	r2, r3
 800b966:	4621      	mov	r1, r4
 800b968:	6838      	ldr	r0, [r7, #0]
 800b96a:	f000 fb68 	bl	800c03e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800b96e:	f107 030c 	add.w	r3, r7, #12
 800b972:	4618      	mov	r0, r3
 800b974:	f7fe fb0b 	bl	8009f8e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	3304      	adds	r3, #4
 800b97c:	617b      	str	r3, [r7, #20]
 800b97e:	f107 0208 	add.w	r2, r7, #8
 800b982:	f107 030c 	add.w	r3, r7, #12
 800b986:	4611      	mov	r1, r2
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fe fae8 	bl	8009f5e <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1dd      	bne.n	800b950 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x14>
	  return __cur;
 800b994:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__result, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800b996:	4618      	mov	r0, r3
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd90      	pop	{r4, r7, pc}

0800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	605a      	str	r2, [r3, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	609a      	str	r2, [r3, #8]
	{ }
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	607a      	str	r2, [r7, #4]
	if (__p)
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d005      	beq.n	800ba10 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	68b9      	ldr	r1, [r7, #8]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f001 f9de 	bl	800cdcc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 800ba10:	bf00      	nop
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4618      	mov	r0, r3
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	60f8      	str	r0, [r7, #12]
 800ba36:	60b9      	str	r1, [r7, #8]
 800ba38:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800ba3a:	e00a      	b.n	800ba52 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f001 f9d4 	bl	800cdea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800ba42:	4603      	mov	r3, r0
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f001 f9da 	bl	800ce00 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	3308      	adds	r3, #8
 800ba50:	60fb      	str	r3, [r7, #12]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d1f0      	bne.n	800ba3c <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xe>
    }
 800ba5a:	bf00      	nop
 800ba5c:	bf00      	nop
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 f9d3 	bl	800ce1c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ba76:	4603      	mov	r3, r0
 800ba78:	461a      	mov	r2, r3
 800ba7a:	68b9      	ldr	r1, [r7, #8]
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f001 f9d8 	bl	800ce32 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 800ba82:	bf00      	nop
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 f805 	bl	800baa0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800ba96:	4603      	mov	r3, r0
      }
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800baa8:	2301      	movs	r3, #1
      }
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
	...

0800bab8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800bab8:	b5b0      	push	{r4, r5, r7, lr}
 800baba:	b08c      	sub	sp, #48	@ 0x30
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800bac4:	4a59      	ldr	r2, [pc, #356]	@ (800bc2c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 800bac6:	2101      	movs	r1, #1
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f001 f9cb 	bl	800ce64 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 800bace:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f7fe fbce 	bl	800a27e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 800bae2:	4603      	mov	r3, r0
 800bae4:	617b      	str	r3, [r7, #20]
 800bae6:	f107 0214 	add.w	r2, r7, #20
 800baea:	f107 0308 	add.w	r3, r7, #8
 800baee:	4611      	mov	r1, r2
 800baf0:	4618      	mov	r0, r3
 800baf2:	f001 f9fe 	bl	800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800baf6:	4603      	mov	r3, r0
 800baf8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bafe:	4618      	mov	r0, r3
 800bb00:	f001 fa0c 	bl	800cf1c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 800bb04:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800bb0a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800bb10:	69ba      	ldr	r2, [r7, #24]
 800bb12:	18d5      	adds	r5, r2, r3
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f001 f981 	bl	800ce1c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	4629      	mov	r1, r5
 800bb20:	4620      	mov	r0, r4
 800bb22:	f7ff ff9f 	bl	800ba64 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800bb26:	2300      	movs	r3, #0
 800bb28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800bb2a:	f7ff ffae 	bl	800ba8a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d027      	beq.n	800bb84 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bb34:	f107 0308 	add.w	r3, r7, #8
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f001 fa17 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7ff ff67 	bl	800ba18 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bb4a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bb4c:	69ba      	ldr	r2, [r7, #24]
 800bb4e:	4621      	mov	r1, r4
 800bb50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb52:	f001 f9f7 	bl	800cf44 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800bb56:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 800bb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5a:	3308      	adds	r3, #8
 800bb5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bb5e:	f107 0308 	add.w	r3, r7, #8
 800bb62:	4618      	mov	r0, r3
 800bb64:	f001 fa02 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff ff52 	bl	800ba18 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bb74:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bb76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb78:	6a39      	ldr	r1, [r7, #32]
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f001 f9e2 	bl	800cf44 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800bb80:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bb82:	e026      	b.n	800bbd2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800bb84:	f107 0308 	add.w	r3, r7, #8
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f001 f9ef 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7ff ff3f 	bl	800ba18 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bb9a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800bb9c:	69ba      	ldr	r2, [r7, #24]
 800bb9e:	4621      	mov	r1, r4
 800bba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bba2:	f001 f9ee 	bl	800cf82 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800bba6:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 800bba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbaa:	3308      	adds	r3, #8
 800bbac:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800bbae:	f107 0308 	add.w	r3, r7, #8
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f001 f9da 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff ff2a 	bl	800ba18 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bbc4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800bbc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbc8:	6a39      	ldr	r1, [r7, #32]
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f001 f9d9 	bl	800cf82 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800bbd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800bbd2:	f7ff ff5a 	bl	800ba8a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	f083 0301 	eor.w	r3, r3, #1
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d009      	beq.n	800bbf6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7ff ff17 	bl	800ba18 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bbea:	4603      	mov	r3, r0
 800bbec:	461a      	mov	r2, r3
 800bbee:	6a39      	ldr	r1, [r7, #32]
 800bbf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbf2:	f7ff ff1c 	bl	800ba2e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800bbf6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800bc02:	461a      	mov	r2, r3
 800bc04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc06:	f7ff fef4 	bl	800b9f2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	69ba      	ldr	r2, [r7, #24]
 800bc0e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc14:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc18:	00db      	lsls	r3, r3, #3
 800bc1a:	69ba      	ldr	r2, [r7, #24]
 800bc1c:	441a      	add	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	609a      	str	r2, [r3, #8]
    }
 800bc22:	bf00      	nop
 800bc24:	3730      	adds	r7, #48	@ 0x30
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bdb0      	pop	{r4, r5, r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	08021970 	.word	0x08021970

0800bc30 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	601a      	str	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4618      	mov	r0, r3
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 800bc50:	b5b0      	push	{r4, r5, r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800bc58:	1d3b      	adds	r3, r7, #4
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f001 f9aa 	bl	800cfb4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 800bc60:	f107 030c 	add.w	r3, r7, #12
 800bc64:	4629      	mov	r1, r5
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 f9af 	bl	800cfca <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 800bc6c:	bf00      	nop
 800bc6e:	4620      	mov	r0, r4
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bdb0      	pop	{r4, r5, r7, pc}

0800bc76 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800bc82:	f107 0208 	add.w	r2, r7, #8
 800bc86:	f107 030c 	add.w	r3, r7, #12
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f001 f9aa 	bl	800cfe6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d017      	beq.n	800bcc8 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800bc98:	f107 020c 	add.w	r2, r7, #12
 800bc9c:	f107 0308 	add.w	r3, r7, #8
 800bca0:	4611      	mov	r1, r2
 800bca2:	4618      	mov	r0, r3
 800bca4:	f001 f925 	bl	800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7f5 faef 	bl	800128e <_ZSt4__lgi>
 800bcb0:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800bcb2:	005a      	lsls	r2, r3, #1
 800bcb4:	793b      	ldrb	r3, [r7, #4]
 800bcb6:	68b9      	ldr	r1, [r7, #8]
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f001 f9ac 	bl	800d016 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800bcbe:	793a      	ldrb	r2, [r7, #4]
 800bcc0:	68b9      	ldr	r1, [r7, #8]
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f001 f9de 	bl	800d084 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800bcc8:	bf00      	nop
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800bcdc:	f107 0208 	add.w	r2, r7, #8
 800bce0:	f107 030c 	add.w	r3, r7, #12
 800bce4:	4611      	mov	r1, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 ffd6 	bl	800cc98 <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
	return __first;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	e01d      	b.n	800bd32 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800bcfa:	e00a      	b.n	800bd12 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__first, __result))
 800bcfc:	1d3b      	adds	r3, r7, #4
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	68f9      	ldr	r1, [r7, #12]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 ffe0 	bl	800ccc8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800bd12:	f107 030c 	add.w	r3, r7, #12
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fe f939 	bl	8009f8e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	f107 0308 	add.w	r3, r7, #8
 800bd22:	4619      	mov	r1, r3
 800bd24:	4610      	mov	r0, r2
 800bd26:	f7fe f91a 	bl	8009f5e <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e5      	bne.n	800bcfc <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800bd30:	697b      	ldr	r3, [r7, #20]
    }
 800bd32:	4618      	mov	r0, r3
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b08b      	sub	sp, #44	@ 0x2c
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 80a7 	beq.w	800be9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x160>
	{
	  const size_type __size = size();
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7fd ff22 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800bd54:	6278      	str	r0, [r7, #36]	@ 0x24
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	109b      	asrs	r3, r3, #2
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800bd62:	623b      	str	r3, [r7, #32]

	  if (__size > max_size() || __navail > max_size() - __size)
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fa72 	bl	800c24e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d808      	bhi.n	800bd84 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x48>
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fa6b 	bl	800c24e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	6a3a      	ldr	r2, [r7, #32]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d901      	bls.n	800bd88 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4c>
 800bd84:	2301      	movs	r3, #1
 800bd86:	e000      	b.n	800bd8a <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4e>
 800bd88:	2300      	movs	r3, #0
 800bd8a:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 800bd8c:	6a3a      	ldr	r2, [r7, #32]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d30f      	bcc.n	800bdb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x78>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7ff fcaa 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bda0:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800bda2:	461a      	mov	r2, r3
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 fe86 	bl	800cab8 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800bdac:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800bdb2:	e073      	b.n	800be9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x160>
	      pointer __old_start = this->_M_impl._M_start;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	61fb      	str	r3, [r7, #28]
	      pointer __old_finish = this->_M_impl._M_finish;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	61bb      	str	r3, [r7, #24]
		_M_check_len(__n, "vector::_M_default_append");
 800bdc0:	4a38      	ldr	r2, [pc, #224]	@ (800bea4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x168>)
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f001 f995 	bl	800d0f4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800bdca:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6979      	ldr	r1, [r7, #20]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 fa5d 	bl	800c290 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800bdd6:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800bdd8:	f7fe ffac 	bl	800ad34 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d018      	beq.n	800be14 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0xd8>
		      std::__uninitialized_default_n_a(__new_start + __size,
 800bde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7ff fc81 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bdf2:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f000 fe5d 	bl	800cab8 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
			      __new_start, _M_get_Tp_allocator());
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fc77 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be06:	4603      	mov	r3, r0
		  _S_relocate(__old_start, __old_finish,
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	69b9      	ldr	r1, [r7, #24]
 800be0c:	69f8      	ldr	r0, [r7, #28]
 800be0e:	f000 fa53 	bl	800c2b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800be12:	e028      	b.n	800be66 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x12a>
		  pointer __destroy_from = pointer();
 800be14:	2300      	movs	r3, #0
 800be16:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 800be18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4618      	mov	r0, r3
 800be24:	f7ff fc66 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be28:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800be2a:	461a      	mov	r2, r3
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 fe42 	bl	800cab8 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
		      __destroy_from = __new_start + __size;
 800be34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	4413      	add	r3, r2
 800be3c:	60fb      	str	r3, [r7, #12]
			      __new_start, _M_get_Tp_allocator());
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	f7ff fc57 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be46:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 800be48:	693a      	ldr	r2, [r7, #16]
 800be4a:	69b9      	ldr	r1, [r7, #24]
 800be4c:	69f8      	ldr	r0, [r7, #28]
 800be4e:	f001 f998 	bl	800d182 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
				_M_get_Tp_allocator());
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4618      	mov	r0, r3
 800be56:	f7ff fc4d 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be5a:	4603      	mov	r3, r0
		  std::_Destroy(__old_start, __old_finish,
 800be5c:	461a      	mov	r2, r3
 800be5e:	69b9      	ldr	r1, [r7, #24]
 800be60:	69f8      	ldr	r0, [r7, #28]
 800be62:	f7ff fc52 	bl	800b70a <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	      _M_deallocate(__old_start,
 800be66:	6878      	ldr	r0, [r7, #4]
			    this->_M_impl._M_end_of_storage - __old_start);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	689a      	ldr	r2, [r3, #8]
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	109b      	asrs	r3, r3, #2
	      _M_deallocate(__old_start,
 800be72:	461a      	mov	r2, r3
 800be74:	69f9      	ldr	r1, [r7, #28]
 800be76:	f7ff fc63 	bl	800b740 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __new_start;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 800be80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	4413      	add	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	441a      	add	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	441a      	add	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	609a      	str	r2, [r3, #8]
    }
 800be9c:	bf00      	nop
 800be9e:	372c      	adds	r7, #44	@ 0x2c
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd90      	pop	{r4, r7, pc}
 800bea4:	0802198c 	.word	0x0802198c

0800bea8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800bea8:	b590      	push	{r4, r7, lr}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	685a      	ldr	r2, [r3, #4]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	109b      	asrs	r3, r3, #2
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00e      	beq.n	800bee2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4618      	mov	r0, r3
 800becc:	f7ff fc12 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bed0:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800bed2:	461a      	mov	r2, r3
 800bed4:	4621      	mov	r1, r4
 800bed6:	6838      	ldr	r0, [r7, #0]
 800bed8:	f7ff fc17 	bl	800b70a <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    this->_M_impl._M_finish = __pos;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	605a      	str	r2, [r3, #4]
      }
 800bee2:	bf00      	nop
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd90      	pop	{r4, r7, pc}

0800beea <_ZNKSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) const noexcept
 800beea:	b580      	push	{r7, lr}
 800beec:	b082      	sub	sp, #8
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	4618      	mov	r0, r3
 800befa:	f001 f95b 	bl	800d1b4 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800befe:	4603      	mov	r3, r0
      }
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <_ZNKSt5arrayIfLj10EEixEj>:
      operator[](size_type __n) const noexcept
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f001 f95b 	bl	800d1d2 <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>
 800bf1c:	4603      	mov	r3, r0
      }
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <_ZNKSt5arrayIfLj14EEixEj>:
      operator[](size_type __n) const noexcept
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b082      	sub	sp, #8
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f001 f95b 	bl	800d1f0 <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>
 800bf3a:	4603      	mov	r3, r0
      }
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <_ZNKSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) const noexcept
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f001 f95b 	bl	800d20e <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 800bf58:	4603      	mov	r3, r0
      }
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <_ZNKSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) const noexcept
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f001 f95b 	bl	800d22c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 800bf76:	4603      	mov	r3, r0
      }
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <_ZNKSt5arrayIfLj8EEixEj>:
      operator[](size_type __n) const noexcept
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 f95b 	bl	800d24a <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>
 800bf94:	4603      	mov	r3, r0
      }
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <_ZNKSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) const noexcept
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f001 f95b 	bl	800d268 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 800bfb2:	4603      	mov	r3, r0
      }
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <_ZNKSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) const noexcept
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f001 f95b 	bl	800d286 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800bfd0:	4603      	mov	r3, r0
      }
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <_ZNKSt5arrayIfLj20EEixEj>:
      operator[](size_type __n) const noexcept
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b082      	sub	sp, #8
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f001 f95b 	bl	800d2a4 <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>
 800bfee:	4603      	mov	r3, r0
      }
 800bff0:	4618      	mov	r0, r3
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <_ZNKSt5arrayIfLj2EEixEj>:
      operator[](size_type __n) const noexcept
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	4618      	mov	r0, r3
 800c008:	f001 f95b 	bl	800d2c2 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 800c00c:	4603      	mov	r3, r0
      }
 800c00e:	4618      	mov	r0, r3
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c016:	b480      	push	{r7}
 800c018:	b083      	sub	sp, #12
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	605a      	str	r2, [r3, #4]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	609a      	str	r2, [r3, #8]
	{ }
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4618      	mov	r0, r3
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	60f8      	str	r0, [r7, #12]
 800c046:	60b9      	str	r1, [r7, #8]
 800c048:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f001 f948 	bl	800d2e0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800c050:	4603      	mov	r3, r0
 800c052:	461a      	mov	r2, r3
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f001 f94d 	bl	800d2f6 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800c05c:	bf00      	nop
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c064:	b5b0      	push	{r4, r5, r7, lr}
 800c066:	b08c      	sub	sp, #48	@ 0x30
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c070:	4a59      	ldr	r2, [pc, #356]	@ (800c1d8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800c072:	2101      	movs	r1, #1
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f001 f83d 	bl	800d0f4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800c07a:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f7fd fe98 	bl	8009dbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800c08e:	4603      	mov	r3, r0
 800c090:	617b      	str	r3, [r7, #20]
 800c092:	f107 0214 	add.w	r2, r7, #20
 800c096:	f107 0308 	add.w	r3, r7, #8
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 fd77 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 f8f0 	bl	800c290 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c0b0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800c0b6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c0bc:	69ba      	ldr	r2, [r7, #24]
 800c0be:	18d5      	adds	r5, r2, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f001 f90d 	bl	800d2e0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f7ff ffb6 	bl	800c03e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  __new_finish = pointer();
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800c0d6:	f7fe fe2d 	bl	800ad34 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d027      	beq.n	800c130 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c0e0:	f107 0308 	add.w	r3, r7, #8
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff faaf 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff faff 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c0f6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c0f8:	69ba      	ldr	r2, [r7, #24]
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c0fe:	f000 f8db 	bl	800c2b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800c102:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 800c104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c106:	3304      	adds	r3, #4
 800c108:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c10a:	f107 0308 	add.w	r3, r7, #8
 800c10e:	4618      	mov	r0, r3
 800c110:	f7ff fa9a 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c114:	4603      	mov	r3, r0
 800c116:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7ff faea 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c120:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c124:	6a39      	ldr	r1, [r7, #32]
 800c126:	4620      	mov	r0, r4
 800c128:	f000 f8c6 	bl	800c2b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800c12c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c12e:	e026      	b.n	800c17e <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800c130:	f107 0308 	add.w	r3, r7, #8
 800c134:	4618      	mov	r0, r3
 800c136:	f7ff fa87 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c13a:	4603      	mov	r3, r0
 800c13c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff fad7 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c146:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800c148:	69ba      	ldr	r2, [r7, #24]
 800c14a:	4621      	mov	r1, r4
 800c14c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c14e:	f001 f818 	bl	800d182 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800c152:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 800c154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c156:	3304      	adds	r3, #4
 800c158:	62fb      	str	r3, [r7, #44]	@ 0x2c
		(__position.base(), __old_finish,
 800c15a:	f107 0308 	add.w	r3, r7, #8
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff fa72 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c164:	4603      	mov	r3, r0
 800c166:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff fac2 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c170:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800c172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c174:	6a39      	ldr	r1, [r7, #32]
 800c176:	4620      	mov	r0, r4
 800c178:	f001 f803 	bl	800d182 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800c17c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800c17e:	f7fe fdd9 	bl	800ad34 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800c182:	4603      	mov	r3, r0
 800c184:	f083 0301 	eor.w	r3, r3, #1
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d009      	beq.n	800c1a2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff faaf 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c196:	4603      	mov	r3, r0
 800c198:	461a      	mov	r2, r3
 800c19a:	6a39      	ldr	r1, [r7, #32]
 800c19c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c19e:	f7ff fab4 	bl	800b70a <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800c1a2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	689a      	ldr	r2, [r3, #8]
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c1b2:	f7ff fac5 	bl	800b740 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1c0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	69ba      	ldr	r2, [r7, #24]
 800c1c8:	441a      	add	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	609a      	str	r2, [r3, #8]
    }
 800c1ce:	bf00      	nop
 800c1d0:	3730      	adds	r7, #48	@ 0x30
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bdb0      	pop	{r4, r5, r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	08021970 	.word	0x08021970

0800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800c1f2:	b5b0      	push	{r4, r5, r7, lr}
 800c1f4:	b082      	sub	sp, #8
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	429a      	cmp	r2, r3
 800c206:	d011      	beq.n	800c22c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c208:	687c      	ldr	r4, [r7, #4]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	685d      	ldr	r5, [r3, #4]
 800c20e:	6838      	ldr	r0, [r7, #0]
 800c210:	f001 f887 	bl	800d322 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800c214:	4603      	mov	r3, r0
 800c216:	461a      	mov	r2, r3
 800c218:	4629      	mov	r1, r5
 800c21a:	4620      	mov	r0, r4
 800c21c:	f001 f88c 	bl	800d338 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	    ++this->_M_impl._M_finish;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	1d1a      	adds	r2, r3, #4
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	605a      	str	r2, [r3, #4]
      }
 800c22a:	e00c      	b.n	800c246 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7fd fdd6 	bl	8009dde <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800c232:	4604      	mov	r4, r0
 800c234:	6838      	ldr	r0, [r7, #0]
 800c236:	f001 f874 	bl	800d322 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800c23a:	4603      	mov	r3, r0
 800c23c:	461a      	mov	r2, r3
 800c23e:	4621      	mov	r1, r4
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f001 f88d 	bl	800d360 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800c246:	bf00      	nop
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bdb0      	pop	{r4, r5, r7, pc}

0800c24e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c24e:	b580      	push	{r7, lr}
 800c250:	b082      	sub	sp, #8
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff fb58 	bl	800b90e <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c25e:	4603      	mov	r3, r0
 800c260:	4618      	mov	r0, r3
 800c262:	f000 fbe6 	bl	800ca32 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800c266:	4603      	mov	r3, r0
 800c268:	4618      	mov	r0, r3
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	109b      	asrs	r3, r3, #2
 800c284:	4618      	mov	r0, r3
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d006      	beq.n	800c2ae <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x1e>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f001 f917 	bl	800d4d8 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	e000      	b.n	800c2b0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x20>
 800c2ae:	2300      	movs	r3, #0
      }
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c2b8:	b590      	push	{r4, r7, lr}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af02      	add	r7, sp, #8
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
 800c2c4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c2c6:	f88d 4000 	strb.w	r4, [sp]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	68b9      	ldr	r1, [r7, #8]
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f001 f90f 	bl	800d4f4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>
 800c2d6:	4603      	mov	r3, r0
      }
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd90      	pop	{r4, r7, pc}

0800c2e0 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800c2e8:	f107 030c 	add.w	r3, r7, #12
 800c2ec:	6879      	ldr	r1, [r7, #4]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f001 f912 	bl	800d518 <_ZNSt13move_iteratorIPfEC1ES0_>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b086      	sub	sp, #24
 800c302:	af00      	add	r7, sp, #0
 800c304:	60f8      	str	r0, [r7, #12]
 800c306:	60b9      	str	r1, [r7, #8]
 800c308:	607a      	str	r2, [r7, #4]
 800c30a:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff ffbd 	bl	800c290 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c316:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7ff f9ea 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c320:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f001 f908 	bl	800d53c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
	      return __result;
 800c32c:	697b      	ldr	r3, [r7, #20]
	}
 800c32e:	4618      	mov	r0, r3
 800c330:	3718      	adds	r7, #24
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fb8e 	bl	800ca66 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800c35c:	bf00      	nop
 800c35e:	4618      	mov	r0, r3
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c36a:	b590      	push	{r4, r7, lr}
 800c36c:	b087      	sub	sp, #28
 800c36e:	af00      	add	r7, sp, #0
 800c370:	60f8      	str	r0, [r7, #12]
 800c372:	60b9      	str	r1, [r7, #8]
 800c374:	607a      	str	r2, [r7, #4]
 800c376:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c378:	6879      	ldr	r1, [r7, #4]
 800c37a:	68b8      	ldr	r0, [r7, #8]
 800c37c:	f001 f90f 	bl	800d59e <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c380:	4603      	mov	r3, r0
 800c382:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c384:	68fc      	ldr	r4, [r7, #12]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7ff f9b3 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c38e:	4603      	mov	r3, r0
 800c390:	4619      	mov	r1, r3
 800c392:	6978      	ldr	r0, [r7, #20]
 800c394:	f7ff f964 	bl	800b660 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 800c398:	4603      	mov	r3, r0
 800c39a:	4619      	mov	r1, r3
 800c39c:	4620      	mov	r0, r4
 800c39e:	f7ff ff77 	bl	800c290 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff f999 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c3c2:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800c3c4:	4622      	mov	r2, r4
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	68b8      	ldr	r0, [r7, #8]
 800c3ca:	f001 f8fc 	bl	800d5c6 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800c3ce:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	605a      	str	r2, [r3, #4]
	}
 800c3d4:	bf00      	nop
 800c3d6:	371c      	adds	r7, #28
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd90      	pop	{r4, r7, pc}

0800c3dc <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800c3f4:	b590      	push	{r4, r7, lr}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff ffed 	bl	800c3dc <_ZNKSt16initializer_listIiE5beginEv>
 800c402:	4604      	mov	r4, r0
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f001 f900 	bl	800d60a <_ZNKSt16initializer_listIiE4sizeEv>
 800c40a:	4603      	mov	r3, r0
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4423      	add	r3, r4
 800c410:	4618      	mov	r0, r3
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	bd90      	pop	{r4, r7, pc}

0800c418 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fc8d 	bl	800cd46 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c436:	b590      	push	{r4, r7, lr}
 800c438:	b087      	sub	sp, #28
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	607a      	str	r2, [r7, #4]
 800c442:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c444:	6879      	ldr	r1, [r7, #4]
 800c446:	68b8      	ldr	r0, [r7, #8]
 800c448:	f001 f8eb 	bl	800d622 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c44c:	4603      	mov	r3, r0
 800c44e:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c450:	68fc      	ldr	r4, [r7, #12]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fa21 	bl	800b89c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c45a:	4603      	mov	r3, r0
 800c45c:	4619      	mov	r1, r3
 800c45e:	6978      	ldr	r0, [r7, #20]
 800c460:	f7ff f9fe 	bl	800b860 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>
 800c464:	4603      	mov	r3, r0
 800c466:	4619      	mov	r1, r3
 800c468:	4620      	mov	r0, r4
 800c46a:	f001 f8ee 	bl	800d64a <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>
 800c46e:	4602      	mov	r2, r0
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	441a      	add	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	4618      	mov	r0, r3
 800c48a:	f7ff fa07 	bl	800b89c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c48e:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800c490:	4622      	mov	r2, r4
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	68b8      	ldr	r0, [r7, #8]
 800c496:	f001 f8ec 	bl	800d672 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>
 800c49a:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	605a      	str	r2, [r3, #4]
	}
 800c4a0:	bf00      	nop
 800c4a2:	371c      	adds	r7, #28
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd90      	pop	{r4, r7, pc}

0800c4a8 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	601a      	str	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	370c      	adds	r7, #12
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c4de:	b480      	push	{r7}
 800c4e0:	b083      	sub	sp, #12
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>:
	function(_Functor&& __f)
 800c4f4:	b590      	push	{r4, r7, lr}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	461a      	mov	r2, r3
 800c502:	2300      	movs	r3, #0
 800c504:	6013      	str	r3, [r2, #0]
 800c506:	6053      	str	r3, [r2, #4]
 800c508:	6093      	str	r3, [r2, #8]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fe fd3a 	bl	800af86 <_ZNSt14_Function_baseC1Ev>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f001 f8d9 	bl	800d6d4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00e      	beq.n	800c546 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 800c528:	687c      	ldr	r4, [r7, #4]
 800c52a:	6838      	ldr	r0, [r7, #0]
 800c52c:	f7ff ffd7 	bl	800c4de <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c530:	4603      	mov	r3, r0
 800c532:	4619      	mov	r1, r3
 800c534:	4620      	mov	r0, r4
 800c536:	f001 f8dd 	bl	800d6f4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a04      	ldr	r2, [pc, #16]	@ (800c550 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x5c>)
 800c53e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a04      	ldr	r2, [pc, #16]	@ (800c554 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x60>)
 800c544:	609a      	str	r2, [r3, #8]
	}
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4618      	mov	r0, r3
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd90      	pop	{r4, r7, pc}
 800c550:	0800d719 	.word	0x0800d719
 800c554:	0800d75b 	.word	0x0800d75b

0800c558 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	4618      	mov	r0, r3
 800c564:	370c      	adds	r7, #12
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
	...

0800c570 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 800c570:	b590      	push	{r4, r7, lr}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	461a      	mov	r2, r3
 800c57e:	2300      	movs	r3, #0
 800c580:	6013      	str	r3, [r2, #0]
 800c582:	6053      	str	r3, [r2, #4]
 800c584:	6093      	str	r3, [r2, #8]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fe fcfc 	bl	800af86 <_ZNSt14_Function_baseC1Ev>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c594:	6838      	ldr	r0, [r7, #0]
 800c596:	f001 f8ff 	bl	800d798 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00e      	beq.n	800c5be <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800c5a0:	687c      	ldr	r4, [r7, #4]
 800c5a2:	6838      	ldr	r0, [r7, #0]
 800c5a4:	f7ff ffd8 	bl	800c558 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f001 f8fe 	bl	800d7ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a04      	ldr	r2, [pc, #16]	@ (800c5c8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x58>)
 800c5b6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a04      	ldr	r2, [pc, #16]	@ (800c5cc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x5c>)
 800c5bc:	609a      	str	r2, [r3, #8]
	}
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd90      	pop	{r4, r7, pc}
 800c5c8:	0800d7d3 	.word	0x0800d7d3
 800c5cc:	0800d815 	.word	0x0800d815

0800c5d0 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f001 f938 	bl	800d852 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f808 	bl	800c5f8 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	6013      	str	r3, [r2, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4618      	mov	r0, r3
 800c604:	f001 f932 	bl	800d86c <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c608:	4603      	mov	r3, r0
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      _GLIBCXX23_CONSTEXPR
      deleter_type&
      get_deleter() noexcept
 800c612:	b580      	push	{r7, lr}
 800c614:	b082      	sub	sp, #8
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 f932 	bl	800d886 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>
 800c622:	4603      	mov	r3, r0
 800c624:	4618      	mov	r0, r3
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>:
	operator()(_Up* __ptr) const
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d002      	beq.n	800c642 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_+0x16>
 800c63c:	6838      	ldr	r0, [r7, #0]
 800c63e:	f00d fd45 	bl	801a0cc <_ZdaPv>
	}
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4618      	mov	r0, r3
 800c656:	f001 f923 	bl	800d8a0 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c65a:	4603      	mov	r3, r0
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4618      	mov	r0, r3
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c666:	b580      	push	{r7, lr}
 800c668:	b082      	sub	sp, #8
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	6039      	str	r1, [r7, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4618      	mov	r0, r3
 800c674:	f000 f85f 	bl	800c736 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 f808 	bl	800c68e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c67e:	4602      	mov	r2, r0
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	6013      	str	r3, [r2, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4618      	mov	r0, r3
 800c688:	3708      	adds	r7, #8
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c68e:	b580      	push	{r7, lr}
 800c690:	b082      	sub	sp, #8
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4618      	mov	r0, r3
 800c69a:	f001 f90e 	bl	800d8ba <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f881 	bl	800c7ba <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800c6d8:	b590      	push	{r4, r7, lr}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c6e2:	683c      	ldr	r4, [r7, #0]
 800c6e4:	2c00      	cmp	r4, #0
 800c6e6:	d006      	beq.n	800c6f6 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_+0x1e>
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f7f4 ff89 	bl	8001600 <_ZN2ei9ei_matrixD1Ev>
 800c6ee:	2110      	movs	r1, #16
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f00d fce9 	bl	801a0c8 <_ZdlPvj>
      }
 800c6f6:	bf00      	nop
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd90      	pop	{r4, r7, pc}

0800c6fe <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b082      	sub	sp, #8
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4618      	mov	r0, r3
 800c70a:	f001 f8e3 	bl	800d8d4 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c70e:	4603      	mov	r3, r0
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4618      	mov	r0, r3
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b082      	sub	sp, #8
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4618      	mov	r0, r3
 800c726:	f001 f8e2 	bl	800d8ee <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 800c72a:	4603      	mov	r3, r0
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4618      	mov	r0, r3
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800c736:	b580      	push	{r7, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4618      	mov	r0, r3
 800c742:	f001 f8e1 	bl	800d908 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>:
      void reset(pointer __p) noexcept
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff ff97 	bl	800c68e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c760:	4603      	mov	r3, r0
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f7ff ff91 	bl	800c68e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c76c:	4602      	mov	r2, r0
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d007      	beq.n	800c788 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_+0x38>
	  _M_deleter()(__old_p);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 f81e 	bl	800c7ba <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c77e:	4603      	mov	r3, r0
 800c780:	68f9      	ldr	r1, [r7, #12]
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff ffa8 	bl	800c6d8 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
      }
 800c788:	bf00      	nop
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>:
      pointer release() noexcept
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7ff ff78 	bl	800c68e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff ff72 	bl	800c68e <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	601a      	str	r2, [r3, #0]
	return __p;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
      }
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b082      	sub	sp, #8
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f001 f8af 	bl	800d928 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 800c7ea:	b480      	push	{r7}
 800c7ec:	b083      	sub	sp, #12
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	6039      	str	r1, [r7, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c802:	b580      	push	{r7, lr}
 800c804:	b082      	sub	sp, #8
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 f896 	bl	800d940 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	{ }
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4618      	mov	r0, r3
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 800c81e:	b580      	push	{r7, lr}
 800c820:	b084      	sub	sp, #16
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d018      	beq.n	800c860 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	f000 f845 	bl	800c8c0 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800c836:	4602      	mov	r2, r0
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	109b      	asrs	r3, r3, #2
 800c840:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c842:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	691a      	ldr	r2, [r3, #16]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c84e:	4413      	add	r3, r2
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	4619      	mov	r1, r3
 800c854:	f000 ff2f 	bl	800d6b6 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f001 f885 	bl	800d96a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c868:	b590      	push	{r4, r7, lr}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
	_Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
 800c872:	687c      	ldr	r4, [r7, #4]
 800c874:	6838      	ldr	r0, [r7, #0]
 800c876:	f000 f80b 	bl	800c890 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800c87a:	4603      	mov	r3, r0
 800c87c:	4619      	mov	r1, r3
 800c87e:	4620      	mov	r0, r4
 800c880:	f001 f888 	bl	800d994 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 800c884:	60f8      	str	r0, [r7, #12]
	return __p;
 800c886:	68fb      	ldr	r3, [r7, #12]
      }
 800c888:	4618      	mov	r0, r3
 800c88a:	3714      	adds	r7, #20
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd90      	pop	{r4, r7, pc}

0800c890 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	331f      	adds	r3, #31
 800c89c:	095b      	lsrs	r3, r3, #5
 800c89e:	4618      	mov	r0, r3
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c8aa:	b480      	push	{r7}
 800c8ac:	b083      	sub	sp, #12
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d008      	beq.n	800c8e2 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	3b04      	subs	r3, #4
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7ff ffe7 	bl	800c8aa <_ZSt11__addressofImEPT_RS0_>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	3304      	adds	r3, #4
 800c8e0:	e000      	b.n	800c8e4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 800c8e2:	2300      	movs	r3, #0
	}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f001 f85a 	bl	800d9b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	f107 0308 	add.w	r3, r7, #8
 800c902:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c906:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800c90a:	6838      	ldr	r0, [r7, #0]
 800c90c:	f001 f850 	bl	800d9b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c910:	4602      	mov	r2, r0
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c918:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800c91c:	f107 0308 	add.w	r3, r7, #8
 800c920:	4618      	mov	r0, r3
 800c922:	f001 f845 	bl	800d9b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c926:	4602      	mov	r2, r0
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c92e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800c932:	bf00      	nop
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f001 f83e 	bl	800d9c6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c94a:	4603      	mov	r3, r0
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c950:	6838      	ldr	r0, [r7, #0]
 800c952:	f001 f838 	bl	800d9c6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c956:	4603      	mov	r3, r0
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c95e:	f107 030c 	add.w	r3, r7, #12
 800c962:	4618      	mov	r0, r3
 800c964:	f001 f82f 	bl	800d9c6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c968:	4603      	mov	r3, r0
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	601a      	str	r2, [r3, #0]
    }
 800c970:	bf00      	nop
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f001 f82a 	bl	800d9dc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c988:	4603      	mov	r3, r0
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c98e:	6838      	ldr	r0, [r7, #0]
 800c990:	f001 f824 	bl	800d9dc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c994:	4603      	mov	r3, r0
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c99c:	f107 030c 	add.w	r3, r7, #12
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f001 f81b 	bl	800d9dc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	601a      	str	r2, [r3, #0]
    }
 800c9ae:	bf00      	nop
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c9b6:	b480      	push	{r7}
 800c9b8:	b083      	sub	sp, #12
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 800c9cc:	b5b0      	push	{r4, r5, r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800c9d8:	68fc      	ldr	r4, [r7, #12]
 800c9da:	68b8      	ldr	r0, [r7, #8]
 800c9dc:	f001 f809 	bl	800d9f2 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff ffe7 	bl	800c9b6 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f001 f80a 	bl	800da08 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bdb0      	pop	{r4, r5, r7, pc}

0800c9fe <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f001 f81b 	bl	800da44 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	4618      	mov	r0, r3
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f001 f81a 	bl	800da5c <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b084      	sub	sp, #16
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ca3a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800ca3e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f001 f818 	bl	800da76 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>
 800ca46:	4603      	mov	r3, r0
 800ca48:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ca4a:	f107 0208 	add.w	r2, r7, #8
 800ca4e:	f107 030c 	add.w	r3, r7, #12
 800ca52:	4611      	mov	r1, r2
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fd fb26 	bl	800a0a6 <_ZSt3minIjERKT_S2_S2_>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	681b      	ldr	r3, [r3, #0]
      }
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b082      	sub	sp, #8
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff facf 	bl	800c016 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b082      	sub	sp, #8
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
 800ca8a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f7ff fbfe 	bl	800c290 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800ca94:	4602      	mov	r2, r0
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	441a      	add	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	609a      	str	r2, [r3, #8]
      }
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>:
  // __uninitialized_default_n_a
  // Fills [first, first + n) with value_types constructed by the allocator
  // alloc, with no arguments passed to the construct call.
  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _GLIBCXX20_CONSTEXPR _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 800cab8:	b580      	push	{r7, lr}
 800caba:	b086      	sub	sp, #24
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
				_Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __n > 0; --__n, (void) ++__cur)
 800cac8:	e00d      	b.n	800cae6 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x2e>
	    __traits::construct(__alloc, std::__addressof(*__cur));
 800caca:	6978      	ldr	r0, [r7, #20]
 800cacc:	f000 f813 	bl	800caf6 <_ZSt11__addressofIfEPT_RS0_>
 800cad0:	4603      	mov	r3, r0
 800cad2:	4619      	mov	r1, r3
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 ffdb 	bl	800da90 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __n > 0; --__n, (void) ++__cur)
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	3b01      	subs	r3, #1
 800cade:	60bb      	str	r3, [r7, #8]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	3304      	adds	r3, #4
 800cae4:	617b      	str	r3, [r7, #20]
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1ee      	bne.n	800caca <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x12>
	  return __cur;
 800caec:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__first, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800caee:	4618      	mov	r0, r3
 800caf0:	3718      	adds	r7, #24
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800caf6:	b480      	push	{r7}
 800caf8:	b083      	sub	sp, #12
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4618      	mov	r0, r3
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800cb16:	2200      	movs	r2, #0
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 ffc5 	bl	800daaa <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>
 800cb20:	bf00      	nop
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	68b9      	ldr	r1, [r7, #8]
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 ffc5 	bl	800dac8 <_ZN2ei7EiAllocIfE10deallocateEPfj>
 800cb3e:	bf00      	nop
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b082      	sub	sp, #8
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800cb4e:	1d3b      	adds	r3, r7, #4
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fe fd79 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cb56:	4603      	mov	r3, r0
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b082      	sub	sp, #8
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff ffea 	bl	800cb46 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800cb72:	4602      	mov	r2, r0
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	1a9b      	subs	r3, r3, r2
 800cb78:	109b      	asrs	r3, r3, #2
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	1d3b      	adds	r3, r7, #4
 800cb7e:	4611      	mov	r1, r2
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 ffae 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800cb86:	4603      	mov	r3, r0
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cb90:	b590      	push	{r4, r7, lr}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7fe fd54 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cba0:	4603      	mov	r3, r0
 800cba2:	681c      	ldr	r4, [r3, #0]
 800cba4:	6838      	ldr	r0, [r7, #0]
 800cba6:	f7fe fd4f 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	1ae3      	subs	r3, r4, r3
 800cbb0:	109b      	asrs	r3, r3, #2
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	370c      	adds	r7, #12
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd90      	pop	{r4, r7, pc}

0800cbba <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800cbba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbbc:	b087      	sub	sp, #28
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	607a      	str	r2, [r7, #4]
 800cbc6:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800cbc8:	e01b      	b.n	800cc02 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d106      	bne.n	800cbde <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800cbd0:	4633      	mov	r3, r6
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	68b9      	ldr	r1, [r7, #8]
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f000 ff9b 	bl	800db12 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
 800cbdc:	e021      	b.n	800cc22 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x68>
	  --__depth_limit;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800cbe4:	462a      	mov	r2, r5
 800cbe6:	68b9      	ldr	r1, [r7, #8]
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f000 ffa9 	bl	800db40 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800cbf2:	4623      	mov	r3, r4
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	68b9      	ldr	r1, [r7, #8]
 800cbf8:	6978      	ldr	r0, [r7, #20]
 800cbfa:	f7ff ffde 	bl	800cbba <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  __last = __cut;
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800cc02:	f107 020c 	add.w	r2, r7, #12
 800cc06:	f107 0308 	add.w	r3, r7, #8
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff ffbf 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b10      	cmp	r3, #16
 800cc16:	bfcc      	ite	gt
 800cc18:	2301      	movgt	r3, #1
 800cc1a:	2300      	movle	r3, #0
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1d3      	bne.n	800cbca <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x10>
    }
 800cc22:	371c      	adds	r7, #28
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc28 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800cc28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800cc34:	f107 020c 	add.w	r2, r7, #12
 800cc38:	f107 0308 	add.w	r3, r7, #8
 800cc3c:	4611      	mov	r1, r2
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff ffa6 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b10      	cmp	r3, #16
 800cc48:	bfcc      	ite	gt
 800cc4a:	2301      	movgt	r3, #1
 800cc4c:	2300      	movle	r3, #0
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d018      	beq.n	800cc86 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800cc54:	f107 030c 	add.w	r3, r7, #12
 800cc58:	2110      	movs	r1, #16
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f000 ff41 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800cc60:	4603      	mov	r3, r0
 800cc62:	4632      	mov	r2, r6
 800cc64:	4619      	mov	r1, r3
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f000 ffab 	bl	800dbc2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800cc6c:	f107 030c 	add.w	r3, r7, #12
 800cc70:	2110      	movs	r1, #16
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 ff35 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	462a      	mov	r2, r5
 800cc7c:	68b9      	ldr	r1, [r7, #8]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f001 f805 	bl	800dc8e <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800cc84:	e004      	b.n	800cc90 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800cc86:	4622      	mov	r2, r4
 800cc88:	68b9      	ldr	r1, [r7, #8]
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f000 ff99 	bl	800dbc2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800cc90:	bf00      	nop
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc98 <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cc98:	b590      	push	{r4, r7, lr}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7fe fd6f 	bl	800b786 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	681c      	ldr	r4, [r3, #0]
 800ccac:	6838      	ldr	r0, [r7, #0]
 800ccae:	f7fe fd6a 	bl	800b786 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	429c      	cmp	r4, r3
 800ccb8:	bf0c      	ite	eq
 800ccba:	2301      	moveq	r3, #1
 800ccbc:	2300      	movne	r3, #0
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd90      	pop	{r4, r7, pc}

0800ccc8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	ed2d 8b02 	vpush	{d8}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800ccd8:	f107 0308 	add.w	r3, r7, #8
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7fd f966 	bl	8009fae <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800cce2:	4603      	mov	r3, r0
 800cce4:	ed93 8a00 	vldr	s16, [r3]
 800cce8:	1d3b      	adds	r3, r7, #4
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fd f95f 	bl	8009fae <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	edd3 7a00 	vldr	s15, [r3]
 800ccf6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ccfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccfe:	bf4c      	ite	mi
 800cd00:	2301      	movmi	r3, #1
 800cd02:	2300      	movpl	r3, #0
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	ecbd 8b02 	vpop	{d8}
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b084      	sub	sp, #16
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cd1a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800cd1e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 ffd9 	bl	800dcd8 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>
 800cd26:	4603      	mov	r3, r0
 800cd28:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cd2a:	f107 0208 	add.w	r2, r7, #8
 800cd2e:	f107 030c 	add.w	r3, r7, #12
 800cd32:	4611      	mov	r1, r2
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fd f9b6 	bl	800a0a6 <_ZSt3minIjERKT_S2_S2_>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	681b      	ldr	r3, [r3, #0]
      }
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f000 ffcd 	bl	800dcf2 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>
	{ }
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <_ZSt11__addressofIiEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cd62:	b480      	push	{r7}
 800cd64:	b083      	sub	sp, #12
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800cd82:	2200      	movs	r2, #0
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 ffda 	bl	800dd40 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>
 800cd8c:	bf00      	nop
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f000 ffda 	bl	800dd5e <_ZN2ei7EiAllocIiE10deallocateEPij>
 800cdaa:	bf00      	nop
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const _Alloc& __rhs)
 800cdb2:	b590      	push	{r4, r7, lr}
 800cdb4:	b083      	sub	sp, #12
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
      { return _S_select(__rhs, 0); }
 800cdba:	2100      	movs	r1, #0
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 ffdb 	bl	800dd78 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>
 800cdc2:	bf00      	nop
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd90      	pop	{r4, r7, pc}

0800cdcc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	68b9      	ldr	r1, [r7, #8]
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f000 ffd5 	bl	800dd8c <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 800cde2:	bf00      	nop
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cdea:	b480      	push	{r7}
 800cdec:	b083      	sub	sp, #12
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 ffc9 	bl	800dda6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 800ce14:	bf00      	nop
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4618      	mov	r0, r3
 800ce28:	370c      	adds	r7, #12
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800ce32:	b590      	push	{r4, r7, lr}
 800ce34:	b085      	sub	sp, #20
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	60f8      	str	r0, [r7, #12]
 800ce3a:	60b9      	str	r1, [r7, #8]
 800ce3c:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	4619      	mov	r1, r3
 800ce42:	2008      	movs	r0, #8
 800ce44:	f7f4 f9be 	bl	80011c4 <_ZnwjPv>
 800ce48:	4604      	mov	r4, r0
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7ff ffe6 	bl	800ce1c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ce50:	4602      	mov	r2, r0
 800ce52:	4623      	mov	r3, r4
 800ce54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce58:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800ce5c:	bf00      	nop
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd90      	pop	{r4, r7, pc}

0800ce64 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ce64:	b590      	push	{r4, r7, lr}
 800ce66:	b087      	sub	sp, #28
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f000 ffa7 	bl	800ddc4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800ce76:	4604      	mov	r4, r0
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f7fd fa33 	bl	800a2e4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	1ae2      	subs	r2, r4, r3
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	bf34      	ite	cc
 800ce88:	2301      	movcc	r3, #1
 800ce8a:	2300      	movcs	r3, #0
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f00d f931 	bl	801a0fa <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	f7fd fa23 	bl	800a2e4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ce9e:	4604      	mov	r4, r0
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f7fd fa1f 	bl	800a2e4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800cea6:	4603      	mov	r3, r0
 800cea8:	613b      	str	r3, [r7, #16]
 800ceaa:	f107 0208 	add.w	r2, r7, #8
 800ceae:	f107 0310 	add.w	r3, r7, #16
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fe f98e 	bl	800b1d6 <_ZSt3maxIjERKT_S2_S2_>
 800ceba:	4603      	mov	r3, r0
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4423      	add	r3, r4
 800cec0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f7fd fa0e 	bl	800a2e4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800cec8:	4602      	mov	r2, r0
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	4293      	cmp	r3, r2
 800cece:	d306      	bcc.n	800cede <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f000 ff77 	bl	800ddc4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800ced6:	4602      	mov	r2, r0
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d904      	bls.n	800cee8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f000 ff70 	bl	800ddc4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800cee4:	4603      	mov	r3, r0
 800cee6:	e000      	b.n	800ceea <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 800cee8:	697b      	ldr	r3, [r7, #20]
      }
 800ceea:	4618      	mov	r0, r3
 800ceec:	371c      	adds	r7, #28
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd90      	pop	{r4, r7, pc}

0800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cef2:	b590      	push	{r4, r7, lr}
 800cef4:	b083      	sub	sp, #12
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
 800cefa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 f835 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cf02:	4603      	mov	r3, r0
 800cf04:	681c      	ldr	r4, [r3, #0]
 800cf06:	6838      	ldr	r0, [r7, #0]
 800cf08:	f000 f830 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	1ae3      	subs	r3, r4, r3
 800cf12:	10db      	asrs	r3, r3, #3
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd90      	pop	{r4, r7, pc}

0800cf1c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d006      	beq.n	800cf3a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6839      	ldr	r1, [r7, #0]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 ff58 	bl	800dde6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 800cf36:	4603      	mov	r3, r0
 800cf38:	e000      	b.n	800cf3c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 800cf3a:	2300      	movs	r3, #0
      }
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cf44:	b590      	push	{r4, r7, lr}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af02      	add	r7, sp, #8
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cf52:	f88d 4000 	strb.w	r4, [sp]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	68b9      	ldr	r1, [r7, #8]
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f000 ff50 	bl	800de02 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 800cf62:	4603      	mov	r3, r0
      }
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd90      	pop	{r4, r7, pc}

0800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4618      	mov	r0, r3
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800cf82:	b590      	push	{r4, r7, lr}
 800cf84:	b085      	sub	sp, #20
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	60b9      	str	r1, [r7, #8]
 800cf8c:	607a      	str	r2, [r7, #4]
 800cf8e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f000 ff48 	bl	800de26 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cf96:	4604      	mov	r4, r0
 800cf98:	68b8      	ldr	r0, [r7, #8]
 800cf9a:	f000 ff44 	bl	800de26 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cf9e:	4601      	mov	r1, r0
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 ff4d 	bl	800de44 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 800cfaa:	4603      	mov	r3, r0
    }
 800cfac:	4618      	mov	r0, r3
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd90      	pop	{r4, r7, pc}

0800cfb4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	370c      	adds	r7, #12
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b082      	sub	sp, #8
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 800cfd4:	463b      	mov	r3, r7
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7ff ffec 	bl	800cfb4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cfe6:	b590      	push	{r4, r7, lr}
 800cfe8:	b083      	sub	sp, #12
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7ff ffbb 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cff6:	4603      	mov	r3, r0
 800cff8:	681c      	ldr	r4, [r3, #0]
 800cffa:	6838      	ldr	r0, [r7, #0]
 800cffc:	f7ff ffb6 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800d000:	4603      	mov	r3, r0
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	429c      	cmp	r4, r3
 800d006:	bf14      	ite	ne
 800d008:	2301      	movne	r3, #1
 800d00a:	2300      	moveq	r3, #0
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	bd90      	pop	{r4, r7, pc}

0800d016 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800d016:	b580      	push	{r7, lr}
 800d018:	b086      	sub	sp, #24
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	60f8      	str	r0, [r7, #12]
 800d01e:	60b9      	str	r1, [r7, #8]
 800d020:	607a      	str	r2, [r7, #4]
 800d022:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800d024:	e01b      	b.n	800d05e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d106      	bne.n	800d03a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800d02c:	783b      	ldrb	r3, [r7, #0]
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	68b9      	ldr	r1, [r7, #8]
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f000 ff37 	bl	800dea6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 800d038:	e021      	b.n	800d07e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800d040:	783a      	ldrb	r2, [r7, #0]
 800d042:	68b9      	ldr	r1, [r7, #8]
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 ff45 	bl	800ded4 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 800d04a:	4603      	mov	r3, r0
 800d04c:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800d04e:	783b      	ldrb	r3, [r7, #0]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	6978      	ldr	r0, [r7, #20]
 800d056:	f7ff ffde 	bl	800d016 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800d05e:	f107 020c 	add.w	r2, r7, #12
 800d062:	f107 0308 	add.w	r3, r7, #8
 800d066:	4611      	mov	r1, r2
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff ff42 	bl	800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b10      	cmp	r3, #16
 800d072:	bfcc      	ite	gt
 800d074:	2301      	movgt	r3, #1
 800d076:	2300      	movle	r3, #0
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1d3      	bne.n	800d026 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x10>
    }
 800d07e:	3718      	adds	r7, #24
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800d090:	f107 020c 	add.w	r2, r7, #12
 800d094:	f107 0308 	add.w	r3, r7, #8
 800d098:	4611      	mov	r1, r2
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7ff ff29 	bl	800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b10      	cmp	r3, #16
 800d0a4:	bfcc      	ite	gt
 800d0a6:	2301      	movgt	r3, #1
 800d0a8:	2300      	movle	r3, #0
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d018      	beq.n	800d0e2 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800d0b0:	f107 030c 	add.w	r3, r7, #12
 800d0b4:	2110      	movs	r1, #16
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f000 ff4f 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	793a      	ldrb	r2, [r7, #4]
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f000 ff61 	bl	800df8a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800d0c8:	f107 030c 	add.w	r3, r7, #12
 800d0cc:	2110      	movs	r1, #16
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 ff43 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	793a      	ldrb	r2, [r7, #4]
 800d0d8:	68b9      	ldr	r1, [r7, #8]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 ffc2 	bl	800e064 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800d0e0:	e004      	b.n	800d0ec <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800d0e2:	793a      	ldrb	r2, [r7, #4]
 800d0e4:	68b9      	ldr	r1, [r7, #8]
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f000 ff4f 	bl	800df8a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800d0ec:	bf00      	nop
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800d0f4:	b590      	push	{r4, r7, lr}
 800d0f6:	b087      	sub	sp, #28
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7ff f8a4 	bl	800c24e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800d106:	4604      	mov	r4, r0
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f7fc fd45 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d10e:	4603      	mov	r3, r0
 800d110:	1ae2      	subs	r2, r4, r3
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	429a      	cmp	r2, r3
 800d116:	bf34      	ite	cc
 800d118:	2301      	movcc	r3, #1
 800d11a:	2300      	movcs	r3, #0
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f00c ffe9 	bl	801a0fa <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7fc fd35 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d12e:	4604      	mov	r4, r0
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7fc fd31 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d136:	4603      	mov	r3, r0
 800d138:	613b      	str	r3, [r7, #16]
 800d13a:	f107 0208 	add.w	r2, r7, #8
 800d13e:	f107 0310 	add.w	r3, r7, #16
 800d142:	4611      	mov	r1, r2
 800d144:	4618      	mov	r0, r3
 800d146:	f7fe f846 	bl	800b1d6 <_ZSt3maxIjERKT_S2_S2_>
 800d14a:	4603      	mov	r3, r0
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4423      	add	r3, r4
 800d150:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7fc fd20 	bl	8009b98 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d158:	4602      	mov	r2, r0
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d306      	bcc.n	800d16e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x7a>
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f7ff f874 	bl	800c24e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800d166:	4602      	mov	r2, r0
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d904      	bls.n	800d178 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x84>
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f7ff f86d 	bl	800c24e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800d174:	4603      	mov	r3, r0
 800d176:	e000      	b.n	800d17a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x86>
 800d178:	697b      	ldr	r3, [r7, #20]
      }
 800d17a:	4618      	mov	r0, r3
 800d17c:	371c      	adds	r7, #28
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd90      	pop	{r4, r7, pc}

0800d182 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800d182:	b590      	push	{r4, r7, lr}
 800d184:	b085      	sub	sp, #20
 800d186:	af00      	add	r7, sp, #0
 800d188:	60f8      	str	r0, [r7, #12]
 800d18a:	60b9      	str	r1, [r7, #8]
 800d18c:	607a      	str	r2, [r7, #4]
 800d18e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f7ff f8a5 	bl	800c2e0 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800d196:	4604      	mov	r4, r0
 800d198:	68b8      	ldr	r0, [r7, #8]
 800d19a:	f7ff f8a1 	bl	800c2e0 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800d19e:	4601      	mov	r1, r0
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	f000 f9c9 	bl	800d53c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800d1aa:	4603      	mov	r3, r0
    }
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd90      	pop	{r4, r7, pc}

0800d1b4 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	370c      	adds	r7, #12
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d1d2:	b480      	push	{r7}
 800d1d4:	b083      	sub	sp, #12
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	4413      	add	r3, r2
 800d202:	4618      	mov	r0, r3
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d20e:	b480      	push	{r7}
 800d210:	b083      	sub	sp, #12
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	4413      	add	r3, r2
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	4413      	add	r3, r2
 800d23e:	4618      	mov	r0, r3
 800d240:	370c      	adds	r7, #12
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d24a:	b480      	push	{r7}
 800d24c:	b083      	sub	sp, #12
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	4413      	add	r3, r2
 800d25c:	4618      	mov	r0, r3
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	4413      	add	r3, r2
 800d27a:	4618      	mov	r0, r3
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d286:	b480      	push	{r7}
 800d288:	b083      	sub	sp, #12
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	4413      	add	r3, r2
 800d298:	4618      	mov	r0, r3
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d2c2:	b480      	push	{r7}
 800d2c4:	b083      	sub	sp, #12
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	370c      	adds	r7, #12
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr

0800d2f6 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800d2f6:	b590      	push	{r4, r7, lr}
 800d2f8:	b085      	sub	sp, #20
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	60f8      	str	r0, [r7, #12]
 800d2fe:	60b9      	str	r1, [r7, #8]
 800d300:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	4619      	mov	r1, r3
 800d306:	2004      	movs	r0, #4
 800d308:	f7f3 ff5c 	bl	80011c4 <_ZnwjPv>
 800d30c:	4604      	mov	r4, r0
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f7ff ffe6 	bl	800d2e0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800d314:	4603      	mov	r3, r0
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	6023      	str	r3, [r4, #0]
	}
 800d31a:	bf00      	nop
 800d31c:	3714      	adds	r7, #20
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd90      	pop	{r4, r7, pc}

0800d322 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d322:	b480      	push	{r7}
 800d324:	b083      	sub	sp, #12
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4618      	mov	r0, r3
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff ffec 	bl	800d322 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800d34a:	4603      	mov	r3, r0
 800d34c:	461a      	mov	r2, r3
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f000 feac 	bl	800e0ae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800d356:	bf00      	nop
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
	...

0800d360 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800d360:	b5b0      	push	{r4, r5, r7, lr}
 800d362:	b08c      	sub	sp, #48	@ 0x30
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d36c:	4a59      	ldr	r2, [pc, #356]	@ (800d4d4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800d36e:	2101      	movs	r1, #1
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f7ff febf 	bl	800d0f4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800d376:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f7fc fd1a 	bl	8009dbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800d38a:	4603      	mov	r3, r0
 800d38c:	617b      	str	r3, [r7, #20]
 800d38e:	f107 0214 	add.w	r2, r7, #20
 800d392:	f107 0308 	add.w	r3, r7, #8
 800d396:	4611      	mov	r1, r2
 800d398:	4618      	mov	r0, r3
 800d39a:	f7ff fbf9 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe ff72 	bl	800c290 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800d3ac:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800d3b2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800d3b8:	69ba      	ldr	r2, [r7, #24]
 800d3ba:	18d5      	adds	r5, r2, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7ff ffb0 	bl	800d322 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f7ff ffb5 	bl	800d338 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  __new_finish = pointer();
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800d3d2:	f7fd fcaf 	bl	800ad34 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d027      	beq.n	800d42c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d3dc:	f107 0308 	add.w	r3, r7, #8
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fe f931 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe f981 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d3f2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d3f4:	69ba      	ldr	r2, [r7, #24]
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3fa:	f7fe ff5d 	bl	800c2b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800d3fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 800d400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d402:	3304      	adds	r3, #4
 800d404:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d406:	f107 0308 	add.w	r3, r7, #8
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7fe f91c 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d410:	4603      	mov	r3, r0
 800d412:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe f96c 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d41c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d41e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d420:	6a39      	ldr	r1, [r7, #32]
 800d422:	4620      	mov	r0, r4
 800d424:	f7fe ff48 	bl	800c2b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800d428:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d42a:	e026      	b.n	800d47a <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800d42c:	f107 0308 	add.w	r3, r7, #8
 800d430:	4618      	mov	r0, r3
 800d432:	f7fe f909 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d436:	4603      	mov	r3, r0
 800d438:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe f959 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d442:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	4621      	mov	r1, r4
 800d448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d44a:	f7ff fe9a 	bl	800d182 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d44e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 800d450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d452:	3304      	adds	r3, #4
 800d454:	62fb      	str	r3, [r7, #44]	@ 0x2c
		(__position.base(), __old_finish,
 800d456:	f107 0308 	add.w	r3, r7, #8
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe f8f4 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d460:	4603      	mov	r3, r0
 800d462:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe f944 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d46c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800d46e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d470:	6a39      	ldr	r1, [r7, #32]
 800d472:	4620      	mov	r0, r4
 800d474:	f7ff fe85 	bl	800d182 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d478:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800d47a:	f7fd fc5b 	bl	800ad34 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800d47e:	4603      	mov	r3, r0
 800d480:	f083 0301 	eor.w	r3, r3, #1
 800d484:	b2db      	uxtb	r3, r3
 800d486:	2b00      	cmp	r3, #0
 800d488:	d009      	beq.n	800d49e <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fe f931 	bl	800b6f4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d492:	4603      	mov	r3, r0
 800d494:	461a      	mov	r2, r3
 800d496:	6a39      	ldr	r1, [r7, #32]
 800d498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d49a:	f7fe f936 	bl	800b70a <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800d49e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	689a      	ldr	r2, [r3, #8]
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d4ae:	f7fe f947 	bl	800b740 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	69ba      	ldr	r2, [r7, #24]
 800d4b6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4bc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	69ba      	ldr	r2, [r7, #24]
 800d4c4:	441a      	add	r2, r3
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	609a      	str	r2, [r3, #8]
    }
 800d4ca:	bf00      	nop
 800d4cc:	3730      	adds	r7, #48	@ 0x30
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bdb0      	pop	{r4, r5, r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	08021970 	.word	0x08021970

0800d4d8 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 fdf8 	bl	800e0da <_ZN2ei7EiAllocIfE8allocateEj>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	68b9      	ldr	r1, [r7, #8]
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 fdf7 	bl	800e0fc <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d50e:	4603      	mov	r3, r0
      }
 800d510:	4618      	mov	r0, r3
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800d522:	463b      	mov	r3, r7
 800d524:	4618      	mov	r0, r3
 800d526:	f000 fe06 	bl	800e136 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>
 800d52a:	4603      	mov	r3, r0
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d53c:	b590      	push	{r4, r7, lr}
 800d53e:	b087      	sub	sp, #28
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
 800d548:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d54e:	e016      	b.n	800d57e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d550:	6978      	ldr	r0, [r7, #20]
 800d552:	f7ff fad0 	bl	800caf6 <_ZSt11__addressofIfEPT_RS0_>
 800d556:	4604      	mov	r4, r0
 800d558:	f107 030c 	add.w	r3, r7, #12
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 fe16 	bl	800e18e <_ZNKSt13move_iteratorIPfEdeEv>
 800d562:	4603      	mov	r3, r0
 800d564:	461a      	mov	r2, r3
 800d566:	4621      	mov	r1, r4
 800d568:	6838      	ldr	r0, [r7, #0]
 800d56a:	f7ff fee5 	bl	800d338 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d56e:	f107 030c 	add.w	r3, r7, #12
 800d572:	4618      	mov	r0, r3
 800d574:	f000 fdfb 	bl	800e16e <_ZNSt13move_iteratorIPfEppEv>
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	3304      	adds	r3, #4
 800d57c:	617b      	str	r3, [r7, #20]
 800d57e:	f107 0208 	add.w	r2, r7, #8
 800d582:	f107 030c 	add.w	r3, r7, #12
 800d586:	4611      	mov	r1, r2
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 fddf 	bl	800e14c <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1dd      	bne.n	800d550 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d594:	697b      	ldr	r3, [r7, #20]
    }
 800d596:	4618      	mov	r0, r3
 800d598:	371c      	adds	r7, #28
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd90      	pop	{r4, r7, pc}

0800d59e <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800d59e:	b5b0      	push	{r4, r5, r7, lr}
 800d5a0:	b082      	sub	sp, #8
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
 800d5a6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800d5a8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d5aa:	1d3b      	adds	r3, r7, #4
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fe fed1 	bl	800c354 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d5b2:	462a      	mov	r2, r5
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f000 fdf5 	bl	800e1a6 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d5bc:	4603      	mov	r3, r0
    }
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bdb0      	pop	{r4, r5, r7, pc}

0800d5c6 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b086      	sub	sp, #24
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	60f8      	str	r0, [r7, #12]
 800d5ce:	60b9      	str	r1, [r7, #8]
 800d5d0:	607a      	str	r2, [r7, #4]
 800d5d2:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d5d8:	e00e      	b.n	800d5f8 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d5da:	6978      	ldr	r0, [r7, #20]
 800d5dc:	f7ff fa8b 	bl	800caf6 <_ZSt11__addressofIfEPT_RS0_>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	6838      	ldr	r0, [r7, #0]
 800d5e8:	f7fe fd29 	bl	800c03e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	60fb      	str	r3, [r7, #12]
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d1ec      	bne.n	800d5da <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d600:	697b      	ldr	r3, [r7, #20]
    }
 800d602:	4618      	mov	r0, r3
 800d604:	3718      	adds	r7, #24
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 800d60a:	b480      	push	{r7}
 800d60c:	b083      	sub	sp, #12
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	4618      	mov	r0, r3
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800d622:	b5b0      	push	{r4, r5, r7, lr}
 800d624:	b082      	sub	sp, #8
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
 800d62a:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800d62c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d62e:	1d3b      	adds	r3, r7, #4
 800d630:	4618      	mov	r0, r3
 800d632:	f000 fdc8 	bl	800e1c6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d636:	462a      	mov	r2, r5
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	4620      	mov	r0, r4
 800d63c:	f000 fdce 	bl	800e1dc <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d640:	4603      	mov	r3, r0
    }
 800d642:	4618      	mov	r0, r3
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bdb0      	pop	{r4, r5, r7, pc}

0800d64a <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d006      	beq.n	800d668 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x1e>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6839      	ldr	r1, [r7, #0]
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 fdcc 	bl	800e1fc <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>
 800d664:	4603      	mov	r3, r0
 800d666:	e000      	b.n	800d66a <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x20>
 800d668:	2300      	movs	r3, #0
      }
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d672:	b580      	push	{r7, lr}
 800d674:	b086      	sub	sp, #24
 800d676:	af00      	add	r7, sp, #0
 800d678:	60f8      	str	r0, [r7, #12]
 800d67a:	60b9      	str	r1, [r7, #8]
 800d67c:	607a      	str	r2, [r7, #4]
 800d67e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d684:	e00e      	b.n	800d6a4 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d686:	6978      	ldr	r0, [r7, #20]
 800d688:	f7ff fb6b 	bl	800cd62 <_ZSt11__addressofIiEPT_RS0_>
 800d68c:	4603      	mov	r3, r0
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	4619      	mov	r1, r3
 800d692:	6838      	ldr	r0, [r7, #0]
 800d694:	f000 fb41 	bl	800dd1a <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3304      	adds	r3, #4
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	617b      	str	r3, [r7, #20]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d1ec      	bne.n	800d686 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d6ac:	697b      	ldr	r3, [r7, #20]
    }
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3718      	adds	r7, #24
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b084      	sub	sp, #16
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	60f8      	str	r0, [r7, #12]
 800d6be:	60b9      	str	r1, [r7, #8]
 800d6c0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	68b9      	ldr	r1, [r7, #8]
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f000 fda6 	bl	800e218 <_ZN2ei7EiAllocImE10deallocateEPmj>
 800d6cc:	bf00      	nop
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp) noexcept
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	bf14      	ite	ne
 800d6e2:	2301      	movne	r3, #1
 800d6e4:	2300      	moveq	r3, #0
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d6f4:	b590      	push	{r4, r7, lr}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d6fe:	6838      	ldr	r0, [r7, #0]
 800d700:	f7fe feed 	bl	800c4de <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d704:	4603      	mov	r3, r0
 800d706:	4622      	mov	r2, r4
 800d708:	4619      	mov	r1, r3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 fd91 	bl	800e232 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d710:	bf00      	nop
 800d712:	370c      	adds	r7, #12
 800d714:	46bd      	mov	sp, r7
 800d716:	bd90      	pop	{r4, r7, pc}

0800d718 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
 800d724:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f000 fd9c 	bl	800e264 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d72c:	4604      	mov	r4, r0
 800d72e:	68b8      	ldr	r0, [r7, #8]
 800d730:	f7fe f935 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d734:	4605      	mov	r5, r0
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7fe f931 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d73c:	4606      	mov	r6, r0
 800d73e:	6838      	ldr	r0, [r7, #0]
 800d740:	f7fe f938 	bl	800b9b4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d744:	4603      	mov	r3, r0
 800d746:	4632      	mov	r2, r6
 800d748:	4629      	mov	r1, r5
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 fd9b 	bl	800e286 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d750:	4603      	mov	r3, r0
      }
 800d752:	4618      	mov	r0, r3
 800d754:	3714      	adds	r7, #20
 800d756:	46bd      	mov	sp, r7
 800d758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d75a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d75a:	b590      	push	{r4, r7, lr}
 800d75c:	b085      	sub	sp, #20
 800d75e:	af00      	add	r7, sp, #0
 800d760:	60f8      	str	r0, [r7, #12]
 800d762:	60b9      	str	r1, [r7, #8]
 800d764:	4613      	mov	r3, r2
 800d766:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d768:	79fb      	ldrb	r3, [r7, #7]
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d109      	bne.n	800d782 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f000 fdae 	bl	800e2d0 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800d774:	4604      	mov	r4, r0
 800d776:	68b8      	ldr	r0, [r7, #8]
 800d778:	f000 fd74 	bl	800e264 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d77c:	4603      	mov	r3, r0
 800d77e:	6023      	str	r3, [r4, #0]
	    break;
 800d780:	e005      	b.n	800d78e <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d782:	79fb      	ldrb	r3, [r7, #7]
 800d784:	461a      	mov	r2, r3
 800d786:	68b9      	ldr	r1, [r7, #8]
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f000 fdad 	bl	800e2e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d78e:	2300      	movs	r3, #0
      }
 800d790:	4618      	mov	r0, r3
 800d792:	3714      	adds	r7, #20
 800d794:	46bd      	mov	sp, r7
 800d796:	bd90      	pop	{r4, r7, pc}

0800d798 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
	  { return true; }
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d7ae:	b590      	push	{r4, r7, lr}
 800d7b0:	b083      	sub	sp, #12
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d7b8:	6838      	ldr	r0, [r7, #0]
 800d7ba:	f7fe fecd 	bl	800c558 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fdc9 	bl	800e35c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d7ca:	bf00      	nop
 800d7cc:	370c      	adds	r7, #12
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd90      	pop	{r4, r7, pc}

0800d7d2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d7d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7d4:	b085      	sub	sp, #20
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	60f8      	str	r0, [r7, #12]
 800d7da:	60b9      	str	r1, [r7, #8]
 800d7dc:	607a      	str	r2, [r7, #4]
 800d7de:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f000 fdd4 	bl	800e38e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	68b8      	ldr	r0, [r7, #8]
 800d7ea:	f7fe f8d8 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7fe f8d4 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	6838      	ldr	r0, [r7, #0]
 800d7fa:	f7fe f8db 	bl	800b9b4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d7fe:	4603      	mov	r3, r0
 800d800:	4632      	mov	r2, r6
 800d802:	4629      	mov	r1, r5
 800d804:	4620      	mov	r0, r4
 800d806:	f000 fdd3 	bl	800e3b0 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d80a:	4603      	mov	r3, r0
      }
 800d80c:	4618      	mov	r0, r3
 800d80e:	3714      	adds	r7, #20
 800d810:	46bd      	mov	sp, r7
 800d812:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d814 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d814:	b590      	push	{r4, r7, lr}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	4613      	mov	r3, r2
 800d820:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d822:	79fb      	ldrb	r3, [r7, #7]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d109      	bne.n	800d83c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 fde6 	bl	800e3fa <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800d82e:	4604      	mov	r4, r0
 800d830:	68b8      	ldr	r0, [r7, #8]
 800d832:	f000 fdac 	bl	800e38e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d836:	4603      	mov	r3, r0
 800d838:	6023      	str	r3, [r4, #0]
	    break;
 800d83a:	e005      	b.n	800d848 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d83c:	79fb      	ldrb	r3, [r7, #7]
 800d83e:	461a      	mov	r2, r3
 800d840:	68b9      	ldr	r1, [r7, #8]
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 fde6 	bl	800e414 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d848:	2300      	movs	r3, #0
      }
 800d84a:	4618      	mov	r0, r3
 800d84c:	3714      	adds	r7, #20
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd90      	pop	{r4, r7, pc}

0800d852 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d852:	b580      	push	{r7, lr}
 800d854:	b082      	sub	sp, #8
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 fe13 	bl	800e488 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4618      	mov	r0, r3
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4618      	mov	r0, r3
 800d878:	f000 fe16 	bl	800e4a8 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d87c:	4603      	mov	r3, r0
 800d87e:	4618      	mov	r0, r3
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>:
 800d886:	b580      	push	{r7, lr}
 800d888:	b082      	sub	sp, #8
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fe15 	bl	800e4c0 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800d896:	4603      	mov	r3, r0
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 fe14 	bl	800e4d8 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b082      	sub	sp, #8
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 fe13 	bl	800e4f0 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f000 fe12 	bl	800e508 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3708      	adds	r7, #8
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}

0800d8ee <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d8ee:	b580      	push	{r7, lr}
 800d8f0:	b082      	sub	sp, #8
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 fe11 	bl	800e520 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d8fe:	4603      	mov	r3, r0
 800d900:	4618      	mov	r0, r3
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 fe11 	bl	800e538 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 fe19 	bl	800e550 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4618      	mov	r0, r3
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 fe1b 	bl	800e56c <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d936:	4603      	mov	r3, r0
 800d938:	4618      	mov	r0, r3
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7f3 fda5 	bl	800149a <_ZNSt13_Bit_iteratorC1Ev>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	3308      	adds	r3, #8
 800d954:	4618      	mov	r0, r3
 800d956:	f7f3 fda0 	bl	800149a <_ZNSt13_Bit_iteratorC1Ev>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	611a      	str	r2, [r3, #16]
	{ }
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4618      	mov	r0, r3
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 800d96a:	b5b0      	push	{r4, r5, r7, lr}
 800d96c:	b088      	sub	sp, #32
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 800d972:	f107 030c 	add.w	r3, r7, #12
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff ffe2 	bl	800d940 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	461d      	mov	r5, r3
 800d980:	f107 040c 	add.w	r4, r7, #12
 800d984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d988:	6823      	ldr	r3, [r4, #0]
 800d98a:	602b      	str	r3, [r5, #0]
 800d98c:	bf00      	nop
 800d98e:	3720      	adds	r7, #32
 800d990:	46bd      	mov	sp, r7
 800d992:	bdb0      	pop	{r4, r5, r7, pc}

0800d994 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d99e:	6839      	ldr	r1, [r7, #0]
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fdef 	bl	800e584 <_ZN2ei7EiAllocImE8allocateEj>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	370c      	adds	r7, #12
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800d9c6:	b480      	push	{r7}
 800d9c8:	b083      	sub	sp, #12
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d9f2:	b480      	push	{r7}
 800d9f4:	b083      	sub	sp, #12
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800da08:	b590      	push	{r4, r7, lr}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800da14:	68fc      	ldr	r4, [r7, #12]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7fe ffcd 	bl	800c9b6 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800da1c:	4603      	mov	r3, r0
 800da1e:	4619      	mov	r1, r3
 800da20:	4620      	mov	r0, r4
 800da22:	f000 fdcc 	bl	800e5be <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	1d1c      	adds	r4, r3, #4
 800da2a:	68b8      	ldr	r0, [r7, #8]
 800da2c:	f7ff ffe1 	bl	800d9f2 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800da30:	4603      	mov	r3, r0
 800da32:	4619      	mov	r1, r3
 800da34:	4620      	mov	r0, r4
 800da36:	f000 fdd5 	bl	800e5e4 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
	{ }
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	bd90      	pop	{r4, r7, pc}

0800da44 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fdda 	bl	800e606 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 800da52:	4603      	mov	r3, r0
 800da54:	4618      	mov	r0, r3
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4618      	mov	r0, r3
 800da68:	f000 fddb 	bl	800e622 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800da6c:	4603      	mov	r3, r0
 800da6e:	4618      	mov	r0, r3
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800da76:	b580      	push	{r7, lr}
 800da78:	b082      	sub	sp, #8
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800da7e:	2100      	movs	r1, #0
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fdda 	bl	800e63a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>
 800da86:	4603      	mov	r3, r0
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800da9a:	6839      	ldr	r1, [r7, #0]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 fdd7 	bl	800e650 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800daa2:	bf00      	nop
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800daaa:	b40e      	push	{r1, r2, r3}
 800daac:	b580      	push	{r7, lr}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800dab4:	6978      	ldr	r0, [r7, #20]
 800dab6:	f000 fddd 	bl	800e674 <_ZSt8_DestroyIfEvPT_>
 800daba:	bf00      	nop
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dac4:	b003      	add	sp, #12
 800dac6:	4770      	bx	lr

0800dac8 <_ZN2ei7EiAllocIfE10deallocateEPfj>:
        get_allocs()[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 800dad4:	68b8      	ldr	r0, [r7, #8]
 800dad6:	f009 fc79 	bl	80173cc <_Z7ei_freePv>
#endif
    }
 800dada:	bf00      	nop
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
 800daea:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	60fb      	str	r3, [r7, #12]
 800daf8:	f107 020c 	add.w	r2, r7, #12
 800dafc:	f107 0308 	add.w	r3, r7, #8
 800db00:	4611      	mov	r1, r2
 800db02:	4618      	mov	r0, r3
 800db04:	f7fd fd90 	bl	800b628 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800db12:	b590      	push	{r4, r7, lr}
 800db14:	b085      	sub	sp, #20
 800db16:	af00      	add	r7, sp, #0
 800db18:	60f8      	str	r0, [r7, #12]
 800db1a:	60b9      	str	r1, [r7, #8]
 800db1c:	607a      	str	r2, [r7, #4]
 800db1e:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800db20:	4623      	mov	r3, r4
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	68b9      	ldr	r1, [r7, #8]
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f000 fdae 	bl	800e688 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800db2c:	463b      	mov	r3, r7
 800db2e:	461a      	mov	r2, r3
 800db30:	68b9      	ldr	r1, [r7, #8]
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f000 fddb 	bl	800e6ee <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
    }
 800db38:	bf00      	nop
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd90      	pop	{r4, r7, pc}

0800db40 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800db40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db42:	b089      	sub	sp, #36	@ 0x24
 800db44:	af02      	add	r7, sp, #8
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800db4c:	f107 020c 	add.w	r2, r7, #12
 800db50:	f107 0308 	add.w	r3, r7, #8
 800db54:	4611      	mov	r1, r2
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff f81a 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	da00      	bge.n	800db64 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_+0x24>
 800db62:	3301      	adds	r3, #1
 800db64:	105b      	asrs	r3, r3, #1
 800db66:	461a      	mov	r2, r3
 800db68:	f107 030c 	add.w	r3, r7, #12
 800db6c:	4611      	mov	r1, r2
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff ffb7 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800db74:	4603      	mov	r3, r0
 800db76:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800db78:	f107 030c 	add.w	r3, r7, #12
 800db7c:	2101      	movs	r1, #1
 800db7e:	4618      	mov	r0, r3
 800db80:	f7ff ffaf 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800db84:	4604      	mov	r4, r0
 800db86:	f107 0308 	add.w	r3, r7, #8
 800db8a:	2101      	movs	r1, #1
 800db8c:	4618      	mov	r0, r3
 800db8e:	f000 fdd5 	bl	800e73c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>
 800db92:	4603      	mov	r3, r0
 800db94:	f88d 5000 	strb.w	r5, [sp]
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	4621      	mov	r1, r4
 800db9c:	68f8      	ldr	r0, [r7, #12]
 800db9e:	f000 fde6 	bl	800e76e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800dba2:	f107 030c 	add.w	r3, r7, #12
 800dba6:	2101      	movs	r1, #1
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7ff ff9a 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dbae:	4633      	mov	r3, r6
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	68b9      	ldr	r1, [r7, #8]
 800dbb4:	f000 fe30 	bl	800e818 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>
 800dbb8:	4603      	mov	r3, r0
    }
 800dbba:	4618      	mov	r0, r3
 800dbbc:	371c      	adds	r7, #28
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbc2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800dbc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbc4:	b087      	sub	sp, #28
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	60f8      	str	r0, [r7, #12]
 800dbca:	60b9      	str	r1, [r7, #8]
 800dbcc:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800dbce:	f107 0208 	add.w	r2, r7, #8
 800dbd2:	f107 030c 	add.w	r3, r7, #12
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f000 fe65 	bl	800e8a8 <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d150      	bne.n	800dc86 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800dbe4:	f107 030c 	add.w	r3, r7, #12
 800dbe8:	2101      	movs	r1, #1
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7ff ff79 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	617b      	str	r3, [r7, #20]
 800dbf4:	e03b      	b.n	800dc6e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xac>
	  if (__comp(__i, __first))
 800dbf6:	1d3b      	adds	r3, r7, #4
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	6979      	ldr	r1, [r7, #20]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f000 fe6b 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d026      	beq.n	800dc56 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800dc08:	f107 0314 	add.w	r3, r7, #20
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fc f91f 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800dc12:	4603      	mov	r3, r0
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fe fae1 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800dc20:	f107 0314 	add.w	r3, r7, #20
 800dc24:	2101      	movs	r1, #1
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff ff5b 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	461a      	mov	r2, r3
 800dc30:	6979      	ldr	r1, [r7, #20]
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f000 fe75 	bl	800e922 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>
	      *__first = _GLIBCXX_MOVE(__val);
 800dc38:	f107 0310 	add.w	r3, r7, #16
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7fe facd 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800dc42:	4604      	mov	r4, r0
 800dc44:	f107 030c 	add.w	r3, r7, #12
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7fc f901 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800dc4e:	4602      	mov	r2, r0
 800dc50:	6823      	ldr	r3, [r4, #0]
 800dc52:	6013      	str	r3, [r2, #0]
 800dc54:	e006      	b.n	800dc64 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800dc56:	4630      	mov	r0, r6
 800dc58:	f7f3 fb0e 	bl	8001278 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	6978      	ldr	r0, [r7, #20]
 800dc60:	f000 fe77 	bl	800e952 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800dc64:	f107 0314 	add.w	r3, r7, #20
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fc f8e1 	bl	8009e30 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800dc6e:	f107 0208 	add.w	r2, r7, #8
 800dc72:	f107 0314 	add.w	r3, r7, #20
 800dc76:	4611      	mov	r1, r2
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fc f8c1 	bl	8009e00 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1b8      	bne.n	800dbf6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x34>
 800dc84:	e000      	b.n	800dc88 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc6>
      if (__first == __last) return;
 800dc86:	bf00      	nop
    }
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc8e <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800dc8e:	b5b0      	push	{r4, r5, r7, lr}
 800dc90:	b086      	sub	sp, #24
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	60f8      	str	r0, [r7, #12]
 800dc96:	60b9      	str	r1, [r7, #8]
 800dc98:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	617b      	str	r3, [r7, #20]
 800dc9e:	e00b      	b.n	800dcb8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800dca0:	4628      	mov	r0, r5
 800dca2:	f7f3 fae9 	bl	8001278 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800dca6:	4621      	mov	r1, r4
 800dca8:	6978      	ldr	r0, [r7, #20]
 800dcaa:	f000 fe52 	bl	800e952 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dcae:	f107 0314 	add.w	r3, r7, #20
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fc f8bc 	bl	8009e30 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800dcb8:	f107 0208 	add.w	r2, r7, #8
 800dcbc:	f107 0314 	add.w	r3, r7, #20
 800dcc0:	4611      	mov	r1, r2
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fc f89c 	bl	8009e00 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d1e8      	bne.n	800dca0 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x12>
    }
 800dcce:	bf00      	nop
 800dcd0:	bf00      	nop
 800dcd2:	3718      	adds	r7, #24
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bdb0      	pop	{r4, r5, r7, pc}

0800dcd8 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800dce0:	2100      	movs	r1, #0
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 fe80 	bl	800e9e8 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>
 800dce8:	4603      	mov	r3, r0
 800dcea:	4618      	mov	r0, r3
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800dcf2:	b480      	push	{r7}
 800dcf4:	b083      	sub	sp, #12
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	601a      	str	r2, [r3, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	605a      	str	r2, [r3, #4]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	609a      	str	r2, [r3, #8]
	{ }
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	370c      	adds	r7, #12
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b084      	sub	sp, #16
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	60f8      	str	r0, [r7, #12]
 800dd22:	60b9      	str	r1, [r7, #8]
 800dd24:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fe69 	bl	800e9fe <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	461a      	mov	r2, r3
 800dd30:	68b9      	ldr	r1, [r7, #8]
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f000 fe6e 	bl	800ea14 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800dd38:	bf00      	nop
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800dd40:	b40e      	push	{r1, r2, r3}
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b083      	sub	sp, #12
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800dd4a:	6978      	ldr	r0, [r7, #20]
 800dd4c:	f000 fe78 	bl	800ea40 <_ZSt8_DestroyIiEvPT_>
 800dd50:	bf00      	nop
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd5a:	b003      	add	sp, #12
 800dd5c:	4770      	bx	lr

0800dd5e <_ZN2ei7EiAllocIiE10deallocateEPij>:
    void deallocate(T *p, size_t n) noexcept
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b084      	sub	sp, #16
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	60f8      	str	r0, [r7, #12]
 800dd66:	60b9      	str	r1, [r7, #8]
 800dd68:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800dd6a:	68b8      	ldr	r0, [r7, #8]
 800dd6c:	f009 fb2e 	bl	80173cc <_Z7ei_freePv>
    }
 800dd70:	bf00      	nop
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>:
	_S_select(_Alloc2& __a, ...)
 800dd78:	b40f      	push	{r0, r1, r2, r3}
 800dd7a:	b480      	push	{r7}
 800dd7c:	af00      	add	r7, sp, #0
	{ return __a; }
 800dd7e:	bf00      	nop
 800dd80:	4618      	mov	r0, r3
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	b004      	add	sp, #16
 800dd8a:	4770      	bx	lr

0800dd8c <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
    void deallocate(T *p, size_t n) noexcept
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800dd98:	68b8      	ldr	r0, [r7, #8]
 800dd9a:	f009 fb17 	bl	80173cc <_Z7ei_freePv>
    }
 800dd9e:	bf00      	nop
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800dda6:	b40e      	push	{r1, r2, r3}
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800ddb0:	6978      	ldr	r0, [r7, #20]
 800ddb2:	f000 fe4f 	bl	800ea54 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 800ddb6:	bf00      	nop
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddc0:	b003      	add	sp, #12
 800ddc2:	4770      	bx	lr

0800ddc4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f000 fe64 	bl	800ea9c <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f000 fe46 	bl	800ea68 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 800dddc:	4603      	mov	r3, r0
 800ddde:	4618      	mov	r0, r3
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b082      	sub	sp, #8
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ddf0:	6839      	ldr	r1, [r7, #0]
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 fe5d 	bl	800eab2 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3708      	adds	r7, #8
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	60f8      	str	r0, [r7, #12]
 800de0a:	60b9      	str	r1, [r7, #8]
 800de0c:	607a      	str	r2, [r7, #4]
 800de0e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	68b9      	ldr	r1, [r7, #8]
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f000 fe5c 	bl	800ead4 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800de1c:	4603      	mov	r3, r0
      }
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800de2e:	f107 030c 	add.w	r3, r7, #12
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	4618      	mov	r0, r3
 800de36:	f000 fe6a 	bl	800eb0e <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	4618      	mov	r0, r3
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800de44:	b590      	push	{r4, r7, lr}
 800de46:	b087      	sub	sp, #28
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
 800de50:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800de56:	e016      	b.n	800de86 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800de58:	6978      	ldr	r0, [r7, #20]
 800de5a:	f7fe ffc6 	bl	800cdea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800de5e:	4604      	mov	r4, r0
 800de60:	f107 030c 	add.w	r3, r7, #12
 800de64:	4618      	mov	r0, r3
 800de66:	f000 fe86 	bl	800eb76 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 800de6a:	4603      	mov	r3, r0
 800de6c:	461a      	mov	r2, r3
 800de6e:	4621      	mov	r1, r4
 800de70:	6838      	ldr	r0, [r7, #0]
 800de72:	f000 fe8c 	bl	800eb8e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800de76:	f107 030c 	add.w	r3, r7, #12
 800de7a:	4618      	mov	r0, r3
 800de7c:	f000 fe6a 	bl	800eb54 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	3308      	adds	r3, #8
 800de84:	617b      	str	r3, [r7, #20]
 800de86:	f107 0208 	add.w	r2, r7, #8
 800de8a:	f107 030c 	add.w	r3, r7, #12
 800de8e:	4611      	mov	r1, r2
 800de90:	4618      	mov	r0, r3
 800de92:	f000 fe4e 	bl	800eb32 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1dd      	bne.n	800de58 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x14>
	  return __cur;
 800de9c:	697b      	ldr	r3, [r7, #20]
    }
 800de9e:	4618      	mov	r0, r3
 800dea0:	371c      	adds	r7, #28
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd90      	pop	{r4, r7, pc}

0800dea6 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b084      	sub	sp, #16
 800deaa:	af00      	add	r7, sp, #0
 800deac:	60f8      	str	r0, [r7, #12]
 800deae:	60b9      	str	r1, [r7, #8]
 800deb0:	607a      	str	r2, [r7, #4]
 800deb2:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800deb4:	783b      	ldrb	r3, [r7, #0]
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	68b9      	ldr	r1, [r7, #8]
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f000 fe7a 	bl	800ebb4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800dec0:	463b      	mov	r3, r7
 800dec2:	461a      	mov	r2, r3
 800dec4:	68b9      	ldr	r1, [r7, #8]
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	f000 fea7 	bl	800ec1a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 800decc:	bf00      	nop
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b089      	sub	sp, #36	@ 0x24
 800ded8:	af02      	add	r7, sp, #8
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800dee0:	f107 020c 	add.w	r2, r7, #12
 800dee4:	f107 0308 	add.w	r3, r7, #8
 800dee8:	4611      	mov	r1, r2
 800deea:	4618      	mov	r0, r3
 800deec:	f7ff f801 	bl	800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	da00      	bge.n	800def8 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_+0x24>
 800def6:	3301      	adds	r3, #1
 800def8:	105b      	asrs	r3, r3, #1
 800defa:	461a      	mov	r2, r3
 800defc:	f107 030c 	add.w	r3, r7, #12
 800df00:	4611      	mov	r1, r2
 800df02:	4618      	mov	r0, r3
 800df04:	f000 f829 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800df08:	4603      	mov	r3, r0
 800df0a:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800df0c:	f107 030c 	add.w	r3, r7, #12
 800df10:	2101      	movs	r1, #1
 800df12:	4618      	mov	r0, r3
 800df14:	f000 f821 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800df18:	4604      	mov	r4, r0
 800df1a:	f107 0308 	add.w	r3, r7, #8
 800df1e:	2101      	movs	r1, #1
 800df20:	4618      	mov	r0, r3
 800df22:	f000 fea1 	bl	800ec68 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 800df26:	4602      	mov	r2, r0
 800df28:	793b      	ldrb	r3, [r7, #4]
 800df2a:	f88d 3000 	strb.w	r3, [sp]
 800df2e:	4613      	mov	r3, r2
 800df30:	697a      	ldr	r2, [r7, #20]
 800df32:	4621      	mov	r1, r4
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f000 feb0 	bl	800ec9a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800df3a:	f107 030c 	add.w	r3, r7, #12
 800df3e:	2101      	movs	r1, #1
 800df40:	4618      	mov	r0, r3
 800df42:	f000 f80a 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800df46:	793b      	ldrb	r3, [r7, #4]
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	68b9      	ldr	r1, [r7, #8]
 800df4c:	f000 fefa 	bl	800ed44 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 800df50:	4603      	mov	r3, r0
    }
 800df52:	4618      	mov	r0, r3
 800df54:	371c      	adds	r7, #28
 800df56:	46bd      	mov	sp, r7
 800df58:	bd90      	pop	{r4, r7, pc}

0800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b084      	sub	sp, #16
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	00db      	lsls	r3, r3, #3
 800df6c:	4413      	add	r3, r2
 800df6e:	60fb      	str	r3, [r7, #12]
 800df70:	f107 020c 	add.w	r2, r7, #12
 800df74:	f107 0308 	add.w	r3, r7, #8
 800df78:	4611      	mov	r1, r2
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fd fe58 	bl	800bc30 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}

0800df8a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800df8a:	b5b0      	push	{r4, r5, r7, lr}
 800df8c:	b088      	sub	sp, #32
 800df8e:	af00      	add	r7, sp, #0
 800df90:	60f8      	str	r0, [r7, #12]
 800df92:	60b9      	str	r1, [r7, #8]
 800df94:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800df96:	f107 0208 	add.w	r2, r7, #8
 800df9a:	f107 030c 	add.w	r3, r7, #12
 800df9e:	4611      	mov	r1, r2
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f000 ff17 	bl	800edd4 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d157      	bne.n	800e05c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800dfac:	f107 030c 	add.w	r3, r7, #12
 800dfb0:	2101      	movs	r1, #1
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7ff ffd1 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	61fb      	str	r3, [r7, #28]
 800dfbc:	e042      	b.n	800e044 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xba>
	  if (__comp(__i, __first))
 800dfbe:	1d3b      	adds	r3, r7, #4
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	69f9      	ldr	r1, [r7, #28]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 ff2e 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d02d      	beq.n	800e02c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xa2>
		__val = _GLIBCXX_MOVE(*__i);
 800dfd0:	f107 031c 	add.w	r3, r7, #28
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 ff42 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 ff4a 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	f107 0314 	add.w	r3, r7, #20
 800dfe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfec:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800dff0:	f107 031c 	add.w	r3, r7, #28
 800dff4:	2101      	movs	r1, #1
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7ff ffaf 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dffc:	4603      	mov	r3, r0
 800dffe:	461a      	mov	r2, r3
 800e000:	69f9      	ldr	r1, [r7, #28]
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f000 ff42 	bl	800ee8c <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 800e008:	f107 0314 	add.w	r3, r7, #20
 800e00c:	4618      	mov	r0, r3
 800e00e:	f000 ff32 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800e012:	4604      	mov	r4, r0
 800e014:	f107 030c 	add.w	r3, r7, #12
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 ff20 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800e01e:	4603      	mov	r3, r0
 800e020:	4622      	mov	r2, r4
 800e022:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e026:	e883 0003 	stmia.w	r3, {r0, r1}
 800e02a:	e006      	b.n	800e03a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb0>
	    std::__unguarded_linear_insert(__i,
 800e02c:	7938      	ldrb	r0, [r7, #4]
 800e02e:	f000 ff45 	bl	800eebc <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800e032:	4629      	mov	r1, r5
 800e034:	69f8      	ldr	r0, [r7, #28]
 800e036:	f000 ff55 	bl	800eee4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800e03a:	f107 031c 	add.w	r3, r7, #28
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 fee0 	bl	800ee04 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800e044:	f107 0208 	add.w	r2, r7, #8
 800e048:	f107 031c 	add.w	r3, r7, #28
 800e04c:	4611      	mov	r1, r2
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fe ffc9 	bl	800cfe6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800e054:	4603      	mov	r3, r0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1b1      	bne.n	800dfbe <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x34>
 800e05a:	e000      	b.n	800e05e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd4>
      if (__first == __last) return;
 800e05c:	bf00      	nop
    }
 800e05e:	3720      	adds	r7, #32
 800e060:	46bd      	mov	sp, r7
 800e062:	bdb0      	pop	{r4, r5, r7, pc}

0800e064 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800e064:	b590      	push	{r4, r7, lr}
 800e066:	b087      	sub	sp, #28
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	617b      	str	r3, [r7, #20]
 800e074:	e00b      	b.n	800e08e <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x2a>
	std::__unguarded_linear_insert(__i,
 800e076:	7938      	ldrb	r0, [r7, #4]
 800e078:	f000 ff20 	bl	800eebc <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800e07c:	4621      	mov	r1, r4
 800e07e:	6978      	ldr	r0, [r7, #20]
 800e080:	f000 ff30 	bl	800eee4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e084:	f107 0314 	add.w	r3, r7, #20
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 febb 	bl	800ee04 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800e08e:	f107 0208 	add.w	r2, r7, #8
 800e092:	f107 0314 	add.w	r3, r7, #20
 800e096:	4611      	mov	r1, r2
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fe ffa4 	bl	800cfe6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1e8      	bne.n	800e076 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x12>
    }
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop
 800e0a8:	371c      	adds	r7, #28
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd90      	pop	{r4, r7, pc}

0800e0ae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e0ae:	b590      	push	{r4, r7, lr}
 800e0b0:	b085      	sub	sp, #20
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	60f8      	str	r0, [r7, #12]
 800e0b6:	60b9      	str	r1, [r7, #8]
 800e0b8:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	2004      	movs	r0, #4
 800e0c0:	f7f3 f880 	bl	80011c4 <_ZnwjPv>
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f7ff f92b 	bl	800d322 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	6023      	str	r3, [r4, #0]
	}
 800e0d2:	bf00      	nop
 800e0d4:	3714      	adds	r7, #20
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd90      	pop	{r4, r7, pc}

0800e0da <_ZN2ei7EiAllocIfE8allocateEj>:
    T *allocate(size_t n)
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b084      	sub	sp, #16
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f009 f954 	bl	8017398 <_Z9ei_mallocj>
 800e0f0:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e0f2:	68bb      	ldr	r3, [r7, #8]
    }
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800e0fc:	b5b0      	push	{r4, r5, r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f000 ff3f 	bl	800ef8e <_ZSt12__niter_baseIPfET_S1_>
 800e110:	4604      	mov	r4, r0
 800e112:	68b8      	ldr	r0, [r7, #8]
 800e114:	f000 ff3b 	bl	800ef8e <_ZSt12__niter_baseIPfET_S1_>
 800e118:	4605      	mov	r5, r0
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 ff37 	bl	800ef8e <_ZSt12__niter_baseIPfET_S1_>
 800e120:	4602      	mov	r2, r0
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	4629      	mov	r1, r5
 800e126:	4620      	mov	r0, r4
 800e128:	f000 ff3c 	bl	800efa4 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800e12c:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800e12e:	4618      	mov	r0, r3
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bdb0      	pop	{r4, r5, r7, pc}

0800e136 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800e136:	b480      	push	{r7}
 800e138:	b083      	sub	sp, #12
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 ff49 	bl	800eff0 <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>
 800e15e:	4603      	mov	r3, r0
 800e160:	f083 0301 	eor.w	r3, r3, #1
 800e164:	b2db      	uxtb	r3, r3
 800e166:	4618      	mov	r0, r3
 800e168:	3708      	adds	r7, #8
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <_ZNSt13move_iteratorIPfEppEv>:
      operator++()
 800e16e:	b480      	push	{r7}
 800e170:	b083      	sub	sp, #12
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	1d1a      	adds	r2, r3, #4
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	601a      	str	r2, [r3, #0]
	return *this;
 800e180:	687b      	ldr	r3, [r7, #4]
      }
 800e182:	4618      	mov	r0, r3
 800e184:	370c      	adds	r7, #12
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <_ZNKSt13move_iteratorIPfEdeEv>:
      operator*() const
 800e18e:	b480      	push	{r7}
 800e190:	b083      	sub	sp, #12
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4618      	mov	r0, r3
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e1a6:	b480      	push	{r7}
 800e1a8:	b085      	sub	sp, #20
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	60f8      	str	r0, [r7, #12]
 800e1ae:	60b9      	str	r1, [r7, #8]
 800e1b0:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e1b2:	68ba      	ldr	r2, [r7, #8]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	109b      	asrs	r3, r3, #2
    }
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr

0800e1c6 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800e1c6:	b480      	push	{r7}
 800e1c8:	b083      	sub	sp, #12
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e1ce:	bf00      	nop
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr

0800e1dc <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e1dc:	b480      	push	{r7}
 800e1de:	b085      	sub	sp, #20
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	109b      	asrs	r3, r3, #2
    }
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3714      	adds	r7, #20
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e206:	6839      	ldr	r1, [r7, #0]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 ff07 	bl	800f01c <_ZN2ei7EiAllocIiE8allocateEj>
 800e20e:	4603      	mov	r3, r0
 800e210:	4618      	mov	r0, r3
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800e224:	68b8      	ldr	r0, [r7, #8]
 800e226:	f009 f8d1 	bl	80173cc <_Z7ei_freePv>
    }
 800e22a:	bf00      	nop
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800e232:	b590      	push	{r4, r7, lr}
 800e234:	b085      	sub	sp, #20
 800e236:	af00      	add	r7, sp, #0
 800e238:	60f8      	str	r0, [r7, #12]
 800e23a:	60b9      	str	r1, [r7, #8]
 800e23c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f7f2 ffcc 	bl	80011dc <_ZNSt9_Any_data9_M_accessEv>
 800e244:	4603      	mov	r3, r0
 800e246:	4619      	mov	r1, r3
 800e248:	2004      	movs	r0, #4
 800e24a:	f7f2 ffbb 	bl	80011c4 <_ZnwjPv>
 800e24e:	4604      	mov	r4, r0
 800e250:	68b8      	ldr	r0, [r7, #8]
 800e252:	f7fe f944 	bl	800c4de <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e256:	4603      	mov	r3, r0
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	6023      	str	r3, [r4, #0]
	  }
 800e25c:	bf00      	nop
 800e25e:	3714      	adds	r7, #20
 800e260:	46bd      	mov	sp, r7
 800e262:	bd90      	pop	{r4, r7, pc}

0800e264 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 fee6 	bl	800f03e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 800e272:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f000 feee 	bl	800f056 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 800e27a:	4603      	mov	r3, r0
 800e27c:	bf00      	nop
	}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af02      	add	r7, sp, #8
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
 800e294:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f000 fee8 	bl	800f06c <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e29c:	4604      	mov	r4, r0
 800e29e:	68b8      	ldr	r0, [r7, #8]
 800e2a0:	f7fd fb7d 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7fd fb79 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	6838      	ldr	r0, [r7, #0]
 800e2b0:	f7fd fb80 	bl	800b9b4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	4633      	mov	r3, r6
 800e2ba:	462a      	mov	r2, r5
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4640      	mov	r0, r8
 800e2c0:	f000 fedf 	bl	800f082 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 800e2c4:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e2d0 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access() noexcept
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f7f2 ff7f 	bl	80011dc <_ZNSt9_Any_data9_M_accessEv>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e2e8:	b590      	push	{r4, r7, lr}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e2f6:	79fb      	ldrb	r3, [r7, #7]
 800e2f8:	2b03      	cmp	r3, #3
 800e2fa:	d82a      	bhi.n	800e352 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800e2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e304 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800e2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e302:	bf00      	nop
 800e304:	0800e315 	.word	0x0800e315
 800e308:	0800e323 	.word	0x0800e323
 800e30c:	0800e337 	.word	0x0800e337
 800e310:	0800e349 	.word	0x0800e349
	      __dest._M_access<const type_info*>() = nullptr;
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f000 f946 	bl	800e5a6 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2200      	movs	r2, #0
 800e31e:	601a      	str	r2, [r3, #0]
	      break;
 800e320:	e017      	b.n	800e352 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f7ff ffd4 	bl	800e2d0 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800e328:	4604      	mov	r4, r0
 800e32a:	68b8      	ldr	r0, [r7, #8]
 800e32c:	f7ff ff9a 	bl	800e264 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800e330:	4603      	mov	r3, r0
 800e332:	6023      	str	r3, [r4, #0]
	      break;
 800e334:	e00d      	b.n	800e352 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800e336:	68b8      	ldr	r0, [r7, #8]
 800e338:	f7ff ff94 	bl	800e264 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800e33c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800e33e:	4619      	mov	r1, r3
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f000 fec2 	bl	800f0ca <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800e346:	e004      	b.n	800e352 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800e348:	4621      	mov	r1, r4
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f000 fecf 	bl	800f0ee <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e350:	bf00      	nop
	  return false;
 800e352:	2300      	movs	r3, #0
	}
 800e354:	4618      	mov	r0, r3
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd90      	pop	{r4, r7, pc}

0800e35c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800e35c:	b590      	push	{r4, r7, lr}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f7f2 ff37 	bl	80011dc <_ZNSt9_Any_data9_M_accessEv>
 800e36e:	4603      	mov	r3, r0
 800e370:	4619      	mov	r1, r3
 800e372:	2004      	movs	r0, #4
 800e374:	f7f2 ff26 	bl	80011c4 <_ZnwjPv>
 800e378:	4604      	mov	r4, r0
 800e37a:	68b8      	ldr	r0, [r7, #8]
 800e37c:	f7fe f8ec 	bl	800c558 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800e380:	4603      	mov	r3, r0
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	6023      	str	r3, [r4, #0]
	  }
 800e386:	bf00      	nop
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd90      	pop	{r4, r7, pc}

0800e38e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800e38e:	b580      	push	{r7, lr}
 800e390:	b084      	sub	sp, #16
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 feb5 	bl	800f106 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800e39c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f000 febd 	bl	800f11e <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	bf00      	nop
	}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b4:	b086      	sub	sp, #24
 800e3b6:	af02      	add	r7, sp, #8
 800e3b8:	60f8      	str	r0, [r7, #12]
 800e3ba:	60b9      	str	r1, [r7, #8]
 800e3bc:	607a      	str	r2, [r7, #4]
 800e3be:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f000 feb7 	bl	800f134 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	68b8      	ldr	r0, [r7, #8]
 800e3ca:	f7fd fae8 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7fd fae4 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e3d6:	4606      	mov	r6, r0
 800e3d8:	6838      	ldr	r0, [r7, #0]
 800e3da:	f7fd faeb 	bl	800b9b4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	4633      	mov	r3, r6
 800e3e4:	462a      	mov	r2, r5
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	4640      	mov	r0, r8
 800e3ea:	f000 feae 	bl	800f14a <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800e3ee:	4603      	mov	r3, r0
    }
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e3fa <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access() noexcept
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7f2 feea 	bl	80011dc <_ZNSt9_Any_data9_M_accessEv>
 800e408:	4603      	mov	r3, r0
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
	...

0800e414 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e414:	b590      	push	{r4, r7, lr}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	4613      	mov	r3, r2
 800e420:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e422:	79fb      	ldrb	r3, [r7, #7]
 800e424:	2b03      	cmp	r3, #3
 800e426:	d82a      	bhi.n	800e47e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800e428:	a201      	add	r2, pc, #4	@ (adr r2, 800e430 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800e42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42e:	bf00      	nop
 800e430:	0800e441 	.word	0x0800e441
 800e434:	0800e44f 	.word	0x0800e44f
 800e438:	0800e463 	.word	0x0800e463
 800e43c:	0800e475 	.word	0x0800e475
	      __dest._M_access<const type_info*>() = nullptr;
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f000 f8b0 	bl	800e5a6 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800e446:	4603      	mov	r3, r0
 800e448:	2200      	movs	r2, #0
 800e44a:	601a      	str	r2, [r3, #0]
	      break;
 800e44c:	e017      	b.n	800e47e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f7ff ffd3 	bl	800e3fa <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800e454:	4604      	mov	r4, r0
 800e456:	68b8      	ldr	r0, [r7, #8]
 800e458:	f7ff ff99 	bl	800e38e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e45c:	4603      	mov	r3, r0
 800e45e:	6023      	str	r3, [r4, #0]
	      break;
 800e460:	e00d      	b.n	800e47e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800e462:	68b8      	ldr	r0, [r7, #8]
 800e464:	f7ff ff93 	bl	800e38e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e468:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800e46a:	4619      	mov	r1, r3
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f000 fe90 	bl	800f192 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800e472:	e004      	b.n	800e47e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800e474:	4621      	mov	r1, r4
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f000 fe9d 	bl	800f1b6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e47c:	bf00      	nop
	  return false;
 800e47e:	2300      	movs	r3, #0
	}
 800e480:	4618      	mov	r0, r3
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	bd90      	pop	{r4, r7, pc}

0800e488 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fe9c 	bl	800f1ce <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	4618      	mov	r0, r3
 800e49a:	f000 fea4 	bl	800f1e6 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 fea6 	bl	800f202 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fea7 	bl	800f21c <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 fea7 	bl	800f234 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 fea8 	bl	800f24e <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>
 800e4fe:	4603      	mov	r3, r0
 800e500:	4618      	mov	r0, r3
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fea9 	bl	800f268 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>
 800e516:	4603      	mov	r3, r0
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 feaa 	bl	800f282 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 800e52e:	4603      	mov	r3, r0
 800e530:	4618      	mov	r0, r3
 800e532:	3708      	adds	r7, #8
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>:
      _Tuple_impl()
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 feac 	bl	800f29e <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4618      	mov	r0, r3
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>:
      constexpr _Head_base()
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	4618      	mov	r0, r3
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 fe9d 	bl	800f2b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>
 800e57a:	4603      	mov	r3, r0
 800e57c:	4618      	mov	r0, r3
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f008 feff 	bl	8017398 <_Z9ei_mallocj>
 800e59a:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e59c:	68bb      	ldr	r3, [r7, #8]
    }
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3710      	adds	r7, #16
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b082      	sub	sp, #8
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7f2 fe14 	bl	80011dc <_ZNSt9_Any_data9_M_accessEv>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 800e5be:	b590      	push	{r4, r7, lr}
 800e5c0:	b083      	sub	sp, #12
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
 800e5c6:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800e5c8:	687c      	ldr	r4, [r7, #4]
 800e5ca:	6838      	ldr	r0, [r7, #0]
 800e5cc:	f7fe f9f3 	bl	800c9b6 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	f000 fe79 	bl	800f2cc <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
	{ }
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd90      	pop	{r4, r7, pc}

0800e5e4 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e5ee:	6838      	ldr	r0, [r7, #0]
 800e5f0:	f7ff f9ff 	bl	800d9f2 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	601a      	str	r2, [r3, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4618      	mov	r0, r3
 800e600:	3708      	adds	r7, #8
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e606:	b580      	push	{r7, lr}
 800e608:	b082      	sub	sp, #8
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	3304      	adds	r3, #4
 800e612:	4618      	mov	r0, r3
 800e614:	f000 fe6b 	bl	800f2ee <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 800e618:	4603      	mov	r3, r0
 800e61a:	4618      	mov	r0, r3
 800e61c:	3708      	adds	r7, #8
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}

0800e622 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e622:	b580      	push	{r7, lr}
 800e624:	b082      	sub	sp, #8
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fe6a 	bl	800f304 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 800e630:	4603      	mov	r3, r0
 800e632:	4618      	mov	r0, r3
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e63a:	b40f      	push	{r0, r1, r2, r3}
 800e63c:	b480      	push	{r7}
 800e63e:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800e640:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
	}
 800e644:	4618      	mov	r0, r3
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	b004      	add	sp, #16
 800e64e:	4770      	bx	lr

0800e650 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	4619      	mov	r1, r3
 800e65e:	2004      	movs	r0, #4
 800e660:	f7f2 fdb0 	bl	80011c4 <_ZnwjPv>
 800e664:	4603      	mov	r3, r0
 800e666:	f04f 0200 	mov.w	r2, #0
 800e66a:	601a      	str	r2, [r3, #0]
	}
 800e66c:	bf00      	nop
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <_ZSt8_DestroyIfEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 800e67c:	bf00      	nop
 800e67e:	370c      	adds	r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	607a      	str	r2, [r7, #4]
 800e694:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800e696:	463b      	mov	r3, r7
 800e698:	461a      	mov	r2, r3
 800e69a:	68b9      	ldr	r1, [r7, #8]
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	f000 fe3e 	bl	800f31e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	617b      	str	r3, [r7, #20]
 800e6a6:	e013      	b.n	800e6d0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x48>
	if (__comp(__i, __first))
 800e6a8:	463b      	mov	r3, r7
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	6979      	ldr	r1, [r7, #20]
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f000 f912 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d005      	beq.n	800e6c6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800e6ba:	463b      	mov	r3, r7
 800e6bc:	697a      	ldr	r2, [r7, #20]
 800e6be:	68b9      	ldr	r1, [r7, #8]
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	f000 fe9b 	bl	800f3fc <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e6c6:	f107 0314 	add.w	r3, r7, #20
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fb fbb0 	bl	8009e30 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800e6d0:	1d3a      	adds	r2, r7, #4
 800e6d2:	f107 0314 	add.w	r3, r7, #20
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f000 fe77 	bl	800f3cc <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1e1      	bne.n	800e6a8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x20>
    }
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b084      	sub	sp, #16
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	60f8      	str	r0, [r7, #12]
 800e6f6:	60b9      	str	r1, [r7, #8]
 800e6f8:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800e6fa:	e00a      	b.n	800e712 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x24>
	{
	  --__last;
 800e6fc:	f107 0308 	add.w	r3, r7, #8
 800e700:	4618      	mov	r0, r3
 800e702:	f000 febb 	bl	800f47c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	68b9      	ldr	r1, [r7, #8]
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f000 fe75 	bl	800f3fc <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      while (__last - __first > 1)
 800e712:	f107 020c 	add.w	r2, r7, #12
 800e716:	f107 0308 	add.w	r3, r7, #8
 800e71a:	4611      	mov	r1, r2
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7fe fa37 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800e722:	4603      	mov	r3, r0
 800e724:	2b01      	cmp	r3, #1
 800e726:	bfcc      	ite	gt
 800e728:	2301      	movgt	r3, #1
 800e72a:	2300      	movle	r3, #0
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e4      	bne.n	800e6fc <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xe>
	}
    }
 800e732:	bf00      	nop
 800e734:	bf00      	nop
 800e736:	3710      	adds	r7, #16
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	425b      	negs	r3, r3
 800e750:	4413      	add	r3, r2
 800e752:	60fb      	str	r3, [r7, #12]
 800e754:	f107 020c 	add.w	r2, r7, #12
 800e758:	f107 0308 	add.w	r3, r7, #8
 800e75c:	4611      	mov	r1, r2
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fc ff62 	bl	800b628 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	607a      	str	r2, [r7, #4]
 800e77a:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	68b9      	ldr	r1, [r7, #8]
 800e780:	f107 0018 	add.w	r0, r7, #24
 800e784:	f000 f8a8 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e788:	4603      	mov	r3, r0
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d020      	beq.n	800e7d0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x62>
	  if (__comp(__b, __c))
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	6879      	ldr	r1, [r7, #4]
 800e792:	f107 0018 	add.w	r0, r7, #24
 800e796:	f000 f89f 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d004      	beq.n	800e7aa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f000 fe7a 	bl	800f49c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e7a8:	e032      	b.n	800e810 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	  else if (__comp(__a, __c))
 800e7aa:	683a      	ldr	r2, [r7, #0]
 800e7ac:	68b9      	ldr	r1, [r7, #8]
 800e7ae:	f107 0018 	add.w	r0, r7, #24
 800e7b2:	f000 f891 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d004      	beq.n	800e7c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x58>
	    std::iter_swap(__result, __c);
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f000 fe6c 	bl	800f49c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e7c4:	e024      	b.n	800e810 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800e7c6:	68b9      	ldr	r1, [r7, #8]
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f000 fe67 	bl	800f49c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e7ce:	e01f      	b.n	800e810 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__a, __c))
 800e7d0:	683a      	ldr	r2, [r7, #0]
 800e7d2:	68b9      	ldr	r1, [r7, #8]
 800e7d4:	f107 0018 	add.w	r0, r7, #24
 800e7d8:	f000 f87e 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d004      	beq.n	800e7ec <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x7e>
	std::iter_swap(__result, __a);
 800e7e2:	68b9      	ldr	r1, [r7, #8]
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f000 fe59 	bl	800f49c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e7ea:	e011      	b.n	800e810 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__b, __c))
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	6879      	ldr	r1, [r7, #4]
 800e7f0:	f107 0018 	add.w	r0, r7, #24
 800e7f4:	f000 f870 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d004      	beq.n	800e808 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x9a>
	std::iter_swap(__result, __c);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f000 fe4b 	bl	800f49c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e806:	e003      	b.n	800e810 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	std::iter_swap(__result, __b);
 800e808:	6879      	ldr	r1, [r7, #4]
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	f000 fe46 	bl	800f49c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e810:	bf00      	nop
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
 800e824:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800e826:	e004      	b.n	800e832 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
	    ++__first;
 800e828:	f107 030c 	add.w	r3, r7, #12
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fb faff 	bl	8009e30 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e832:	463b      	mov	r3, r7
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	68f9      	ldr	r1, [r7, #12]
 800e838:	4618      	mov	r0, r3
 800e83a:	f000 f84d 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d1f1      	bne.n	800e828 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x10>
	  --__last;
 800e844:	f107 0308 	add.w	r3, r7, #8
 800e848:	4618      	mov	r0, r3
 800e84a:	f000 fe17 	bl	800f47c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e84e:	e004      	b.n	800e85a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x42>
	    --__last;
 800e850:	f107 0308 	add.w	r3, r7, #8
 800e854:	4618      	mov	r0, r3
 800e856:	f000 fe11 	bl	800f47c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e85a:	463b      	mov	r3, r7
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	6879      	ldr	r1, [r7, #4]
 800e860:	4618      	mov	r0, r3
 800e862:	f000 f839 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1f1      	bne.n	800e850 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x38>
	  if (!(__first < __last))
 800e86c:	f107 0208 	add.w	r2, r7, #8
 800e870:	f107 030c 	add.w	r3, r7, #12
 800e874:	4611      	mov	r1, r2
 800e876:	4618      	mov	r0, r3
 800e878:	f000 fda8 	bl	800f3cc <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e87c:	4603      	mov	r3, r0
 800e87e:	f083 0301 	eor.w	r3, r3, #1
 800e882:	b2db      	uxtb	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d001      	beq.n	800e88c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x74>
	    return __first;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	e009      	b.n	800e8a0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x88>
	  std::iter_swap(__first, __last);
 800e88c:	68b9      	ldr	r1, [r7, #8]
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f000 fe04 	bl	800f49c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
	  ++__first;
 800e894:	f107 030c 	add.w	r3, r7, #12
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fb fac9 	bl	8009e30 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e89e:	e7c8      	b.n	800e832 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
    }
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e8a8:	b590      	push	{r4, r7, lr}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7fc fec8 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	681c      	ldr	r4, [r3, #0]
 800e8bc:	6838      	ldr	r0, [r7, #0]
 800e8be:	f7fc fec3 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	429c      	cmp	r4, r3
 800e8c8:	bf0c      	ite	eq
 800e8ca:	2301      	moveq	r3, #1
 800e8cc:	2300      	movne	r3, #0
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	370c      	adds	r7, #12
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd90      	pop	{r4, r7, pc}

0800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	ed2d 8b02 	vpush	{d8}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800e8e8:	f107 0308 	add.w	r3, r7, #8
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fb faaf 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	ed93 8a00 	vldr	s16, [r3]
 800e8f8:	1d3b      	adds	r3, r7, #4
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fb faa8 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e900:	4603      	mov	r3, r0
 800e902:	edd3 7a00 	vldr	s15, [r3]
 800e906:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90e:	bf4c      	ite	mi
 800e910:	2301      	movmi	r3, #1
 800e912:	2300      	movpl	r3, #0
 800e914:	b2db      	uxtb	r3, r3
 800e916:	4618      	mov	r0, r3
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	ecbd 8b02 	vpop	{d8}
 800e920:	bd80      	pop	{r7, pc}

0800e922 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e922:	b590      	push	{r4, r7, lr}
 800e924:	b085      	sub	sp, #20
 800e926:	af00      	add	r7, sp, #0
 800e928:	60f8      	str	r0, [r7, #12]
 800e92a:	60b9      	str	r1, [r7, #8]
 800e92c:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f000 fdcb 	bl	800f4ca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e934:	4604      	mov	r4, r0
 800e936:	68b8      	ldr	r0, [r7, #8]
 800e938:	f000 fdc7 	bl	800f4ca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e93c:	4603      	mov	r3, r0
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	4619      	mov	r1, r3
 800e942:	4620      	mov	r0, r4
 800e944:	f000 fdcc 	bl	800f4e0 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>
 800e948:	4603      	mov	r3, r0
    }
 800e94a:	4618      	mov	r0, r3
 800e94c:	3714      	adds	r7, #20
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd90      	pop	{r4, r7, pc}

0800e952 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800e952:	b590      	push	{r4, r7, lr}
 800e954:	b085      	sub	sp, #20
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
 800e95a:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800e95c:	1d3b      	adds	r3, r7, #4
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fb fa76 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e964:	4603      	mov	r3, r0
 800e966:	4618      	mov	r0, r3
 800e968:	f7fd fc38 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e96c:	4603      	mov	r3, r0
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	60bb      	str	r3, [r7, #8]
      --__next;
 800e976:	f107 0308 	add.w	r3, r7, #8
 800e97a:	4618      	mov	r0, r3
 800e97c:	f000 fd7e 	bl	800f47c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e980:	e017      	b.n	800e9b2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800e982:	f107 0308 	add.w	r3, r7, #8
 800e986:	4618      	mov	r0, r3
 800e988:	f7fb fa62 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e98c:	4603      	mov	r3, r0
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fd fc24 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e994:	4604      	mov	r4, r0
 800e996:	1d3b      	adds	r3, r7, #4
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fb fa59 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	6823      	ldr	r3, [r4, #0]
 800e9a2:	6013      	str	r3, [r2, #0]
	  __last = __next;
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	607b      	str	r3, [r7, #4]
	  --__next;
 800e9a8:	f107 0308 	add.w	r3, r7, #8
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f000 fd65 	bl	800f47c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e9b2:	f107 010c 	add.w	r1, r7, #12
 800e9b6:	463b      	mov	r3, r7
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 fdb1 	bl	800f522 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1dd      	bne.n	800e982 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800e9c6:	f107 030c 	add.w	r3, r7, #12
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fd fc06 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	1d3b      	adds	r3, r7, #4
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7fb fa3b 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	6013      	str	r3, [r2, #0]
    }
 800e9e0:	bf00      	nop
 800e9e2:	3714      	adds	r7, #20
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd90      	pop	{r4, r7, pc}

0800e9e8 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e9e8:	b40f      	push	{r0, r1, r2, r3}
 800e9ea:	b480      	push	{r7}
 800e9ec:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800e9ee:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
	}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	b004      	add	sp, #16
 800e9fc:	4770      	bx	lr

0800e9fe <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e9fe:	b480      	push	{r7}
 800ea00:	b083      	sub	sp, #12
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800ea14:	b590      	push	{r4, r7, lr}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	4619      	mov	r1, r3
 800ea24:	2004      	movs	r0, #4
 800ea26:	f7f2 fbcd 	bl	80011c4 <_ZnwjPv>
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7ff ffe6 	bl	800e9fe <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800ea32:	4603      	mov	r3, r0
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	6023      	str	r3, [r4, #0]
	}
 800ea38:	bf00      	nop
 800ea3a:	3714      	adds	r7, #20
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd90      	pop	{r4, r7, pc}

0800ea40 <_ZSt8_DestroyIiEvPT_>:
    _Destroy(_Tp* __pointer)
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
    }
 800ea48:	bf00      	nop
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
    _Destroy(_Tp* __pointer)
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
    }
 800ea5c:	bf00      	nop
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ea70:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800ea74:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fd73 	bl	800f562 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ea80:	f107 0208 	add.w	r2, r7, #8
 800ea84:	f107 030c 	add.w	r3, r7, #12
 800ea88:	4611      	mov	r1, r2
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fb fb0b 	bl	800a0a6 <_ZSt3minIjERKT_S2_S2_>
 800ea90:	4603      	mov	r3, r0
 800ea92:	681b      	ldr	r3, [r3, #0]
      }
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	370c      	adds	r7, #12
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b084      	sub	sp, #16
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f008 fc68 	bl	8017398 <_Z9ei_mallocj>
 800eac8:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800eaca:	68bb      	ldr	r3, [r7, #8]
    }
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800ead4:	b5b0      	push	{r4, r5, r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 800eae2:	68f8      	ldr	r0, [r7, #12]
 800eae4:	f000 fd4a 	bl	800f57c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800eae8:	4604      	mov	r4, r0
 800eaea:	68b8      	ldr	r0, [r7, #8]
 800eaec:	f000 fd46 	bl	800f57c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800eaf0:	4605      	mov	r5, r0
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fd42 	bl	800f57c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	4629      	mov	r1, r5
 800eafe:	4620      	mov	r0, r4
 800eb00:	f000 fd47 	bl	800f592 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800eb04:	4603      	mov	r3, r0
    }
 800eb06:	4618      	mov	r0, r3
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bdb0      	pop	{r4, r5, r7, pc}

0800eb0e <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b082      	sub	sp, #8
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800eb18:	463b      	mov	r3, r7
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f000 fd5f 	bl	800f5de <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 800eb20:	4603      	mov	r3, r0
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	601a      	str	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b082      	sub	sp, #8
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
 800eb3a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800eb3c:	6839      	ldr	r1, [r7, #0]
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 fd58 	bl	800f5f4 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800eb44:	4603      	mov	r3, r0
 800eb46:	f083 0301 	eor.w	r3, r3, #1
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f103 0208 	add.w	r2, r3, #8
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	601a      	str	r2, [r3, #0]
	return *this;
 800eb68:	687b      	ldr	r3, [r7, #4]
      }
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr

0800eb76 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 800eb76:	b480      	push	{r7}
 800eb78:	b083      	sub	sp, #12
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4618      	mov	r0, r3
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b084      	sub	sp, #16
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	60f8      	str	r0, [r7, #12]
 800eb96:	60b9      	str	r1, [r7, #8]
 800eb98:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 fd40 	bl	800f620 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800eba0:	4603      	mov	r3, r0
 800eba2:	461a      	mov	r2, r3
 800eba4:	68b9      	ldr	r1, [r7, #8]
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	f000 fd45 	bl	800f636 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 800ebac:	bf00      	nop
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b086      	sub	sp, #24
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
 800ebc0:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800ebc2:	463b      	mov	r3, r7
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	68b9      	ldr	r1, [r7, #8]
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f000 fd4d 	bl	800f668 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	617b      	str	r3, [r7, #20]
 800ebd2:	e013      	b.n	800ebfc <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x48>
	if (__comp(__i, __first))
 800ebd4:	463b      	mov	r3, r7
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	6979      	ldr	r1, [r7, #20]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f000 f923 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d005      	beq.n	800ebf2 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800ebe6:	463b      	mov	r3, r7
 800ebe8:	697a      	ldr	r2, [r7, #20]
 800ebea:	68b9      	ldr	r1, [r7, #8]
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f000 fdb3 	bl	800f758 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800ebf2:	f107 0314 	add.w	r3, r7, #20
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 f904 	bl	800ee04 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800ebfc:	1d3a      	adds	r2, r7, #4
 800ebfe:	f107 0314 	add.w	r3, r7, #20
 800ec02:	4611      	mov	r1, r2
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 fd8f 	bl	800f728 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1e1      	bne.n	800ebd4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x20>
    }
 800ec10:	bf00      	nop
 800ec12:	bf00      	nop
 800ec14:	3718      	adds	r7, #24
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b084      	sub	sp, #16
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	60f8      	str	r0, [r7, #12]
 800ec22:	60b9      	str	r1, [r7, #8]
 800ec24:	607a      	str	r2, [r7, #4]
      while (__last - __first > 1)
 800ec26:	e00a      	b.n	800ec3e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x24>
	  --__last;
 800ec28:	f107 0308 	add.w	r3, r7, #8
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f000 fddf 	bl	800f7f0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	68b9      	ldr	r1, [r7, #8]
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f000 fd8d 	bl	800f758 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 800ec3e:	f107 020c 	add.w	r2, r7, #12
 800ec42:	f107 0308 	add.w	r3, r7, #8
 800ec46:	4611      	mov	r1, r2
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fe f952 	bl	800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	bfcc      	ite	gt
 800ec54:	2301      	movgt	r3, #1
 800ec56:	2300      	movle	r3, #0
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1e4      	bne.n	800ec28 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xe>
    }
 800ec5e:	bf00      	nop
 800ec60:	bf00      	nop
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	00db      	lsls	r3, r3, #3
 800ec7a:	425b      	negs	r3, r3
 800ec7c:	4413      	add	r3, r2
 800ec7e:	60fb      	str	r3, [r7, #12]
 800ec80:	f107 020c 	add.w	r2, r7, #12
 800ec84:	f107 0308 	add.w	r3, r7, #8
 800ec88:	4611      	mov	r1, r2
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fc ffd0 	bl	800bc30 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	4618      	mov	r0, r3
 800ec94:	3710      	adds	r7, #16
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b084      	sub	sp, #16
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	60f8      	str	r0, [r7, #12]
 800eca2:	60b9      	str	r1, [r7, #8]
 800eca4:	607a      	str	r2, [r7, #4]
 800eca6:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	68b9      	ldr	r1, [r7, #8]
 800ecac:	f107 0018 	add.w	r0, r7, #24
 800ecb0:	f000 f8b9 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d020      	beq.n	800ecfc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 800ecba:	683a      	ldr	r2, [r7, #0]
 800ecbc:	6879      	ldr	r1, [r7, #4]
 800ecbe:	f107 0018 	add.w	r0, r7, #24
 800ecc2:	f000 f8b0 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d004      	beq.n	800ecd6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800eccc:	6879      	ldr	r1, [r7, #4]
 800ecce:	68f8      	ldr	r0, [r7, #12]
 800ecd0:	f000 fd9f 	bl	800f812 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ecd4:	e032      	b.n	800ed3c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	68b9      	ldr	r1, [r7, #8]
 800ecda:	f107 0018 	add.w	r0, r7, #24
 800ecde:	f000 f8a2 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d004      	beq.n	800ecf2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 800ece8:	6839      	ldr	r1, [r7, #0]
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f000 fd91 	bl	800f812 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ecf0:	e024      	b.n	800ed3c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800ecf2:	68b9      	ldr	r1, [r7, #8]
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f000 fd8c 	bl	800f812 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ecfa:	e01f      	b.n	800ed3c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 800ecfc:	683a      	ldr	r2, [r7, #0]
 800ecfe:	68b9      	ldr	r1, [r7, #8]
 800ed00:	f107 0018 	add.w	r0, r7, #24
 800ed04:	f000 f88f 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d004      	beq.n	800ed18 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 800ed0e:	68b9      	ldr	r1, [r7, #8]
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f000 fd7e 	bl	800f812 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed16:	e011      	b.n	800ed3c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 800ed18:	683a      	ldr	r2, [r7, #0]
 800ed1a:	6879      	ldr	r1, [r7, #4]
 800ed1c:	f107 0018 	add.w	r0, r7, #24
 800ed20:	f000 f881 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d004      	beq.n	800ed34 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 800ed2a:	6839      	ldr	r1, [r7, #0]
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f000 fd70 	bl	800f812 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed32:	e003      	b.n	800ed3c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 800ed34:	6879      	ldr	r1, [r7, #4]
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f000 fd6b 	bl	800f812 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed3c:	bf00      	nop
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	607a      	str	r2, [r7, #4]
 800ed50:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800ed52:	e004      	b.n	800ed5e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
	    ++__first;
 800ed54:	f107 030c 	add.w	r3, r7, #12
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f000 f853 	bl	800ee04 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800ed5e:	463b      	mov	r3, r7
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	68f9      	ldr	r1, [r7, #12]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f000 f85e 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1f1      	bne.n	800ed54 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x10>
	  --__last;
 800ed70:	f107 0308 	add.w	r3, r7, #8
 800ed74:	4618      	mov	r0, r3
 800ed76:	f000 fd3b 	bl	800f7f0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800ed7a:	e004      	b.n	800ed86 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x42>
	    --__last;
 800ed7c:	f107 0308 	add.w	r3, r7, #8
 800ed80:	4618      	mov	r0, r3
 800ed82:	f000 fd35 	bl	800f7f0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800ed86:	463b      	mov	r3, r7
 800ed88:	68ba      	ldr	r2, [r7, #8]
 800ed8a:	6879      	ldr	r1, [r7, #4]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f000 f84a 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d1f1      	bne.n	800ed7c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x38>
	  if (!(__first < __last))
 800ed98:	f107 0208 	add.w	r2, r7, #8
 800ed9c:	f107 030c 	add.w	r3, r7, #12
 800eda0:	4611      	mov	r1, r2
 800eda2:	4618      	mov	r0, r3
 800eda4:	f000 fcc0 	bl	800f728 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800eda8:	4603      	mov	r3, r0
 800edaa:	f083 0301 	eor.w	r3, r3, #1
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d001      	beq.n	800edb8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	e009      	b.n	800edcc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 800edb8:	68b9      	ldr	r1, [r7, #8]
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f000 fd29 	bl	800f812 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 800edc0:	f107 030c 	add.w	r3, r7, #12
 800edc4:	4618      	mov	r0, r3
 800edc6:	f000 f81d 	bl	800ee04 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800edca:	e7c8      	b.n	800ed5e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
    }
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800edd4:	b590      	push	{r4, r7, lr}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7fe f8c4 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800ede4:	4603      	mov	r3, r0
 800ede6:	681c      	ldr	r4, [r3, #0]
 800ede8:	6838      	ldr	r0, [r7, #0]
 800edea:	f7fe f8bf 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800edee:	4603      	mov	r3, r0
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	429c      	cmp	r4, r3
 800edf4:	bf0c      	ite	eq
 800edf6:	2301      	moveq	r3, #1
 800edf8:	2300      	movne	r3, #0
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	4618      	mov	r0, r3
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd90      	pop	{r4, r7, pc}

0800ee04 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f103 0208 	add.w	r2, r3, #8
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	601a      	str	r2, [r3, #0]
	return *this;
 800ee18:	687b      	ldr	r3, [r7, #4]
      }
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	370c      	adds	r7, #12
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr

0800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 800ee26:	b5b0      	push	{r4, r5, r7, lr}
 800ee28:	b084      	sub	sp, #16
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	60f8      	str	r0, [r7, #12]
 800ee2e:	60b9      	str	r1, [r7, #8]
 800ee30:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 800ee32:	68fc      	ldr	r4, [r7, #12]
 800ee34:	f107 0308 	add.w	r3, r7, #8
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f000 f810 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ee3e:	4605      	mov	r5, r0
 800ee40:	1d3b      	adds	r3, r7, #4
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 f80b 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	4620      	mov	r0, r4
 800ee50:	f7f4 fdf4 	bl	8003a3c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800ee54:	4603      	mov	r3, r0
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bdb0      	pop	{r4, r5, r7, pc}

0800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ee5e:	b480      	push	{r7}
 800ee60:	b083      	sub	sp, #12
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	370c      	adds	r7, #12
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr

0800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800ee76:	b480      	push	{r7}
 800ee78:	b083      	sub	sp, #12
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4618      	mov	r0, r3
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800ee8c:	b590      	push	{r4, r7, lr}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f000 fcd1 	bl	800f840 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800ee9e:	4604      	mov	r4, r0
 800eea0:	68b8      	ldr	r0, [r7, #8]
 800eea2:	f000 fccd 	bl	800f840 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800eea6:	4603      	mov	r3, r0
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	4619      	mov	r1, r3
 800eeac:	4620      	mov	r0, r4
 800eeae:	f000 fcd2 	bl	800f856 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 800eeb2:	4603      	mov	r3, r0
    }
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3714      	adds	r7, #20
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd90      	pop	{r4, r7, pc}

0800eebc <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 800eebc:	b590      	push	{r4, r7, lr}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800eec4:	1d3b      	adds	r3, r7, #4
 800eec6:	4618      	mov	r0, r3
 800eec8:	f000 fce6 	bl	800f898 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800eecc:	4602      	mov	r2, r0
 800eece:	f107 030c 	add.w	r3, r7, #12
 800eed2:	4611      	mov	r1, r2
 800eed4:	4618      	mov	r0, r3
 800eed6:	f000 fcea 	bl	800f8ae <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 800eeda:	bf00      	nop
 800eedc:	4620      	mov	r0, r4
 800eede:	3714      	adds	r7, #20
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd90      	pop	{r4, r7, pc}

0800eee4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800eee4:	b590      	push	{r4, r7, lr}
 800eee6:	b087      	sub	sp, #28
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800eeee:	1d3b      	adds	r3, r7, #4
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7ff ffb4 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800eef6:	4603      	mov	r3, r0
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff ffbc 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800eefe:	4602      	mov	r2, r0
 800ef00:	f107 0310 	add.w	r3, r7, #16
 800ef04:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef08:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	60fb      	str	r3, [r7, #12]
      --__next;
 800ef10:	f107 030c 	add.w	r3, r7, #12
 800ef14:	4618      	mov	r0, r3
 800ef16:	f000 fc6b 	bl	800f7f0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800ef1a:	e01a      	b.n	800ef52 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x6e>
	  *__last = _GLIBCXX_MOVE(*__next);
 800ef1c:	f107 030c 	add.w	r3, r7, #12
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff ff9c 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ef26:	4603      	mov	r3, r0
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7ff ffa4 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ef2e:	4604      	mov	r4, r0
 800ef30:	1d3b      	adds	r3, r7, #4
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7ff ff93 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef40:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	607b      	str	r3, [r7, #4]
	  --__next;
 800ef48:	f107 030c 	add.w	r3, r7, #12
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f000 fc4f 	bl	800f7f0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800ef52:	f107 0110 	add.w	r1, r7, #16
 800ef56:	463b      	mov	r3, r7
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f000 fcb5 	bl	800f8ca <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1da      	bne.n	800ef1c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 800ef66:	f107 0310 	add.w	r3, r7, #16
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7ff ff83 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ef70:	4604      	mov	r4, r0
 800ef72:	1d3b      	adds	r3, r7, #4
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7ff ff72 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	4622      	mov	r2, r4
 800ef7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef82:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ef86:	bf00      	nop
 800ef88:	371c      	adds	r7, #28
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd90      	pop	{r4, r7, pc}

0800ef8e <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800ef8e:	b480      	push	{r7}
 800ef90:	b083      	sub	sp, #12
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	370c      	adds	r7, #12
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800efa4:	b590      	push	{r4, r7, lr}
 800efa6:	b087      	sub	sp, #28
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
 800efb0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800efb6:	e012      	b.n	800efde <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800efb8:	6978      	ldr	r0, [r7, #20]
 800efba:	f7fd fd9c 	bl	800caf6 <_ZSt11__addressofIfEPT_RS0_>
 800efbe:	4604      	mov	r4, r0
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f7fd fd98 	bl	800caf6 <_ZSt11__addressofIfEPT_RS0_>
 800efc6:	4603      	mov	r3, r0
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	4619      	mov	r1, r3
 800efcc:	4620      	mov	r0, r4
 800efce:	f000 fc92 	bl	800f8f6 <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	3304      	adds	r3, #4
 800efd6:	60fb      	str	r3, [r7, #12]
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	3304      	adds	r3, #4
 800efdc:	617b      	str	r3, [r7, #20]
 800efde:	68fa      	ldr	r2, [r7, #12]
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d1e8      	bne.n	800efb8 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800efe6:	697b      	ldr	r3, [r7, #20]
    }
 800efe8:	4618      	mov	r0, r3
 800efea:	371c      	adds	r7, #28
 800efec:	46bd      	mov	sp, r7
 800efee:	bd90      	pop	{r4, r7, pc}

0800eff0 <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>:
    operator==(const move_iterator<_Iterator>& __x,
 800eff0:	b590      	push	{r4, r7, lr}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fc96 	bl	800f92c <_ZNKSt13move_iteratorIPfE4baseEv>
 800f000:	4604      	mov	r4, r0
 800f002:	6838      	ldr	r0, [r7, #0]
 800f004:	f000 fc92 	bl	800f92c <_ZNKSt13move_iteratorIPfE4baseEv>
 800f008:	4603      	mov	r3, r0
 800f00a:	429c      	cmp	r4, r3
 800f00c:	bf0c      	ite	eq
 800f00e:	2301      	moveq	r3, #1
 800f010:	2300      	movne	r3, #0
 800f012:	b2db      	uxtb	r3, r3
 800f014:	4618      	mov	r0, r3
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd90      	pop	{r4, r7, pc}

0800f01c <_ZN2ei7EiAllocIiE8allocateEj>:
    T *allocate(size_t n)
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f008 f9b3 	bl	8017398 <_Z9ei_mallocj>
 800f032:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800f034:	68bb      	ldr	r3, [r7, #8]
    }
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const noexcept
 800f03e:	b580      	push	{r7, lr}
 800f040:	b082      	sub	sp, #8
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7f2 f8d3 	bl	80011f2 <_ZNKSt9_Any_data9_M_accessEv>
 800f04c:	4603      	mov	r3, r0
 800f04e:	4618      	mov	r0, r3
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f056:	b480      	push	{r7}
 800f058:	b083      	sub	sp, #12
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4618      	mov	r0, r3
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4618      	mov	r0, r3
 800f078:	370c      	adds	r7, #12
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr

0800f082 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800f082:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f084:	b085      	sub	sp, #20
 800f086:	af00      	add	r7, sp, #0
 800f088:	7338      	strb	r0, [r7, #12]
 800f08a:	60b9      	str	r1, [r7, #8]
 800f08c:	607a      	str	r2, [r7, #4]
 800f08e:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800f090:	68b8      	ldr	r0, [r7, #8]
 800f092:	f7ff ffeb 	bl	800f06c <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f096:	4603      	mov	r3, r0
 800f098:	681c      	ldr	r4, [r3, #0]
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f7fc fc7f 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	681d      	ldr	r5, [r3, #0]
 800f0a4:	6838      	ldr	r0, [r7, #0]
 800f0a6:	f7fc fc7a 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	681e      	ldr	r6, [r3, #0]
 800f0ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0b0:	f7fc fc80 	bl	800b9b4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	4631      	mov	r1, r6
 800f0bc:	4628      	mov	r0, r5
 800f0be:	47a0      	blx	r4
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3714      	adds	r7, #20
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0ca <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f0ca:	b590      	push	{r4, r7, lr}
 800f0cc:	b083      	sub	sp, #12
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f0d4:	6838      	ldr	r0, [r7, #0]
 800f0d6:	f000 fc35 	bl	800f944 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	4622      	mov	r2, r4
 800f0de:	4619      	mov	r1, r3
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 fc3a 	bl	800f95a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800f0e6:	bf00      	nop
 800f0e8:	370c      	adds	r7, #12
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd90      	pop	{r4, r7, pc}

0800f0ee <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b082      	sub	sp, #8
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
 800f0f6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 fc47 	bl	800f98c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 800f0fe:	bf00      	nop
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const noexcept
 800f106:	b580      	push	{r7, lr}
 800f108:	b082      	sub	sp, #8
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7f2 f86f 	bl	80011f2 <_ZNKSt9_Any_data9_M_accessEv>
 800f114:	4603      	mov	r3, r0
 800f116:	4618      	mov	r0, r3
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}

0800f11e <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f11e:	b480      	push	{r7}
 800f120:	b083      	sub	sp, #12
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4618      	mov	r0, r3
 800f12a:	370c      	adds	r7, #12
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr

0800f134 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4618      	mov	r0, r3
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr

0800f14a <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800f14a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f14c:	b085      	sub	sp, #20
 800f14e:	af00      	add	r7, sp, #0
 800f150:	7338      	strb	r0, [r7, #12]
 800f152:	60b9      	str	r1, [r7, #8]
 800f154:	607a      	str	r2, [r7, #4]
 800f156:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800f158:	68b8      	ldr	r0, [r7, #8]
 800f15a:	f7ff ffeb 	bl	800f134 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800f15e:	4606      	mov	r6, r0
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7fc fc1c 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f166:	4603      	mov	r3, r0
 800f168:	681c      	ldr	r4, [r3, #0]
 800f16a:	6838      	ldr	r0, [r7, #0]
 800f16c:	f7fc fc17 	bl	800b99e <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f170:	4603      	mov	r3, r0
 800f172:	681d      	ldr	r5, [r3, #0]
 800f174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f176:	f7fc fc1d 	bl	800b9b4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800f17a:	4603      	mov	r3, r0
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	462a      	mov	r2, r5
 800f180:	4621      	mov	r1, r4
 800f182:	4630      	mov	r0, r6
 800f184:	f7f8 f975 	bl	8007472 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800f188:	4603      	mov	r3, r0
 800f18a:	4618      	mov	r0, r3
 800f18c:	3714      	adds	r7, #20
 800f18e:	46bd      	mov	sp, r7
 800f190:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f192 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f192:	b590      	push	{r4, r7, lr}
 800f194:	b083      	sub	sp, #12
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
 800f19a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f19c:	6838      	ldr	r0, [r7, #0]
 800f19e:	f000 fc01 	bl	800f9a4 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	4622      	mov	r2, r4
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 fc06 	bl	800f9ba <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800f1ae:	bf00      	nop
 800f1b0:	370c      	adds	r7, #12
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd90      	pop	{r4, r7, pc}

0800f1b6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b082      	sub	sp, #8
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 fc13 	bl	800f9ec <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800f1c6:	bf00      	nop
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}

0800f1ce <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>:
      _Tuple_impl()
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b082      	sub	sp, #8
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 fc14 	bl	800fa04 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3708      	adds	r7, #8
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}

0800f1e6 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>:
      constexpr _Head_base()
 800f1e6:	b480      	push	{r7}
 800f1e8:	b083      	sub	sp, #12
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	601a      	str	r2, [r3, #0]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	370c      	adds	r7, #12
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr

0800f202 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f202:	b580      	push	{r7, lr}
 800f204:	b082      	sub	sp, #8
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 fc04 	bl	800fa1a <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>
 800f212:	4603      	mov	r3, r0
 800f214:	4618      	mov	r0, r3
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 fc03 	bl	800fa30 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>
 800f22a:	4603      	mov	r3, r0
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4618      	mov	r0, r3
 800f240:	f000 fc02 	bl	800fa48 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>
 800f244:	4603      	mov	r3, r0
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f24e:	b580      	push	{r7, lr}
 800f250:	b082      	sub	sp, #8
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4618      	mov	r0, r3
 800f25a:	f000 fc00 	bl	800fa5e <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>
 800f25e:	4603      	mov	r3, r0
 800f260:	4618      	mov	r0, r3
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	4618      	mov	r0, r3
 800f274:	f000 fbfe 	bl	800fa74 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>
 800f278:	4603      	mov	r3, r0
 800f27a:	4618      	mov	r0, r3
 800f27c:	3708      	adds	r7, #8
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
 800f282:	b580      	push	{r7, lr}
 800f284:	b082      	sub	sp, #8
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	3304      	adds	r3, #4
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 fbfb 	bl	800fa8a <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 800f294:	4603      	mov	r3, r0
 800f296:	4618      	mov	r0, r3
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>:
      constexpr _Head_base()
 800f29e:	b480      	push	{r7}
 800f2a0:	b083      	sub	sp, #12
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 fbef 	bl	800faa0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800f2d6:	6838      	ldr	r0, [r7, #0]
 800f2d8:	f7fd fb6d 	bl	800c9b6 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	601a      	str	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3708      	adds	r7, #8
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}

0800f2ee <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f2ee:	b480      	push	{r7}
 800f2f0:	b083      	sub	sp, #12
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4618      	mov	r0, r3
 800f310:	f000 fbd1 	bl	800fab6 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800f314:	4603      	mov	r3, r0
 800f316:	4618      	mov	r0, r3
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f31e:	b590      	push	{r4, r7, lr}
 800f320:	b089      	sub	sp, #36	@ 0x24
 800f322:	af00      	add	r7, sp, #0
 800f324:	60f8      	str	r0, [r7, #12]
 800f326:	60b9      	str	r1, [r7, #8]
 800f328:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f32a:	f107 020c 	add.w	r2, r7, #12
 800f32e:	f107 0308 	add.w	r3, r7, #8
 800f332:	4611      	mov	r1, r2
 800f334:	4618      	mov	r0, r3
 800f336:	f7fd fc2b 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	bfd4      	ite	le
 800f340:	2301      	movle	r3, #1
 800f342:	2300      	movgt	r3, #0
 800f344:	b2db      	uxtb	r3, r3
 800f346:	2b00      	cmp	r3, #0
 800f348:	d13a      	bne.n	800f3c0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa2>
      const _DistanceType __len = __last - __first;
 800f34a:	f107 020c 	add.w	r2, r7, #12
 800f34e:	f107 0308 	add.w	r3, r7, #8
 800f352:	4611      	mov	r1, r2
 800f354:	4618      	mov	r0, r3
 800f356:	f7fd fc1b 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f35a:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	3b02      	subs	r3, #2
 800f360:	2b00      	cmp	r3, #0
 800f362:	da00      	bge.n	800f366 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x48>
 800f364:	3301      	adds	r3, #1
 800f366:	105b      	asrs	r3, r3, #1
 800f368:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f36a:	f107 030c 	add.w	r3, r7, #12
 800f36e:	69f9      	ldr	r1, [r7, #28]
 800f370:	4618      	mov	r0, r3
 800f372:	f7fe fbb6 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f376:	4603      	mov	r3, r0
 800f378:	617b      	str	r3, [r7, #20]
 800f37a:	f107 0314 	add.w	r3, r7, #20
 800f37e:	4618      	mov	r0, r3
 800f380:	f7fa fd66 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f384:	4603      	mov	r3, r0
 800f386:	4618      	mov	r0, r3
 800f388:	f7fc ff28 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f38c:	4603      	mov	r3, r0
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f392:	f107 0310 	add.w	r3, r7, #16
 800f396:	4618      	mov	r0, r3
 800f398:	f7fc ff20 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f39c:	4603      	mov	r3, r0
 800f39e:	edd3 7a00 	vldr	s15, [r3]
 800f3a2:	4623      	mov	r3, r4
 800f3a4:	eeb0 0a67 	vmov.f32	s0, s15
 800f3a8:	69ba      	ldr	r2, [r7, #24]
 800f3aa:	69f9      	ldr	r1, [r7, #28]
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f000 fb8d 	bl	800facc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
	  if (__parent == 0)
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d005      	beq.n	800f3c4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa6>
	  __parent--;
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	61fb      	str	r3, [r7, #28]
      while (true)
 800f3be:	e7d4      	b.n	800f36a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x4c>
	return;
 800f3c0:	bf00      	nop
 800f3c2:	e000      	b.n	800f3c6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa8>
	    return;
 800f3c4:	bf00      	nop
    }
 800f3c6:	3724      	adds	r7, #36	@ 0x24
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd90      	pop	{r4, r7, pc}

0800f3cc <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f3cc:	b590      	push	{r4, r7, lr}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7fc f936 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	681c      	ldr	r4, [r3, #0]
 800f3e0:	6838      	ldr	r0, [r7, #0]
 800f3e2:	f7fc f931 	bl	800b648 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	429c      	cmp	r4, r3
 800f3ec:	bf34      	ite	cc
 800f3ee:	2301      	movcc	r3, #1
 800f3f0:	2300      	movcs	r3, #0
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd90      	pop	{r4, r7, pc}

0800f3fc <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f3fc:	b5b0      	push	{r4, r5, r7, lr}
 800f3fe:	b086      	sub	sp, #24
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f40a:	1d3b      	adds	r3, r7, #4
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fa fd1f 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f412:	4603      	mov	r3, r0
 800f414:	4618      	mov	r0, r3
 800f416:	f7fc fee1 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f41a:	4603      	mov	r3, r0
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 800f420:	f107 030c 	add.w	r3, r7, #12
 800f424:	4618      	mov	r0, r3
 800f426:	f7fa fd13 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f42a:	4603      	mov	r3, r0
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7fc fed5 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f432:	4604      	mov	r4, r0
 800f434:	1d3b      	adds	r3, r7, #4
 800f436:	4618      	mov	r0, r3
 800f438:	f7fa fd0a 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f43c:	4602      	mov	r2, r0
 800f43e:	6823      	ldr	r3, [r4, #0]
 800f440:	6013      	str	r3, [r2, #0]
			 _DistanceType(__last - __first),
 800f442:	f107 020c 	add.w	r2, r7, #12
 800f446:	f107 0308 	add.w	r3, r7, #8
 800f44a:	4611      	mov	r1, r2
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fd fb9f 	bl	800cb90 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f452:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f454:	f107 0314 	add.w	r3, r7, #20
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fc febf 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f45e:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f460:	edd3 7a00 	vldr	s15, [r3]
 800f464:	462b      	mov	r3, r5
 800f466:	eeb0 0a67 	vmov.f32	s0, s15
 800f46a:	4622      	mov	r2, r4
 800f46c:	2100      	movs	r1, #0
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f000 fb2c 	bl	800facc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
    }
 800f474:	bf00      	nop
 800f476:	3718      	adds	r7, #24
 800f478:	46bd      	mov	sp, r7
 800f47a:	bdb0      	pop	{r4, r5, r7, pc}

0800f47c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	1f1a      	subs	r2, r3, #4
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	601a      	str	r2, [r3, #0]
	return *this;
 800f48e:	687b      	ldr	r3, [r7, #4]
      }
 800f490:	4618      	mov	r0, r3
 800f492:	370c      	adds	r7, #12
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f49c:	b590      	push	{r4, r7, lr}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f4a6:	1d3b      	adds	r3, r7, #4
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7fa fcd1 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	463b      	mov	r3, r7
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fa fccc 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f7fb fc1a 	bl	800acf6 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800f4c2:	bf00      	nop
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd90      	pop	{r4, r7, pc}

0800f4ca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800f4ca:	b480      	push	{r7}
 800f4cc:	b083      	sub	sp, #12
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	370c      	adds	r7, #12
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f4e0:	b5b0      	push	{r4, r5, r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f7fd fb2a 	bl	800cb46 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	68b8      	ldr	r0, [r7, #8]
 800f4f6:	f7fd fb26 	bl	800cb46 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f4fa:	4605      	mov	r5, r0
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7fd fb22 	bl	800cb46 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f502:	4603      	mov	r3, r0
 800f504:	461a      	mov	r2, r3
 800f506:	4629      	mov	r1, r5
 800f508:	4620      	mov	r0, r4
 800f50a:	f000 fb93 	bl	800fc34 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800f50e:	4603      	mov	r3, r0
 800f510:	4619      	mov	r1, r3
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f7fd fb25 	bl	800cb62 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>
 800f518:	4603      	mov	r3, r0
    }
 800f51a:	4618      	mov	r0, r3
 800f51c:	3710      	adds	r7, #16
 800f51e:	46bd      	mov	sp, r7
 800f520:	bdb0      	pop	{r4, r5, r7, pc}

0800f522 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800f522:	b580      	push	{r7, lr}
 800f524:	ed2d 8b02 	vpush	{d8}
 800f528:	b084      	sub	sp, #16
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	60f8      	str	r0, [r7, #12]
 800f52e:	60b9      	str	r1, [r7, #8]
 800f530:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	ed93 8a00 	vldr	s16, [r3]
 800f538:	1d3b      	adds	r3, r7, #4
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fa fc88 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f540:	4603      	mov	r3, r0
 800f542:	edd3 7a00 	vldr	s15, [r3]
 800f546:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54e:	bf4c      	ite	mi
 800f550:	2301      	movmi	r3, #1
 800f552:	2300      	movpl	r3, #0
 800f554:	b2db      	uxtb	r3, r3
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	ecbd 8b02 	vpop	{d8}
 800f560:	bd80      	pop	{r7, pc}

0800f562 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 800f562:	b580      	push	{r7, lr}
 800f564:	b082      	sub	sp, #8
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800f56a:	2100      	movs	r1, #0
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 fb71 	bl	800fc54 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 800f572:	4603      	mov	r3, r0
 800f574:	4618      	mov	r0, r3
 800f576:	3708      	adds	r7, #8
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4618      	mov	r0, r3
 800f588:	370c      	adds	r7, #12
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr

0800f592 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800f592:	b590      	push	{r4, r7, lr}
 800f594:	b087      	sub	sp, #28
 800f596:	af00      	add	r7, sp, #0
 800f598:	60f8      	str	r0, [r7, #12]
 800f59a:	60b9      	str	r1, [r7, #8]
 800f59c:	607a      	str	r2, [r7, #4]
 800f59e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800f5a4:	e012      	b.n	800f5cc <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800f5a6:	6978      	ldr	r0, [r7, #20]
 800f5a8:	f7fd fc1f 	bl	800cdea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f7fd fc1b 	bl	800cdea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	683a      	ldr	r2, [r7, #0]
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f000 fb55 	bl	800fc6a <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	3308      	adds	r3, #8
 800f5c4:	60fb      	str	r3, [r7, #12]
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	617b      	str	r3, [r7, #20]
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d1e8      	bne.n	800f5a6 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x14>
      return __cur;
 800f5d4:	697b      	ldr	r3, [r7, #20]
    }
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	371c      	adds	r7, #28
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd90      	pop	{r4, r7, pc}

0800f5de <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f5de:	b480      	push	{r7}
 800f5e0:	b083      	sub	sp, #12
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 800f5f4:	b590      	push	{r4, r7, lr}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fb4e 	bl	800fca0 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f604:	4604      	mov	r4, r0
 800f606:	6838      	ldr	r0, [r7, #0]
 800f608:	f000 fb4a 	bl	800fca0 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f60c:	4603      	mov	r3, r0
 800f60e:	429c      	cmp	r4, r3
 800f610:	bf0c      	ite	eq
 800f612:	2301      	moveq	r3, #1
 800f614:	2300      	movne	r3, #0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	4618      	mov	r0, r3
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd90      	pop	{r4, r7, pc}

0800f620 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4618      	mov	r0, r3
 800f62c:	370c      	adds	r7, #12
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr

0800f636 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800f636:	b590      	push	{r4, r7, lr}
 800f638:	b085      	sub	sp, #20
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	60f8      	str	r0, [r7, #12]
 800f63e:	60b9      	str	r1, [r7, #8]
 800f640:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	4619      	mov	r1, r3
 800f646:	2008      	movs	r0, #8
 800f648:	f7f1 fdbc 	bl	80011c4 <_ZnwjPv>
 800f64c:	4604      	mov	r4, r0
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7ff ffe6 	bl	800f620 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f654:	4602      	mov	r2, r0
 800f656:	4623      	mov	r3, r4
 800f658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f65c:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800f660:	bf00      	nop
 800f662:	3714      	adds	r7, #20
 800f664:	46bd      	mov	sp, r7
 800f666:	bd90      	pop	{r4, r7, pc}

0800f668 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08a      	sub	sp, #40	@ 0x28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f674:	f107 020c 	add.w	r2, r7, #12
 800f678:	f107 0308 	add.w	r3, r7, #8
 800f67c:	4611      	mov	r1, r2
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fd fc37 	bl	800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f684:	4603      	mov	r3, r0
 800f686:	2b01      	cmp	r3, #1
 800f688:	bfd4      	ite	le
 800f68a:	2301      	movle	r3, #1
 800f68c:	2300      	movgt	r3, #0
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	2b00      	cmp	r3, #0
 800f692:	d143      	bne.n	800f71c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb4>
      const _DistanceType __len = __last - __first;
 800f694:	f107 020c 	add.w	r2, r7, #12
 800f698:	f107 0308 	add.w	r3, r7, #8
 800f69c:	4611      	mov	r1, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fd fc27 	bl	800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f6a4:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 800f6a6:	6a3b      	ldr	r3, [r7, #32]
 800f6a8:	3b02      	subs	r3, #2
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	da00      	bge.n	800f6b0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x48>
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	105b      	asrs	r3, r3, #1
 800f6b2:	627b      	str	r3, [r7, #36]	@ 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f6b4:	f107 030c 	add.w	r3, r7, #12
 800f6b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fe fc4d 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	61fb      	str	r3, [r7, #28]
 800f6c4:	f107 031c 	add.w	r3, r7, #28
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7ff fbc8 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7ff fbd0 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	f107 0314 	add.w	r3, r7, #20
 800f6dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6e0:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f6e4:	f107 0314 	add.w	r3, r7, #20
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff fbc4 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	ed93 7a00 	vldr	s14, [r3]
 800f6f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f6fa:	7813      	ldrb	r3, [r2, #0]
 800f6fc:	eeb0 0a47 	vmov.f32	s0, s14
 800f700:	eef0 0a67 	vmov.f32	s1, s15
 800f704:	6a3a      	ldr	r2, [r7, #32]
 800f706:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 fad5 	bl	800fcb8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 800f70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f710:	2b00      	cmp	r3, #0
 800f712:	d005      	beq.n	800f720 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	  __parent--;
 800f714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f716:	3b01      	subs	r3, #1
 800f718:	627b      	str	r3, [r7, #36]	@ 0x24
      while (true)
 800f71a:	e7cb      	b.n	800f6b4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4c>
	return;
 800f71c:	bf00      	nop
 800f71e:	e000      	b.n	800f722 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xba>
	    return;
 800f720:	bf00      	nop
    }
 800f722:	3728      	adds	r7, #40	@ 0x28
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f728:	b590      	push	{r4, r7, lr}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f7fd fc1a 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f738:	4603      	mov	r3, r0
 800f73a:	681c      	ldr	r4, [r3, #0]
 800f73c:	6838      	ldr	r0, [r7, #0]
 800f73e:	f7fd fc15 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f742:	4603      	mov	r3, r0
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	429c      	cmp	r4, r3
 800f748:	bf34      	ite	cc
 800f74a:	2301      	movcc	r3, #1
 800f74c:	2300      	movcs	r3, #0
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	4618      	mov	r0, r3
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	bd90      	pop	{r4, r7, pc}

0800f758 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f758:	b590      	push	{r4, r7, lr}
 800f75a:	b087      	sub	sp, #28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
 800f764:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f766:	1d3b      	adds	r3, r7, #4
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff fb78 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f76e:	4603      	mov	r3, r0
 800f770:	4618      	mov	r0, r3
 800f772:	f7ff fb80 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f776:	4602      	mov	r2, r0
 800f778:	f107 0310 	add.w	r3, r7, #16
 800f77c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f780:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 800f784:	f107 030c 	add.w	r3, r7, #12
 800f788:	4618      	mov	r0, r3
 800f78a:	f7ff fb68 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f78e:	4603      	mov	r3, r0
 800f790:	4618      	mov	r0, r3
 800f792:	f7ff fb70 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f796:	4604      	mov	r4, r0
 800f798:	1d3b      	adds	r3, r7, #4
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7ff fb5f 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	4622      	mov	r2, r4
 800f7a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7a8:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 800f7ac:	f107 020c 	add.w	r2, r7, #12
 800f7b0:	f107 0308 	add.w	r3, r7, #8
 800f7b4:	4611      	mov	r1, r2
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fd fb9b 	bl	800cef2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f7bc:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f7be:	f107 0310 	add.w	r3, r7, #16
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7ff fb57 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f7c8:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	ed93 7a00 	vldr	s14, [r3]
 800f7d0:	edd3 7a01 	vldr	s15, [r3, #4]
 800f7d4:	7813      	ldrb	r3, [r2, #0]
 800f7d6:	eeb0 0a47 	vmov.f32	s0, s14
 800f7da:	eef0 0a67 	vmov.f32	s1, s15
 800f7de:	4622      	mov	r2, r4
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f000 fa68 	bl	800fcb8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 800f7e8:	bf00      	nop
 800f7ea:	371c      	adds	r7, #28
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd90      	pop	{r4, r7, pc}

0800f7f0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f1a3 0208 	sub.w	r2, r3, #8
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	601a      	str	r2, [r3, #0]
	return *this;
 800f804:	687b      	ldr	r3, [r7, #4]
      }
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f812:	b590      	push	{r4, r7, lr}
 800f814:	b083      	sub	sp, #12
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
 800f81a:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f81c:	1d3b      	adds	r3, r7, #4
 800f81e:	4618      	mov	r0, r3
 800f820:	f7ff fb1d 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f824:	4604      	mov	r4, r0
 800f826:	463b      	mov	r3, r7
 800f828:	4618      	mov	r0, r3
 800f82a:	f7ff fb18 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f82e:	4603      	mov	r3, r0
 800f830:	4619      	mov	r1, r3
 800f832:	4620      	mov	r0, r4
 800f834:	f000 fb05 	bl	800fe42 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 800f838:	bf00      	nop
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd90      	pop	{r4, r7, pc}

0800f840 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
    __miter_base(_Iterator __it)
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4618      	mov	r0, r3
 800f84c:	370c      	adds	r7, #12
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr

0800f856 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f856:	b5b0      	push	{r4, r5, r7, lr}
 800f858:	b084      	sub	sp, #16
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	60f8      	str	r0, [r7, #12]
 800f85e:	60b9      	str	r1, [r7, #8]
 800f860:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f000 fb14 	bl	800fe90 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f868:	4604      	mov	r4, r0
 800f86a:	68b8      	ldr	r0, [r7, #8]
 800f86c:	f000 fb10 	bl	800fe90 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f870:	4605      	mov	r5, r0
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fb0c 	bl	800fe90 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f878:	4603      	mov	r3, r0
 800f87a:	461a      	mov	r2, r3
 800f87c:	4629      	mov	r1, r5
 800f87e:	4620      	mov	r0, r4
 800f880:	f000 fb14 	bl	800feac <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800f884:	4603      	mov	r3, r0
 800f886:	4619      	mov	r1, r3
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fb1f 	bl	800fecc <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 800f88e:	4603      	mov	r3, r0
    }
 800f890:	4618      	mov	r0, r3
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bdb0      	pop	{r4, r5, r7, pc}

0800f898 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	370c      	adds	r7, #12
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr

0800f8ae <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b082      	sub	sp, #8
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
 800f8b6:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fd fb7a 	bl	800cfb4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3708      	adds	r7, #8
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 800f8ca:	b590      	push	{r4, r7, lr}
 800f8cc:	b085      	sub	sp, #20
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	60f8      	str	r0, [r7, #12]
 800f8d2:	60b9      	str	r1, [r7, #8]
 800f8d4:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 800f8d6:	68fc      	ldr	r4, [r7, #12]
 800f8d8:	1d3b      	adds	r3, r7, #4
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7ff fabf 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	68b9      	ldr	r1, [r7, #8]
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f7f4 f8a8 	bl	8003a3c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3714      	adds	r7, #20
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd90      	pop	{r4, r7, pc}

0800f8f6 <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800f8f6:	b580      	push	{r7, lr}
 800f8f8:	b084      	sub	sp, #16
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	60f8      	str	r0, [r7, #12]
 800f8fe:	60b9      	str	r1, [r7, #8]
 800f900:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800f902:	68b8      	ldr	r0, [r7, #8]
 800f904:	f7fc fc6a 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f908:	4603      	mov	r3, r0
 800f90a:	461a      	mov	r2, r3
 800f90c:	68f9      	ldr	r1, [r7, #12]
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7fd fd12 	bl	800d338 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800f914:	68b8      	ldr	r0, [r7, #8]
 800f916:	f7fd f8ee 	bl	800caf6 <_ZSt11__addressofIfEPT_RS0_>
 800f91a:	4603      	mov	r3, r0
 800f91c:	4619      	mov	r1, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7fd f8f4 	bl	800cb0c <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
    }
 800f924:	bf00      	nop
 800f926:	3710      	adds	r7, #16
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 800f92c:	b480      	push	{r7}
 800f92e:	b083      	sub	sp, #12
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	4618      	mov	r0, r3
 800f93a:	370c      	adds	r7, #12
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr

0800f944 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4618      	mov	r0, r3
 800f950:	370c      	adds	r7, #12
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f95a:	b590      	push	{r4, r7, lr}
 800f95c:	b085      	sub	sp, #20
 800f95e:	af00      	add	r7, sp, #0
 800f960:	60f8      	str	r0, [r7, #12]
 800f962:	60b9      	str	r1, [r7, #8]
 800f964:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f7f1 fc38 	bl	80011dc <_ZNSt9_Any_data9_M_accessEv>
 800f96c:	4603      	mov	r3, r0
 800f96e:	4619      	mov	r1, r3
 800f970:	2004      	movs	r0, #4
 800f972:	f7f1 fc27 	bl	80011c4 <_ZnwjPv>
 800f976:	4604      	mov	r4, r0
 800f978:	68b8      	ldr	r0, [r7, #8]
 800f97a:	f7ff ffe3 	bl	800f944 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f97e:	4603      	mov	r3, r0
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	6023      	str	r3, [r4, #0]
	  }
 800f984:	bf00      	nop
 800f986:	3714      	adds	r7, #20
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd90      	pop	{r4, r7, pc}

0800f98c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access() noexcept
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7f1 fc21 	bl	80011dc <_ZNSt9_Any_data9_M_accessEv>
 800f99a:	4603      	mov	r3, r0
 800f99c:	4618      	mov	r0, r3
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	370c      	adds	r7, #12
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr

0800f9ba <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f9ba:	b590      	push	{r4, r7, lr}
 800f9bc:	b085      	sub	sp, #20
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	60f8      	str	r0, [r7, #12]
 800f9c2:	60b9      	str	r1, [r7, #8]
 800f9c4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f7f1 fc08 	bl	80011dc <_ZNSt9_Any_data9_M_accessEv>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	2004      	movs	r0, #4
 800f9d2:	f7f1 fbf7 	bl	80011c4 <_ZnwjPv>
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	68b8      	ldr	r0, [r7, #8]
 800f9da:	f7ff ffe3 	bl	800f9a4 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	6023      	str	r3, [r4, #0]
	  }
 800f9e4:	bf00      	nop
 800f9e6:	3714      	adds	r7, #20
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd90      	pop	{r4, r7, pc}

0800f9ec <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access() noexcept
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f7f1 fbf1 	bl	80011dc <_ZNSt9_Any_data9_M_accessEv>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>:
      constexpr _Head_base()
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	370c      	adds	r7, #12
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr

0800fa1a <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa1a:	b480      	push	{r7}
 800fa1c:	b083      	sub	sp, #12
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4618      	mov	r0, r3
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 fa5e 	bl	800fefa <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	4618      	mov	r0, r3
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4618      	mov	r0, r3
 800fa54:	370c      	adds	r7, #12
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr

0800fa5e <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa5e:	b480      	push	{r7}
 800fa60:	b083      	sub	sp, #12
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
 800fa8a:	b480      	push	{r7}
 800fa8c:	b083      	sub	sp, #12
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4618      	mov	r0, r3
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	4618      	mov	r0, r3
 800faac:	370c      	adds	r7, #12
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr

0800fab6 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fab6:	b480      	push	{r7}
 800fab8:	b083      	sub	sp, #12
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr

0800facc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800facc:	b5b0      	push	{r4, r5, r7, lr}
 800face:	b08e      	sub	sp, #56	@ 0x38
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6178      	str	r0, [r7, #20]
 800fad4:	6139      	str	r1, [r7, #16]
 800fad6:	60fa      	str	r2, [r7, #12]
 800fad8:	ed87 0a02 	vstr	s0, [r7, #8]
 800fadc:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __secondChild = __holeIndex;
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__secondChild < (__len - 1) / 2)
 800fae6:	e042      	b.n	800fb6e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 800fae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faea:	3301      	adds	r3, #1
 800faec:	005b      	lsls	r3, r3, #1
 800faee:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (__comp(__first + __secondChild,
 800faf0:	f107 0314 	add.w	r3, r7, #20
 800faf4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fd fff3 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fafc:	4604      	mov	r4, r0
 800fafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb00:	1e5a      	subs	r2, r3, #1
 800fb02:	f107 0314 	add.w	r3, r7, #20
 800fb06:	4611      	mov	r1, r2
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fd ffea 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	1d3b      	adds	r3, r7, #4
 800fb12:	4621      	mov	r1, r4
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fe fedf 	bl	800e8d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d002      	beq.n	800fb26 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x5a>
	    __secondChild--;
 800fb20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb22:	3b01      	subs	r3, #1
 800fb24:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800fb26:	f107 0314 	add.w	r3, r7, #20
 800fb2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7fd ffd8 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb32:	4603      	mov	r3, r0
 800fb34:	623b      	str	r3, [r7, #32]
 800fb36:	f107 0320 	add.w	r3, r7, #32
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fa f988 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fb40:	4603      	mov	r3, r0
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fc fb4a 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fb48:	4604      	mov	r4, r0
 800fb4a:	f107 0314 	add.w	r3, r7, #20
 800fb4e:	6939      	ldr	r1, [r7, #16]
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7fd ffc6 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb56:	4603      	mov	r3, r0
 800fb58:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fa f976 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fb64:	4602      	mov	r2, r0
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild;
 800fb6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb6c:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3b01      	subs	r3, #1
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	da00      	bge.n	800fb78 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xac>
 800fb76:	3301      	adds	r3, #1
 800fb78:	105b      	asrs	r3, r3, #1
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	dbb2      	blt.n	800fae8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f003 0301 	and.w	r3, r3, #1
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d134      	bne.n	800fbf6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12a>
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	3b02      	subs	r3, #2
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	da00      	bge.n	800fb96 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xca>
 800fb94:	3301      	adds	r3, #1
 800fb96:	105b      	asrs	r3, r3, #1
 800fb98:	461a      	mov	r2, r3
 800fb9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d12a      	bne.n	800fbf6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12a>
	  __secondChild = 2 * (__secondChild + 1);
 800fba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fba2:	3301      	adds	r3, #1
 800fba4:	005b      	lsls	r3, r3, #1
 800fba6:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800fba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbaa:	1e5a      	subs	r2, r3, #1
 800fbac:	f107 0314 	add.w	r3, r7, #20
 800fbb0:	4611      	mov	r1, r2
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fd ff95 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fbbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fa f945 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7fc fb07 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fbce:	4604      	mov	r4, r0
 800fbd0:	f107 0314 	add.w	r3, r7, #20
 800fbd4:	6939      	ldr	r1, [r7, #16]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fd ff83 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fbe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7fa f933 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fbea:	4602      	mov	r2, r0
 800fbec:	6823      	ldr	r3, [r4, #0]
 800fbee:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild - 1;
 800fbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800fbf6:	1d3b      	adds	r3, r7, #4
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f000 f989 	bl	800ff10 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 800fbfe:	f107 031c 	add.w	r3, r7, #28
 800fc02:	4629      	mov	r1, r5
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7f1 fb2b 	bl	8001260 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800fc0a:	f107 0308 	add.w	r3, r7, #8
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fc fae4 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fc14:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800fc16:	edd3 7a00 	vldr	s15, [r3]
 800fc1a:	f107 031c 	add.w	r3, r7, #28
 800fc1e:	eeb0 0a67 	vmov.f32	s0, s15
 800fc22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc24:	6939      	ldr	r1, [r7, #16]
 800fc26:	6978      	ldr	r0, [r7, #20]
 800fc28:	f000 f97d 	bl	800ff26 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>
    }
 800fc2c:	bf00      	nop
 800fc2e:	3738      	adds	r7, #56	@ 0x38
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bdb0      	pop	{r4, r5, r7, pc}

0800fc34 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	68b9      	ldr	r1, [r7, #8]
 800fc44:	68f8      	ldr	r0, [r7, #12]
 800fc46:	f000 f9dd 	bl	8010004 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3710      	adds	r7, #16
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800fc54:	b40f      	push	{r0, r1, r2, r3}
 800fc56:	b480      	push	{r7}
 800fc58:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800fc5a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
	}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	b004      	add	sp, #16
 800fc68:	4770      	bx	lr

0800fc6a <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	60f8      	str	r0, [r7, #12]
 800fc72:	60b9      	str	r1, [r7, #8]
 800fc74:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800fc76:	68b8      	ldr	r0, [r7, #8]
 800fc78:	f7ff f8fd 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	461a      	mov	r2, r3
 800fc80:	68f9      	ldr	r1, [r7, #12]
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f7fe ff83 	bl	800eb8e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800fc88:	68b8      	ldr	r0, [r7, #8]
 800fc8a:	f7fd f8ae 	bl	800cdea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	4619      	mov	r1, r3
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7fd f8b4 	bl	800ce00 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 800fc98:	bf00      	nop
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4618      	mov	r0, r3
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800fcb8:	b590      	push	{r4, r7, lr}
 800fcba:	b08f      	sub	sp, #60	@ 0x3c
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6178      	str	r0, [r7, #20]
 800fcc0:	6139      	str	r1, [r7, #16]
 800fcc2:	60fa      	str	r2, [r7, #12]
 800fcc4:	eeb0 7a40 	vmov.f32	s14, s0
 800fcc8:	eef0 7a60 	vmov.f32	s15, s1
 800fccc:	703b      	strb	r3, [r7, #0]
 800fcce:	ed87 7a01 	vstr	s14, [r7, #4]
 800fcd2:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __secondChild = __holeIndex;
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__secondChild < (__len - 1) / 2)
 800fcde:	e045      	b.n	800fd6c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xb4>
	  __secondChild = 2 * (__secondChild + 1);
 800fce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fce2:	3301      	adds	r3, #1
 800fce4:	005b      	lsls	r3, r3, #1
 800fce6:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (__comp(__first + __secondChild,
 800fce8:	f107 0314 	add.w	r3, r7, #20
 800fcec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fe f933 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcf8:	1e5a      	subs	r2, r3, #1
 800fcfa:	f107 0314 	add.w	r3, r7, #20
 800fcfe:	4611      	mov	r1, r2
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fe f92a 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fd06:	4602      	mov	r2, r0
 800fd08:	463b      	mov	r3, r7
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7ff f88a 	bl	800ee26 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d002      	beq.n	800fd1e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x66>
	    __secondChild--;
 800fd18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800fd1e:	f107 0314 	add.w	r3, r7, #20
 800fd22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7fe f918 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	623b      	str	r3, [r7, #32]
 800fd2e:	f107 0320 	add.w	r3, r7, #32
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7ff f893 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7ff f89b 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fd40:	4604      	mov	r4, r0
 800fd42:	f107 0314 	add.w	r3, r7, #20
 800fd46:	6939      	ldr	r1, [r7, #16]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fe f906 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7ff f881 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	4622      	mov	r2, r4
 800fd60:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd64:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 800fd68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd6a:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	3b01      	subs	r3, #1
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	da00      	bge.n	800fd76 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xbe>
 800fd74:	3301      	adds	r3, #1
 800fd76:	105b      	asrs	r3, r3, #1
 800fd78:	461a      	mov	r2, r3
 800fd7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	dbaf      	blt.n	800fce0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x28>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f003 0301 	and.w	r3, r3, #1
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d137      	bne.n	800fdfa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x142>
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	3b02      	subs	r3, #2
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	da00      	bge.n	800fd94 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xdc>
 800fd92:	3301      	adds	r3, #1
 800fd94:	105b      	asrs	r3, r3, #1
 800fd96:	461a      	mov	r2, r3
 800fd98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d12d      	bne.n	800fdfa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x142>
	  __secondChild = 2 * (__secondChild + 1);
 800fd9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fda0:	3301      	adds	r3, #1
 800fda2:	005b      	lsls	r3, r3, #1
 800fda4:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800fda6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fda8:	1e5a      	subs	r2, r3, #1
 800fdaa:	f107 0314 	add.w	r3, r7, #20
 800fdae:	4611      	mov	r1, r2
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7fe f8d2 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fdba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7ff f84d 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7ff f855 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fdcc:	4604      	mov	r4, r0
 800fdce:	f107 0314 	add.w	r3, r7, #20
 800fdd2:	6939      	ldr	r1, [r7, #16]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fe f8c0 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fdda:	4603      	mov	r3, r0
 800fddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fdde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7ff f83b 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fde8:	4603      	mov	r3, r0
 800fdea:	4622      	mov	r2, r4
 800fdec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdf0:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 800fdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800fdfa:	463b      	mov	r3, r7
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7ff fd4b 	bl	800f898 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800fe02:	4602      	mov	r2, r0
 800fe04:	f107 031c 	add.w	r3, r7, #28
 800fe08:	4611      	mov	r1, r2
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f000 f90a 	bl	8010024 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800fe10:	1d3b      	adds	r3, r7, #4
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7ff f82f 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe18:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800fe1a:	f107 021c 	add.w	r2, r7, #28
 800fe1e:	ed93 7a00 	vldr	s14, [r3]
 800fe22:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe26:	4613      	mov	r3, r2
 800fe28:	eeb0 0a47 	vmov.f32	s0, s14
 800fe2c:	eef0 0a67 	vmov.f32	s1, s15
 800fe30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe32:	6939      	ldr	r1, [r7, #16]
 800fe34:	6978      	ldr	r0, [r7, #20]
 800fe36:	f000 f903 	bl	8010040 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 800fe3a:	bf00      	nop
 800fe3c:	373c      	adds	r7, #60	@ 0x3c
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd90      	pop	{r4, r7, pc}

0800fe42 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 800fe42:	b580      	push	{r7, lr}
 800fe44:	b084      	sub	sp, #16
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
 800fe4a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f7ff f812 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe52:	4602      	mov	r2, r0
 800fe54:	f107 0308 	add.w	r3, r7, #8
 800fe58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe5c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800fe60:	6838      	ldr	r0, [r7, #0]
 800fe62:	f7ff f808 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe66:	4602      	mov	r2, r0
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe6e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800fe72:	f107 0308 	add.w	r3, r7, #8
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fe fffd 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe84:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fe88:	bf00      	nop
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800fe98:	1d3b      	adds	r3, r7, #4
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7fd f866 	bl	800cf6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800fea0:	4603      	mov	r3, r0
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4618      	mov	r0, r3
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	68b9      	ldr	r1, [r7, #8]
 800febc:	68f8      	ldr	r0, [r7, #12]
 800febe:	f000 f938 	bl	8010132 <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800fec2:	4603      	mov	r3, r0
 800fec4:	4618      	mov	r0, r3
 800fec6:	3710      	adds	r7, #16
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7ff ffda 	bl	800fe90 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800fedc:	4602      	mov	r2, r0
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	1a9b      	subs	r3, r3, r2
 800fee2:	10db      	asrs	r3, r3, #3
 800fee4:	461a      	mov	r2, r3
 800fee6:	1d3b      	adds	r3, r7, #4
 800fee8:	4611      	mov	r1, r2
 800feea:	4618      	mov	r0, r3
 800feec:	f7fe f835 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fef0:	4603      	mov	r3, r0
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fefa:	b480      	push	{r7}
 800fefc:	b083      	sub	sp, #12
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4618      	mov	r0, r3
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	370c      	adds	r7, #12
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr

0800ff26 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800ff26:	b590      	push	{r4, r7, lr}
 800ff28:	b08b      	sub	sp, #44	@ 0x2c
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6178      	str	r0, [r7, #20]
 800ff2e:	6139      	str	r1, [r7, #16]
 800ff30:	60fa      	str	r2, [r7, #12]
 800ff32:	ed87 0a02 	vstr	s0, [r7, #8]
 800ff36:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	3b01      	subs	r3, #1
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	da00      	bge.n	800ff42 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x1c>
 800ff40:	3301      	adds	r3, #1
 800ff42:	105b      	asrs	r3, r3, #1
 800ff44:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800ff46:	e02a      	b.n	800ff9e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x78>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800ff48:	f107 0314 	add.w	r3, r7, #20
 800ff4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fd fdc7 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ff54:	4603      	mov	r3, r0
 800ff56:	61bb      	str	r3, [r7, #24]
 800ff58:	f107 0318 	add.w	r3, r7, #24
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7f9 ff77 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ff62:	4603      	mov	r3, r0
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7fc f939 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	f107 0314 	add.w	r3, r7, #20
 800ff70:	6939      	ldr	r1, [r7, #16]
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fd fdb5 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	61fb      	str	r3, [r7, #28]
 800ff7c:	f107 031c 	add.w	r3, r7, #28
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7f9 ff65 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ff86:	4602      	mov	r2, r0
 800ff88:	6823      	ldr	r3, [r4, #0]
 800ff8a:	6013      	str	r3, [r2, #0]
	  __holeIndex = __parent;
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8e:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	3b01      	subs	r3, #1
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	da00      	bge.n	800ff9a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x74>
 800ff98:	3301      	adds	r3, #1
 800ff9a:	105b      	asrs	r3, r3, #1
 800ff9c:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800ff9e:	693a      	ldr	r2, [r7, #16]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	dd11      	ble.n	800ffca <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa4>
 800ffa6:	f107 0314 	add.w	r3, r7, #20
 800ffaa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fd fd98 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ffb2:	4601      	mov	r1, r0
 800ffb4:	f107 0308 	add.w	r3, r7, #8
 800ffb8:	461a      	mov	r2, r3
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 f8c9 	bl	8010152 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d001      	beq.n	800ffca <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa4>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e000      	b.n	800ffcc <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa6>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1bb      	bne.n	800ff48 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x22>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800ffd0:	f107 0308 	add.w	r3, r7, #8
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fc f901 	bl	800c1dc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ffda:	4604      	mov	r4, r0
 800ffdc:	f107 0314 	add.w	r3, r7, #20
 800ffe0:	6939      	ldr	r1, [r7, #16]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fd fd7d 	bl	800dae2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	623b      	str	r3, [r7, #32]
 800ffec:	f107 0320 	add.w	r3, r7, #32
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7f9 ff2d 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fff6:	4602      	mov	r2, r0
 800fff8:	6823      	ldr	r3, [r4, #0]
 800fffa:	6013      	str	r3, [r2, #0]
    }
 800fffc:	bf00      	nop
 800fffe:	372c      	adds	r7, #44	@ 0x2c
 8010000:	46bd      	mov	sp, r7
 8010002:	bd90      	pop	{r4, r7, pc}

08010004 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	68b9      	ldr	r1, [r7, #8]
 8010014:	68f8      	ldr	r0, [r7, #12]
 8010016:	f000 f8b9 	bl	801018c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 801001a:	4603      	mov	r3, r0
    }
 801001c:	4618      	mov	r0, r3
 801001e:	3710      	adds	r7, #16
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	4618      	mov	r0, r3
 8010032:	f7fc ffbf 	bl	800cfb4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4618      	mov	r0, r3
 801003a:	3708      	adds	r7, #8
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8010040:	b590      	push	{r4, r7, lr}
 8010042:	b08b      	sub	sp, #44	@ 0x2c
 8010044:	af00      	add	r7, sp, #0
 8010046:	6178      	str	r0, [r7, #20]
 8010048:	6139      	str	r1, [r7, #16]
 801004a:	60fa      	str	r2, [r7, #12]
 801004c:	eeb0 7a40 	vmov.f32	s14, s0
 8010050:	eef0 7a60 	vmov.f32	s15, s1
 8010054:	603b      	str	r3, [r7, #0]
 8010056:	ed87 7a01 	vstr	s14, [r7, #4]
 801005a:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	3b01      	subs	r3, #1
 8010062:	2b00      	cmp	r3, #0
 8010064:	da00      	bge.n	8010068 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x28>
 8010066:	3301      	adds	r3, #1
 8010068:	105b      	asrs	r3, r3, #1
 801006a:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 801006c:	e02d      	b.n	80100ca <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x8a>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 801006e:	f107 0314 	add.w	r3, r7, #20
 8010072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010074:	4618      	mov	r0, r3
 8010076:	f7fd ff70 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 801007a:	4603      	mov	r3, r0
 801007c:	61bb      	str	r3, [r7, #24]
 801007e:	f107 0318 	add.w	r3, r7, #24
 8010082:	4618      	mov	r0, r3
 8010084:	f7fe feeb 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8010088:	4603      	mov	r3, r0
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe fef3 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8010090:	4604      	mov	r4, r0
 8010092:	f107 0314 	add.w	r3, r7, #20
 8010096:	6939      	ldr	r1, [r7, #16]
 8010098:	4618      	mov	r0, r3
 801009a:	f7fd ff5e 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 801009e:	4603      	mov	r3, r0
 80100a0:	61fb      	str	r3, [r7, #28]
 80100a2:	f107 031c 	add.w	r3, r7, #28
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fe fed9 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80100ac:	4603      	mov	r3, r0
 80100ae:	4622      	mov	r2, r4
 80100b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100b4:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 80100b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ba:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	3b01      	subs	r3, #1
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	da00      	bge.n	80100c6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x86>
 80100c4:	3301      	adds	r3, #1
 80100c6:	105b      	asrs	r3, r3, #1
 80100c8:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80100ca:	693a      	ldr	r2, [r7, #16]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	dd10      	ble.n	80100f4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb4>
 80100d2:	f107 0314 	add.w	r3, r7, #20
 80100d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fd ff3e 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80100de:	4601      	mov	r1, r0
 80100e0:	1d3b      	adds	r3, r7, #4
 80100e2:	461a      	mov	r2, r3
 80100e4:	6838      	ldr	r0, [r7, #0]
 80100e6:	f000 f873 	bl	80101d0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 80100ea:	4603      	mov	r3, r0
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d001      	beq.n	80100f4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb4>
 80100f0:	2301      	movs	r3, #1
 80100f2:	e000      	b.n	80100f6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
 80100f4:	2300      	movs	r3, #0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d1b9      	bne.n	801006e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80100fa:	1d3b      	adds	r3, r7, #4
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fe feba 	bl	800ee76 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8010102:	4604      	mov	r4, r0
 8010104:	f107 0314 	add.w	r3, r7, #20
 8010108:	6939      	ldr	r1, [r7, #16]
 801010a:	4618      	mov	r0, r3
 801010c:	f7fd ff25 	bl	800df5a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8010110:	4603      	mov	r3, r0
 8010112:	623b      	str	r3, [r7, #32]
 8010114:	f107 0320 	add.w	r3, r7, #32
 8010118:	4618      	mov	r0, r3
 801011a:	f7fe fea0 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 801011e:	4603      	mov	r3, r0
 8010120:	4622      	mov	r2, r4
 8010122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010126:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801012a:	bf00      	nop
 801012c:	372c      	adds	r7, #44	@ 0x2c
 801012e:	46bd      	mov	sp, r7
 8010130:	bd90      	pop	{r4, r7, pc}

08010132 <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8010132:	b580      	push	{r7, lr}
 8010134:	b084      	sub	sp, #16
 8010136:	af00      	add	r7, sp, #0
 8010138:	60f8      	str	r0, [r7, #12]
 801013a:	60b9      	str	r1, [r7, #8]
 801013c:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	68b9      	ldr	r1, [r7, #8]
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f000 f85b 	bl	80101fe <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8010148:	4603      	mov	r3, r0
    }
 801014a:	4618      	mov	r0, r3
 801014c:	3710      	adds	r7, #16
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}

08010152 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8010152:	b580      	push	{r7, lr}
 8010154:	b084      	sub	sp, #16
 8010156:	af00      	add	r7, sp, #0
 8010158:	60f8      	str	r0, [r7, #12]
 801015a:	60b9      	str	r1, [r7, #8]
 801015c:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 801015e:	f107 0308 	add.w	r3, r7, #8
 8010162:	4618      	mov	r0, r3
 8010164:	f7f9 fe74 	bl	8009e50 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 8010168:	4603      	mov	r3, r0
 801016a:	ed93 7a00 	vldr	s14, [r3]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	edd3 7a00 	vldr	s15, [r3]
 8010174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801017c:	bf4c      	ite	mi
 801017e:	2301      	movmi	r3, #1
 8010180:	2300      	movpl	r3, #0
 8010182:	b2db      	uxtb	r3, r3
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801018c:	b580      	push	{r7, lr}
 801018e:	b086      	sub	sp, #24
 8010190:	af00      	add	r7, sp, #0
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010198:	68ba      	ldr	r2, [r7, #8]
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	1ad3      	subs	r3, r2, r3
 801019e:	109b      	asrs	r3, r3, #2
 80101a0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d00a      	beq.n	80101be <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	425b      	negs	r3, r3
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	18d0      	adds	r0, r2, r3
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	009b      	lsls	r3, r3, #2
 80101b6:	461a      	mov	r2, r3
 80101b8:	68f9      	ldr	r1, [r7, #12]
 80101ba:	f00e faf9 	bl	801e7b0 <memmove>
	  return __result - _Num;
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	425b      	negs	r3, r3
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	4413      	add	r3, r2
	}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3718      	adds	r7, #24
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 80101d0:	b590      	push	{r4, r7, lr}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 80101dc:	68fc      	ldr	r4, [r7, #12]
 80101de:	f107 0308 	add.w	r3, r7, #8
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fe fe3b 	bl	800ee5e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80101e8:	4603      	mov	r3, r0
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	4619      	mov	r1, r3
 80101ee:	4620      	mov	r0, r4
 80101f0:	f7f3 fc24 	bl	8003a3c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80101f4:	4603      	mov	r3, r0
 80101f6:	4618      	mov	r0, r3
 80101f8:	3714      	adds	r7, #20
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd90      	pop	{r4, r7, pc}

080101fe <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80101fe:	b580      	push	{r7, lr}
 8010200:	b086      	sub	sp, #24
 8010202:	af00      	add	r7, sp, #0
 8010204:	60f8      	str	r0, [r7, #12]
 8010206:	60b9      	str	r1, [r7, #8]
 8010208:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801020a:	68ba      	ldr	r2, [r7, #8]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	10db      	asrs	r3, r3, #3
 8010212:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00a      	beq.n	8010230 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	00db      	lsls	r3, r3, #3
 801021e:	425b      	negs	r3, r3
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	18d0      	adds	r0, r2, r3
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	00db      	lsls	r3, r3, #3
 8010228:	461a      	mov	r2, r3
 801022a:	68f9      	ldr	r1, [r7, #12]
 801022c:	f00e fac0 	bl	801e7b0 <memmove>
	  return __result - _Num;
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	425b      	negs	r3, r3
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	4413      	add	r3, r2
	}
 801023a:	4618      	mov	r0, r3
 801023c:	3718      	adds	r7, #24
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
	...

08010244 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2b01      	cmp	r3, #1
 8010252:	d108      	bne.n	8010266 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801025a:	4293      	cmp	r3, r2
 801025c:	d103      	bne.n	8010266 <_Z41__static_initialization_and_destruction_0ii+0x22>
    .calibration = ei_calibration,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};

ei_impulse_handle_t impulse_handle_365511_0 = ei_impulse_handle_t( &impulse_365511_0 );
 801025e:	4909      	ldr	r1, [pc, #36]	@ (8010284 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010260:	4809      	ldr	r0, [pc, #36]	@ (8010288 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8010262:	f7f2 fe3f 	bl	8002ee4 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d107      	bne.n	801027c <_Z41__static_initialization_and_destruction_0ii+0x38>
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010272:	4293      	cmp	r3, r2
 8010274:	d102      	bne.n	801027c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8010276:	4804      	ldr	r0, [pc, #16]	@ (8010288 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8010278:	f7f7 f993 	bl	80075a2 <_ZN19ei_impulse_handle_tD1Ev>
 801027c:	bf00      	nop
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	080243bc 	.word	0x080243bc
 8010288:	200053b0 	.word	0x200053b0

0801028c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 801028c:	b580      	push	{r7, lr}
 801028e:	af00      	add	r7, sp, #0
 8010290:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010294:	2001      	movs	r0, #1
 8010296:	f7ff ffd5 	bl	8010244 <_Z41__static_initialization_and_destruction_0ii>
 801029a:	bd80      	pop	{r7, pc}

0801029c <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 801029c:	b580      	push	{r7, lr}
 801029e:	af00      	add	r7, sp, #0
 80102a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80102a4:	2000      	movs	r0, #0
 80102a6:	f7ff ffcd 	bl	8010244 <_Z41__static_initialization_and_destruction_0ii>
 80102aa:	bd80      	pop	{r7, pc}

080102ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80102b2:	4b0f      	ldr	r3, [pc, #60]	@ (80102f0 <HAL_MspInit+0x44>)
 80102b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102b6:	4a0e      	ldr	r2, [pc, #56]	@ (80102f0 <HAL_MspInit+0x44>)
 80102b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80102bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80102be:	4b0c      	ldr	r3, [pc, #48]	@ (80102f0 <HAL_MspInit+0x44>)
 80102c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80102c6:	607b      	str	r3, [r7, #4]
 80102c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80102ca:	4b09      	ldr	r3, [pc, #36]	@ (80102f0 <HAL_MspInit+0x44>)
 80102cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102ce:	4a08      	ldr	r2, [pc, #32]	@ (80102f0 <HAL_MspInit+0x44>)
 80102d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80102d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80102d6:	4b06      	ldr	r3, [pc, #24]	@ (80102f0 <HAL_MspInit+0x44>)
 80102d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80102de:	603b      	str	r3, [r7, #0]
 80102e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80102e2:	bf00      	nop
 80102e4:	370c      	adds	r7, #12
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop
 80102f0:	40023800 	.word	0x40023800

080102f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b0ac      	sub	sp, #176	@ 0xb0
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8010300:	2200      	movs	r2, #0
 8010302:	601a      	str	r2, [r3, #0]
 8010304:	605a      	str	r2, [r3, #4]
 8010306:	609a      	str	r2, [r3, #8]
 8010308:	60da      	str	r2, [r3, #12]
 801030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801030c:	f107 0318 	add.w	r3, r7, #24
 8010310:	2284      	movs	r2, #132	@ 0x84
 8010312:	2100      	movs	r1, #0
 8010314:	4618      	mov	r0, r3
 8010316:	f00e fa65 	bl	801e7e4 <memset>
  if(huart->Instance==USART1)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4a36      	ldr	r2, [pc, #216]	@ (80103f8 <HAL_UART_MspInit+0x104>)
 8010320:	4293      	cmp	r3, r2
 8010322:	d164      	bne.n	80103ee <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8010324:	2340      	movs	r3, #64	@ 0x40
 8010326:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8010328:	2300      	movs	r3, #0
 801032a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801032c:	f107 0318 	add.w	r3, r7, #24
 8010330:	4618      	mov	r0, r3
 8010332:	f001 fa19 	bl	8011768 <HAL_RCCEx_PeriphCLKConfig>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d001      	beq.n	8010340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 801033c:	f7f9 fc26 	bl	8009b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010340:	4b2e      	ldr	r3, [pc, #184]	@ (80103fc <HAL_UART_MspInit+0x108>)
 8010342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010344:	4a2d      	ldr	r2, [pc, #180]	@ (80103fc <HAL_UART_MspInit+0x108>)
 8010346:	f043 0310 	orr.w	r3, r3, #16
 801034a:	6453      	str	r3, [r2, #68]	@ 0x44
 801034c:	4b2b      	ldr	r3, [pc, #172]	@ (80103fc <HAL_UART_MspInit+0x108>)
 801034e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010350:	f003 0310 	and.w	r3, r3, #16
 8010354:	617b      	str	r3, [r7, #20]
 8010356:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010358:	4b28      	ldr	r3, [pc, #160]	@ (80103fc <HAL_UART_MspInit+0x108>)
 801035a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801035c:	4a27      	ldr	r2, [pc, #156]	@ (80103fc <HAL_UART_MspInit+0x108>)
 801035e:	f043 0302 	orr.w	r3, r3, #2
 8010362:	6313      	str	r3, [r2, #48]	@ 0x30
 8010364:	4b25      	ldr	r3, [pc, #148]	@ (80103fc <HAL_UART_MspInit+0x108>)
 8010366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010368:	f003 0302 	and.w	r3, r3, #2
 801036c:	613b      	str	r3, [r7, #16]
 801036e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010370:	4b22      	ldr	r3, [pc, #136]	@ (80103fc <HAL_UART_MspInit+0x108>)
 8010372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010374:	4a21      	ldr	r2, [pc, #132]	@ (80103fc <HAL_UART_MspInit+0x108>)
 8010376:	f043 0301 	orr.w	r3, r3, #1
 801037a:	6313      	str	r3, [r2, #48]	@ 0x30
 801037c:	4b1f      	ldr	r3, [pc, #124]	@ (80103fc <HAL_UART_MspInit+0x108>)
 801037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010380:	f003 0301 	and.w	r3, r3, #1
 8010384:	60fb      	str	r3, [r7, #12]
 8010386:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8010388:	2380      	movs	r3, #128	@ 0x80
 801038a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801038e:	2302      	movs	r3, #2
 8010390:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010394:	2300      	movs	r3, #0
 8010396:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801039a:	2300      	movs	r3, #0
 801039c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80103a0:	2307      	movs	r3, #7
 80103a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80103a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80103aa:	4619      	mov	r1, r3
 80103ac:	4814      	ldr	r0, [pc, #80]	@ (8010400 <HAL_UART_MspInit+0x10c>)
 80103ae:	f000 fb8b 	bl	8010ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80103b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80103b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103ba:	2302      	movs	r3, #2
 80103bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103c0:	2300      	movs	r3, #0
 80103c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103c6:	2300      	movs	r3, #0
 80103c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80103cc:	2307      	movs	r3, #7
 80103ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80103d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80103d6:	4619      	mov	r1, r3
 80103d8:	480a      	ldr	r0, [pc, #40]	@ (8010404 <HAL_UART_MspInit+0x110>)
 80103da:	f000 fb75 	bl	8010ac8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80103de:	2200      	movs	r2, #0
 80103e0:	2100      	movs	r1, #0
 80103e2:	2025      	movs	r0, #37	@ 0x25
 80103e4:	f000 faa7 	bl	8010936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80103e8:	2025      	movs	r0, #37	@ 0x25
 80103ea:	f000 fac0 	bl	801096e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80103ee:	bf00      	nop
 80103f0:	37b0      	adds	r7, #176	@ 0xb0
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	40011000 	.word	0x40011000
 80103fc:	40023800 	.word	0x40023800
 8010400:	40020400 	.word	0x40020400
 8010404:	40020000 	.word	0x40020000

08010408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010408:	b480      	push	{r7}
 801040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 801040c:	bf00      	nop
 801040e:	e7fd      	b.n	801040c <NMI_Handler+0x4>

08010410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010410:	b480      	push	{r7}
 8010412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010414:	bf00      	nop
 8010416:	e7fd      	b.n	8010414 <HardFault_Handler+0x4>

08010418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010418:	b480      	push	{r7}
 801041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801041c:	bf00      	nop
 801041e:	e7fd      	b.n	801041c <MemManage_Handler+0x4>

08010420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010420:	b480      	push	{r7}
 8010422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010424:	bf00      	nop
 8010426:	e7fd      	b.n	8010424 <BusFault_Handler+0x4>

08010428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010428:	b480      	push	{r7}
 801042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801042c:	bf00      	nop
 801042e:	e7fd      	b.n	801042c <UsageFault_Handler+0x4>

08010430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010430:	b480      	push	{r7}
 8010432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010434:	bf00      	nop
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801043e:	b480      	push	{r7}
 8010440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010442:	bf00      	nop
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr

0801044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801044c:	b480      	push	{r7}
 801044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010450:	bf00      	nop
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr

0801045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801045a:	b580      	push	{r7, lr}
 801045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801045e:	f000 f94b 	bl	80106f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010462:	bf00      	nop
 8010464:	bd80      	pop	{r7, pc}
	...

08010468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801046c:	4802      	ldr	r0, [pc, #8]	@ (8010478 <USART1_IRQHandler+0x10>)
 801046e:	f001 fe3d 	bl	80120ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8010472:	bf00      	nop
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	200053c4 	.word	0x200053c4

0801047c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801047c:	b480      	push	{r7}
 801047e:	af00      	add	r7, sp, #0
  return 1;
 8010480:	2301      	movs	r3, #1
}
 8010482:	4618      	mov	r0, r3
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <_kill>:

int _kill(int pid, int sig)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010496:	f00e fa59 	bl	801e94c <__errno>
 801049a:	4603      	mov	r3, r0
 801049c:	2216      	movs	r2, #22
 801049e:	601a      	str	r2, [r3, #0]
  return -1;
 80104a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <_exit>:

void _exit (int status)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80104b4:	f04f 31ff 	mov.w	r1, #4294967295
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7ff ffe7 	bl	801048c <_kill>
  while (1) {}    /* Make sure we hang here */
 80104be:	bf00      	nop
 80104c0:	e7fd      	b.n	80104be <_exit+0x12>

080104c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b086      	sub	sp, #24
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	60f8      	str	r0, [r7, #12]
 80104ca:	60b9      	str	r1, [r7, #8]
 80104cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80104ce:	2300      	movs	r3, #0
 80104d0:	617b      	str	r3, [r7, #20]
 80104d2:	e00a      	b.n	80104ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80104d4:	f3af 8000 	nop.w
 80104d8:	4601      	mov	r1, r0
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	1c5a      	adds	r2, r3, #1
 80104de:	60ba      	str	r2, [r7, #8]
 80104e0:	b2ca      	uxtb	r2, r1
 80104e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	3301      	adds	r3, #1
 80104e8:	617b      	str	r3, [r7, #20]
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	dbf0      	blt.n	80104d4 <_read+0x12>
  }

  return len;
 80104f2:	687b      	ldr	r3, [r7, #4]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3718      	adds	r7, #24
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010508:	2300      	movs	r3, #0
 801050a:	617b      	str	r3, [r7, #20]
 801050c:	e009      	b.n	8010522 <_write+0x26>
  {
    __io_putchar(*ptr++);
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	1c5a      	adds	r2, r3, #1
 8010512:	60ba      	str	r2, [r7, #8]
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	4618      	mov	r0, r3
 8010518:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	3301      	adds	r3, #1
 8010520:	617b      	str	r3, [r7, #20]
 8010522:	697a      	ldr	r2, [r7, #20]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	429a      	cmp	r2, r3
 8010528:	dbf1      	blt.n	801050e <_write+0x12>
  }
  return len;
 801052a:	687b      	ldr	r3, [r7, #4]
}
 801052c:	4618      	mov	r0, r3
 801052e:	3718      	adds	r7, #24
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <_close>:

int _close(int file)
{
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801053c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010540:	4618      	mov	r0, r3
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801054c:	b480      	push	{r7}
 801054e:	b083      	sub	sp, #12
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801055c:	605a      	str	r2, [r3, #4]
  return 0;
 801055e:	2300      	movs	r3, #0
}
 8010560:	4618      	mov	r0, r3
 8010562:	370c      	adds	r7, #12
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr

0801056c <_isatty>:

int _isatty(int file)
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010574:	2301      	movs	r3, #1
}
 8010576:	4618      	mov	r0, r3
 8010578:	370c      	adds	r7, #12
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr

08010582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010582:	b480      	push	{r7}
 8010584:	b085      	sub	sp, #20
 8010586:	af00      	add	r7, sp, #0
 8010588:	60f8      	str	r0, [r7, #12]
 801058a:	60b9      	str	r1, [r7, #8]
 801058c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80105a4:	4a14      	ldr	r2, [pc, #80]	@ (80105f8 <_sbrk+0x5c>)
 80105a6:	4b15      	ldr	r3, [pc, #84]	@ (80105fc <_sbrk+0x60>)
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80105b0:	4b13      	ldr	r3, [pc, #76]	@ (8010600 <_sbrk+0x64>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d102      	bne.n	80105be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80105b8:	4b11      	ldr	r3, [pc, #68]	@ (8010600 <_sbrk+0x64>)
 80105ba:	4a12      	ldr	r2, [pc, #72]	@ (8010604 <_sbrk+0x68>)
 80105bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80105be:	4b10      	ldr	r3, [pc, #64]	@ (8010600 <_sbrk+0x64>)
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	4413      	add	r3, r2
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d207      	bcs.n	80105dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80105cc:	f00e f9be 	bl	801e94c <__errno>
 80105d0:	4603      	mov	r3, r0
 80105d2:	220c      	movs	r2, #12
 80105d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80105d6:	f04f 33ff 	mov.w	r3, #4294967295
 80105da:	e009      	b.n	80105f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80105dc:	4b08      	ldr	r3, [pc, #32]	@ (8010600 <_sbrk+0x64>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80105e2:	4b07      	ldr	r3, [pc, #28]	@ (8010600 <_sbrk+0x64>)
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	4413      	add	r3, r2
 80105ea:	4a05      	ldr	r2, [pc, #20]	@ (8010600 <_sbrk+0x64>)
 80105ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80105ee:	68fb      	ldr	r3, [r7, #12]
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3718      	adds	r7, #24
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	20050000 	.word	0x20050000
 80105fc:	00000400 	.word	0x00000400
 8010600:	2000544c 	.word	0x2000544c
 8010604:	200057f8 	.word	0x200057f8

08010608 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010608:	b480      	push	{r7}
 801060a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801060c:	4b06      	ldr	r3, [pc, #24]	@ (8010628 <SystemInit+0x20>)
 801060e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010612:	4a05      	ldr	r2, [pc, #20]	@ (8010628 <SystemInit+0x20>)
 8010614:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801061c:	bf00      	nop
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	e000ed00 	.word	0xe000ed00

0801062c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801062c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8010664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010630:	480d      	ldr	r0, [pc, #52]	@ (8010668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010632:	490e      	ldr	r1, [pc, #56]	@ (801066c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010634:	4a0e      	ldr	r2, [pc, #56]	@ (8010670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010638:	e002      	b.n	8010640 <LoopCopyDataInit>

0801063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801063e:	3304      	adds	r3, #4

08010640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010644:	d3f9      	bcc.n	801063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010646:	4a0b      	ldr	r2, [pc, #44]	@ (8010674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010648:	4c0b      	ldr	r4, [pc, #44]	@ (8010678 <LoopFillZerobss+0x26>)
  movs r3, #0
 801064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801064c:	e001      	b.n	8010652 <LoopFillZerobss>

0801064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010650:	3204      	adds	r2, #4

08010652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010654:	d3fb      	bcc.n	801064e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010656:	f7ff ffd7 	bl	8010608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801065a:	f00e f97d 	bl	801e958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801065e:	f7f8 fbf7 	bl	8008e50 <main>
  bx  lr    
 8010662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010664:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8010668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801066c:	20005390 	.word	0x20005390
  ldr r2, =_sidata
 8010670:	08029a18 	.word	0x08029a18
  ldr r2, =_sbss
 8010674:	20005390 	.word	0x20005390
  ldr r4, =_ebss
 8010678:	200057f4 	.word	0x200057f4

0801067c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801067c:	e7fe      	b.n	801067c <ADC_IRQHandler>

0801067e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010682:	2003      	movs	r0, #3
 8010684:	f000 f94c 	bl	8010920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010688:	2000      	movs	r0, #0
 801068a:	f000 f805 	bl	8010698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801068e:	f7ff fe0d 	bl	80102ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010692:	2300      	movs	r3, #0
}
 8010694:	4618      	mov	r0, r3
 8010696:	bd80      	pop	{r7, pc}

08010698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80106a0:	4b12      	ldr	r3, [pc, #72]	@ (80106ec <HAL_InitTick+0x54>)
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	4b12      	ldr	r3, [pc, #72]	@ (80106f0 <HAL_InitTick+0x58>)
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	4619      	mov	r1, r3
 80106aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80106ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80106b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80106b6:	4618      	mov	r0, r3
 80106b8:	f000 f967 	bl	801098a <HAL_SYSTICK_Config>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d001      	beq.n	80106c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80106c2:	2301      	movs	r3, #1
 80106c4:	e00e      	b.n	80106e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b0f      	cmp	r3, #15
 80106ca:	d80a      	bhi.n	80106e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80106cc:	2200      	movs	r2, #0
 80106ce:	6879      	ldr	r1, [r7, #4]
 80106d0:	f04f 30ff 	mov.w	r0, #4294967295
 80106d4:	f000 f92f 	bl	8010936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80106d8:	4a06      	ldr	r2, [pc, #24]	@ (80106f4 <HAL_InitTick+0x5c>)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80106de:	2300      	movs	r3, #0
 80106e0:	e000      	b.n	80106e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80106e2:	2301      	movs	r3, #1
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	200050a0 	.word	0x200050a0
 80106f0:	200050a8 	.word	0x200050a8
 80106f4:	200050a4 	.word	0x200050a4

080106f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80106f8:	b480      	push	{r7}
 80106fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80106fc:	4b06      	ldr	r3, [pc, #24]	@ (8010718 <HAL_IncTick+0x20>)
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	461a      	mov	r2, r3
 8010702:	4b06      	ldr	r3, [pc, #24]	@ (801071c <HAL_IncTick+0x24>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4413      	add	r3, r2
 8010708:	4a04      	ldr	r2, [pc, #16]	@ (801071c <HAL_IncTick+0x24>)
 801070a:	6013      	str	r3, [r2, #0]
}
 801070c:	bf00      	nop
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr
 8010716:	bf00      	nop
 8010718:	200050a8 	.word	0x200050a8
 801071c:	20005450 	.word	0x20005450

08010720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010720:	b480      	push	{r7}
 8010722:	af00      	add	r7, sp, #0
  return uwTick;
 8010724:	4b03      	ldr	r3, [pc, #12]	@ (8010734 <HAL_GetTick+0x14>)
 8010726:	681b      	ldr	r3, [r3, #0]
}
 8010728:	4618      	mov	r0, r3
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop
 8010734:	20005450 	.word	0x20005450

08010738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010740:	f7ff ffee 	bl	8010720 <HAL_GetTick>
 8010744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010750:	d005      	beq.n	801075e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010752:	4b0a      	ldr	r3, [pc, #40]	@ (801077c <HAL_Delay+0x44>)
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	461a      	mov	r2, r3
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	4413      	add	r3, r2
 801075c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801075e:	bf00      	nop
 8010760:	f7ff ffde 	bl	8010720 <HAL_GetTick>
 8010764:	4602      	mov	r2, r0
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	1ad3      	subs	r3, r2, r3
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	429a      	cmp	r2, r3
 801076e:	d8f7      	bhi.n	8010760 <HAL_Delay+0x28>
  {
  }
}
 8010770:	bf00      	nop
 8010772:	bf00      	nop
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	200050a8 	.word	0x200050a8

08010780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010780:	b480      	push	{r7}
 8010782:	b085      	sub	sp, #20
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f003 0307 	and.w	r3, r3, #7
 801078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010790:	4b0b      	ldr	r3, [pc, #44]	@ (80107c0 <__NVIC_SetPriorityGrouping+0x40>)
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010796:	68ba      	ldr	r2, [r7, #8]
 8010798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801079c:	4013      	ands	r3, r2
 801079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80107a8:	4b06      	ldr	r3, [pc, #24]	@ (80107c4 <__NVIC_SetPriorityGrouping+0x44>)
 80107aa:	4313      	orrs	r3, r2
 80107ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80107ae:	4a04      	ldr	r2, [pc, #16]	@ (80107c0 <__NVIC_SetPriorityGrouping+0x40>)
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	60d3      	str	r3, [r2, #12]
}
 80107b4:	bf00      	nop
 80107b6:	3714      	adds	r7, #20
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr
 80107c0:	e000ed00 	.word	0xe000ed00
 80107c4:	05fa0000 	.word	0x05fa0000

080107c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80107c8:	b480      	push	{r7}
 80107ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80107cc:	4b04      	ldr	r3, [pc, #16]	@ (80107e0 <__NVIC_GetPriorityGrouping+0x18>)
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	0a1b      	lsrs	r3, r3, #8
 80107d2:	f003 0307 	and.w	r3, r3, #7
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	e000ed00 	.word	0xe000ed00

080107e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	4603      	mov	r3, r0
 80107ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80107ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	db0b      	blt.n	801080e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80107f6:	79fb      	ldrb	r3, [r7, #7]
 80107f8:	f003 021f 	and.w	r2, r3, #31
 80107fc:	4907      	ldr	r1, [pc, #28]	@ (801081c <__NVIC_EnableIRQ+0x38>)
 80107fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010802:	095b      	lsrs	r3, r3, #5
 8010804:	2001      	movs	r0, #1
 8010806:	fa00 f202 	lsl.w	r2, r0, r2
 801080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801080e:	bf00      	nop
 8010810:	370c      	adds	r7, #12
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	e000e100 	.word	0xe000e100

08010820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	4603      	mov	r3, r0
 8010828:	6039      	str	r1, [r7, #0]
 801082a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010830:	2b00      	cmp	r3, #0
 8010832:	db0a      	blt.n	801084a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	b2da      	uxtb	r2, r3
 8010838:	490c      	ldr	r1, [pc, #48]	@ (801086c <__NVIC_SetPriority+0x4c>)
 801083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801083e:	0112      	lsls	r2, r2, #4
 8010840:	b2d2      	uxtb	r2, r2
 8010842:	440b      	add	r3, r1
 8010844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010848:	e00a      	b.n	8010860 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	b2da      	uxtb	r2, r3
 801084e:	4908      	ldr	r1, [pc, #32]	@ (8010870 <__NVIC_SetPriority+0x50>)
 8010850:	79fb      	ldrb	r3, [r7, #7]
 8010852:	f003 030f 	and.w	r3, r3, #15
 8010856:	3b04      	subs	r3, #4
 8010858:	0112      	lsls	r2, r2, #4
 801085a:	b2d2      	uxtb	r2, r2
 801085c:	440b      	add	r3, r1
 801085e:	761a      	strb	r2, [r3, #24]
}
 8010860:	bf00      	nop
 8010862:	370c      	adds	r7, #12
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr
 801086c:	e000e100 	.word	0xe000e100
 8010870:	e000ed00 	.word	0xe000ed00

08010874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010874:	b480      	push	{r7}
 8010876:	b089      	sub	sp, #36	@ 0x24
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f003 0307 	and.w	r3, r3, #7
 8010886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	f1c3 0307 	rsb	r3, r3, #7
 801088e:	2b04      	cmp	r3, #4
 8010890:	bf28      	it	cs
 8010892:	2304      	movcs	r3, #4
 8010894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	3304      	adds	r3, #4
 801089a:	2b06      	cmp	r3, #6
 801089c:	d902      	bls.n	80108a4 <NVIC_EncodePriority+0x30>
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	3b03      	subs	r3, #3
 80108a2:	e000      	b.n	80108a6 <NVIC_EncodePriority+0x32>
 80108a4:	2300      	movs	r3, #0
 80108a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80108a8:	f04f 32ff 	mov.w	r2, #4294967295
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	fa02 f303 	lsl.w	r3, r2, r3
 80108b2:	43da      	mvns	r2, r3
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	401a      	ands	r2, r3
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80108bc:	f04f 31ff 	mov.w	r1, #4294967295
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	fa01 f303 	lsl.w	r3, r1, r3
 80108c6:	43d9      	mvns	r1, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80108cc:	4313      	orrs	r3, r2
         );
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3724      	adds	r7, #36	@ 0x24
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr
	...

080108dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	3b01      	subs	r3, #1
 80108e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80108ec:	d301      	bcc.n	80108f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80108ee:	2301      	movs	r3, #1
 80108f0:	e00f      	b.n	8010912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80108f2:	4a0a      	ldr	r2, [pc, #40]	@ (801091c <SysTick_Config+0x40>)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3b01      	subs	r3, #1
 80108f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80108fa:	210f      	movs	r1, #15
 80108fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010900:	f7ff ff8e 	bl	8010820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010904:	4b05      	ldr	r3, [pc, #20]	@ (801091c <SysTick_Config+0x40>)
 8010906:	2200      	movs	r2, #0
 8010908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801090a:	4b04      	ldr	r3, [pc, #16]	@ (801091c <SysTick_Config+0x40>)
 801090c:	2207      	movs	r2, #7
 801090e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010910:	2300      	movs	r3, #0
}
 8010912:	4618      	mov	r0, r3
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	e000e010 	.word	0xe000e010

08010920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f7ff ff29 	bl	8010780 <__NVIC_SetPriorityGrouping>
}
 801092e:	bf00      	nop
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010936:	b580      	push	{r7, lr}
 8010938:	b086      	sub	sp, #24
 801093a:	af00      	add	r7, sp, #0
 801093c:	4603      	mov	r3, r0
 801093e:	60b9      	str	r1, [r7, #8]
 8010940:	607a      	str	r2, [r7, #4]
 8010942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8010944:	2300      	movs	r3, #0
 8010946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010948:	f7ff ff3e 	bl	80107c8 <__NVIC_GetPriorityGrouping>
 801094c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	68b9      	ldr	r1, [r7, #8]
 8010952:	6978      	ldr	r0, [r7, #20]
 8010954:	f7ff ff8e 	bl	8010874 <NVIC_EncodePriority>
 8010958:	4602      	mov	r2, r0
 801095a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801095e:	4611      	mov	r1, r2
 8010960:	4618      	mov	r0, r3
 8010962:	f7ff ff5d 	bl	8010820 <__NVIC_SetPriority>
}
 8010966:	bf00      	nop
 8010968:	3718      	adds	r7, #24
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b082      	sub	sp, #8
 8010972:	af00      	add	r7, sp, #0
 8010974:	4603      	mov	r3, r0
 8010976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801097c:	4618      	mov	r0, r3
 801097e:	f7ff ff31 	bl	80107e4 <__NVIC_EnableIRQ>
}
 8010982:	bf00      	nop
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}

0801098a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801098a:	b580      	push	{r7, lr}
 801098c:	b082      	sub	sp, #8
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7ff ffa2 	bl	80108dc <SysTick_Config>
 8010998:	4603      	mov	r3, r0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3708      	adds	r7, #8
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b084      	sub	sp, #16
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80109b0:	f7ff feb6 	bl	8010720 <HAL_GetTick>
 80109b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	2b02      	cmp	r3, #2
 80109c0:	d008      	beq.n	80109d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2280      	movs	r2, #128	@ 0x80
 80109c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80109d0:	2301      	movs	r3, #1
 80109d2:	e052      	b.n	8010a7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f022 0216 	bic.w	r2, r2, #22
 80109e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	695a      	ldr	r2, [r3, #20]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80109f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d103      	bne.n	8010a04 <HAL_DMA_Abort+0x62>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d007      	beq.n	8010a14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f022 0208 	bic.w	r2, r2, #8
 8010a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f022 0201 	bic.w	r2, r2, #1
 8010a22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010a24:	e013      	b.n	8010a4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010a26:	f7ff fe7b 	bl	8010720 <HAL_GetTick>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	1ad3      	subs	r3, r2, r3
 8010a30:	2b05      	cmp	r3, #5
 8010a32:	d90c      	bls.n	8010a4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2220      	movs	r2, #32
 8010a38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2203      	movs	r2, #3
 8010a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2200      	movs	r2, #0
 8010a46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8010a4a:	2303      	movs	r3, #3
 8010a4c:	e015      	b.n	8010a7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f003 0301 	and.w	r3, r3, #1
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d1e4      	bne.n	8010a26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a60:	223f      	movs	r2, #63	@ 0x3f
 8010a62:	409a      	lsls	r2, r3
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8010a78:	2300      	movs	r3, #0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010a82:	b480      	push	{r7}
 8010a84:	b083      	sub	sp, #12
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d004      	beq.n	8010aa0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2280      	movs	r2, #128	@ 0x80
 8010a9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e00c      	b.n	8010aba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2205      	movs	r2, #5
 8010aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	681a      	ldr	r2, [r3, #0]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f022 0201 	bic.w	r2, r2, #1
 8010ab6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	370c      	adds	r7, #12
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr
	...

08010ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b089      	sub	sp, #36	@ 0x24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8010ada:	2300      	movs	r3, #0
 8010adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	61fb      	str	r3, [r7, #28]
 8010ae6:	e175      	b.n	8010dd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8010ae8:	2201      	movs	r2, #1
 8010aea:	69fb      	ldr	r3, [r7, #28]
 8010aec:	fa02 f303 	lsl.w	r3, r2, r3
 8010af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	697a      	ldr	r2, [r7, #20]
 8010af8:	4013      	ands	r3, r2
 8010afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010afc:	693a      	ldr	r2, [r7, #16]
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	f040 8164 	bne.w	8010dce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	f003 0303 	and.w	r3, r3, #3
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d005      	beq.n	8010b1e <HAL_GPIO_Init+0x56>
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	f003 0303 	and.w	r3, r3, #3
 8010b1a:	2b02      	cmp	r3, #2
 8010b1c:	d130      	bne.n	8010b80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	005b      	lsls	r3, r3, #1
 8010b28:	2203      	movs	r2, #3
 8010b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8010b2e:	43db      	mvns	r3, r3
 8010b30:	69ba      	ldr	r2, [r7, #24]
 8010b32:	4013      	ands	r3, r2
 8010b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	68da      	ldr	r2, [r3, #12]
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	005b      	lsls	r3, r3, #1
 8010b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b42:	69ba      	ldr	r2, [r7, #24]
 8010b44:	4313      	orrs	r3, r2
 8010b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	69ba      	ldr	r2, [r7, #24]
 8010b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010b54:	2201      	movs	r2, #1
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	fa02 f303 	lsl.w	r3, r2, r3
 8010b5c:	43db      	mvns	r3, r3
 8010b5e:	69ba      	ldr	r2, [r7, #24]
 8010b60:	4013      	ands	r3, r2
 8010b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	091b      	lsrs	r3, r3, #4
 8010b6a:	f003 0201 	and.w	r2, r3, #1
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	fa02 f303 	lsl.w	r3, r2, r3
 8010b74:	69ba      	ldr	r2, [r7, #24]
 8010b76:	4313      	orrs	r3, r2
 8010b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	69ba      	ldr	r2, [r7, #24]
 8010b7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	f003 0303 	and.w	r3, r3, #3
 8010b88:	2b03      	cmp	r3, #3
 8010b8a:	d017      	beq.n	8010bbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	005b      	lsls	r3, r3, #1
 8010b96:	2203      	movs	r2, #3
 8010b98:	fa02 f303 	lsl.w	r3, r2, r3
 8010b9c:	43db      	mvns	r3, r3
 8010b9e:	69ba      	ldr	r2, [r7, #24]
 8010ba0:	4013      	ands	r3, r2
 8010ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	689a      	ldr	r2, [r3, #8]
 8010ba8:	69fb      	ldr	r3, [r7, #28]
 8010baa:	005b      	lsls	r3, r3, #1
 8010bac:	fa02 f303 	lsl.w	r3, r2, r3
 8010bb0:	69ba      	ldr	r2, [r7, #24]
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	69ba      	ldr	r2, [r7, #24]
 8010bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	f003 0303 	and.w	r3, r3, #3
 8010bc4:	2b02      	cmp	r3, #2
 8010bc6:	d123      	bne.n	8010c10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	08da      	lsrs	r2, r3, #3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	3208      	adds	r2, #8
 8010bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	f003 0307 	and.w	r3, r3, #7
 8010bdc:	009b      	lsls	r3, r3, #2
 8010bde:	220f      	movs	r2, #15
 8010be0:	fa02 f303 	lsl.w	r3, r2, r3
 8010be4:	43db      	mvns	r3, r3
 8010be6:	69ba      	ldr	r2, [r7, #24]
 8010be8:	4013      	ands	r3, r2
 8010bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	691a      	ldr	r2, [r3, #16]
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	f003 0307 	and.w	r3, r3, #7
 8010bf6:	009b      	lsls	r3, r3, #2
 8010bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bfc:	69ba      	ldr	r2, [r7, #24]
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8010c02:	69fb      	ldr	r3, [r7, #28]
 8010c04:	08da      	lsrs	r2, r3, #3
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	3208      	adds	r2, #8
 8010c0a:	69b9      	ldr	r1, [r7, #24]
 8010c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	005b      	lsls	r3, r3, #1
 8010c1a:	2203      	movs	r2, #3
 8010c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c20:	43db      	mvns	r3, r3
 8010c22:	69ba      	ldr	r2, [r7, #24]
 8010c24:	4013      	ands	r3, r2
 8010c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	f003 0203 	and.w	r2, r3, #3
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	fa02 f303 	lsl.w	r3, r2, r3
 8010c38:	69ba      	ldr	r2, [r7, #24]
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	69ba      	ldr	r2, [r7, #24]
 8010c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	f000 80be 	beq.w	8010dce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010c52:	4b66      	ldr	r3, [pc, #408]	@ (8010dec <HAL_GPIO_Init+0x324>)
 8010c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c56:	4a65      	ldr	r2, [pc, #404]	@ (8010dec <HAL_GPIO_Init+0x324>)
 8010c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8010c5e:	4b63      	ldr	r3, [pc, #396]	@ (8010dec <HAL_GPIO_Init+0x324>)
 8010c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010c66:	60fb      	str	r3, [r7, #12]
 8010c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8010c6a:	4a61      	ldr	r2, [pc, #388]	@ (8010df0 <HAL_GPIO_Init+0x328>)
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	089b      	lsrs	r3, r3, #2
 8010c70:	3302      	adds	r3, #2
 8010c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	f003 0303 	and.w	r3, r3, #3
 8010c7e:	009b      	lsls	r3, r3, #2
 8010c80:	220f      	movs	r2, #15
 8010c82:	fa02 f303 	lsl.w	r3, r2, r3
 8010c86:	43db      	mvns	r3, r3
 8010c88:	69ba      	ldr	r2, [r7, #24]
 8010c8a:	4013      	ands	r3, r2
 8010c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4a58      	ldr	r2, [pc, #352]	@ (8010df4 <HAL_GPIO_Init+0x32c>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d037      	beq.n	8010d06 <HAL_GPIO_Init+0x23e>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	4a57      	ldr	r2, [pc, #348]	@ (8010df8 <HAL_GPIO_Init+0x330>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d031      	beq.n	8010d02 <HAL_GPIO_Init+0x23a>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4a56      	ldr	r2, [pc, #344]	@ (8010dfc <HAL_GPIO_Init+0x334>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d02b      	beq.n	8010cfe <HAL_GPIO_Init+0x236>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4a55      	ldr	r2, [pc, #340]	@ (8010e00 <HAL_GPIO_Init+0x338>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d025      	beq.n	8010cfa <HAL_GPIO_Init+0x232>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4a54      	ldr	r2, [pc, #336]	@ (8010e04 <HAL_GPIO_Init+0x33c>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d01f      	beq.n	8010cf6 <HAL_GPIO_Init+0x22e>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4a53      	ldr	r2, [pc, #332]	@ (8010e08 <HAL_GPIO_Init+0x340>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d019      	beq.n	8010cf2 <HAL_GPIO_Init+0x22a>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4a52      	ldr	r2, [pc, #328]	@ (8010e0c <HAL_GPIO_Init+0x344>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d013      	beq.n	8010cee <HAL_GPIO_Init+0x226>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4a51      	ldr	r2, [pc, #324]	@ (8010e10 <HAL_GPIO_Init+0x348>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d00d      	beq.n	8010cea <HAL_GPIO_Init+0x222>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4a50      	ldr	r2, [pc, #320]	@ (8010e14 <HAL_GPIO_Init+0x34c>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d007      	beq.n	8010ce6 <HAL_GPIO_Init+0x21e>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8010e18 <HAL_GPIO_Init+0x350>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d101      	bne.n	8010ce2 <HAL_GPIO_Init+0x21a>
 8010cde:	2309      	movs	r3, #9
 8010ce0:	e012      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010ce2:	230a      	movs	r3, #10
 8010ce4:	e010      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010ce6:	2308      	movs	r3, #8
 8010ce8:	e00e      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010cea:	2307      	movs	r3, #7
 8010cec:	e00c      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010cee:	2306      	movs	r3, #6
 8010cf0:	e00a      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010cf2:	2305      	movs	r3, #5
 8010cf4:	e008      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010cf6:	2304      	movs	r3, #4
 8010cf8:	e006      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010cfa:	2303      	movs	r3, #3
 8010cfc:	e004      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010cfe:	2302      	movs	r3, #2
 8010d00:	e002      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010d02:	2301      	movs	r3, #1
 8010d04:	e000      	b.n	8010d08 <HAL_GPIO_Init+0x240>
 8010d06:	2300      	movs	r3, #0
 8010d08:	69fa      	ldr	r2, [r7, #28]
 8010d0a:	f002 0203 	and.w	r2, r2, #3
 8010d0e:	0092      	lsls	r2, r2, #2
 8010d10:	4093      	lsls	r3, r2
 8010d12:	69ba      	ldr	r2, [r7, #24]
 8010d14:	4313      	orrs	r3, r2
 8010d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8010d18:	4935      	ldr	r1, [pc, #212]	@ (8010df0 <HAL_GPIO_Init+0x328>)
 8010d1a:	69fb      	ldr	r3, [r7, #28]
 8010d1c:	089b      	lsrs	r3, r3, #2
 8010d1e:	3302      	adds	r3, #2
 8010d20:	69ba      	ldr	r2, [r7, #24]
 8010d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010d26:	4b3d      	ldr	r3, [pc, #244]	@ (8010e1c <HAL_GPIO_Init+0x354>)
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	43db      	mvns	r3, r3
 8010d30:	69ba      	ldr	r2, [r7, #24]
 8010d32:	4013      	ands	r3, r2
 8010d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d003      	beq.n	8010d4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8010d42:	69ba      	ldr	r2, [r7, #24]
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	4313      	orrs	r3, r2
 8010d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010d4a:	4a34      	ldr	r2, [pc, #208]	@ (8010e1c <HAL_GPIO_Init+0x354>)
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010d50:	4b32      	ldr	r3, [pc, #200]	@ (8010e1c <HAL_GPIO_Init+0x354>)
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	43db      	mvns	r3, r3
 8010d5a:	69ba      	ldr	r2, [r7, #24]
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d003      	beq.n	8010d74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8010d6c:	69ba      	ldr	r2, [r7, #24]
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	4313      	orrs	r3, r2
 8010d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010d74:	4a29      	ldr	r2, [pc, #164]	@ (8010e1c <HAL_GPIO_Init+0x354>)
 8010d76:	69bb      	ldr	r3, [r7, #24]
 8010d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8010d7a:	4b28      	ldr	r3, [pc, #160]	@ (8010e1c <HAL_GPIO_Init+0x354>)
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	43db      	mvns	r3, r3
 8010d84:	69ba      	ldr	r2, [r7, #24]
 8010d86:	4013      	ands	r3, r2
 8010d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d003      	beq.n	8010d9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8010d96:	69ba      	ldr	r2, [r7, #24]
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8010e1c <HAL_GPIO_Init+0x354>)
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010da4:	4b1d      	ldr	r3, [pc, #116]	@ (8010e1c <HAL_GPIO_Init+0x354>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	43db      	mvns	r3, r3
 8010dae:	69ba      	ldr	r2, [r7, #24]
 8010db0:	4013      	ands	r3, r2
 8010db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d003      	beq.n	8010dc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8010dc0:	69ba      	ldr	r2, [r7, #24]
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010dc8:	4a14      	ldr	r2, [pc, #80]	@ (8010e1c <HAL_GPIO_Init+0x354>)
 8010dca:	69bb      	ldr	r3, [r7, #24]
 8010dcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	61fb      	str	r3, [r7, #28]
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	2b0f      	cmp	r3, #15
 8010dd8:	f67f ae86 	bls.w	8010ae8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8010ddc:	bf00      	nop
 8010dde:	bf00      	nop
 8010de0:	3724      	adds	r7, #36	@ 0x24
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr
 8010dea:	bf00      	nop
 8010dec:	40023800 	.word	0x40023800
 8010df0:	40013800 	.word	0x40013800
 8010df4:	40020000 	.word	0x40020000
 8010df8:	40020400 	.word	0x40020400
 8010dfc:	40020800 	.word	0x40020800
 8010e00:	40020c00 	.word	0x40020c00
 8010e04:	40021000 	.word	0x40021000
 8010e08:	40021400 	.word	0x40021400
 8010e0c:	40021800 	.word	0x40021800
 8010e10:	40021c00 	.word	0x40021c00
 8010e14:	40022000 	.word	0x40022000
 8010e18:	40022400 	.word	0x40022400
 8010e1c:	40013c00 	.word	0x40013c00

08010e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	807b      	strh	r3, [r7, #2]
 8010e2c:	4613      	mov	r3, r2
 8010e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010e30:	787b      	ldrb	r3, [r7, #1]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d003      	beq.n	8010e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010e36:	887a      	ldrh	r2, [r7, #2]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8010e3c:	e003      	b.n	8010e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8010e3e:	887b      	ldrh	r3, [r7, #2]
 8010e40:	041a      	lsls	r2, r3, #16
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	619a      	str	r2, [r3, #24]
}
 8010e46:	bf00      	nop
 8010e48:	370c      	adds	r7, #12
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr
	...

08010e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b086      	sub	sp, #24
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d101      	bne.n	8010e6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8010e66:	2301      	movs	r3, #1
 8010e68:	e291      	b.n	801138e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f003 0301 	and.w	r3, r3, #1
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f000 8087 	beq.w	8010f86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010e78:	4b96      	ldr	r3, [pc, #600]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010e7a:	689b      	ldr	r3, [r3, #8]
 8010e7c:	f003 030c 	and.w	r3, r3, #12
 8010e80:	2b04      	cmp	r3, #4
 8010e82:	d00c      	beq.n	8010e9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010e84:	4b93      	ldr	r3, [pc, #588]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010e86:	689b      	ldr	r3, [r3, #8]
 8010e88:	f003 030c 	and.w	r3, r3, #12
 8010e8c:	2b08      	cmp	r3, #8
 8010e8e:	d112      	bne.n	8010eb6 <HAL_RCC_OscConfig+0x62>
 8010e90:	4b90      	ldr	r3, [pc, #576]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010e9c:	d10b      	bne.n	8010eb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e9e:	4b8d      	ldr	r3, [pc, #564]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d06c      	beq.n	8010f84 <HAL_RCC_OscConfig+0x130>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d168      	bne.n	8010f84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e26b      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ebe:	d106      	bne.n	8010ece <HAL_RCC_OscConfig+0x7a>
 8010ec0:	4b84      	ldr	r3, [pc, #528]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4a83      	ldr	r2, [pc, #524]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010eca:	6013      	str	r3, [r2, #0]
 8010ecc:	e02e      	b.n	8010f2c <HAL_RCC_OscConfig+0xd8>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d10c      	bne.n	8010ef0 <HAL_RCC_OscConfig+0x9c>
 8010ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a7e      	ldr	r2, [pc, #504]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010ee0:	6013      	str	r3, [r2, #0]
 8010ee2:	4b7c      	ldr	r3, [pc, #496]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4a7b      	ldr	r2, [pc, #492]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010ee8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010eec:	6013      	str	r3, [r2, #0]
 8010eee:	e01d      	b.n	8010f2c <HAL_RCC_OscConfig+0xd8>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010ef8:	d10c      	bne.n	8010f14 <HAL_RCC_OscConfig+0xc0>
 8010efa:	4b76      	ldr	r3, [pc, #472]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	4a75      	ldr	r2, [pc, #468]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010f04:	6013      	str	r3, [r2, #0]
 8010f06:	4b73      	ldr	r3, [pc, #460]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a72      	ldr	r2, [pc, #456]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010f10:	6013      	str	r3, [r2, #0]
 8010f12:	e00b      	b.n	8010f2c <HAL_RCC_OscConfig+0xd8>
 8010f14:	4b6f      	ldr	r3, [pc, #444]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	4a6e      	ldr	r2, [pc, #440]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010f1e:	6013      	str	r3, [r2, #0]
 8010f20:	4b6c      	ldr	r3, [pc, #432]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	4a6b      	ldr	r2, [pc, #428]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d013      	beq.n	8010f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f34:	f7ff fbf4 	bl	8010720 <HAL_GetTick>
 8010f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010f3a:	e008      	b.n	8010f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f3c:	f7ff fbf0 	bl	8010720 <HAL_GetTick>
 8010f40:	4602      	mov	r2, r0
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	2b64      	cmp	r3, #100	@ 0x64
 8010f48:	d901      	bls.n	8010f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	e21f      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010f4e:	4b61      	ldr	r3, [pc, #388]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d0f0      	beq.n	8010f3c <HAL_RCC_OscConfig+0xe8>
 8010f5a:	e014      	b.n	8010f86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f5c:	f7ff fbe0 	bl	8010720 <HAL_GetTick>
 8010f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f62:	e008      	b.n	8010f76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f64:	f7ff fbdc 	bl	8010720 <HAL_GetTick>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	1ad3      	subs	r3, r2, r3
 8010f6e:	2b64      	cmp	r3, #100	@ 0x64
 8010f70:	d901      	bls.n	8010f76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8010f72:	2303      	movs	r3, #3
 8010f74:	e20b      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f76:	4b57      	ldr	r3, [pc, #348]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d1f0      	bne.n	8010f64 <HAL_RCC_OscConfig+0x110>
 8010f82:	e000      	b.n	8010f86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f003 0302 	and.w	r3, r3, #2
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d069      	beq.n	8011066 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010f92:	4b50      	ldr	r3, [pc, #320]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010f94:	689b      	ldr	r3, [r3, #8]
 8010f96:	f003 030c 	and.w	r3, r3, #12
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00b      	beq.n	8010fb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010f9e:	4b4d      	ldr	r3, [pc, #308]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010fa0:	689b      	ldr	r3, [r3, #8]
 8010fa2:	f003 030c 	and.w	r3, r3, #12
 8010fa6:	2b08      	cmp	r3, #8
 8010fa8:	d11c      	bne.n	8010fe4 <HAL_RCC_OscConfig+0x190>
 8010faa:	4b4a      	ldr	r3, [pc, #296]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d116      	bne.n	8010fe4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010fb6:	4b47      	ldr	r3, [pc, #284]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f003 0302 	and.w	r3, r3, #2
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d005      	beq.n	8010fce <HAL_RCC_OscConfig+0x17a>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	68db      	ldr	r3, [r3, #12]
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d001      	beq.n	8010fce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e1df      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010fce:	4b41      	ldr	r3, [pc, #260]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	691b      	ldr	r3, [r3, #16]
 8010fda:	00db      	lsls	r3, r3, #3
 8010fdc:	493d      	ldr	r1, [pc, #244]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010fe2:	e040      	b.n	8011066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d023      	beq.n	8011034 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010fec:	4b39      	ldr	r3, [pc, #228]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4a38      	ldr	r2, [pc, #224]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8010ff2:	f043 0301 	orr.w	r3, r3, #1
 8010ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ff8:	f7ff fb92 	bl	8010720 <HAL_GetTick>
 8010ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010ffe:	e008      	b.n	8011012 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011000:	f7ff fb8e 	bl	8010720 <HAL_GetTick>
 8011004:	4602      	mov	r2, r0
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	1ad3      	subs	r3, r2, r3
 801100a:	2b02      	cmp	r3, #2
 801100c:	d901      	bls.n	8011012 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801100e:	2303      	movs	r3, #3
 8011010:	e1bd      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011012:	4b30      	ldr	r3, [pc, #192]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	f003 0302 	and.w	r3, r3, #2
 801101a:	2b00      	cmp	r3, #0
 801101c:	d0f0      	beq.n	8011000 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801101e:	4b2d      	ldr	r3, [pc, #180]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	691b      	ldr	r3, [r3, #16]
 801102a:	00db      	lsls	r3, r3, #3
 801102c:	4929      	ldr	r1, [pc, #164]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 801102e:	4313      	orrs	r3, r2
 8011030:	600b      	str	r3, [r1, #0]
 8011032:	e018      	b.n	8011066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011034:	4b27      	ldr	r3, [pc, #156]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a26      	ldr	r2, [pc, #152]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 801103a:	f023 0301 	bic.w	r3, r3, #1
 801103e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011040:	f7ff fb6e 	bl	8010720 <HAL_GetTick>
 8011044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011046:	e008      	b.n	801105a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011048:	f7ff fb6a 	bl	8010720 <HAL_GetTick>
 801104c:	4602      	mov	r2, r0
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	2b02      	cmp	r3, #2
 8011054:	d901      	bls.n	801105a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8011056:	2303      	movs	r3, #3
 8011058:	e199      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801105a:	4b1e      	ldr	r3, [pc, #120]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f003 0302 	and.w	r3, r3, #2
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1f0      	bne.n	8011048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f003 0308 	and.w	r3, r3, #8
 801106e:	2b00      	cmp	r3, #0
 8011070:	d038      	beq.n	80110e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	695b      	ldr	r3, [r3, #20]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d019      	beq.n	80110ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801107a:	4b16      	ldr	r3, [pc, #88]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 801107c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801107e:	4a15      	ldr	r2, [pc, #84]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 8011080:	f043 0301 	orr.w	r3, r3, #1
 8011084:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011086:	f7ff fb4b 	bl	8010720 <HAL_GetTick>
 801108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801108c:	e008      	b.n	80110a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801108e:	f7ff fb47 	bl	8010720 <HAL_GetTick>
 8011092:	4602      	mov	r2, r0
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	1ad3      	subs	r3, r2, r3
 8011098:	2b02      	cmp	r3, #2
 801109a:	d901      	bls.n	80110a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801109c:	2303      	movs	r3, #3
 801109e:	e176      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80110a0:	4b0c      	ldr	r3, [pc, #48]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 80110a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110a4:	f003 0302 	and.w	r3, r3, #2
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d0f0      	beq.n	801108e <HAL_RCC_OscConfig+0x23a>
 80110ac:	e01a      	b.n	80110e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80110ae:	4b09      	ldr	r3, [pc, #36]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 80110b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110b2:	4a08      	ldr	r2, [pc, #32]	@ (80110d4 <HAL_RCC_OscConfig+0x280>)
 80110b4:	f023 0301 	bic.w	r3, r3, #1
 80110b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110ba:	f7ff fb31 	bl	8010720 <HAL_GetTick>
 80110be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80110c0:	e00a      	b.n	80110d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80110c2:	f7ff fb2d 	bl	8010720 <HAL_GetTick>
 80110c6:	4602      	mov	r2, r0
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	1ad3      	subs	r3, r2, r3
 80110cc:	2b02      	cmp	r3, #2
 80110ce:	d903      	bls.n	80110d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80110d0:	2303      	movs	r3, #3
 80110d2:	e15c      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
 80110d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80110d8:	4b91      	ldr	r3, [pc, #580]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80110da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110dc:	f003 0302 	and.w	r3, r3, #2
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1ee      	bne.n	80110c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f003 0304 	and.w	r3, r3, #4
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f000 80a4 	beq.w	801123a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80110f2:	4b8b      	ldr	r3, [pc, #556]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80110f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d10d      	bne.n	801111a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80110fe:	4b88      	ldr	r3, [pc, #544]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011102:	4a87      	ldr	r2, [pc, #540]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011108:	6413      	str	r3, [r2, #64]	@ 0x40
 801110a:	4b85      	ldr	r3, [pc, #532]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 801110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801110e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011112:	60bb      	str	r3, [r7, #8]
 8011114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011116:	2301      	movs	r3, #1
 8011118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801111a:	4b82      	ldr	r3, [pc, #520]	@ (8011324 <HAL_RCC_OscConfig+0x4d0>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011122:	2b00      	cmp	r3, #0
 8011124:	d118      	bne.n	8011158 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8011126:	4b7f      	ldr	r3, [pc, #508]	@ (8011324 <HAL_RCC_OscConfig+0x4d0>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a7e      	ldr	r2, [pc, #504]	@ (8011324 <HAL_RCC_OscConfig+0x4d0>)
 801112c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011132:	f7ff faf5 	bl	8010720 <HAL_GetTick>
 8011136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011138:	e008      	b.n	801114c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801113a:	f7ff faf1 	bl	8010720 <HAL_GetTick>
 801113e:	4602      	mov	r2, r0
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	1ad3      	subs	r3, r2, r3
 8011144:	2b64      	cmp	r3, #100	@ 0x64
 8011146:	d901      	bls.n	801114c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8011148:	2303      	movs	r3, #3
 801114a:	e120      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801114c:	4b75      	ldr	r3, [pc, #468]	@ (8011324 <HAL_RCC_OscConfig+0x4d0>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011154:	2b00      	cmp	r3, #0
 8011156:	d0f0      	beq.n	801113a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	689b      	ldr	r3, [r3, #8]
 801115c:	2b01      	cmp	r3, #1
 801115e:	d106      	bne.n	801116e <HAL_RCC_OscConfig+0x31a>
 8011160:	4b6f      	ldr	r3, [pc, #444]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011164:	4a6e      	ldr	r2, [pc, #440]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011166:	f043 0301 	orr.w	r3, r3, #1
 801116a:	6713      	str	r3, [r2, #112]	@ 0x70
 801116c:	e02d      	b.n	80111ca <HAL_RCC_OscConfig+0x376>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d10c      	bne.n	8011190 <HAL_RCC_OscConfig+0x33c>
 8011176:	4b6a      	ldr	r3, [pc, #424]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801117a:	4a69      	ldr	r2, [pc, #420]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 801117c:	f023 0301 	bic.w	r3, r3, #1
 8011180:	6713      	str	r3, [r2, #112]	@ 0x70
 8011182:	4b67      	ldr	r3, [pc, #412]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011186:	4a66      	ldr	r2, [pc, #408]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011188:	f023 0304 	bic.w	r3, r3, #4
 801118c:	6713      	str	r3, [r2, #112]	@ 0x70
 801118e:	e01c      	b.n	80111ca <HAL_RCC_OscConfig+0x376>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	689b      	ldr	r3, [r3, #8]
 8011194:	2b05      	cmp	r3, #5
 8011196:	d10c      	bne.n	80111b2 <HAL_RCC_OscConfig+0x35e>
 8011198:	4b61      	ldr	r3, [pc, #388]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 801119a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801119c:	4a60      	ldr	r2, [pc, #384]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 801119e:	f043 0304 	orr.w	r3, r3, #4
 80111a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80111a4:	4b5e      	ldr	r3, [pc, #376]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80111a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111a8:	4a5d      	ldr	r2, [pc, #372]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80111aa:	f043 0301 	orr.w	r3, r3, #1
 80111ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80111b0:	e00b      	b.n	80111ca <HAL_RCC_OscConfig+0x376>
 80111b2:	4b5b      	ldr	r3, [pc, #364]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80111b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111b6:	4a5a      	ldr	r2, [pc, #360]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80111b8:	f023 0301 	bic.w	r3, r3, #1
 80111bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80111be:	4b58      	ldr	r3, [pc, #352]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80111c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111c2:	4a57      	ldr	r2, [pc, #348]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80111c4:	f023 0304 	bic.w	r3, r3, #4
 80111c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	689b      	ldr	r3, [r3, #8]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d015      	beq.n	80111fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111d2:	f7ff faa5 	bl	8010720 <HAL_GetTick>
 80111d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80111d8:	e00a      	b.n	80111f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80111da:	f7ff faa1 	bl	8010720 <HAL_GetTick>
 80111de:	4602      	mov	r2, r0
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	1ad3      	subs	r3, r2, r3
 80111e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d901      	bls.n	80111f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80111ec:	2303      	movs	r3, #3
 80111ee:	e0ce      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80111f0:	4b4b      	ldr	r3, [pc, #300]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80111f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111f4:	f003 0302 	and.w	r3, r3, #2
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d0ee      	beq.n	80111da <HAL_RCC_OscConfig+0x386>
 80111fc:	e014      	b.n	8011228 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111fe:	f7ff fa8f 	bl	8010720 <HAL_GetTick>
 8011202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011204:	e00a      	b.n	801121c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011206:	f7ff fa8b 	bl	8010720 <HAL_GetTick>
 801120a:	4602      	mov	r2, r0
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011214:	4293      	cmp	r3, r2
 8011216:	d901      	bls.n	801121c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8011218:	2303      	movs	r3, #3
 801121a:	e0b8      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801121c:	4b40      	ldr	r3, [pc, #256]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 801121e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011220:	f003 0302 	and.w	r3, r3, #2
 8011224:	2b00      	cmp	r3, #0
 8011226:	d1ee      	bne.n	8011206 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8011228:	7dfb      	ldrb	r3, [r7, #23]
 801122a:	2b01      	cmp	r3, #1
 801122c:	d105      	bne.n	801123a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801122e:	4b3c      	ldr	r3, [pc, #240]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011232:	4a3b      	ldr	r2, [pc, #236]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011238:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	699b      	ldr	r3, [r3, #24]
 801123e:	2b00      	cmp	r3, #0
 8011240:	f000 80a4 	beq.w	801138c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011244:	4b36      	ldr	r3, [pc, #216]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011246:	689b      	ldr	r3, [r3, #8]
 8011248:	f003 030c 	and.w	r3, r3, #12
 801124c:	2b08      	cmp	r3, #8
 801124e:	d06b      	beq.n	8011328 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	699b      	ldr	r3, [r3, #24]
 8011254:	2b02      	cmp	r3, #2
 8011256:	d149      	bne.n	80112ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011258:	4b31      	ldr	r3, [pc, #196]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4a30      	ldr	r2, [pc, #192]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 801125e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011264:	f7ff fa5c 	bl	8010720 <HAL_GetTick>
 8011268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801126a:	e008      	b.n	801127e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801126c:	f7ff fa58 	bl	8010720 <HAL_GetTick>
 8011270:	4602      	mov	r2, r0
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	1ad3      	subs	r3, r2, r3
 8011276:	2b02      	cmp	r3, #2
 8011278:	d901      	bls.n	801127e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801127a:	2303      	movs	r3, #3
 801127c:	e087      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801127e:	4b28      	ldr	r3, [pc, #160]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011286:	2b00      	cmp	r3, #0
 8011288:	d1f0      	bne.n	801126c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	69da      	ldr	r2, [r3, #28]
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6a1b      	ldr	r3, [r3, #32]
 8011292:	431a      	orrs	r2, r3
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011298:	019b      	lsls	r3, r3, #6
 801129a:	431a      	orrs	r2, r3
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112a0:	085b      	lsrs	r3, r3, #1
 80112a2:	3b01      	subs	r3, #1
 80112a4:	041b      	lsls	r3, r3, #16
 80112a6:	431a      	orrs	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ac:	061b      	lsls	r3, r3, #24
 80112ae:	4313      	orrs	r3, r2
 80112b0:	4a1b      	ldr	r2, [pc, #108]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80112b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80112b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80112b8:	4b19      	ldr	r3, [pc, #100]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4a18      	ldr	r2, [pc, #96]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80112be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80112c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112c4:	f7ff fa2c 	bl	8010720 <HAL_GetTick>
 80112c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80112ca:	e008      	b.n	80112de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80112cc:	f7ff fa28 	bl	8010720 <HAL_GetTick>
 80112d0:	4602      	mov	r2, r0
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	2b02      	cmp	r3, #2
 80112d8:	d901      	bls.n	80112de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80112da:	2303      	movs	r3, #3
 80112dc:	e057      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80112de:	4b10      	ldr	r3, [pc, #64]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d0f0      	beq.n	80112cc <HAL_RCC_OscConfig+0x478>
 80112ea:	e04f      	b.n	801138c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80112ec:	4b0c      	ldr	r3, [pc, #48]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4a0b      	ldr	r2, [pc, #44]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 80112f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80112f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112f8:	f7ff fa12 	bl	8010720 <HAL_GetTick>
 80112fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80112fe:	e008      	b.n	8011312 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011300:	f7ff fa0e 	bl	8010720 <HAL_GetTick>
 8011304:	4602      	mov	r2, r0
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	2b02      	cmp	r3, #2
 801130c:	d901      	bls.n	8011312 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 801130e:	2303      	movs	r3, #3
 8011310:	e03d      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011312:	4b03      	ldr	r3, [pc, #12]	@ (8011320 <HAL_RCC_OscConfig+0x4cc>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801131a:	2b00      	cmp	r3, #0
 801131c:	d1f0      	bne.n	8011300 <HAL_RCC_OscConfig+0x4ac>
 801131e:	e035      	b.n	801138c <HAL_RCC_OscConfig+0x538>
 8011320:	40023800 	.word	0x40023800
 8011324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8011328:	4b1b      	ldr	r3, [pc, #108]	@ (8011398 <HAL_RCC_OscConfig+0x544>)
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	699b      	ldr	r3, [r3, #24]
 8011332:	2b01      	cmp	r3, #1
 8011334:	d028      	beq.n	8011388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011340:	429a      	cmp	r2, r3
 8011342:	d121      	bne.n	8011388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801134e:	429a      	cmp	r2, r3
 8011350:	d11a      	bne.n	8011388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011352:	68fa      	ldr	r2, [r7, #12]
 8011354:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8011358:	4013      	ands	r3, r2
 801135a:	687a      	ldr	r2, [r7, #4]
 801135c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801135e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011360:	4293      	cmp	r3, r2
 8011362:	d111      	bne.n	8011388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801136e:	085b      	lsrs	r3, r3, #1
 8011370:	3b01      	subs	r3, #1
 8011372:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011374:	429a      	cmp	r2, r3
 8011376:	d107      	bne.n	8011388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011382:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8011384:	429a      	cmp	r2, r3
 8011386:	d001      	beq.n	801138c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8011388:	2301      	movs	r3, #1
 801138a:	e000      	b.n	801138e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 801138c:	2300      	movs	r3, #0
}
 801138e:	4618      	mov	r0, r3
 8011390:	3718      	adds	r7, #24
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	40023800 	.word	0x40023800

0801139c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80113a6:	2300      	movs	r3, #0
 80113a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d101      	bne.n	80113b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80113b0:	2301      	movs	r3, #1
 80113b2:	e0d0      	b.n	8011556 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80113b4:	4b6a      	ldr	r3, [pc, #424]	@ (8011560 <HAL_RCC_ClockConfig+0x1c4>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f003 030f 	and.w	r3, r3, #15
 80113bc:	683a      	ldr	r2, [r7, #0]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d910      	bls.n	80113e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113c2:	4b67      	ldr	r3, [pc, #412]	@ (8011560 <HAL_RCC_ClockConfig+0x1c4>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f023 020f 	bic.w	r2, r3, #15
 80113ca:	4965      	ldr	r1, [pc, #404]	@ (8011560 <HAL_RCC_ClockConfig+0x1c4>)
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	4313      	orrs	r3, r2
 80113d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80113d2:	4b63      	ldr	r3, [pc, #396]	@ (8011560 <HAL_RCC_ClockConfig+0x1c4>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f003 030f 	and.w	r3, r3, #15
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	429a      	cmp	r2, r3
 80113de:	d001      	beq.n	80113e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80113e0:	2301      	movs	r3, #1
 80113e2:	e0b8      	b.n	8011556 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f003 0302 	and.w	r3, r3, #2
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d020      	beq.n	8011432 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f003 0304 	and.w	r3, r3, #4
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d005      	beq.n	8011408 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80113fc:	4b59      	ldr	r3, [pc, #356]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	4a58      	ldr	r2, [pc, #352]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 8011402:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8011406:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f003 0308 	and.w	r3, r3, #8
 8011410:	2b00      	cmp	r3, #0
 8011412:	d005      	beq.n	8011420 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011414:	4b53      	ldr	r3, [pc, #332]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	4a52      	ldr	r2, [pc, #328]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 801141a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 801141e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011420:	4b50      	ldr	r3, [pc, #320]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 8011422:	689b      	ldr	r3, [r3, #8]
 8011424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	689b      	ldr	r3, [r3, #8]
 801142c:	494d      	ldr	r1, [pc, #308]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 801142e:	4313      	orrs	r3, r2
 8011430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f003 0301 	and.w	r3, r3, #1
 801143a:	2b00      	cmp	r3, #0
 801143c:	d040      	beq.n	80114c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	2b01      	cmp	r3, #1
 8011444:	d107      	bne.n	8011456 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011446:	4b47      	ldr	r3, [pc, #284]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801144e:	2b00      	cmp	r3, #0
 8011450:	d115      	bne.n	801147e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8011452:	2301      	movs	r3, #1
 8011454:	e07f      	b.n	8011556 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	2b02      	cmp	r3, #2
 801145c:	d107      	bne.n	801146e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801145e:	4b41      	ldr	r3, [pc, #260]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011466:	2b00      	cmp	r3, #0
 8011468:	d109      	bne.n	801147e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801146a:	2301      	movs	r3, #1
 801146c:	e073      	b.n	8011556 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801146e:	4b3d      	ldr	r3, [pc, #244]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f003 0302 	and.w	r3, r3, #2
 8011476:	2b00      	cmp	r3, #0
 8011478:	d101      	bne.n	801147e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801147a:	2301      	movs	r3, #1
 801147c:	e06b      	b.n	8011556 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801147e:	4b39      	ldr	r3, [pc, #228]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 8011480:	689b      	ldr	r3, [r3, #8]
 8011482:	f023 0203 	bic.w	r2, r3, #3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	4936      	ldr	r1, [pc, #216]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 801148c:	4313      	orrs	r3, r2
 801148e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011490:	f7ff f946 	bl	8010720 <HAL_GetTick>
 8011494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011496:	e00a      	b.n	80114ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011498:	f7ff f942 	bl	8010720 <HAL_GetTick>
 801149c:	4602      	mov	r2, r0
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d901      	bls.n	80114ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80114aa:	2303      	movs	r3, #3
 80114ac:	e053      	b.n	8011556 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80114ae:	4b2d      	ldr	r3, [pc, #180]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 80114b0:	689b      	ldr	r3, [r3, #8]
 80114b2:	f003 020c 	and.w	r2, r3, #12
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	429a      	cmp	r2, r3
 80114be:	d1eb      	bne.n	8011498 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80114c0:	4b27      	ldr	r3, [pc, #156]	@ (8011560 <HAL_RCC_ClockConfig+0x1c4>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f003 030f 	and.w	r3, r3, #15
 80114c8:	683a      	ldr	r2, [r7, #0]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d210      	bcs.n	80114f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80114ce:	4b24      	ldr	r3, [pc, #144]	@ (8011560 <HAL_RCC_ClockConfig+0x1c4>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f023 020f 	bic.w	r2, r3, #15
 80114d6:	4922      	ldr	r1, [pc, #136]	@ (8011560 <HAL_RCC_ClockConfig+0x1c4>)
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	4313      	orrs	r3, r2
 80114dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80114de:	4b20      	ldr	r3, [pc, #128]	@ (8011560 <HAL_RCC_ClockConfig+0x1c4>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f003 030f 	and.w	r3, r3, #15
 80114e6:	683a      	ldr	r2, [r7, #0]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d001      	beq.n	80114f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80114ec:	2301      	movs	r3, #1
 80114ee:	e032      	b.n	8011556 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f003 0304 	and.w	r3, r3, #4
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d008      	beq.n	801150e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80114fc:	4b19      	ldr	r3, [pc, #100]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 80114fe:	689b      	ldr	r3, [r3, #8]
 8011500:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	4916      	ldr	r1, [pc, #88]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 801150a:	4313      	orrs	r3, r2
 801150c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f003 0308 	and.w	r3, r3, #8
 8011516:	2b00      	cmp	r3, #0
 8011518:	d009      	beq.n	801152e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801151a:	4b12      	ldr	r3, [pc, #72]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 801151c:	689b      	ldr	r3, [r3, #8]
 801151e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	691b      	ldr	r3, [r3, #16]
 8011526:	00db      	lsls	r3, r3, #3
 8011528:	490e      	ldr	r1, [pc, #56]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 801152a:	4313      	orrs	r3, r2
 801152c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801152e:	f000 f821 	bl	8011574 <HAL_RCC_GetSysClockFreq>
 8011532:	4602      	mov	r2, r0
 8011534:	4b0b      	ldr	r3, [pc, #44]	@ (8011564 <HAL_RCC_ClockConfig+0x1c8>)
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	091b      	lsrs	r3, r3, #4
 801153a:	f003 030f 	and.w	r3, r3, #15
 801153e:	490a      	ldr	r1, [pc, #40]	@ (8011568 <HAL_RCC_ClockConfig+0x1cc>)
 8011540:	5ccb      	ldrb	r3, [r1, r3]
 8011542:	fa22 f303 	lsr.w	r3, r2, r3
 8011546:	4a09      	ldr	r2, [pc, #36]	@ (801156c <HAL_RCC_ClockConfig+0x1d0>)
 8011548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801154a:	4b09      	ldr	r3, [pc, #36]	@ (8011570 <HAL_RCC_ClockConfig+0x1d4>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	4618      	mov	r0, r3
 8011550:	f7ff f8a2 	bl	8010698 <HAL_InitTick>

  return HAL_OK;
 8011554:	2300      	movs	r3, #0
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	40023c00 	.word	0x40023c00
 8011564:	40023800 	.word	0x40023800
 8011568:	0802444c 	.word	0x0802444c
 801156c:	200050a0 	.word	0x200050a0
 8011570:	200050a4 	.word	0x200050a4

08011574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011578:	b090      	sub	sp, #64	@ 0x40
 801157a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801157c:	2300      	movs	r3, #0
 801157e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011580:	2300      	movs	r3, #0
 8011582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011584:	2300      	movs	r3, #0
 8011586:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8011588:	2300      	movs	r3, #0
 801158a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801158c:	4b59      	ldr	r3, [pc, #356]	@ (80116f4 <HAL_RCC_GetSysClockFreq+0x180>)
 801158e:	689b      	ldr	r3, [r3, #8]
 8011590:	f003 030c 	and.w	r3, r3, #12
 8011594:	2b08      	cmp	r3, #8
 8011596:	d00d      	beq.n	80115b4 <HAL_RCC_GetSysClockFreq+0x40>
 8011598:	2b08      	cmp	r3, #8
 801159a:	f200 80a1 	bhi.w	80116e0 <HAL_RCC_GetSysClockFreq+0x16c>
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d002      	beq.n	80115a8 <HAL_RCC_GetSysClockFreq+0x34>
 80115a2:	2b04      	cmp	r3, #4
 80115a4:	d003      	beq.n	80115ae <HAL_RCC_GetSysClockFreq+0x3a>
 80115a6:	e09b      	b.n	80116e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80115a8:	4b53      	ldr	r3, [pc, #332]	@ (80116f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80115aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80115ac:	e09b      	b.n	80116e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80115ae:	4b53      	ldr	r3, [pc, #332]	@ (80116fc <HAL_RCC_GetSysClockFreq+0x188>)
 80115b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80115b2:	e098      	b.n	80116e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80115b4:	4b4f      	ldr	r3, [pc, #316]	@ (80116f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80115bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80115be:	4b4d      	ldr	r3, [pc, #308]	@ (80116f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d028      	beq.n	801161c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80115ca:	4b4a      	ldr	r3, [pc, #296]	@ (80116f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	099b      	lsrs	r3, r3, #6
 80115d0:	2200      	movs	r2, #0
 80115d2:	623b      	str	r3, [r7, #32]
 80115d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80115d6:	6a3b      	ldr	r3, [r7, #32]
 80115d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80115dc:	2100      	movs	r1, #0
 80115de:	4b47      	ldr	r3, [pc, #284]	@ (80116fc <HAL_RCC_GetSysClockFreq+0x188>)
 80115e0:	fb03 f201 	mul.w	r2, r3, r1
 80115e4:	2300      	movs	r3, #0
 80115e6:	fb00 f303 	mul.w	r3, r0, r3
 80115ea:	4413      	add	r3, r2
 80115ec:	4a43      	ldr	r2, [pc, #268]	@ (80116fc <HAL_RCC_GetSysClockFreq+0x188>)
 80115ee:	fba0 1202 	umull	r1, r2, r0, r2
 80115f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80115f4:	460a      	mov	r2, r1
 80115f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80115f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80115fa:	4413      	add	r3, r2
 80115fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80115fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011600:	2200      	movs	r2, #0
 8011602:	61bb      	str	r3, [r7, #24]
 8011604:	61fa      	str	r2, [r7, #28]
 8011606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801160a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 801160e:	f7ef fbbb 	bl	8000d88 <__aeabi_uldivmod>
 8011612:	4602      	mov	r2, r0
 8011614:	460b      	mov	r3, r1
 8011616:	4613      	mov	r3, r2
 8011618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801161a:	e053      	b.n	80116c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801161c:	4b35      	ldr	r3, [pc, #212]	@ (80116f4 <HAL_RCC_GetSysClockFreq+0x180>)
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	099b      	lsrs	r3, r3, #6
 8011622:	2200      	movs	r2, #0
 8011624:	613b      	str	r3, [r7, #16]
 8011626:	617a      	str	r2, [r7, #20]
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801162e:	f04f 0b00 	mov.w	fp, #0
 8011632:	4652      	mov	r2, sl
 8011634:	465b      	mov	r3, fp
 8011636:	f04f 0000 	mov.w	r0, #0
 801163a:	f04f 0100 	mov.w	r1, #0
 801163e:	0159      	lsls	r1, r3, #5
 8011640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011644:	0150      	lsls	r0, r2, #5
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	ebb2 080a 	subs.w	r8, r2, sl
 801164e:	eb63 090b 	sbc.w	r9, r3, fp
 8011652:	f04f 0200 	mov.w	r2, #0
 8011656:	f04f 0300 	mov.w	r3, #0
 801165a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801165e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8011662:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8011666:	ebb2 0408 	subs.w	r4, r2, r8
 801166a:	eb63 0509 	sbc.w	r5, r3, r9
 801166e:	f04f 0200 	mov.w	r2, #0
 8011672:	f04f 0300 	mov.w	r3, #0
 8011676:	00eb      	lsls	r3, r5, #3
 8011678:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801167c:	00e2      	lsls	r2, r4, #3
 801167e:	4614      	mov	r4, r2
 8011680:	461d      	mov	r5, r3
 8011682:	eb14 030a 	adds.w	r3, r4, sl
 8011686:	603b      	str	r3, [r7, #0]
 8011688:	eb45 030b 	adc.w	r3, r5, fp
 801168c:	607b      	str	r3, [r7, #4]
 801168e:	f04f 0200 	mov.w	r2, #0
 8011692:	f04f 0300 	mov.w	r3, #0
 8011696:	e9d7 4500 	ldrd	r4, r5, [r7]
 801169a:	4629      	mov	r1, r5
 801169c:	028b      	lsls	r3, r1, #10
 801169e:	4621      	mov	r1, r4
 80116a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80116a4:	4621      	mov	r1, r4
 80116a6:	028a      	lsls	r2, r1, #10
 80116a8:	4610      	mov	r0, r2
 80116aa:	4619      	mov	r1, r3
 80116ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ae:	2200      	movs	r2, #0
 80116b0:	60bb      	str	r3, [r7, #8]
 80116b2:	60fa      	str	r2, [r7, #12]
 80116b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80116b8:	f7ef fb66 	bl	8000d88 <__aeabi_uldivmod>
 80116bc:	4602      	mov	r2, r0
 80116be:	460b      	mov	r3, r1
 80116c0:	4613      	mov	r3, r2
 80116c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80116c4:	4b0b      	ldr	r3, [pc, #44]	@ (80116f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	0c1b      	lsrs	r3, r3, #16
 80116ca:	f003 0303 	and.w	r3, r3, #3
 80116ce:	3301      	adds	r3, #1
 80116d0:	005b      	lsls	r3, r3, #1
 80116d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80116d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80116d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80116dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80116de:	e002      	b.n	80116e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80116e0:	4b05      	ldr	r3, [pc, #20]	@ (80116f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80116e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80116e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80116e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3740      	adds	r7, #64	@ 0x40
 80116ec:	46bd      	mov	sp, r7
 80116ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80116f2:	bf00      	nop
 80116f4:	40023800 	.word	0x40023800
 80116f8:	00f42400 	.word	0x00f42400
 80116fc:	017d7840 	.word	0x017d7840

08011700 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011700:	b480      	push	{r7}
 8011702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011704:	4b03      	ldr	r3, [pc, #12]	@ (8011714 <HAL_RCC_GetHCLKFreq+0x14>)
 8011706:	681b      	ldr	r3, [r3, #0]
}
 8011708:	4618      	mov	r0, r3
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr
 8011712:	bf00      	nop
 8011714:	200050a0 	.word	0x200050a0

08011718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801171c:	f7ff fff0 	bl	8011700 <HAL_RCC_GetHCLKFreq>
 8011720:	4602      	mov	r2, r0
 8011722:	4b05      	ldr	r3, [pc, #20]	@ (8011738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011724:	689b      	ldr	r3, [r3, #8]
 8011726:	0a9b      	lsrs	r3, r3, #10
 8011728:	f003 0307 	and.w	r3, r3, #7
 801172c:	4903      	ldr	r1, [pc, #12]	@ (801173c <HAL_RCC_GetPCLK1Freq+0x24>)
 801172e:	5ccb      	ldrb	r3, [r1, r3]
 8011730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011734:	4618      	mov	r0, r3
 8011736:	bd80      	pop	{r7, pc}
 8011738:	40023800 	.word	0x40023800
 801173c:	0802445c 	.word	0x0802445c

08011740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011744:	f7ff ffdc 	bl	8011700 <HAL_RCC_GetHCLKFreq>
 8011748:	4602      	mov	r2, r0
 801174a:	4b05      	ldr	r3, [pc, #20]	@ (8011760 <HAL_RCC_GetPCLK2Freq+0x20>)
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	0b5b      	lsrs	r3, r3, #13
 8011750:	f003 0307 	and.w	r3, r3, #7
 8011754:	4903      	ldr	r1, [pc, #12]	@ (8011764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011756:	5ccb      	ldrb	r3, [r1, r3]
 8011758:	fa22 f303 	lsr.w	r3, r2, r3
}
 801175c:	4618      	mov	r0, r3
 801175e:	bd80      	pop	{r7, pc}
 8011760:	40023800 	.word	0x40023800
 8011764:	0802445c 	.word	0x0802445c

08011768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b088      	sub	sp, #32
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8011770:	2300      	movs	r3, #0
 8011772:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8011774:	2300      	movs	r3, #0
 8011776:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8011778:	2300      	movs	r3, #0
 801177a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801177c:	2300      	movs	r3, #0
 801177e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8011780:	2300      	movs	r3, #0
 8011782:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f003 0301 	and.w	r3, r3, #1
 801178c:	2b00      	cmp	r3, #0
 801178e:	d012      	beq.n	80117b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8011790:	4b69      	ldr	r3, [pc, #420]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011792:	689b      	ldr	r3, [r3, #8]
 8011794:	4a68      	ldr	r2, [pc, #416]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011796:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801179a:	6093      	str	r3, [r2, #8]
 801179c:	4b66      	ldr	r3, [pc, #408]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801179e:	689a      	ldr	r2, [r3, #8]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117a4:	4964      	ldr	r1, [pc, #400]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117a6:	4313      	orrs	r3, r2
 80117a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d101      	bne.n	80117b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80117b2:	2301      	movs	r3, #1
 80117b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d017      	beq.n	80117f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80117c2:	4b5d      	ldr	r3, [pc, #372]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80117c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117d0:	4959      	ldr	r1, [pc, #356]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117d2:	4313      	orrs	r3, r2
 80117d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80117e0:	d101      	bne.n	80117e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80117e2:	2301      	movs	r3, #1
 80117e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d101      	bne.n	80117f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80117ee:	2301      	movs	r3, #1
 80117f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d017      	beq.n	801182e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80117fe:	4b4e      	ldr	r3, [pc, #312]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011804:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801180c:	494a      	ldr	r1, [pc, #296]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801180e:	4313      	orrs	r3, r2
 8011810:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801181c:	d101      	bne.n	8011822 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801181e:	2301      	movs	r3, #1
 8011820:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011826:	2b00      	cmp	r3, #0
 8011828:	d101      	bne.n	801182e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801182a:	2301      	movs	r3, #1
 801182c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011836:	2b00      	cmp	r3, #0
 8011838:	d001      	beq.n	801183e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801183a:	2301      	movs	r3, #1
 801183c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f003 0320 	and.w	r3, r3, #32
 8011846:	2b00      	cmp	r3, #0
 8011848:	f000 808b 	beq.w	8011962 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801184c:	4b3a      	ldr	r3, [pc, #232]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011850:	4a39      	ldr	r2, [pc, #228]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011856:	6413      	str	r3, [r2, #64]	@ 0x40
 8011858:	4b37      	ldr	r3, [pc, #220]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801185c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011860:	60bb      	str	r3, [r7, #8]
 8011862:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011864:	4b35      	ldr	r3, [pc, #212]	@ (801193c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4a34      	ldr	r2, [pc, #208]	@ (801193c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801186a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801186e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011870:	f7fe ff56 	bl	8010720 <HAL_GetTick>
 8011874:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8011876:	e008      	b.n	801188a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011878:	f7fe ff52 	bl	8010720 <HAL_GetTick>
 801187c:	4602      	mov	r2, r0
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	2b64      	cmp	r3, #100	@ 0x64
 8011884:	d901      	bls.n	801188a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8011886:	2303      	movs	r3, #3
 8011888:	e357      	b.n	8011f3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801188a:	4b2c      	ldr	r3, [pc, #176]	@ (801193c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011892:	2b00      	cmp	r3, #0
 8011894:	d0f0      	beq.n	8011878 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8011896:	4b28      	ldr	r3, [pc, #160]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801189a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801189e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d035      	beq.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80118ae:	693a      	ldr	r2, [r7, #16]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d02e      	beq.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80118b4:	4b20      	ldr	r3, [pc, #128]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80118bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80118be:	4b1e      	ldr	r3, [pc, #120]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118c2:	4a1d      	ldr	r2, [pc, #116]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80118c8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80118ca:	4b1b      	ldr	r3, [pc, #108]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118ce:	4a1a      	ldr	r2, [pc, #104]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80118d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80118d6:	4a18      	ldr	r2, [pc, #96]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80118dc:	4b16      	ldr	r3, [pc, #88]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118e0:	f003 0301 	and.w	r3, r3, #1
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d114      	bne.n	8011912 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118e8:	f7fe ff1a 	bl	8010720 <HAL_GetTick>
 80118ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80118ee:	e00a      	b.n	8011906 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80118f0:	f7fe ff16 	bl	8010720 <HAL_GetTick>
 80118f4:	4602      	mov	r2, r0
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80118fe:	4293      	cmp	r3, r2
 8011900:	d901      	bls.n	8011906 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8011902:	2303      	movs	r3, #3
 8011904:	e319      	b.n	8011f3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011906:	4b0c      	ldr	r3, [pc, #48]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801190a:	f003 0302 	and.w	r3, r3, #2
 801190e:	2b00      	cmp	r3, #0
 8011910:	d0ee      	beq.n	80118f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801191a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801191e:	d111      	bne.n	8011944 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8011920:	4b05      	ldr	r3, [pc, #20]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011922:	689b      	ldr	r3, [r3, #8]
 8011924:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801192c:	4b04      	ldr	r3, [pc, #16]	@ (8011940 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801192e:	400b      	ands	r3, r1
 8011930:	4901      	ldr	r1, [pc, #4]	@ (8011938 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011932:	4313      	orrs	r3, r2
 8011934:	608b      	str	r3, [r1, #8]
 8011936:	e00b      	b.n	8011950 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8011938:	40023800 	.word	0x40023800
 801193c:	40007000 	.word	0x40007000
 8011940:	0ffffcff 	.word	0x0ffffcff
 8011944:	4baa      	ldr	r3, [pc, #680]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011946:	689b      	ldr	r3, [r3, #8]
 8011948:	4aa9      	ldr	r2, [pc, #676]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801194a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 801194e:	6093      	str	r3, [r2, #8]
 8011950:	4ba7      	ldr	r3, [pc, #668]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011952:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801195c:	49a4      	ldr	r1, [pc, #656]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801195e:	4313      	orrs	r3, r2
 8011960:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f003 0310 	and.w	r3, r3, #16
 801196a:	2b00      	cmp	r3, #0
 801196c:	d010      	beq.n	8011990 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801196e:	4ba0      	ldr	r3, [pc, #640]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011974:	4a9e      	ldr	r2, [pc, #632]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801197a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801197e:	4b9c      	ldr	r3, [pc, #624]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011980:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011988:	4999      	ldr	r1, [pc, #612]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801198a:	4313      	orrs	r3, r2
 801198c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011998:	2b00      	cmp	r3, #0
 801199a:	d00a      	beq.n	80119b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801199c:	4b94      	ldr	r3, [pc, #592]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80119a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80119aa:	4991      	ldr	r1, [pc, #580]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119ac:	4313      	orrs	r3, r2
 80119ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d00a      	beq.n	80119d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80119be:	4b8c      	ldr	r3, [pc, #560]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80119c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80119cc:	4988      	ldr	r1, [pc, #544]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119ce:	4313      	orrs	r3, r2
 80119d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d00a      	beq.n	80119f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80119e0:	4b83      	ldr	r3, [pc, #524]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80119e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119ee:	4980      	ldr	r1, [pc, #512]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119f0:	4313      	orrs	r3, r2
 80119f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d00a      	beq.n	8011a18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011a02:	4b7b      	ldr	r3, [pc, #492]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a08:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a10:	4977      	ldr	r1, [pc, #476]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a12:	4313      	orrs	r3, r2
 8011a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00a      	beq.n	8011a3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011a24:	4b72      	ldr	r3, [pc, #456]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a2a:	f023 0203 	bic.w	r2, r3, #3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a32:	496f      	ldr	r1, [pc, #444]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a34:	4313      	orrs	r3, r2
 8011a36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d00a      	beq.n	8011a5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011a46:	4b6a      	ldr	r3, [pc, #424]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a4c:	f023 020c 	bic.w	r2, r3, #12
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011a54:	4966      	ldr	r1, [pc, #408]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a56:	4313      	orrs	r3, r2
 8011a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d00a      	beq.n	8011a7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011a68:	4b61      	ldr	r3, [pc, #388]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a6e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a76:	495e      	ldr	r1, [pc, #376]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a78:	4313      	orrs	r3, r2
 8011a7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d00a      	beq.n	8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011a8a:	4b59      	ldr	r3, [pc, #356]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a90:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a98:	4955      	ldr	r1, [pc, #340]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d00a      	beq.n	8011ac2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011aac:	4b50      	ldr	r3, [pc, #320]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ab2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011aba:	494d      	ldr	r1, [pc, #308]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011abc:	4313      	orrs	r3, r2
 8011abe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00a      	beq.n	8011ae4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8011ace:	4b48      	ldr	r3, [pc, #288]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ad4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011adc:	4944      	ldr	r1, [pc, #272]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011ade:	4313      	orrs	r3, r2
 8011ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d00a      	beq.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8011af0:	4b3f      	ldr	r3, [pc, #252]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011af6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011afe:	493c      	ldr	r1, [pc, #240]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b00:	4313      	orrs	r3, r2
 8011b02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d00a      	beq.n	8011b28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8011b12:	4b37      	ldr	r3, [pc, #220]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011b20:	4933      	ldr	r1, [pc, #204]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b22:	4313      	orrs	r3, r2
 8011b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d00a      	beq.n	8011b4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011b34:	4b2e      	ldr	r3, [pc, #184]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b3a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b42:	492b      	ldr	r1, [pc, #172]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b44:	4313      	orrs	r3, r2
 8011b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d011      	beq.n	8011b7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8011b56:	4b26      	ldr	r3, [pc, #152]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b5c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011b64:	4922      	ldr	r1, [pc, #136]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b66:	4313      	orrs	r3, r2
 8011b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011b74:	d101      	bne.n	8011b7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8011b76:	2301      	movs	r3, #1
 8011b78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f003 0308 	and.w	r3, r3, #8
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d001      	beq.n	8011b8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8011b86:	2301      	movs	r3, #1
 8011b88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d00a      	beq.n	8011bac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011b96:	4b16      	ldr	r3, [pc, #88]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b9c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ba4:	4912      	ldr	r1, [pc, #72]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00b      	beq.n	8011bd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011bbe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011bc8:	4909      	ldr	r1, [pc, #36]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d006      	beq.n	8011be4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f000 80d9 	beq.w	8011d96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8011be4:	4b02      	ldr	r3, [pc, #8]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	4a01      	ldr	r2, [pc, #4]	@ (8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011bea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011bee:	e001      	b.n	8011bf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8011bf0:	40023800 	.word	0x40023800
 8011bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011bf6:	f7fe fd93 	bl	8010720 <HAL_GetTick>
 8011bfa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011bfc:	e008      	b.n	8011c10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011bfe:	f7fe fd8f 	bl	8010720 <HAL_GetTick>
 8011c02:	4602      	mov	r2, r0
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	1ad3      	subs	r3, r2, r3
 8011c08:	2b64      	cmp	r3, #100	@ 0x64
 8011c0a:	d901      	bls.n	8011c10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011c0c:	2303      	movs	r3, #3
 8011c0e:	e194      	b.n	8011f3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011c10:	4b6c      	ldr	r3, [pc, #432]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d1f0      	bne.n	8011bfe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f003 0301 	and.w	r3, r3, #1
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d021      	beq.n	8011c6c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d11d      	bne.n	8011c6c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011c30:	4b64      	ldr	r3, [pc, #400]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c36:	0c1b      	lsrs	r3, r3, #16
 8011c38:	f003 0303 	and.w	r3, r3, #3
 8011c3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011c3e:	4b61      	ldr	r3, [pc, #388]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c44:	0e1b      	lsrs	r3, r3, #24
 8011c46:	f003 030f 	and.w	r3, r3, #15
 8011c4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	019a      	lsls	r2, r3, #6
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	041b      	lsls	r3, r3, #16
 8011c56:	431a      	orrs	r2, r3
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	061b      	lsls	r3, r3, #24
 8011c5c:	431a      	orrs	r2, r3
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	689b      	ldr	r3, [r3, #8]
 8011c62:	071b      	lsls	r3, r3, #28
 8011c64:	4957      	ldr	r1, [pc, #348]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c66:	4313      	orrs	r3, r2
 8011c68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d004      	beq.n	8011c82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011c80:	d00a      	beq.n	8011c98 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d02e      	beq.n	8011cec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011c96:	d129      	bne.n	8011cec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011c98:	4b4a      	ldr	r3, [pc, #296]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c9e:	0c1b      	lsrs	r3, r3, #16
 8011ca0:	f003 0303 	and.w	r3, r3, #3
 8011ca4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011ca6:	4b47      	ldr	r3, [pc, #284]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011cac:	0f1b      	lsrs	r3, r3, #28
 8011cae:	f003 0307 	and.w	r3, r3, #7
 8011cb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	019a      	lsls	r2, r3, #6
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	041b      	lsls	r3, r3, #16
 8011cbe:	431a      	orrs	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	061b      	lsls	r3, r3, #24
 8011cc6:	431a      	orrs	r2, r3
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	071b      	lsls	r3, r3, #28
 8011ccc:	493d      	ldr	r1, [pc, #244]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8011cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011cda:	f023 021f 	bic.w	r2, r3, #31
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ce2:	3b01      	subs	r3, #1
 8011ce4:	4937      	ldr	r1, [pc, #220]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011ce6:	4313      	orrs	r3, r2
 8011ce8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d01d      	beq.n	8011d34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011cf8:	4b32      	ldr	r3, [pc, #200]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011cfe:	0e1b      	lsrs	r3, r3, #24
 8011d00:	f003 030f 	and.w	r3, r3, #15
 8011d04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011d06:	4b2f      	ldr	r3, [pc, #188]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011d0c:	0f1b      	lsrs	r3, r3, #28
 8011d0e:	f003 0307 	and.w	r3, r3, #7
 8011d12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	019a      	lsls	r2, r3, #6
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	691b      	ldr	r3, [r3, #16]
 8011d1e:	041b      	lsls	r3, r3, #16
 8011d20:	431a      	orrs	r2, r3
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	061b      	lsls	r3, r3, #24
 8011d26:	431a      	orrs	r2, r3
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	071b      	lsls	r3, r3, #28
 8011d2c:	4925      	ldr	r1, [pc, #148]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d2e:	4313      	orrs	r3, r2
 8011d30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d011      	beq.n	8011d64 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	019a      	lsls	r2, r3, #6
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	691b      	ldr	r3, [r3, #16]
 8011d4a:	041b      	lsls	r3, r3, #16
 8011d4c:	431a      	orrs	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	061b      	lsls	r3, r3, #24
 8011d54:	431a      	orrs	r2, r3
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	689b      	ldr	r3, [r3, #8]
 8011d5a:	071b      	lsls	r3, r3, #28
 8011d5c:	4919      	ldr	r1, [pc, #100]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8011d64:	4b17      	ldr	r3, [pc, #92]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	4a16      	ldr	r2, [pc, #88]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d70:	f7fe fcd6 	bl	8010720 <HAL_GetTick>
 8011d74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011d76:	e008      	b.n	8011d8a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011d78:	f7fe fcd2 	bl	8010720 <HAL_GetTick>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	2b64      	cmp	r3, #100	@ 0x64
 8011d84:	d901      	bls.n	8011d8a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011d86:	2303      	movs	r3, #3
 8011d88:	e0d7      	b.n	8011f3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d0f0      	beq.n	8011d78 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	f040 80cd 	bne.w	8011f38 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8011d9e:	4b09      	ldr	r3, [pc, #36]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	4a08      	ldr	r2, [pc, #32]	@ (8011dc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011daa:	f7fe fcb9 	bl	8010720 <HAL_GetTick>
 8011dae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011db0:	e00a      	b.n	8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011db2:	f7fe fcb5 	bl	8010720 <HAL_GetTick>
 8011db6:	4602      	mov	r2, r0
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	1ad3      	subs	r3, r2, r3
 8011dbc:	2b64      	cmp	r3, #100	@ 0x64
 8011dbe:	d903      	bls.n	8011dc8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011dc0:	2303      	movs	r3, #3
 8011dc2:	e0ba      	b.n	8011f3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8011dc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011dd4:	d0ed      	beq.n	8011db2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d003      	beq.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x682>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d009      	beq.n	8011dfe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d02e      	beq.n	8011e54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d12a      	bne.n	8011e54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011dfe:	4b51      	ldr	r3, [pc, #324]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e04:	0c1b      	lsrs	r3, r3, #16
 8011e06:	f003 0303 	and.w	r3, r3, #3
 8011e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e12:	0f1b      	lsrs	r3, r3, #28
 8011e14:	f003 0307 	and.w	r3, r3, #7
 8011e18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	695b      	ldr	r3, [r3, #20]
 8011e1e:	019a      	lsls	r2, r3, #6
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	041b      	lsls	r3, r3, #16
 8011e24:	431a      	orrs	r2, r3
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	699b      	ldr	r3, [r3, #24]
 8011e2a:	061b      	lsls	r3, r3, #24
 8011e2c:	431a      	orrs	r2, r3
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	071b      	lsls	r3, r3, #28
 8011e32:	4944      	ldr	r1, [pc, #272]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e34:	4313      	orrs	r3, r2
 8011e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8011e3a:	4b42      	ldr	r3, [pc, #264]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011e40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e48:	3b01      	subs	r3, #1
 8011e4a:	021b      	lsls	r3, r3, #8
 8011e4c:	493d      	ldr	r1, [pc, #244]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e4e:	4313      	orrs	r3, r2
 8011e50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d022      	beq.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011e68:	d11d      	bne.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011e6a:	4b36      	ldr	r3, [pc, #216]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e70:	0e1b      	lsrs	r3, r3, #24
 8011e72:	f003 030f 	and.w	r3, r3, #15
 8011e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011e78:	4b32      	ldr	r3, [pc, #200]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e7e:	0f1b      	lsrs	r3, r3, #28
 8011e80:	f003 0307 	and.w	r3, r3, #7
 8011e84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	695b      	ldr	r3, [r3, #20]
 8011e8a:	019a      	lsls	r2, r3, #6
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6a1b      	ldr	r3, [r3, #32]
 8011e90:	041b      	lsls	r3, r3, #16
 8011e92:	431a      	orrs	r2, r3
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	061b      	lsls	r3, r3, #24
 8011e98:	431a      	orrs	r2, r3
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	071b      	lsls	r3, r3, #28
 8011e9e:	4929      	ldr	r1, [pc, #164]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ea0:	4313      	orrs	r3, r2
 8011ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f003 0308 	and.w	r3, r3, #8
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d028      	beq.n	8011f04 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011eb2:	4b24      	ldr	r3, [pc, #144]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011eb8:	0e1b      	lsrs	r3, r3, #24
 8011eba:	f003 030f 	and.w	r3, r3, #15
 8011ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011ec0:	4b20      	ldr	r3, [pc, #128]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ec6:	0c1b      	lsrs	r3, r3, #16
 8011ec8:	f003 0303 	and.w	r3, r3, #3
 8011ecc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	695b      	ldr	r3, [r3, #20]
 8011ed2:	019a      	lsls	r2, r3, #6
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	041b      	lsls	r3, r3, #16
 8011ed8:	431a      	orrs	r2, r3
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	061b      	lsls	r3, r3, #24
 8011ede:	431a      	orrs	r2, r3
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	69db      	ldr	r3, [r3, #28]
 8011ee4:	071b      	lsls	r3, r3, #28
 8011ee6:	4917      	ldr	r1, [pc, #92]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ee8:	4313      	orrs	r3, r2
 8011eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8011eee:	4b15      	ldr	r3, [pc, #84]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011ef4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011efc:	4911      	ldr	r1, [pc, #68]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011efe:	4313      	orrs	r3, r2
 8011f00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8011f04:	4b0f      	ldr	r3, [pc, #60]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	4a0e      	ldr	r2, [pc, #56]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011f10:	f7fe fc06 	bl	8010720 <HAL_GetTick>
 8011f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011f16:	e008      	b.n	8011f2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011f18:	f7fe fc02 	bl	8010720 <HAL_GetTick>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	1ad3      	subs	r3, r2, r3
 8011f22:	2b64      	cmp	r3, #100	@ 0x64
 8011f24:	d901      	bls.n	8011f2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011f26:	2303      	movs	r3, #3
 8011f28:	e007      	b.n	8011f3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011f2a:	4b06      	ldr	r3, [pc, #24]	@ (8011f44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011f36:	d1ef      	bne.n	8011f18 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8011f38:	2300      	movs	r3, #0
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3720      	adds	r7, #32
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	40023800 	.word	0x40023800

08011f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d101      	bne.n	8011f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011f56:	2301      	movs	r3, #1
 8011f58:	e040      	b.n	8011fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d106      	bne.n	8011f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2200      	movs	r2, #0
 8011f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f7fe f9c2 	bl	80102f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2224      	movs	r2, #36	@ 0x24
 8011f74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f022 0201 	bic.w	r2, r2, #1
 8011f84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 fba2 	bl	80126d0 <UART_SetConfig>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d101      	bne.n	8011f96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011f92:	2301      	movs	r3, #1
 8011f94:	e022      	b.n	8011fdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d002      	beq.n	8011fa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f000 fdfa 	bl	8012b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	685a      	ldr	r2, [r3, #4]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	689a      	ldr	r2, [r3, #8]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	681a      	ldr	r2, [r3, #0]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f042 0201 	orr.w	r2, r2, #1
 8011fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f000 fe81 	bl	8012cdc <UART_CheckIdleState>
 8011fda:	4603      	mov	r3, r0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b08a      	sub	sp, #40	@ 0x28
 8011fe8:	af02      	add	r7, sp, #8
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	603b      	str	r3, [r7, #0]
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ff8:	2b20      	cmp	r3, #32
 8011ffa:	d171      	bne.n	80120e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d002      	beq.n	8012008 <HAL_UART_Transmit+0x24>
 8012002:	88fb      	ldrh	r3, [r7, #6]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d101      	bne.n	801200c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8012008:	2301      	movs	r3, #1
 801200a:	e06a      	b.n	80120e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2200      	movs	r2, #0
 8012010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	2221      	movs	r2, #33	@ 0x21
 8012018:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801201a:	f7fe fb81 	bl	8010720 <HAL_GetTick>
 801201e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	88fa      	ldrh	r2, [r7, #6]
 8012024:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	88fa      	ldrh	r2, [r7, #6]
 801202c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	689b      	ldr	r3, [r3, #8]
 8012034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012038:	d108      	bne.n	801204c <HAL_UART_Transmit+0x68>
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	691b      	ldr	r3, [r3, #16]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d104      	bne.n	801204c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8012042:	2300      	movs	r3, #0
 8012044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	61bb      	str	r3, [r7, #24]
 801204a:	e003      	b.n	8012054 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012050:	2300      	movs	r3, #0
 8012052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012054:	e02c      	b.n	80120b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	2200      	movs	r2, #0
 801205e:	2180      	movs	r1, #128	@ 0x80
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	f000 fe72 	bl	8012d4a <UART_WaitOnFlagUntilTimeout>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d001      	beq.n	8012070 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801206c:	2303      	movs	r3, #3
 801206e:	e038      	b.n	80120e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d10b      	bne.n	801208e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012076:	69bb      	ldr	r3, [r7, #24]
 8012078:	881b      	ldrh	r3, [r3, #0]
 801207a:	461a      	mov	r2, r3
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012084:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8012086:	69bb      	ldr	r3, [r7, #24]
 8012088:	3302      	adds	r3, #2
 801208a:	61bb      	str	r3, [r7, #24]
 801208c:	e007      	b.n	801209e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801208e:	69fb      	ldr	r3, [r7, #28]
 8012090:	781a      	ldrb	r2, [r3, #0]
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	3301      	adds	r3, #1
 801209c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	3b01      	subs	r3, #1
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d1cc      	bne.n	8012056 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	9300      	str	r3, [sp, #0]
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	2200      	movs	r2, #0
 80120c4:	2140      	movs	r1, #64	@ 0x40
 80120c6:	68f8      	ldr	r0, [r7, #12]
 80120c8:	f000 fe3f 	bl	8012d4a <UART_WaitOnFlagUntilTimeout>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d001      	beq.n	80120d6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80120d2:	2303      	movs	r3, #3
 80120d4:	e005      	b.n	80120e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2220      	movs	r2, #32
 80120da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80120dc:	2300      	movs	r3, #0
 80120de:	e000      	b.n	80120e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80120e0:	2302      	movs	r3, #2
  }
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3720      	adds	r7, #32
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
	...

080120ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b0ba      	sub	sp, #232	@ 0xe8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	69db      	ldr	r3, [r3, #28]
 80120fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	689b      	ldr	r3, [r3, #8]
 801210e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012112:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012116:	f640 030f 	movw	r3, #2063	@ 0x80f
 801211a:	4013      	ands	r3, r2
 801211c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8012120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012124:	2b00      	cmp	r3, #0
 8012126:	d115      	bne.n	8012154 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801212c:	f003 0320 	and.w	r3, r3, #32
 8012130:	2b00      	cmp	r3, #0
 8012132:	d00f      	beq.n	8012154 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012138:	f003 0320 	and.w	r3, r3, #32
 801213c:	2b00      	cmp	r3, #0
 801213e:	d009      	beq.n	8012154 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012144:	2b00      	cmp	r3, #0
 8012146:	f000 8297 	beq.w	8012678 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	4798      	blx	r3
      }
      return;
 8012152:	e291      	b.n	8012678 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012158:	2b00      	cmp	r3, #0
 801215a:	f000 8117 	beq.w	801238c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801215e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012162:	f003 0301 	and.w	r3, r3, #1
 8012166:	2b00      	cmp	r3, #0
 8012168:	d106      	bne.n	8012178 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801216a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801216e:	4b85      	ldr	r3, [pc, #532]	@ (8012384 <HAL_UART_IRQHandler+0x298>)
 8012170:	4013      	ands	r3, r2
 8012172:	2b00      	cmp	r3, #0
 8012174:	f000 810a 	beq.w	801238c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801217c:	f003 0301 	and.w	r3, r3, #1
 8012180:	2b00      	cmp	r3, #0
 8012182:	d011      	beq.n	80121a8 <HAL_UART_IRQHandler+0xbc>
 8012184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00b      	beq.n	80121a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	2201      	movs	r2, #1
 8012196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801219e:	f043 0201 	orr.w	r2, r3, #1
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80121a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80121ac:	f003 0302 	and.w	r3, r3, #2
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d011      	beq.n	80121d8 <HAL_UART_IRQHandler+0xec>
 80121b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80121b8:	f003 0301 	and.w	r3, r3, #1
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00b      	beq.n	80121d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	2202      	movs	r2, #2
 80121c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80121ce:	f043 0204 	orr.w	r2, r3, #4
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80121d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80121dc:	f003 0304 	and.w	r3, r3, #4
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d011      	beq.n	8012208 <HAL_UART_IRQHandler+0x11c>
 80121e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80121e8:	f003 0301 	and.w	r3, r3, #1
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d00b      	beq.n	8012208 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2204      	movs	r2, #4
 80121f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80121fe:	f043 0202 	orr.w	r2, r3, #2
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801220c:	f003 0308 	and.w	r3, r3, #8
 8012210:	2b00      	cmp	r3, #0
 8012212:	d017      	beq.n	8012244 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012218:	f003 0320 	and.w	r3, r3, #32
 801221c:	2b00      	cmp	r3, #0
 801221e:	d105      	bne.n	801222c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8012220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012224:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012228:	2b00      	cmp	r3, #0
 801222a:	d00b      	beq.n	8012244 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2208      	movs	r2, #8
 8012232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801223a:	f043 0208 	orr.w	r2, r3, #8
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801224c:	2b00      	cmp	r3, #0
 801224e:	d012      	beq.n	8012276 <HAL_UART_IRQHandler+0x18a>
 8012250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012254:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012258:	2b00      	cmp	r3, #0
 801225a:	d00c      	beq.n	8012276 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801226c:	f043 0220 	orr.w	r2, r3, #32
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801227c:	2b00      	cmp	r3, #0
 801227e:	f000 81fd 	beq.w	801267c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012286:	f003 0320 	and.w	r3, r3, #32
 801228a:	2b00      	cmp	r3, #0
 801228c:	d00d      	beq.n	80122aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801228e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012292:	f003 0320 	and.w	r3, r3, #32
 8012296:	2b00      	cmp	r3, #0
 8012298:	d007      	beq.n	80122aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d003      	beq.n	80122aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80122b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	689b      	ldr	r3, [r3, #8]
 80122ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80122be:	2b40      	cmp	r3, #64	@ 0x40
 80122c0:	d005      	beq.n	80122ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80122c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80122c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d04f      	beq.n	801236e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fe01 	bl	8012ed6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80122de:	2b40      	cmp	r3, #64	@ 0x40
 80122e0:	d141      	bne.n	8012366 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	3308      	adds	r3, #8
 80122e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80122f0:	e853 3f00 	ldrex	r3, [r3]
 80122f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80122f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80122fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	3308      	adds	r3, #8
 801230a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801230e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801231a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801231e:	e841 2300 	strex	r3, r2, [r1]
 8012322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801232a:	2b00      	cmp	r3, #0
 801232c:	d1d9      	bne.n	80122e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012332:	2b00      	cmp	r3, #0
 8012334:	d013      	beq.n	801235e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801233a:	4a13      	ldr	r2, [pc, #76]	@ (8012388 <HAL_UART_IRQHandler+0x29c>)
 801233c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012342:	4618      	mov	r0, r3
 8012344:	f7fe fb9d 	bl	8010a82 <HAL_DMA_Abort_IT>
 8012348:	4603      	mov	r3, r0
 801234a:	2b00      	cmp	r3, #0
 801234c:	d017      	beq.n	801237e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8012358:	4610      	mov	r0, r2
 801235a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801235c:	e00f      	b.n	801237e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 f9a0 	bl	80126a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012364:	e00b      	b.n	801237e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f000 f99c 	bl	80126a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801236c:	e007      	b.n	801237e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 f998 	bl	80126a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 801237c:	e17e      	b.n	801267c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801237e:	bf00      	nop
    return;
 8012380:	e17c      	b.n	801267c <HAL_UART_IRQHandler+0x590>
 8012382:	bf00      	nop
 8012384:	04000120 	.word	0x04000120
 8012388:	08012f9f 	.word	0x08012f9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012390:	2b01      	cmp	r3, #1
 8012392:	f040 814c 	bne.w	801262e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801239a:	f003 0310 	and.w	r3, r3, #16
 801239e:	2b00      	cmp	r3, #0
 80123a0:	f000 8145 	beq.w	801262e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80123a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80123a8:	f003 0310 	and.w	r3, r3, #16
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f000 813e 	beq.w	801262e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2210      	movs	r2, #16
 80123b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	689b      	ldr	r3, [r3, #8]
 80123c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123c4:	2b40      	cmp	r3, #64	@ 0x40
 80123c6:	f040 80b6 	bne.w	8012536 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80123d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80123da:	2b00      	cmp	r3, #0
 80123dc:	f000 8150 	beq.w	8012680 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80123e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80123ea:	429a      	cmp	r2, r3
 80123ec:	f080 8148 	bcs.w	8012680 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80123f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123fe:	69db      	ldr	r3, [r3, #28]
 8012400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012404:	f000 8086 	beq.w	8012514 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012414:	e853 3f00 	ldrex	r3, [r3]
 8012418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801241c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	461a      	mov	r2, r3
 801242e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012436:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801243a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801243e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012442:	e841 2300 	strex	r3, r2, [r1]
 8012446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801244a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801244e:	2b00      	cmp	r3, #0
 8012450:	d1da      	bne.n	8012408 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	3308      	adds	r3, #8
 8012458:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801245a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801245c:	e853 3f00 	ldrex	r3, [r3]
 8012460:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012464:	f023 0301 	bic.w	r3, r3, #1
 8012468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	3308      	adds	r3, #8
 8012472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012476:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801247a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801247c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801247e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012482:	e841 2300 	strex	r3, r2, [r1]
 8012486:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801248a:	2b00      	cmp	r3, #0
 801248c:	d1e1      	bne.n	8012452 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	3308      	adds	r3, #8
 8012494:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012498:	e853 3f00 	ldrex	r3, [r3]
 801249c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801249e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80124a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80124a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	3308      	adds	r3, #8
 80124ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80124b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80124b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80124b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80124ba:	e841 2300 	strex	r3, r2, [r1]
 80124be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80124c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d1e3      	bne.n	801248e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2220      	movs	r2, #32
 80124ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2200      	movs	r2, #0
 80124d2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124dc:	e853 3f00 	ldrex	r3, [r3]
 80124e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80124e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80124e4:	f023 0310 	bic.w	r3, r3, #16
 80124e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	461a      	mov	r2, r3
 80124f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80124f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80124fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80124fe:	e841 2300 	strex	r3, r2, [r1]
 8012502:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1e4      	bne.n	80124d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801250e:	4618      	mov	r0, r3
 8012510:	f7fe fa47 	bl	80109a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2202      	movs	r2, #2
 8012518:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012526:	b29b      	uxth	r3, r3
 8012528:	1ad3      	subs	r3, r2, r3
 801252a:	b29b      	uxth	r3, r3
 801252c:	4619      	mov	r1, r3
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 f8c2 	bl	80126b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012534:	e0a4      	b.n	8012680 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012542:	b29b      	uxth	r3, r3
 8012544:	1ad3      	subs	r3, r2, r3
 8012546:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012550:	b29b      	uxth	r3, r3
 8012552:	2b00      	cmp	r3, #0
 8012554:	f000 8096 	beq.w	8012684 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8012558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801255c:	2b00      	cmp	r3, #0
 801255e:	f000 8091 	beq.w	8012684 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801256a:	e853 3f00 	ldrex	r3, [r3]
 801256e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012572:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012576:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	461a      	mov	r2, r3
 8012580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012584:	647b      	str	r3, [r7, #68]	@ 0x44
 8012586:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012588:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801258a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801258c:	e841 2300 	strex	r3, r2, [r1]
 8012590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012594:	2b00      	cmp	r3, #0
 8012596:	d1e4      	bne.n	8012562 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	3308      	adds	r3, #8
 801259e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a2:	e853 3f00 	ldrex	r3, [r3]
 80125a6:	623b      	str	r3, [r7, #32]
   return(result);
 80125a8:	6a3b      	ldr	r3, [r7, #32]
 80125aa:	f023 0301 	bic.w	r3, r3, #1
 80125ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	3308      	adds	r3, #8
 80125b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80125bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80125be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80125c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80125c4:	e841 2300 	strex	r3, r2, [r1]
 80125c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80125ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d1e3      	bne.n	8012598 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2220      	movs	r2, #32
 80125d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2200      	movs	r2, #0
 80125e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ea:	693b      	ldr	r3, [r7, #16]
 80125ec:	e853 3f00 	ldrex	r3, [r3]
 80125f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	f023 0310 	bic.w	r3, r3, #16
 80125f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	461a      	mov	r2, r3
 8012602:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012606:	61fb      	str	r3, [r7, #28]
 8012608:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801260a:	69b9      	ldr	r1, [r7, #24]
 801260c:	69fa      	ldr	r2, [r7, #28]
 801260e:	e841 2300 	strex	r3, r2, [r1]
 8012612:	617b      	str	r3, [r7, #20]
   return(result);
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1e4      	bne.n	80125e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2202      	movs	r2, #2
 801261e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012624:	4619      	mov	r1, r3
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f000 f846 	bl	80126b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801262c:	e02a      	b.n	8012684 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00e      	beq.n	8012658 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801263a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801263e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012642:	2b00      	cmp	r3, #0
 8012644:	d008      	beq.n	8012658 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801264a:	2b00      	cmp	r3, #0
 801264c:	d01c      	beq.n	8012688 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	4798      	blx	r3
    }
    return;
 8012656:	e017      	b.n	8012688 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801265c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012660:	2b00      	cmp	r3, #0
 8012662:	d012      	beq.n	801268a <HAL_UART_IRQHandler+0x59e>
 8012664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801266c:	2b00      	cmp	r3, #0
 801266e:	d00c      	beq.n	801268a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f000 fcaa 	bl	8012fca <UART_EndTransmit_IT>
    return;
 8012676:	e008      	b.n	801268a <HAL_UART_IRQHandler+0x59e>
      return;
 8012678:	bf00      	nop
 801267a:	e006      	b.n	801268a <HAL_UART_IRQHandler+0x59e>
    return;
 801267c:	bf00      	nop
 801267e:	e004      	b.n	801268a <HAL_UART_IRQHandler+0x59e>
      return;
 8012680:	bf00      	nop
 8012682:	e002      	b.n	801268a <HAL_UART_IRQHandler+0x59e>
      return;
 8012684:	bf00      	nop
 8012686:	e000      	b.n	801268a <HAL_UART_IRQHandler+0x59e>
    return;
 8012688:	bf00      	nop
  }

}
 801268a:	37e8      	adds	r7, #232	@ 0xe8
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012698:	bf00      	nop
 801269a:	370c      	adds	r7, #12
 801269c:	46bd      	mov	sp, r7
 801269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a2:	4770      	bx	lr

080126a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80126a4:	b480      	push	{r7}
 80126a6:	b083      	sub	sp, #12
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80126ac:	bf00      	nop
 80126ae:	370c      	adds	r7, #12
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr

080126b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	460b      	mov	r3, r1
 80126c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80126c4:	bf00      	nop
 80126c6:	370c      	adds	r7, #12
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr

080126d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b088      	sub	sp, #32
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80126d8:	2300      	movs	r3, #0
 80126da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	689a      	ldr	r2, [r3, #8]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	691b      	ldr	r3, [r3, #16]
 80126e4:	431a      	orrs	r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	695b      	ldr	r3, [r3, #20]
 80126ea:	431a      	orrs	r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	69db      	ldr	r3, [r3, #28]
 80126f0:	4313      	orrs	r3, r2
 80126f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	4ba6      	ldr	r3, [pc, #664]	@ (8012994 <UART_SetConfig+0x2c4>)
 80126fc:	4013      	ands	r3, r2
 80126fe:	687a      	ldr	r2, [r7, #4]
 8012700:	6812      	ldr	r2, [r2, #0]
 8012702:	6979      	ldr	r1, [r7, #20]
 8012704:	430b      	orrs	r3, r1
 8012706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	68da      	ldr	r2, [r3, #12]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	430a      	orrs	r2, r1
 801271c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	699b      	ldr	r3, [r3, #24]
 8012722:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6a1b      	ldr	r3, [r3, #32]
 8012728:	697a      	ldr	r2, [r7, #20]
 801272a:	4313      	orrs	r3, r2
 801272c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	689b      	ldr	r3, [r3, #8]
 8012734:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	697a      	ldr	r2, [r7, #20]
 801273e:	430a      	orrs	r2, r1
 8012740:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	4a94      	ldr	r2, [pc, #592]	@ (8012998 <UART_SetConfig+0x2c8>)
 8012748:	4293      	cmp	r3, r2
 801274a:	d120      	bne.n	801278e <UART_SetConfig+0xbe>
 801274c:	4b93      	ldr	r3, [pc, #588]	@ (801299c <UART_SetConfig+0x2cc>)
 801274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012752:	f003 0303 	and.w	r3, r3, #3
 8012756:	2b03      	cmp	r3, #3
 8012758:	d816      	bhi.n	8012788 <UART_SetConfig+0xb8>
 801275a:	a201      	add	r2, pc, #4	@ (adr r2, 8012760 <UART_SetConfig+0x90>)
 801275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012760:	08012771 	.word	0x08012771
 8012764:	0801277d 	.word	0x0801277d
 8012768:	08012777 	.word	0x08012777
 801276c:	08012783 	.word	0x08012783
 8012770:	2301      	movs	r3, #1
 8012772:	77fb      	strb	r3, [r7, #31]
 8012774:	e150      	b.n	8012a18 <UART_SetConfig+0x348>
 8012776:	2302      	movs	r3, #2
 8012778:	77fb      	strb	r3, [r7, #31]
 801277a:	e14d      	b.n	8012a18 <UART_SetConfig+0x348>
 801277c:	2304      	movs	r3, #4
 801277e:	77fb      	strb	r3, [r7, #31]
 8012780:	e14a      	b.n	8012a18 <UART_SetConfig+0x348>
 8012782:	2308      	movs	r3, #8
 8012784:	77fb      	strb	r3, [r7, #31]
 8012786:	e147      	b.n	8012a18 <UART_SetConfig+0x348>
 8012788:	2310      	movs	r3, #16
 801278a:	77fb      	strb	r3, [r7, #31]
 801278c:	e144      	b.n	8012a18 <UART_SetConfig+0x348>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	4a83      	ldr	r2, [pc, #524]	@ (80129a0 <UART_SetConfig+0x2d0>)
 8012794:	4293      	cmp	r3, r2
 8012796:	d132      	bne.n	80127fe <UART_SetConfig+0x12e>
 8012798:	4b80      	ldr	r3, [pc, #512]	@ (801299c <UART_SetConfig+0x2cc>)
 801279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801279e:	f003 030c 	and.w	r3, r3, #12
 80127a2:	2b0c      	cmp	r3, #12
 80127a4:	d828      	bhi.n	80127f8 <UART_SetConfig+0x128>
 80127a6:	a201      	add	r2, pc, #4	@ (adr r2, 80127ac <UART_SetConfig+0xdc>)
 80127a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127ac:	080127e1 	.word	0x080127e1
 80127b0:	080127f9 	.word	0x080127f9
 80127b4:	080127f9 	.word	0x080127f9
 80127b8:	080127f9 	.word	0x080127f9
 80127bc:	080127ed 	.word	0x080127ed
 80127c0:	080127f9 	.word	0x080127f9
 80127c4:	080127f9 	.word	0x080127f9
 80127c8:	080127f9 	.word	0x080127f9
 80127cc:	080127e7 	.word	0x080127e7
 80127d0:	080127f9 	.word	0x080127f9
 80127d4:	080127f9 	.word	0x080127f9
 80127d8:	080127f9 	.word	0x080127f9
 80127dc:	080127f3 	.word	0x080127f3
 80127e0:	2300      	movs	r3, #0
 80127e2:	77fb      	strb	r3, [r7, #31]
 80127e4:	e118      	b.n	8012a18 <UART_SetConfig+0x348>
 80127e6:	2302      	movs	r3, #2
 80127e8:	77fb      	strb	r3, [r7, #31]
 80127ea:	e115      	b.n	8012a18 <UART_SetConfig+0x348>
 80127ec:	2304      	movs	r3, #4
 80127ee:	77fb      	strb	r3, [r7, #31]
 80127f0:	e112      	b.n	8012a18 <UART_SetConfig+0x348>
 80127f2:	2308      	movs	r3, #8
 80127f4:	77fb      	strb	r3, [r7, #31]
 80127f6:	e10f      	b.n	8012a18 <UART_SetConfig+0x348>
 80127f8:	2310      	movs	r3, #16
 80127fa:	77fb      	strb	r3, [r7, #31]
 80127fc:	e10c      	b.n	8012a18 <UART_SetConfig+0x348>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	4a68      	ldr	r2, [pc, #416]	@ (80129a4 <UART_SetConfig+0x2d4>)
 8012804:	4293      	cmp	r3, r2
 8012806:	d120      	bne.n	801284a <UART_SetConfig+0x17a>
 8012808:	4b64      	ldr	r3, [pc, #400]	@ (801299c <UART_SetConfig+0x2cc>)
 801280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801280e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8012812:	2b30      	cmp	r3, #48	@ 0x30
 8012814:	d013      	beq.n	801283e <UART_SetConfig+0x16e>
 8012816:	2b30      	cmp	r3, #48	@ 0x30
 8012818:	d814      	bhi.n	8012844 <UART_SetConfig+0x174>
 801281a:	2b20      	cmp	r3, #32
 801281c:	d009      	beq.n	8012832 <UART_SetConfig+0x162>
 801281e:	2b20      	cmp	r3, #32
 8012820:	d810      	bhi.n	8012844 <UART_SetConfig+0x174>
 8012822:	2b00      	cmp	r3, #0
 8012824:	d002      	beq.n	801282c <UART_SetConfig+0x15c>
 8012826:	2b10      	cmp	r3, #16
 8012828:	d006      	beq.n	8012838 <UART_SetConfig+0x168>
 801282a:	e00b      	b.n	8012844 <UART_SetConfig+0x174>
 801282c:	2300      	movs	r3, #0
 801282e:	77fb      	strb	r3, [r7, #31]
 8012830:	e0f2      	b.n	8012a18 <UART_SetConfig+0x348>
 8012832:	2302      	movs	r3, #2
 8012834:	77fb      	strb	r3, [r7, #31]
 8012836:	e0ef      	b.n	8012a18 <UART_SetConfig+0x348>
 8012838:	2304      	movs	r3, #4
 801283a:	77fb      	strb	r3, [r7, #31]
 801283c:	e0ec      	b.n	8012a18 <UART_SetConfig+0x348>
 801283e:	2308      	movs	r3, #8
 8012840:	77fb      	strb	r3, [r7, #31]
 8012842:	e0e9      	b.n	8012a18 <UART_SetConfig+0x348>
 8012844:	2310      	movs	r3, #16
 8012846:	77fb      	strb	r3, [r7, #31]
 8012848:	e0e6      	b.n	8012a18 <UART_SetConfig+0x348>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	4a56      	ldr	r2, [pc, #344]	@ (80129a8 <UART_SetConfig+0x2d8>)
 8012850:	4293      	cmp	r3, r2
 8012852:	d120      	bne.n	8012896 <UART_SetConfig+0x1c6>
 8012854:	4b51      	ldr	r3, [pc, #324]	@ (801299c <UART_SetConfig+0x2cc>)
 8012856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801285a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801285e:	2bc0      	cmp	r3, #192	@ 0xc0
 8012860:	d013      	beq.n	801288a <UART_SetConfig+0x1ba>
 8012862:	2bc0      	cmp	r3, #192	@ 0xc0
 8012864:	d814      	bhi.n	8012890 <UART_SetConfig+0x1c0>
 8012866:	2b80      	cmp	r3, #128	@ 0x80
 8012868:	d009      	beq.n	801287e <UART_SetConfig+0x1ae>
 801286a:	2b80      	cmp	r3, #128	@ 0x80
 801286c:	d810      	bhi.n	8012890 <UART_SetConfig+0x1c0>
 801286e:	2b00      	cmp	r3, #0
 8012870:	d002      	beq.n	8012878 <UART_SetConfig+0x1a8>
 8012872:	2b40      	cmp	r3, #64	@ 0x40
 8012874:	d006      	beq.n	8012884 <UART_SetConfig+0x1b4>
 8012876:	e00b      	b.n	8012890 <UART_SetConfig+0x1c0>
 8012878:	2300      	movs	r3, #0
 801287a:	77fb      	strb	r3, [r7, #31]
 801287c:	e0cc      	b.n	8012a18 <UART_SetConfig+0x348>
 801287e:	2302      	movs	r3, #2
 8012880:	77fb      	strb	r3, [r7, #31]
 8012882:	e0c9      	b.n	8012a18 <UART_SetConfig+0x348>
 8012884:	2304      	movs	r3, #4
 8012886:	77fb      	strb	r3, [r7, #31]
 8012888:	e0c6      	b.n	8012a18 <UART_SetConfig+0x348>
 801288a:	2308      	movs	r3, #8
 801288c:	77fb      	strb	r3, [r7, #31]
 801288e:	e0c3      	b.n	8012a18 <UART_SetConfig+0x348>
 8012890:	2310      	movs	r3, #16
 8012892:	77fb      	strb	r3, [r7, #31]
 8012894:	e0c0      	b.n	8012a18 <UART_SetConfig+0x348>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4a44      	ldr	r2, [pc, #272]	@ (80129ac <UART_SetConfig+0x2dc>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d125      	bne.n	80128ec <UART_SetConfig+0x21c>
 80128a0:	4b3e      	ldr	r3, [pc, #248]	@ (801299c <UART_SetConfig+0x2cc>)
 80128a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80128a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80128aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128ae:	d017      	beq.n	80128e0 <UART_SetConfig+0x210>
 80128b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128b4:	d817      	bhi.n	80128e6 <UART_SetConfig+0x216>
 80128b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80128ba:	d00b      	beq.n	80128d4 <UART_SetConfig+0x204>
 80128bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80128c0:	d811      	bhi.n	80128e6 <UART_SetConfig+0x216>
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d003      	beq.n	80128ce <UART_SetConfig+0x1fe>
 80128c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80128ca:	d006      	beq.n	80128da <UART_SetConfig+0x20a>
 80128cc:	e00b      	b.n	80128e6 <UART_SetConfig+0x216>
 80128ce:	2300      	movs	r3, #0
 80128d0:	77fb      	strb	r3, [r7, #31]
 80128d2:	e0a1      	b.n	8012a18 <UART_SetConfig+0x348>
 80128d4:	2302      	movs	r3, #2
 80128d6:	77fb      	strb	r3, [r7, #31]
 80128d8:	e09e      	b.n	8012a18 <UART_SetConfig+0x348>
 80128da:	2304      	movs	r3, #4
 80128dc:	77fb      	strb	r3, [r7, #31]
 80128de:	e09b      	b.n	8012a18 <UART_SetConfig+0x348>
 80128e0:	2308      	movs	r3, #8
 80128e2:	77fb      	strb	r3, [r7, #31]
 80128e4:	e098      	b.n	8012a18 <UART_SetConfig+0x348>
 80128e6:	2310      	movs	r3, #16
 80128e8:	77fb      	strb	r3, [r7, #31]
 80128ea:	e095      	b.n	8012a18 <UART_SetConfig+0x348>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4a2f      	ldr	r2, [pc, #188]	@ (80129b0 <UART_SetConfig+0x2e0>)
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d125      	bne.n	8012942 <UART_SetConfig+0x272>
 80128f6:	4b29      	ldr	r3, [pc, #164]	@ (801299c <UART_SetConfig+0x2cc>)
 80128f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80128fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8012900:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012904:	d017      	beq.n	8012936 <UART_SetConfig+0x266>
 8012906:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801290a:	d817      	bhi.n	801293c <UART_SetConfig+0x26c>
 801290c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012910:	d00b      	beq.n	801292a <UART_SetConfig+0x25a>
 8012912:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012916:	d811      	bhi.n	801293c <UART_SetConfig+0x26c>
 8012918:	2b00      	cmp	r3, #0
 801291a:	d003      	beq.n	8012924 <UART_SetConfig+0x254>
 801291c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012920:	d006      	beq.n	8012930 <UART_SetConfig+0x260>
 8012922:	e00b      	b.n	801293c <UART_SetConfig+0x26c>
 8012924:	2301      	movs	r3, #1
 8012926:	77fb      	strb	r3, [r7, #31]
 8012928:	e076      	b.n	8012a18 <UART_SetConfig+0x348>
 801292a:	2302      	movs	r3, #2
 801292c:	77fb      	strb	r3, [r7, #31]
 801292e:	e073      	b.n	8012a18 <UART_SetConfig+0x348>
 8012930:	2304      	movs	r3, #4
 8012932:	77fb      	strb	r3, [r7, #31]
 8012934:	e070      	b.n	8012a18 <UART_SetConfig+0x348>
 8012936:	2308      	movs	r3, #8
 8012938:	77fb      	strb	r3, [r7, #31]
 801293a:	e06d      	b.n	8012a18 <UART_SetConfig+0x348>
 801293c:	2310      	movs	r3, #16
 801293e:	77fb      	strb	r3, [r7, #31]
 8012940:	e06a      	b.n	8012a18 <UART_SetConfig+0x348>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	4a1b      	ldr	r2, [pc, #108]	@ (80129b4 <UART_SetConfig+0x2e4>)
 8012948:	4293      	cmp	r3, r2
 801294a:	d138      	bne.n	80129be <UART_SetConfig+0x2ee>
 801294c:	4b13      	ldr	r3, [pc, #76]	@ (801299c <UART_SetConfig+0x2cc>)
 801294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012952:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8012956:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801295a:	d017      	beq.n	801298c <UART_SetConfig+0x2bc>
 801295c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012960:	d82a      	bhi.n	80129b8 <UART_SetConfig+0x2e8>
 8012962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012966:	d00b      	beq.n	8012980 <UART_SetConfig+0x2b0>
 8012968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801296c:	d824      	bhi.n	80129b8 <UART_SetConfig+0x2e8>
 801296e:	2b00      	cmp	r3, #0
 8012970:	d003      	beq.n	801297a <UART_SetConfig+0x2aa>
 8012972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012976:	d006      	beq.n	8012986 <UART_SetConfig+0x2b6>
 8012978:	e01e      	b.n	80129b8 <UART_SetConfig+0x2e8>
 801297a:	2300      	movs	r3, #0
 801297c:	77fb      	strb	r3, [r7, #31]
 801297e:	e04b      	b.n	8012a18 <UART_SetConfig+0x348>
 8012980:	2302      	movs	r3, #2
 8012982:	77fb      	strb	r3, [r7, #31]
 8012984:	e048      	b.n	8012a18 <UART_SetConfig+0x348>
 8012986:	2304      	movs	r3, #4
 8012988:	77fb      	strb	r3, [r7, #31]
 801298a:	e045      	b.n	8012a18 <UART_SetConfig+0x348>
 801298c:	2308      	movs	r3, #8
 801298e:	77fb      	strb	r3, [r7, #31]
 8012990:	e042      	b.n	8012a18 <UART_SetConfig+0x348>
 8012992:	bf00      	nop
 8012994:	efff69f3 	.word	0xefff69f3
 8012998:	40011000 	.word	0x40011000
 801299c:	40023800 	.word	0x40023800
 80129a0:	40004400 	.word	0x40004400
 80129a4:	40004800 	.word	0x40004800
 80129a8:	40004c00 	.word	0x40004c00
 80129ac:	40005000 	.word	0x40005000
 80129b0:	40011400 	.word	0x40011400
 80129b4:	40007800 	.word	0x40007800
 80129b8:	2310      	movs	r3, #16
 80129ba:	77fb      	strb	r3, [r7, #31]
 80129bc:	e02c      	b.n	8012a18 <UART_SetConfig+0x348>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	4a72      	ldr	r2, [pc, #456]	@ (8012b8c <UART_SetConfig+0x4bc>)
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d125      	bne.n	8012a14 <UART_SetConfig+0x344>
 80129c8:	4b71      	ldr	r3, [pc, #452]	@ (8012b90 <UART_SetConfig+0x4c0>)
 80129ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80129d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80129d6:	d017      	beq.n	8012a08 <UART_SetConfig+0x338>
 80129d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80129dc:	d817      	bhi.n	8012a0e <UART_SetConfig+0x33e>
 80129de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80129e2:	d00b      	beq.n	80129fc <UART_SetConfig+0x32c>
 80129e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80129e8:	d811      	bhi.n	8012a0e <UART_SetConfig+0x33e>
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d003      	beq.n	80129f6 <UART_SetConfig+0x326>
 80129ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80129f2:	d006      	beq.n	8012a02 <UART_SetConfig+0x332>
 80129f4:	e00b      	b.n	8012a0e <UART_SetConfig+0x33e>
 80129f6:	2300      	movs	r3, #0
 80129f8:	77fb      	strb	r3, [r7, #31]
 80129fa:	e00d      	b.n	8012a18 <UART_SetConfig+0x348>
 80129fc:	2302      	movs	r3, #2
 80129fe:	77fb      	strb	r3, [r7, #31]
 8012a00:	e00a      	b.n	8012a18 <UART_SetConfig+0x348>
 8012a02:	2304      	movs	r3, #4
 8012a04:	77fb      	strb	r3, [r7, #31]
 8012a06:	e007      	b.n	8012a18 <UART_SetConfig+0x348>
 8012a08:	2308      	movs	r3, #8
 8012a0a:	77fb      	strb	r3, [r7, #31]
 8012a0c:	e004      	b.n	8012a18 <UART_SetConfig+0x348>
 8012a0e:	2310      	movs	r3, #16
 8012a10:	77fb      	strb	r3, [r7, #31]
 8012a12:	e001      	b.n	8012a18 <UART_SetConfig+0x348>
 8012a14:	2310      	movs	r3, #16
 8012a16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	69db      	ldr	r3, [r3, #28]
 8012a1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012a20:	d15b      	bne.n	8012ada <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8012a22:	7ffb      	ldrb	r3, [r7, #31]
 8012a24:	2b08      	cmp	r3, #8
 8012a26:	d828      	bhi.n	8012a7a <UART_SetConfig+0x3aa>
 8012a28:	a201      	add	r2, pc, #4	@ (adr r2, 8012a30 <UART_SetConfig+0x360>)
 8012a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a2e:	bf00      	nop
 8012a30:	08012a55 	.word	0x08012a55
 8012a34:	08012a5d 	.word	0x08012a5d
 8012a38:	08012a65 	.word	0x08012a65
 8012a3c:	08012a7b 	.word	0x08012a7b
 8012a40:	08012a6b 	.word	0x08012a6b
 8012a44:	08012a7b 	.word	0x08012a7b
 8012a48:	08012a7b 	.word	0x08012a7b
 8012a4c:	08012a7b 	.word	0x08012a7b
 8012a50:	08012a73 	.word	0x08012a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012a54:	f7fe fe60 	bl	8011718 <HAL_RCC_GetPCLK1Freq>
 8012a58:	61b8      	str	r0, [r7, #24]
        break;
 8012a5a:	e013      	b.n	8012a84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012a5c:	f7fe fe70 	bl	8011740 <HAL_RCC_GetPCLK2Freq>
 8012a60:	61b8      	str	r0, [r7, #24]
        break;
 8012a62:	e00f      	b.n	8012a84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012a64:	4b4b      	ldr	r3, [pc, #300]	@ (8012b94 <UART_SetConfig+0x4c4>)
 8012a66:	61bb      	str	r3, [r7, #24]
        break;
 8012a68:	e00c      	b.n	8012a84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012a6a:	f7fe fd83 	bl	8011574 <HAL_RCC_GetSysClockFreq>
 8012a6e:	61b8      	str	r0, [r7, #24]
        break;
 8012a70:	e008      	b.n	8012a84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012a76:	61bb      	str	r3, [r7, #24]
        break;
 8012a78:	e004      	b.n	8012a84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012a7e:	2301      	movs	r3, #1
 8012a80:	77bb      	strb	r3, [r7, #30]
        break;
 8012a82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012a84:	69bb      	ldr	r3, [r7, #24]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d074      	beq.n	8012b74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	005a      	lsls	r2, r3, #1
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	085b      	lsrs	r3, r3, #1
 8012a94:	441a      	add	r2, r3
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	2b0f      	cmp	r3, #15
 8012aa4:	d916      	bls.n	8012ad4 <UART_SetConfig+0x404>
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012aac:	d212      	bcs.n	8012ad4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	f023 030f 	bic.w	r3, r3, #15
 8012ab6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	085b      	lsrs	r3, r3, #1
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	f003 0307 	and.w	r3, r3, #7
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	89fb      	ldrh	r3, [r7, #14]
 8012ac6:	4313      	orrs	r3, r2
 8012ac8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	89fa      	ldrh	r2, [r7, #14]
 8012ad0:	60da      	str	r2, [r3, #12]
 8012ad2:	e04f      	b.n	8012b74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	77bb      	strb	r3, [r7, #30]
 8012ad8:	e04c      	b.n	8012b74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012ada:	7ffb      	ldrb	r3, [r7, #31]
 8012adc:	2b08      	cmp	r3, #8
 8012ade:	d828      	bhi.n	8012b32 <UART_SetConfig+0x462>
 8012ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8012ae8 <UART_SetConfig+0x418>)
 8012ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ae6:	bf00      	nop
 8012ae8:	08012b0d 	.word	0x08012b0d
 8012aec:	08012b15 	.word	0x08012b15
 8012af0:	08012b1d 	.word	0x08012b1d
 8012af4:	08012b33 	.word	0x08012b33
 8012af8:	08012b23 	.word	0x08012b23
 8012afc:	08012b33 	.word	0x08012b33
 8012b00:	08012b33 	.word	0x08012b33
 8012b04:	08012b33 	.word	0x08012b33
 8012b08:	08012b2b 	.word	0x08012b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012b0c:	f7fe fe04 	bl	8011718 <HAL_RCC_GetPCLK1Freq>
 8012b10:	61b8      	str	r0, [r7, #24]
        break;
 8012b12:	e013      	b.n	8012b3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012b14:	f7fe fe14 	bl	8011740 <HAL_RCC_GetPCLK2Freq>
 8012b18:	61b8      	str	r0, [r7, #24]
        break;
 8012b1a:	e00f      	b.n	8012b3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8012b94 <UART_SetConfig+0x4c4>)
 8012b1e:	61bb      	str	r3, [r7, #24]
        break;
 8012b20:	e00c      	b.n	8012b3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012b22:	f7fe fd27 	bl	8011574 <HAL_RCC_GetSysClockFreq>
 8012b26:	61b8      	str	r0, [r7, #24]
        break;
 8012b28:	e008      	b.n	8012b3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012b2e:	61bb      	str	r3, [r7, #24]
        break;
 8012b30:	e004      	b.n	8012b3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8012b32:	2300      	movs	r3, #0
 8012b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012b36:	2301      	movs	r3, #1
 8012b38:	77bb      	strb	r3, [r7, #30]
        break;
 8012b3a:	bf00      	nop
    }

    if (pclk != 0U)
 8012b3c:	69bb      	ldr	r3, [r7, #24]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d018      	beq.n	8012b74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	085a      	lsrs	r2, r3, #1
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	441a      	add	r2, r3
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	2b0f      	cmp	r3, #15
 8012b5a:	d909      	bls.n	8012b70 <UART_SetConfig+0x4a0>
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b62:	d205      	bcs.n	8012b70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	60da      	str	r2, [r3, #12]
 8012b6e:	e001      	b.n	8012b74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8012b70:	2301      	movs	r3, #1
 8012b72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8012b80:	7fbb      	ldrb	r3, [r7, #30]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3720      	adds	r7, #32
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	40007c00 	.word	0x40007c00
 8012b90:	40023800 	.word	0x40023800
 8012b94:	00f42400 	.word	0x00f42400

08012b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ba4:	f003 0301 	and.w	r3, r3, #1
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d00a      	beq.n	8012bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	430a      	orrs	r2, r1
 8012bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bc6:	f003 0302 	and.w	r3, r3, #2
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00a      	beq.n	8012be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	430a      	orrs	r2, r1
 8012be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012be8:	f003 0304 	and.w	r3, r3, #4
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d00a      	beq.n	8012c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	430a      	orrs	r2, r1
 8012c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c0a:	f003 0308 	and.w	r3, r3, #8
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00a      	beq.n	8012c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	430a      	orrs	r2, r1
 8012c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c2c:	f003 0310 	and.w	r3, r3, #16
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00a      	beq.n	8012c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	689b      	ldr	r3, [r3, #8]
 8012c3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	430a      	orrs	r2, r1
 8012c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c4e:	f003 0320 	and.w	r3, r3, #32
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d00a      	beq.n	8012c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	689b      	ldr	r3, [r3, #8]
 8012c5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	430a      	orrs	r2, r1
 8012c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d01a      	beq.n	8012cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	430a      	orrs	r2, r1
 8012c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012c96:	d10a      	bne.n	8012cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	430a      	orrs	r2, r1
 8012cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d00a      	beq.n	8012cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	685b      	ldr	r3, [r3, #4]
 8012cc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	430a      	orrs	r2, r1
 8012cce:	605a      	str	r2, [r3, #4]
  }
}
 8012cd0:	bf00      	nop
 8012cd2:	370c      	adds	r7, #12
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr

08012cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b086      	sub	sp, #24
 8012ce0:	af02      	add	r7, sp, #8
 8012ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012cec:	f7fd fd18 	bl	8010720 <HAL_GetTick>
 8012cf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f003 0308 	and.w	r3, r3, #8
 8012cfc:	2b08      	cmp	r3, #8
 8012cfe:	d10e      	bne.n	8012d1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012d00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012d04:	9300      	str	r3, [sp, #0]
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 f81b 	bl	8012d4a <UART_WaitOnFlagUntilTimeout>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d001      	beq.n	8012d1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012d1a:	2303      	movs	r3, #3
 8012d1c:	e011      	b.n	8012d42 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2220      	movs	r2, #32
 8012d22:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2220      	movs	r2, #32
 8012d28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2200      	movs	r2, #0
 8012d36:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8012d40:	2300      	movs	r3, #0
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3710      	adds	r7, #16
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}

08012d4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012d4a:	b580      	push	{r7, lr}
 8012d4c:	b09c      	sub	sp, #112	@ 0x70
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	60f8      	str	r0, [r7, #12]
 8012d52:	60b9      	str	r1, [r7, #8]
 8012d54:	603b      	str	r3, [r7, #0]
 8012d56:	4613      	mov	r3, r2
 8012d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012d5a:	e0a7      	b.n	8012eac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012d5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d62:	f000 80a3 	beq.w	8012eac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012d66:	f7fd fcdb 	bl	8010720 <HAL_GetTick>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	1ad3      	subs	r3, r2, r3
 8012d70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d302      	bcc.n	8012d7c <UART_WaitOnFlagUntilTimeout+0x32>
 8012d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d13f      	bne.n	8012dfc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d84:	e853 3f00 	ldrex	r3, [r3]
 8012d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8012d90:	667b      	str	r3, [r7, #100]	@ 0x64
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	461a      	mov	r2, r3
 8012d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012d9c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012da0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012da2:	e841 2300 	strex	r3, r2, [r1]
 8012da6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8012da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d1e6      	bne.n	8012d7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	3308      	adds	r3, #8
 8012db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012db8:	e853 3f00 	ldrex	r3, [r3]
 8012dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc0:	f023 0301 	bic.w	r3, r3, #1
 8012dc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	3308      	adds	r3, #8
 8012dcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012dce:	64ba      	str	r2, [r7, #72]	@ 0x48
 8012dd0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012dd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012dd6:	e841 2300 	strex	r3, r2, [r1]
 8012dda:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8012ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d1e5      	bne.n	8012dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2220      	movs	r2, #32
 8012de6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2220      	movs	r2, #32
 8012dec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	2200      	movs	r2, #0
 8012df4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8012df8:	2303      	movs	r3, #3
 8012dfa:	e068      	b.n	8012ece <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f003 0304 	and.w	r3, r3, #4
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d050      	beq.n	8012eac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	69db      	ldr	r3, [r3, #28]
 8012e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012e18:	d148      	bne.n	8012eac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012e22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e2c:	e853 3f00 	ldrex	r3, [r3]
 8012e30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8012e38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	461a      	mov	r2, r3
 8012e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e44:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012e48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012e4a:	e841 2300 	strex	r3, r2, [r1]
 8012e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8012e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d1e6      	bne.n	8012e24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	3308      	adds	r3, #8
 8012e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	e853 3f00 	ldrex	r3, [r3]
 8012e64:	613b      	str	r3, [r7, #16]
   return(result);
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	f023 0301 	bic.w	r3, r3, #1
 8012e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	3308      	adds	r3, #8
 8012e74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012e76:	623a      	str	r2, [r7, #32]
 8012e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e7a:	69f9      	ldr	r1, [r7, #28]
 8012e7c:	6a3a      	ldr	r2, [r7, #32]
 8012e7e:	e841 2300 	strex	r3, r2, [r1]
 8012e82:	61bb      	str	r3, [r7, #24]
   return(result);
 8012e84:	69bb      	ldr	r3, [r7, #24]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d1e5      	bne.n	8012e56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	2220      	movs	r2, #32
 8012e8e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2220      	movs	r2, #32
 8012e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2220      	movs	r2, #32
 8012e9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8012ea8:	2303      	movs	r3, #3
 8012eaa:	e010      	b.n	8012ece <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	69da      	ldr	r2, [r3, #28]
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	4013      	ands	r3, r2
 8012eb6:	68ba      	ldr	r2, [r7, #8]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	bf0c      	ite	eq
 8012ebc:	2301      	moveq	r3, #1
 8012ebe:	2300      	movne	r3, #0
 8012ec0:	b2db      	uxtb	r3, r3
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	79fb      	ldrb	r3, [r7, #7]
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	f43f af48 	beq.w	8012d5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012ecc:	2300      	movs	r3, #0
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3770      	adds	r7, #112	@ 0x70
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}

08012ed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012ed6:	b480      	push	{r7}
 8012ed8:	b095      	sub	sp, #84	@ 0x54
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ee6:	e853 3f00 	ldrex	r3, [r3]
 8012eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	461a      	mov	r2, r3
 8012efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8012efe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012f04:	e841 2300 	strex	r3, r2, [r1]
 8012f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d1e6      	bne.n	8012ede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	3308      	adds	r3, #8
 8012f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f18:	6a3b      	ldr	r3, [r7, #32]
 8012f1a:	e853 3f00 	ldrex	r3, [r3]
 8012f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	f023 0301 	bic.w	r3, r3, #1
 8012f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	3308      	adds	r3, #8
 8012f2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012f30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f38:	e841 2300 	strex	r3, r2, [r1]
 8012f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d1e5      	bne.n	8012f10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012f48:	2b01      	cmp	r3, #1
 8012f4a:	d118      	bne.n	8012f7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	e853 3f00 	ldrex	r3, [r3]
 8012f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	f023 0310 	bic.w	r3, r3, #16
 8012f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	461a      	mov	r2, r3
 8012f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f6a:	61bb      	str	r3, [r7, #24]
 8012f6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f6e:	6979      	ldr	r1, [r7, #20]
 8012f70:	69ba      	ldr	r2, [r7, #24]
 8012f72:	e841 2300 	strex	r3, r2, [r1]
 8012f76:	613b      	str	r3, [r7, #16]
   return(result);
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d1e6      	bne.n	8012f4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2220      	movs	r2, #32
 8012f82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2200      	movs	r2, #0
 8012f90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012f92:	bf00      	nop
 8012f94:	3754      	adds	r7, #84	@ 0x54
 8012f96:	46bd      	mov	sp, r7
 8012f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9c:	4770      	bx	lr

08012f9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012f9e:	b580      	push	{r7, lr}
 8012fa0:	b084      	sub	sp, #16
 8012fa2:	af00      	add	r7, sp, #0
 8012fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012faa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012fbc:	68f8      	ldr	r0, [r7, #12]
 8012fbe:	f7ff fb71 	bl	80126a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012fc2:	bf00      	nop
 8012fc4:	3710      	adds	r7, #16
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}

08012fca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b088      	sub	sp, #32
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	e853 3f00 	ldrex	r3, [r3]
 8012fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012fe6:	61fb      	str	r3, [r7, #28]
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	461a      	mov	r2, r3
 8012fee:	69fb      	ldr	r3, [r7, #28]
 8012ff0:	61bb      	str	r3, [r7, #24]
 8012ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ff4:	6979      	ldr	r1, [r7, #20]
 8012ff6:	69ba      	ldr	r2, [r7, #24]
 8012ff8:	e841 2300 	strex	r3, r2, [r1]
 8012ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d1e6      	bne.n	8012fd2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2220      	movs	r2, #32
 8013008:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2200      	movs	r2, #0
 801300e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f7ff fb3d 	bl	8012690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013016:	bf00      	nop
 8013018:	3720      	adds	r7, #32
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 801301e:	b480      	push	{r7}
 8013020:	b08b      	sub	sp, #44	@ 0x2c
 8013022:	af00      	add	r7, sp, #0
 8013024:	60f8      	str	r0, [r7, #12]
 8013026:	ed87 0a02 	vstr	s0, [r7, #8]
 801302a:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	881b      	ldrh	r3, [r3, #0]
 801303c:	461a      	mov	r2, r3
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	885b      	ldrh	r3, [r3, #2]
 8013042:	fb02 f303 	mul.w	r3, r2, r3
 8013046:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8013048:	69bb      	ldr	r3, [r7, #24]
 801304a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 801304c:	e010      	b.n	8013070 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 801304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013050:	1d1a      	adds	r2, r3, #4
 8013052:	627a      	str	r2, [r7, #36]	@ 0x24
 8013054:	ed93 7a00 	vldr	s14, [r3]
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	1d1a      	adds	r2, r3, #4
 801305c:	623a      	str	r2, [r7, #32]
 801305e:	edd7 7a02 	vldr	s15, [r7, #8]
 8013062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013066:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	3b01      	subs	r3, #1
 801306e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d1eb      	bne.n	801304e <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8013076:	2300      	movs	r3, #0
 8013078:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 801307a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801307e:	4618      	mov	r0, r3
 8013080:	372c      	adds	r7, #44	@ 0x2c
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr

0801308a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801308a:	b480      	push	{r7}
 801308c:	b08b      	sub	sp, #44	@ 0x2c
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
 8013092:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	881b      	ldrh	r3, [r3, #0]
 80130a4:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	885b      	ldrh	r3, [r3, #2]
 80130aa:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 80130ac:	89fb      	ldrh	r3, [r7, #14]
 80130ae:	61bb      	str	r3, [r7, #24]
 80130b0:	2300      	movs	r3, #0
 80130b2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	009b      	lsls	r3, r3, #2
 80130b8:	693a      	ldr	r2, [r7, #16]
 80130ba:	4413      	add	r3, r2
 80130bc:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 80130be:	89bb      	ldrh	r3, [r7, #12]
 80130c0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 80130c2:	e00d      	b.n	80130e0 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 80130c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130c6:	1d1a      	adds	r2, r3, #4
 80130c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	6a3b      	ldr	r3, [r7, #32]
 80130ce:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80130d0:	89fb      	ldrh	r3, [r7, #14]
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	6a3a      	ldr	r2, [r7, #32]
 80130d6:	4413      	add	r3, r2
 80130d8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	3b01      	subs	r3, #1
 80130de:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d1ee      	bne.n	80130c4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	3301      	adds	r3, #1
 80130ea:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80130ec:	69bb      	ldr	r3, [r7, #24]
 80130ee:	3b01      	subs	r3, #1
 80130f0:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80130f2:	69bb      	ldr	r3, [r7, #24]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d1dd      	bne.n	80130b4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80130f8:	2300      	movs	r3, #0
 80130fa:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80130fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013100:	4618      	mov	r0, r3
 8013102:	372c      	adds	r7, #44	@ 0x2c
 8013104:	46bd      	mov	sp, r7
 8013106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310a:	4770      	bx	lr

0801310c <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 801310c:	b480      	push	{r7}
 801310e:	b087      	sub	sp, #28
 8013110:	af00      	add	r7, sp, #0
 8013112:	60f8      	str	r0, [r7, #12]
 8013114:	60b9      	str	r1, [r7, #8]
 8013116:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8013118:	f04f 0300 	mov.w	r3, #0
 801311c:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8013122:	e00d      	b.n	8013140 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	1d1a      	adds	r2, r3, #4
 8013128:	60fa      	str	r2, [r7, #12]
 801312a:	edd3 7a00 	vldr	s15, [r3]
 801312e:	ed97 7a04 	vldr	s14, [r7, #16]
 8013132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013136:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	3b01      	subs	r3, #1
 801313e:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d1ee      	bne.n	8013124 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	ee07 3a90 	vmov	s15, r3
 801314c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013150:	edd7 6a04 	vldr	s13, [r7, #16]
 8013154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	edc3 7a00 	vstr	s15, [r3]
}
 801315e:	bf00      	nop
 8013160:	371c      	adds	r7, #28
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr

0801316a <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 801316a:	b580      	push	{r7, lr}
 801316c:	b08a      	sub	sp, #40	@ 0x28
 801316e:	af00      	add	r7, sp, #0
 8013170:	60f8      	str	r0, [r7, #12]
 8013172:	60b9      	str	r1, [r7, #8]
 8013174:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8013176:	f04f 0300 	mov.w	r3, #0
 801317a:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8013180:	e011      	b.n	80131a6 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	1d1a      	adds	r2, r3, #4
 8013186:	60fa      	str	r2, [r7, #12]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 801318c:	edd7 7a07 	vldr	s15, [r7, #28]
 8013190:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013194:	ed97 7a08 	vldr	s14, [r7, #32]
 8013198:	ee77 7a27 	vadd.f32	s15, s14, s15
 801319c:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 80131a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a2:	3b01      	subs	r3, #1
 80131a4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 80131a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d1ea      	bne.n	8013182 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	ee07 3a90 	vmov	s15, r3
 80131b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80131b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80131ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131be:	edc7 7a06 	vstr	s15, [r7, #24]
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 80131c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80131ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80131ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d2:	db09      	blt.n	80131e8 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 80131d4:	ed97 0a06 	vldr	s0, [r7, #24]
 80131d8:	f007 f9e4 	bl	801a5a4 <sqrtf>
 80131dc:	eef0 7a40 	vmov.f32	s15, s0
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80131e6:	e004      	b.n	80131f2 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	f04f 0200 	mov.w	r2, #0
 80131ee:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80131f0:	bf00      	nop
}
 80131f2:	bf00      	nop
 80131f4:	3728      	adds	r7, #40	@ 0x28
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}

080131fa <arm_var_f32>:
#else
void arm_var_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 80131fa:	b480      	push	{r7}
 80131fc:	b08b      	sub	sp, #44	@ 0x2c
 80131fe:	af00      	add	r7, sp, #0
 8013200:	60f8      	str	r0, [r7, #12]
 8013202:	60b9      	str	r1, [r7, #8]
 8013204:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8013206:	f04f 0300 	mov.w	r3, #0
 801320a:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 801320c:	f04f 0300 	mov.w	r3, #0
 8013210:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
  const float32_t * pInput = pSrc;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	61bb      	str	r3, [r7, #24]

  if (blockSize <= 1U)
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	2b01      	cmp	r3, #1
 801321a:	d804      	bhi.n	8013226 <arm_var_f32+0x2c>
  {
    *pResult = 0;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f04f 0200 	mov.w	r2, #0
 8013222:	601a      	str	r2, [r3, #0]
    return;
 8013224:	e04e      	b.n	80132c4 <arm_var_f32+0xca>
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801322a:	e00d      	b.n	8013248 <arm_var_f32+0x4e>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */

    sum += *pInput++;
 801322c:	69bb      	ldr	r3, [r7, #24]
 801322e:	1d1a      	adds	r2, r3, #4
 8013230:	61ba      	str	r2, [r7, #24]
 8013232:	edd3 7a00 	vldr	s15, [r3]
 8013236:	ed97 7a08 	vldr	s14, [r7, #32]
 801323a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801323e:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8013242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013244:	3b01      	subs	r3, #1
 8013246:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 8013248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801324a:	2b00      	cmp	r3, #0
 801324c:	d1ee      	bne.n	801322c <arm_var_f32+0x32>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  fMean = sum / (float32_t) blockSize;
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	ee07 3a90 	vmov	s15, r3
 8013254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013258:	edd7 6a08 	vldr	s13, [r7, #32]
 801325c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013260:	edc7 7a05 	vstr	s15, [r7, #20]

  pInput = pSrc;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	61bb      	str	r3, [r7, #24]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801326c:	e017      	b.n	801329e <arm_var_f32+0xa4>
  {
    fValue = *pInput++ - fMean;
 801326e:	69bb      	ldr	r3, [r7, #24]
 8013270:	1d1a      	adds	r2, r3, #4
 8013272:	61ba      	str	r2, [r7, #24]
 8013274:	ed93 7a00 	vldr	s14, [r3]
 8013278:	edd7 7a05 	vldr	s15, [r7, #20]
 801327c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013280:	edc7 7a04 	vstr	s15, [r7, #16]
    fSum += fValue * fValue;
 8013284:	edd7 7a04 	vldr	s15, [r7, #16]
 8013288:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801328c:	ed97 7a07 	vldr	s14, [r7, #28]
 8013290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013294:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement loop counter */
    blkCnt--;
 8013298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801329a:	3b01      	subs	r3, #1
 801329c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 801329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d1e4      	bne.n	801326e <arm_var_f32+0x74>
  }

  /* Variance */
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	ee07 3a90 	vmov	s15, r3
 80132aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80132b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80132b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80132ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	edc3 7a00 	vstr	s15, [r3]
}
 80132c4:	372c      	adds	r7, #44	@ 0x2c
 80132c6:	46bd      	mov	sp, r7
 80132c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132cc:	4770      	bx	lr

080132ce <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80132ce:	b480      	push	{r7}
 80132d0:	b089      	sub	sp, #36	@ 0x24
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	60f8      	str	r0, [r7, #12]
 80132d6:	460b      	mov	r3, r1
 80132d8:	607a      	str	r2, [r7, #4]
 80132da:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80132dc:	2300      	movs	r3, #0
 80132de:	61fb      	str	r3, [r7, #28]
 80132e0:	e043      	b.n	801336a <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	005b      	lsls	r3, r3, #1
 80132e6:	687a      	ldr	r2, [r7, #4]
 80132e8:	4413      	add	r3, r2
 80132ea:	881b      	ldrh	r3, [r3, #0]
 80132ec:	089b      	lsrs	r3, r3, #2
 80132ee:	b29b      	uxth	r3, r3
 80132f0:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	3301      	adds	r3, #1
 80132f6:	005b      	lsls	r3, r3, #1
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	4413      	add	r3, r2
 80132fc:	881b      	ldrh	r3, [r3, #0]
 80132fe:	089b      	lsrs	r3, r3, #2
 8013300:	b29b      	uxth	r3, r3
 8013302:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8013304:	69bb      	ldr	r3, [r7, #24]
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	4413      	add	r3, r2
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	009b      	lsls	r3, r3, #2
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	441a      	add	r2, r3
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	009b      	lsls	r3, r3, #2
 801331c:	68f9      	ldr	r1, [r7, #12]
 801331e:	440b      	add	r3, r1
 8013320:	6812      	ldr	r2, [r2, #0]
 8013322:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	68fa      	ldr	r2, [r7, #12]
 801332a:	4413      	add	r3, r2
 801332c:	693a      	ldr	r2, [r7, #16]
 801332e:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8013330:	69bb      	ldr	r3, [r7, #24]
 8013332:	3301      	adds	r3, #1
 8013334:	009b      	lsls	r3, r3, #2
 8013336:	68fa      	ldr	r2, [r7, #12]
 8013338:	4413      	add	r3, r2
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	3301      	adds	r3, #1
 8013342:	009b      	lsls	r3, r3, #2
 8013344:	68fa      	ldr	r2, [r7, #12]
 8013346:	441a      	add	r2, r3
 8013348:	69bb      	ldr	r3, [r7, #24]
 801334a:	3301      	adds	r3, #1
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	68f9      	ldr	r1, [r7, #12]
 8013350:	440b      	add	r3, r1
 8013352:	6812      	ldr	r2, [r2, #0]
 8013354:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	3301      	adds	r3, #1
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	68fa      	ldr	r2, [r7, #12]
 801335e:	4413      	add	r3, r2
 8013360:	693a      	ldr	r2, [r7, #16]
 8013362:	601a      	str	r2, [r3, #0]

    i += 2;
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	3302      	adds	r3, #2
 8013368:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 801336a:	897b      	ldrh	r3, [r7, #10]
 801336c:	69fa      	ldr	r2, [r7, #28]
 801336e:	429a      	cmp	r2, r3
 8013370:	d3b7      	bcc.n	80132e2 <arm_bitreversal_32+0x14>
  }
}
 8013372:	bf00      	nop
 8013374:	bf00      	nop
 8013376:	3724      	adds	r7, #36	@ 0x24
 8013378:	46bd      	mov	sp, r7
 801337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337e:	4770      	bx	lr

08013380 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b0a0      	sub	sp, #128	@ 0x80
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	881b      	ldrh	r3, [r3, #0]
 801338e:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8013390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013392:	009b      	lsls	r3, r3, #2
 8013394:	683a      	ldr	r2, [r7, #0]
 8013396:	4413      	add	r3, r2
 8013398:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 80133a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80133a6:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 80133a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80133aa:	085b      	lsrs	r3, r3, #1
 80133ac:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80133ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	683a      	ldr	r2, [r7, #0]
 80133b4:	4413      	add	r3, r2
 80133b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 80133b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80133ba:	009b      	lsls	r3, r3, #2
 80133bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80133be:	4413      	add	r3, r2
 80133c0:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80133c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80133c4:	089b      	lsrs	r3, r3, #2
 80133c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80133c8:	e1b6      	b.n	8013738 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	689b      	ldr	r3, [r3, #8]
 80133da:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 80133e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 80133e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 80133ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80133f0:	689b      	ldr	r3, [r3, #8]
 80133f2:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 80133f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80133f6:	68db      	ldr	r3, [r3, #12]
 80133f8:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 80133fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8013400:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8013406:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013408:	689b      	ldr	r3, [r3, #8]
 801340a:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 801340c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 8013412:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8013418:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 801341e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013420:	689b      	ldr	r3, [r3, #8]
 8013422:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8013424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 801342a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 801342e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	1d1a      	adds	r2, r3, #4
 8013436:	603a      	str	r2, [r7, #0]
 8013438:	ee77 7a27 	vadd.f32	s15, s14, s15
 801343c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8013440:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8013444:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	1d1a      	adds	r2, r3, #4
 801344c:	603a      	str	r2, [r7, #0]
 801344e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013452:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8013456:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 801345a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	1d1a      	adds	r2, r3, #4
 8013462:	603a      	str	r2, [r7, #0]
 8013464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013468:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 801346c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8013470:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	1d1a      	adds	r2, r3, #4
 8013478:	603a      	str	r2, [r7, #0]
 801347a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801347e:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8013482:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8013486:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801348a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801348e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 8013492:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8013496:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801349a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801349e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 80134a2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80134a6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80134aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134ae:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80134b2:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80134b6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80134ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134be:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 80134c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80134c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80134ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80134cc:	1d1a      	adds	r2, r3, #4
 80134ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80134d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134d4:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80134d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80134dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80134e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80134e2:	1d1a      	adds	r2, r3, #4
 80134e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80134e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134ea:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80134ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80134f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80134f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80134f8:	1d1a      	adds	r2, r3, #4
 80134fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80134fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013500:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8013504:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8013508:	edd7 7a05 	vldr	s15, [r7, #20]
 801350c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801350e:	1d1a      	adds	r2, r3, #4
 8013510:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8013512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013516:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 801351a:	ed97 7a02 	vldr	s14, [r7, #8]
 801351e:	edd7 7a06 	vldr	s15, [r7, #24]
 8013522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013526:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 801352a:	ed97 7a03 	vldr	s14, [r7, #12]
 801352e:	edd7 7a07 	vldr	s15, [r7, #28]
 8013532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013536:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 801353a:	ed97 7a04 	vldr	s14, [r7, #16]
 801353e:	edd7 7a08 	vldr	s15, [r7, #32]
 8013542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013546:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 801354a:	ed97 7a05 	vldr	s14, [r7, #20]
 801354e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8013552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013556:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 801355a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801355c:	1d1a      	adds	r2, r3, #4
 801355e:	673a      	str	r2, [r7, #112]	@ 0x70
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8013564:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013566:	1d1a      	adds	r2, r3, #4
 8013568:	673a      	str	r2, [r7, #112]	@ 0x70
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 801356e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8013572:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8013576:	ee67 7a27 	vmul.f32	s15, s14, s15
 801357a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 801357e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8013582:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8013586:	ee67 7a27 	vmul.f32	s15, s14, s15
 801358a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 801358e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8013592:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8013596:	ee67 7a27 	vmul.f32	s15, s14, s15
 801359a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 801359e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80135a2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80135a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135aa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80135ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80135b0:	1d1a      	adds	r2, r3, #4
 80135b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80135b4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80135b8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80135bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135c0:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80135c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80135c6:	1d1a      	adds	r2, r3, #4
 80135c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80135ca:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80135ce:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80135d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135d6:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80135da:	edd7 7a02 	vldr	s15, [r7, #8]
 80135de:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80135e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135e6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 80135ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80135ee:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80135f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135f6:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 80135fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80135fe:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8013602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013606:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 801360a:	edd7 7a02 	vldr	s15, [r7, #8]
 801360e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8013612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013616:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 801361a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801361c:	1d1a      	adds	r2, r3, #4
 801361e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8013620:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8013624:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8013628:	ee77 7a67 	vsub.f32	s15, s14, s15
 801362c:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8013630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013632:	1d1a      	adds	r2, r3, #4
 8013634:	67ba      	str	r2, [r7, #120]	@ 0x78
 8013636:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801363a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 801363e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013642:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8013646:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013648:	1d1a      	adds	r2, r3, #4
 801364a:	673a      	str	r2, [r7, #112]	@ 0x70
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8013650:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013652:	1d1a      	adds	r2, r3, #4
 8013654:	673a      	str	r2, [r7, #112]	@ 0x70
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 801365a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801365e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8013662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013666:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 801366a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801366e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8013672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013676:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 801367a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801367e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8013682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013686:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 801368a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801368e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8013692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013696:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 801369a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801369c:	1d1a      	adds	r2, r3, #4
 801369e:	677a      	str	r2, [r7, #116]	@ 0x74
 80136a0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80136a4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80136a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136ac:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80136b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80136b2:	1d1a      	adds	r2, r3, #4
 80136b4:	677a      	str	r2, [r7, #116]	@ 0x74
 80136b6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80136ba:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80136be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136c2:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80136c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80136ca:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80136ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136d2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 80136d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80136da:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80136de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136e2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 80136e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80136ea:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80136ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136f2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 80136f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80136fa:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80136fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013702:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8013706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013708:	1d1a      	adds	r2, r3, #4
 801370a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801370c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8013710:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8013714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013718:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 801371c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801371e:	1d1a      	adds	r2, r3, #4
 8013720:	67ba      	str	r2, [r7, #120]	@ 0x78
 8013722:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013726:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 801372a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801372e:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8013732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013734:	3b01      	subs	r3, #1
 8013736:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801373a:	2b00      	cmp	r3, #0
 801373c:	f47f ae45 	bne.w	80133ca <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8013740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013742:	b299      	uxth	r1, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	685a      	ldr	r2, [r3, #4]
 8013748:	2302      	movs	r3, #2
 801374a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801374c:	f000 fef6 	bl	801453c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8013750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013752:	b299      	uxth	r1, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	685a      	ldr	r2, [r3, #4]
 8013758:	2302      	movs	r3, #2
 801375a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801375c:	f000 feee 	bl	801453c <arm_radix8_butterfly_f32>
}
 8013760:	bf00      	nop
 8013762:	3780      	adds	r7, #128	@ 0x80
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b0ac      	sub	sp, #176	@ 0xb0
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
 8013770:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	881b      	ldrh	r3, [r3, #0]
 8013776:	085b      	lsrs	r3, r3, #1
 8013778:	b29b      	uxth	r3, r3
 801377a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 801377e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013782:	009b      	lsls	r3, r3, #2
 8013784:	683a      	ldr	r2, [r7, #0]
 8013786:	4413      	add	r3, r2
 8013788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 801378c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013796:	4413      	add	r3, r2
 8013798:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 801379c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80137a0:	009b      	lsls	r3, r3, #2
 80137a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80137a6:	4413      	add	r3, r2
 80137a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 80137b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80137b4:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 80137b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80137ba:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 80137bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80137c0:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80137c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80137c6:	3b04      	subs	r3, #4
 80137c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 80137cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80137d0:	3b04      	subs	r3, #4
 80137d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 80137d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80137da:	3b04      	subs	r3, #4
 80137dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 80137e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80137ea:	4413      	add	r3, r2
 80137ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80137f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80137fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013800:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 8013808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801380c:	085b      	lsrs	r3, r3, #1
 801380e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8013812:	2302      	movs	r3, #2
 8013814:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 8013816:	2304      	movs	r3, #4
 8013818:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 801381a:	2306      	movs	r3, #6
 801381c:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	ed93 7a00 	vldr	s14, [r3]
 8013824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013828:	edd3 7a00 	vldr	s15, [r3]
 801382c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013830:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	ed93 7a00 	vldr	s14, [r3]
 801383a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801383e:	edd3 7a00 	vldr	s15, [r3]
 8013842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013846:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	3304      	adds	r3, #4
 801384e:	ed93 7a00 	vldr	s14, [r3]
 8013852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013856:	3304      	adds	r3, #4
 8013858:	edd3 7a00 	vldr	s15, [r3]
 801385c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013860:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	3304      	adds	r3, #4
 8013868:	ed93 7a00 	vldr	s14, [r3]
 801386c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013870:	3304      	adds	r3, #4
 8013872:	edd3 7a00 	vldr	s15, [r3]
 8013876:	ee77 7a67 	vsub.f32	s15, s14, s15
 801387a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 801387e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013882:	3304      	adds	r3, #4
 8013884:	ed93 7a00 	vldr	s14, [r3]
 8013888:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 801388c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013890:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013894:	3304      	adds	r3, #4
 8013896:	edd3 7a00 	vldr	s15, [r3]
 801389a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801389e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80138a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80138a6:	edd3 7a00 	vldr	s15, [r3]
 80138aa:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80138ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80138b6:	edd3 7a00 	vldr	s15, [r3]
 80138ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138be:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80138c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80138c6:	edd3 7a00 	vldr	s15, [r3]
 80138ca:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80138ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80138d6:	edd3 7a00 	vldr	s15, [r3]
 80138da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138de:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80138e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80138e6:	3304      	adds	r3, #4
 80138e8:	edd3 7a00 	vldr	s15, [r3]
 80138ec:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80138f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80138f8:	3304      	adds	r3, #4
 80138fa:	edd3 7a00 	vldr	s15, [r3]
 80138fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013902:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8013906:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801390a:	3304      	adds	r3, #4
 801390c:	edd3 7a00 	vldr	s15, [r3]
 8013910:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8013914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013918:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801391c:	3304      	adds	r3, #4
 801391e:	edd3 7a00 	vldr	s15, [r3]
 8013922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013926:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 801392a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801392e:	ed93 7a00 	vldr	s14, [r3]
 8013932:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013936:	ee37 7a27 	vadd.f32	s14, s14, s15
 801393a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801393e:	edd3 7a00 	vldr	s15, [r3]
 8013942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013946:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 801394a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801394e:	ed93 7a00 	vldr	s14, [r3]
 8013952:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8013956:	ee37 7a27 	vadd.f32	s14, s14, s15
 801395a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801395e:	edd3 7a00 	vldr	s15, [r3]
 8013962:	683b      	ldr	r3, [r7, #0]
 8013964:	1d1a      	adds	r2, r3, #4
 8013966:	603a      	str	r2, [r7, #0]
 8013968:	ee77 7a27 	vadd.f32	s15, s14, s15
 801396c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8013970:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013974:	3304      	adds	r3, #4
 8013976:	ed93 7a00 	vldr	s14, [r3]
 801397a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 801397e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013982:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013986:	3304      	adds	r3, #4
 8013988:	edd3 7a00 	vldr	s15, [r3]
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	1d1a      	adds	r2, r3, #4
 8013990:	603a      	str	r2, [r7, #0]
 8013992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013996:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 801399a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801399e:	1d1a      	adds	r2, r3, #4
 80139a0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80139a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80139a6:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80139a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80139ac:	1d1a      	adds	r2, r3, #4
 80139ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80139b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139b4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80139b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80139ba:	1d1a      	adds	r2, r3, #4
 80139bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80139c0:	69fa      	ldr	r2, [r7, #28]
 80139c2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80139c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80139c8:	1d1a      	adds	r2, r3, #4
 80139ca:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80139ce:	6a3a      	ldr	r2, [r7, #32]
 80139d0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80139d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80139d6:	1d1a      	adds	r2, r3, #4
 80139d8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80139dc:	68fa      	ldr	r2, [r7, #12]
 80139de:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80139e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80139e4:	1d1a      	adds	r2, r3, #4
 80139e6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80139ea:	693a      	ldr	r2, [r7, #16]
 80139ec:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80139ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80139f0:	009b      	lsls	r3, r3, #2
 80139f2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80139f6:	4413      	add	r3, r2
 80139f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 80139fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013a04:	4413      	add	r3, r2
 8013a06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8013a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a0c:	009b      	lsls	r3, r3, #2
 8013a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013a12:	4413      	add	r3, r2
 8013a14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8013a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013a1c:	3b02      	subs	r3, #2
 8013a1e:	085b      	lsrs	r3, r3, #1
 8013a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013a24:	e31c      	b.n	8014060 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	ed93 7a00 	vldr	s14, [r3]
 8013a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013a30:	edd3 7a00 	vldr	s15, [r3]
 8013a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a38:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	ed93 7a00 	vldr	s14, [r3]
 8013a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013a46:	edd3 7a00 	vldr	s15, [r3]
 8013a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a4e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	3304      	adds	r3, #4
 8013a56:	ed93 7a00 	vldr	s14, [r3]
 8013a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013a5e:	3304      	adds	r3, #4
 8013a60:	edd3 7a00 	vldr	s15, [r3]
 8013a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a68:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	3304      	adds	r3, #4
 8013a70:	ed93 7a00 	vldr	s14, [r3]
 8013a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013a78:	3304      	adds	r3, #4
 8013a7a:	edd3 7a00 	vldr	s15, [r3]
 8013a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a82:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8013a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a8a:	3304      	adds	r3, #4
 8013a8c:	ed93 7a00 	vldr	s14, [r3]
 8013a90:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8013a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013a9c:	3304      	adds	r3, #4
 8013a9e:	edd3 7a00 	vldr	s15, [r3]
 8013aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013aa6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8013aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013aae:	edd3 7a00 	vldr	s15, [r3]
 8013ab2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8013ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013abe:	edd3 7a00 	vldr	s15, [r3]
 8013ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ac6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8013aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ace:	edd3 7a00 	vldr	s15, [r3]
 8013ad2:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8013ad6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013ade:	edd3 7a00 	vldr	s15, [r3]
 8013ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8013aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013aee:	3304      	adds	r3, #4
 8013af0:	edd3 7a00 	vldr	s15, [r3]
 8013af4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8013af8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b00:	3304      	adds	r3, #4
 8013b02:	edd3 7a00 	vldr	s15, [r3]
 8013b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b0a:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8013b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013b12:	3304      	adds	r3, #4
 8013b14:	edd3 7a00 	vldr	s15, [r3]
 8013b18:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8013b1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b24:	3304      	adds	r3, #4
 8013b26:	edd3 7a00 	vldr	s15, [r3]
 8013b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b2e:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8013b32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013b36:	ed93 7a00 	vldr	s14, [r3]
 8013b3a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b46:	edd3 7a00 	vldr	s15, [r3]
 8013b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b4e:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8013b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013b56:	ed93 7a00 	vldr	s14, [r3]
 8013b5a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8013b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b66:	edd3 7a00 	vldr	s15, [r3]
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	1d1a      	adds	r2, r3, #4
 8013b6e:	603a      	str	r2, [r7, #0]
 8013b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b74:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8013b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013b7c:	3304      	adds	r3, #4
 8013b7e:	ed93 7a00 	vldr	s14, [r3]
 8013b82:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8013b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b8e:	3304      	adds	r3, #4
 8013b90:	edd3 7a00 	vldr	s15, [r3]
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	1d1a      	adds	r2, r3, #4
 8013b98:	603a      	str	r2, [r7, #0]
 8013b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b9e:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8013ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013ba6:	3b04      	subs	r3, #4
 8013ba8:	ed93 7a00 	vldr	s14, [r3]
 8013bac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013bb0:	3b04      	subs	r3, #4
 8013bb2:	edd3 7a00 	vldr	s15, [r3]
 8013bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bba:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8013bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013bc2:	3b04      	subs	r3, #4
 8013bc4:	ed93 7a00 	vldr	s14, [r3]
 8013bc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013bcc:	3b04      	subs	r3, #4
 8013bce:	edd3 7a00 	vldr	s15, [r3]
 8013bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013bd6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8013bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013bde:	ed93 7a00 	vldr	s14, [r3]
 8013be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013be6:	edd3 7a00 	vldr	s15, [r3]
 8013bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bee:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8013bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013bf6:	ed93 7a00 	vldr	s14, [r3]
 8013bfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013bfe:	edd3 7a00 	vldr	s15, [r3]
 8013c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c06:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8013c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013c0e:	ed93 7a00 	vldr	s14, [r3]
 8013c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c16:	edd3 7a00 	vldr	s15, [r3]
 8013c1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c1e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c26:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8013c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013c2e:	ed93 7a00 	vldr	s14, [r3]
 8013c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013c36:	edd3 7a00 	vldr	s15, [r3]
 8013c3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013c42:	3b04      	subs	r3, #4
 8013c44:	edd3 7a00 	vldr	s15, [r3]
 8013c48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c50:	3b04      	subs	r3, #4
 8013c52:	edd3 7a00 	vldr	s15, [r3]
 8013c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c5a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8013c5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013c62:	3b04      	subs	r3, #4
 8013c64:	edd3 7a00 	vldr	s15, [r3]
 8013c68:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8013c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c74:	3b04      	subs	r3, #4
 8013c76:	edd3 7a00 	vldr	s15, [r3]
 8013c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8013c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013c86:	edd3 7a00 	vldr	s15, [r3]
 8013c8a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8013c8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c96:	edd3 7a00 	vldr	s15, [r3]
 8013c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c9e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8013ca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013ca6:	ed93 7a00 	vldr	s14, [r3]
 8013caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cae:	edd3 7a00 	vldr	s15, [r3]
 8013cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013cb6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cbe:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8013cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cc6:	3b04      	subs	r3, #4
 8013cc8:	ed93 7a00 	vldr	s14, [r3]
 8013ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013cd0:	3b04      	subs	r3, #4
 8013cd2:	edd3 7a00 	vldr	s15, [r3]
 8013cd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013cda:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8013cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ce2:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8013ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013cea:	ed93 7a00 	vldr	s14, [r3]
 8013cee:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8013cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cfa:	edd3 7a00 	vldr	s15, [r3]
 8013cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013d02:	1f1a      	subs	r2, r3, #4
 8013d04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8013d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d0c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8013d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013d14:	3b04      	subs	r3, #4
 8013d16:	ed93 7a00 	vldr	s14, [r3]
 8013d1a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8013d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d26:	3b04      	subs	r3, #4
 8013d28:	edd3 7a00 	vldr	s15, [r3]
 8013d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013d30:	1f1a      	subs	r2, r3, #4
 8013d32:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8013d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d3a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8013d3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013d42:	1d1a      	adds	r2, r3, #4
 8013d44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8013d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013d50:	1d1a      	adds	r2, r3, #4
 8013d52:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8013d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8013d5e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d66:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8013d6a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013d6e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d76:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8013d7a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8013d7e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d86:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 8013d8a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8013d8e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d96:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 8013d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d9e:	1d1a      	adds	r2, r3, #4
 8013da0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8013da4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8013da8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013db0:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8013db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013db8:	1d1a      	adds	r2, r3, #4
 8013dba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8013dbe:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8013dc2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dca:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8013dce:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8013dd2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dda:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 8013dde:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8013de2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dea:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 8013dee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8013df2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dfa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 8013dfe:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8013e02:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e0a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 8013e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013e12:	1f1a      	subs	r2, r3, #4
 8013e14:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8013e18:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8013e1c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e24:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8013e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013e2c:	1f1a      	subs	r2, r3, #4
 8013e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8013e32:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8013e36:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e3e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8013e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8013e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013e4e:	3304      	adds	r3, #4
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8013e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e56:	009b      	lsls	r3, r3, #2
 8013e58:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013e5c:	4413      	add	r3, r2
 8013e5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8013e62:	edd7 7a07 	vldr	s15, [r7, #28]
 8013e66:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e6e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8013e72:	edd7 7a08 	vldr	s15, [r7, #32]
 8013e76:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e7e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8013e82:	edd7 7a08 	vldr	s15, [r7, #32]
 8013e86:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e8e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8013e92:	edd7 7a07 	vldr	s15, [r7, #28]
 8013e96:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e9e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8013ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013ea6:	1d1a      	adds	r2, r3, #4
 8013ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013eac:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8013eb0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013eb8:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8013ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013ec0:	1d1a      	adds	r2, r3, #4
 8013ec2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8013ec6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8013eca:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ed2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8013ed6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8013eda:	eef1 7a67 	vneg.f32	s15, s15
 8013ede:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ee6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 8013eea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8013eee:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ef6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8013efa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8013efe:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f06:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8013f0a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8013f0e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f16:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8013f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013f1e:	1f1a      	subs	r2, r3, #4
 8013f20:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013f24:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8013f28:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f30:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8013f34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013f38:	1f1a      	subs	r2, r3, #4
 8013f3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8013f3e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8013f42:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8013f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f4a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8013f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 8013f56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013f5a:	3304      	adds	r3, #4
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8013f60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013f62:	009b      	lsls	r3, r3, #2
 8013f64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013f68:	4413      	add	r3, r2
 8013f6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8013f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8013f72:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f7a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8013f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8013f82:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f8a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8013f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8013f92:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f9a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 8013f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8013fa2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013faa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 8013fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013fb2:	1d1a      	adds	r2, r3, #4
 8013fb4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8013fb8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8013fbc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fc4:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8013fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013fcc:	1d1a      	adds	r2, r3, #4
 8013fce:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8013fd2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8013fd6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fde:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8013fe2:	edd7 7a06 	vldr	s15, [r7, #24]
 8013fe6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fee:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 8013ff2:	edd7 7a05 	vldr	s15, [r7, #20]
 8013ff6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8013ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ffe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 8014002:	edd7 7a05 	vldr	s15, [r7, #20]
 8014006:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801400e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 8014012:	edd7 7a06 	vldr	s15, [r7, #24]
 8014016:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 801401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801401e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 8014022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014026:	1f1a      	subs	r2, r3, #4
 8014028:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801402c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8014030:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8014034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014038:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 801403c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014040:	1f1a      	subs	r2, r3, #4
 8014042:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8014046:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 801404a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801404e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014052:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8014056:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801405a:	3b01      	subs	r3, #1
 801405c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014060:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014064:	2b00      	cmp	r3, #0
 8014066:	f47f acde 	bne.w	8013a26 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	ed93 7a00 	vldr	s14, [r3]
 8014070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014074:	edd3 7a00 	vldr	s15, [r3]
 8014078:	ee77 7a27 	vadd.f32	s15, s14, s15
 801407c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	ed93 7a00 	vldr	s14, [r3]
 8014086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801408a:	edd3 7a00 	vldr	s15, [r3]
 801408e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014092:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	3304      	adds	r3, #4
 801409a:	ed93 7a00 	vldr	s14, [r3]
 801409e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80140a2:	3304      	adds	r3, #4
 80140a4:	edd3 7a00 	vldr	s15, [r3]
 80140a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140ac:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	3304      	adds	r3, #4
 80140b4:	ed93 7a00 	vldr	s14, [r3]
 80140b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80140bc:	3304      	adds	r3, #4
 80140be:	edd3 7a00 	vldr	s15, [r3]
 80140c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140c6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80140ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80140ce:	3304      	adds	r3, #4
 80140d0:	ed93 7a00 	vldr	s14, [r3]
 80140d4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80140d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80140dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80140e0:	3304      	adds	r3, #4
 80140e2:	edd3 7a00 	vldr	s15, [r3]
 80140e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140ea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80140ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80140f2:	edd3 7a00 	vldr	s15, [r3]
 80140f6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80140fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80140fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014102:	edd3 7a00 	vldr	s15, [r3]
 8014106:	ee77 7a27 	vadd.f32	s15, s14, s15
 801410a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 801410e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014112:	edd3 7a00 	vldr	s15, [r3]
 8014116:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 801411a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801411e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014122:	edd3 7a00 	vldr	s15, [r3]
 8014126:	ee77 7a67 	vsub.f32	s15, s14, s15
 801412a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 801412e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014132:	3304      	adds	r3, #4
 8014134:	edd3 7a00 	vldr	s15, [r3]
 8014138:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 801413c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014140:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014144:	3304      	adds	r3, #4
 8014146:	edd3 7a00 	vldr	s15, [r3]
 801414a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801414e:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8014152:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014156:	3304      	adds	r3, #4
 8014158:	edd3 7a00 	vldr	s15, [r3]
 801415c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8014160:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014168:	3304      	adds	r3, #4
 801416a:	edd3 7a00 	vldr	s15, [r3]
 801416e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014172:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8014176:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801417a:	ed93 7a00 	vldr	s14, [r3]
 801417e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8014182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014186:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801418a:	edd3 7a00 	vldr	s15, [r3]
 801418e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014192:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8014196:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801419a:	ed93 7a00 	vldr	s14, [r3]
 801419e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80141a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80141a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80141aa:	edd3 7a00 	vldr	s15, [r3]
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	1d1a      	adds	r2, r3, #4
 80141b2:	603a      	str	r2, [r7, #0]
 80141b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80141b8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80141bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80141c0:	3304      	adds	r3, #4
 80141c2:	ed93 7a00 	vldr	s14, [r3]
 80141c6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80141ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80141ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80141d2:	3304      	adds	r3, #4
 80141d4:	edd3 7a00 	vldr	s15, [r3]
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	1d1a      	adds	r2, r3, #4
 80141dc:	603a      	str	r2, [r7, #0]
 80141de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80141e2:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80141e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 80141ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80141f2:	3304      	adds	r3, #4
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 80141f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80141fc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8014200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014204:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8014208:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801420c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8014210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014214:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 8014218:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801421c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8014220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014224:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 8014228:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801422c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8014230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014234:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 8014238:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801423c:	1d1a      	adds	r2, r3, #4
 801423e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8014242:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8014246:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 801424a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801424e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8014252:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014256:	1d1a      	adds	r2, r3, #4
 8014258:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801425c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8014260:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8014264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014268:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 801426c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8014274:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014278:	3304      	adds	r3, #4
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 801427e:	edd7 7a07 	vldr	s15, [r7, #28]
 8014282:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8014286:	ee67 7a27 	vmul.f32	s15, s14, s15
 801428a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 801428e:	edd7 7a08 	vldr	s15, [r7, #32]
 8014292:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8014296:	ee67 7a27 	vmul.f32	s15, s14, s15
 801429a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 801429e:	edd7 7a08 	vldr	s15, [r7, #32]
 80142a2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80142a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80142aa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 80142ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80142b2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80142b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80142ba:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 80142be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80142c2:	1d1a      	adds	r2, r3, #4
 80142c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80142c8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80142cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80142d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142d4:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80142d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80142dc:	1d1a      	adds	r2, r3, #4
 80142de:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80142e2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80142e6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80142ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142ee:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 80142f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 80142fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80142fe:	3304      	adds	r3, #4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 8014304:	edd7 7a03 	vldr	s15, [r7, #12]
 8014308:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 801430c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014310:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 8014314:	edd7 7a04 	vldr	s15, [r7, #16]
 8014318:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801431c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014320:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 8014324:	edd7 7a04 	vldr	s15, [r7, #16]
 8014328:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 801432c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014330:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 8014334:	edd7 7a03 	vldr	s15, [r7, #12]
 8014338:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801433c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014340:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 8014344:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014348:	1d1a      	adds	r2, r3, #4
 801434a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 801434e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8014352:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8014356:	ee77 7a27 	vadd.f32	s15, s14, s15
 801435a:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 801435e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014362:	1d1a      	adds	r2, r3, #4
 8014364:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8014368:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 801436c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8014370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014374:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8014378:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801437c:	b299      	uxth	r1, r3
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	685a      	ldr	r2, [r3, #4]
 8014382:	2304      	movs	r3, #4
 8014384:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8014386:	f000 f8d9 	bl	801453c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 801438a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801438e:	b299      	uxth	r1, r3
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	685a      	ldr	r2, [r3, #4]
 8014394:	2304      	movs	r3, #4
 8014396:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8014398:	f000 f8d0 	bl	801453c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 801439c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143a0:	b299      	uxth	r1, r3
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	685a      	ldr	r2, [r3, #4]
 80143a6:	2304      	movs	r3, #4
 80143a8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80143aa:	f000 f8c7 	bl	801453c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80143ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143b2:	b299      	uxth	r1, r3
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	685a      	ldr	r2, [r3, #4]
 80143b8:	2304      	movs	r3, #4
 80143ba:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80143bc:	f000 f8be 	bl	801453c <arm_radix8_butterfly_f32>
}
 80143c0:	bf00      	nop
 80143c2:	37b0      	adds	r7, #176	@ 0xb0
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b088      	sub	sp, #32
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	60f8      	str	r0, [r7, #12]
 80143d0:	60b9      	str	r1, [r7, #8]
 80143d2:	4611      	mov	r1, r2
 80143d4:	461a      	mov	r2, r3
 80143d6:	460b      	mov	r3, r1
 80143d8:	71fb      	strb	r3, [r7, #7]
 80143da:	4613      	mov	r3, r2
 80143dc:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	881b      	ldrh	r3, [r3, #0]
 80143e2:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80143e4:	79fb      	ldrb	r3, [r7, #7]
 80143e6:	2b01      	cmp	r3, #1
 80143e8:	d117      	bne.n	801441a <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	3304      	adds	r3, #4
 80143ee:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80143f0:	2300      	movs	r3, #0
 80143f2:	61fb      	str	r3, [r7, #28]
 80143f4:	e00d      	b.n	8014412 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	edd3 7a00 	vldr	s15, [r3]
 80143fc:	eef1 7a67 	vneg.f32	s15, s15
 8014400:	69bb      	ldr	r3, [r7, #24]
 8014402:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8014406:	69bb      	ldr	r3, [r7, #24]
 8014408:	3308      	adds	r3, #8
 801440a:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	3301      	adds	r3, #1
 8014410:	61fb      	str	r3, [r7, #28]
 8014412:	69fa      	ldr	r2, [r7, #28]
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	429a      	cmp	r2, r3
 8014418:	d3ed      	bcc.n	80143f6 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014420:	d040      	beq.n	80144a4 <arm_cfft_f32+0xdc>
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014428:	d845      	bhi.n	80144b6 <arm_cfft_f32+0xee>
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014430:	d033      	beq.n	801449a <arm_cfft_f32+0xd2>
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014438:	d83d      	bhi.n	80144b6 <arm_cfft_f32+0xee>
 801443a:	697b      	ldr	r3, [r7, #20]
 801443c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014440:	d026      	beq.n	8014490 <arm_cfft_f32+0xc8>
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014448:	d835      	bhi.n	80144b6 <arm_cfft_f32+0xee>
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014450:	d028      	beq.n	80144a4 <arm_cfft_f32+0xdc>
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014458:	d82d      	bhi.n	80144b6 <arm_cfft_f32+0xee>
 801445a:	697b      	ldr	r3, [r7, #20]
 801445c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014460:	d01b      	beq.n	801449a <arm_cfft_f32+0xd2>
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014468:	d825      	bhi.n	80144b6 <arm_cfft_f32+0xee>
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	2b80      	cmp	r3, #128	@ 0x80
 801446e:	d00f      	beq.n	8014490 <arm_cfft_f32+0xc8>
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	2b80      	cmp	r3, #128	@ 0x80
 8014474:	d81f      	bhi.n	80144b6 <arm_cfft_f32+0xee>
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	2b40      	cmp	r3, #64	@ 0x40
 801447a:	d013      	beq.n	80144a4 <arm_cfft_f32+0xdc>
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	2b40      	cmp	r3, #64	@ 0x40
 8014480:	d819      	bhi.n	80144b6 <arm_cfft_f32+0xee>
 8014482:	697b      	ldr	r3, [r7, #20]
 8014484:	2b10      	cmp	r3, #16
 8014486:	d003      	beq.n	8014490 <arm_cfft_f32+0xc8>
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	2b20      	cmp	r3, #32
 801448c:	d005      	beq.n	801449a <arm_cfft_f32+0xd2>
 801448e:	e012      	b.n	80144b6 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8014490:	68b9      	ldr	r1, [r7, #8]
 8014492:	68f8      	ldr	r0, [r7, #12]
 8014494:	f7fe ff74 	bl	8013380 <arm_cfft_radix8by2_f32>
    break;
 8014498:	e00d      	b.n	80144b6 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 801449a:	68b9      	ldr	r1, [r7, #8]
 801449c:	68f8      	ldr	r0, [r7, #12]
 801449e:	f7ff f963 	bl	8013768 <arm_cfft_radix8by4_f32>
    break;
 80144a2:	e008      	b.n	80144b6 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	b299      	uxth	r1, r3
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	685a      	ldr	r2, [r3, #4]
 80144ac:	2301      	movs	r3, #1
 80144ae:	68b8      	ldr	r0, [r7, #8]
 80144b0:	f000 f844 	bl	801453c <arm_radix8_butterfly_f32>
    break;
 80144b4:	bf00      	nop
  }

  if ( bitReverseFlag )
 80144b6:	79bb      	ldrb	r3, [r7, #6]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d007      	beq.n	80144cc <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	8999      	ldrh	r1, [r3, #12]
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	689b      	ldr	r3, [r3, #8]
 80144c4:	461a      	mov	r2, r3
 80144c6:	68b8      	ldr	r0, [r7, #8]
 80144c8:	f7fe ff01 	bl	80132ce <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80144cc:	79fb      	ldrb	r3, [r7, #7]
 80144ce:	2b01      	cmp	r3, #1
 80144d0:	d130      	bne.n	8014534 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	ee07 3a90 	vmov	s15, r3
 80144d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80144dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80144e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144e4:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80144ec:	2300      	movs	r3, #0
 80144ee:	61fb      	str	r3, [r7, #28]
 80144f0:	e01c      	b.n	801452c <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	1d1a      	adds	r2, r3, #4
 80144f6:	61ba      	str	r2, [r7, #24]
 80144f8:	ed93 7a00 	vldr	s14, [r3]
 80144fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8014500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014504:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8014508:	69bb      	ldr	r3, [r7, #24]
 801450a:	edd3 7a00 	vldr	s15, [r3]
 801450e:	eeb1 7a67 	vneg.f32	s14, s15
 8014512:	edd7 7a04 	vldr	s15, [r7, #16]
 8014516:	ee67 7a27 	vmul.f32	s15, s14, s15
 801451a:	69bb      	ldr	r3, [r7, #24]
 801451c:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8014520:	69bb      	ldr	r3, [r7, #24]
 8014522:	3304      	adds	r3, #4
 8014524:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	3301      	adds	r3, #1
 801452a:	61fb      	str	r3, [r7, #28]
 801452c:	69fa      	ldr	r2, [r7, #28]
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	429a      	cmp	r2, r3
 8014532:	d3de      	bcc.n	80144f2 <arm_cfft_f32+0x12a>
    }
  }
}
 8014534:	bf00      	nop
 8014536:	3720      	adds	r7, #32
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 801453c:	b480      	push	{r7}
 801453e:	b0bd      	sub	sp, #244	@ 0xf4
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	607a      	str	r2, [r7, #4]
 8014546:	461a      	mov	r2, r3
 8014548:	460b      	mov	r3, r1
 801454a:	817b      	strh	r3, [r7, #10]
 801454c:	4613      	mov	r3, r2
 801454e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8014550:	4b09      	ldr	r3, [pc, #36]	@ (8014578 <arm_radix8_butterfly_f32+0x3c>)
 8014552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 8014556:	897b      	ldrh	r3, [r7, #10]
 8014558:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 801455c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8014564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014568:	08db      	lsrs	r3, r3, #3
 801456a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 801456e:	2300      	movs	r3, #0
 8014570:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8014574:	e002      	b.n	801457c <arm_radix8_butterfly_f32+0x40>
 8014576:	bf00      	nop
 8014578:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 801457c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8014580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014584:	4413      	add	r3, r2
 8014586:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 801458a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014592:	4413      	add	r3, r2
 8014594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 8014598:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801459c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80145a0:	4413      	add	r3, r2
 80145a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 80145a6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80145aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80145ae:	4413      	add	r3, r2
 80145b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 80145b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80145b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80145bc:	4413      	add	r3, r2
 80145be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 80145c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80145c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80145ca:	4413      	add	r3, r2
 80145cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 80145d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80145d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80145d8:	4413      	add	r3, r2
 80145da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80145de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80145e2:	00db      	lsls	r3, r3, #3
 80145e4:	68fa      	ldr	r2, [r7, #12]
 80145e6:	4413      	add	r3, r2
 80145e8:	ed93 7a00 	vldr	s14, [r3]
 80145ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80145f0:	00db      	lsls	r3, r3, #3
 80145f2:	68fa      	ldr	r2, [r7, #12]
 80145f4:	4413      	add	r3, r2
 80145f6:	edd3 7a00 	vldr	s15, [r3]
 80145fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145fe:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8014602:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014606:	00db      	lsls	r3, r3, #3
 8014608:	68fa      	ldr	r2, [r7, #12]
 801460a:	4413      	add	r3, r2
 801460c:	ed93 7a00 	vldr	s14, [r3]
 8014610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014614:	00db      	lsls	r3, r3, #3
 8014616:	68fa      	ldr	r2, [r7, #12]
 8014618:	4413      	add	r3, r2
 801461a:	edd3 7a00 	vldr	s15, [r3]
 801461e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014622:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8014626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801462a:	00db      	lsls	r3, r3, #3
 801462c:	68fa      	ldr	r2, [r7, #12]
 801462e:	4413      	add	r3, r2
 8014630:	ed93 7a00 	vldr	s14, [r3]
 8014634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014638:	00db      	lsls	r3, r3, #3
 801463a:	68fa      	ldr	r2, [r7, #12]
 801463c:	4413      	add	r3, r2
 801463e:	edd3 7a00 	vldr	s15, [r3]
 8014642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014646:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 801464a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801464e:	00db      	lsls	r3, r3, #3
 8014650:	68fa      	ldr	r2, [r7, #12]
 8014652:	4413      	add	r3, r2
 8014654:	ed93 7a00 	vldr	s14, [r3]
 8014658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801465c:	00db      	lsls	r3, r3, #3
 801465e:	68fa      	ldr	r2, [r7, #12]
 8014660:	4413      	add	r3, r2
 8014662:	edd3 7a00 	vldr	s15, [r3]
 8014666:	ee77 7a67 	vsub.f32	s15, s14, s15
 801466a:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 801466e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	68fa      	ldr	r2, [r7, #12]
 8014676:	4413      	add	r3, r2
 8014678:	ed93 7a00 	vldr	s14, [r3]
 801467c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014680:	00db      	lsls	r3, r3, #3
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	4413      	add	r3, r2
 8014686:	edd3 7a00 	vldr	s15, [r3]
 801468a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801468e:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8014692:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8014696:	00db      	lsls	r3, r3, #3
 8014698:	68fa      	ldr	r2, [r7, #12]
 801469a:	4413      	add	r3, r2
 801469c:	ed93 7a00 	vldr	s14, [r3]
 80146a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80146a4:	00db      	lsls	r3, r3, #3
 80146a6:	68fa      	ldr	r2, [r7, #12]
 80146a8:	4413      	add	r3, r2
 80146aa:	edd3 7a00 	vldr	s15, [r3]
 80146ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146b2:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80146b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80146ba:	00db      	lsls	r3, r3, #3
 80146bc:	68fa      	ldr	r2, [r7, #12]
 80146be:	4413      	add	r3, r2
 80146c0:	ed93 7a00 	vldr	s14, [r3]
 80146c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80146c8:	00db      	lsls	r3, r3, #3
 80146ca:	68fa      	ldr	r2, [r7, #12]
 80146cc:	4413      	add	r3, r2
 80146ce:	edd3 7a00 	vldr	s15, [r3]
 80146d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146d6:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80146da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	68fa      	ldr	r2, [r7, #12]
 80146e2:	4413      	add	r3, r2
 80146e4:	ed93 7a00 	vldr	s14, [r3]
 80146e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80146ec:	00db      	lsls	r3, r3, #3
 80146ee:	68fa      	ldr	r2, [r7, #12]
 80146f0:	4413      	add	r3, r2
 80146f2:	edd3 7a00 	vldr	s15, [r3]
 80146f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146fa:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 80146fe:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8014702:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8014706:	ee77 7a67 	vsub.f32	s15, s14, s15
 801470a:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 801470e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8014712:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8014716:	ee77 7a27 	vadd.f32	s15, s14, s15
 801471a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 801471e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8014722:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8014726:	ee77 7a67 	vsub.f32	s15, s14, s15
 801472a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 801472e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8014732:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8014736:	ee77 7a27 	vadd.f32	s15, s14, s15
 801473a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 801473e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014742:	00db      	lsls	r3, r3, #3
 8014744:	68fa      	ldr	r2, [r7, #12]
 8014746:	4413      	add	r3, r2
 8014748:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 801474c:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8014750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014754:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8014758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801475c:	00db      	lsls	r3, r3, #3
 801475e:	68fa      	ldr	r2, [r7, #12]
 8014760:	4413      	add	r3, r2
 8014762:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8014766:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 801476a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801476e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8014772:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	3304      	adds	r3, #4
 801477a:	68fa      	ldr	r2, [r7, #12]
 801477c:	4413      	add	r3, r2
 801477e:	ed93 7a00 	vldr	s14, [r3]
 8014782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014786:	00db      	lsls	r3, r3, #3
 8014788:	3304      	adds	r3, #4
 801478a:	68fa      	ldr	r2, [r7, #12]
 801478c:	4413      	add	r3, r2
 801478e:	edd3 7a00 	vldr	s15, [r3]
 8014792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014796:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 801479a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801479e:	00db      	lsls	r3, r3, #3
 80147a0:	3304      	adds	r3, #4
 80147a2:	68fa      	ldr	r2, [r7, #12]
 80147a4:	4413      	add	r3, r2
 80147a6:	ed93 7a00 	vldr	s14, [r3]
 80147aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80147ae:	00db      	lsls	r3, r3, #3
 80147b0:	3304      	adds	r3, #4
 80147b2:	68fa      	ldr	r2, [r7, #12]
 80147b4:	4413      	add	r3, r2
 80147b6:	edd3 7a00 	vldr	s15, [r3]
 80147ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147be:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80147c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80147c6:	00db      	lsls	r3, r3, #3
 80147c8:	3304      	adds	r3, #4
 80147ca:	68fa      	ldr	r2, [r7, #12]
 80147cc:	4413      	add	r3, r2
 80147ce:	ed93 7a00 	vldr	s14, [r3]
 80147d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80147d6:	00db      	lsls	r3, r3, #3
 80147d8:	3304      	adds	r3, #4
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	4413      	add	r3, r2
 80147de:	edd3 7a00 	vldr	s15, [r3]
 80147e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147e6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80147ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80147ee:	00db      	lsls	r3, r3, #3
 80147f0:	3304      	adds	r3, #4
 80147f2:	68fa      	ldr	r2, [r7, #12]
 80147f4:	4413      	add	r3, r2
 80147f6:	ed93 7a00 	vldr	s14, [r3]
 80147fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80147fe:	00db      	lsls	r3, r3, #3
 8014800:	3304      	adds	r3, #4
 8014802:	68fa      	ldr	r2, [r7, #12]
 8014804:	4413      	add	r3, r2
 8014806:	edd3 7a00 	vldr	s15, [r3]
 801480a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801480e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8014812:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8014816:	00db      	lsls	r3, r3, #3
 8014818:	3304      	adds	r3, #4
 801481a:	68fa      	ldr	r2, [r7, #12]
 801481c:	4413      	add	r3, r2
 801481e:	ed93 7a00 	vldr	s14, [r3]
 8014822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014826:	00db      	lsls	r3, r3, #3
 8014828:	3304      	adds	r3, #4
 801482a:	68fa      	ldr	r2, [r7, #12]
 801482c:	4413      	add	r3, r2
 801482e:	edd3 7a00 	vldr	s15, [r3]
 8014832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014836:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 801483a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801483e:	00db      	lsls	r3, r3, #3
 8014840:	3304      	adds	r3, #4
 8014842:	68fa      	ldr	r2, [r7, #12]
 8014844:	4413      	add	r3, r2
 8014846:	ed93 7a00 	vldr	s14, [r3]
 801484a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801484e:	00db      	lsls	r3, r3, #3
 8014850:	3304      	adds	r3, #4
 8014852:	68fa      	ldr	r2, [r7, #12]
 8014854:	4413      	add	r3, r2
 8014856:	edd3 7a00 	vldr	s15, [r3]
 801485a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801485e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8014862:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014866:	00db      	lsls	r3, r3, #3
 8014868:	3304      	adds	r3, #4
 801486a:	68fa      	ldr	r2, [r7, #12]
 801486c:	4413      	add	r3, r2
 801486e:	ed93 7a00 	vldr	s14, [r3]
 8014872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014876:	00db      	lsls	r3, r3, #3
 8014878:	3304      	adds	r3, #4
 801487a:	68fa      	ldr	r2, [r7, #12]
 801487c:	4413      	add	r3, r2
 801487e:	edd3 7a00 	vldr	s15, [r3]
 8014882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014886:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 801488a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801488e:	00db      	lsls	r3, r3, #3
 8014890:	3304      	adds	r3, #4
 8014892:	68fa      	ldr	r2, [r7, #12]
 8014894:	4413      	add	r3, r2
 8014896:	ed93 7a00 	vldr	s14, [r3]
 801489a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801489e:	00db      	lsls	r3, r3, #3
 80148a0:	3304      	adds	r3, #4
 80148a2:	68fa      	ldr	r2, [r7, #12]
 80148a4:	4413      	add	r3, r2
 80148a6:	edd3 7a00 	vldr	s15, [r3]
 80148aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148ae:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 80148b2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80148b6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80148ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148be:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 80148c2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80148c6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80148ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148ce:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 80148d2:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80148d6:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80148da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148de:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 80148e2:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80148e6:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80148ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148ee:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80148f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80148f6:	00db      	lsls	r3, r3, #3
 80148f8:	3304      	adds	r3, #4
 80148fa:	68fa      	ldr	r2, [r7, #12]
 80148fc:	4413      	add	r3, r2
 80148fe:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8014902:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8014906:	ee77 7a27 	vadd.f32	s15, s14, s15
 801490a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 801490e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014912:	00db      	lsls	r3, r3, #3
 8014914:	3304      	adds	r3, #4
 8014916:	68fa      	ldr	r2, [r7, #12]
 8014918:	4413      	add	r3, r2
 801491a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 801491e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8014922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014926:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 801492a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801492e:	00db      	lsls	r3, r3, #3
 8014930:	68fa      	ldr	r2, [r7, #12]
 8014932:	4413      	add	r3, r2
 8014934:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8014938:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 801493c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014940:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8014944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014948:	00db      	lsls	r3, r3, #3
 801494a:	68fa      	ldr	r2, [r7, #12]
 801494c:	4413      	add	r3, r2
 801494e:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8014952:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8014956:	ee77 7a67 	vsub.f32	s15, s14, s15
 801495a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 801495e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8014962:	00db      	lsls	r3, r3, #3
 8014964:	3304      	adds	r3, #4
 8014966:	68fa      	ldr	r2, [r7, #12]
 8014968:	4413      	add	r3, r2
 801496a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 801496e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8014972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014976:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 801497a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801497e:	00db      	lsls	r3, r3, #3
 8014980:	3304      	adds	r3, #4
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	4413      	add	r3, r2
 8014986:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 801498a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 801498e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014992:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8014996:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 801499a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 801499e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149a2:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80149a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149aa:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 80149ae:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80149b2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80149b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149ba:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80149be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149c2:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 80149c6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80149ca:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80149ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149d2:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80149d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149da:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 80149de:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80149e2:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80149e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149ea:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80149ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149f2:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 80149f6:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80149fa:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80149fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a02:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 8014a06:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8014a0a:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8014a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a12:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 8014a16:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8014a1a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8014a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a22:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 8014a26:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8014a2a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8014a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a32:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8014a36:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8014a3a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8014a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a42:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8014a46:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8014a4a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8014a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a52:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8014a56:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8014a5a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8014a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a62:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8014a66:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8014a6a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8014a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a72:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8014a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8014a7a:	00db      	lsls	r3, r3, #3
 8014a7c:	68fa      	ldr	r2, [r7, #12]
 8014a7e:	4413      	add	r3, r2
 8014a80:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8014a84:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8014a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a8c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8014a90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014a94:	00db      	lsls	r3, r3, #3
 8014a96:	68fa      	ldr	r2, [r7, #12]
 8014a98:	4413      	add	r3, r2
 8014a9a:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8014a9e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8014aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014aa6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8014aaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014aae:	00db      	lsls	r3, r3, #3
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	4413      	add	r3, r2
 8014ab4:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8014ab8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8014abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ac0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8014ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014ac8:	00db      	lsls	r3, r3, #3
 8014aca:	68fa      	ldr	r2, [r7, #12]
 8014acc:	4413      	add	r3, r2
 8014ace:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8014ad2:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8014ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ada:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8014ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8014ae2:	00db      	lsls	r3, r3, #3
 8014ae4:	3304      	adds	r3, #4
 8014ae6:	68fa      	ldr	r2, [r7, #12]
 8014ae8:	4413      	add	r3, r2
 8014aea:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8014aee:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8014af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014af6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8014afa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014afe:	00db      	lsls	r3, r3, #3
 8014b00:	3304      	adds	r3, #4
 8014b02:	68fa      	ldr	r2, [r7, #12]
 8014b04:	4413      	add	r3, r2
 8014b06:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8014b0a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8014b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b12:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8014b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014b1a:	00db      	lsls	r3, r3, #3
 8014b1c:	3304      	adds	r3, #4
 8014b1e:	68fa      	ldr	r2, [r7, #12]
 8014b20:	4413      	add	r3, r2
 8014b22:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8014b26:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8014b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b2e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8014b32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014b36:	00db      	lsls	r3, r3, #3
 8014b38:	3304      	adds	r3, #4
 8014b3a:	68fa      	ldr	r2, [r7, #12]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8014b42:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8014b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b4a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8014b4e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8014b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8014b56:	4413      	add	r3, r2
 8014b58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8014b5c:	897b      	ldrh	r3, [r7, #10]
 8014b5e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8014b62:	429a      	cmp	r2, r3
 8014b64:	f4ff ad0a 	bcc.w	801457c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8014b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014b6c:	2b07      	cmp	r3, #7
 8014b6e:	f240 84e3 	bls.w	8015538 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8014b72:	2300      	movs	r3, #0
 8014b74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8014b78:	2301      	movs	r3, #1
 8014b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8014b7e:	893b      	ldrh	r3, [r7, #8]
 8014b80:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8014b84:	4413      	add	r3, r2
 8014b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 8014b88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 8014b8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8014b92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b94:	4413      	add	r3, r2
 8014b96:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 8014b98:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b9c:	4413      	add	r3, r2
 8014b9e:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 8014ba0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8014ba2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014ba4:	4413      	add	r3, r2
 8014ba6:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 8014ba8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014baa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bac:	4413      	add	r3, r2
 8014bae:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 8014bb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014bb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bb4:	4413      	add	r3, r2
 8014bb6:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 8014bb8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014bba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bbc:	4413      	add	r3, r2
 8014bbe:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 8014bc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8014bc4:	00db      	lsls	r3, r3, #3
 8014bc6:	687a      	ldr	r2, [r7, #4]
 8014bc8:	4413      	add	r3, r2
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8014bce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014bd0:	00db      	lsls	r3, r3, #3
 8014bd2:	687a      	ldr	r2, [r7, #4]
 8014bd4:	4413      	add	r3, r2
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8014bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014bdc:	00db      	lsls	r3, r3, #3
 8014bde:	687a      	ldr	r2, [r7, #4]
 8014be0:	4413      	add	r3, r2
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8014be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014be8:	00db      	lsls	r3, r3, #3
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	4413      	add	r3, r2
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8014bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014bf4:	00db      	lsls	r3, r3, #3
 8014bf6:	687a      	ldr	r2, [r7, #4]
 8014bf8:	4413      	add	r3, r2
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8014bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c00:	00db      	lsls	r3, r3, #3
 8014c02:	687a      	ldr	r2, [r7, #4]
 8014c04:	4413      	add	r3, r2
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8014c0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014c0c:	00db      	lsls	r3, r3, #3
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	4413      	add	r3, r2
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8014c16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8014c1a:	00db      	lsls	r3, r3, #3
 8014c1c:	3304      	adds	r3, #4
 8014c1e:	687a      	ldr	r2, [r7, #4]
 8014c20:	4413      	add	r3, r2
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8014c26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014c28:	00db      	lsls	r3, r3, #3
 8014c2a:	3304      	adds	r3, #4
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	4413      	add	r3, r2
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8014c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014c36:	00db      	lsls	r3, r3, #3
 8014c38:	3304      	adds	r3, #4
 8014c3a:	687a      	ldr	r2, [r7, #4]
 8014c3c:	4413      	add	r3, r2
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8014c42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014c44:	00db      	lsls	r3, r3, #3
 8014c46:	3304      	adds	r3, #4
 8014c48:	687a      	ldr	r2, [r7, #4]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8014c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014c52:	00db      	lsls	r3, r3, #3
 8014c54:	3304      	adds	r3, #4
 8014c56:	687a      	ldr	r2, [r7, #4]
 8014c58:	4413      	add	r3, r2
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8014c5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c60:	00db      	lsls	r3, r3, #3
 8014c62:	3304      	adds	r3, #4
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	4413      	add	r3, r2
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8014c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014c6e:	00db      	lsls	r3, r3, #3
 8014c70:	3304      	adds	r3, #4
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	4413      	add	r3, r2
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8014c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8014c82:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8014c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014c8a:	4413      	add	r3, r2
 8014c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8014c90:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8014c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014c98:	4413      	add	r3, r2
 8014c9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8014c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8014ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014ca6:	4413      	add	r3, r2
 8014ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8014cac:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8014cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014cb4:	4413      	add	r3, r2
 8014cb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8014cba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8014cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014cc2:	4413      	add	r3, r2
 8014cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8014cc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014cd0:	4413      	add	r3, r2
 8014cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8014cd6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8014cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014cde:	4413      	add	r3, r2
 8014ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8014ce4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014ce8:	00db      	lsls	r3, r3, #3
 8014cea:	68fa      	ldr	r2, [r7, #12]
 8014cec:	4413      	add	r3, r2
 8014cee:	ed93 7a00 	vldr	s14, [r3]
 8014cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014cf6:	00db      	lsls	r3, r3, #3
 8014cf8:	68fa      	ldr	r2, [r7, #12]
 8014cfa:	4413      	add	r3, r2
 8014cfc:	edd3 7a00 	vldr	s15, [r3]
 8014d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d04:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8014d08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014d0c:	00db      	lsls	r3, r3, #3
 8014d0e:	68fa      	ldr	r2, [r7, #12]
 8014d10:	4413      	add	r3, r2
 8014d12:	ed93 7a00 	vldr	s14, [r3]
 8014d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014d1a:	00db      	lsls	r3, r3, #3
 8014d1c:	68fa      	ldr	r2, [r7, #12]
 8014d1e:	4413      	add	r3, r2
 8014d20:	edd3 7a00 	vldr	s15, [r3]
 8014d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d28:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8014d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8014d30:	00db      	lsls	r3, r3, #3
 8014d32:	68fa      	ldr	r2, [r7, #12]
 8014d34:	4413      	add	r3, r2
 8014d36:	ed93 7a00 	vldr	s14, [r3]
 8014d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014d3e:	00db      	lsls	r3, r3, #3
 8014d40:	68fa      	ldr	r2, [r7, #12]
 8014d42:	4413      	add	r3, r2
 8014d44:	edd3 7a00 	vldr	s15, [r3]
 8014d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d4c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8014d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8014d54:	00db      	lsls	r3, r3, #3
 8014d56:	68fa      	ldr	r2, [r7, #12]
 8014d58:	4413      	add	r3, r2
 8014d5a:	ed93 7a00 	vldr	s14, [r3]
 8014d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014d62:	00db      	lsls	r3, r3, #3
 8014d64:	68fa      	ldr	r2, [r7, #12]
 8014d66:	4413      	add	r3, r2
 8014d68:	edd3 7a00 	vldr	s15, [r3]
 8014d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d70:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8014d74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8014d78:	00db      	lsls	r3, r3, #3
 8014d7a:	68fa      	ldr	r2, [r7, #12]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	ed93 7a00 	vldr	s14, [r3]
 8014d82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014d86:	00db      	lsls	r3, r3, #3
 8014d88:	68fa      	ldr	r2, [r7, #12]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	edd3 7a00 	vldr	s15, [r3]
 8014d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d94:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8014d98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8014d9c:	00db      	lsls	r3, r3, #3
 8014d9e:	68fa      	ldr	r2, [r7, #12]
 8014da0:	4413      	add	r3, r2
 8014da2:	ed93 7a00 	vldr	s14, [r3]
 8014da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014daa:	00db      	lsls	r3, r3, #3
 8014dac:	68fa      	ldr	r2, [r7, #12]
 8014dae:	4413      	add	r3, r2
 8014db0:	edd3 7a00 	vldr	s15, [r3]
 8014db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014db8:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8014dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014dc0:	00db      	lsls	r3, r3, #3
 8014dc2:	68fa      	ldr	r2, [r7, #12]
 8014dc4:	4413      	add	r3, r2
 8014dc6:	ed93 7a00 	vldr	s14, [r3]
 8014dca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014dce:	00db      	lsls	r3, r3, #3
 8014dd0:	68fa      	ldr	r2, [r7, #12]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	edd3 7a00 	vldr	s15, [r3]
 8014dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ddc:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8014de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014de4:	00db      	lsls	r3, r3, #3
 8014de6:	68fa      	ldr	r2, [r7, #12]
 8014de8:	4413      	add	r3, r2
 8014dea:	ed93 7a00 	vldr	s14, [r3]
 8014dee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014df2:	00db      	lsls	r3, r3, #3
 8014df4:	68fa      	ldr	r2, [r7, #12]
 8014df6:	4413      	add	r3, r2
 8014df8:	edd3 7a00 	vldr	s15, [r3]
 8014dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e00:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8014e04:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8014e08:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8014e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e10:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8014e14:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8014e18:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8014e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e20:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8014e24:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8014e28:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8014e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e30:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8014e34:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8014e38:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8014e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e40:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8014e44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014e48:	00db      	lsls	r3, r3, #3
 8014e4a:	68fa      	ldr	r2, [r7, #12]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8014e52:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8014e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e5a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8014e5e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8014e62:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8014e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e6a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8014e6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014e72:	00db      	lsls	r3, r3, #3
 8014e74:	3304      	adds	r3, #4
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	4413      	add	r3, r2
 8014e7a:	ed93 7a00 	vldr	s14, [r3]
 8014e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014e82:	00db      	lsls	r3, r3, #3
 8014e84:	3304      	adds	r3, #4
 8014e86:	68fa      	ldr	r2, [r7, #12]
 8014e88:	4413      	add	r3, r2
 8014e8a:	edd3 7a00 	vldr	s15, [r3]
 8014e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e92:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8014e96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014e9a:	00db      	lsls	r3, r3, #3
 8014e9c:	3304      	adds	r3, #4
 8014e9e:	68fa      	ldr	r2, [r7, #12]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	ed93 7a00 	vldr	s14, [r3]
 8014ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014eaa:	00db      	lsls	r3, r3, #3
 8014eac:	3304      	adds	r3, #4
 8014eae:	68fa      	ldr	r2, [r7, #12]
 8014eb0:	4413      	add	r3, r2
 8014eb2:	edd3 7a00 	vldr	s15, [r3]
 8014eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014eba:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8014ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8014ec2:	00db      	lsls	r3, r3, #3
 8014ec4:	3304      	adds	r3, #4
 8014ec6:	68fa      	ldr	r2, [r7, #12]
 8014ec8:	4413      	add	r3, r2
 8014eca:	ed93 7a00 	vldr	s14, [r3]
 8014ece:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014ed2:	00db      	lsls	r3, r3, #3
 8014ed4:	3304      	adds	r3, #4
 8014ed6:	68fa      	ldr	r2, [r7, #12]
 8014ed8:	4413      	add	r3, r2
 8014eda:	edd3 7a00 	vldr	s15, [r3]
 8014ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ee2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8014ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8014eea:	00db      	lsls	r3, r3, #3
 8014eec:	3304      	adds	r3, #4
 8014eee:	68fa      	ldr	r2, [r7, #12]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	ed93 7a00 	vldr	s14, [r3]
 8014ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014efa:	00db      	lsls	r3, r3, #3
 8014efc:	3304      	adds	r3, #4
 8014efe:	68fa      	ldr	r2, [r7, #12]
 8014f00:	4413      	add	r3, r2
 8014f02:	edd3 7a00 	vldr	s15, [r3]
 8014f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f0a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8014f0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8014f12:	00db      	lsls	r3, r3, #3
 8014f14:	3304      	adds	r3, #4
 8014f16:	68fa      	ldr	r2, [r7, #12]
 8014f18:	4413      	add	r3, r2
 8014f1a:	ed93 7a00 	vldr	s14, [r3]
 8014f1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014f22:	00db      	lsls	r3, r3, #3
 8014f24:	3304      	adds	r3, #4
 8014f26:	68fa      	ldr	r2, [r7, #12]
 8014f28:	4413      	add	r3, r2
 8014f2a:	edd3 7a00 	vldr	s15, [r3]
 8014f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f32:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8014f36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8014f3a:	00db      	lsls	r3, r3, #3
 8014f3c:	3304      	adds	r3, #4
 8014f3e:	68fa      	ldr	r2, [r7, #12]
 8014f40:	4413      	add	r3, r2
 8014f42:	ed93 7a00 	vldr	s14, [r3]
 8014f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014f4a:	00db      	lsls	r3, r3, #3
 8014f4c:	3304      	adds	r3, #4
 8014f4e:	68fa      	ldr	r2, [r7, #12]
 8014f50:	4413      	add	r3, r2
 8014f52:	edd3 7a00 	vldr	s15, [r3]
 8014f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f5a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8014f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014f62:	00db      	lsls	r3, r3, #3
 8014f64:	3304      	adds	r3, #4
 8014f66:	68fa      	ldr	r2, [r7, #12]
 8014f68:	4413      	add	r3, r2
 8014f6a:	ed93 7a00 	vldr	s14, [r3]
 8014f6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014f72:	00db      	lsls	r3, r3, #3
 8014f74:	3304      	adds	r3, #4
 8014f76:	68fa      	ldr	r2, [r7, #12]
 8014f78:	4413      	add	r3, r2
 8014f7a:	edd3 7a00 	vldr	s15, [r3]
 8014f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f82:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8014f86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8014f8a:	00db      	lsls	r3, r3, #3
 8014f8c:	3304      	adds	r3, #4
 8014f8e:	68fa      	ldr	r2, [r7, #12]
 8014f90:	4413      	add	r3, r2
 8014f92:	ed93 7a00 	vldr	s14, [r3]
 8014f96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014f9a:	00db      	lsls	r3, r3, #3
 8014f9c:	3304      	adds	r3, #4
 8014f9e:	68fa      	ldr	r2, [r7, #12]
 8014fa0:	4413      	add	r3, r2
 8014fa2:	edd3 7a00 	vldr	s15, [r3]
 8014fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014faa:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 8014fae:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8014fb2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8014fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fba:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 8014fbe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8014fc2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8014fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 8014fce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8014fd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8014fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fda:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 8014fde:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8014fe2:	edd7 7a08 	vldr	s15, [r7, #32]
 8014fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 8014fee:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8014ff2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8014ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ffa:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 8014ffe:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8015002:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8015006:	ee77 7a67 	vsub.f32	s15, s14, s15
 801500a:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 801500e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8015012:	00db      	lsls	r3, r3, #3
 8015014:	3304      	adds	r3, #4
 8015016:	68fa      	ldr	r2, [r7, #12]
 8015018:	4413      	add	r3, r2
 801501a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801501e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015026:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 801502a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801502e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015036:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 801503a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 801503e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8015042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015046:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 801504a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 801504e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8015052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015056:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 801505a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 801505e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8015062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015066:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 801506a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 801506e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015076:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 801507a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 801507e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015086:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 801508a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 801508e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8015092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015096:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 801509a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801509e:	00db      	lsls	r3, r3, #3
 80150a0:	68fa      	ldr	r2, [r7, #12]
 80150a2:	4413      	add	r3, r2
 80150a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80150a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80150ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150b0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80150b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80150b8:	00db      	lsls	r3, r3, #3
 80150ba:	3304      	adds	r3, #4
 80150bc:	68fa      	ldr	r2, [r7, #12]
 80150be:	4413      	add	r3, r2
 80150c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80150c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80150c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150cc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80150d0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80150d4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80150d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150dc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80150e0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80150e4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80150e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150ec:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80150f0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80150f4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80150f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150fc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8015100:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8015104:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8015108:	ee67 7a27 	vmul.f32	s15, s14, s15
 801510c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8015110:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8015114:	00db      	lsls	r3, r3, #3
 8015116:	68fa      	ldr	r2, [r7, #12]
 8015118:	4413      	add	r3, r2
 801511a:	ed97 7a07 	vldr	s14, [r7, #28]
 801511e:	edd7 7a06 	vldr	s15, [r7, #24]
 8015122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015126:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 801512a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801512e:	00db      	lsls	r3, r3, #3
 8015130:	3304      	adds	r3, #4
 8015132:	68fa      	ldr	r2, [r7, #12]
 8015134:	4413      	add	r3, r2
 8015136:	ed97 7a05 	vldr	s14, [r7, #20]
 801513a:	edd7 7a04 	vldr	s15, [r7, #16]
 801513e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015142:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8015146:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801514a:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 801514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015152:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8015156:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801515a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 801515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015162:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8015166:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801516a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 801516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015172:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8015176:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801517a:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 801517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015182:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8015186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801518a:	00db      	lsls	r3, r3, #3
 801518c:	68fa      	ldr	r2, [r7, #12]
 801518e:	4413      	add	r3, r2
 8015190:	ed97 7a07 	vldr	s14, [r7, #28]
 8015194:	edd7 7a06 	vldr	s15, [r7, #24]
 8015198:	ee77 7a27 	vadd.f32	s15, s14, s15
 801519c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 80151a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80151a4:	00db      	lsls	r3, r3, #3
 80151a6:	3304      	adds	r3, #4
 80151a8:	68fa      	ldr	r2, [r7, #12]
 80151aa:	4413      	add	r3, r2
 80151ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80151b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80151b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151b8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80151bc:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80151c0:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80151c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151c8:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80151cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151d0:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 80151d4:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80151d8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80151dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151e0:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80151e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151e8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 80151ec:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80151f0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80151f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151f8:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80151fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015200:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 8015204:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8015208:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 801520c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015210:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8015214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015218:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 801521c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8015220:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8015224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015228:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 801522c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8015230:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8015234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015238:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 801523c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8015240:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8015244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015248:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 801524c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8015250:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8015254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015258:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 801525c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8015260:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015268:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 801526c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8015270:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015278:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 801527c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8015280:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8015284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015288:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 801528c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8015290:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8015294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015298:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 801529c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80152a0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80152a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152a8:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 80152ac:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80152b0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80152b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152b8:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 80152bc:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80152c0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80152c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152c8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 80152cc:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80152d0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80152d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152d8:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 80152dc:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80152e0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80152e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152e8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 80152ec:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80152f0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80152f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152f8:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 80152fc:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8015300:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8015304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015308:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 801530c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8015310:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8015314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015318:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 801531c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8015320:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8015324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015328:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 801532c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8015330:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015338:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 801533c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8015340:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015348:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 801534c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8015350:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8015354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015358:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 801535c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8015360:	00db      	lsls	r3, r3, #3
 8015362:	68fa      	ldr	r2, [r7, #12]
 8015364:	4413      	add	r3, r2
 8015366:	ed97 7a07 	vldr	s14, [r7, #28]
 801536a:	edd7 7a06 	vldr	s15, [r7, #24]
 801536e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015372:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8015376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801537a:	00db      	lsls	r3, r3, #3
 801537c:	3304      	adds	r3, #4
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	4413      	add	r3, r2
 8015382:	ed97 7a05 	vldr	s14, [r7, #20]
 8015386:	edd7 7a04 	vldr	s15, [r7, #16]
 801538a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801538e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8015392:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8015396:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 801539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801539e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80153a2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80153a6:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80153aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153ae:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80153b2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80153b6:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80153ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153be:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80153c2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80153c6:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80153ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153ce:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80153d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80153d6:	00db      	lsls	r3, r3, #3
 80153d8:	68fa      	ldr	r2, [r7, #12]
 80153da:	4413      	add	r3, r2
 80153dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80153e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80153e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80153e8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80153ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80153f0:	00db      	lsls	r3, r3, #3
 80153f2:	3304      	adds	r3, #4
 80153f4:	68fa      	ldr	r2, [r7, #12]
 80153f6:	4413      	add	r3, r2
 80153f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80153fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8015400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015404:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8015408:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 801540c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8015410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015414:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8015418:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801541c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8015420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015424:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8015428:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 801542c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8015430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015434:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8015438:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801543c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8015440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015444:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8015448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801544c:	00db      	lsls	r3, r3, #3
 801544e:	68fa      	ldr	r2, [r7, #12]
 8015450:	4413      	add	r3, r2
 8015452:	ed97 7a07 	vldr	s14, [r7, #28]
 8015456:	edd7 7a06 	vldr	s15, [r7, #24]
 801545a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801545e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8015462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8015466:	00db      	lsls	r3, r3, #3
 8015468:	3304      	adds	r3, #4
 801546a:	68fa      	ldr	r2, [r7, #12]
 801546c:	4413      	add	r3, r2
 801546e:	ed97 7a05 	vldr	s14, [r7, #20]
 8015472:	edd7 7a04 	vldr	s15, [r7, #16]
 8015476:	ee77 7a67 	vsub.f32	s15, s14, s15
 801547a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 801547e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8015482:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8015486:	ee67 7a27 	vmul.f32	s15, s14, s15
 801548a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 801548e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8015492:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8015496:	ee67 7a27 	vmul.f32	s15, s14, s15
 801549a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 801549e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80154a2:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80154a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154aa:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80154ae:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80154b2:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80154b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154ba:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80154be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	68fa      	ldr	r2, [r7, #12]
 80154c6:	4413      	add	r3, r2
 80154c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80154cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80154d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154d4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80154d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80154dc:	00db      	lsls	r3, r3, #3
 80154de:	3304      	adds	r3, #4
 80154e0:	68fa      	ldr	r2, [r7, #12]
 80154e2:	4413      	add	r3, r2
 80154e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80154e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80154ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154f0:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80154f4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80154f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80154fc:	4413      	add	r3, r2
 80154fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 8015502:	897b      	ldrh	r3, [r7, #10]
 8015504:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8015508:	429a      	cmp	r2, r3
 801550a:	f4ff abba 	bcc.w	8014c82 <arm_radix8_butterfly_f32+0x746>

         j++;
 801550e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015512:	3301      	adds	r3, #1
 8015514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 8015518:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801551c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015520:	429a      	cmp	r2, r3
 8015522:	f4ff ab2c 	bcc.w	8014b7e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8015526:	893b      	ldrh	r3, [r7, #8]
 8015528:	00db      	lsls	r3, r3, #3
 801552a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 801552c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015530:	2b07      	cmp	r3, #7
 8015532:	f63f a813 	bhi.w	801455c <arm_radix8_butterfly_f32+0x20>
}
 8015536:	e000      	b.n	801553a <arm_radix8_butterfly_f32+0xffe>
         break;
 8015538:	bf00      	nop
}
 801553a:	bf00      	nop
 801553c:	37f4      	adds	r7, #244	@ 0xf4
 801553e:	46bd      	mov	sp, r7
 8015540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015544:	4770      	bx	lr
 8015546:	bf00      	nop

08015548 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8015548:	b480      	push	{r7}
 801554a:	b095      	sub	sp, #84	@ 0x54
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	695b      	ldr	r3, [r3, #20]
 8015558:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pA = p;                          /* increasing pointer */
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	647b      	str	r3, [r7, #68]	@ 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	881b      	ldrh	r3, [r3, #0]
 8015566:	3b01      	subs	r3, #1
 8015568:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 801556a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 8015570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015572:	685b      	ldr	r3, [r3, #4]
 8015574:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 8015576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 801557c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 8015582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015584:	1d1a      	adds	r2, r3, #4
 8015586:	64ba      	str	r2, [r7, #72]	@ 0x48
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 801558c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801558e:	1d1a      	adds	r2, r3, #4
 8015590:	64ba      	str	r2, [r7, #72]	@ 0x48
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	62bb      	str	r3, [r7, #40]	@ 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8015596:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801559a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801559e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80155a6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80155aa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80155ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155b2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80155b6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80155ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80155be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	1d1a      	adds	r2, r3, #4
 80155c6:	607a      	str	r2, [r7, #4]
 80155c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80155cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155d0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80155d4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80155d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80155dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	1d1a      	adds	r2, r3, #4
 80155e4:	607a      	str	r2, [r7, #4]
 80155e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80155ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155ee:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80155f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80155f4:	00db      	lsls	r3, r3, #3
 80155f6:	68ba      	ldr	r2, [r7, #8]
 80155f8:	4413      	add	r3, r2
 80155fa:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 80155fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155fe:	3308      	adds	r3, #8
 8015600:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8015602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 8015608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 801560e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 8015614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 801561a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801561c:	1d1a      	adds	r2, r3, #4
 801561e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8015624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015626:	1d1a      	adds	r2, r3, #4
 8015628:	64ba      	str	r2, [r7, #72]	@ 0x48
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 801562e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8015632:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8015636:	ee77 7a67 	vsub.f32	s15, s14, s15
 801563a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 801563e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8015642:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8015646:	ee77 7a27 	vadd.f32	s15, s14, s15
 801564a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 801564e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8015652:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015656:	ee67 7a27 	vmul.f32	s15, s14, s15
 801565a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 801565e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8015662:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015666:	ee67 7a27 	vmul.f32	s15, s14, s15
 801566a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 801566e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8015672:	edd7 7a08 	vldr	s15, [r7, #32]
 8015676:	ee67 7a27 	vmul.f32	s15, s14, s15
 801567a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 801567e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8015682:	edd7 7a08 	vldr	s15, [r7, #32]
 8015686:	ee67 7a27 	vmul.f32	s15, s14, s15
 801568a:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 801568e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8015692:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8015696:	ee37 7a27 	vadd.f32	s14, s14, s15
 801569a:	edd7 7a07 	vldr	s15, [r7, #28]
 801569e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80156a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80156a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	1d1a      	adds	r2, r3, #4
 80156ae:	607a      	str	r2, [r7, #4]
 80156b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80156b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80156b8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80156bc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80156c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80156c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80156c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80156cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80156d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80156d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	1d1a      	adds	r2, r3, #4
 80156dc:	607a      	str	r2, [r7, #4]
 80156de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80156e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80156e6:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80156ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80156ec:	3308      	adds	r3, #8
 80156ee:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80156f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156f2:	3b08      	subs	r3, #8
 80156f4:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 80156f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156f8:	3b01      	subs	r3, #1
 80156fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0);
 80156fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156fe:	2b00      	cmp	r3, #0
 8015700:	f73f af7f 	bgt.w	8015602 <stage_rfft_f32+0xba>
}
 8015704:	bf00      	nop
 8015706:	bf00      	nop
 8015708:	3754      	adds	r7, #84	@ 0x54
 801570a:	46bd      	mov	sp, r7
 801570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015710:	4770      	bx	lr

08015712 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8015712:	b480      	push	{r7}
 8015714:	b095      	sub	sp, #84	@ 0x54
 8015716:	af00      	add	r7, sp, #0
 8015718:	60f8      	str	r0, [r7, #12]
 801571a:	60b9      	str	r1, [r7, #8]
 801571c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	695b      	ldr	r3, [r3, #20]
 8015722:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	647b      	str	r3, [r7, #68]	@ 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	881b      	ldrh	r3, [r3, #0]
 8015730:	3b01      	subs	r3, #1
 8015732:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 8015734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 801573a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801573c:	685b      	ldr	r3, [r3, #4]
 801573e:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 8015740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015742:	3308      	adds	r3, #8
 8015744:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8015746:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801574a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801574e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	1d1a      	adds	r2, r3, #4
 8015756:	607a      	str	r2, [r7, #4]
 8015758:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801575c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015760:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8015764:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8015768:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801576c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	1d1a      	adds	r2, r3, #4
 8015774:	607a      	str	r2, [r7, #4]
 8015776:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801577a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801577e:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8015782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015784:	00db      	lsls	r3, r3, #3
 8015786:	68ba      	ldr	r2, [r7, #8]
 8015788:	4413      	add	r3, r2
 801578a:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 801578c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801578e:	3308      	adds	r3, #8
 8015790:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0)
 8015792:	e07c      	b.n	801588e <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8015794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 801579a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 80157a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 80157a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157a8:	685b      	ldr	r3, [r3, #4]
 80157aa:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 80157ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80157ae:	1d1a      	adds	r2, r3, #4
 80157b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 80157b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80157b8:	1d1a      	adds	r2, r3, #4
 80157ba:	64ba      	str	r2, [r7, #72]	@ 0x48
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 80157c0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80157c4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80157c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 80157d0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80157d4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80157d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157dc:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80157e0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80157e4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80157e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157ec:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80157f0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80157f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80157f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157fc:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8015800:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8015804:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015808:	ee67 7a27 	vmul.f32	s15, s14, s15
 801580c:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8015810:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8015814:	edd7 7a08 	vldr	s15, [r7, #32]
 8015818:	ee67 7a27 	vmul.f32	s15, s14, s15
 801581c:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8015820:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8015824:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8015828:	ee37 7a27 	vadd.f32	s14, s14, s15
 801582c:	edd7 7a07 	vldr	s15, [r7, #28]
 8015830:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015834:	edd7 7a06 	vldr	s15, [r7, #24]
 8015838:	ee77 7a67 	vsub.f32	s15, s14, s15
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	1d1a      	adds	r2, r3, #4
 8015840:	607a      	str	r2, [r7, #4]
 8015842:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015846:	ee67 7a87 	vmul.f32	s15, s15, s14
 801584a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 801584e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8015852:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8015856:	ee37 7a67 	vsub.f32	s14, s14, s15
 801585a:	edd7 7a05 	vldr	s15, [r7, #20]
 801585e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015862:	edd7 7a04 	vldr	s15, [r7, #16]
 8015866:	ee77 7a67 	vsub.f32	s15, s14, s15
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	1d1a      	adds	r2, r3, #4
 801586e:	607a      	str	r2, [r7, #4]
 8015870:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015878:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 801587c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801587e:	3308      	adds	r3, #8
 8015880:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8015882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015884:	3b08      	subs	r3, #8
 8015886:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8015888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801588a:	3b01      	subs	r3, #1
 801588c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0)
 801588e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015890:	2b00      	cmp	r3, #0
 8015892:	f73f af7f 	bgt.w	8015794 <merge_rfft_f32+0x82>
   }

}
 8015896:	bf00      	nop
 8015898:	bf00      	nop
 801589a:	3754      	adds	r7, #84	@ 0x54
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr

080158a4 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b086      	sub	sp, #24
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	60f8      	str	r0, [r7, #12]
 80158ac:	60b9      	str	r1, [r7, #8]
 80158ae:	607a      	str	r2, [r7, #4]
 80158b0:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80158b6:	78fb      	ldrb	r3, [r7, #3]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d00b      	beq.n	80158d4 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80158bc:	687a      	ldr	r2, [r7, #4]
 80158be:	68b9      	ldr	r1, [r7, #8]
 80158c0:	68f8      	ldr	r0, [r7, #12]
 80158c2:	f7ff ff26 	bl	8015712 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80158c6:	78fa      	ldrb	r2, [r7, #3]
 80158c8:	2301      	movs	r3, #1
 80158ca:	6879      	ldr	r1, [r7, #4]
 80158cc:	6978      	ldr	r0, [r7, #20]
 80158ce:	f7fe fd7b 	bl	80143c8 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80158d2:	e00a      	b.n	80158ea <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80158d4:	78fa      	ldrb	r2, [r7, #3]
 80158d6:	2301      	movs	r3, #1
 80158d8:	68b9      	ldr	r1, [r7, #8]
 80158da:	6978      	ldr	r0, [r7, #20]
 80158dc:	f7fe fd74 	bl	80143c8 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80158e0:	687a      	ldr	r2, [r7, #4]
 80158e2:	68b9      	ldr	r1, [r7, #8]
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f7ff fe2f 	bl	8015548 <stage_rfft_f32>
}
 80158ea:	bf00      	nop
 80158ec:	3718      	adds	r7, #24
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}

080158f2 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80158f2:	b480      	push	{r7}
 80158f4:	b089      	sub	sp, #36	@ 0x24
 80158f6:	af00      	add	r7, sp, #0
 80158f8:	60f8      	str	r0, [r7, #12]
 80158fa:	60b9      	str	r1, [r7, #8]
 80158fc:	607a      	str	r2, [r7, #4]
 80158fe:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015906:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	00db      	lsls	r3, r3, #3
 801590c:	68fa      	ldr	r2, [r7, #12]
 801590e:	4413      	add	r3, r2
 8015910:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8015912:	69fb      	ldr	r3, [r7, #28]
 8015914:	ed93 7a00 	vldr	s14, [r3]
 8015918:	69bb      	ldr	r3, [r7, #24]
 801591a:	edd3 7a00 	vldr	s15, [r3]
 801591e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	edd3 6a01 	vldr	s13, [r3, #4]
 8015928:	69bb      	ldr	r3, [r7, #24]
 801592a:	edd3 7a01 	vldr	s15, [r3, #4]
 801592e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015936:	edc7 7a04 	vstr	s15, [r7, #16]
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	ed93 7a00 	vldr	s14, [r3]
 8015940:	69bb      	ldr	r3, [r7, #24]
 8015942:	edd3 7a01 	vldr	s15, [r3, #4]
 8015946:	ee27 7a27 	vmul.f32	s14, s14, s15
 801594a:	69fb      	ldr	r3, [r7, #28]
 801594c:	edd3 6a01 	vldr	s13, [r3, #4]
 8015950:	69bb      	ldr	r3, [r7, #24]
 8015952:	edd3 7a00 	vldr	s15, [r3]
 8015956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801595a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801595e:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8015962:	68bb      	ldr	r3, [r7, #8]
 8015964:	00db      	lsls	r3, r3, #3
 8015966:	69ba      	ldr	r2, [r7, #24]
 8015968:	4413      	add	r3, r2
 801596a:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	ed93 7a00 	vldr	s14, [r3]
 8015972:	edd7 7a04 	vldr	s15, [r7, #16]
 8015976:	ee77 7a67 	vsub.f32	s15, s14, s15
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	edc3 7a00 	vstr	s15, [r3]
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	ed93 7a01 	vldr	s14, [r3, #4]
 8015986:	edd7 7a05 	vldr	s15, [r7, #20]
 801598a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801598e:	69fb      	ldr	r3, [r7, #28]
 8015990:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	ed93 7a00 	vldr	s14, [r3]
 801599a:	edd7 7a04 	vldr	s15, [r7, #16]
 801599e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	edc3 7a00 	vstr	s15, [r3]
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80159ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80159b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 80159bc:	69fb      	ldr	r3, [r7, #28]
 80159be:	3308      	adds	r3, #8
 80159c0:	61fb      	str	r3, [r7, #28]
        ++Fout;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	3308      	adds	r3, #8
 80159c6:	60fb      	str	r3, [r7, #12]
    }while (--m);
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	3b01      	subs	r3, #1
 80159cc:	603b      	str	r3, [r7, #0]
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	bf14      	ite	ne
 80159d4:	2301      	movne	r3, #1
 80159d6:	2300      	moveq	r3, #0
 80159d8:	b2db      	uxtb	r3, r3
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d199      	bne.n	8015912 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 80159de:	bf00      	nop
 80159e0:	bf00      	nop
 80159e2:	3724      	adds	r7, #36	@ 0x24
 80159e4:	46bd      	mov	sp, r7
 80159e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ea:	4770      	bx	lr

080159ec <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 80159ec:	b480      	push	{r7}
 80159ee:	b097      	sub	sp, #92	@ 0x5c
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	60f8      	str	r0, [r7, #12]
 80159f4:	60b9      	str	r1, [r7, #8]
 80159f6:	607a      	str	r2, [r7, #4]
 80159f8:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    const size_t m2=2*m;
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	005b      	lsls	r3, r3, #1
 8015a02:	647b      	str	r3, [r7, #68]	@ 0x44
    const size_t m3=3*m;
 8015a04:	683a      	ldr	r2, [r7, #0]
 8015a06:	4613      	mov	r3, r2
 8015a08:	005b      	lsls	r3, r3, #1
 8015a0a:	4413      	add	r3, r2
 8015a0c:	643b      	str	r3, [r7, #64]	@ 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015a14:	657b      	str	r3, [r7, #84]	@ 0x54
 8015a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a18:	653b      	str	r3, [r7, #80]	@ 0x50
 8015a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8015a1e:	683b      	ldr	r3, [r7, #0]
 8015a20:	00db      	lsls	r3, r3, #3
 8015a22:	68fa      	ldr	r2, [r7, #12]
 8015a24:	4413      	add	r3, r2
 8015a26:	ed93 7a00 	vldr	s14, [r3]
 8015a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a2c:	edd3 7a00 	vldr	s15, [r3]
 8015a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a34:	683b      	ldr	r3, [r7, #0]
 8015a36:	00db      	lsls	r3, r3, #3
 8015a38:	68fa      	ldr	r2, [r7, #12]
 8015a3a:	4413      	add	r3, r2
 8015a3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8015a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a42:	edd3 7a01 	vldr	s15, [r3, #4]
 8015a46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a4e:	edc7 7a04 	vstr	s15, [r7, #16]
 8015a52:	683b      	ldr	r3, [r7, #0]
 8015a54:	00db      	lsls	r3, r3, #3
 8015a56:	68fa      	ldr	r2, [r7, #12]
 8015a58:	4413      	add	r3, r2
 8015a5a:	ed93 7a00 	vldr	s14, [r3]
 8015a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a60:	edd3 7a01 	vldr	s15, [r3, #4]
 8015a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	00db      	lsls	r3, r3, #3
 8015a6c:	68fa      	ldr	r2, [r7, #12]
 8015a6e:	4413      	add	r3, r2
 8015a70:	edd3 6a01 	vldr	s13, [r3, #4]
 8015a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a76:	edd3 7a00 	vldr	s15, [r3]
 8015a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a82:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8015a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015a88:	00db      	lsls	r3, r3, #3
 8015a8a:	68fa      	ldr	r2, [r7, #12]
 8015a8c:	4413      	add	r3, r2
 8015a8e:	ed93 7a00 	vldr	s14, [r3]
 8015a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015a94:	edd3 7a00 	vldr	s15, [r3]
 8015a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015a9e:	00db      	lsls	r3, r3, #3
 8015aa0:	68fa      	ldr	r2, [r7, #12]
 8015aa2:	4413      	add	r3, r2
 8015aa4:	edd3 6a01 	vldr	s13, [r3, #4]
 8015aa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015aaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8015aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ab6:	edc7 7a06 	vstr	s15, [r7, #24]
 8015aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015abc:	00db      	lsls	r3, r3, #3
 8015abe:	68fa      	ldr	r2, [r7, #12]
 8015ac0:	4413      	add	r3, r2
 8015ac2:	ed93 7a00 	vldr	s14, [r3]
 8015ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ac8:	edd3 7a01 	vldr	s15, [r3, #4]
 8015acc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ad2:	00db      	lsls	r3, r3, #3
 8015ad4:	68fa      	ldr	r2, [r7, #12]
 8015ad6:	4413      	add	r3, r2
 8015ad8:	edd3 6a01 	vldr	s13, [r3, #4]
 8015adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ade:	edd3 7a00 	vldr	s15, [r3]
 8015ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015aea:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8015aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015af0:	00db      	lsls	r3, r3, #3
 8015af2:	68fa      	ldr	r2, [r7, #12]
 8015af4:	4413      	add	r3, r2
 8015af6:	ed93 7a00 	vldr	s14, [r3]
 8015afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015afc:	edd3 7a00 	vldr	s15, [r3]
 8015b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b06:	00db      	lsls	r3, r3, #3
 8015b08:	68fa      	ldr	r2, [r7, #12]
 8015b0a:	4413      	add	r3, r2
 8015b0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8015b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b12:	edd3 7a01 	vldr	s15, [r3, #4]
 8015b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b1e:	edc7 7a08 	vstr	s15, [r7, #32]
 8015b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b24:	00db      	lsls	r3, r3, #3
 8015b26:	68fa      	ldr	r2, [r7, #12]
 8015b28:	4413      	add	r3, r2
 8015b2a:	ed93 7a00 	vldr	s14, [r3]
 8015b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b30:	edd3 7a01 	vldr	s15, [r3, #4]
 8015b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015b3a:	00db      	lsls	r3, r3, #3
 8015b3c:	68fa      	ldr	r2, [r7, #12]
 8015b3e:	4413      	add	r3, r2
 8015b40:	edd3 6a01 	vldr	s13, [r3, #4]
 8015b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b46:	edd3 7a00 	vldr	s15, [r3]
 8015b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	ed93 7a00 	vldr	s14, [r3]
 8015b5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8015b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b64:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8015b6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8015b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b76:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        C_ADDTO(*Fout, scratch[1]);
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	ed93 7a00 	vldr	s14, [r3]
 8015b80:	edd7 7a06 	vldr	s15, [r7, #24]
 8015b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	edc3 7a00 	vstr	s15, [r3]
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	ed93 7a01 	vldr	s14, [r3, #4]
 8015b94:	edd7 7a07 	vldr	s15, [r7, #28]
 8015b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 8015ba2:	ed97 7a04 	vldr	s14, [r7, #16]
 8015ba6:	edd7 7a08 	vldr	s15, [r7, #32]
 8015baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bae:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8015bb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8015bb6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bbe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 8015bc2:	ed97 7a04 	vldr	s14, [r7, #16]
 8015bc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8015bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bce:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8015bd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8015bd6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8015bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bde:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	ed93 7a00 	vldr	s14, [r3]
 8015be8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015bee:	00db      	lsls	r3, r3, #3
 8015bf0:	68fa      	ldr	r2, [r7, #12]
 8015bf2:	4413      	add	r3, r2
 8015bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bf8:	edc3 7a00 	vstr	s15, [r3]
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8015c02:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c08:	00db      	lsls	r3, r3, #3
 8015c0a:	68fa      	ldr	r2, [r7, #12]
 8015c0c:	4413      	add	r3, r2
 8015c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c12:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	00db      	lsls	r3, r3, #3
 8015c1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015c1c:	4413      	add	r3, r2
 8015c1e:	657b      	str	r3, [r7, #84]	@ 0x54
        tw2 += fstride*2;
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	011b      	lsls	r3, r3, #4
 8015c24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015c26:	4413      	add	r3, r2
 8015c28:	653b      	str	r3, [r7, #80]	@ 0x50
        tw3 += fstride*3;
 8015c2a:	68ba      	ldr	r2, [r7, #8]
 8015c2c:	4613      	mov	r3, r2
 8015c2e:	005b      	lsls	r3, r3, #1
 8015c30:	4413      	add	r3, r2
 8015c32:	00db      	lsls	r3, r3, #3
 8015c34:	461a      	mov	r2, r3
 8015c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c38:	4413      	add	r3, r2
 8015c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	ed93 7a00 	vldr	s14, [r3]
 8015c42:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	edc3 7a00 	vstr	s15, [r3]
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	ed93 7a01 	vldr	s14, [r3, #4]
 8015c56:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d030      	beq.n	8015cce <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8015c6c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8015c70:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	00db      	lsls	r3, r3, #3
 8015c78:	68fa      	ldr	r2, [r7, #12]
 8015c7a:	4413      	add	r3, r2
 8015c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c80:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 8015c84:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8015c88:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	00db      	lsls	r3, r3, #3
 8015c90:	68fa      	ldr	r2, [r7, #12]
 8015c92:	4413      	add	r3, r2
 8015c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c98:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8015c9c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8015ca0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8015ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015ca6:	00db      	lsls	r3, r3, #3
 8015ca8:	68fa      	ldr	r2, [r7, #12]
 8015caa:	4413      	add	r3, r2
 8015cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cb0:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 8015cb4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8015cb8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8015cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015cbe:	00db      	lsls	r3, r3, #3
 8015cc0:	68fa      	ldr	r2, [r7, #12]
 8015cc2:	4413      	add	r3, r2
 8015cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cc8:	edc3 7a01 	vstr	s15, [r3, #4]
 8015ccc:	e02f      	b.n	8015d2e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8015cce:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8015cd2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	00db      	lsls	r3, r3, #3
 8015cda:	68fa      	ldr	r2, [r7, #12]
 8015cdc:	4413      	add	r3, r2
 8015cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ce2:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8015ce6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8015cea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	68fa      	ldr	r2, [r7, #12]
 8015cf4:	4413      	add	r3, r2
 8015cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cfa:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8015cfe:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8015d02:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8015d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015d08:	00db      	lsls	r3, r3, #3
 8015d0a:	68fa      	ldr	r2, [r7, #12]
 8015d0c:	4413      	add	r3, r2
 8015d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d12:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8015d16:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8015d1a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8015d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015d20:	00db      	lsls	r3, r3, #3
 8015d22:	68fa      	ldr	r2, [r7, #12]
 8015d24:	4413      	add	r3, r2
 8015d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d2a:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	3308      	adds	r3, #8
 8015d32:	60fb      	str	r3, [r7, #12]
    }while(--k);
 8015d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d36:	3b01      	subs	r3, #1
 8015d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	bf14      	ite	ne
 8015d40:	2301      	movne	r3, #1
 8015d42:	2300      	moveq	r3, #0
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	f47f ae69 	bne.w	8015a1e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 8015d4c:	bf00      	nop
 8015d4e:	bf00      	nop
 8015d50:	375c      	adds	r7, #92	@ 0x5c
 8015d52:	46bd      	mov	sp, r7
 8015d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d58:	4770      	bx	lr
	...

08015d5c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8015d5c:	b5b0      	push	{r4, r5, r7, lr}
 8015d5e:	b094      	sub	sp, #80	@ 0x50
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	60f8      	str	r0, [r7, #12]
 8015d64:	60b9      	str	r1, [r7, #8]
 8015d66:	607a      	str	r2, [r7, #4]
 8015d68:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
     const size_t m2 = 2*m;
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	005b      	lsls	r3, r3, #1
 8015d72:	643b      	str	r3, [r7, #64]	@ 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8015d74:	68bb      	ldr	r3, [r7, #8]
 8015d76:	683a      	ldr	r2, [r7, #0]
 8015d78:	fb02 f303 	mul.w	r3, r2, r3
 8015d7c:	6879      	ldr	r1, [r7, #4]
 8015d7e:	3321      	adds	r3, #33	@ 0x21
 8015d80:	f107 0210 	add.w	r2, r7, #16
 8015d84:	00db      	lsls	r3, r3, #3
 8015d86:	440b      	add	r3, r1
 8015d88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d8c:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8015d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8015d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d9a:	64bb      	str	r3, [r7, #72]	@ 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	00db      	lsls	r3, r3, #3
 8015da0:	68fa      	ldr	r2, [r7, #12]
 8015da2:	4413      	add	r3, r2
 8015da4:	ed93 7a00 	vldr	s14, [r3]
 8015da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015daa:	edd3 7a00 	vldr	s15, [r3]
 8015dae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	00db      	lsls	r3, r3, #3
 8015db6:	68fa      	ldr	r2, [r7, #12]
 8015db8:	4413      	add	r3, r2
 8015dba:	edd3 6a01 	vldr	s13, [r3, #4]
 8015dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015dc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8015dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015dcc:	edc7 7a08 	vstr	s15, [r7, #32]
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	00db      	lsls	r3, r3, #3
 8015dd4:	68fa      	ldr	r2, [r7, #12]
 8015dd6:	4413      	add	r3, r2
 8015dd8:	ed93 7a00 	vldr	s14, [r3]
 8015ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015dde:	edd3 7a01 	vldr	s15, [r3, #4]
 8015de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	00db      	lsls	r3, r3, #3
 8015dea:	68fa      	ldr	r2, [r7, #12]
 8015dec:	4413      	add	r3, r2
 8015dee:	edd3 6a01 	vldr	s13, [r3, #4]
 8015df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015df4:	edd3 7a00 	vldr	s15, [r3]
 8015df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8015e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e06:	00db      	lsls	r3, r3, #3
 8015e08:	68fa      	ldr	r2, [r7, #12]
 8015e0a:	4413      	add	r3, r2
 8015e0c:	ed93 7a00 	vldr	s14, [r3]
 8015e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015e12:	edd3 7a00 	vldr	s15, [r3]
 8015e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e1c:	00db      	lsls	r3, r3, #3
 8015e1e:	68fa      	ldr	r2, [r7, #12]
 8015e20:	4413      	add	r3, r2
 8015e22:	edd3 6a01 	vldr	s13, [r3, #4]
 8015e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015e28:	edd3 7a01 	vldr	s15, [r3, #4]
 8015e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e34:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8015e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e3a:	00db      	lsls	r3, r3, #3
 8015e3c:	68fa      	ldr	r2, [r7, #12]
 8015e3e:	4413      	add	r3, r2
 8015e40:	ed93 7a00 	vldr	s14, [r3]
 8015e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015e46:	edd3 7a01 	vldr	s15, [r3, #4]
 8015e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e50:	00db      	lsls	r3, r3, #3
 8015e52:	68fa      	ldr	r2, [r7, #12]
 8015e54:	4413      	add	r3, r2
 8015e56:	edd3 6a01 	vldr	s13, [r3, #4]
 8015e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015e5c:	edd3 7a00 	vldr	s15, [r3]
 8015e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e68:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8015e6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8015e70:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e78:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8015e7c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8015e80:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e88:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8015e8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8015e90:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e98:	edc7 7a06 	vstr	s15, [r7, #24]
 8015e9c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8015ea0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8015ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ea8:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	00db      	lsls	r3, r3, #3
 8015eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015eb2:	4413      	add	r3, r2
 8015eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
         tw2 += fstride*2;
 8015eb6:	68bb      	ldr	r3, [r7, #8]
 8015eb8:	011b      	lsls	r3, r3, #4
 8015eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015ebc:	4413      	add	r3, r2
 8015ebe:	647b      	str	r3, [r7, #68]	@ 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f7ea fb6f 	bl	80005a8 <__aeabi_f2d>
 8015eca:	4604      	mov	r4, r0
 8015ecc:	460d      	mov	r5, r1
 8015ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7ea fb69 	bl	80005a8 <__aeabi_f2d>
 8015ed6:	f04f 0200 	mov.w	r2, #0
 8015eda:	4b57      	ldr	r3, [pc, #348]	@ (8016038 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8015edc:	f7ea fbbc 	bl	8000658 <__aeabi_dmul>
 8015ee0:	4602      	mov	r2, r0
 8015ee2:	460b      	mov	r3, r1
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	4629      	mov	r1, r5
 8015ee8:	f7ea f9fe 	bl	80002e8 <__aeabi_dsub>
 8015eec:	4602      	mov	r2, r0
 8015eee:	460b      	mov	r3, r1
 8015ef0:	4610      	mov	r0, r2
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	00db      	lsls	r3, r3, #3
 8015ef8:	68fa      	ldr	r2, [r7, #12]
 8015efa:	18d4      	adds	r4, r2, r3
 8015efc:	f7ea fea4 	bl	8000c48 <__aeabi_d2f>
 8015f00:	4603      	mov	r3, r0
 8015f02:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	685b      	ldr	r3, [r3, #4]
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7ea fb4d 	bl	80005a8 <__aeabi_f2d>
 8015f0e:	4604      	mov	r4, r0
 8015f10:	460d      	mov	r5, r1
 8015f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7ea fb47 	bl	80005a8 <__aeabi_f2d>
 8015f1a:	f04f 0200 	mov.w	r2, #0
 8015f1e:	4b46      	ldr	r3, [pc, #280]	@ (8016038 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8015f20:	f7ea fb9a 	bl	8000658 <__aeabi_dmul>
 8015f24:	4602      	mov	r2, r0
 8015f26:	460b      	mov	r3, r1
 8015f28:	4620      	mov	r0, r4
 8015f2a:	4629      	mov	r1, r5
 8015f2c:	f7ea f9dc 	bl	80002e8 <__aeabi_dsub>
 8015f30:	4602      	mov	r2, r0
 8015f32:	460b      	mov	r3, r1
 8015f34:	4610      	mov	r0, r2
 8015f36:	4619      	mov	r1, r3
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	00db      	lsls	r3, r3, #3
 8015f3c:	68fa      	ldr	r2, [r7, #12]
 8015f3e:	18d4      	adds	r4, r2, r3
 8015f40:	f7ea fe82 	bl	8000c48 <__aeabi_d2f>
 8015f44:	4603      	mov	r3, r0
 8015f46:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8015f48:	ed97 7a06 	vldr	s14, [r7, #24]
 8015f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f54:	edc7 7a06 	vstr	s15, [r7, #24]
 8015f58:	ed97 7a07 	vldr	s14, [r7, #28]
 8015f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f64:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	ed93 7a00 	vldr	s14, [r3]
 8015f6e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8015f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	edc3 7a00 	vstr	s15, [r3]
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8015f82:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8015f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	00db      	lsls	r3, r3, #3
 8015f94:	68fa      	ldr	r2, [r7, #12]
 8015f96:	4413      	add	r3, r2
 8015f98:	ed93 7a00 	vldr	s14, [r3]
 8015f9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8015fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fa2:	00db      	lsls	r3, r3, #3
 8015fa4:	68fa      	ldr	r2, [r7, #12]
 8015fa6:	4413      	add	r3, r2
 8015fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fac:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	00db      	lsls	r3, r3, #3
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	4413      	add	r3, r2
 8015fb8:	ed93 7a01 	vldr	s14, [r3, #4]
 8015fbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8015fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015fc2:	00db      	lsls	r3, r3, #3
 8015fc4:	68fa      	ldr	r2, [r7, #12]
 8015fc6:	4413      	add	r3, r2
 8015fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fcc:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	00db      	lsls	r3, r3, #3
 8015fd4:	68fa      	ldr	r2, [r7, #12]
 8015fd6:	4413      	add	r3, r2
 8015fd8:	ed93 7a00 	vldr	s14, [r3]
 8015fdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	00db      	lsls	r3, r3, #3
 8015fe4:	68fa      	ldr	r2, [r7, #12]
 8015fe6:	4413      	add	r3, r2
 8015fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fec:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8015ff0:	683b      	ldr	r3, [r7, #0]
 8015ff2:	00db      	lsls	r3, r3, #3
 8015ff4:	68fa      	ldr	r2, [r7, #12]
 8015ff6:	4413      	add	r3, r2
 8015ff8:	ed93 7a01 	vldr	s14, [r3, #4]
 8015ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	00db      	lsls	r3, r3, #3
 8016004:	68fa      	ldr	r2, [r7, #12]
 8016006:	4413      	add	r3, r2
 8016008:	ee77 7a27 	vadd.f32	s15, s14, s15
 801600c:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	3308      	adds	r3, #8
 8016014:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8016016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016018:	3b01      	subs	r3, #1
 801601a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801601c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801601e:	2b00      	cmp	r3, #0
 8016020:	bf14      	ite	ne
 8016022:	2301      	movne	r3, #1
 8016024:	2300      	moveq	r3, #0
 8016026:	b2db      	uxtb	r3, r3
 8016028:	2b00      	cmp	r3, #0
 801602a:	f47f aeb7 	bne.w	8015d9c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 801602e:	bf00      	nop
 8016030:	bf00      	nop
 8016032:	3750      	adds	r7, #80	@ 0x50
 8016034:	46bd      	mov	sp, r7
 8016036:	bdb0      	pop	{r4, r5, r7, pc}
 8016038:	3fe00000 	.word	0x3fe00000

0801603c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 801603c:	b480      	push	{r7}
 801603e:	b0ab      	sub	sp, #172	@ 0xac
 8016040:	af00      	add	r7, sp, #0
 8016042:	60f8      	str	r0, [r7, #12]
 8016044:	60b9      	str	r1, [r7, #8]
 8016046:	607a      	str	r2, [r7, #4]
 8016048:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	68ba      	ldr	r2, [r7, #8]
 8016058:	fb02 f303 	mul.w	r3, r2, r3
 801605c:	00db      	lsls	r3, r3, #3
 801605e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016062:	441a      	add	r2, r3
 8016064:	f107 0318 	add.w	r3, r7, #24
 8016068:	e892 0003 	ldmia.w	r2, {r0, r1}
 801606c:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	68ba      	ldr	r2, [r7, #8]
 8016074:	fb02 f303 	mul.w	r3, r2, r3
 8016078:	011b      	lsls	r3, r3, #4
 801607a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801607e:	441a      	add	r2, r3
 8016080:	f107 0310 	add.w	r3, r7, #16
 8016084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016088:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    Fout1=Fout0+m;
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	00db      	lsls	r3, r3, #3
 8016096:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801609a:	4413      	add	r3, r2
 801609c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    Fout2=Fout0+2*m;
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	011b      	lsls	r3, r3, #4
 80160a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80160a8:	4413      	add	r3, r2
 80160aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    Fout3=Fout0+3*m;
 80160ae:	683a      	ldr	r2, [r7, #0]
 80160b0:	4613      	mov	r3, r2
 80160b2:	005b      	lsls	r3, r3, #1
 80160b4:	4413      	add	r3, r2
 80160b6:	00db      	lsls	r3, r3, #3
 80160b8:	461a      	mov	r2, r3
 80160ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80160be:	4413      	add	r3, r2
 80160c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    Fout4=Fout0+4*m;
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	015b      	lsls	r3, r3, #5
 80160c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80160cc:	4413      	add	r3, r2
 80160ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    tw=st->twiddles;
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80160d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    for ( u=0; u<m; ++u ) {
 80160dc:	2300      	movs	r3, #0
 80160de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80160e2:	e2a7      	b.n	8016634 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x5f8>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 80160e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80160e8:	f107 0320 	add.w	r3, r7, #32
 80160ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80160f0:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 80160f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80160f8:	ed93 7a00 	vldr	s14, [r3]
 80160fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016100:	68ba      	ldr	r2, [r7, #8]
 8016102:	fb02 f303 	mul.w	r3, r2, r3
 8016106:	00db      	lsls	r3, r3, #3
 8016108:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801610c:	4413      	add	r3, r2
 801610e:	edd3 7a00 	vldr	s15, [r3]
 8016112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801611a:	edd3 6a01 	vldr	s13, [r3, #4]
 801611e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016122:	68ba      	ldr	r2, [r7, #8]
 8016124:	fb02 f303 	mul.w	r3, r2, r3
 8016128:	00db      	lsls	r3, r3, #3
 801612a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801612e:	4413      	add	r3, r2
 8016130:	edd3 7a01 	vldr	s15, [r3, #4]
 8016134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016138:	ee77 7a67 	vsub.f32	s15, s14, s15
 801613c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8016140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016144:	ed93 7a00 	vldr	s14, [r3]
 8016148:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801614c:	68ba      	ldr	r2, [r7, #8]
 801614e:	fb02 f303 	mul.w	r3, r2, r3
 8016152:	00db      	lsls	r3, r3, #3
 8016154:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016158:	4413      	add	r3, r2
 801615a:	edd3 7a01 	vldr	s15, [r3, #4]
 801615e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016166:	edd3 6a01 	vldr	s13, [r3, #4]
 801616a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801616e:	68ba      	ldr	r2, [r7, #8]
 8016170:	fb02 f303 	mul.w	r3, r2, r3
 8016174:	00db      	lsls	r3, r3, #3
 8016176:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801617a:	4413      	add	r3, r2
 801617c:	edd3 7a00 	vldr	s15, [r3]
 8016180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016188:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 801618c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016190:	ed93 7a00 	vldr	s14, [r3]
 8016194:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016198:	68ba      	ldr	r2, [r7, #8]
 801619a:	fb02 f303 	mul.w	r3, r2, r3
 801619e:	011b      	lsls	r3, r3, #4
 80161a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80161a4:	4413      	add	r3, r2
 80161a6:	edd3 7a00 	vldr	s15, [r3]
 80161aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80161b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80161b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80161ba:	68ba      	ldr	r2, [r7, #8]
 80161bc:	fb02 f303 	mul.w	r3, r2, r3
 80161c0:	011b      	lsls	r3, r3, #4
 80161c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80161c6:	4413      	add	r3, r2
 80161c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80161cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80161d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161d4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 80161d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80161dc:	ed93 7a00 	vldr	s14, [r3]
 80161e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80161e4:	68ba      	ldr	r2, [r7, #8]
 80161e6:	fb02 f303 	mul.w	r3, r2, r3
 80161ea:	011b      	lsls	r3, r3, #4
 80161ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80161f0:	4413      	add	r3, r2
 80161f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80161f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80161fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8016202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016206:	68ba      	ldr	r2, [r7, #8]
 8016208:	fb02 f303 	mul.w	r3, r2, r3
 801620c:	011b      	lsls	r3, r3, #4
 801620e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016212:	4413      	add	r3, r2
 8016214:	edd3 7a00 	vldr	s15, [r3]
 8016218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801621c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016220:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8016224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016228:	ed93 7a00 	vldr	s14, [r3]
 801622c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016230:	68ba      	ldr	r2, [r7, #8]
 8016232:	fb03 f202 	mul.w	r2, r3, r2
 8016236:	4613      	mov	r3, r2
 8016238:	005b      	lsls	r3, r3, #1
 801623a:	4413      	add	r3, r2
 801623c:	00db      	lsls	r3, r3, #3
 801623e:	461a      	mov	r2, r3
 8016240:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016244:	4413      	add	r3, r2
 8016246:	edd3 7a00 	vldr	s15, [r3]
 801624a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801624e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016252:	edd3 6a01 	vldr	s13, [r3, #4]
 8016256:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801625a:	68ba      	ldr	r2, [r7, #8]
 801625c:	fb03 f202 	mul.w	r2, r3, r2
 8016260:	4613      	mov	r3, r2
 8016262:	005b      	lsls	r3, r3, #1
 8016264:	4413      	add	r3, r2
 8016266:	00db      	lsls	r3, r3, #3
 8016268:	461a      	mov	r2, r3
 801626a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801626e:	4413      	add	r3, r2
 8016270:	edd3 7a01 	vldr	s15, [r3, #4]
 8016274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016278:	ee77 7a67 	vsub.f32	s15, s14, s15
 801627c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8016280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016284:	ed93 7a00 	vldr	s14, [r3]
 8016288:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801628c:	68ba      	ldr	r2, [r7, #8]
 801628e:	fb03 f202 	mul.w	r2, r3, r2
 8016292:	4613      	mov	r3, r2
 8016294:	005b      	lsls	r3, r3, #1
 8016296:	4413      	add	r3, r2
 8016298:	00db      	lsls	r3, r3, #3
 801629a:	461a      	mov	r2, r3
 801629c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80162a0:	4413      	add	r3, r2
 80162a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80162a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80162ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80162b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80162b6:	68ba      	ldr	r2, [r7, #8]
 80162b8:	fb03 f202 	mul.w	r2, r3, r2
 80162bc:	4613      	mov	r3, r2
 80162be:	005b      	lsls	r3, r3, #1
 80162c0:	4413      	add	r3, r2
 80162c2:	00db      	lsls	r3, r3, #3
 80162c4:	461a      	mov	r2, r3
 80162c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80162ca:	4413      	add	r3, r2
 80162cc:	edd3 7a00 	vldr	s15, [r3]
 80162d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80162d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162d8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 80162dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80162e0:	ed93 7a00 	vldr	s14, [r3]
 80162e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80162e8:	68ba      	ldr	r2, [r7, #8]
 80162ea:	fb02 f303 	mul.w	r3, r2, r3
 80162ee:	015b      	lsls	r3, r3, #5
 80162f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80162f4:	4413      	add	r3, r2
 80162f6:	edd3 7a00 	vldr	s15, [r3]
 80162fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016302:	edd3 6a01 	vldr	s13, [r3, #4]
 8016306:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801630a:	68ba      	ldr	r2, [r7, #8]
 801630c:	fb02 f303 	mul.w	r3, r2, r3
 8016310:	015b      	lsls	r3, r3, #5
 8016312:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016316:	4413      	add	r3, r2
 8016318:	edd3 7a01 	vldr	s15, [r3, #4]
 801631c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016324:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 8016328:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801632c:	ed93 7a00 	vldr	s14, [r3]
 8016330:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016334:	68ba      	ldr	r2, [r7, #8]
 8016336:	fb02 f303 	mul.w	r3, r2, r3
 801633a:	015b      	lsls	r3, r3, #5
 801633c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016340:	4413      	add	r3, r2
 8016342:	edd3 7a01 	vldr	s15, [r3, #4]
 8016346:	ee27 7a27 	vmul.f32	s14, s14, s15
 801634a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801634e:	edd3 6a01 	vldr	s13, [r3, #4]
 8016352:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016356:	68ba      	ldr	r2, [r7, #8]
 8016358:	fb02 f303 	mul.w	r3, r2, r3
 801635c:	015b      	lsls	r3, r3, #5
 801635e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016362:	4413      	add	r3, r2
 8016364:	edd3 7a00 	vldr	s15, [r3]
 8016368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801636c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016370:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8016374:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8016378:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801637c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016380:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8016384:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8016388:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 801638c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016390:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8016394:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8016398:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801639c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163a0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 80163a4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80163a8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80163ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163b0:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 80163b4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80163b8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80163bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163c0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 80163c4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80163c8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80163cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163d0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 80163d4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80163d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80163dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163e0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
 80163e4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80163e8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80163ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163f0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 80163f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80163f8:	ed93 7a00 	vldr	s14, [r3]
 80163fc:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8016400:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8016404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016408:	ee77 7a27 	vadd.f32	s15, s14, s15
 801640c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016410:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8016414:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016418:	ed93 7a01 	vldr	s14, [r3, #4]
 801641c:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8016420:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8016424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016428:	ee77 7a27 	vadd.f32	s15, s14, s15
 801642c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016430:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8016434:	ed97 7a08 	vldr	s14, [r7, #32]
 8016438:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 801643c:	edd7 7a06 	vldr	s15, [r7, #24]
 8016440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016448:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 801644c:	edd7 7a04 	vldr	s15, [r7, #16]
 8016450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016458:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 801645c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8016460:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8016464:	edd7 7a06 	vldr	s15, [r7, #24]
 8016468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801646c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016470:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8016474:	edd7 7a04 	vldr	s15, [r7, #16]
 8016478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801647c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016480:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8016484:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8016488:	edd7 7a07 	vldr	s15, [r7, #28]
 801648c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016490:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8016494:	edd7 7a05 	vldr	s15, [r7, #20]
 8016498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801649c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164a0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 80164a4:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80164a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80164ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164b0:	eeb1 7a67 	vneg.f32	s14, s15
 80164b4:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 80164b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80164bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80164c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164c4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 80164c8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80164cc:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80164d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80164d8:	edc3 7a00 	vstr	s15, [r3]
 80164dc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80164e0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80164e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80164ec:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 80164f0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80164f4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80164f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016500:	edc3 7a00 	vstr	s15, [r3]
 8016504:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8016508:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801650c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016510:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016514:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8016518:	ed97 7a08 	vldr	s14, [r7, #32]
 801651c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8016520:	edd7 7a04 	vldr	s15, [r7, #16]
 8016524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016528:	ee37 7a27 	vadd.f32	s14, s14, s15
 801652c:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8016530:	edd7 7a06 	vldr	s15, [r7, #24]
 8016534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016538:	ee77 7a27 	vadd.f32	s15, s14, s15
 801653c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8016540:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8016544:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8016548:	edd7 7a04 	vldr	s15, [r7, #16]
 801654c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016554:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8016558:	edd7 7a06 	vldr	s15, [r7, #24]
 801655c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016564:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8016568:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 801656c:	edd7 7a07 	vldr	s15, [r7, #28]
 8016570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016574:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8016578:	edd7 7a05 	vldr	s15, [r7, #20]
 801657c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016584:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8016588:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 801658c:	edd7 7a05 	vldr	s15, [r7, #20]
 8016590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016594:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8016598:	edd7 7a07 	vldr	s15, [r7, #28]
 801659c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80165a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165a4:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 80165a8:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80165ac:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80165b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80165b8:	edc3 7a00 	vstr	s15, [r3]
 80165bc:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80165c0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80165c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80165cc:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 80165d0:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80165d4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80165d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80165e0:	edc3 7a00 	vstr	s15, [r3]
 80165e4:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80165e8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80165ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80165f4:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 80165f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80165fc:	3308      	adds	r3, #8
 80165fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016606:	3308      	adds	r3, #8
 8016608:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801660c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016610:	3308      	adds	r3, #8
 8016612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8016616:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801661a:	3308      	adds	r3, #8
 801661c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8016620:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016624:	3308      	adds	r3, #8
 8016626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    for ( u=0; u<m; ++u ) {
 801662a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801662e:	3301      	adds	r3, #1
 8016630:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8016634:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	429a      	cmp	r2, r3
 801663c:	f6ff ad52 	blt.w	80160e4 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa8>
    }
}
 8016640:	bf00      	nop
 8016642:	bf00      	nop
 8016644:	37ac      	adds	r7, #172	@ 0xac
 8016646:	46bd      	mov	sp, r7
 8016648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664c:	4770      	bx	lr

0801664e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 801664e:	b580      	push	{r7, lr}
 8016650:	b08e      	sub	sp, #56	@ 0x38
 8016652:	af00      	add	r7, sp, #0
 8016654:	60f8      	str	r0, [r7, #12]
 8016656:	60b9      	str	r1, [r7, #8]
 8016658:	607a      	str	r2, [r7, #4]
 801665a:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016662:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 801666a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801666c:	00db      	lsls	r3, r3, #3
 801666e:	4618      	mov	r0, r3
 8016670:	f000 fe92 	bl	8017398 <_Z9ei_mallocj>
 8016674:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8016676:	2300      	movs	r3, #0
 8016678:	637b      	str	r3, [r7, #52]	@ 0x34
 801667a:	e0b4      	b.n	80167e6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x198>
        k=u;
 801667c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801667e:	633b      	str	r3, [r7, #48]	@ 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8016680:	2300      	movs	r3, #0
 8016682:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016684:	e013      	b.n	80166ae <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x60>
            scratch[q1] = Fout[ k  ];
 8016686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016688:	00db      	lsls	r3, r3, #3
 801668a:	68fa      	ldr	r2, [r7, #12]
 801668c:	18d1      	adds	r1, r2, r3
 801668e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016690:	00db      	lsls	r3, r3, #3
 8016692:	69ba      	ldr	r2, [r7, #24]
 8016694:	4413      	add	r3, r2
 8016696:	460a      	mov	r2, r1
 8016698:	e892 0003 	ldmia.w	r2, {r0, r1}
 801669c:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 80166a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	4413      	add	r3, r2
 80166a6:	633b      	str	r3, [r7, #48]	@ 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80166a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166aa:	3301      	adds	r3, #1
 80166ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80166ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80166b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166b2:	429a      	cmp	r2, r3
 80166b4:	dbe7      	blt.n	8016686 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x38>
        }

        k=u;
 80166b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166b8:	633b      	str	r3, [r7, #48]	@ 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80166ba:	2300      	movs	r3, #0
 80166bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80166be:	e08a      	b.n	80167d6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x188>
            int twidx=0;
 80166c0:	2300      	movs	r3, #0
 80166c2:	627b      	str	r3, [r7, #36]	@ 0x24
            Fout[ k ] = scratch[0];
 80166c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166c6:	00db      	lsls	r3, r3, #3
 80166c8:	68fa      	ldr	r2, [r7, #12]
 80166ca:	4413      	add	r3, r2
 80166cc:	69ba      	ldr	r2, [r7, #24]
 80166ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80166d2:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 80166d6:	2301      	movs	r3, #1
 80166d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80166da:	e071      	b.n	80167c0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x172>
                twidx += fstride * k;
 80166dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166de:	68ba      	ldr	r2, [r7, #8]
 80166e0:	fb03 f202 	mul.w	r2, r3, r2
 80166e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166e6:	4413      	add	r3, r2
 80166e8:	627b      	str	r3, [r7, #36]	@ 0x24
                if (twidx>=Norig) twidx-=Norig;
 80166ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	429a      	cmp	r2, r3
 80166f0:	db03      	blt.n	80166fa <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xac>
 80166f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166f4:	69fb      	ldr	r3, [r7, #28]
 80166f6:	1ad3      	subs	r3, r2, r3
 80166f8:	627b      	str	r3, [r7, #36]	@ 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 80166fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166fc:	00db      	lsls	r3, r3, #3
 80166fe:	69ba      	ldr	r2, [r7, #24]
 8016700:	4413      	add	r3, r2
 8016702:	ed93 7a00 	vldr	s14, [r3]
 8016706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016708:	00db      	lsls	r3, r3, #3
 801670a:	6a3a      	ldr	r2, [r7, #32]
 801670c:	4413      	add	r3, r2
 801670e:	edd3 7a00 	vldr	s15, [r3]
 8016712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016718:	00db      	lsls	r3, r3, #3
 801671a:	69ba      	ldr	r2, [r7, #24]
 801671c:	4413      	add	r3, r2
 801671e:	edd3 6a01 	vldr	s13, [r3, #4]
 8016722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016724:	00db      	lsls	r3, r3, #3
 8016726:	6a3a      	ldr	r2, [r7, #32]
 8016728:	4413      	add	r3, r2
 801672a:	edd3 7a01 	vldr	s15, [r3, #4]
 801672e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016736:	edc7 7a04 	vstr	s15, [r7, #16]
 801673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801673c:	00db      	lsls	r3, r3, #3
 801673e:	69ba      	ldr	r2, [r7, #24]
 8016740:	4413      	add	r3, r2
 8016742:	ed93 7a00 	vldr	s14, [r3]
 8016746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016748:	00db      	lsls	r3, r3, #3
 801674a:	6a3a      	ldr	r2, [r7, #32]
 801674c:	4413      	add	r3, r2
 801674e:	edd3 7a01 	vldr	s15, [r3, #4]
 8016752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016758:	00db      	lsls	r3, r3, #3
 801675a:	69ba      	ldr	r2, [r7, #24]
 801675c:	4413      	add	r3, r2
 801675e:	edd3 6a01 	vldr	s13, [r3, #4]
 8016762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016764:	00db      	lsls	r3, r3, #3
 8016766:	6a3a      	ldr	r2, [r7, #32]
 8016768:	4413      	add	r3, r2
 801676a:	edd3 7a00 	vldr	s15, [r3]
 801676e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016776:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 801677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801677c:	00db      	lsls	r3, r3, #3
 801677e:	68fa      	ldr	r2, [r7, #12]
 8016780:	4413      	add	r3, r2
 8016782:	ed93 7a00 	vldr	s14, [r3]
 8016786:	edd7 7a04 	vldr	s15, [r7, #16]
 801678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801678c:	00db      	lsls	r3, r3, #3
 801678e:	68fa      	ldr	r2, [r7, #12]
 8016790:	4413      	add	r3, r2
 8016792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016796:	edc3 7a00 	vstr	s15, [r3]
 801679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801679c:	00db      	lsls	r3, r3, #3
 801679e:	68fa      	ldr	r2, [r7, #12]
 80167a0:	4413      	add	r3, r2
 80167a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80167a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80167aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167ac:	00db      	lsls	r3, r3, #3
 80167ae:	68fa      	ldr	r2, [r7, #12]
 80167b0:	4413      	add	r3, r2
 80167b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80167b6:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 80167ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167bc:	3301      	adds	r3, #1
 80167be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80167c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80167c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80167c4:	429a      	cmp	r2, r3
 80167c6:	db89      	blt.n	80166dc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x8e>
            }
            k += m;
 80167c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	4413      	add	r3, r2
 80167ce:	633b      	str	r3, [r7, #48]	@ 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80167d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167d2:	3301      	adds	r3, #1
 80167d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80167d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80167d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80167da:	429a      	cmp	r2, r3
 80167dc:	f6ff af70 	blt.w	80166c0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x72>
    for ( u=0; u<m; ++u ) {
 80167e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167e2:	3301      	adds	r3, #1
 80167e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80167e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	429a      	cmp	r2, r3
 80167ec:	f6ff af46 	blt.w	801667c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2e>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 80167f0:	69b8      	ldr	r0, [r7, #24]
 80167f2:	f000 fdeb 	bl	80173cc <_Z7ei_freePv>
}
 80167f6:	bf00      	nop
 80167f8:	3738      	adds	r7, #56	@ 0x38
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
	...

08016800 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b08a      	sub	sp, #40	@ 0x28
 8016804:	af02      	add	r7, sp, #8
 8016806:	60f8      	str	r0, [r7, #12]
 8016808:	60b9      	str	r1, [r7, #8]
 801680a:	607a      	str	r2, [r7, #4]
 801680c:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 8016812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016814:	1d1a      	adds	r2, r3, #4
 8016816:	62ba      	str	r2, [r7, #40]	@ 0x28
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 801681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801681e:	1d1a      	adds	r2, r3, #4
 8016820:	62ba      	str	r2, [r7, #40]	@ 0x28
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	697a      	ldr	r2, [r7, #20]
 801682a:	fb02 f303 	mul.w	r3, r2, r3
 801682e:	00db      	lsls	r3, r3, #3
 8016830:	68fa      	ldr	r2, [r7, #12]
 8016832:	4413      	add	r3, r2
 8016834:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 8016836:	697b      	ldr	r3, [r7, #20]
 8016838:	2b01      	cmp	r3, #1
 801683a:	d11a      	bne.n	8016872 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	68ba      	ldr	r2, [r7, #8]
 8016840:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016844:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	687a      	ldr	r2, [r7, #4]
 801684c:	fb02 f303 	mul.w	r3, r2, r3
 8016850:	00db      	lsls	r3, r3, #3
 8016852:	68ba      	ldr	r2, [r7, #8]
 8016854:	4413      	add	r3, r2
 8016856:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	3308      	adds	r3, #8
 801685c:	60fb      	str	r3, [r7, #12]
 801685e:	68fa      	ldr	r2, [r7, #12]
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	429a      	cmp	r2, r3
 8016864:	bf14      	ite	ne
 8016866:	2301      	movne	r3, #1
 8016868:	2300      	moveq	r3, #0
 801686a:	b2db      	uxtb	r3, r3
 801686c:	2b00      	cmp	r3, #0
 801686e:	d1e5      	bne.n	801683c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
 8016870:	e022      	b.n	80168b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xb8>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8016872:	69bb      	ldr	r3, [r7, #24]
 8016874:	687a      	ldr	r2, [r7, #4]
 8016876:	fb03 f202 	mul.w	r2, r3, r2
 801687a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801687c:	9301      	str	r3, [sp, #4]
 801687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016880:	9300      	str	r3, [sp, #0]
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	68b9      	ldr	r1, [r7, #8]
 8016886:	68f8      	ldr	r0, [r7, #12]
 8016888:	f7ff ffba 	bl	8016800 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 801688c:	683b      	ldr	r3, [r7, #0]
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	fb02 f303 	mul.w	r3, r2, r3
 8016894:	00db      	lsls	r3, r3, #3
 8016896:	68ba      	ldr	r2, [r7, #8]
 8016898:	4413      	add	r3, r2
 801689a:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	00db      	lsls	r3, r3, #3
 80168a0:	68fa      	ldr	r2, [r7, #12]
 80168a2:	4413      	add	r3, r2
 80168a4:	60fb      	str	r3, [r7, #12]
 80168a6:	68fa      	ldr	r2, [r7, #12]
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	bf14      	ite	ne
 80168ae:	2301      	movne	r3, #1
 80168b0:	2300      	moveq	r3, #0
 80168b2:	b2db      	uxtb	r3, r3
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1dc      	bne.n	8016872 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 80168b8:	69fb      	ldr	r3, [r7, #28]
 80168ba:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 80168bc:	69bb      	ldr	r3, [r7, #24]
 80168be:	3b02      	subs	r3, #2
 80168c0:	2b03      	cmp	r3, #3
 80168c2:	d827      	bhi.n	8016914 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 80168c4:	a201      	add	r2, pc, #4	@ (adr r2, 80168cc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 80168c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168ca:	bf00      	nop
 80168cc:	080168dd 	.word	0x080168dd
 80168d0:	080168eb 	.word	0x080168eb
 80168d4:	080168f9 	.word	0x080168f9
 80168d8:	08016907 	.word	0x08016907
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 80168dc:	697b      	ldr	r3, [r7, #20]
 80168de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80168e0:	6879      	ldr	r1, [r7, #4]
 80168e2:	68f8      	ldr	r0, [r7, #12]
 80168e4:	f7ff f805 	bl	80158f2 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 80168e8:	e01d      	b.n	8016926 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 80168ea:	697b      	ldr	r3, [r7, #20]
 80168ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80168ee:	6879      	ldr	r1, [r7, #4]
 80168f0:	68f8      	ldr	r0, [r7, #12]
 80168f2:	f7ff fa33 	bl	8015d5c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 80168f6:	e016      	b.n	8016926 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 80168f8:	697b      	ldr	r3, [r7, #20]
 80168fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80168fc:	6879      	ldr	r1, [r7, #4]
 80168fe:	68f8      	ldr	r0, [r7, #12]
 8016900:	f7ff f874 	bl	80159ec <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 8016904:	e00f      	b.n	8016926 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 8016906:	697b      	ldr	r3, [r7, #20]
 8016908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801690a:	6879      	ldr	r1, [r7, #4]
 801690c:	68f8      	ldr	r0, [r7, #12]
 801690e:	f7ff fb95 	bl	801603c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 8016912:	e008      	b.n	8016926 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8016914:	69bb      	ldr	r3, [r7, #24]
 8016916:	9300      	str	r3, [sp, #0]
 8016918:	697b      	ldr	r3, [r7, #20]
 801691a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801691c:	6879      	ldr	r1, [r7, #4]
 801691e:	68f8      	ldr	r0, [r7, #12]
 8016920:	f7ff fe95 	bl	801664e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8016924:	bf00      	nop
    }
}
 8016926:	bf00      	nop
 8016928:	3720      	adds	r7, #32
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}
 801692e:	bf00      	nop

08016930 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b086      	sub	sp, #24
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
 8016938:	6039      	str	r1, [r7, #0]
    int p=4;
 801693a:	2304      	movs	r3, #4
 801693c:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 801693e:	6878      	ldr	r0, [r7, #4]
 8016940:	f7e9 fe20 	bl	8000584 <__aeabi_i2d>
 8016944:	4602      	mov	r2, r0
 8016946:	460b      	mov	r3, r1
 8016948:	ec43 2b10 	vmov	d0, r2, r3
 801694c:	f003 fc56 	bl	801a1fc <sqrt>
 8016950:	eeb0 7a40 	vmov.f32	s14, s0
 8016954:	eef0 7a60 	vmov.f32	s15, s1
 8016958:	eeb0 0a47 	vmov.f32	s0, s14
 801695c:	eef0 0a67 	vmov.f32	s1, s15
 8016960:	f003 ffd6 	bl	801a910 <floor>
 8016964:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8016968:	e01e      	b.n	80169a8 <_ZL9kf_factoriPi+0x78>
            switch (p) {
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	2b02      	cmp	r3, #2
 801696e:	d005      	beq.n	801697c <_ZL9kf_factoriPi+0x4c>
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	2b04      	cmp	r3, #4
 8016974:	d105      	bne.n	8016982 <_ZL9kf_factoriPi+0x52>
                case 4: p = 2; break;
 8016976:	2302      	movs	r3, #2
 8016978:	617b      	str	r3, [r7, #20]
 801697a:	e006      	b.n	801698a <_ZL9kf_factoriPi+0x5a>
                case 2: p = 3; break;
 801697c:	2303      	movs	r3, #3
 801697e:	617b      	str	r3, [r7, #20]
 8016980:	e003      	b.n	801698a <_ZL9kf_factoriPi+0x5a>
                default: p += 2; break;
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	3302      	adds	r3, #2
 8016986:	617b      	str	r3, [r7, #20]
 8016988:	bf00      	nop
            }
            if (p > floor_sqrt)
 801698a:	6978      	ldr	r0, [r7, #20]
 801698c:	f7e9 fdfa 	bl	8000584 <__aeabi_i2d>
 8016990:	4602      	mov	r2, r0
 8016992:	460b      	mov	r3, r1
 8016994:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016998:	f7ea f8d0 	bl	8000b3c <__aeabi_dcmplt>
 801699c:	4603      	mov	r3, r0
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d100      	bne.n	80169a4 <_ZL9kf_factoriPi+0x74>
 80169a2:	e001      	b.n	80169a8 <_ZL9kf_factoriPi+0x78>
                p = n;          /* no more factors, skip to end */
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	617b      	str	r3, [r7, #20]
        while (n % p) {
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	697a      	ldr	r2, [r7, #20]
 80169ac:	fb93 f2f2 	sdiv	r2, r3, r2
 80169b0:	6979      	ldr	r1, [r7, #20]
 80169b2:	fb01 f202 	mul.w	r2, r1, r2
 80169b6:	1a9b      	subs	r3, r3, r2
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d1d6      	bne.n	801696a <_ZL9kf_factoriPi+0x3a>
        }
        n /= p;
 80169bc:	687a      	ldr	r2, [r7, #4]
 80169be:	697b      	ldr	r3, [r7, #20]
 80169c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80169c4:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	1d1a      	adds	r2, r3, #4
 80169ca:	603a      	str	r2, [r7, #0]
 80169cc:	697a      	ldr	r2, [r7, #20]
 80169ce:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	1d1a      	adds	r2, r3, #4
 80169d4:	603a      	str	r2, [r7, #0]
 80169d6:	687a      	ldr	r2, [r7, #4]
 80169d8:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2b01      	cmp	r3, #1
 80169de:	dce3      	bgt.n	80169a8 <_ZL9kf_factoriPi+0x78>
}
 80169e0:	bf00      	nop
 80169e2:	bf00      	nop
 80169e4:	3718      	adds	r7, #24
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}
 80169ea:	0000      	movs	r0, r0
 80169ec:	0000      	movs	r0, r0
	...

080169f0 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 80169f0:	b5b0      	push	{r4, r5, r7, lr}
 80169f2:	b090      	sub	sp, #64	@ 0x40
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	60f8      	str	r0, [r7, #12]
 80169f8:	60b9      	str	r1, [r7, #8]
 80169fa:	607a      	str	r2, [r7, #4]
 80169fc:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 80169fe:	2300      	movs	r3, #0
 8016a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	3321      	adds	r3, #33	@ 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 8016a06:	00db      	lsls	r3, r3, #3
 8016a08:	637b      	str	r3, [r7, #52]	@ 0x34

    if ( lenmem==NULL ) {
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d104      	bne.n	8016a1a <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8016a10:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016a12:	f000 fcc1 	bl	8017398 <_Z9ei_mallocj>
 8016a16:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8016a18:	e00c      	b.n	8016a34 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d006      	beq.n	8016a2e <kiss_fft_alloc+0x3e>
 8016a20:	683b      	ldr	r3, [r7, #0]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016a26:	429a      	cmp	r2, r3
 8016a28:	d801      	bhi.n	8016a2e <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        *lenmem = memneeded;
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016a32:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 8016a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	f000 80a0 	beq.w	8016b7c <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 8016a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a3e:	68fa      	ldr	r2, [r7, #12]
 8016a40:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 8016a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a44:	68ba      	ldr	r2, [r7, #8]
 8016a46:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8016a48:	68bb      	ldr	r3, [r7, #8]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d048      	beq.n	8016ae0 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 8016a4e:	2300      	movs	r3, #0
 8016a50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016a52:	e040      	b.n	8016ad6 <kiss_fft_alloc+0xe6>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8016a54:	a350      	add	r3, pc, #320	@ (adr r3, 8016b98 <kiss_fft_alloc+0x1a8>)
 8016a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 8016a5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016a60:	f7e9 fd90 	bl	8000584 <__aeabi_i2d>
 8016a64:	a34e      	add	r3, pc, #312	@ (adr r3, 8016ba0 <kiss_fft_alloc+0x1b0>)
 8016a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a6a:	f7e9 fdf5 	bl	8000658 <__aeabi_dmul>
 8016a6e:	4602      	mov	r2, r0
 8016a70:	460b      	mov	r3, r1
 8016a72:	4614      	mov	r4, r2
 8016a74:	461d      	mov	r5, r3
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	f7e9 fd84 	bl	8000584 <__aeabi_i2d>
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	460b      	mov	r3, r1
 8016a80:	4620      	mov	r0, r4
 8016a82:	4629      	mov	r1, r5
 8016a84:	f7e9 ff12 	bl	80008ac <__aeabi_ddiv>
 8016a88:	4602      	mov	r2, r0
 8016a8a:	460b      	mov	r3, r1
 8016a8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 8016a90:	ed97 0b04 	vldr	d0, [r7, #16]
 8016a94:	f003 fbe0 	bl	801a258 <cos>
 8016a98:	ec51 0b10 	vmov	r0, r1, d0
 8016a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a9e:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 8016aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016aa4:	00db      	lsls	r3, r3, #3
 8016aa6:	18d4      	adds	r4, r2, r3
 8016aa8:	f7ea f8ce 	bl	8000c48 <__aeabi_d2f>
 8016aac:	4603      	mov	r3, r0
 8016aae:	6023      	str	r3, [r4, #0]
 8016ab0:	ed97 0b04 	vldr	d0, [r7, #16]
 8016ab4:	f003 fc5c 	bl	801a370 <sin>
 8016ab8:	ec51 0b10 	vmov	r0, r1, d0
 8016abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016abe:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 8016ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ac4:	00db      	lsls	r3, r3, #3
 8016ac6:	18d4      	adds	r4, r2, r3
 8016ac8:	f7ea f8be 	bl	8000c48 <__aeabi_d2f>
 8016acc:	4603      	mov	r3, r0
 8016ace:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8016ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ad2:	3301      	adds	r3, #1
 8016ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016ad6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	429a      	cmp	r2, r3
 8016adc:	dbba      	blt.n	8016a54 <kiss_fft_alloc+0x64>
 8016ade:	e047      	b.n	8016b70 <kiss_fft_alloc+0x180>
            }
        } else {
            for (i=0;i<nfft;++i) {
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016ae4:	e040      	b.n	8016b68 <kiss_fft_alloc+0x178>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8016ae6:	a32c      	add	r3, pc, #176	@ (adr r3, 8016b98 <kiss_fft_alloc+0x1a8>)
 8016ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
                double phase = -2*pi*i / nfft;
 8016af0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016af2:	f7e9 fd47 	bl	8000584 <__aeabi_i2d>
 8016af6:	a32c      	add	r3, pc, #176	@ (adr r3, 8016ba8 <kiss_fft_alloc+0x1b8>)
 8016af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016afc:	f7e9 fdac 	bl	8000658 <__aeabi_dmul>
 8016b00:	4602      	mov	r2, r0
 8016b02:	460b      	mov	r3, r1
 8016b04:	4614      	mov	r4, r2
 8016b06:	461d      	mov	r5, r3
 8016b08:	68f8      	ldr	r0, [r7, #12]
 8016b0a:	f7e9 fd3b 	bl	8000584 <__aeabi_i2d>
 8016b0e:	4602      	mov	r2, r0
 8016b10:	460b      	mov	r3, r1
 8016b12:	4620      	mov	r0, r4
 8016b14:	4629      	mov	r1, r5
 8016b16:	f7e9 fec9 	bl	80008ac <__aeabi_ddiv>
 8016b1a:	4602      	mov	r2, r0
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 8016b22:	ed97 0b08 	vldr	d0, [r7, #32]
 8016b26:	f003 fb97 	bl	801a258 <cos>
 8016b2a:	ec51 0b10 	vmov	r0, r1, d0
 8016b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016b30:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 8016b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b36:	00db      	lsls	r3, r3, #3
 8016b38:	18d4      	adds	r4, r2, r3
 8016b3a:	f7ea f885 	bl	8000c48 <__aeabi_d2f>
 8016b3e:	4603      	mov	r3, r0
 8016b40:	6023      	str	r3, [r4, #0]
 8016b42:	ed97 0b08 	vldr	d0, [r7, #32]
 8016b46:	f003 fc13 	bl	801a370 <sin>
 8016b4a:	ec51 0b10 	vmov	r0, r1, d0
 8016b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016b50:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 8016b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b56:	00db      	lsls	r3, r3, #3
 8016b58:	18d4      	adds	r4, r2, r3
 8016b5a:	f7ea f875 	bl	8000c48 <__aeabi_d2f>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8016b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b64:	3301      	adds	r3, #1
 8016b66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016b68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	dbba      	blt.n	8016ae6 <kiss_fft_alloc+0xf6>
            }
        }

        kf_factor(nfft,st->factors);
 8016b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016b72:	3308      	adds	r3, #8
 8016b74:	4619      	mov	r1, r3
 8016b76:	68f8      	ldr	r0, [r7, #12]
 8016b78:	f7ff feda 	bl	8016930 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 8016b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d002      	beq.n	8016b88 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 8016b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016b84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016b86:	601a      	str	r2, [r3, #0]
    }

    return st;
 8016b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3740      	adds	r7, #64	@ 0x40
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bdb0      	pop	{r4, r5, r7, pc}
 8016b92:	bf00      	nop
 8016b94:	f3af 8000 	nop.w
 8016b98:	54442d18 	.word	0x54442d18
 8016b9c:	400921fb 	.word	0x400921fb
 8016ba0:	54442d18 	.word	0x54442d18
 8016ba4:	401921fb 	.word	0x401921fb
 8016ba8:	54442d18 	.word	0x54442d18
 8016bac:	c01921fb 	.word	0xc01921fb

08016bb0 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b088      	sub	sp, #32
 8016bb4:	af02      	add	r7, sp, #8
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	60b9      	str	r1, [r7, #8]
 8016bba:	607a      	str	r2, [r7, #4]
 8016bbc:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 8016bbe:	68ba      	ldr	r2, [r7, #8]
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	d11d      	bne.n	8016c02 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	00db      	lsls	r3, r3, #3
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f000 fbe3 	bl	8017398 <_Z9ei_mallocj>
 8016bd2:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	3308      	adds	r3, #8
 8016bd8:	68fa      	ldr	r2, [r7, #12]
 8016bda:	9201      	str	r2, [sp, #4]
 8016bdc:	9300      	str	r3, [sp, #0]
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	2201      	movs	r2, #1
 8016be2:	68b9      	ldr	r1, [r7, #8]
 8016be4:	6978      	ldr	r0, [r7, #20]
 8016be6:	f7ff fe0b 	bl	8016800 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	00db      	lsls	r3, r3, #3
 8016bf0:	461a      	mov	r2, r3
 8016bf2:	6979      	ldr	r1, [r7, #20]
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	f007 fed6 	bl	801e9a6 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 8016bfa:	6978      	ldr	r0, [r7, #20]
 8016bfc:	f000 fbe6 	bl	80173cc <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8016c00:	e00a      	b.n	8016c18 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	3308      	adds	r3, #8
 8016c06:	68fa      	ldr	r2, [r7, #12]
 8016c08:	9201      	str	r2, [sp, #4]
 8016c0a:	9300      	str	r3, [sp, #0]
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	2201      	movs	r2, #1
 8016c10:	68b9      	ldr	r1, [r7, #8]
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	f7ff fdf4 	bl	8016800 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8016c18:	bf00      	nop
 8016c1a:	3718      	adds	r7, #24
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	60f8      	str	r0, [r7, #12]
 8016c28:	60b9      	str	r1, [r7, #8]
 8016c2a:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	687a      	ldr	r2, [r7, #4]
 8016c30:	68b9      	ldr	r1, [r7, #8]
 8016c32:	68f8      	ldr	r0, [r7, #12]
 8016c34:	f7ff ffbc 	bl	8016bb0 <kiss_fft_stride>
}
 8016c38:	bf00      	nop
 8016c3a:	3710      	adds	r7, #16
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}

08016c40 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8016c40:	b5b0      	push	{r4, r5, r7, lr}
 8016c42:	b090      	sub	sp, #64	@ 0x40
 8016c44:	af02      	add	r7, sp, #8
 8016c46:	60f8      	str	r0, [r7, #12]
 8016c48:	60b9      	str	r1, [r7, #8]
 8016c4a:	607a      	str	r2, [r7, #4]
 8016c4c:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 8016c4e:	2300      	movs	r3, #0
 8016c50:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t subsize = 0, memneeded;
 8016c52:	2300      	movs	r3, #0
 8016c54:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	f003 0301 	and.w	r3, r3, #1
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d004      	beq.n	8016c6a <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8016c60:	4887      	ldr	r0, [pc, #540]	@ (8016e80 <kiss_fftr_alloc+0x240>)
 8016c62:	f7f2 f8e3 	bl	8008e2c <_Z9ei_printfPKcz>
        return NULL;
 8016c66:	2300      	movs	r3, #0
 8016c68:	e0fc      	b.n	8016e64 <kiss_fftr_alloc+0x224>
    }
    nfft >>= 1;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	105b      	asrs	r3, r3, #1
 8016c6e:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8016c70:	f107 0314 	add.w	r3, r7, #20
 8016c74:	2200      	movs	r2, #0
 8016c76:	9200      	str	r2, [sp, #0]
 8016c78:	2200      	movs	r2, #0
 8016c7a:	68b9      	ldr	r1, [r7, #8]
 8016c7c:	68f8      	ldr	r0, [r7, #12]
 8016c7e:	f7ff feb7 	bl	80169f0 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 8016c82:	68fa      	ldr	r2, [r7, #12]
 8016c84:	4613      	mov	r3, r2
 8016c86:	005b      	lsls	r3, r3, #1
 8016c88:	4413      	add	r3, r2
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	da00      	bge.n	8016c90 <kiss_fftr_alloc+0x50>
 8016c8e:	3301      	adds	r3, #1
 8016c90:	105b      	asrs	r3, r3, #1
 8016c92:	00da      	lsls	r2, r3, #3
 8016c94:	697b      	ldr	r3, [r7, #20]
 8016c96:	4413      	add	r3, r2
 8016c98:	330c      	adds	r3, #12
 8016c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (lenmem == NULL) {
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d104      	bne.n	8016cac <kiss_fftr_alloc+0x6c>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 8016ca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016ca4:	f000 fb78 	bl	8017398 <_Z9ei_mallocj>
 8016ca8:	6338      	str	r0, [r7, #48]	@ 0x30
 8016caa:	e009      	b.n	8016cc0 <kiss_fftr_alloc+0x80>
    } else {
        if (*lenmem >= memneeded)
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	d801      	bhi.n	8016cba <kiss_fftr_alloc+0x7a>
            st = (kiss_fftr_cfg) mem;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	633b      	str	r3, [r7, #48]	@ 0x30
        *lenmem = memneeded;
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016cbe:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 8016cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d101      	bne.n	8016cca <kiss_fftr_alloc+0x8a>
        return NULL;
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	e0cc      	b.n	8016e64 <kiss_fftr_alloc+0x224>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 8016cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ccc:	f103 020c 	add.w	r2, r3, #12
 8016cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cd2:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 8016cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cd6:	681a      	ldr	r2, [r3, #0]
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	441a      	add	r2, r3
 8016cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cde:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 8016ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ce2:	685a      	ldr	r2, [r3, #4]
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	00db      	lsls	r3, r3, #3
 8016ce8:	441a      	add	r2, r3
 8016cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cec:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 8016cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cf0:	681a      	ldr	r2, [r3, #0]
 8016cf2:	f107 0314 	add.w	r3, r7, #20
 8016cf6:	2100      	movs	r1, #0
 8016cf8:	9100      	str	r1, [sp, #0]
 8016cfa:	68b9      	ldr	r1, [r7, #8]
 8016cfc:	68f8      	ldr	r0, [r7, #12]
 8016cfe:	f7ff fe77 	bl	80169f0 <kiss_fft_alloc>

    if (inverse_fft) {
 8016d02:	68bb      	ldr	r3, [r7, #8]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d053      	beq.n	8016db0 <kiss_fftr_alloc+0x170>
        for (i = 0; i < nfft/2; ++i) {
 8016d08:	2300      	movs	r3, #0
 8016d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d0c:	e046      	b.n	8016d9c <kiss_fftr_alloc+0x15c>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8016d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d10:	3301      	adds	r3, #1
 8016d12:	4618      	mov	r0, r3
 8016d14:	f7e9 fc36 	bl	8000584 <__aeabi_i2d>
 8016d18:	4604      	mov	r4, r0
 8016d1a:	460d      	mov	r5, r1
 8016d1c:	68f8      	ldr	r0, [r7, #12]
 8016d1e:	f7e9 fc31 	bl	8000584 <__aeabi_i2d>
 8016d22:	4602      	mov	r2, r0
 8016d24:	460b      	mov	r3, r1
 8016d26:	4620      	mov	r0, r4
 8016d28:	4629      	mov	r1, r5
 8016d2a:	f7e9 fdbf 	bl	80008ac <__aeabi_ddiv>
 8016d2e:	4602      	mov	r2, r0
 8016d30:	460b      	mov	r3, r1
 8016d32:	4610      	mov	r0, r2
 8016d34:	4619      	mov	r1, r3
 8016d36:	f04f 0200 	mov.w	r2, #0
 8016d3a:	4b52      	ldr	r3, [pc, #328]	@ (8016e84 <kiss_fftr_alloc+0x244>)
 8016d3c:	f7e9 fad6 	bl	80002ec <__adddf3>
 8016d40:	4602      	mov	r2, r0
 8016d42:	460b      	mov	r3, r1
 8016d44:	4610      	mov	r0, r2
 8016d46:	4619      	mov	r1, r3
            double phase =
 8016d48:	a349      	add	r3, pc, #292	@ (adr r3, 8016e70 <kiss_fftr_alloc+0x230>)
 8016d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d4e:	f7e9 fc83 	bl	8000658 <__aeabi_dmul>
 8016d52:	4602      	mov	r2, r0
 8016d54:	460b      	mov	r3, r1
 8016d56:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8016d5a:	ed97 0b06 	vldr	d0, [r7, #24]
 8016d5e:	f003 fa7b 	bl	801a258 <cos>
 8016d62:	ec51 0b10 	vmov	r0, r1, d0
 8016d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d68:	689a      	ldr	r2, [r3, #8]
 8016d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d6c:	00db      	lsls	r3, r3, #3
 8016d6e:	18d4      	adds	r4, r2, r3
 8016d70:	f7e9 ff6a 	bl	8000c48 <__aeabi_d2f>
 8016d74:	4603      	mov	r3, r0
 8016d76:	6023      	str	r3, [r4, #0]
 8016d78:	ed97 0b06 	vldr	d0, [r7, #24]
 8016d7c:	f003 faf8 	bl	801a370 <sin>
 8016d80:	ec51 0b10 	vmov	r0, r1, d0
 8016d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d86:	689a      	ldr	r2, [r3, #8]
 8016d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d8a:	00db      	lsls	r3, r3, #3
 8016d8c:	18d4      	adds	r4, r2, r3
 8016d8e:	f7e9 ff5b 	bl	8000c48 <__aeabi_d2f>
 8016d92:	4603      	mov	r3, r0
 8016d94:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8016d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d98:	3301      	adds	r3, #1
 8016d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	da00      	bge.n	8016da4 <kiss_fftr_alloc+0x164>
 8016da2:	3301      	adds	r3, #1
 8016da4:	105b      	asrs	r3, r3, #1
 8016da6:	461a      	mov	r2, r3
 8016da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016daa:	4293      	cmp	r3, r2
 8016dac:	dbaf      	blt.n	8016d0e <kiss_fftr_alloc+0xce>
 8016dae:	e052      	b.n	8016e56 <kiss_fftr_alloc+0x216>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 8016db0:	2300      	movs	r3, #0
 8016db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8016db4:	e046      	b.n	8016e44 <kiss_fftr_alloc+0x204>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8016db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016db8:	3301      	adds	r3, #1
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7e9 fbe2 	bl	8000584 <__aeabi_i2d>
 8016dc0:	4604      	mov	r4, r0
 8016dc2:	460d      	mov	r5, r1
 8016dc4:	68f8      	ldr	r0, [r7, #12]
 8016dc6:	f7e9 fbdd 	bl	8000584 <__aeabi_i2d>
 8016dca:	4602      	mov	r2, r0
 8016dcc:	460b      	mov	r3, r1
 8016dce:	4620      	mov	r0, r4
 8016dd0:	4629      	mov	r1, r5
 8016dd2:	f7e9 fd6b 	bl	80008ac <__aeabi_ddiv>
 8016dd6:	4602      	mov	r2, r0
 8016dd8:	460b      	mov	r3, r1
 8016dda:	4610      	mov	r0, r2
 8016ddc:	4619      	mov	r1, r3
 8016dde:	f04f 0200 	mov.w	r2, #0
 8016de2:	4b28      	ldr	r3, [pc, #160]	@ (8016e84 <kiss_fftr_alloc+0x244>)
 8016de4:	f7e9 fa82 	bl	80002ec <__adddf3>
 8016de8:	4602      	mov	r2, r0
 8016dea:	460b      	mov	r3, r1
 8016dec:	4610      	mov	r0, r2
 8016dee:	4619      	mov	r1, r3
            double phase =
 8016df0:	a321      	add	r3, pc, #132	@ (adr r3, 8016e78 <kiss_fftr_alloc+0x238>)
 8016df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016df6:	f7e9 fc2f 	bl	8000658 <__aeabi_dmul>
 8016dfa:	4602      	mov	r2, r0
 8016dfc:	460b      	mov	r3, r1
 8016dfe:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 8016e02:	ed97 0b08 	vldr	d0, [r7, #32]
 8016e06:	f003 fa27 	bl	801a258 <cos>
 8016e0a:	ec51 0b10 	vmov	r0, r1, d0
 8016e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e10:	689a      	ldr	r2, [r3, #8]
 8016e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e14:	00db      	lsls	r3, r3, #3
 8016e16:	18d4      	adds	r4, r2, r3
 8016e18:	f7e9 ff16 	bl	8000c48 <__aeabi_d2f>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	6023      	str	r3, [r4, #0]
 8016e20:	ed97 0b08 	vldr	d0, [r7, #32]
 8016e24:	f003 faa4 	bl	801a370 <sin>
 8016e28:	ec51 0b10 	vmov	r0, r1, d0
 8016e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e2e:	689a      	ldr	r2, [r3, #8]
 8016e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e32:	00db      	lsls	r3, r3, #3
 8016e34:	18d4      	adds	r4, r2, r3
 8016e36:	f7e9 ff07 	bl	8000c48 <__aeabi_d2f>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8016e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e40:	3301      	adds	r3, #1
 8016e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	da00      	bge.n	8016e4c <kiss_fftr_alloc+0x20c>
 8016e4a:	3301      	adds	r3, #1
 8016e4c:	105b      	asrs	r3, r3, #1
 8016e4e:	461a      	mov	r2, r3
 8016e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e52:	4293      	cmp	r3, r2
 8016e54:	dbaf      	blt.n	8016db6 <kiss_fftr_alloc+0x176>
        }
    }

    if (memallocated != NULL) {
 8016e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d002      	beq.n	8016e62 <kiss_fftr_alloc+0x222>
        *memallocated = memneeded;
 8016e5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e60:	601a      	str	r2, [r3, #0]
    }

    return st;
 8016e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8016e64:	4618      	mov	r0, r3
 8016e66:	3738      	adds	r7, #56	@ 0x38
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8016e6c:	f3af 8000 	nop.w
 8016e70:	54442d18 	.word	0x54442d18
 8016e74:	400921fb 	.word	0x400921fb
 8016e78:	54442d18 	.word	0x54442d18
 8016e7c:	c00921fb 	.word	0xc00921fb
 8016e80:	080219f4 	.word	0x080219f4
 8016e84:	3fe00000 	.word	0x3fe00000

08016e88 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b092      	sub	sp, #72	@ 0x48
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	60f8      	str	r0, [r7, #12]
 8016e90:	60b9      	str	r1, [r7, #8]
 8016e92:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	685b      	ldr	r3, [r3, #4]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d002      	beq.n	8016ea4 <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 8016e9e:	4888      	ldr	r0, [pc, #544]	@ (80170c0 <kiss_fftr+0x238>)
 8016ea0:	f7f1 ffc4 	bl	8008e2c <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	643b      	str	r3, [r7, #64]	@ 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	6818      	ldr	r0, [r3, #0]
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	685b      	ldr	r3, [r3, #4]
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	68b9      	ldr	r1, [r7, #8]
 8016eb8:	f7ff feb2 	bl	8016c20 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	685b      	ldr	r3, [r3, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8016ecc:	ed97 7a04 	vldr	s14, [r7, #16]
 8016ed0:	edd7 7a05 	vldr	s15, [r7, #20]
 8016ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8016ede:	ed97 7a04 	vldr	s14, [r7, #16]
 8016ee2:	edd7 7a05 	vldr	s15, [r7, #20]
 8016ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ee8:	00db      	lsls	r3, r3, #3
 8016eea:	687a      	ldr	r2, [r7, #4]
 8016eec:	4413      	add	r3, r2
 8016eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ef2:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	f04f 0200 	mov.w	r2, #0
 8016efc:	605a      	str	r2, [r3, #4]
 8016efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f00:	00db      	lsls	r3, r3, #3
 8016f02:	687a      	ldr	r2, [r7, #4]
 8016f04:	4413      	add	r3, r2
 8016f06:	687a      	ldr	r2, [r7, #4]
 8016f08:	6852      	ldr	r2, [r2, #4]
 8016f0a:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8016f10:	e0c7      	b.n	80170a2 <kiss_fftr+0x21a>
        fpk    = st->tmpbuf[k];
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	685a      	ldr	r2, [r3, #4]
 8016f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016f18:	00db      	lsls	r3, r3, #3
 8016f1a:	441a      	add	r2, r3
 8016f1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016f20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f24:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	685a      	ldr	r2, [r3, #4]
 8016f2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016f30:	1acb      	subs	r3, r1, r3
 8016f32:	00db      	lsls	r3, r3, #3
 8016f34:	4413      	add	r3, r2
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	63bb      	str	r3, [r7, #56]	@ 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	685a      	ldr	r2, [r3, #4]
 8016f3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016f42:	1acb      	subs	r3, r1, r3
 8016f44:	00db      	lsls	r3, r3, #3
 8016f46:	4413      	add	r3, r2
 8016f48:	edd3 7a01 	vldr	s15, [r3, #4]
 8016f4c:	eef1 7a67 	vneg.f32	s15, s15
 8016f50:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8016f54:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8016f58:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8016f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f60:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8016f64:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8016f68:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8016f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f70:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        C_SUB( f2k, fpk , fpnk );
 8016f74:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8016f78:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8016f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f80:	edc7 7a08 	vstr	s15, [r7, #32]
 8016f84:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8016f88:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8016f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f90:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 8016f94:	ed97 7a08 	vldr	s14, [r7, #32]
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	689a      	ldr	r2, [r3, #8]
 8016f9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016f9e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8016fa2:	440b      	add	r3, r1
 8016fa4:	00db      	lsls	r3, r3, #3
 8016fa6:	4413      	add	r3, r2
 8016fa8:	edd3 7a00 	vldr	s15, [r3]
 8016fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016fb0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	689a      	ldr	r2, [r3, #8]
 8016fb8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016fba:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8016fbe:	440b      	add	r3, r1
 8016fc0:	00db      	lsls	r3, r3, #3
 8016fc2:	4413      	add	r3, r2
 8016fc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8016fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016fd0:	edc7 7a06 	vstr	s15, [r7, #24]
 8016fd4:	ed97 7a08 	vldr	s14, [r7, #32]
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	689a      	ldr	r2, [r3, #8]
 8016fdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016fde:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8016fe2:	440b      	add	r3, r1
 8016fe4:	00db      	lsls	r3, r3, #3
 8016fe6:	4413      	add	r3, r2
 8016fe8:	edd3 7a01 	vldr	s15, [r3, #4]
 8016fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016ff0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	689a      	ldr	r2, [r3, #8]
 8016ff8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016ffa:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8016ffe:	440b      	add	r3, r1
 8017000:	00db      	lsls	r3, r3, #3
 8017002:	4413      	add	r3, r2
 8017004:	edd3 7a00 	vldr	s15, [r3]
 8017008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801700c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017010:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8017014:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8017018:	edd7 7a06 	vldr	s15, [r7, #24]
 801701c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017022:	00db      	lsls	r3, r3, #3
 8017024:	687a      	ldr	r2, [r7, #4]
 8017026:	4413      	add	r3, r2
 8017028:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801702c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017030:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8017034:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8017038:	edd7 7a07 	vldr	s15, [r7, #28]
 801703c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017042:	00db      	lsls	r3, r3, #3
 8017044:	687a      	ldr	r2, [r7, #4]
 8017046:	4413      	add	r3, r2
 8017048:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801704c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017050:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 8017054:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8017058:	edd7 7a06 	vldr	s15, [r7, #24]
 801705c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017064:	1ad3      	subs	r3, r2, r3
 8017066:	00db      	lsls	r3, r3, #3
 8017068:	687a      	ldr	r2, [r7, #4]
 801706a:	4413      	add	r3, r2
 801706c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8017070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017074:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8017078:	ed97 7a07 	vldr	s14, [r7, #28]
 801707c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8017080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017084:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017088:	1ad3      	subs	r3, r2, r3
 801708a:	00db      	lsls	r3, r3, #3
 801708c:	687a      	ldr	r2, [r7, #4]
 801708e:	4413      	add	r3, r2
 8017090:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8017094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017098:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 801709c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801709e:	3301      	adds	r3, #1
 80170a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80170a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	da00      	bge.n	80170aa <kiss_fftr+0x222>
 80170a8:	3301      	adds	r3, #1
 80170aa:	105b      	asrs	r3, r3, #1
 80170ac:	461a      	mov	r2, r3
 80170ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80170b0:	4293      	cmp	r3, r2
 80170b2:	f77f af2e 	ble.w	8016f12 <kiss_fftr+0x8a>
    }
}
 80170b6:	bf00      	nop
 80170b8:	bf00      	nop
 80170ba:	3748      	adds	r7, #72	@ 0x48
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}
 80170c0:	08021a10 	.word	0x08021a10

080170c4 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80170ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80170d2:	f003 fa39 	bl	801a548 <log10f>
 80170d6:	eef0 7a40 	vmov.f32	s15, s0
 80170da:	eeb0 0a67 	vmov.f32	s0, s15
 80170de:	3708      	adds	r7, #8
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}

080170e4 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 80170e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170e6:	b083      	sub	sp, #12
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	ed87 0b00 	vstr	d0, [r7]
 80170ee:	683c      	ldr	r4, [r7, #0]
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80170f6:	2301      	movs	r3, #1
 80170f8:	461e      	mov	r6, r3
 80170fa:	f04f 32ff 	mov.w	r2, #4294967295
 80170fe:	4b10      	ldr	r3, [pc, #64]	@ (8017140 <_ZSt5isinfd+0x5c>)
 8017100:	4620      	mov	r0, r4
 8017102:	4629      	mov	r1, r5
 8017104:	f7e9 fd42 	bl	8000b8c <__aeabi_dcmpun>
 8017108:	4603      	mov	r3, r0
 801710a:	2b00      	cmp	r3, #0
 801710c:	d10b      	bne.n	8017126 <_ZSt5isinfd+0x42>
 801710e:	f04f 32ff 	mov.w	r2, #4294967295
 8017112:	4b0b      	ldr	r3, [pc, #44]	@ (8017140 <_ZSt5isinfd+0x5c>)
 8017114:	4620      	mov	r0, r4
 8017116:	4629      	mov	r1, r5
 8017118:	f7e9 fd1a 	bl	8000b50 <__aeabi_dcmple>
 801711c:	4603      	mov	r3, r0
 801711e:	2b00      	cmp	r3, #0
 8017120:	d101      	bne.n	8017126 <_ZSt5isinfd+0x42>
 8017122:	2300      	movs	r3, #0
 8017124:	461e      	mov	r6, r3
 8017126:	b2f3      	uxtb	r3, r6
 8017128:	f083 0301 	eor.w	r3, r3, #1
 801712c:	b2db      	uxtb	r3, r3
 801712e:	2b00      	cmp	r3, #0
 8017130:	bf14      	ite	ne
 8017132:	2301      	movne	r3, #1
 8017134:	2300      	moveq	r3, #0
 8017136:	b2db      	uxtb	r3, r3
 8017138:	4618      	mov	r0, r3
 801713a:	370c      	adds	r7, #12
 801713c:	46bd      	mov	sp, r7
 801713e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017140:	7fefffff 	.word	0x7fefffff

08017144 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8017144:	b480      	push	{r7}
 8017146:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8017148:	2300      	movs	r3, #0
}
 801714a:	4618      	mov	r0, r3
 801714c:	46bd      	mov	sp, r7
 801714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017152:	4770      	bx	lr

08017154 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 8017154:	b5b0      	push	{r4, r5, r7, lr}
 8017156:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8017158:	f7f9 fae2 	bl	8010720 <HAL_GetTick>
 801715c:	4603      	mov	r3, r0
 801715e:	2200      	movs	r2, #0
 8017160:	461c      	mov	r4, r3
 8017162:	4615      	mov	r5, r2
 8017164:	4622      	mov	r2, r4
 8017166:	462b      	mov	r3, r5
}
 8017168:	4610      	mov	r0, r2
 801716a:	4619      	mov	r1, r3
 801716c:	bdb0      	pop	{r4, r5, r7, pc}

0801716e <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_us() {
 801716e:	b5b0      	push	{r4, r5, r7, lr}
 8017170:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8017172:	f7f9 fad5 	bl	8010720 <HAL_GetTick>
 8017176:	4603      	mov	r3, r0
 8017178:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801717c:	fb02 f303 	mul.w	r3, r2, r3
 8017180:	2200      	movs	r2, #0
 8017182:	461c      	mov	r4, r3
 8017184:	4615      	mov	r5, r2
 8017186:	4622      	mov	r2, r4
 8017188:	462b      	mov	r3, r5
}
 801718a:	4610      	mov	r0, r2
 801718c:	4619      	mov	r1, r3
 801718e:	bdb0      	pop	{r4, r5, r7, pc}

08017190 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8017190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017194:	b08c      	sub	sp, #48	@ 0x30
 8017196:	af00      	add	r7, sp, #0
 8017198:	ed87 0a01 	vstr	s0, [r7, #4]
        *(c) = '\0';
    }


    ei_printf("%s", s);
}
 801719c:	466b      	mov	r3, sp
 801719e:	4698      	mov	r8, r3
    float n = f;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char s[MAX_NUMBER_STRING_SIZE];
 80171a4:	4b78      	ldr	r3, [pc, #480]	@ (8017388 <_Z15ei_printf_floatf+0x1f8>)
 80171a6:	681e      	ldr	r6, [r3, #0]
 80171a8:	1e73      	subs	r3, r6, #1
 80171aa:	623b      	str	r3, [r7, #32]
 80171ac:	4632      	mov	r2, r6
 80171ae:	2300      	movs	r3, #0
 80171b0:	4614      	mov	r4, r2
 80171b2:	461d      	mov	r5, r3
 80171b4:	f04f 0200 	mov.w	r2, #0
 80171b8:	f04f 0300 	mov.w	r3, #0
 80171bc:	00eb      	lsls	r3, r5, #3
 80171be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80171c2:	00e2      	lsls	r2, r4, #3
 80171c4:	4632      	mov	r2, r6
 80171c6:	2300      	movs	r3, #0
 80171c8:	4610      	mov	r0, r2
 80171ca:	4619      	mov	r1, r3
 80171cc:	f04f 0200 	mov.w	r2, #0
 80171d0:	f04f 0300 	mov.w	r3, #0
 80171d4:	00cb      	lsls	r3, r1, #3
 80171d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80171da:	00c2      	lsls	r2, r0, #3
 80171dc:	4633      	mov	r3, r6
 80171de:	3307      	adds	r3, #7
 80171e0:	08db      	lsrs	r3, r3, #3
 80171e2:	00db      	lsls	r3, r3, #3
 80171e4:	ebad 0d03 	sub.w	sp, sp, r3
 80171e8:	466b      	mov	r3, sp
 80171ea:	3300      	adds	r3, #0
 80171ec:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 80171ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80171f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80171f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171fa:	d106      	bne.n	801720a <_Z15ei_printf_floatf+0x7a>
        strcpy(s, "0");
 80171fc:	69fb      	ldr	r3, [r7, #28]
 80171fe:	4963      	ldr	r1, [pc, #396]	@ (801738c <_Z15ei_printf_floatf+0x1fc>)
 8017200:	461a      	mov	r2, r3
 8017202:	460b      	mov	r3, r1
 8017204:	881b      	ldrh	r3, [r3, #0]
 8017206:	8013      	strh	r3, [r2, #0]
 8017208:	e0ad      	b.n	8017366 <_Z15ei_printf_floatf+0x1d6>
        char *c = s;
 801720a:	69fb      	ldr	r3, [r7, #28]
 801720c:	627b      	str	r3, [r7, #36]	@ 0x24
        int neg = (n < 0);
 801720e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8017212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801721a:	bf4c      	ite	mi
 801721c:	2301      	movmi	r3, #1
 801721e:	2300      	movpl	r3, #0
 8017220:	b2db      	uxtb	r3, r3
 8017222:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8017224:	69bb      	ldr	r3, [r7, #24]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d005      	beq.n	8017236 <_Z15ei_printf_floatf+0xa6>
            n = -n;
 801722a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801722e:	eef1 7a67 	vneg.f32	s15, s15
 8017232:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        m = log10(n);
 8017236:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 801723a:	f7ff ff43 	bl	80170c4 <_ZSt5log10f>
 801723e:	eef0 7a40 	vmov.f32	s15, s0
 8017242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017246:	ee17 3a90 	vmov	r3, s15
 801724a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (neg) {
 801724c:	69bb      	ldr	r3, [r7, #24]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d004      	beq.n	801725c <_Z15ei_printf_floatf+0xcc>
            *(c++) = '-';
 8017252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017254:	1c5a      	adds	r2, r3, #1
 8017256:	627a      	str	r2, [r7, #36]	@ 0x24
 8017258:	222d      	movs	r2, #45	@ 0x2d
 801725a:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 801725c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801725e:	2b00      	cmp	r3, #0
 8017260:	dc70      	bgt.n	8017344 <_Z15ei_printf_floatf+0x1b4>
            m = 0;
 8017262:	2300      	movs	r3, #0
 8017264:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (n > PRECISION || m >= 0) {
 8017266:	e06d      	b.n	8017344 <_Z15ei_printf_floatf+0x1b4>
            double weight = pow(10.0, m);
 8017268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801726a:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 8017380 <_Z15ei_printf_floatf+0x1f0>
 801726e:	f000 f8b8 	bl	80173e2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8017272:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8017276:	f04f 0200 	mov.w	r2, #0
 801727a:	f04f 0300 	mov.w	r3, #0
 801727e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017282:	f7e9 fc79 	bl	8000b78 <__aeabi_dcmpgt>
 8017286:	4603      	mov	r3, r0
 8017288:	2b00      	cmp	r3, #0
 801728a:	d00b      	beq.n	80172a4 <_Z15ei_printf_floatf+0x114>
 801728c:	ed97 0b04 	vldr	d0, [r7, #16]
 8017290:	f7ff ff28 	bl	80170e4 <_ZSt5isinfd>
 8017294:	4603      	mov	r3, r0
 8017296:	f083 0301 	eor.w	r3, r3, #1
 801729a:	b2db      	uxtb	r3, r3
 801729c:	2b00      	cmp	r3, #0
 801729e:	d001      	beq.n	80172a4 <_Z15ei_printf_floatf+0x114>
 80172a0:	2301      	movs	r3, #1
 80172a2:	e000      	b.n	80172a6 <_Z15ei_printf_floatf+0x116>
 80172a4:	2300      	movs	r3, #0
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d03a      	beq.n	8017320 <_Z15ei_printf_floatf+0x190>
                digit = floor(n / weight);
 80172aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80172ac:	f7e9 f97c 	bl	80005a8 <__aeabi_f2d>
 80172b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80172b4:	f7e9 fafa 	bl	80008ac <__aeabi_ddiv>
 80172b8:	4602      	mov	r2, r0
 80172ba:	460b      	mov	r3, r1
 80172bc:	ec43 2b17 	vmov	d7, r2, r3
 80172c0:	eeb0 0a47 	vmov.f32	s0, s14
 80172c4:	eef0 0a67 	vmov.f32	s1, s15
 80172c8:	f003 fb22 	bl	801a910 <floor>
 80172cc:	ec53 2b10 	vmov	r2, r3, d0
 80172d0:	4610      	mov	r0, r2
 80172d2:	4619      	mov	r1, r3
 80172d4:	f7e9 fc70 	bl	8000bb8 <__aeabi_d2iz>
 80172d8:	4603      	mov	r3, r0
 80172da:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 80172dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80172de:	f7e9 f963 	bl	80005a8 <__aeabi_f2d>
 80172e2:	4604      	mov	r4, r0
 80172e4:	460d      	mov	r5, r1
 80172e6:	68f8      	ldr	r0, [r7, #12]
 80172e8:	f7e9 f94c 	bl	8000584 <__aeabi_i2d>
 80172ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80172f0:	f7e9 f9b2 	bl	8000658 <__aeabi_dmul>
 80172f4:	4602      	mov	r2, r0
 80172f6:	460b      	mov	r3, r1
 80172f8:	4620      	mov	r0, r4
 80172fa:	4629      	mov	r1, r5
 80172fc:	f7e8 fff4 	bl	80002e8 <__aeabi_dsub>
 8017300:	4602      	mov	r2, r0
 8017302:	460b      	mov	r3, r1
 8017304:	4610      	mov	r0, r2
 8017306:	4619      	mov	r1, r3
 8017308:	f7e9 fc9e 	bl	8000c48 <__aeabi_d2f>
 801730c:	4603      	mov	r3, r0
 801730e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                *(c++) = '0' + digit;
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	b2da      	uxtb	r2, r3
 8017314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017316:	1c59      	adds	r1, r3, #1
 8017318:	6279      	str	r1, [r7, #36]	@ 0x24
 801731a:	3230      	adds	r2, #48	@ 0x30
 801731c:	b2d2      	uxtb	r2, r2
 801731e:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8017320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017322:	2b00      	cmp	r3, #0
 8017324:	d10b      	bne.n	801733e <_Z15ei_printf_floatf+0x1ae>
 8017326:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801732a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801732e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017332:	dd04      	ble.n	801733e <_Z15ei_printf_floatf+0x1ae>
                *(c++) = '.';
 8017334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017336:	1c5a      	adds	r2, r3, #1
 8017338:	627a      	str	r2, [r7, #36]	@ 0x24
 801733a:	222e      	movs	r2, #46	@ 0x2e
 801733c:	701a      	strb	r2, [r3, #0]
            m--;
 801733e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017340:	3b01      	subs	r3, #1
 8017342:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (n > PRECISION || m >= 0) {
 8017344:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017346:	f7e9 f92f 	bl	80005a8 <__aeabi_f2d>
 801734a:	4b11      	ldr	r3, [pc, #68]	@ (8017390 <_Z15ei_printf_floatf+0x200>)
 801734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017350:	f7e9 fc12 	bl	8000b78 <__aeabi_dcmpgt>
 8017354:	4603      	mov	r3, r0
 8017356:	2b00      	cmp	r3, #0
 8017358:	d186      	bne.n	8017268 <_Z15ei_printf_floatf+0xd8>
 801735a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801735c:	2b00      	cmp	r3, #0
 801735e:	da83      	bge.n	8017268 <_Z15ei_printf_floatf+0xd8>
        *(c) = '\0';
 8017360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017362:	2200      	movs	r2, #0
 8017364:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8017366:	69f9      	ldr	r1, [r7, #28]
 8017368:	480a      	ldr	r0, [pc, #40]	@ (8017394 <_Z15ei_printf_floatf+0x204>)
 801736a:	f7f1 fd5f 	bl	8008e2c <_Z9ei_printfPKcz>
 801736e:	46c5      	mov	sp, r8
}
 8017370:	bf00      	nop
 8017372:	3730      	adds	r7, #48	@ 0x30
 8017374:	46bd      	mov	sp, r7
 8017376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801737a:	bf00      	nop
 801737c:	f3af 8000 	nop.w
 8017380:	00000000 	.word	0x00000000
 8017384:	40240000 	.word	0x40240000
 8017388:	200050b8 	.word	0x200050b8
 801738c:	08021a38 	.word	0x08021a38
 8017390:	200050b0 	.word	0x200050b0
 8017394:	08021a3c 	.word	0x08021a3c

08017398 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f006 f9b1 	bl	801d708 <malloc>
 80173a6:	4603      	mov	r3, r0
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3708      	adds	r7, #8
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
 80173b8:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 80173ba:	6839      	ldr	r1, [r7, #0]
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f006 f987 	bl	801d6d0 <calloc>
 80173c2:	4603      	mov	r3, r0
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3708      	adds	r7, #8
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b082      	sub	sp, #8
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
    free(ptr);
 80173d4:	6878      	ldr	r0, [r7, #4]
 80173d6:	f006 f99f 	bl	801d718 <free>
}
 80173da:	bf00      	nop
 80173dc:	3708      	adds	r7, #8
 80173de:	46bd      	mov	sp, r7
 80173e0:	bd80      	pop	{r7, pc}

080173e2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80173e2:	b580      	push	{r7, lr}
 80173e4:	b084      	sub	sp, #16
 80173e6:	af00      	add	r7, sp, #0
 80173e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80173ec:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	f7e9 f8c8 	bl	8000584 <__aeabi_i2d>
 80173f4:	4602      	mov	r2, r0
 80173f6:	460b      	mov	r3, r1
 80173f8:	ec43 2b11 	vmov	d1, r2, r3
 80173fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8017400:	f002 fe8c 	bl	801a11c <pow>
 8017404:	eeb0 7a40 	vmov.f32	s14, s0
 8017408:	eef0 7a60 	vmov.f32	s15, s1
    }
 801740c:	eeb0 0a47 	vmov.f32	s0, s14
 8017410:	eef0 0a67 	vmov.f32	s1, s15
 8017414:	3710      	adds	r7, #16
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
	...

0801741c <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801741c:	b480      	push	{r7}
 801741e:	b083      	sub	sp, #12
 8017420:	af00      	add	r7, sp, #0
 8017422:	4603      	mov	r3, r0
 8017424:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8017426:	79fb      	ldrb	r3, [r7, #7]
 8017428:	2b12      	cmp	r3, #18
 801742a:	d84f      	bhi.n	80174cc <TfLiteTypeGetName+0xb0>
 801742c:	a201      	add	r2, pc, #4	@ (adr r2, 8017434 <TfLiteTypeGetName+0x18>)
 801742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017432:	bf00      	nop
 8017434:	08017481 	.word	0x08017481
 8017438:	08017485 	.word	0x08017485
 801743c:	08017491 	.word	0x08017491
 8017440:	08017499 	.word	0x08017499
 8017444:	080174a1 	.word	0x080174a1
 8017448:	080174b5 	.word	0x080174b5
 801744c:	080174a9 	.word	0x080174a9
 8017450:	0801748d 	.word	0x0801748d
 8017454:	080174ad 	.word	0x080174ad
 8017458:	0801749d 	.word	0x0801749d
 801745c:	080174b9 	.word	0x080174b9
 8017460:	080174bd 	.word	0x080174bd
 8017464:	080174b1 	.word	0x080174b1
 8017468:	080174a5 	.word	0x080174a5
 801746c:	080174c1 	.word	0x080174c1
 8017470:	080174c5 	.word	0x080174c5
 8017474:	08017495 	.word	0x08017495
 8017478:	08017489 	.word	0x08017489
 801747c:	080174c9 	.word	0x080174c9
    case kTfLiteNoType:
      return "NOTYPE";
 8017480:	4b16      	ldr	r3, [pc, #88]	@ (80174dc <TfLiteTypeGetName+0xc0>)
 8017482:	e024      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8017484:	4b16      	ldr	r3, [pc, #88]	@ (80174e0 <TfLiteTypeGetName+0xc4>)
 8017486:	e022      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt16:
      return "UINT16";
 8017488:	4b16      	ldr	r3, [pc, #88]	@ (80174e4 <TfLiteTypeGetName+0xc8>)
 801748a:	e020      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteInt16:
      return "INT16";
 801748c:	4b16      	ldr	r3, [pc, #88]	@ (80174e8 <TfLiteTypeGetName+0xcc>)
 801748e:	e01e      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteInt32:
      return "INT32";
 8017490:	4b16      	ldr	r3, [pc, #88]	@ (80174ec <TfLiteTypeGetName+0xd0>)
 8017492:	e01c      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt32:
      return "UINT32";
 8017494:	4b16      	ldr	r3, [pc, #88]	@ (80174f0 <TfLiteTypeGetName+0xd4>)
 8017496:	e01a      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt8:
      return "UINT8";
 8017498:	4b16      	ldr	r3, [pc, #88]	@ (80174f4 <TfLiteTypeGetName+0xd8>)
 801749a:	e018      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteInt8:
      return "INT8";
 801749c:	4b16      	ldr	r3, [pc, #88]	@ (80174f8 <TfLiteTypeGetName+0xdc>)
 801749e:	e016      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteInt64:
      return "INT64";
 80174a0:	4b16      	ldr	r3, [pc, #88]	@ (80174fc <TfLiteTypeGetName+0xe0>)
 80174a2:	e014      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt64:
      return "UINT64";
 80174a4:	4b16      	ldr	r3, [pc, #88]	@ (8017500 <TfLiteTypeGetName+0xe4>)
 80174a6:	e012      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteBool:
      return "BOOL";
 80174a8:	4b16      	ldr	r3, [pc, #88]	@ (8017504 <TfLiteTypeGetName+0xe8>)
 80174aa:	e010      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80174ac:	4b16      	ldr	r3, [pc, #88]	@ (8017508 <TfLiteTypeGetName+0xec>)
 80174ae:	e00e      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80174b0:	4b16      	ldr	r3, [pc, #88]	@ (801750c <TfLiteTypeGetName+0xf0>)
 80174b2:	e00c      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteString:
      return "STRING";
 80174b4:	4b16      	ldr	r3, [pc, #88]	@ (8017510 <TfLiteTypeGetName+0xf4>)
 80174b6:	e00a      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat16:
      return "FLOAT16";
 80174b8:	4b16      	ldr	r3, [pc, #88]	@ (8017514 <TfLiteTypeGetName+0xf8>)
 80174ba:	e008      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80174bc:	4b16      	ldr	r3, [pc, #88]	@ (8017518 <TfLiteTypeGetName+0xfc>)
 80174be:	e006      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteResource:
      return "RESOURCE";
 80174c0:	4b16      	ldr	r3, [pc, #88]	@ (801751c <TfLiteTypeGetName+0x100>)
 80174c2:	e004      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteVariant:
      return "VARIANT";
 80174c4:	4b16      	ldr	r3, [pc, #88]	@ (8017520 <TfLiteTypeGetName+0x104>)
 80174c6:	e002      	b.n	80174ce <TfLiteTypeGetName+0xb2>
    case kTfLiteInt4:
      return "INT4";
 80174c8:	4b16      	ldr	r3, [pc, #88]	@ (8017524 <TfLiteTypeGetName+0x108>)
 80174ca:	e000      	b.n	80174ce <TfLiteTypeGetName+0xb2>
  }
  return "Unknown type";
 80174cc:	4b16      	ldr	r3, [pc, #88]	@ (8017528 <TfLiteTypeGetName+0x10c>)
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	370c      	adds	r7, #12
 80174d2:	46bd      	mov	sp, r7
 80174d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d8:	4770      	bx	lr
 80174da:	bf00      	nop
 80174dc:	08021a40 	.word	0x08021a40
 80174e0:	08021a48 	.word	0x08021a48
 80174e4:	08021a50 	.word	0x08021a50
 80174e8:	08021a58 	.word	0x08021a58
 80174ec:	08021a60 	.word	0x08021a60
 80174f0:	08021a68 	.word	0x08021a68
 80174f4:	08021a70 	.word	0x08021a70
 80174f8:	08021a78 	.word	0x08021a78
 80174fc:	08021a80 	.word	0x08021a80
 8017500:	08021a88 	.word	0x08021a88
 8017504:	08021a90 	.word	0x08021a90
 8017508:	08021a98 	.word	0x08021a98
 801750c:	08021aa4 	.word	0x08021aa4
 8017510:	08021ab0 	.word	0x08021ab0
 8017514:	08021ab8 	.word	0x08021ab8
 8017518:	08021ac0 	.word	0x08021ac0
 801751c:	08021ac8 	.word	0x08021ac8
 8017520:	08021ad4 	.word	0x08021ad4
 8017524:	08021adc 	.word	0x08021adc
 8017528:	08021ae4 	.word	0x08021ae4

0801752c <_ZN6tflite12RuntimeShapeC1Ev>:
  // RuntimeShape in TFLM supports up to 5 dimensions.
  // The name kMaxSmallSize comes from the same file of the upstream
  // tensorflow lite repo and need to be kept the same for max reuse.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape() : size_(0) {}
 801752c:	b480      	push	{r7}
 801752e:	b083      	sub	sp, #12
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	2200      	movs	r2, #0
 8017538:	601a      	str	r2, [r3, #0]
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	4618      	mov	r0, r3
 801753e:	370c      	adds	r7, #12
 8017540:	46bd      	mov	sp, r7
 8017542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017546:	4770      	bx	lr

08017548 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 8017548:	b580      	push	{r7, lr}
 801754a:	b084      	sub	sp, #16
 801754c:	af00      	add	r7, sp, #0
 801754e:	60f8      	str	r0, [r7, #12]
 8017550:	60b9      	str	r1, [r7, #8]
 8017552:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	68ba      	ldr	r2, [r7, #8]
 8017558:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801755a:	687a      	ldr	r2, [r7, #4]
 801755c:	68b9      	ldr	r1, [r7, #8]
 801755e:	68f8      	ldr	r0, [r7, #12]
 8017560:	f000 f828 	bl	80175b4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	4618      	mov	r0, r3
 8017568:	3710      	adds	r7, #16
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}

0801756e <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 801756e:	b480      	push	{r7}
 8017570:	b083      	sub	sp, #12
 8017572:	af00      	add	r7, sp, #0
 8017574:	6078      	str	r0, [r7, #4]
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	4618      	mov	r0, r3
 801757a:	370c      	adds	r7, #12
 801757c:	46bd      	mov	sp, r7
 801757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017582:	4770      	bx	lr

08017584 <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 8017584:	b480      	push	{r7}
 8017586:	b083      	sub	sp, #12
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	3304      	adds	r3, #4
 8017590:	4618      	mov	r0, r3
 8017592:	370c      	adds	r7, #12
 8017594:	46bd      	mov	sp, r7
 8017596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759a:	4770      	bx	lr

0801759c <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 801759c:	b480      	push	{r7}
 801759e:	b083      	sub	sp, #12
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	3304      	adds	r3, #4
 80175a8:	4618      	mov	r0, r3
 80175aa:	370c      	adds	r7, #12
 80175ac:	46bd      	mov	sp, r7
 80175ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b2:	4770      	bx	lr

080175b4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b086      	sub	sp, #24
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	60f8      	str	r0, [r7, #12]
 80175bc:	60b9      	str	r1, [r7, #8]
 80175be:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	68ba      	ldr	r2, [r7, #8]
 80175c4:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 80175c6:	68f8      	ldr	r0, [r7, #12]
 80175c8:	f7ff ffdc 	bl	8017584 <_ZN6tflite12RuntimeShape8DimsDataEv>
 80175cc:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80175ce:	68bb      	ldr	r3, [r7, #8]
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	461a      	mov	r2, r3
 80175d4:	6879      	ldr	r1, [r7, #4]
 80175d6:	6978      	ldr	r0, [r7, #20]
 80175d8:	f007 f9e5 	bl	801e9a6 <memcpy>
  }
 80175dc:	bf00      	nop
 80175de:	3718      	adds	r7, #24
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b086      	sub	sp, #24
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 80175ec:	2301      	movs	r3, #1
 80175ee:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f7ff ffd3 	bl	801759c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 80175f6:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 80175f8:	2300      	movs	r3, #0
 80175fa:	613b      	str	r3, [r7, #16]
 80175fc:	e00b      	b.n	8017616 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 80175fe:	693b      	ldr	r3, [r7, #16]
 8017600:	009b      	lsls	r3, r3, #2
 8017602:	68fa      	ldr	r2, [r7, #12]
 8017604:	4413      	add	r3, r2
 8017606:	681a      	ldr	r2, [r3, #0]
 8017608:	697b      	ldr	r3, [r7, #20]
 801760a:	fb02 f303 	mul.w	r3, r2, r3
 801760e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8017610:	693b      	ldr	r3, [r7, #16]
 8017612:	3301      	adds	r3, #1
 8017614:	613b      	str	r3, [r7, #16]
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	693a      	ldr	r2, [r7, #16]
 801761c:	429a      	cmp	r2, r3
 801761e:	dbee      	blt.n	80175fe <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 8017620:	697b      	ldr	r3, [r7, #20]
  }
 8017622:	4618      	mov	r0, r3
 8017624:	3718      	adds	r7, #24
 8017626:	46bd      	mov	sp, r7
 8017628:	bd80      	pop	{r7, pc}

0801762a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 801762a:	b580      	push	{r7, lr}
 801762c:	b086      	sub	sp, #24
 801762e:	af00      	add	r7, sp, #0
 8017630:	6078      	str	r0, [r7, #4]
 8017632:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8017634:	683b      	ldr	r3, [r7, #0]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d103      	bne.n	8017642 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f7ff ff76 	bl	801752c <_ZN6tflite12RuntimeShapeC1Ev>
 8017640:	e00d      	b.n	801765e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	689b      	ldr	r3, [r3, #8]
 8017646:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	3304      	adds	r3, #4
 8017652:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8017654:	68fa      	ldr	r2, [r7, #12]
 8017656:	6939      	ldr	r1, [r7, #16]
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f7ff ff75 	bl	8017548 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801765e:	6878      	ldr	r0, [r7, #4]
 8017660:	3718      	adds	r7, #24
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}

08017666 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8017666:	b480      	push	{r7}
 8017668:	b083      	sub	sp, #12
 801766a:	af00      	add	r7, sp, #0
 801766c:	6078      	str	r0, [r7, #4]
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	689b      	ldr	r3, [r3, #8]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	4618      	mov	r0, r3
 8017676:	370c      	adds	r7, #12
 8017678:	46bd      	mov	sp, r7
 801767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767e:	4770      	bx	lr

08017680 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
 8017680:	b480      	push	{r7}
 8017682:	b083      	sub	sp, #12
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d003      	beq.n	8017698 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x18>
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	e000      	b.n	801769a <_ZN6tflite9NumInputsEPK10TfLiteNode+0x1a>
 8017698:	2300      	movs	r3, #0
}
 801769a:	4618      	mov	r0, r3
 801769c:	370c      	adds	r7, #12
 801769e:	46bd      	mov	sp, r7
 80176a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a4:	4770      	bx	lr

080176a6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) {
 80176a6:	b480      	push	{r7}
 80176a8:	b083      	sub	sp, #12
 80176aa:	af00      	add	r7, sp, #0
 80176ac:	6078      	str	r0, [r7, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	685b      	ldr	r3, [r3, #4]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d003      	beq.n	80176be <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x18>
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	685b      	ldr	r3, [r3, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	e000      	b.n	80176c0 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x1a>
 80176be:	2300      	movs	r3, #0
}
 80176c0:	4618      	mov	r0, r3
 80176c2:	370c      	adds	r7, #12
 80176c4:	46bd      	mov	sp, r7
 80176c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ca:	4770      	bx	lr

080176cc <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 80176cc:	b480      	push	{r7}
 80176ce:	b087      	sub	sp, #28
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	60f8      	str	r0, [r7, #12]
 80176d4:	60b9      	str	r1, [r7, #8]
 80176d6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_elements; i += 2) {
 80176d8:	2300      	movs	r3, #0
 80176da:	617b      	str	r3, [r7, #20]
 80176dc:	e02a      	b.n	8017734 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x68>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 80176de:	697b      	ldr	r3, [r7, #20]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	da00      	bge.n	80176e6 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x1a>
 80176e4:	3301      	adds	r3, #1
 80176e6:	105b      	asrs	r3, r3, #1
 80176e8:	461a      	mov	r2, r3
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	4413      	add	r3, r2
 80176ee:	f993 3000 	ldrsb.w	r3, [r3]
 80176f2:	011b      	lsls	r3, r3, #4
 80176f4:	b25a      	sxtb	r2, r3
 80176f6:	697b      	ldr	r3, [r7, #20]
 80176f8:	6879      	ldr	r1, [r7, #4]
 80176fa:	440b      	add	r3, r1
 80176fc:	1112      	asrs	r2, r2, #4
 80176fe:	b252      	sxtb	r2, r2
 8017700:	701a      	strb	r2, [r3, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
 8017702:	697b      	ldr	r3, [r7, #20]
 8017704:	3301      	adds	r3, #1
 8017706:	68ba      	ldr	r2, [r7, #8]
 8017708:	429a      	cmp	r2, r3
 801770a:	d018      	beq.n	801773e <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x72>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 801770c:	697b      	ldr	r3, [r7, #20]
 801770e:	2b00      	cmp	r3, #0
 8017710:	da00      	bge.n	8017714 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x48>
 8017712:	3301      	adds	r3, #1
 8017714:	105b      	asrs	r3, r3, #1
 8017716:	461a      	mov	r2, r3
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	4413      	add	r3, r2
 801771c:	f993 2000 	ldrsb.w	r2, [r3]
 8017720:	697b      	ldr	r3, [r7, #20]
 8017722:	3301      	adds	r3, #1
 8017724:	6879      	ldr	r1, [r7, #4]
 8017726:	440b      	add	r3, r1
 8017728:	1112      	asrs	r2, r2, #4
 801772a:	b252      	sxtb	r2, r2
 801772c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements; i += 2) {
 801772e:	697b      	ldr	r3, [r7, #20]
 8017730:	3302      	adds	r3, #2
 8017732:	617b      	str	r3, [r7, #20]
 8017734:	697a      	ldr	r2, [r7, #20]
 8017736:	68bb      	ldr	r3, [r7, #8]
 8017738:	429a      	cmp	r2, r3
 801773a:	dbd0      	blt.n	80176de <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }
}
 801773c:	e000      	b.n	8017740 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x74>
    if (i + 1 == num_elements) break;
 801773e:	bf00      	nop
}
 8017740:	bf00      	nop
 8017742:	371c      	adds	r7, #28
 8017744:	46bd      	mov	sp, r7
 8017746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774a:	4770      	bx	lr

0801774c <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801774c:	b480      	push	{r7}
 801774e:	b083      	sub	sp, #12
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	ed93 7a00 	vldr	s14, [r3]
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	edd3 7a00 	vldr	s15, [r3]
 8017762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801776a:	d501      	bpl.n	8017770 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	e000      	b.n	8017772 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8017770:	687b      	ldr	r3, [r7, #4]
    }
 8017772:	4618      	mov	r0, r3
 8017774:	370c      	adds	r7, #12
 8017776:	46bd      	mov	sp, r7
 8017778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801777c:	4770      	bx	lr

0801777e <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801777e:	b480      	push	{r7}
 8017780:	af00      	add	r7, sp, #0
 8017782:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017786:	4618      	mov	r0, r3
 8017788:	46bd      	mov	sp, r7
 801778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778e:	4770      	bx	lr

08017790 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8017790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017794:	b088      	sub	sp, #32
 8017796:	af00      	add	r7, sp, #0
 8017798:	ed87 0b02 	vstr	d0, [r7, #8]
 801779c:	6078      	str	r0, [r7, #4]
 801779e:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 80177a0:	f04f 0200 	mov.w	r2, #0
 80177a4:	f04f 0300 	mov.w	r3, #0
 80177a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80177ac:	f7e9 f9bc 	bl	8000b28 <__aeabi_dcmpeq>
 80177b0:	4603      	mov	r3, r0
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d006      	beq.n	80177c4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	2200      	movs	r2, #0
 80177ba:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	2200      	movs	r2, #0
 80177c0:	601a      	str	r2, [r3, #0]
    return;
 80177c2:	e068      	b.n	8017896 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80177c4:	6838      	ldr	r0, [r7, #0]
 80177c6:	ed97 0b02 	vldr	d0, [r7, #8]
 80177ca:	f002 fd99 	bl	801a300 <frexp>
 80177ce:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 80177d2:	f04f 0200 	mov.w	r2, #0
 80177d6:	4b32      	ldr	r3, [pc, #200]	@ (80178a0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 80177d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80177dc:	f7e8 ff3c 	bl	8000658 <__aeabi_dmul>
 80177e0:	4602      	mov	r2, r0
 80177e2:	460b      	mov	r3, r1
 80177e4:	ec43 2b17 	vmov	d7, r2, r3
 80177e8:	eeb0 0a47 	vmov.f32	s0, s14
 80177ec:	eef0 0a67 	vmov.f32	s1, s15
 80177f0:	f000 f85a 	bl	80178a8 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80177f4:	ec53 2b10 	vmov	r2, r3, d0
 80177f8:	4610      	mov	r0, r2
 80177fa:	4619      	mov	r1, r3
 80177fc:	f7e9 fadc 	bl	8000db8 <__aeabi_d2lz>
 8017800:	4602      	mov	r2, r0
 8017802:	460b      	mov	r3, r1
 8017804:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8017808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801780c:	4925      	ldr	r1, [pc, #148]	@ (80178a4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801780e:	428a      	cmp	r2, r1
 8017810:	f173 0300 	sbcs.w	r3, r3, #0
 8017814:	db01      	blt.n	801781a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8017816:	f005 ff31 	bl	801d67c <abort>
  if (q_fixed == (1LL << 31)) {
 801781a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801781e:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8017822:	430b      	orrs	r3, r1
 8017824:	d118      	bne.n	8017858 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8017826:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801782a:	2b00      	cmp	r3, #0
 801782c:	da05      	bge.n	801783a <_ZN6tflite18QuantizeMultiplierEdPlPi+0xaa>
 801782e:	f112 0801 	adds.w	r8, r2, #1
 8017832:	f143 0900 	adc.w	r9, r3, #0
 8017836:	4642      	mov	r2, r8
 8017838:	464b      	mov	r3, r9
 801783a:	f04f 0000 	mov.w	r0, #0
 801783e:	f04f 0100 	mov.w	r1, #0
 8017842:	0850      	lsrs	r0, r2, #1
 8017844:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8017848:	1059      	asrs	r1, r3, #1
 801784a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    ++*shift;
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	1c5a      	adds	r2, r3, #1
 8017854:	683b      	ldr	r3, [r7, #0]
 8017856:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8017858:	f7ff ff91 	bl	801777e <_ZNSt14numeric_limitsIlE3maxEv>
 801785c:	4603      	mov	r3, r0
 801785e:	17da      	asrs	r2, r3, #31
 8017860:	461c      	mov	r4, r3
 8017862:	4615      	mov	r5, r2
 8017864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017868:	4294      	cmp	r4, r2
 801786a:	eb75 0303 	sbcs.w	r3, r5, r3
 801786e:	da01      	bge.n	8017874 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8017870:	f005 ff04 	bl	801d67c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8017874:	683b      	ldr	r3, [r7, #0]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	f113 0f1f 	cmn.w	r3, #31
 801787c:	da08      	bge.n	8017890 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801787e:	683b      	ldr	r3, [r7, #0]
 8017880:	2200      	movs	r2, #0
 8017882:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8017884:	f04f 0200 	mov.w	r2, #0
 8017888:	f04f 0300 	mov.w	r3, #0
 801788c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8017890:	69ba      	ldr	r2, [r7, #24]
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	601a      	str	r2, [r3, #0]
}
 8017896:	3720      	adds	r7, #32
 8017898:	46bd      	mov	sp, r7
 801789a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801789e:	bf00      	nop
 80178a0:	41e00000 	.word	0x41e00000
 80178a4:	80000001 	.word	0x80000001

080178a8 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b082      	sub	sp, #8
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	ed87 0b00 	vstr	d0, [r7]
 80178b2:	ed97 0b00 	vldr	d0, [r7]
 80178b6:	f003 f8a7 	bl	801aa08 <round>
 80178ba:	eeb0 7a40 	vmov.f32	s14, s0
 80178be:	eef0 7a60 	vmov.f32	s15, s1
 80178c2:	eeb0 0a47 	vmov.f32	s0, s14
 80178c6:	eef0 0a67 	vmov.f32	s1, s15
 80178ca:	3708      	adds	r7, #8
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}

080178d0 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b082      	sub	sp, #8
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80178da:	ed97 0a01 	vldr	s0, [r7, #4]
 80178de:	f7e9 fc61 	bl	80011a4 <_ZSt5roundf>
 80178e2:	eef0 7a40 	vmov.f32	s15, s0
 80178e6:	eeb0 0a67 	vmov.f32	s0, s15
 80178ea:	3708      	adds	r7, #8
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}

080178f0 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 80178f0:	b480      	push	{r7}
 80178f2:	b083      	sub	sp, #12
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	ed87 0b00 	vstr	d0, [r7]
 80178fa:	683a      	ldr	r2, [r7, #0]
 80178fc:	6879      	ldr	r1, [r7, #4]
 80178fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017902:	ec43 2b17 	vmov	d7, r2, r3
 8017906:	eeb0 0a47 	vmov.f32	s0, s14
 801790a:	eef0 0a67 	vmov.f32	s1, s15
 801790e:	370c      	adds	r7, #12
 8017910:	46bd      	mov	sp, r7
 8017912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017916:	4770      	bx	lr

08017918 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8017918:	b480      	push	{r7}
 801791a:	af00      	add	r7, sp, #0
 801791c:	4b02      	ldr	r3, [pc, #8]	@ (8017928 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801791e:	4618      	mov	r0, r3
 8017920:	46bd      	mov	sp, r7
 8017922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017926:	4770      	bx	lr
 8017928:	ffff8000 	.word	0xffff8000

0801792c <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 801792c:	b480      	push	{r7}
 801792e:	af00      	add	r7, sp, #0
 8017930:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017934:	4618      	mov	r0, r3
 8017936:	46bd      	mov	sp, r7
 8017938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793c:	4770      	bx	lr

0801793e <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801793e:	b480      	push	{r7}
 8017940:	af00      	add	r7, sp, #0
 8017942:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017946:	4618      	mov	r0, r3
 8017948:	46bd      	mov	sp, r7
 801794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794e:	4770      	bx	lr

08017950 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8017950:	b480      	push	{r7}
 8017952:	af00      	add	r7, sp, #0
 8017954:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8017958:	4618      	mov	r0, r3
 801795a:	46bd      	mov	sp, r7
 801795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017960:	4770      	bx	lr

08017962 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8017962:	b480      	push	{r7}
 8017964:	af00      	add	r7, sp, #0
 8017966:	237f      	movs	r3, #127	@ 0x7f
 8017968:	4618      	mov	r0, r3
 801796a:	46bd      	mov	sp, r7
 801796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017970:	4770      	bx	lr

08017972 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8017972:	b480      	push	{r7}
 8017974:	af00      	add	r7, sp, #0
 8017976:	2300      	movs	r3, #0
 8017978:	4618      	mov	r0, r3
 801797a:	46bd      	mov	sp, r7
 801797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017980:	4770      	bx	lr

08017982 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8017982:	b480      	push	{r7}
 8017984:	af00      	add	r7, sp, #0
 8017986:	23ff      	movs	r3, #255	@ 0xff
 8017988:	4618      	mov	r0, r3
 801798a:	46bd      	mov	sp, r7
 801798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017990:	4770      	bx	lr
 8017992:	0000      	movs	r0, r0
 8017994:	0000      	movs	r0, r0
	...

08017998 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8017998:	b5b0      	push	{r4, r5, r7, lr}
 801799a:	b08e      	sub	sp, #56	@ 0x38
 801799c:	af02      	add	r7, sp, #8
 801799e:	60f8      	str	r0, [r7, #12]
 80179a0:	60b9      	str	r1, [r7, #8]
 80179a2:	607a      	str	r2, [r7, #4]
 80179a4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80179a6:	68bb      	ldr	r3, [r7, #8]
 80179a8:	68db      	ldr	r3, [r3, #12]
 80179aa:	4618      	mov	r0, r3
 80179ac:	f7e8 fdfc 	bl	80005a8 <__aeabi_f2d>
 80179b0:	4604      	mov	r4, r0
 80179b2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	68db      	ldr	r3, [r3, #12]
 80179b8:	4618      	mov	r0, r3
 80179ba:	f7e8 fdf5 	bl	80005a8 <__aeabi_f2d>
 80179be:	4602      	mov	r2, r0
 80179c0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80179c2:	4620      	mov	r0, r4
 80179c4:	4629      	mov	r1, r5
 80179c6:	f7e8 fe47 	bl	8000658 <__aeabi_dmul>
 80179ca:	4602      	mov	r2, r0
 80179cc:	460b      	mov	r3, r1
 80179ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80179d2:	683b      	ldr	r3, [r7, #0]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d04b      	beq.n	8017a70 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	68db      	ldr	r3, [r3, #12]
 80179dc:	4618      	mov	r0, r3
 80179de:	f7e8 fde3 	bl	80005a8 <__aeabi_f2d>
 80179e2:	4602      	mov	r2, r0
 80179e4:	460b      	mov	r3, r1
 80179e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80179ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80179ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80179f2:	f7e8 fc79 	bl	80002e8 <__aeabi_dsub>
 80179f6:	4602      	mov	r2, r0
 80179f8:	460b      	mov	r3, r1
 80179fa:	ec43 2b17 	vmov	d7, r2, r3
 80179fe:	eeb0 0a47 	vmov.f32	s0, s14
 8017a02:	eef0 0a67 	vmov.f32	s1, s15
 8017a06:	f7ff ff73 	bl	80178f0 <_ZSt3absd>
 8017a0a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8017a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a10:	68db      	ldr	r3, [r3, #12]
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7e8 fdc8 	bl	80005a8 <__aeabi_f2d>
 8017a18:	4602      	mov	r2, r0
 8017a1a:	460b      	mov	r3, r1
 8017a1c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8017a20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017a24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017a28:	f7e8 ff40 	bl	80008ac <__aeabi_ddiv>
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	460b      	mov	r3, r1
 8017a30:	4610      	mov	r0, r2
 8017a32:	4619      	mov	r1, r3
 8017a34:	2301      	movs	r3, #1
 8017a36:	461c      	mov	r4, r3
 8017a38:	a318      	add	r3, pc, #96	@ (adr r3, 8017a9c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8017a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a3e:	f7e9 f887 	bl	8000b50 <__aeabi_dcmple>
 8017a42:	4603      	mov	r3, r0
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d101      	bne.n	8017a4c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8017a48:	2300      	movs	r3, #0
 8017a4a:	461c      	mov	r4, r3
 8017a4c:	b2e3      	uxtb	r3, r4
 8017a4e:	f083 0301 	eor.w	r3, r3, #1
 8017a52:	b2db      	uxtb	r3, r3
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d00b      	beq.n	8017a70 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	691c      	ldr	r4, [r3, #16]
 8017a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8017a90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8017a5e:	9300      	str	r3, [sp, #0]
 8017a60:	f44f 739e 	mov.w	r3, #316	@ 0x13c
 8017a64:	4a0b      	ldr	r2, [pc, #44]	@ (8017a94 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8017a66:	490c      	ldr	r1, [pc, #48]	@ (8017a98 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8017a68:	68f8      	ldr	r0, [r7, #12]
 8017a6a:	47a0      	blx	r4
 8017a6c:	2301      	movs	r3, #1
 8017a6e:	e009      	b.n	8017a84 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8017a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a72:	9300      	str	r3, [sp, #0]
 8017a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a76:	687a      	ldr	r2, [r7, #4]
 8017a78:	68b9      	ldr	r1, [r7, #8]
 8017a7a:	68f8      	ldr	r0, [r7, #12]
 8017a7c:	f000 f812 	bl	8017aa4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8017a80:	4603      	mov	r3, r0
                                          multiplier);
 8017a82:	bf00      	nop
}
 8017a84:	4618      	mov	r0, r3
 8017a86:	3730      	adds	r7, #48	@ 0x30
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8017a8c:	f3af 8000 	nop.w
 8017a90:	08021d8c 	.word	0x08021d8c
 8017a94:	08021b54 	.word	0x08021b54
 8017a98:	08021c58 	.word	0x08021c58
 8017a9c:	47ae147b 	.word	0x47ae147b
 8017aa0:	3f947ae1 	.word	0x3f947ae1

08017aa4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8017aa4:	b590      	push	{r4, r7, lr}
 8017aa6:	b089      	sub	sp, #36	@ 0x24
 8017aa8:	af02      	add	r7, sp, #8
 8017aaa:	60f8      	str	r0, [r7, #12]
 8017aac:	60b9      	str	r1, [r7, #8]
 8017aae:	607a      	str	r2, [r7, #4]
 8017ab0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8017ab2:	68bb      	ldr	r3, [r7, #8]
 8017ab4:	ed93 7a03 	vldr	s14, [r3, #12]
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	edd3 7a03 	vldr	s15, [r3, #12]
 8017abe:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8017ac2:	ee17 0a90 	vmov	r0, s15
 8017ac6:	f7e8 fd6f 	bl	80005a8 <__aeabi_f2d>
 8017aca:	4602      	mov	r2, r0
 8017acc:	460b      	mov	r3, r1
 8017ace:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	461c      	mov	r4, r3
 8017ad6:	f04f 0200 	mov.w	r2, #0
 8017ada:	f04f 0300 	mov.w	r3, #0
 8017ade:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017ae2:	f7e9 f83f 	bl	8000b64 <__aeabi_dcmpge>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d101      	bne.n	8017af0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8017aec:	2300      	movs	r3, #0
 8017aee:	461c      	mov	r4, r3
 8017af0:	b2e3      	uxtb	r3, r4
 8017af2:	f083 0301 	eor.w	r3, r3, #1
 8017af6:	b2db      	uxtb	r3, r3
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d00b      	beq.n	8017b14 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	691c      	ldr	r4, [r3, #16]
 8017b00:	4b0f      	ldr	r3, [pc, #60]	@ (8017b40 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8017b02:	9300      	str	r3, [sp, #0]
 8017b04:	f240 1349 	movw	r3, #329	@ 0x149
 8017b08:	4a0e      	ldr	r2, [pc, #56]	@ (8017b44 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8017b0a:	490f      	ldr	r1, [pc, #60]	@ (8017b48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8017b0c:	68f8      	ldr	r0, [r7, #12]
 8017b0e:	47a0      	blx	r4
 8017b10:	2301      	movs	r3, #1
 8017b12:	e010      	b.n	8017b36 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	68db      	ldr	r3, [r3, #12]
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f7e8 fd45 	bl	80005a8 <__aeabi_f2d>
 8017b1e:	4602      	mov	r2, r0
 8017b20:	460b      	mov	r3, r1
 8017b22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017b26:	f7e8 fec1 	bl	80008ac <__aeabi_ddiv>
 8017b2a:	4602      	mov	r2, r0
 8017b2c:	460b      	mov	r3, r1
 8017b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017b30:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8017b34:	2300      	movs	r3, #0
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	371c      	adds	r7, #28
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd90      	pop	{r4, r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	08021db0 	.word	0x08021db0
 8017b44:	08021b54 	.word	0x08021b54
 8017b48:	08021c58 	.word	0x08021c58

08017b4c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8017b4c:	b590      	push	{r4, r7, lr}
 8017b4e:	b08b      	sub	sp, #44	@ 0x2c
 8017b50:	af02      	add	r7, sp, #8
 8017b52:	6178      	str	r0, [r7, #20]
 8017b54:	ed87 0a04 	vstr	s0, [r7, #16]
 8017b58:	60f9      	str	r1, [r7, #12]
 8017b5a:	edc7 0a02 	vstr	s1, [r7, #8]
 8017b5e:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8017b60:	ed97 7a02 	vldr	s14, [r7, #8]
 8017b64:	edd7 7a04 	vldr	s15, [r7, #16]
 8017b68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017b6c:	eeb0 0a66 	vmov.f32	s0, s13
 8017b70:	f7ff feae 	bl	80178d0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017b74:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8017b78:	f7ff fee1 	bl	801793e <_ZNSt14numeric_limitsIlE3minEv>
 8017b7c:	ee07 0a90 	vmov	s15, r0
 8017b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b84:	ed97 7a07 	vldr	s14, [r7, #28]
 8017b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b90:	db0e      	blt.n	8017bb0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8017b92:	f7ff fdf4 	bl	801777e <_ZNSt14numeric_limitsIlE3maxEv>
 8017b96:	ee07 0a90 	vmov	s15, r0
 8017b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8017b9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8017ba2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017baa:	d801      	bhi.n	8017bb0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 8017bac:	2301      	movs	r3, #1
 8017bae:	e000      	b.n	8017bb2 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8017bb0:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8017bb2:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 8017bb4:	7efb      	ldrb	r3, [r7, #27]
 8017bb6:	f083 0301 	eor.w	r3, r3, #1
 8017bba:	b2db      	uxtb	r3, r3
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d00b      	beq.n	8017bd8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 8017bc0:	697b      	ldr	r3, [r7, #20]
 8017bc2:	691c      	ldr	r4, [r3, #16]
 8017bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8017bf8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 8017bc6:	9300      	str	r3, [sp, #0]
 8017bc8:	f240 1357 	movw	r3, #343	@ 0x157
 8017bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8017bfc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 8017bce:	490c      	ldr	r1, [pc, #48]	@ (8017c00 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 8017bd0:	6978      	ldr	r0, [r7, #20]
 8017bd2:	47a0      	blx	r4
 8017bd4:	2301      	movs	r3, #1
 8017bd6:	e00a      	b.n	8017bee <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 8017bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8017bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017be0:	ee17 2a90 	vmov	r2, s15
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	441a      	add	r2, r3
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8017bec:	2300      	movs	r3, #0
}
 8017bee:	4618      	mov	r0, r3
 8017bf0:	3724      	adds	r7, #36	@ 0x24
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd90      	pop	{r4, r7, pc}
 8017bf6:	bf00      	nop
 8017bf8:	08021dcc 	.word	0x08021dcc
 8017bfc:	08021b54 	.word	0x08021b54
 8017c00:	08021c58 	.word	0x08021c58

08017c04 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b08a      	sub	sp, #40	@ 0x28
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	607a      	str	r2, [r7, #4]
 8017c0e:	603b      	str	r3, [r7, #0]
 8017c10:	460b      	mov	r3, r1
 8017c12:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8017c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c16:	68db      	ldr	r3, [r3, #12]
 8017c18:	627b      	str	r3, [r7, #36]	@ 0x24
  const auto zero_point = output->params.zero_point;
 8017c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c1c:	691b      	ldr	r3, [r3, #16]
 8017c1e:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8017c20:	7afb      	ldrb	r3, [r7, #11]
 8017c22:	2b01      	cmp	r3, #1
 8017c24:	d120      	bne.n	8017c68 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8017c26:	f107 0314 	add.w	r3, r7, #20
 8017c2a:	461a      	mov	r2, r3
 8017c2c:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8017d78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8017c30:	6a39      	ldr	r1, [r7, #32]
 8017c32:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017c36:	68f8      	ldr	r0, [r7, #12]
 8017c38:	f7ff ff88 	bl	8017b4c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	76fb      	strb	r3, [r7, #27]
 8017c40:	7efb      	ldrb	r3, [r7, #27]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d001      	beq.n	8017c4a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 8017c46:	7efb      	ldrb	r3, [r7, #27]
 8017c48:	e091      	b.n	8017d6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8017c4a:	f107 0214 	add.w	r2, r7, #20
 8017c4e:	1d3b      	adds	r3, r7, #4
 8017c50:	4611      	mov	r1, r2
 8017c52:	4618      	mov	r0, r3
 8017c54:	f7f3 faab 	bl	800b1ae <_ZSt3maxIlERKT_S2_S2_>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	681a      	ldr	r2, [r3, #0]
 8017c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c5e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8017c60:	683a      	ldr	r2, [r7, #0]
 8017c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c64:	601a      	str	r2, [r3, #0]
 8017c66:	e081      	b.n	8017d6c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8017c68:	7afb      	ldrb	r3, [r7, #11]
 8017c6a:	2b03      	cmp	r3, #3
 8017c6c:	d13a      	bne.n	8017ce4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 8017c6e:	f107 0314 	add.w	r3, r7, #20
 8017c72:	461a      	mov	r2, r3
 8017c74:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8017d78 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8017c78:	6a39      	ldr	r1, [r7, #32]
 8017c7a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017c7e:	68f8      	ldr	r0, [r7, #12]
 8017c80:	f7ff ff64 	bl	8017b4c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017c84:	4603      	mov	r3, r0
 8017c86:	777b      	strb	r3, [r7, #29]
 8017c88:	7f7b      	ldrb	r3, [r7, #29]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d001      	beq.n	8017c92 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 8017c8e:	7f7b      	ldrb	r3, [r7, #29]
 8017c90:	e06d      	b.n	8017d6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8017c92:	f107 0214 	add.w	r2, r7, #20
 8017c96:	1d3b      	adds	r3, r7, #4
 8017c98:	4611      	mov	r1, r2
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7f3 fa87 	bl	800b1ae <_ZSt3maxIlERKT_S2_S2_>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	681a      	ldr	r2, [r3, #0]
 8017ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ca6:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8017ca8:	f107 0314 	add.w	r3, r7, #20
 8017cac:	461a      	mov	r2, r3
 8017cae:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8017cb2:	6a39      	ldr	r1, [r7, #32]
 8017cb4:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017cb8:	68f8      	ldr	r0, [r7, #12]
 8017cba:	f7ff ff47 	bl	8017b4c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	773b      	strb	r3, [r7, #28]
 8017cc2:	7f3b      	ldrb	r3, [r7, #28]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d001      	beq.n	8017ccc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 8017cc8:	7f3b      	ldrb	r3, [r7, #28]
 8017cca:	e050      	b.n	8017d6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8017ccc:	f107 0214 	add.w	r2, r7, #20
 8017cd0:	463b      	mov	r3, r7
 8017cd2:	4611      	mov	r1, r2
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7f3 fa56 	bl	800b186 <_ZSt3minIlERKT_S2_S2_>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	681a      	ldr	r2, [r3, #0]
 8017cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ce0:	601a      	str	r2, [r3, #0]
 8017ce2:	e043      	b.n	8017d6c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 8017ce4:	7afb      	ldrb	r3, [r7, #11]
 8017ce6:	2b02      	cmp	r3, #2
 8017ce8:	d13a      	bne.n	8017d60 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 8017cea:	f107 0314 	add.w	r3, r7, #20
 8017cee:	461a      	mov	r2, r3
 8017cf0:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8017cf4:	6a39      	ldr	r1, [r7, #32]
 8017cf6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017cfa:	68f8      	ldr	r0, [r7, #12]
 8017cfc:	f7ff ff26 	bl	8017b4c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017d00:	4603      	mov	r3, r0
 8017d02:	77fb      	strb	r3, [r7, #31]
 8017d04:	7ffb      	ldrb	r3, [r7, #31]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d001      	beq.n	8017d0e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 8017d0a:	7ffb      	ldrb	r3, [r7, #31]
 8017d0c:	e02f      	b.n	8017d6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8017d0e:	f107 0214 	add.w	r2, r7, #20
 8017d12:	1d3b      	adds	r3, r7, #4
 8017d14:	4611      	mov	r1, r2
 8017d16:	4618      	mov	r0, r3
 8017d18:	f7f3 fa49 	bl	800b1ae <_ZSt3maxIlERKT_S2_S2_>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	681a      	ldr	r2, [r3, #0]
 8017d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d22:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8017d24:	f107 0314 	add.w	r3, r7, #20
 8017d28:	461a      	mov	r2, r3
 8017d2a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8017d2e:	6a39      	ldr	r1, [r7, #32]
 8017d30:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017d34:	68f8      	ldr	r0, [r7, #12]
 8017d36:	f7ff ff09 	bl	8017b4c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	77bb      	strb	r3, [r7, #30]
 8017d3e:	7fbb      	ldrb	r3, [r7, #30]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d001      	beq.n	8017d48 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 8017d44:	7fbb      	ldrb	r3, [r7, #30]
 8017d46:	e012      	b.n	8017d6e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8017d48:	f107 0214 	add.w	r2, r7, #20
 8017d4c:	463b      	mov	r3, r7
 8017d4e:	4611      	mov	r1, r2
 8017d50:	4618      	mov	r0, r3
 8017d52:	f7f3 fa18 	bl	800b186 <_ZSt3minIlERKT_S2_S2_>
 8017d56:	4603      	mov	r3, r0
 8017d58:	681a      	ldr	r2, [r3, #0]
 8017d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d5c:	601a      	str	r2, [r3, #0]
 8017d5e:	e005      	b.n	8017d6c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8017d60:	687a      	ldr	r2, [r7, #4]
 8017d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d64:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8017d66:	683a      	ldr	r2, [r7, #0]
 8017d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d6a:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8017d6c:	2300      	movs	r3, #0
}
 8017d6e:	4618      	mov	r0, r3
 8017d70:	3728      	adds	r7, #40	@ 0x28
 8017d72:	46bd      	mov	sp, r7
 8017d74:	bd80      	pop	{r7, pc}
 8017d76:	bf00      	nop
 8017d78:	00000000 	.word	0x00000000

08017d7c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8017d7c:	b590      	push	{r4, r7, lr}
 8017d7e:	b08b      	sub	sp, #44	@ 0x2c
 8017d80:	af04      	add	r7, sp, #16
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	607a      	str	r2, [r7, #4]
 8017d86:	603b      	str	r3, [r7, #0]
 8017d88:	460b      	mov	r3, r1
 8017d8a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8017d90:	2300      	movs	r3, #0
 8017d92:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	781b      	ldrb	r3, [r3, #0]
 8017d98:	2b03      	cmp	r3, #3
 8017d9a:	d108      	bne.n	8017dae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8017d9c:	f7ff fde9 	bl	8017972 <_ZNSt14numeric_limitsIhE3minEv>
 8017da0:	4603      	mov	r3, r0
 8017da2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8017da4:	f7ff fded 	bl	8017982 <_ZNSt14numeric_limitsIhE3maxEv>
 8017da8:	4603      	mov	r3, r0
 8017daa:	613b      	str	r3, [r7, #16]
 8017dac:	e025      	b.n	8017dfa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	781b      	ldrb	r3, [r3, #0]
 8017db2:	2b09      	cmp	r3, #9
 8017db4:	d108      	bne.n	8017dc8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8017db6:	f7ff fdcb 	bl	8017950 <_ZNSt14numeric_limitsIaE3minEv>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8017dbe:	f7ff fdd0 	bl	8017962 <_ZNSt14numeric_limitsIaE3maxEv>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	613b      	str	r3, [r7, #16]
 8017dc6:	e018      	b.n	8017dfa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	781b      	ldrb	r3, [r3, #0]
 8017dcc:	2b07      	cmp	r3, #7
 8017dce:	d108      	bne.n	8017de2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8017dd0:	f7ff fda2 	bl	8017918 <_ZNSt14numeric_limitsIsE3minEv>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8017dd8:	f7ff fda8 	bl	801792c <_ZNSt14numeric_limitsIsE3maxEv>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	613b      	str	r3, [r7, #16]
 8017de0:	e00b      	b.n	8017dfa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	691c      	ldr	r4, [r3, #16]
 8017de6:	4b0e      	ldr	r3, [pc, #56]	@ (8017e20 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8017de8:	9300      	str	r3, [sp, #0]
 8017dea:	f240 138f 	movw	r3, #399	@ 0x18f
 8017dee:	4a0d      	ldr	r2, [pc, #52]	@ (8017e24 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8017df0:	490d      	ldr	r1, [pc, #52]	@ (8017e28 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 8017df2:	68f8      	ldr	r0, [r7, #12]
 8017df4:	47a0      	blx	r4
 8017df6:	2301      	movs	r3, #1
 8017df8:	e00d      	b.n	8017e16 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 8017dfa:	7af9      	ldrb	r1, [r7, #11]
 8017dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dfe:	9302      	str	r3, [sp, #8]
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	9301      	str	r3, [sp, #4]
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	9300      	str	r3, [sp, #0]
 8017e08:	693b      	ldr	r3, [r7, #16]
 8017e0a:	697a      	ldr	r2, [r7, #20]
 8017e0c:	68f8      	ldr	r0, [r7, #12]
 8017e0e:	f7ff fef9 	bl	8017c04 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 8017e12:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 8017e14:	bf00      	nop
}
 8017e16:	4618      	mov	r0, r3
 8017e18:	371c      	adds	r7, #28
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd90      	pop	{r4, r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	08021df4 	.word	0x08021df4
 8017e24:	08021b54 	.word	0x08021b54
 8017e28:	08021c58 	.word	0x08021c58

08017e2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:
  int32_t DimensionsCount() const { return size_; }
 8017e2c:	b480      	push	{r7}
 8017e2e:	b083      	sub	sp, #12
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	4618      	mov	r0, r3
 8017e3a:	370c      	adds	r7, #12
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e42:	4770      	bx	lr

08017e44 <_ZN6tflite14AlignPointerUpEPhj>:
#include "edge-impulse-sdk/tensorflow/lite/micro/flatbuffer_conversions_bridge.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8017e44:	b480      	push	{r7}
 8017e46:	b085      	sub	sp, #20
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
 8017e4c:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8017e52:	683a      	ldr	r2, [r7, #0]
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	4413      	add	r3, r2
 8017e58:	1e5a      	subs	r2, r3, #1
 8017e5a:	683b      	ldr	r3, [r7, #0]
 8017e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e60:	683a      	ldr	r2, [r7, #0]
 8017e62:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8017e66:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8017e68:	68bb      	ldr	r3, [r7, #8]
}
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	3714      	adds	r7, #20
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e74:	4770      	bx	lr
	...

08017e78 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b088      	sub	sp, #32
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	60f8      	str	r0, [r7, #12]
 8017e80:	60b9      	str	r1, [r7, #8]
 8017e82:	607a      	str	r2, [r7, #4]
 8017e84:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8017e86:	68f8      	ldr	r0, [r7, #12]
 8017e88:	f000 f854 	bl	8017f34 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8017e8c:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8017e8e:	2300      	movs	r3, #0
 8017e90:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8017e92:	2300      	movs	r3, #0
 8017e94:	61bb      	str	r3, [r7, #24]
 8017e96:	e011      	b.n	8017ebc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8017e98:	69ba      	ldr	r2, [r7, #24]
 8017e9a:	4613      	mov	r3, r2
 8017e9c:	005b      	lsls	r3, r3, #1
 8017e9e:	4413      	add	r3, r2
 8017ea0:	009b      	lsls	r3, r3, #2
 8017ea2:	461a      	mov	r2, r3
 8017ea4:	697b      	ldr	r3, [r7, #20]
 8017ea6:	4413      	add	r3, r2
 8017ea8:	685b      	ldr	r3, [r3, #4]
 8017eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017eae:	d102      	bne.n	8017eb6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 8017eb0:	69fb      	ldr	r3, [r7, #28]
 8017eb2:	3301      	adds	r3, #1
 8017eb4:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8017eb6:	69bb      	ldr	r3, [r7, #24]
 8017eb8:	3301      	adds	r3, #1
 8017eba:	61bb      	str	r3, [r7, #24]
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	699b      	ldr	r3, [r3, #24]
 8017ec0:	69ba      	ldr	r2, [r7, #24]
 8017ec2:	429a      	cmp	r2, r3
 8017ec4:	d3e8      	bcc.n	8017e98 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8017ec6:	69fb      	ldr	r3, [r7, #28]
 8017ec8:	2b0b      	cmp	r3, #11
 8017eca:	d905      	bls.n	8017ed8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 8017ecc:	4917      	ldr	r1, [pc, #92]	@ (8017f2c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 8017ece:	4818      	ldr	r0, [pc, #96]	@ (8017f30 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb8>)
 8017ed0:	f000 f83f 	bl	8017f52 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	e024      	b.n	8017f22 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	699a      	ldr	r2, [r3, #24]
 8017edc:	4613      	mov	r3, r2
 8017ede:	005b      	lsls	r3, r3, #1
 8017ee0:	4413      	add	r3, r2
 8017ee2:	009b      	lsls	r3, r3, #2
 8017ee4:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	4413      	add	r3, r2
 8017eea:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8017eec:	693b      	ldr	r3, [r7, #16]
 8017eee:	461a      	mov	r2, r3
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	6013      	str	r3, [r2, #0]
 8017ef4:	6053      	str	r3, [r2, #4]
 8017ef6:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8017ef8:	693b      	ldr	r3, [r7, #16]
 8017efa:	68ba      	ldr	r2, [r7, #8]
 8017efc:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8017efe:	693b      	ldr	r3, [r7, #16]
 8017f00:	f04f 32ff 	mov.w	r2, #4294967295
 8017f04:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 8017f06:	693b      	ldr	r3, [r7, #16]
 8017f08:	687a      	ldr	r2, [r7, #4]
 8017f0a:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	699b      	ldr	r3, [r3, #24]
 8017f10:	461a      	mov	r2, r3
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	699b      	ldr	r3, [r3, #24]
 8017f1a:	1c5a      	adds	r2, r3, #1
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 8017f20:	2300      	movs	r3, #0
}
 8017f22:	4618      	mov	r0, r3
 8017f24:	3720      	adds	r7, #32
 8017f26:	46bd      	mov	sp, r7
 8017f28:	bd80      	pop	{r7, pc}
 8017f2a:	bf00      	nop
 8017f2c:	080246d4 	.word	0x080246d4
 8017f30:	08021fd8 	.word	0x08021fd8

08017f34 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
  }

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b082      	sub	sp, #8
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	69db      	ldr	r3, [r3, #28]
 8017f40:	2104      	movs	r1, #4
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7ff ff7e 	bl	8017e44 <_ZN6tflite14AlignPointerUpEPhj>
 8017f48:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3708      	adds	r7, #8
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}

08017f52 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>:
namespace tflite {

// From
// https://stackoverflow.com/questions/23235910/variadic-unused-function-macro
template <typename... Args>
void Unused(Args&&... args) {
 8017f52:	b480      	push	{r7}
 8017f54:	b083      	sub	sp, #12
 8017f56:	af00      	add	r7, sp, #0
 8017f58:	6078      	str	r0, [r7, #4]
 8017f5a:	6039      	str	r1, [r7, #0]
  (void)(sizeof...(args));
}
 8017f5c:	bf00      	nop
 8017f5e:	370c      	adds	r7, #12
 8017f60:	46bd      	mov	sp, r7
 8017f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f66:	4770      	bx	lr

08017f68 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8017f68:	b480      	push	{r7}
 8017f6a:	b083      	sub	sp, #12
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	695b      	ldr	r3, [r3, #20]
 8017f74:	4618      	mov	r0, r3
 8017f76:	370c      	adds	r7, #12
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f7e:	4770      	bx	lr

08017f80 <_ZN6tflite10MicroGraph14GetAllocationsEv>:
    current_subgraph_index_ = subgraph_idx;
  }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8017f80:	b480      	push	{r7}
 8017f82:	b083      	sub	sp, #12
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	691b      	ldr	r3, [r3, #16]
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	370c      	adds	r7, #12
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr

08017f98 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
#include <cstdint>

#include "edge-impulse-sdk/tensorflow/lite/micro/micro_log.h"

namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 8017f98:	b480      	push	{r7}
 8017f9a:	b085      	sub	sp, #20
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	60f8      	str	r0, [r7, #12]
 8017fa0:	60b9      	str	r1, [r7, #8]
 8017fa2:	607a      	str	r2, [r7, #4]
 8017fa4:	603b      	str	r3, [r7, #0]
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 8017fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8017fd8 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x40>)
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	601a      	str	r2, [r3, #0]
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	68ba      	ldr	r2, [r7, #8]
 8017fb0:	605a      	str	r2, [r3, #4]
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	683a      	ldr	r2, [r7, #0]
 8017fb6:	609a      	str	r2, [r3, #8]
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	687a      	ldr	r2, [r7, #4]
 8017fbc:	60da      	str	r2, [r3, #12]
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	611a      	str	r2, [r3, #16]
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	615a      	str	r2, [r3, #20]
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	4618      	mov	r0, r3
 8017fce:	3714      	adds	r7, #20
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd6:	4770      	bx	lr
 8017fd8:	080246e0 	.word	0x080246e0

08017fdc <_ZN6tflite12MicroContextD1Ev>:

MicroContext::~MicroContext() {}
 8017fdc:	b480      	push	{r7}
 8017fde:	b083      	sub	sp, #12
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
 8017fe4:	4a04      	ldr	r2, [pc, #16]	@ (8017ff8 <_ZN6tflite12MicroContextD1Ev+0x1c>)
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	601a      	str	r2, [r3, #0]
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	4618      	mov	r0, r3
 8017fee:	370c      	adds	r7, #12
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff6:	4770      	bx	lr
 8017ff8:	080246e0 	.word	0x080246e0

08017ffc <_ZN6tflite12MicroContextD0Ev>:
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b082      	sub	sp, #8
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
 8018004:	6878      	ldr	r0, [r7, #4]
 8018006:	f7ff ffe9 	bl	8017fdc <_ZN6tflite12MicroContextD1Ev>
 801800a:	2118      	movs	r1, #24
 801800c:	6878      	ldr	r0, [r7, #4]
 801800e:	f002 f85b 	bl	801a0c8 <_ZdlPvj>
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	4618      	mov	r0, r3
 8018016:	3708      	adds	r7, #8
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}

0801801c <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
 801801c:	b580      	push	{r7, lr}
 801801e:	b082      	sub	sp, #8
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	6039      	str	r1, [r7, #0]
  return allocator_.AllocatePersistentBuffer(bytes);
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	685a      	ldr	r2, [r3, #4]
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	685b      	ldr	r3, [r3, #4]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	3314      	adds	r3, #20
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	6839      	ldr	r1, [r7, #0]
 8018036:	4610      	mov	r0, r2
 8018038:	4798      	blx	r3
 801803a:	4603      	mov	r3, r0
}
 801803c:	4618      	mov	r0, r3
 801803e:	3708      	adds	r7, #8
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}

08018044 <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroContext::RequestScratchBufferInArena(size_t bytes,
                                                       int* buffer_idx) {
 8018044:	b590      	push	{r4, r7, lr}
 8018046:	b085      	sub	sp, #20
 8018048:	af00      	add	r7, sp, #0
 801804a:	60f8      	str	r0, [r7, #12]
 801804c:	60b9      	str	r1, [r7, #8]
 801804e:	607a      	str	r2, [r7, #4]
  return allocator_.RequestScratchBufferInArena(
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 8018058:	4618      	mov	r0, r3
 801805a:	f7ff ff85 	bl	8017f68 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 801805e:	4602      	mov	r2, r0
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	68b9      	ldr	r1, [r7, #8]
 8018064:	4620      	mov	r0, r4
 8018066:	f7ff ff07 	bl	8017e78 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 801806a:	4603      	mov	r3, r0
}
 801806c:	4618      	mov	r0, r3
 801806e:	3714      	adds	r7, #20
 8018070:	46bd      	mov	sp, r7
 8018072:	bd90      	pop	{r4, r7, pc}

08018074 <_ZN6tflite12MicroContext16GetScratchBufferEi>:

void* MicroContext::GetScratchBuffer(int buffer_idx) {
 8018074:	b480      	push	{r7}
 8018076:	b085      	sub	sp, #20
 8018078:	af00      	add	r7, sp, #0
 801807a:	6078      	str	r0, [r7, #4]
 801807c:	6039      	str	r1, [r7, #0]
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	691a      	ldr	r2, [r3, #16]
 8018082:	683b      	ldr	r3, [r7, #0]
 8018084:	009b      	lsls	r3, r3, #2
 8018086:	4413      	add	r3, r2
 8018088:	60fb      	str	r3, [r7, #12]
  return handle->data;
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	681b      	ldr	r3, [r3, #0]
}
 801808e:	4618      	mov	r0, r3
 8018090:	3714      	adds	r7, #20
 8018092:	46bd      	mov	sp, r7
 8018094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018098:	4770      	bx	lr

0801809a <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 801809a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801809e:	b084      	sub	sp, #16
 80180a0:	af02      	add	r7, sp, #8
 80180a2:	6078      	str	r0, [r7, #4]
 80180a4:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	685d      	ldr	r5, [r3, #4]
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	685b      	ldr	r3, [r3, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	3304      	adds	r3, #4
 80180b2:	681c      	ldr	r4, [r3, #0]
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	68de      	ldr	r6, [r3, #12]
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	689b      	ldr	r3, [r3, #8]
 80180bc:	4618      	mov	r0, r3
 80180be:	f7ff ff5f 	bl	8017f80 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80180c2:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80180c8:	4618      	mov	r0, r3
 80180ca:	f7ff ff4d 	bl	8017f68 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80180ce:	4603      	mov	r3, r0
 80180d0:	9300      	str	r3, [sp, #0]
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	4642      	mov	r2, r8
 80180d6:	4631      	mov	r1, r6
 80180d8:	4628      	mov	r0, r5
 80180da:	47a0      	blx	r4
 80180dc:	4603      	mov	r3, r0
}
 80180de:	4618      	mov	r0, r3
 80180e0:	3708      	adds	r7, #8
 80180e2:	46bd      	mov	sp, r7
 80180e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080180e8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:

int MicroContext::GetTensorIndex(int index, int max_size,
                                 const int* tensor_indices) {
 80180e8:	b480      	push	{r7}
 80180ea:	b087      	sub	sp, #28
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	60f8      	str	r0, [r7, #12]
 80180f0:	60b9      	str	r1, [r7, #8]
 80180f2:	607a      	str	r2, [r7, #4]
 80180f4:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80180f6:	68bb      	ldr	r3, [r7, #8]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	db0f      	blt.n	801811c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
 80180fc:	68ba      	ldr	r2, [r7, #8]
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	429a      	cmp	r2, r3
 8018102:	da0b      	bge.n	801811c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	009b      	lsls	r3, r3, #2
 8018108:	683a      	ldr	r2, [r7, #0]
 801810a:	4413      	add	r3, r2
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8018110:	697b      	ldr	r3, [r7, #20]
 8018112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018116:	d001      	beq.n	801811c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
      return tensor_index;
 8018118:	697b      	ldr	r3, [r7, #20]
 801811a:	e001      	b.n	8018120 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x38>
    }
  }
  return -1;
 801811c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018120:	4618      	mov	r0, r3
 8018122:	371c      	adds	r7, #28
 8018124:	46bd      	mov	sp, r7
 8018126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812a:	4770      	bx	lr

0801812c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 801812c:	b580      	push	{r7, lr}
 801812e:	b086      	sub	sp, #24
 8018130:	af00      	add	r7, sp, #0
 8018132:	60f8      	str	r0, [r7, #12]
 8018134:	60b9      	str	r1, [r7, #8]
 8018136:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	681a      	ldr	r2, [r3, #0]
 801813e:	68bb      	ldr	r3, [r7, #8]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	3304      	adds	r3, #4
 8018144:	6879      	ldr	r1, [r7, #4]
 8018146:	68f8      	ldr	r0, [r7, #12]
 8018148:	f7ff ffce 	bl	80180e8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 801814c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801814e:	697b      	ldr	r3, [r7, #20]
 8018150:	2b00      	cmp	r3, #0
 8018152:	da01      	bge.n	8018158 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8018154:	2300      	movs	r3, #0
 8018156:	e008      	b.n	801816a <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	3314      	adds	r3, #20
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	6979      	ldr	r1, [r7, #20]
 8018162:	68f8      	ldr	r0, [r7, #12]
 8018164:	4798      	blx	r3
 8018166:	4603      	mov	r3, r0
 8018168:	bf00      	nop
}
 801816a:	4618      	mov	r0, r3
 801816c:	3718      	adds	r7, #24
 801816e:	46bd      	mov	sp, r7
 8018170:	bd80      	pop	{r7, pc}

08018172 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 8018172:	b580      	push	{r7, lr}
 8018174:	b086      	sub	sp, #24
 8018176:	af00      	add	r7, sp, #0
 8018178:	60f8      	str	r0, [r7, #12]
 801817a:	60b9      	str	r1, [r7, #8]
 801817c:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 801817e:	68bb      	ldr	r3, [r7, #8]
 8018180:	685b      	ldr	r3, [r3, #4]
 8018182:	681a      	ldr	r2, [r3, #0]
 8018184:	68bb      	ldr	r3, [r7, #8]
 8018186:	685b      	ldr	r3, [r3, #4]
 8018188:	3304      	adds	r3, #4
 801818a:	6879      	ldr	r1, [r7, #4]
 801818c:	68f8      	ldr	r0, [r7, #12]
 801818e:	f7ff ffab 	bl	80180e8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 8018192:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8018194:	697b      	ldr	r3, [r7, #20]
 8018196:	2b00      	cmp	r3, #0
 8018198:	da01      	bge.n	801819e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 801819a:	2300      	movs	r3, #0
 801819c:	e008      	b.n	80181b0 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	3314      	adds	r3, #20
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	6979      	ldr	r1, [r7, #20]
 80181a8:	68f8      	ldr	r0, [r7, #12]
 80181aa:	4798      	blx	r3
 80181ac:	4603      	mov	r3, r0
 80181ae:	bf00      	nop
}
 80181b0:	4618      	mov	r0, r3
 80181b2:	3718      	adds	r7, #24
 80181b4:	46bd      	mov	sp, r7
 80181b6:	bd80      	pop	{r7, pc}

080181b8 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempIntermediateTensor(
    const TfLiteNode* node, int index) {
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b086      	sub	sp, #24
 80181bc:	af00      	add	r7, sp, #0
 80181be:	60f8      	str	r0, [r7, #12]
 80181c0:	60b9      	str	r1, [r7, #8]
 80181c2:	607a      	str	r2, [r7, #4]
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	689b      	ldr	r3, [r3, #8]
 80181c8:	681a      	ldr	r2, [r3, #0]
                                          node->intermediates->data);
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	689b      	ldr	r3, [r3, #8]
 80181ce:	3304      	adds	r3, #4
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80181d0:	6879      	ldr	r1, [r7, #4]
 80181d2:	68f8      	ldr	r0, [r7, #12]
 80181d4:	f7ff ff88 	bl	80180e8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 80181d8:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80181da:	697b      	ldr	r3, [r7, #20]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	da01      	bge.n	80181e4 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 80181e0:	2300      	movs	r3, #0
 80181e2:	e008      	b.n	80181f6 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	3314      	adds	r3, #20
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	6979      	ldr	r1, [r7, #20]
 80181ee:	68f8      	ldr	r0, [r7, #12]
 80181f0:	4798      	blx	r3
 80181f2:	4603      	mov	r3, r0
 80181f4:	bf00      	nop
}
 80181f6:	4618      	mov	r0, r3
 80181f8:	3718      	adds	r7, #24
 80181fa:	46bd      	mov	sp, r7
 80181fc:	bd80      	pop	{r7, pc}

080181fe <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 80181fe:	b580      	push	{r7, lr}
 8018200:	b082      	sub	sp, #8
 8018202:	af00      	add	r7, sp, #0
 8018204:	6078      	str	r0, [r7, #4]
 8018206:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	685a      	ldr	r2, [r3, #4]
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	3308      	adds	r3, #8
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	6839      	ldr	r1, [r7, #0]
 8018218:	4610      	mov	r0, r2
 801821a:	4798      	blx	r3
 801821c:	bf00      	nop
}
 801821e:	3708      	adds	r7, #8
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}

08018224 <_ZN6tflite12MicroContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
 8018224:	b590      	push	{r4, r7, lr}
 8018226:	b083      	sub	sp, #12
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
 801822c:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	689b      	ldr	r3, [r3, #8]
 8018232:	4618      	mov	r0, r3
 8018234:	f7ff fea4 	bl	8017f80 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8018238:	4604      	mov	r4, r0
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	689b      	ldr	r3, [r3, #8]
 801823e:	4618      	mov	r0, r3
 8018240:	f7ff fe92 	bl	8017f68 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8018244:	4603      	mov	r3, r0
 8018246:	00db      	lsls	r3, r3, #3
 8018248:	4423      	add	r3, r4
              .tensors[tensor_idx];
 801824a:	6859      	ldr	r1, [r3, #4]
 801824c:	683a      	ldr	r2, [r7, #0]
 801824e:	4613      	mov	r3, r2
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	4413      	add	r3, r2
 8018254:	009b      	lsls	r3, r3, #2
 8018256:	440b      	add	r3, r1
}
 8018258:	4618      	mov	r0, r3
 801825a:	370c      	adds	r7, #12
 801825c:	46bd      	mov	sp, r7
 801825e:	bd90      	pop	{r4, r7, pc}

08018260 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 8018260:	b40e      	push	{r1, r2, r3}
 8018262:	b580      	push	{r7, lr}
 8018264:	b085      	sub	sp, #20
 8018266:	af00      	add	r7, sp, #0
 8018268:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 801826a:	f107 0320 	add.w	r3, r7, #32
 801826e:	60fb      	str	r3, [r7, #12]
  Log(format, args);
 8018270:	68f9      	ldr	r1, [r7, #12]
 8018272:	69f8      	ldr	r0, [r7, #28]
 8018274:	f000 f81e 	bl	80182b4 <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 8018278:	bf00      	nop
 801827a:	3714      	adds	r7, #20
 801827c:	46bd      	mov	sp, r7
 801827e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018282:	b003      	add	sp, #12
 8018284:	4770      	bx	lr

08018286 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 8018286:	b480      	push	{r7}
 8018288:	b083      	sub	sp, #12
 801828a:	af00      	add	r7, sp, #0
 801828c:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	689b      	ldr	r3, [r3, #8]
}
 8018292:	4618      	mov	r0, r3
 8018294:	370c      	adds	r7, #12
 8018296:	46bd      	mov	sp, r7
 8018298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829c:	4770      	bx	lr

0801829e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>:
void Unused(Args&&... args) {
 801829e:	b480      	push	{r7}
 80182a0:	b083      	sub	sp, #12
 80182a2:	af00      	add	r7, sp, #0
 80182a4:	6078      	str	r0, [r7, #4]
 80182a6:	6039      	str	r1, [r7, #0]
}
 80182a8:	bf00      	nop
 80182aa:	370c      	adds	r7, #12
 80182ac:	46bd      	mov	sp, r7
 80182ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b2:	4770      	bx	lr

080182b4 <_Z3LogPKcSt9__va_list>:
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
#include "edge-impulse-sdk/tensorflow/lite/micro/debug_log.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_string.h"
#endif

void Log(const char* format, va_list args) {
 80182b4:	b480      	push	{r7}
 80182b6:	b083      	sub	sp, #12
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
 80182bc:	6039      	str	r1, [r7, #0]
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 80182be:	bf00      	nop
 80182c0:	370c      	adds	r7, #12
 80182c2:	46bd      	mov	sp, r7
 80182c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c8:	4770      	bx	lr

080182ca <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80182ca:	b580      	push	{r7, lr}
 80182cc:	b082      	sub	sp, #8
 80182ce:	af00      	add	r7, sp, #0
 80182d0:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d101      	bne.n	80182dc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80182d8:	f005 f9d0 	bl	801d67c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	681b      	ldr	r3, [r3, #0]
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	3708      	adds	r7, #8
 80182e4:	46bd      	mov	sp, r7
 80182e6:	bd80      	pop	{r7, pc}

080182e8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b082      	sub	sp, #8
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d101      	bne.n	80182fa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x12>
 80182f6:	f005 f9c1 	bl	801d67c <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	681b      	ldr	r3, [r3, #0]
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3708      	adds	r7, #8
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}

08018306 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8018306:	b580      	push	{r7, lr}
 8018308:	b082      	sub	sp, #8
 801830a:	af00      	add	r7, sp, #0
 801830c:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d101      	bne.n	8018318 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8018314:	f005 f9b2 	bl	801d67c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
}
 801831c:	4618      	mov	r0, r3
 801831e:	3708      	adds	r7, #8
 8018320:	46bd      	mov	sp, r7
 8018322:	bd80      	pop	{r7, pc}

08018324 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8018324:	b580      	push	{r7, lr}
 8018326:	b082      	sub	sp, #8
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d101      	bne.n	8018336 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 8018332:	f005 f9a3 	bl	801d67c <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
}
 801833a:	4618      	mov	r0, r3
 801833c:	3708      	adds	r7, #8
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}

08018342 <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 8018342:	b580      	push	{r7, lr}
 8018344:	b082      	sub	sp, #8
 8018346:	af00      	add	r7, sp, #0
 8018348:	6078      	str	r0, [r7, #4]
 801834a:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	2b00      	cmp	r3, #0
 8018350:	da01      	bge.n	8018356 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8018352:	f005 f993 	bl	801d67c <abort>
    TFLITE_DCHECK_LT(i, size_);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	683a      	ldr	r2, [r7, #0]
 801835c:	429a      	cmp	r2, r3
 801835e:	db01      	blt.n	8018364 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8018360:	f005 f98c 	bl	801d67c <abort>
    return dims_[i];
 8018364:	687a      	ldr	r2, [r7, #4]
 8018366:	683b      	ldr	r3, [r7, #0]
 8018368:	009b      	lsls	r3, r3, #2
 801836a:	4413      	add	r3, r2
 801836c:	685b      	ldr	r3, [r3, #4]
  }
 801836e:	4618      	mov	r0, r3
 8018370:	3708      	adds	r7, #8
 8018372:	46bd      	mov	sp, r7
 8018374:	bd80      	pop	{r7, pc}
	...

08018378 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8018378:	b480      	push	{r7}
 801837a:	af00      	add	r7, sp, #0
 801837c:	4b04      	ldr	r3, [pc, #16]	@ (8018390 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 801837e:	ee07 3a90 	vmov	s15, r3
 8018382:	eeb0 0a67 	vmov.f32	s0, s15
 8018386:	46bd      	mov	sp, r7
 8018388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838c:	4770      	bx	lr
 801838e:	bf00      	nop
 8018390:	7f7fffff 	.word	0x7f7fffff

08018394 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8018394:	b480      	push	{r7}
 8018396:	af00      	add	r7, sp, #0
 8018398:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 801839c:	ee07 3a90 	vmov	s15, r3
 80183a0:	eeb0 0a67 	vmov.f32	s0, s15
 80183a4:	46bd      	mov	sp, r7
 80183a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183aa:	4770      	bx	lr

080183ac <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
      break;
  }
}

template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b084      	sub	sp, #16
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80183b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80183ba:	ed87 1a01 	vstr	s2, [r7, #4]
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
 80183be:	f107 0208 	add.w	r2, r7, #8
 80183c2:	f107 030c 	add.w	r3, r7, #12
 80183c6:	4611      	mov	r1, r2
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7f1 fcdf 	bl	8009d8c <_ZSt3maxIfERKT_S2_S2_>
 80183ce:	4602      	mov	r2, r0
 80183d0:	1d3b      	adds	r3, r7, #4
 80183d2:	4619      	mov	r1, r3
 80183d4:	4610      	mov	r0, r2
 80183d6:	f7ff f9b9 	bl	801774c <_ZSt3minIfERKT_S2_S2_>
 80183da:	4603      	mov	r3, r0
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	ee07 3a90 	vmov	s15, r3
}
 80183e2:	eeb0 0a67 	vmov.f32	s0, s15
 80183e6:	3710      	adds	r7, #16
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}

080183ec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b084      	sub	sp, #16
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	4603      	mov	r3, r0
 80183f4:	60b9      	str	r1, [r7, #8]
 80183f6:	607a      	str	r2, [r7, #4]
 80183f8:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 80183fa:	7bfb      	ldrb	r3, [r7, #15]
 80183fc:	2b01      	cmp	r3, #1
 80183fe:	d10b      	bne.n	8018418 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8018400:	68bb      	ldr	r3, [r7, #8]
 8018402:	f04f 0200 	mov.w	r2, #0
 8018406:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8018408:	f7ff ffb6 	bl	8018378 <_ZNSt14numeric_limitsIfE3maxEv>
 801840c:	eef0 7a40 	vmov.f32	s15, s0
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8018416:	e023      	b.n	8018460 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8018418:	7bfb      	ldrb	r3, [r7, #15]
 801841a:	2b03      	cmp	r3, #3
 801841c:	d107      	bne.n	801842e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	f04f 0200 	mov.w	r2, #0
 8018424:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	4a0f      	ldr	r2, [pc, #60]	@ (8018468 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 801842a:	601a      	str	r2, [r3, #0]
}
 801842c:	e018      	b.n	8018460 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 801842e:	7bfb      	ldrb	r3, [r7, #15]
 8018430:	2b02      	cmp	r3, #2
 8018432:	d107      	bne.n	8018444 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	4a0d      	ldr	r2, [pc, #52]	@ (801846c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8018438:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8018440:	601a      	str	r2, [r3, #0]
}
 8018442:	e00d      	b.n	8018460 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8018444:	f7ff ffa6 	bl	8018394 <_ZNSt14numeric_limitsIfE6lowestEv>
 8018448:	eef0 7a40 	vmov.f32	s15, s0
 801844c:	68bb      	ldr	r3, [r7, #8]
 801844e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8018452:	f7ff ff91 	bl	8018378 <_ZNSt14numeric_limitsIfE3maxEv>
 8018456:	eef0 7a40 	vmov.f32	s15, s0
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	edc3 7a00 	vstr	s15, [r3]
}
 8018460:	bf00      	nop
 8018462:	3710      	adds	r7, #16
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}
 8018468:	40c00000 	.word	0x40c00000
 801846c:	bf800000 	.word	0xbf800000

08018470 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8018470:	b480      	push	{r7}
 8018472:	b085      	sub	sp, #20
 8018474:	af00      	add	r7, sp, #0
 8018476:	60f8      	str	r0, [r7, #12]
 8018478:	60b9      	str	r1, [r7, #8]
 801847a:	607a      	str	r2, [r7, #4]
}
 801847c:	bf00      	nop
 801847e:	3714      	adds	r7, #20
 8018480:	46bd      	mov	sp, r7
 8018482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018486:	4770      	bx	lr

08018488 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8018488:	b590      	push	{r4, r7, lr}
 801848a:	b087      	sub	sp, #28
 801848c:	af00      	add	r7, sp, #0
 801848e:	60f8      	str	r0, [r7, #12]
 8018490:	60b9      	str	r1, [r7, #8]
 8018492:	607a      	str	r2, [r7, #4]
 8018494:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8018496:	68b9      	ldr	r1, [r7, #8]
 8018498:	68f8      	ldr	r0, [r7, #12]
 801849a:	f7ff ff52 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 801849e:	4604      	mov	r4, r0
 80184a0:	6839      	ldr	r1, [r7, #0]
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f7ff ff4d 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 80184a8:	4603      	mov	r3, r0
 80184aa:	429c      	cmp	r4, r3
 80184ac:	d001      	beq.n	80184b2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 80184ae:	f005 f8e5 	bl	801d67c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 80184b2:	68b9      	ldr	r1, [r7, #8]
 80184b4:	68f8      	ldr	r0, [r7, #12]
 80184b6:	f7ff ff44 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 80184ba:	4603      	mov	r3, r0
 80184bc:	613b      	str	r3, [r7, #16]
 80184be:	6839      	ldr	r1, [r7, #0]
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f7ff ff3e 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 80184c6:	4603      	mov	r3, r0
 80184c8:	617b      	str	r3, [r7, #20]
 80184ca:	f107 0214 	add.w	r2, r7, #20
 80184ce:	f107 0310 	add.w	r3, r7, #16
 80184d2:	4611      	mov	r1, r2
 80184d4:	4618      	mov	r0, r3
 80184d6:	f7f2 fe56 	bl	800b186 <_ZSt3minIlERKT_S2_S2_>
 80184da:	4603      	mov	r3, r0
 80184dc:	681b      	ldr	r3, [r3, #0]
}
 80184de:	4618      	mov	r0, r3
 80184e0:	371c      	adds	r7, #28
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd90      	pop	{r4, r7, pc}

080184e6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 80184e6:	b580      	push	{r7, lr}
 80184e8:	b086      	sub	sp, #24
 80184ea:	af00      	add	r7, sp, #0
 80184ec:	6078      	str	r0, [r7, #4]
 80184ee:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 80184f0:	6878      	ldr	r0, [r7, #4]
 80184f2:	f7ff fc9b 	bl	8017e2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80184f6:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	db03      	blt.n	8018506 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 80184fe:	683a      	ldr	r2, [r7, #0]
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	429a      	cmp	r2, r3
 8018504:	db01      	blt.n	801850a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8018506:	f005 f8b9 	bl	801d67c <abort>
  const auto* dims_data = shape.DimsData();
 801850a:	6878      	ldr	r0, [r7, #4]
 801850c:	f7ff f846 	bl	801759c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8018510:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8018512:	2301      	movs	r3, #1
 8018514:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8018516:	2300      	movs	r3, #0
 8018518:	613b      	str	r3, [r7, #16]
 801851a:	e011      	b.n	8018540 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801851c:	693a      	ldr	r2, [r7, #16]
 801851e:	683b      	ldr	r3, [r7, #0]
 8018520:	429a      	cmp	r2, r3
 8018522:	d005      	beq.n	8018530 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 8018524:	693b      	ldr	r3, [r7, #16]
 8018526:	009b      	lsls	r3, r3, #2
 8018528:	68ba      	ldr	r2, [r7, #8]
 801852a:	4413      	add	r3, r2
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	e000      	b.n	8018532 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 8018530:	2301      	movs	r3, #1
 8018532:	697a      	ldr	r2, [r7, #20]
 8018534:	fb02 f303 	mul.w	r3, r2, r3
 8018538:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801853a:	693b      	ldr	r3, [r7, #16]
 801853c:	3301      	adds	r3, #1
 801853e:	613b      	str	r3, [r7, #16]
 8018540:	693a      	ldr	r2, [r7, #16]
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	429a      	cmp	r2, r3
 8018546:	dbe9      	blt.n	801851c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 8018548:	697b      	ldr	r3, [r7, #20]
}
 801854a:	4618      	mov	r0, r3
 801854c:	3718      	adds	r7, #24
 801854e:	46bd      	mov	sp, r7
 8018550:	bd80      	pop	{r7, pc}

08018552 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8018552:	b590      	push	{r4, r7, lr}
 8018554:	b091      	sub	sp, #68	@ 0x44
 8018556:	af00      	add	r7, sp, #0
 8018558:	60f8      	str	r0, [r7, #12]
 801855a:	60b9      	str	r1, [r7, #8]
 801855c:	607a      	str	r2, [r7, #4]
 801855e:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	69db      	ldr	r3, [r3, #28]
 8018564:	62bb      	str	r3, [r7, #40]	@ 0x28
  const float output_activation_max = params.float_activation_max;
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	6a1b      	ldr	r3, [r3, #32]
 801856a:	627b      	str	r3, [r7, #36]	@ 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 801856c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801856e:	f7ff fc5d 	bl	8017e2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018572:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8018574:	6838      	ldr	r0, [r7, #0]
 8018576:	f7ff fc59 	bl	8017e2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801857a:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 801857c:	6a3b      	ldr	r3, [r7, #32]
 801857e:	3b01      	subs	r3, #1
 8018580:	4619      	mov	r1, r3
 8018582:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8018584:	f7ff ffaf 	bl	80184e6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8018588:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 801858a:	69fb      	ldr	r3, [r7, #28]
 801858c:	1e99      	subs	r1, r3, #2
 801858e:	6a3b      	ldr	r3, [r7, #32]
 8018590:	3b01      	subs	r3, #1
 8018592:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018594:	6838      	ldr	r0, [r7, #0]
 8018596:	f7ff ff77 	bl	8018488 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801859a:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 801859c:	69fb      	ldr	r3, [r7, #28]
 801859e:	3b01      	subs	r3, #1
 80185a0:	4619      	mov	r1, r3
 80185a2:	6838      	ldr	r0, [r7, #0]
 80185a4:	f7ff fecd 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 80185a8:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 80185aa:	2300      	movs	r3, #0
 80185ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80185ae:	e05e      	b.n	801866e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80185b0:	2300      	movs	r3, #0
 80185b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80185b4:	e054      	b.n	8018660 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 80185b6:	f04f 0300 	mov.w	r3, #0
 80185ba:	637b      	str	r3, [r7, #52]	@ 0x34
      for (int d = 0; d < accum_depth; ++d) {
 80185bc:	2300      	movs	r3, #0
 80185be:	633b      	str	r3, [r7, #48]	@ 0x30
 80185c0:	e020      	b.n	8018604 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 80185c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80185c4:	693a      	ldr	r2, [r7, #16]
 80185c6:	fb03 f202 	mul.w	r2, r3, r2
 80185ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185cc:	4413      	add	r3, r2
 80185ce:	009b      	lsls	r3, r3, #2
 80185d0:	687a      	ldr	r2, [r7, #4]
 80185d2:	4413      	add	r3, r2
 80185d4:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 80185d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185da:	693a      	ldr	r2, [r7, #16]
 80185dc:	fb03 f202 	mul.w	r2, r3, r2
 80185e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185e2:	4413      	add	r3, r2
 80185e4:	009b      	lsls	r3, r3, #2
 80185e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80185e8:	4413      	add	r3, r2
 80185ea:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 80185ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80185f2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80185f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80185fa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      for (int d = 0; d < accum_depth; ++d) {
 80185fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018600:	3301      	adds	r3, #1
 8018602:	633b      	str	r3, [r7, #48]	@ 0x30
 8018604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018606:	693b      	ldr	r3, [r7, #16]
 8018608:	429a      	cmp	r2, r3
 801860a:	dbda      	blt.n	80185c2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 801860c:	f04f 0300 	mov.w	r3, #0
 8018610:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (bias_data) {
 8018612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018614:	2b00      	cmp	r3, #0
 8018616:	d005      	beq.n	8018624 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 8018618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801861a:	009b      	lsls	r3, r3, #2
 801861c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801861e:	4413      	add	r3, r2
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8018624:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8018628:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801862c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018630:	697b      	ldr	r3, [r7, #20]
 8018632:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018634:	fb03 f202 	mul.w	r2, r3, r2
 8018638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801863a:	4413      	add	r3, r2
 801863c:	009b      	lsls	r3, r3, #2
 801863e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8018640:	18d4      	adds	r4, r2, r3
 8018642:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8018646:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 801864a:	eeb0 0a67 	vmov.f32	s0, s15
 801864e:	f7ff fead 	bl	80183ac <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8018652:	eef0 7a40 	vmov.f32	s15, s0
 8018656:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801865a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801865c:	3301      	adds	r3, #1
 801865e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	429a      	cmp	r2, r3
 8018666:	dba6      	blt.n	80185b6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 8018668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801866a:	3301      	adds	r3, #1
 801866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801866e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018670:	69bb      	ldr	r3, [r7, #24]
 8018672:	429a      	cmp	r2, r3
 8018674:	db9c      	blt.n	80185b0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8018676:	bf00      	nop
 8018678:	bf00      	nop
 801867a:	3744      	adds	r7, #68	@ 0x44
 801867c:	46bd      	mov	sp, r7
 801867e:	bd90      	pop	{r4, r7, pc}

08018680 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8018680:	b580      	push	{r7, lr}
 8018682:	b084      	sub	sp, #16
 8018684:	af00      	add	r7, sp, #0
 8018686:	60f8      	str	r0, [r7, #12]
 8018688:	60b9      	str	r1, [r7, #8]
 801868a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018690:	2b00      	cmp	r3, #0
 8018692:	d101      	bne.n	8018698 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8018694:	f004 fff2 	bl	801d67c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801869c:	213c      	movs	r1, #60	@ 0x3c
 801869e:	68f8      	ldr	r0, [r7, #12]
 80186a0:	4798      	blx	r3
 80186a2:	4603      	mov	r3, r0
}
 80186a4:	4618      	mov	r0, r3
 80186a6:	3710      	adds	r7, #16
 80186a8:	46bd      	mov	sp, r7
 80186aa:	bd80      	pop	{r7, pc}

080186ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80186ac:	b5b0      	push	{r4, r5, r7, lr}
 80186ae:	b0b2      	sub	sp, #200	@ 0xc8
 80186b0:	af04      	add	r7, sp, #16
 80186b2:	6078      	str	r0, [r7, #4]
 80186b4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80186b6:	683b      	ldr	r3, [r7, #0]
 80186b8:	691b      	ldr	r3, [r3, #16]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d101      	bne.n	80186c2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80186be:	f004 ffdd 	bl	801d67c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	695b      	ldr	r3, [r3, #20]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d101      	bne.n	80186ce <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 80186ca:	f004 ffd7 	bl	801d67c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80186ce:	683b      	ldr	r3, [r7, #0]
 80186d0:	691b      	ldr	r3, [r3, #16]
 80186d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  const auto params =
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	695b      	ldr	r3, [r3, #20]
 80186da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f7ff fdd1 	bl	8018286 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 80186e4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 80186e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	3318      	adds	r3, #24
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	4ab7      	ldr	r2, [pc, #732]	@ (80189d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 80186f4:	6812      	ldr	r2, [r2, #0]
 80186f6:	6839      	ldr	r1, [r7, #0]
 80186f8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80186fc:	4798      	blx	r3
 80186fe:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8018702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8018706:	2b00      	cmp	r3, #0
 8018708:	d10a      	bne.n	8018720 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x74>
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	691c      	ldr	r4, [r3, #16]
 801870e:	4bb1      	ldr	r3, [pc, #708]	@ (80189d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8018710:	9300      	str	r3, [sp, #0]
 8018712:	2347      	movs	r3, #71	@ 0x47
 8018714:	4ab0      	ldr	r2, [pc, #704]	@ (80189d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8018716:	49b1      	ldr	r1, [pc, #708]	@ (80189dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8018718:	6878      	ldr	r0, [r7, #4]
 801871a:	47a0      	blx	r4
 801871c:	2401      	movs	r4, #1
 801871e:	e1a8      	b.n	8018a72 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 8018720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	3318      	adds	r3, #24
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	4aad      	ldr	r2, [pc, #692]	@ (80189e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
 801872c:	6812      	ldr	r2, [r2, #0]
 801872e:	6839      	ldr	r1, [r7, #0]
 8018730:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8018734:	4798      	blx	r3
 8018736:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 801873a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801873e:	2b00      	cmp	r3, #0
 8018740:	d10a      	bne.n	8018758 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	691c      	ldr	r4, [r3, #16]
 8018746:	4ba7      	ldr	r3, [pc, #668]	@ (80189e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
 8018748:	9300      	str	r3, [sp, #0]
 801874a:	234a      	movs	r3, #74	@ 0x4a
 801874c:	4aa2      	ldr	r2, [pc, #648]	@ (80189d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 801874e:	49a3      	ldr	r1, [pc, #652]	@ (80189dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8018750:	6878      	ldr	r0, [r7, #4]
 8018752:	47a0      	blx	r4
 8018754:	2401      	movs	r4, #1
 8018756:	e18c      	b.n	8018a72 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 8018758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	3318      	adds	r3, #24
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	4aa1      	ldr	r2, [pc, #644]	@ (80189e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
 8018764:	6812      	ldr	r2, [r2, #0]
 8018766:	6839      	ldr	r1, [r7, #0]
 8018768:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801876c:	4798      	blx	r3
 801876e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 8018772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	331c      	adds	r3, #28
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	4a9b      	ldr	r2, [pc, #620]	@ (80189ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
 801877e:	6812      	ldr	r2, [r2, #0]
 8018780:	6839      	ldr	r1, [r7, #0]
 8018782:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8018786:	4798      	blx	r3
 8018788:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 801878c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8018790:	2b00      	cmp	r3, #0
 8018792:	d10a      	bne.n	80187aa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	691c      	ldr	r4, [r3, #16]
 8018798:	4b95      	ldr	r3, [pc, #596]	@ (80189f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
 801879a:	9300      	str	r3, [sp, #0]
 801879c:	234f      	movs	r3, #79	@ 0x4f
 801879e:	4a8e      	ldr	r2, [pc, #568]	@ (80189d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 80187a0:	498e      	ldr	r1, [pc, #568]	@ (80189dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 80187a2:	6878      	ldr	r0, [r7, #4]
 80187a4:	47a0      	blx	r4
 80187a6:	2401      	movs	r4, #1
 80187a8:	e163      	b.n	8018a72 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80187aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80187ae:	781a      	ldrb	r2, [r3, #0]
 80187b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80187b4:	781b      	ldrb	r3, [r3, #0]
 80187b6:	429a      	cmp	r2, r3
 80187b8:	d01c      	beq.n	80187f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	691c      	ldr	r4, [r3, #16]
 80187be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80187c2:	781b      	ldrb	r3, [r3, #0]
 80187c4:	4618      	mov	r0, r3
 80187c6:	f7fe fe29 	bl	801741c <TfLiteTypeGetName>
 80187ca:	4605      	mov	r5, r0
 80187cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80187d0:	781b      	ldrb	r3, [r3, #0]
 80187d2:	4618      	mov	r0, r3
 80187d4:	f7fe fe22 	bl	801741c <TfLiteTypeGetName>
 80187d8:	4603      	mov	r3, r0
 80187da:	9303      	str	r3, [sp, #12]
 80187dc:	9502      	str	r5, [sp, #8]
 80187de:	4b85      	ldr	r3, [pc, #532]	@ (80189f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
 80187e0:	9301      	str	r3, [sp, #4]
 80187e2:	4b85      	ldr	r3, [pc, #532]	@ (80189f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
 80187e4:	9300      	str	r3, [sp, #0]
 80187e6:	2351      	movs	r3, #81	@ 0x51
 80187e8:	4a7b      	ldr	r2, [pc, #492]	@ (80189d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 80187ea:	4984      	ldr	r1, [pc, #528]	@ (80189fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
 80187ec:	6878      	ldr	r0, [r7, #4]
 80187ee:	47a0      	blx	r4
 80187f0:	2401      	movs	r4, #1
 80187f2:	e13e      	b.n	8018a72 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  const RuntimeShape filter_shape = GetTensorShape(filter);
 80187f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80187f8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7fe ff14 	bl	801762a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8018802:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018806:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801880a:	4618      	mov	r0, r3
 801880c:	f7fe ff0d 	bl	801762a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8018810:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018814:	4618      	mov	r0, r3
 8018816:	f7ff fb09 	bl	8017e2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801881a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
  const int output_dim_count = output_shape.DimensionsCount();
 801881e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018822:	4618      	mov	r0, r3
 8018824:	f7ff fb02 	bl	8017e2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018828:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  cmsis_nn_dims filter_dims;
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 801882c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018830:	1e5a      	subs	r2, r3, #1
 8018832:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018836:	4611      	mov	r1, r2
 8018838:	4618      	mov	r0, r3
 801883a:	f7ff fd82 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 801883e:	4603      	mov	r3, r0
 8018840:	627b      	str	r3, [r7, #36]	@ 0x24
  filter_dims.h = 1;
 8018842:	2301      	movs	r3, #1
 8018844:	62bb      	str	r3, [r7, #40]	@ 0x28
  filter_dims.w = 1;
 8018846:	2301      	movs	r3, #1
 8018848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 801884a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801884e:	1e5a      	subs	r2, r3, #1
 8018850:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018854:	4611      	mov	r1, r2
 8018856:	4618      	mov	r0, r3
 8018858:	f7ff fd73 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 801885c:	4603      	mov	r3, r0
 801885e:	633b      	str	r3, [r7, #48]	@ 0x30

  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8018860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018864:	1e5a      	subs	r2, r3, #1
 8018866:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801886a:	4611      	mov	r1, r2
 801886c:	4618      	mov	r0, r3
 801886e:	f7ff fd68 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018872:	4602      	mov	r2, r0
 8018874:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018878:	635a      	str	r2, [r3, #52]	@ 0x34
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 801887a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801887e:	1e5a      	subs	r2, r3, #1
 8018880:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018884:	4611      	mov	r1, r2
 8018886:	4618      	mov	r0, r3
 8018888:	f7ff fe2d 	bl	80184e6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801888c:	4602      	mov	r2, r0
 801888e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018892:	631a      	str	r2, [r3, #48]	@ 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 8018894:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8018898:	1e5a      	subs	r2, r3, #1
 801889a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801889e:	4611      	mov	r1, r2
 80188a0:	4618      	mov	r0, r3
 80188a2:	f7ff fd4e 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 80188a6:	4602      	mov	r2, r0
 80188a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80188ac:	639a      	str	r2, [r3, #56]	@ 0x38

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 80188ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80188b2:	f04f 32ff 	mov.w	r2, #4294967295
 80188b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 80188b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80188bc:	7819      	ldrb	r1, [r3, #0]
 80188be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80188c2:	781a      	ldrb	r2, [r3, #0]
 80188c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80188c8:	9303      	str	r3, [sp, #12]
 80188ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80188ce:	9302      	str	r3, [sp, #8]
 80188d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80188d4:	9301      	str	r3, [sp, #4]
 80188d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80188da:	9300      	str	r3, [sp, #0]
 80188dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80188e0:	6878      	ldr	r0, [r7, #4]
 80188e2:	f000 fa31 	bl	8018d48 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 80188e6:	4603      	mov	r3, r0
 80188e8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 80188ec:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d002      	beq.n	80188fa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24e>
 80188f4:	f897 4093 	ldrb.w	r4, [r7, #147]	@ 0x93
 80188f8:	e0b1      	b.n	8018a5e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  int32_t buf_size = 0;
 80188fa:	2300      	movs	r3, #0
 80188fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  if (input->type == kTfLiteInt16) {
 8018900:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8018904:	781b      	ldrb	r3, [r3, #0]
 8018906:	2b07      	cmp	r3, #7
 8018908:	d10f      	bne.n	801892a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27e>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I16
        MicroPrintf("Filter data type %s currently not supported.",
 801890a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	4618      	mov	r0, r3
 8018912:	f7fe fd83 	bl	801741c <TfLiteTypeGetName>
 8018916:	4603      	mov	r3, r0
 8018918:	667b      	str	r3, [r7, #100]	@ 0x64
 801891a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801891e:	4619      	mov	r1, r3
 8018920:	4837      	ldr	r0, [pc, #220]	@ (8018a00 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 8018922:	f7ff fcbc 	bl	801829e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8018926:	2401      	movs	r4, #1
 8018928:	e099      	b.n	8018a5e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
#endif
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
  } else if (input->type == kTfLiteInt8) {
 801892a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801892e:	781b      	ldrb	r3, [r3, #0]
 8018930:	2b09      	cmp	r3, #9
 8018932:	d10f      	bne.n	8018954 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
 8018934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8018938:	781b      	ldrb	r3, [r3, #0]
 801893a:	4618      	mov	r0, r3
 801893c:	f7fe fd6e 	bl	801741c <TfLiteTypeGetName>
 8018940:	4603      	mov	r3, r0
 8018942:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018944:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8018948:	4619      	mov	r1, r3
 801894a:	482d      	ldr	r0, [pc, #180]	@ (8018a00 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 801894c:	f7ff fca7 	bl	801829e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8018950:	2401      	movs	r4, #1
 8018952:	e084      	b.n	8018a5e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
    }
#endif
  }

  if (filter->type == kTfLiteInt4) {
 8018954:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018958:	781b      	ldrb	r3, [r3, #0]
 801895a:	2b12      	cmp	r3, #18
 801895c:	d121      	bne.n	80189a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f6>
    int filter_size =
        RuntimeShape(filter->dims->size,
 801895e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018962:	689b      	ldr	r3, [r3, #8]
 8018964:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 8018966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801896a:	689b      	ldr	r3, [r3, #8]
 801896c:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 801896e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8018972:	4618      	mov	r0, r3
 8018974:	f7fe fde8 	bl	8017548 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 8018978:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 801897c:	4618      	mov	r0, r3
 801897e:	f7fe fe31 	bl	80175e4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8018982:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        RuntimeShape(filter->dims->size,
 8018986:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 801898a:	4618      	mov	r0, r3
 801898c:	f7fe fdef 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018994:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8018998:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801899c:	3220      	adds	r2, #32
 801899e:	6878      	ldr	r0, [r7, #4]
 80189a0:	4798      	blx	r3
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (buf_size > 0) {
 80189a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	dd2c      	ble.n	8018a04 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80189ae:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80189b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80189b6:	322c      	adds	r2, #44	@ 0x2c
 80189b8:	6878      	ldr	r0, [r7, #4]
 80189ba:	4798      	blx	r3
 80189bc:	4603      	mov	r3, r0
 80189be:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80189c2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d01c      	beq.n	8018a04 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
 80189ca:	f897 4087 	ldrb.w	r4, [r7, #135]	@ 0x87
 80189ce:	e046      	b.n	8018a5e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
 80189d0:	0802470c 	.word	0x0802470c
 80189d4:	080226dc 	.word	0x080226dc
 80189d8:	0802262c 	.word	0x0802262c
 80189dc:	080226c4 	.word	0x080226c4
 80189e0:	08024710 	.word	0x08024710
 80189e4:	080226f0 	.word	0x080226f0
 80189e8:	08024714 	.word	0x08024714
 80189ec:	08024718 	.word	0x08024718
 80189f0:	08022704 	.word	0x08022704
 80189f4:	08022734 	.word	0x08022734
 80189f8:	08022744 	.word	0x08022744
 80189fc:	08022718 	.word	0x08022718
 8018a00:	08022750 	.word	0x08022750
        context, buf_size, &data->buffer_idx));
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 8018a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	3324      	adds	r3, #36	@ 0x24
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8018a12:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8018a16:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 8018a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	3324      	adds	r3, #36	@ 0x24
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8018a26:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8018a2a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 8018a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	3324      	adds	r3, #36	@ 0x24
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8018a3a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8018a3e:	4798      	blx	r3
  if (bias != nullptr) {
 8018a40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d009      	beq.n	8018a5c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b0>
    micro_context->DeallocateTempTfLiteTensor(bias);
 8018a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	3324      	adds	r3, #36	@ 0x24
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8018a56:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8018a5a:	4798      	blx	r3
  }

  return kTfLiteOk;
 8018a5c:	2400      	movs	r4, #0
}
 8018a5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018a62:	4618      	mov	r0, r3
 8018a64:	f7fe fd83 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
 8018a68:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7fe fd7e 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
 8018a72:	4623      	mov	r3, r4
 8018a74:	4618      	mov	r0, r3
 8018a76:	37b8      	adds	r7, #184	@ 0xb8
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bdb0      	pop	{r4, r5, r7, pc}

08018a7c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8018a7c:	b5b0      	push	{r4, r5, r7, lr}
 8018a7e:	b0b8      	sub	sp, #224	@ 0xe0
 8018a80:	af06      	add	r7, sp, #24
 8018a82:	6078      	str	r0, [r7, #4]
 8018a84:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	695b      	ldr	r3, [r3, #20]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d101      	bne.n	8018a92 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8018a8e:	f004 fdf5 	bl	801d67c <abort>
  const auto* params =
 8018a92:	683b      	ldr	r3, [r7, #0]
 8018a94:	695b      	ldr	r3, [r3, #20]
 8018a96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8018a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8018c98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21c>)
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	461a      	mov	r2, r3
 8018aa0:	6839      	ldr	r1, [r7, #0]
 8018aa2:	6878      	ldr	r0, [r7, #4]
 8018aa4:	f000 fa21 	bl	8018eea <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018aa8:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8018aac:	4b7b      	ldr	r3, [pc, #492]	@ (8018c9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>)
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	461a      	mov	r2, r3
 8018ab2:	6839      	ldr	r1, [r7, #0]
 8018ab4:	6878      	ldr	r0, [r7, #4]
 8018ab6:	f000 fa18 	bl	8018eea <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018aba:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8018abe:	4b78      	ldr	r3, [pc, #480]	@ (8018ca0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	461a      	mov	r2, r3
 8018ac4:	6839      	ldr	r1, [r7, #0]
 8018ac6:	6878      	ldr	r0, [r7, #4]
 8018ac8:	f000 fa0f 	bl	8018eea <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018acc:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8018ad0:	4b74      	ldr	r3, [pc, #464]	@ (8018ca4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	461a      	mov	r2, r3
 8018ad6:	6839      	ldr	r1, [r7, #0]
 8018ad8:	6878      	ldr	r0, [r7, #4]
 8018ada:	f000 fa16 	bl	8018f0a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8018ade:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4

  TFLITE_DCHECK(node->user_data != nullptr);
 8018ae2:	683b      	ldr	r3, [r7, #0]
 8018ae4:	691b      	ldr	r3, [r3, #16]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d101      	bne.n	8018aee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 8018aea:	f004 fdc7 	bl	801d67c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8018aee:	683b      	ldr	r3, [r7, #0]
 8018af0:	691b      	ldr	r3, [r3, #16]
 8018af2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 8018af6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8018afa:	6a1a      	ldr	r2, [r3, #32]
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
 8018afc:	f107 0008 	add.w	r0, r7, #8
 8018b00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018b04:	6879      	ldr	r1, [r7, #4]
 8018b06:	f000 fa42 	bl	8018f8e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8018b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018b0e:	7a1b      	ldrb	r3, [r3, #8]
 8018b10:	2b09      	cmp	r3, #9
 8018b12:	d06e      	beq.n	8018bf2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
 8018b14:	2b09      	cmp	r3, #9
 8018b16:	f300 80a6 	bgt.w	8018c66 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
 8018b1a:	2b01      	cmp	r3, #1
 8018b1c:	d003      	beq.n	8018b26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8018b1e:	2b07      	cmp	r3, #7
 8018b20:	f000 8090 	beq.w	8018c44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 8018b24:	e09f      	b.n	8018c66 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      MicroPrintf("Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      const float* bias_data =
          tflite::micro::GetOptionalTensorData<float>(bias);
 8018b26:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8018b2a:	f000 f8db 	bl	8018ce4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018b2e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 8018b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018b36:	781a      	ldrb	r2, [r3, #0]
 8018b38:	f107 0314 	add.w	r3, r7, #20
 8018b3c:	4611      	mov	r1, r2
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f000 f8ed 	bl	8018d1e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8018b44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018b48:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f000 f9fc 	bl	8018f4a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018b52:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8018b56:	f7ff fbb8 	bl	80182ca <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018b5a:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8018b5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8018b60:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8018b64:	4618      	mov	r0, r3
 8018b66:	f000 f9f0 	bl	8018f4a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018b6a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8018b6e:	f7ff fbac 	bl	80182ca <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018b72:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias), bias_data,
 8018b74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8018b78:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	f000 f9e4 	bl	8018f4a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 8018b82:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018b86:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f000 f9dd 	bl	8018f4a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018b90:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8018b94:	f7ff fba8 	bl	80182e8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8018b98:	4603      	mov	r3, r0
 8018b9a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8018b9e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8018ba2:	f107 0014 	add.w	r0, r7, #20
 8018ba6:	9304      	str	r3, [sp, #16]
 8018ba8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018bac:	9303      	str	r3, [sp, #12]
 8018bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018bb2:	9302      	str	r3, [sp, #8]
 8018bb4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8018bb8:	9301      	str	r3, [sp, #4]
 8018bba:	9400      	str	r4, [sp, #0]
 8018bbc:	4613      	mov	r3, r2
 8018bbe:	462a      	mov	r2, r5
 8018bc0:	f7ff fcc7 	bl	8018552 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 8018bc4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018bc8:	4618      	mov	r0, r3
 8018bca:	f7fe fcd0 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias), bias_data,
 8018bce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f7fe fccb 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8018bd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7fe fcc6 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8018be2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018be6:	4618      	mov	r0, r3
 8018be8:	f7fe fcc1 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8018bec:	bf00      	nop
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
 8018bee:	2300      	movs	r3, #0
 8018bf0:	e04d      	b.n	8018c8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      switch (filter_int8.type) {
 8018bf2:	7c3b      	ldrb	r3, [r7, #16]
 8018bf4:	2b09      	cmp	r3, #9
 8018bf6:	d110      	bne.n	8018c1a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19e>
        MicroPrintf("Filter data type %s currently not supported.",
 8018bf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018bfc:	7a1b      	ldrb	r3, [r3, #8]
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f7fe fc0c 	bl	801741c <TfLiteTypeGetName>
 8018c04:	4603      	mov	r3, r0
 8018c06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8018c0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8018c0e:	4619      	mov	r1, r3
 8018c10:	4825      	ldr	r0, [pc, #148]	@ (8018ca8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8018c12:	f7ff fb44 	bl	801829e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8018c16:	2301      	movs	r3, #1
 8018c18:	e039      	b.n	8018c8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
          MicroPrintf("Filter Type %s (%d) not supported.",
 8018c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018c1e:	7a1b      	ldrb	r3, [r3, #8]
 8018c20:	4618      	mov	r0, r3
 8018c22:	f7fe fbfb 	bl	801741c <TfLiteTypeGetName>
 8018c26:	4603      	mov	r3, r0
 8018c28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8018c2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018c30:	f103 0208 	add.w	r2, r3, #8
 8018c34:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8018c38:	4619      	mov	r1, r3
 8018c3a:	481c      	ldr	r0, [pc, #112]	@ (8018cac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>)
 8018c3c:	f000 f863 	bl	8018d06 <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>
          return kTfLiteError;
 8018c40:	2301      	movs	r3, #1
 8018c42:	e024      	b.n	8018c8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
        MicroPrintf("Filter data type %s currently not supported.",
 8018c44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018c48:	7a1b      	ldrb	r3, [r3, #8]
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7fe fbe6 	bl	801741c <TfLiteTypeGetName>
 8018c50:	4603      	mov	r3, r0
 8018c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8018c56:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	4812      	ldr	r0, [pc, #72]	@ (8018ca8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8018c5e:	f7ff fb1e 	bl	801829e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8018c62:	2301      	movs	r3, #1
 8018c64:	e013      	b.n	8018c8e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8018c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018c6a:	7a1b      	ldrb	r3, [r3, #8]
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f7fe fbd5 	bl	801741c <TfLiteTypeGetName>
 8018c72:	4603      	mov	r3, r0
 8018c74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8018c78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018c7c:	f103 0208 	add.w	r2, r3, #8
 8018c80:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8018c84:	4619      	mov	r1, r3
 8018c86:	480a      	ldr	r0, [pc, #40]	@ (8018cb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x234>)
 8018c88:	f7ff fbf2 	bl	8018470 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
      return kTfLiteError;
 8018c8c:	2301      	movs	r3, #1
}
 8018c8e:	4618      	mov	r0, r3
 8018c90:	37c8      	adds	r7, #200	@ 0xc8
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bdb0      	pop	{r4, r5, r7, pc}
 8018c96:	bf00      	nop
 8018c98:	0802470c 	.word	0x0802470c
 8018c9c:	08024710 	.word	0x08024710
 8018ca0:	08024714 	.word	0x08024714
 8018ca4:	08024718 	.word	0x08024718
 8018ca8:	08022750 	.word	0x08022750
 8018cac:	080229c0 	.word	0x080229c0
 8018cb0:	080229e4 	.word	0x080229e4

08018cb4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b084      	sub	sp, #16
 8018cb8:	af02      	add	r7, sp, #8
 8018cba:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 8018cbc:	6878      	ldr	r0, [r7, #4]
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	9300      	str	r3, [sp, #0]
 8018cc2:	4b05      	ldr	r3, [pc, #20]	@ (8018cd8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x24>)
 8018cc4:	4a05      	ldr	r2, [pc, #20]	@ (8018cdc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 8018cc6:	4906      	ldr	r1, [pc, #24]	@ (8018ce0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 8018cc8:	f000 f8b6 	bl	8018e38 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8018ccc:	bf00      	nop
}
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	3708      	adds	r7, #8
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	bd80      	pop	{r7, pc}
 8018cd6:	bf00      	nop
 8018cd8:	08018a7d 	.word	0x08018a7d
 8018cdc:	080186ad 	.word	0x080186ad
 8018ce0:	08018681 	.word	0x08018681

08018ce4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 8018ce4:	b480      	push	{r7}
 8018ce6:	b083      	sub	sp, #12
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d002      	beq.n	8018cf8 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x14>
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 8018cf6:	e000      	b.n	8018cfa <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 8018cf8:	2300      	movs	r3, #0
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	370c      	adds	r7, #12
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d04:	4770      	bx	lr

08018d06 <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8018d06:	b480      	push	{r7}
 8018d08:	b085      	sub	sp, #20
 8018d0a:	af00      	add	r7, sp, #0
 8018d0c:	60f8      	str	r0, [r7, #12]
 8018d0e:	60b9      	str	r1, [r7, #8]
 8018d10:	607a      	str	r2, [r7, #4]
}
 8018d12:	bf00      	nop
 8018d14:	3714      	adds	r7, #20
 8018d16:	46bd      	mov	sp, r7
 8018d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1c:	4770      	bx	lr

08018d1e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  op_params.quantized_activation_max = op_data.output_activation_max;
  return op_params;
}

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8018d1e:	b580      	push	{r7, lr}
 8018d20:	b082      	sub	sp, #8
 8018d22:	af00      	add	r7, sp, #0
 8018d24:	6078      	str	r0, [r7, #4]
 8018d26:	460b      	mov	r3, r1
 8018d28:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	f103 0220 	add.w	r2, r3, #32
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f103 011c 	add.w	r1, r3, #28
 8018d36:	78fb      	ldrb	r3, [r7, #3]
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7ff fb57 	bl	80183ec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8018d3e:	bf00      	nop
}
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	3708      	adds	r7, #8
 8018d44:	46bd      	mov	sp, r7
 8018d46:	bd80      	pop	{r7, pc}

08018d48 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b08a      	sub	sp, #40	@ 0x28
 8018d4c:	af02      	add	r7, sp, #8
 8018d4e:	60f8      	str	r0, [r7, #12]
 8018d50:	607b      	str	r3, [r7, #4]
 8018d52:	460b      	mov	r3, r1
 8018d54:	72fb      	strb	r3, [r7, #11]
 8018d56:	4613      	mov	r3, r2
 8018d58:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8018d5a:	7abb      	ldrb	r3, [r7, #10]
 8018d5c:	2b01      	cmp	r3, #1
 8018d5e:	d044      	beq.n	8018dea <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 8018d60:	f04f 0200 	mov.w	r2, #0
 8018d64:	f04f 0300 	mov.w	r3, #0
 8018d68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8018d6c:	f107 0310 	add.w	r3, r7, #16
 8018d70:	9301      	str	r3, [sp, #4]
 8018d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d74:	9300      	str	r3, [sp, #0]
 8018d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018d7a:	6879      	ldr	r1, [r7, #4]
 8018d7c:	68f8      	ldr	r0, [r7, #12]
 8018d7e:	f7fe fe0b 	bl	8017998 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8018d82:	4603      	mov	r3, r0
 8018d84:	77fb      	strb	r3, [r7, #31]
 8018d86:	7ffb      	ldrb	r3, [r7, #31]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d001      	beq.n	8018d90 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8018d8c:	7ffb      	ldrb	r3, [r7, #31]
 8018d8e:	e02d      	b.n	8018dec <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8018d90:	ed97 7b04 	vldr	d7, [r7, #16]
 8018d94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018d98:	3304      	adds	r3, #4
 8018d9a:	4619      	mov	r1, r3
 8018d9c:	4610      	mov	r0, r2
 8018d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8018da2:	eef0 0a67 	vmov.f32	s1, s15
 8018da6:	f7fe fcf3 	bl	8017790 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	691a      	ldr	r2, [r3, #16]
 8018dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018db0:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 8018db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018db4:	691b      	ldr	r3, [r3, #16]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d001      	beq.n	8018dbe <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 8018dba:	f004 fc5f 	bl	801d67c <abort>
    data->filter_zero_point = filter->params.zero_point;
 8018dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018dc0:	691a      	ldr	r2, [r3, #16]
 8018dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dc4:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8018dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dc8:	691a      	ldr	r2, [r3, #16]
 8018dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dcc:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8018dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dd0:	f103 0208 	add.w	r2, r3, #8
 8018dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dd6:	330c      	adds	r3, #12
 8018dd8:	7af9      	ldrb	r1, [r7, #11]
 8018dda:	9300      	str	r3, [sp, #0]
 8018ddc:	4613      	mov	r3, r2
 8018dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018de0:	68f8      	ldr	r0, [r7, #12]
 8018de2:	f7fe ffcb 	bl	8017d7c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8018de6:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8018de8:	e000      	b.n	8018dec <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 8018dea:	2300      	movs	r3, #0
}
 8018dec:	4618      	mov	r0, r3
 8018dee:	3720      	adds	r7, #32
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}

08018df4 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 8018df4:	b480      	push	{r7}
 8018df6:	b087      	sub	sp, #28
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	60f8      	str	r0, [r7, #12]
 8018dfc:	60b9      	str	r1, [r7, #8]
 8018dfe:	607a      	str	r2, [r7, #4]
 8018e00:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8018e02:	68bb      	ldr	r3, [r7, #8]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	db0f      	blt.n	8018e28 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8018e08:	68ba      	ldr	r2, [r7, #8]
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	429a      	cmp	r2, r3
 8018e0e:	da0b      	bge.n	8018e28 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8018e10:	68bb      	ldr	r3, [r7, #8]
 8018e12:	009b      	lsls	r3, r3, #2
 8018e14:	683a      	ldr	r2, [r7, #0]
 8018e16:	4413      	add	r3, r2
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8018e1c:	697b      	ldr	r3, [r7, #20]
 8018e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e22:	d001      	beq.n	8018e28 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	e001      	b.n	8018e2c <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8018e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	371c      	adds	r7, #28
 8018e30:	46bd      	mov	sp, r7
 8018e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e36:	4770      	bx	lr

08018e38 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
 8018e38:	b480      	push	{r7}
 8018e3a:	b085      	sub	sp, #20
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	60f8      	str	r0, [r7, #12]
 8018e40:	60b9      	str	r1, [r7, #8]
 8018e42:	607a      	str	r2, [r7, #4]
 8018e44:	603b      	str	r3, [r7, #0]
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	68ba      	ldr	r2, [r7, #8]
 8018e4a:	601a      	str	r2, [r3, #0]
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	69ba      	ldr	r2, [r7, #24]
 8018e50:	605a      	str	r2, [r3, #4]
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	687a      	ldr	r2, [r7, #4]
 8018e56:	609a      	str	r2, [r3, #8]
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	683a      	ldr	r2, [r7, #0]
 8018e5c:	60da      	str	r2, [r3, #12]
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	2200      	movs	r2, #0
 8018e62:	611a      	str	r2, [r3, #16]
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	2200      	movs	r2, #0
 8018e68:	615a      	str	r2, [r3, #20]
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	619a      	str	r2, [r3, #24]
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	2200      	movs	r2, #0
 8018e74:	61da      	str	r2, [r3, #28]
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	2200      	movs	r2, #0
 8018e7a:	621a      	str	r2, [r3, #32]
}
 8018e7c:	68f8      	ldr	r0, [r7, #12]
 8018e7e:	3714      	adds	r7, #20
 8018e80:	46bd      	mov	sp, r7
 8018e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e86:	4770      	bx	lr

08018e88 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b086      	sub	sp, #24
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	60f8      	str	r0, [r7, #12]
 8018e90:	60b9      	str	r1, [r7, #8]
 8018e92:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d101      	bne.n	8018e9e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8018e9a:	f004 fbef 	bl	801d67c <abort>
  TFLITE_DCHECK(node != nullptr);
 8018e9e:	68bb      	ldr	r3, [r7, #8]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d101      	bne.n	8018ea8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8018ea4:	f004 fbea 	bl	801d67c <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8018ea8:	68bb      	ldr	r3, [r7, #8]
 8018eaa:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8018eac:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8018eae:	68bb      	ldr	r3, [r7, #8]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8018eb4:	6879      	ldr	r1, [r7, #4]
 8018eb6:	68f8      	ldr	r0, [r7, #12]
 8018eb8:	f7ff ff9c 	bl	8018df4 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8018ebc:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 8018ebe:	697b      	ldr	r3, [r7, #20]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	da01      	bge.n	8018ec8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	e00c      	b.n	8018ee2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018ecc:	68bb      	ldr	r3, [r7, #8]
 8018ece:	6819      	ldr	r1, [r3, #0]
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	009b      	lsls	r3, r3, #2
 8018ed4:	440b      	add	r3, r1
 8018ed6:	685b      	ldr	r3, [r3, #4]
 8018ed8:	4619      	mov	r1, r3
 8018eda:	68f8      	ldr	r0, [r7, #12]
 8018edc:	4790      	blx	r2
 8018ede:	4603      	mov	r3, r0
 8018ee0:	bf00      	nop
}
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	3718      	adds	r7, #24
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}

08018eea <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8018eea:	b580      	push	{r7, lr}
 8018eec:	b084      	sub	sp, #16
 8018eee:	af00      	add	r7, sp, #0
 8018ef0:	60f8      	str	r0, [r7, #12]
 8018ef2:	60b9      	str	r1, [r7, #8]
 8018ef4:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8018ef6:	687a      	ldr	r2, [r7, #4]
 8018ef8:	68b9      	ldr	r1, [r7, #8]
 8018efa:	68f8      	ldr	r0, [r7, #12]
 8018efc:	f7ff ffc4 	bl	8018e88 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018f00:	4603      	mov	r3, r0
}
 8018f02:	4618      	mov	r0, r3
 8018f04:	3710      	adds	r7, #16
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd80      	pop	{r7, pc}

08018f0a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 8018f0a:	b580      	push	{r7, lr}
 8018f0c:	b084      	sub	sp, #16
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	60f8      	str	r0, [r7, #12]
 8018f12:	60b9      	str	r1, [r7, #8]
 8018f14:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d101      	bne.n	8018f20 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8018f1c:	f004 fbae 	bl	801d67c <abort>
  TFLITE_DCHECK(node != nullptr);
 8018f20:	68bb      	ldr	r3, [r7, #8]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d101      	bne.n	8018f2a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8018f26:	f004 fba9 	bl	801d67c <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018f2e:	68bb      	ldr	r3, [r7, #8]
 8018f30:	6859      	ldr	r1, [r3, #4]
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	009b      	lsls	r3, r3, #2
 8018f36:	440b      	add	r3, r1
 8018f38:	685b      	ldr	r3, [r3, #4]
 8018f3a:	4619      	mov	r1, r3
 8018f3c:	68f8      	ldr	r0, [r7, #12]
 8018f3e:	4790      	blx	r2
 8018f40:	4603      	mov	r3, r0
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	3710      	adds	r7, #16
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bd80      	pop	{r7, pc}

08018f4a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8018f4a:	b580      	push	{r7, lr}
 8018f4c:	b086      	sub	sp, #24
 8018f4e:	af00      	add	r7, sp, #0
 8018f50:	6078      	str	r0, [r7, #4]
 8018f52:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8018f54:	683b      	ldr	r3, [r7, #0]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d003      	beq.n	8018f62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	685b      	ldr	r3, [r3, #4]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d103      	bne.n	8018f6a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8018f62:	6878      	ldr	r0, [r7, #4]
 8018f64:	f7fe fae2 	bl	801752c <_ZN6tflite12RuntimeShapeC1Ev>
 8018f68:	e00d      	b.n	8018f86 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	685b      	ldr	r3, [r3, #4]
 8018f6e:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8018f70:	697b      	ldr	r3, [r7, #20]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8018f76:	697b      	ldr	r3, [r7, #20]
 8018f78:	3304      	adds	r3, #4
 8018f7a:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8018f7c:	68fa      	ldr	r2, [r7, #12]
 8018f7e:	6939      	ldr	r1, [r7, #16]
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	f7fe fae1 	bl	8017548 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8018f86:	6878      	ldr	r0, [r7, #4]
 8018f88:	3718      	adds	r7, #24
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}

08018f8e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 8018f8e:	b5b0      	push	{r4, r5, r7, lr}
 8018f90:	b08e      	sub	sp, #56	@ 0x38
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	60f8      	str	r0, [r7, #12]
 8018f96:	60b9      	str	r1, [r7, #8]
 8018f98:	607a      	str	r2, [r7, #4]
 8018f9a:	603b      	str	r3, [r7, #0]
  if (tensor->type != kTfLiteInt4) {
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	7a1b      	ldrb	r3, [r3, #8]
 8018fa0:	2b12      	cmp	r3, #18
 8018fa2:	d005      	beq.n	8018fb0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x22>
    return *tensor;
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	683a      	ldr	r2, [r7, #0]
 8018fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8018faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018fae:	e033      	b.n	8019018 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x8a>
  }

  TfLiteEvalTensor new_tensor;
  new_tensor.data.data = static_cast<int8_t*>(
      context->GetScratchBuffer(context, scratch_buffer_index));
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018fb4:	6879      	ldr	r1, [r7, #4]
 8018fb6:	68b8      	ldr	r0, [r7, #8]
 8018fb8:	4798      	blx	r3
 8018fba:	4603      	mov	r3, r0
  new_tensor.data.data = static_cast<int8_t*>(
 8018fbc:	617b      	str	r3, [r7, #20]
  new_tensor.dims = tensor->dims;
 8018fbe:	683b      	ldr	r3, [r7, #0]
 8018fc0:	685b      	ldr	r3, [r3, #4]
 8018fc2:	61bb      	str	r3, [r7, #24]
  new_tensor.type = kTfLiteInt8;
 8018fc4:	2309      	movs	r3, #9
 8018fc6:	773b      	strb	r3, [r7, #28]
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 8018fc8:	6838      	ldr	r0, [r7, #0]
 8018fca:	f7ff f99c 	bl	8018306 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018fce:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 8018fd0:	f107 0320 	add.w	r3, r7, #32
 8018fd4:	6839      	ldr	r1, [r7, #0]
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	f7ff ffb7 	bl	8018f4a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 8018fdc:	f107 0320 	add.w	r3, r7, #32
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f7fe faff 	bl	80175e4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8018fe6:	4605      	mov	r5, r0
 8018fe8:	f107 0314 	add.w	r3, r7, #20
 8018fec:	4618      	mov	r0, r3
 8018fee:	f7ff f999 	bl	8018324 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	461a      	mov	r2, r3
 8018ff6:	4629      	mov	r1, r5
 8018ff8:	4620      	mov	r0, r4
 8018ffa:	f7fe fb67 	bl	80176cc <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 8018ffe:	f107 0320 	add.w	r3, r7, #32
 8019002:	4618      	mov	r0, r3
 8019004:	f7fe fab3 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	461c      	mov	r4, r3
 801900c:	f107 0314 	add.w	r3, r7, #20
 8019010:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8019018:	68f8      	ldr	r0, [r7, #12]
 801901a:	3738      	adds	r7, #56	@ 0x38
 801901c:	46bd      	mov	sp, r7
 801901e:	bdb0      	pop	{r4, r5, r7, pc}

08019020 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8019020:	b590      	push	{r4, r7, lr}
 8019022:	b087      	sub	sp, #28
 8019024:	af00      	add	r7, sp, #0
 8019026:	60f8      	str	r0, [r7, #12]
 8019028:	60b9      	str	r1, [r7, #8]
 801902a:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	f7fe fefd 	bl	8017e2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019032:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8019034:	2300      	movs	r3, #0
 8019036:	617b      	str	r3, [r7, #20]
 8019038:	e014      	b.n	8019064 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 801903a:	697a      	ldr	r2, [r7, #20]
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	429a      	cmp	r2, r3
 8019040:	d00d      	beq.n	801905e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8019042:	6979      	ldr	r1, [r7, #20]
 8019044:	68f8      	ldr	r0, [r7, #12]
 8019046:	f7ff f97c 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 801904a:	4604      	mov	r4, r0
 801904c:	6979      	ldr	r1, [r7, #20]
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f7ff f977 	bl	8018342 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019054:	4603      	mov	r3, r0
 8019056:	429c      	cmp	r4, r3
 8019058:	d001      	beq.n	801905e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 801905a:	f004 fb0f 	bl	801d67c <abort>
  for (int i = 0; i < dims_count; ++i) {
 801905e:	697b      	ldr	r3, [r7, #20]
 8019060:	3301      	adds	r3, #1
 8019062:	617b      	str	r3, [r7, #20]
 8019064:	697a      	ldr	r2, [r7, #20]
 8019066:	693b      	ldr	r3, [r7, #16]
 8019068:	429a      	cmp	r2, r3
 801906a:	dbe6      	blt.n	801903a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801906c:	68b9      	ldr	r1, [r7, #8]
 801906e:	68f8      	ldr	r0, [r7, #12]
 8019070:	f7ff fa39 	bl	80184e6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8019074:	4603      	mov	r3, r0
}
 8019076:	4618      	mov	r0, r3
 8019078:	371c      	adds	r7, #28
 801907a:	46bd      	mov	sp, r7
 801907c:	bd90      	pop	{r4, r7, pc}

0801907e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 801907e:	b580      	push	{r7, lr}
 8019080:	ed2d 8b02 	vpush	{d8}
 8019084:	b08e      	sub	sp, #56	@ 0x38
 8019086:	af00      	add	r7, sp, #0
 8019088:	60f8      	str	r0, [r7, #12]
 801908a:	60b9      	str	r1, [r7, #8]
 801908c:	607a      	str	r2, [r7, #4]
 801908e:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8019090:	68b8      	ldr	r0, [r7, #8]
 8019092:	f7fe fecb 	bl	8017e2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019096:	4603      	mov	r3, r0
 8019098:	3b01      	subs	r3, #1
 801909a:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801909c:	683a      	ldr	r2, [r7, #0]
 801909e:	6a39      	ldr	r1, [r7, #32]
 80190a0:	68b8      	ldr	r0, [r7, #8]
 80190a2:	f7ff ffbd 	bl	8019020 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80190a6:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80190a8:	6a3b      	ldr	r3, [r7, #32]
 80190aa:	683a      	ldr	r2, [r7, #0]
 80190ac:	6a39      	ldr	r1, [r7, #32]
 80190ae:	68b8      	ldr	r0, [r7, #8]
 80190b0:	f7ff f9ea 	bl	8018488 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80190b4:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 80190b6:	2300      	movs	r3, #0
 80190b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80190ba:	e085      	b.n	80191c8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14a>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 80190bc:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
 80190c0:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80190c2:	2300      	movs	r3, #0
 80190c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80190c6:	e014      	b.n	80190f2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
      max = std::max(max, input_data[i * depth + c]);
 80190c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190ca:	69ba      	ldr	r2, [r7, #24]
 80190cc:	fb03 f202 	mul.w	r2, r3, r2
 80190d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190d2:	4413      	add	r3, r2
 80190d4:	009b      	lsls	r3, r3, #2
 80190d6:	687a      	ldr	r2, [r7, #4]
 80190d8:	441a      	add	r2, r3
 80190da:	f107 0310 	add.w	r3, r7, #16
 80190de:	4611      	mov	r1, r2
 80190e0:	4618      	mov	r0, r3
 80190e2:	f7f0 fe53 	bl	8009d8c <_ZSt3maxIfERKT_S2_S2_>
 80190e6:	4603      	mov	r3, r0
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80190ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190ee:	3301      	adds	r3, #1
 80190f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80190f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80190f4:	69bb      	ldr	r3, [r7, #24]
 80190f6:	429a      	cmp	r2, r3
 80190f8:	dbe6      	blt.n	80190c8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    }

    // Compute sum.
    float sum = 0.f;
 80190fa:	f04f 0300 	mov.w	r3, #0
 80190fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int c = 0; c < depth; ++c) {
 8019100:	2300      	movs	r3, #0
 8019102:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019104:	e035      	b.n	8019172 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf4>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8019106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019108:	69ba      	ldr	r2, [r7, #24]
 801910a:	fb03 f202 	mul.w	r2, r3, r2
 801910e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019110:	4413      	add	r3, r2
 8019112:	009b      	lsls	r3, r3, #2
 8019114:	687a      	ldr	r2, [r7, #4]
 8019116:	4413      	add	r3, r2
 8019118:	ed93 7a00 	vldr	s14, [r3]
 801911c:	edd7 7a04 	vldr	s15, [r7, #16]
 8019120:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801912a:	4610      	mov	r0, r2
 801912c:	4619      	mov	r1, r3
 801912e:	f7e7 fd8b 	bl	8000c48 <__aeabi_d2f>
 8019132:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8019136:	ee68 7a27 	vmul.f32	s15, s16, s15
 801913a:	eeb0 0a67 	vmov.f32	s0, s15
 801913e:	f7e7 ffe1 	bl	8001104 <_ZSt3expf>
 8019142:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 8019146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019148:	69ba      	ldr	r2, [r7, #24]
 801914a:	fb03 f202 	mul.w	r2, r3, r2
 801914e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019150:	4413      	add	r3, r2
 8019152:	009b      	lsls	r3, r3, #2
 8019154:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019156:	4413      	add	r3, r2
 8019158:	697a      	ldr	r2, [r7, #20]
 801915a:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 801915c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8019160:	edd7 7a05 	vldr	s15, [r7, #20]
 8019164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019168:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (int c = 0; c < depth; ++c) {
 801916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801916e:	3301      	adds	r3, #1
 8019170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019174:	69bb      	ldr	r3, [r7, #24]
 8019176:	429a      	cmp	r2, r3
 8019178:	dbc5      	blt.n	8019106 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 801917a:	2300      	movs	r3, #0
 801917c:	627b      	str	r3, [r7, #36]	@ 0x24
 801917e:	e01c      	b.n	80191ba <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 8019180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019182:	69ba      	ldr	r2, [r7, #24]
 8019184:	fb03 f202 	mul.w	r2, r3, r2
 8019188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801918a:	4413      	add	r3, r2
 801918c:	009b      	lsls	r3, r3, #2
 801918e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019190:	4413      	add	r3, r2
 8019192:	edd3 6a00 	vldr	s13, [r3]
 8019196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019198:	69ba      	ldr	r2, [r7, #24]
 801919a:	fb03 f202 	mul.w	r2, r3, r2
 801919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191a0:	4413      	add	r3, r2
 80191a2:	009b      	lsls	r3, r3, #2
 80191a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80191a6:	4413      	add	r3, r2
 80191a8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80191ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80191b0:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80191b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191b6:	3301      	adds	r3, #1
 80191b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80191ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80191bc:	69bb      	ldr	r3, [r7, #24]
 80191be:	429a      	cmp	r2, r3
 80191c0:	dbde      	blt.n	8019180 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x102>
  for (int i = 0; i < outer_size; ++i) {
 80191c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80191c4:	3301      	adds	r3, #1
 80191c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80191c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80191ca:	69fb      	ldr	r3, [r7, #28]
 80191cc:	429a      	cmp	r2, r3
 80191ce:	f6ff af75 	blt.w	80190bc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
    }
  }
}
 80191d2:	bf00      	nop
 80191d4:	bf00      	nop
 80191d6:	3738      	adds	r7, #56	@ 0x38
 80191d8:	46bd      	mov	sp, r7
 80191da:	ecbd 8b02 	vpop	{d8}
 80191de:	bd80      	pop	{r7, pc}

080191e0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b084      	sub	sp, #16
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	60f8      	str	r0, [r7, #12]
 80191e8:	60b9      	str	r1, [r7, #8]
 80191ea:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d101      	bne.n	80191f8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 80191f4:	f004 fa42 	bl	801d67c <abort>
  return context->AllocatePersistentBuffer(context,
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80191fc:	2140      	movs	r1, #64	@ 0x40
 80191fe:	68f8      	ldr	r0, [r7, #12]
 8019200:	4798      	blx	r3
 8019202:	4603      	mov	r3, r0
                                           sizeof(CMSISNNSoftmaxParams));
}
 8019204:	4618      	mov	r0, r3
 8019206:	3710      	adds	r7, #16
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}

0801920c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801920c:	b590      	push	{r4, r7, lr}
 801920e:	b09d      	sub	sp, #116	@ 0x74
 8019210:	af04      	add	r7, sp, #16
 8019212:	6078      	str	r0, [r7, #4]
 8019214:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 8019216:	6878      	ldr	r0, [r7, #4]
 8019218:	f7ff f835 	bl	8018286 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 801921c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801921e:	6838      	ldr	r0, [r7, #0]
 8019220:	f7fe fa2e 	bl	8017680 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8019224:	4603      	mov	r3, r0
 8019226:	2b01      	cmp	r3, #1
 8019228:	bf14      	ite	ne
 801922a:	2301      	movne	r3, #1
 801922c:	2300      	moveq	r3, #0
 801922e:	b2db      	uxtb	r3, r3
 8019230:	2b00      	cmp	r3, #0
 8019232:	d013      	beq.n	801925c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x50>
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	691c      	ldr	r4, [r3, #16]
 8019238:	6838      	ldr	r0, [r7, #0]
 801923a:	f7fe fa21 	bl	8017680 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801923e:	4603      	mov	r3, r0
 8019240:	2201      	movs	r2, #1
 8019242:	9203      	str	r2, [sp, #12]
 8019244:	9302      	str	r3, [sp, #8]
 8019246:	4b6c      	ldr	r3, [pc, #432]	@ (80193f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8019248:	9301      	str	r3, [sp, #4]
 801924a:	4b6c      	ldr	r3, [pc, #432]	@ (80193fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 801924c:	9300      	str	r3, [sp, #0]
 801924e:	2334      	movs	r3, #52	@ 0x34
 8019250:	4a6b      	ldr	r2, [pc, #428]	@ (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8019252:	496c      	ldr	r1, [pc, #432]	@ (8019404 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8019254:	6878      	ldr	r0, [r7, #4]
 8019256:	47a0      	blx	r4
 8019258:	2401      	movs	r4, #1
 801925a:	e0c8      	b.n	80193ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801925c:	6838      	ldr	r0, [r7, #0]
 801925e:	f7fe fa22 	bl	80176a6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8019262:	4603      	mov	r3, r0
 8019264:	2b01      	cmp	r3, #1
 8019266:	bf14      	ite	ne
 8019268:	2301      	movne	r3, #1
 801926a:	2300      	moveq	r3, #0
 801926c:	b2db      	uxtb	r3, r3
 801926e:	2b00      	cmp	r3, #0
 8019270:	d013      	beq.n	801929a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	691c      	ldr	r4, [r3, #16]
 8019276:	6838      	ldr	r0, [r7, #0]
 8019278:	f7fe fa15 	bl	80176a6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801927c:	4603      	mov	r3, r0
 801927e:	2201      	movs	r2, #1
 8019280:	9203      	str	r2, [sp, #12]
 8019282:	9302      	str	r3, [sp, #8]
 8019284:	4b5c      	ldr	r3, [pc, #368]	@ (80193f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8019286:	9301      	str	r3, [sp, #4]
 8019288:	4b5f      	ldr	r3, [pc, #380]	@ (8019408 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 801928a:	9300      	str	r3, [sp, #0]
 801928c:	2335      	movs	r3, #53	@ 0x35
 801928e:	4a5c      	ldr	r2, [pc, #368]	@ (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8019290:	495c      	ldr	r1, [pc, #368]	@ (8019404 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8019292:	6878      	ldr	r0, [r7, #4]
 8019294:	47a0      	blx	r4
 8019296:	2401      	movs	r4, #1
 8019298:	e0a9      	b.n	80193ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 801929a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	3318      	adds	r3, #24
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	2200      	movs	r2, #0
 80192a4:	6839      	ldr	r1, [r7, #0]
 80192a6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80192a8:	4798      	blx	r3
 80192aa:	65b8      	str	r0, [r7, #88]	@ 0x58
  TF_LITE_ENSURE(context, input != nullptr);
 80192ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d10a      	bne.n	80192c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	691c      	ldr	r4, [r3, #16]
 80192b6:	4b55      	ldr	r3, [pc, #340]	@ (801940c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 80192b8:	9300      	str	r3, [sp, #0]
 80192ba:	2337      	movs	r3, #55	@ 0x37
 80192bc:	4a50      	ldr	r2, [pc, #320]	@ (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80192be:	4954      	ldr	r1, [pc, #336]	@ (8019410 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 80192c0:	6878      	ldr	r0, [r7, #4]
 80192c2:	47a0      	blx	r4
 80192c4:	2401      	movs	r4, #1
 80192c6:	e092      	b.n	80193ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80192c8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80192ca:	f7fe f9cc 	bl	8017666 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80192ce:	4603      	mov	r3, r0
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	bfd4      	ite	le
 80192d4:	2301      	movle	r3, #1
 80192d6:	2300      	movgt	r3, #0
 80192d8:	b2db      	uxtb	r3, r3
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d00a      	beq.n	80192f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	691c      	ldr	r4, [r3, #16]
 80192e2:	4b4c      	ldr	r3, [pc, #304]	@ (8019414 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 80192e4:	9300      	str	r3, [sp, #0]
 80192e6:	2338      	movs	r3, #56	@ 0x38
 80192e8:	4a45      	ldr	r2, [pc, #276]	@ (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80192ea:	4949      	ldr	r1, [pc, #292]	@ (8019410 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 80192ec:	6878      	ldr	r0, [r7, #4]
 80192ee:	47a0      	blx	r4
 80192f0:	2401      	movs	r4, #1
 80192f2:	e07c      	b.n	80193ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 80192f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	331c      	adds	r3, #28
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	2200      	movs	r2, #0
 80192fe:	6839      	ldr	r1, [r7, #0]
 8019300:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019302:	4798      	blx	r3
 8019304:	6578      	str	r0, [r7, #84]	@ 0x54
  TF_LITE_ENSURE(context, output != nullptr);
 8019306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019308:	2b00      	cmp	r3, #0
 801930a:	d10a      	bne.n	8019322 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x116>
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	691c      	ldr	r4, [r3, #16]
 8019310:	4b41      	ldr	r3, [pc, #260]	@ (8019418 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 8019312:	9300      	str	r3, [sp, #0]
 8019314:	233a      	movs	r3, #58	@ 0x3a
 8019316:	4a3a      	ldr	r2, [pc, #232]	@ (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8019318:	493d      	ldr	r1, [pc, #244]	@ (8019410 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801931a:	6878      	ldr	r0, [r7, #4]
 801931c:	47a0      	blx	r4
 801931e:	2401      	movs	r4, #1
 8019320:	e065      	b.n	80193ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>

  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8019322:	683b      	ldr	r3, [r7, #0]
 8019324:	691b      	ldr	r3, [r3, #16]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d10a      	bne.n	8019340 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	691c      	ldr	r4, [r3, #16]
 801932e:	4b3b      	ldr	r3, [pc, #236]	@ (801941c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8019330:	9300      	str	r3, [sp, #0]
 8019332:	233c      	movs	r3, #60	@ 0x3c
 8019334:	4a32      	ldr	r2, [pc, #200]	@ (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8019336:	4936      	ldr	r1, [pc, #216]	@ (8019410 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8019338:	6878      	ldr	r0, [r7, #4]
 801933a:	47a0      	blx	r4
 801933c:	2401      	movs	r4, #1
 801933e:	e056      	b.n	80193ee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  CMSISNNSoftmaxParams* op_data =
 8019340:	683b      	ldr	r3, [r7, #0]
 8019342:	691b      	ldr	r3, [r3, #16]
 8019344:	653b      	str	r3, [r7, #80]	@ 0x50
      static_cast<CMSISNNSoftmaxParams*>(node->user_data);

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8019346:	683b      	ldr	r3, [r7, #0]
 8019348:	695b      	ldr	r3, [r3, #20]
 801934a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
 801934c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801934e:	9300      	str	r3, [sp, #0]
 8019350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019352:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019354:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019356:	6878      	ldr	r0, [r7, #4]
 8019358:	f000 f920 	bl	801959c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801935c:	4603      	mov	r3, r0
 801935e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                                        &op_data->softmax_params);

  const auto input_shape = GetTensorShape(input);
 8019362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019366:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019368:	4618      	mov	r0, r3
 801936a:	f7fe f95e 	bl	801762a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 801936e:	f107 030c 	add.w	r3, r7, #12
 8019372:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019374:	4618      	mov	r0, r3
 8019376:	f7fe f958 	bl	801762a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801937a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801937e:	4618      	mov	r0, r3
 8019380:	f7fe fd54 	bl	8017e2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019384:	4603      	mov	r3, r0
 8019386:	3b01      	subs	r3, #1
 8019388:	647b      	str	r3, [r7, #68]	@ 0x44
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801938a:	f107 020c 	add.w	r2, r7, #12
 801938e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019392:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019394:	4618      	mov	r0, r3
 8019396:	f7ff fe43 	bl	8019020 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801939a:	6438      	str	r0, [r7, #64]	@ 0x40
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801939c:	f107 020c 	add.w	r2, r7, #12
 80193a0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80193a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80193a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80193a8:	f7ff f86e 	bl	8018488 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80193ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
  op_data->num_rows = outer_size;
 80193ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80193b2:	639a      	str	r2, [r3, #56]	@ 0x38
  op_data->row_size = depth;
 80193b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80193b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  micro_context->DeallocateTempTfLiteTensor(input);
 80193ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	3324      	adds	r3, #36	@ 0x24
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80193c4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80193c6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 80193c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	3324      	adds	r3, #36	@ 0x24
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80193d2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80193d4:	4798      	blx	r3
  return ret_val;
 80193d6:	f897 404b 	ldrb.w	r4, [r7, #75]	@ 0x4b
}
 80193da:	f107 030c 	add.w	r3, r7, #12
 80193de:	4618      	mov	r0, r3
 80193e0:	f7fe f8c5 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
 80193e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7fe f8c0 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
 80193ee:	4623      	mov	r3, r4
 80193f0:	4618      	mov	r0, r3
 80193f2:	3764      	adds	r7, #100	@ 0x64
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd90      	pop	{r4, r7, pc}
 80193f8:	08022aac 	.word	0x08022aac
 80193fc:	08022ab0 	.word	0x08022ab0
 8019400:	08022a00 	.word	0x08022a00
 8019404:	08022a90 	.word	0x08022a90
 8019408:	08022ac0 	.word	0x08022ac0
 801940c:	08022aec 	.word	0x08022aec
 8019410:	08022ad4 	.word	0x08022ad4
 8019414:	08022b00 	.word	0x08022b00
 8019418:	08022b1c 	.word	0x08022b1c
 801941c:	08022b30 	.word	0x08022b30

08019420 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8019420:	b5b0      	push	{r4, r5, r7, lr}
 8019422:	b0aa      	sub	sp, #168	@ 0xa8
 8019424:	af02      	add	r7, sp, #8
 8019426:	6078      	str	r0, [r7, #4]
 8019428:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801942a:	2200      	movs	r2, #0
 801942c:	6839      	ldr	r1, [r7, #0]
 801942e:	6878      	ldr	r0, [r7, #4]
 8019430:	f7ff fd5b 	bl	8018eea <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8019434:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8019438:	2200      	movs	r2, #0
 801943a:	6839      	ldr	r1, [r7, #0]
 801943c:	6878      	ldr	r0, [r7, #4]
 801943e:	f7ff fd64 	bl	8018f0a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8019442:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

  TFLITE_DCHECK(node->user_data != nullptr);
 8019446:	683b      	ldr	r3, [r7, #0]
 8019448:	691b      	ldr	r3, [r3, #16]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d101      	bne.n	8019452 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 801944e:	f004 f915 	bl	801d67c <abort>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);
 8019452:	683b      	ldr	r3, [r7, #0]
 8019454:	691b      	ldr	r3, [r3, #16]
  const CMSISNNSoftmaxParams op_data =
 8019456:	f107 0410 	add.w	r4, r7, #16
 801945a:	461d      	mov	r5, r3
 801945c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801945e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019468:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801946c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  switch (input->type) {
 8019470:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019474:	7a1b      	ldrb	r3, [r3, #8]
 8019476:	2b09      	cmp	r3, #9
 8019478:	d034      	beq.n	80194e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
 801947a:	2b09      	cmp	r3, #9
 801947c:	dc5c      	bgt.n	8019538 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
 801947e:	2b01      	cmp	r3, #1
 8019480:	d002      	beq.n	8019488 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x68>
 8019482:	2b07      	cmp	r3, #7
 8019484:	d043      	beq.n	801950e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
 8019486:	e057      	b.n	8019538 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      tflite::reference_ops::Softmax(
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 8019488:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801948c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8019490:	4618      	mov	r0, r3
 8019492:	f7ff fd5a 	bl	8018f4a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8019496:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 801949a:	f7fe ff16 	bl	80182ca <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801949e:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 80194a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80194a4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80194a8:	4618      	mov	r0, r3
 80194aa:	f7ff fd4e 	bl	8018f4a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80194ae:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80194b2:	f7fe ff19 	bl	80182e8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80194b6:	4602      	mov	r2, r0
 80194b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80194bc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80194c0:	f107 0010 	add.w	r0, r7, #16
 80194c4:	9200      	str	r2, [sp, #0]
 80194c6:	4622      	mov	r2, r4
 80194c8:	f7ff fdd9 	bl	801907e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 80194cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80194d0:	4618      	mov	r0, r3
 80194d2:	f7fe f84c 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 80194d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80194da:	4618      	mov	r0, r3
 80194dc:	f7fe f847 	bl	801756e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 80194e0:	2300      	movs	r3, #0
 80194e2:	e03d      	b.n	8019560 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    }
    case kTfLiteInt8: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 80194e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80194e8:	7a1b      	ldrb	r3, [r3, #8]
 80194ea:	4618      	mov	r0, r3
 80194ec:	f7fd ff96 	bl	801741c <TfLiteTypeGetName>
 80194f0:	4603      	mov	r3, r0
 80194f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80194f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80194fa:	f103 0208 	add.w	r2, r3, #8
 80194fe:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8019502:	4619      	mov	r1, r3
 8019504:	4818      	ldr	r0, [pc, #96]	@ (8019568 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8019506:	f7fe ffb3 	bl	8018470 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 801950a:	2301      	movs	r3, #1
 801950c:	e028      	b.n	8019560 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
      }
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 801950e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019512:	7a1b      	ldrb	r3, [r3, #8]
 8019514:	4618      	mov	r0, r3
 8019516:	f7fd ff81 	bl	801741c <TfLiteTypeGetName>
 801951a:	4603      	mov	r3, r0
 801951c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8019520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019524:	f103 0208 	add.w	r2, r3, #8
 8019528:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801952c:	4619      	mov	r1, r3
 801952e:	480e      	ldr	r0, [pc, #56]	@ (8019568 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8019530:	f7fe ff9e 	bl	8018470 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8019534:	2301      	movs	r3, #1
 8019536:	e013      	b.n	8019560 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
              tflite::micro::GetTensorData<int16_t>(output)),
          ARM_CMSIS_NN_SUCCESS);
      return kTfLiteOk;
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8019538:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801953c:	7a1b      	ldrb	r3, [r3, #8]
 801953e:	4618      	mov	r0, r3
 8019540:	f7fd ff6c 	bl	801741c <TfLiteTypeGetName>
 8019544:	4603      	mov	r3, r0
 8019546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801954a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801954e:	f103 0208 	add.w	r2, r3, #8
 8019552:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8019556:	4619      	mov	r1, r3
 8019558:	4803      	ldr	r0, [pc, #12]	@ (8019568 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 801955a:	f7fe ff89 	bl	8018470 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 801955e:	2301      	movs	r3, #1
  }
}
 8019560:	4618      	mov	r0, r3
 8019562:	37a0      	adds	r7, #160	@ 0xa0
 8019564:	46bd      	mov	sp, r7
 8019566:	bdb0      	pop	{r4, r5, r7, pc}
 8019568:	08022b4c 	.word	0x08022b4c

0801956c <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801956c:	b580      	push	{r7, lr}
 801956e:	b084      	sub	sp, #16
 8019570:	af02      	add	r7, sp, #8
 8019572:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 8019574:	6878      	ldr	r0, [r7, #4]
 8019576:	2300      	movs	r3, #0
 8019578:	9300      	str	r3, [sp, #0]
 801957a:	4b05      	ldr	r3, [pc, #20]	@ (8019590 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
 801957c:	4a05      	ldr	r2, [pc, #20]	@ (8019594 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801957e:	4906      	ldr	r1, [pc, #24]	@ (8019598 <_ZN6tflite16Register_SOFTMAXEv+0x2c>)
 8019580:	f7ff fc5a 	bl	8018e38 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8019584:	bf00      	nop
}
 8019586:	6878      	ldr	r0, [r7, #4]
 8019588:	3708      	adds	r7, #8
 801958a:	46bd      	mov	sp, r7
 801958c:	bd80      	pop	{r7, pc}
 801958e:	bf00      	nop
 8019590:	08019421 	.word	0x08019421
 8019594:	0801920d 	.word	0x0801920d
 8019598:	080191e1 	.word	0x080191e1

0801959c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801959c:	b5b0      	push	{r4, r5, r7, lr}
 801959e:	b08a      	sub	sp, #40	@ 0x28
 80195a0:	af04      	add	r7, sp, #16
 80195a2:	60f8      	str	r0, [r7, #12]
 80195a4:	60b9      	str	r1, [r7, #8]
 80195a6:	607a      	str	r2, [r7, #4]
 80195a8:	603b      	str	r3, [r7, #0]
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 80195aa:	68bb      	ldr	r3, [r7, #8]
 80195ac:	781b      	ldrb	r3, [r3, #0]
 80195ae:	2b09      	cmp	r3, #9
 80195b0:	d003      	beq.n	80195ba <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
 80195b2:	68bb      	ldr	r3, [r7, #8]
 80195b4:	781b      	ldrb	r3, [r3, #0]
 80195b6:	2b07      	cmp	r3, #7
 80195b8:	d121      	bne.n	80195fe <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x62>
    if (input->type == kTfLiteInt16) {
 80195ba:	68bb      	ldr	r3, [r7, #8]
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	2b07      	cmp	r3, #7
 80195c0:	d10e      	bne.n	80195e0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x44>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	691c      	ldr	r4, [r3, #16]
 80195c6:	68bb      	ldr	r3, [r7, #8]
 80195c8:	781b      	ldrb	r3, [r3, #0]
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7fd ff26 	bl	801741c <TfLiteTypeGetName>
 80195d0:	4602      	mov	r2, r0
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	781b      	ldrb	r3, [r3, #0]
 80195d6:	492e      	ldr	r1, [pc, #184]	@ (8019690 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 80195d8:	68f8      	ldr	r0, [r7, #12]
 80195da:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80195dc:	2301      	movs	r3, #1
 80195de:	e053      	b.n	8019688 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	691c      	ldr	r4, [r3, #16]
 80195e4:	68bb      	ldr	r3, [r7, #8]
 80195e6:	781b      	ldrb	r3, [r3, #0]
 80195e8:	4618      	mov	r0, r3
 80195ea:	f7fd ff17 	bl	801741c <TfLiteTypeGetName>
 80195ee:	4602      	mov	r2, r0
 80195f0:	68bb      	ldr	r3, [r7, #8]
 80195f2:	781b      	ldrb	r3, [r3, #0]
 80195f4:	4926      	ldr	r1, [pc, #152]	@ (8019690 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 80195f6:	68f8      	ldr	r0, [r7, #12]
 80195f8:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80195fa:	2301      	movs	r3, #1
 80195fc:	e044      	b.n	8019688 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                    TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
#endif
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 80195fe:	68bb      	ldr	r3, [r7, #8]
 8019600:	781b      	ldrb	r3, [r3, #0]
 8019602:	2b01      	cmp	r3, #1
 8019604:	d018      	beq.n	8019638 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	691c      	ldr	r4, [r3, #16]
 801960a:	68bb      	ldr	r3, [r7, #8]
 801960c:	781b      	ldrb	r3, [r3, #0]
 801960e:	4618      	mov	r0, r3
 8019610:	f7fd ff04 	bl	801741c <TfLiteTypeGetName>
 8019614:	4605      	mov	r5, r0
 8019616:	2001      	movs	r0, #1
 8019618:	f7fd ff00 	bl	801741c <TfLiteTypeGetName>
 801961c:	4603      	mov	r3, r0
 801961e:	9303      	str	r3, [sp, #12]
 8019620:	9502      	str	r5, [sp, #8]
 8019622:	4b1c      	ldr	r3, [pc, #112]	@ (8019694 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8019624:	9301      	str	r3, [sp, #4]
 8019626:	4b1c      	ldr	r3, [pc, #112]	@ (8019698 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfc>)
 8019628:	9300      	str	r3, [sp, #0]
 801962a:	23a0      	movs	r3, #160	@ 0xa0
 801962c:	4a1b      	ldr	r2, [pc, #108]	@ (801969c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 801962e:	491c      	ldr	r1, [pc, #112]	@ (80196a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8019630:	68f8      	ldr	r0, [r7, #12]
 8019632:	47a0      	blx	r4
 8019634:	2301      	movs	r3, #1
 8019636:	e027      	b.n	8019688 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	2b01      	cmp	r3, #1
 801963e:	d018      	beq.n	8019672 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd6>
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	691c      	ldr	r4, [r3, #16]
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	781b      	ldrb	r3, [r3, #0]
 8019648:	4618      	mov	r0, r3
 801964a:	f7fd fee7 	bl	801741c <TfLiteTypeGetName>
 801964e:	4605      	mov	r5, r0
 8019650:	2001      	movs	r0, #1
 8019652:	f7fd fee3 	bl	801741c <TfLiteTypeGetName>
 8019656:	4603      	mov	r3, r0
 8019658:	9303      	str	r3, [sp, #12]
 801965a:	9502      	str	r5, [sp, #8]
 801965c:	4b0d      	ldr	r3, [pc, #52]	@ (8019694 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 801965e:	9301      	str	r3, [sp, #4]
 8019660:	4b10      	ldr	r3, [pc, #64]	@ (80196a4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x108>)
 8019662:	9300      	str	r3, [sp, #0]
 8019664:	23a1      	movs	r3, #161	@ 0xa1
 8019666:	4a0d      	ldr	r2, [pc, #52]	@ (801969c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8019668:	490d      	ldr	r1, [pc, #52]	@ (80196a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 801966a:	68f8      	ldr	r0, [r7, #12]
 801966c:	47a0      	blx	r4
 801966e:	2301      	movs	r3, #1
 8019670:	e00a      	b.n	8019688 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    op_data->beta = static_cast<double>(params->beta);
 8019672:	683b      	ldr	r3, [r7, #0]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	4618      	mov	r0, r3
 8019678:	f7e6 ff96 	bl	80005a8 <__aeabi_f2d>
 801967c:	4602      	mov	r2, r0
 801967e:	460b      	mov	r3, r1
 8019680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019682:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8019686:	2300      	movs	r3, #0
}
 8019688:	4618      	mov	r0, r3
 801968a:	3718      	adds	r7, #24
 801968c:	46bd      	mov	sp, r7
 801968e:	bdb0      	pop	{r4, r5, r7, pc}
 8019690:	08022ce8 	.word	0x08022ce8
 8019694:	08022d20 	.word	0x08022d20
 8019698:	08022cbc 	.word	0x08022cbc
 801969c:	08022b68 	.word	0x08022b68
 80196a0:	08022d04 	.word	0x08022d04
 80196a4:	08022cac 	.word	0x08022cac

080196a8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 80196a8:	b480      	push	{r7}
 80196aa:	b085      	sub	sp, #20
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
 80196b0:	6039      	str	r1, [r7, #0]
  tensor->type = kTfLiteFloat32;
 80196b2:	683b      	ldr	r3, [r7, #0]
 80196b4:	2201      	movs	r2, #1
 80196b6:	701a      	strb	r2, [r3, #0]
  tensor->is_variable = false;
 80196b8:	683b      	ldr	r3, [r7, #0]
 80196ba:	2200      	movs	r2, #0
 80196bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 80196c0:	4a1d      	ldr	r2, [pc, #116]	@ (8019738 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	011b      	lsls	r3, r3, #4
 80196c6:	4413      	add	r3, r2
 80196c8:	781a      	ldrb	r2, [r3, #0]
 80196ca:	683b      	ldr	r3, [r7, #0]
 80196cc:	751a      	strb	r2, [r3, #20]
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
 80196ce:	4a1a      	ldr	r2, [pc, #104]	@ (8019738 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	011b      	lsls	r3, r3, #4
 80196d4:	4413      	add	r3, r2
 80196d6:	330c      	adds	r3, #12
 80196d8:	681a      	ldr	r2, [r3, #0]
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	619a      	str	r2, [r3, #24]
  tensor->dims = tensorData[i].dims;
 80196de:	4a16      	ldr	r2, [pc, #88]	@ (8019738 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	011b      	lsls	r3, r3, #4
 80196e4:	4413      	add	r3, r2
 80196e6:	3308      	adds	r3, #8
 80196e8:	681a      	ldr	r2, [r3, #0]
 80196ea:	683b      	ldr	r3, [r7, #0]
 80196ec:	609a      	str	r2, [r3, #8]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 80196ee:	683b      	ldr	r3, [r7, #0]
 80196f0:	7d1b      	ldrb	r3, [r3, #20]
 80196f2:	2b02      	cmp	r3, #2
 80196f4:	d10e      	bne.n	8019714 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x6c>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 80196f6:	4a10      	ldr	r2, [pc, #64]	@ (8019738 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	011b      	lsls	r3, r3, #4
 80196fc:	4413      	add	r3, r2
 80196fe:	3304      	adds	r3, #4
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	461a      	mov	r2, r3
 8019704:	4b0d      	ldr	r3, [pc, #52]	@ (801973c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x94>)
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	4413      	add	r3, r2
 801970a:	60fb      	str	r3, [r7, #12]

    tensor->data.data =  start;
 801970c:	683b      	ldr	r3, [r7, #0]
 801970e:	68fa      	ldr	r2, [r7, #12]
 8019710:	605a      	str	r2, [r3, #4]
 8019712:	e007      	b.n	8019724 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x7c>
  }
  else {
      tensor->data.data = tensorData[i].data;
 8019714:	4a08      	ldr	r2, [pc, #32]	@ (8019738 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	011b      	lsls	r3, r3, #4
 801971a:	4413      	add	r3, r2
 801971c:	3304      	adds	r3, #4
 801971e:	681a      	ldr	r2, [r3, #0]
 8019720:	683b      	ldr	r3, [r7, #0]
 8019722:	605a      	str	r2, [r3, #4]
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;
 8019724:	683b      	ldr	r3, [r7, #0]
 8019726:	2200      	movs	r2, #0
 8019728:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

}
 801972c:	bf00      	nop
 801972e:	3714      	adds	r7, #20
 8019730:	46bd      	mov	sp, r7
 8019732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019736:	4770      	bx	lr
 8019738:	200050bc 	.word	0x200050bc
 801973c:	20005454 	.word	0x20005454

08019740 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>:

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
 8019740:	b480      	push	{r7}
 8019742:	b085      	sub	sp, #20
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
 8019748:	6039      	str	r1, [r7, #0]

  tensor->type = kTfLiteFloat32;
 801974a:	683b      	ldr	r3, [r7, #0]
 801974c:	2201      	movs	r2, #1
 801974e:	721a      	strb	r2, [r3, #8]

  tensor->dims = tensorData[i].dims;
 8019750:	4a16      	ldr	r2, [pc, #88]	@ (80197ac <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	011b      	lsls	r3, r3, #4
 8019756:	4413      	add	r3, r2
 8019758:	3308      	adds	r3, #8
 801975a:	681a      	ldr	r2, [r3, #0]
 801975c:	683b      	ldr	r3, [r7, #0]
 801975e:	605a      	str	r2, [r3, #4]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
 8019760:	4a12      	ldr	r2, [pc, #72]	@ (80197ac <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	011b      	lsls	r3, r3, #4
 8019766:	4413      	add	r3, r2
 8019768:	781b      	ldrb	r3, [r3, #0]
 801976a:	73fb      	strb	r3, [r7, #15]
  if(allocation_type == kTfLiteArenaRw) {
 801976c:	7bfb      	ldrb	r3, [r7, #15]
 801976e:	2b02      	cmp	r3, #2
 8019770:	d10e      	bne.n	8019790 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x50>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8019772:	4a0e      	ldr	r2, [pc, #56]	@ (80197ac <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	011b      	lsls	r3, r3, #4
 8019778:	4413      	add	r3, r2
 801977a:	3304      	adds	r3, #4
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	461a      	mov	r2, r3
 8019780:	4b0b      	ldr	r3, [pc, #44]	@ (80197b0 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x70>)
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	4413      	add	r3, r2
 8019786:	60bb      	str	r3, [r7, #8]

    tensor->data.data =  start;
 8019788:	683b      	ldr	r3, [r7, #0]
 801978a:	68ba      	ldr	r2, [r7, #8]
 801978c:	601a      	str	r2, [r3, #0]
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}
 801978e:	e007      	b.n	80197a0 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x60>
    tensor->data.data = tensorData[i].data;
 8019790:	4a06      	ldr	r2, [pc, #24]	@ (80197ac <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	011b      	lsls	r3, r3, #4
 8019796:	4413      	add	r3, r2
 8019798:	3304      	adds	r3, #4
 801979a:	681a      	ldr	r2, [r3, #0]
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	601a      	str	r2, [r3, #0]
}
 80197a0:	bf00      	nop
 80197a2:	3714      	adds	r7, #20
 80197a4:	46bd      	mov	sp, r7
 80197a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197aa:	4770      	bx	lr
 80197ac:	200050bc 	.word	0x200050bc
 80197b0:	20005454 	.word	0x20005454

080197b4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b084      	sub	sp, #16
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
 80197bc:	6039      	str	r1, [r7, #0]
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 80197be:	683b      	ldr	r3, [r7, #0]
 80197c0:	f003 030f 	and.w	r3, r3, #15
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d005      	beq.n	80197d4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x20>
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	f003 030f 	and.w	r3, r3, #15
 80197ce:	f1c3 0310 	rsb	r3, r3, #16
 80197d2:	e000      	b.n	80197d6 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x22>
 80197d4:	2300      	movs	r3, #0
 80197d6:	60fb      	str	r3, [r7, #12]

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 80197d8:	4b29      	ldr	r3, [pc, #164]	@ (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 80197da:	681a      	ldr	r2, [r3, #0]
 80197dc:	6839      	ldr	r1, [r7, #0]
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	440b      	add	r3, r1
 80197e2:	425b      	negs	r3, r3
 80197e4:	441a      	add	r2, r3
 80197e6:	4b27      	ldr	r3, [pc, #156]	@ (8019884 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd0>)
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	429a      	cmp	r2, r3
 80197ec:	d224      	bcs.n	8019838 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 80197ee:	4b26      	ldr	r3, [pc, #152]	@ (8019888 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	2b09      	cmp	r3, #9
 80197f4:	d906      	bls.n	8019804 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 80197f6:	683b      	ldr	r3, [r7, #0]
 80197f8:	4619      	mov	r1, r3
 80197fa:	4824      	ldr	r0, [pc, #144]	@ (801988c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd8>)
 80197fc:	f7ef fb16 	bl	8008e2c <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 8019800:	2300      	movs	r3, #0
 8019802:	e039      	b.n	8019878 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8019804:	2101      	movs	r1, #1
 8019806:	6838      	ldr	r0, [r7, #0]
 8019808:	f7fd fdd2 	bl	80173b0 <_Z9ei_callocjj>
 801980c:	60b8      	str	r0, [r7, #8]
    if (ptr == NULL) {
 801980e:	68bb      	ldr	r3, [r7, #8]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d106      	bne.n	8019822 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8019814:	683b      	ldr	r3, [r7, #0]
 8019816:	4619      	mov	r1, r3
 8019818:	481d      	ldr	r0, [pc, #116]	@ (8019890 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xdc>)
 801981a:	f7ef fb07 	bl	8008e2c <_Z9ei_printfPKcz>
      return NULL;
 801981e:	2300      	movs	r3, #0
 8019820:	e02a      	b.n	8019878 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 8019822:	4b19      	ldr	r3, [pc, #100]	@ (8019888 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	1c5a      	adds	r2, r3, #1
 8019828:	4917      	ldr	r1, [pc, #92]	@ (8019888 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 801982a:	600a      	str	r2, [r1, #0]
 801982c:	4919      	ldr	r1, [pc, #100]	@ (8019894 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xe0>)
 801982e:	68ba      	ldr	r2, [r7, #8]
 8019830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 8019834:	68bb      	ldr	r3, [r7, #8]
 8019836:	e01f      	b.n	8019878 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
  }

  current_location -= bytes;
 8019838:	4b11      	ldr	r3, [pc, #68]	@ (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801983a:	681a      	ldr	r2, [r3, #0]
 801983c:	683b      	ldr	r3, [r7, #0]
 801983e:	425b      	negs	r3, r3
 8019840:	4413      	add	r3, r2
 8019842:	4a0f      	ldr	r2, [pc, #60]	@ (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019844:	6013      	str	r3, [r2, #0]

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
 8019846:	4b0e      	ldr	r3, [pc, #56]	@ (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	3b0f      	subs	r3, #15
 801984c:	4a0c      	ldr	r2, [pc, #48]	@ (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801984e:	6013      	str	r3, [r2, #0]
  current_location += 16 - ((uintptr_t)(current_location) & 15);
 8019850:	4b0b      	ldr	r3, [pc, #44]	@ (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019852:	681a      	ldr	r2, [r3, #0]
 8019854:	4b0a      	ldr	r3, [pc, #40]	@ (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	f003 030f 	and.w	r3, r3, #15
 801985c:	f1c3 0310 	rsb	r3, r3, #16
 8019860:	4413      	add	r3, r2
 8019862:	4a07      	ldr	r2, [pc, #28]	@ (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019864:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8019866:	4b06      	ldr	r3, [pc, #24]	@ (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	60bb      	str	r3, [r7, #8]
  memset(ptr, 0, bytes);
 801986c:	683a      	ldr	r2, [r7, #0]
 801986e:	2100      	movs	r1, #0
 8019870:	68b8      	ldr	r0, [r7, #8]
 8019872:	f004 ffb7 	bl	801e7e4 <memset>

  return ptr;
 8019876:	68bb      	ldr	r3, [r7, #8]
}
 8019878:	4618      	mov	r0, r3
 801987a:	3710      	adds	r7, #16
 801987c:	46bd      	mov	sp, r7
 801987e:	bd80      	pop	{r7, pc}
 8019880:	2000545c 	.word	0x2000545c
 8019884:	20005458 	.word	0x20005458
 8019888:	2000567c 	.word	0x2000567c
 801988c:	08022db8 	.word	0x08022db8
 8019890:	08022e38 	.word	0x08022e38
 8019894:	20005654 	.word	0x20005654

08019898 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8019898:	b580      	push	{r7, lr}
 801989a:	b086      	sub	sp, #24
 801989c:	af00      	add	r7, sp, #0
 801989e:	60f8      	str	r0, [r7, #12]
 80198a0:	60b9      	str	r1, [r7, #8]
 80198a2:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 80198a4:	4b1b      	ldr	r3, [pc, #108]	@ (8019914 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	2b03      	cmp	r3, #3
 80198aa:	d906      	bls.n	80198ba <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 80198ac:	68bb      	ldr	r3, [r7, #8]
 80198ae:	4619      	mov	r1, r3
 80198b0:	4819      	ldr	r0, [pc, #100]	@ (8019918 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x80>)
 80198b2:	f7ef fabb 	bl	8008e2c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 80198b6:	2301      	movs	r3, #1
 80198b8:	e028      	b.n	801990c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 80198ba:	68bb      	ldr	r3, [r7, #8]
 80198bc:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
 80198be:	693b      	ldr	r3, [r7, #16]
 80198c0:	4619      	mov	r1, r3
 80198c2:	68f8      	ldr	r0, [r7, #12]
 80198c4:	f7ff ff76 	bl	80197b4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 80198c8:	4603      	mov	r3, r0
 80198ca:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d106      	bne.n	80198e0 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 80198d2:	68bb      	ldr	r3, [r7, #8]
 80198d4:	4619      	mov	r1, r3
 80198d6:	4811      	ldr	r0, [pc, #68]	@ (801991c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x84>)
 80198d8:	f7ef faa8 	bl	8008e2c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 80198dc:	2301      	movs	r3, #1
 80198de:	e015      	b.n	801990c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 80198e0:	4b0c      	ldr	r3, [pc, #48]	@ (8019914 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	4a0e      	ldr	r2, [pc, #56]	@ (8019920 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x88>)
 80198e6:	00db      	lsls	r3, r3, #3
 80198e8:	4413      	add	r3, r2
 80198ea:	f107 0210 	add.w	r2, r7, #16
 80198ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80198f2:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 80198f6:	4b07      	ldr	r3, [pc, #28]	@ (8019914 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	461a      	mov	r2, r3
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 8019900:	4b04      	ldr	r3, [pc, #16]	@ (8019914 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	3301      	adds	r3, #1
 8019906:	4a03      	ldr	r2, [pc, #12]	@ (8019914 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8019908:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 801990a:	2300      	movs	r3, #0
}
 801990c:	4618      	mov	r0, r3
 801990e:	3718      	adds	r7, #24
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}
 8019914:	200056a0 	.word	0x200056a0
 8019918:	08022e70 	.word	0x08022e70
 801991c:	08022ec8 	.word	0x08022ec8
 8019920:	20005680 	.word	0x20005680

08019924 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
 8019924:	b480      	push	{r7}
 8019926:	b083      	sub	sp, #12
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
 801992c:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 801992e:	4b09      	ldr	r3, [pc, #36]	@ (8019954 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x30>)
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	461a      	mov	r2, r3
 8019934:	683b      	ldr	r3, [r7, #0]
 8019936:	4293      	cmp	r3, r2
 8019938:	dd01      	ble.n	801993e <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x1a>
    return NULL;
 801993a:	2300      	movs	r3, #0
 801993c:	e004      	b.n	8019948 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 801993e:	4a06      	ldr	r2, [pc, #24]	@ (8019958 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x34>)
 8019940:	683b      	ldr	r3, [r7, #0]
 8019942:	00db      	lsls	r3, r3, #3
 8019944:	4413      	add	r3, r2
 8019946:	685b      	ldr	r3, [r3, #4]
}
 8019948:	4618      	mov	r0, r3
 801994a:	370c      	adds	r7, #12
 801994c:	46bd      	mov	sp, r7
 801994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019952:	4770      	bx	lr
 8019954:	200056a0 	.word	0x200056a0
 8019958:	20005680 	.word	0x20005680

0801995c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
 801995c:	b480      	push	{r7}
 801995e:	b083      	sub	sp, #12
 8019960:	af00      	add	r7, sp, #0
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8019962:	2300      	movs	r3, #0
 8019964:	607b      	str	r3, [r7, #4]
 8019966:	e00d      	b.n	8019984 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 8019968:	4914      	ldr	r1, [pc, #80]	@ (80199bc <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x60>)
 801996a:	687a      	ldr	r2, [r7, #4]
 801996c:	4613      	mov	r3, r2
 801996e:	011b      	lsls	r3, r3, #4
 8019970:	4413      	add	r3, r2
 8019972:	009b      	lsls	r3, r3, #2
 8019974:	440b      	add	r3, r1
 8019976:	3340      	adds	r3, #64	@ 0x40
 8019978:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801997c:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	3301      	adds	r3, #1
 8019982:	607b      	str	r3, [r7, #4]
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	2b03      	cmp	r3, #3
 8019988:	d9ee      	bls.n	8019968 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0xc>
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 801998a:	2300      	movs	r3, #0
 801998c:	603b      	str	r3, [r7, #0]
 801998e:	e00a      	b.n	80199a6 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x4a>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 8019990:	4a0b      	ldr	r2, [pc, #44]	@ (80199c0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x64>)
 8019992:	683b      	ldr	r3, [r7, #0]
 8019994:	011b      	lsls	r3, r3, #4
 8019996:	4413      	add	r3, r2
 8019998:	330c      	adds	r3, #12
 801999a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801999e:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 80199a0:	683b      	ldr	r3, [r7, #0]
 80199a2:	3301      	adds	r3, #1
 80199a4:	603b      	str	r3, [r7, #0]
 80199a6:	683b      	ldr	r3, [r7, #0]
 80199a8:	2b03      	cmp	r3, #3
 80199aa:	d9f1      	bls.n	8019990 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x34>
  }
}
 80199ac:	bf00      	nop
 80199ae:	bf00      	nop
 80199b0:	370c      	adds	r7, #12
 80199b2:	46bd      	mov	sp, r7
 80199b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b8:	4770      	bx	lr
 80199ba:	bf00      	nop
 80199bc:	200054b8 	.word	0x200054b8
 80199c0:	200055c8 	.word	0x200055c8

080199c4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b084      	sub	sp, #16
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	6078      	str	r0, [r7, #4]
 80199cc:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 80199ce:	4b2e      	ldr	r3, [pc, #184]	@ (8019a88 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc4>)
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	4a2e      	ldr	r2, [pc, #184]	@ (8019a8c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc8>)
 80199d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80199d8:	683b      	ldr	r3, [r7, #0]
 80199da:	4413      	add	r3, r2
 80199dc:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 80199de:	2300      	movs	r3, #0
 80199e0:	60fb      	str	r3, [r7, #12]
 80199e2:	e045      	b.n	8019a70 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xac>
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
 80199e4:	492a      	ldr	r1, [pc, #168]	@ (8019a90 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 80199e6:	68fa      	ldr	r2, [r7, #12]
 80199e8:	4613      	mov	r3, r2
 80199ea:	011b      	lsls	r3, r3, #4
 80199ec:	4413      	add	r3, r2
 80199ee:	009b      	lsls	r3, r3, #2
 80199f0:	440b      	add	r3, r1
 80199f2:	3340      	adds	r3, #64	@ 0x40
 80199f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199f8:	461a      	mov	r2, r3
 80199fa:	683b      	ldr	r3, [r7, #0]
 80199fc:	4293      	cmp	r3, r2
 80199fe:	d107      	bne.n	8019a10 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x4c>
      return &tflTensors[ix].tensor;
 8019a00:	68fa      	ldr	r2, [r7, #12]
 8019a02:	4613      	mov	r3, r2
 8019a04:	011b      	lsls	r3, r3, #4
 8019a06:	4413      	add	r3, r2
 8019a08:	009b      	lsls	r3, r3, #2
 8019a0a:	4a21      	ldr	r2, [pc, #132]	@ (8019a90 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019a0c:	4413      	add	r3, r2
 8019a0e:	e037      	b.n	8019a80 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 8019a10:	491f      	ldr	r1, [pc, #124]	@ (8019a90 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019a12:	68fa      	ldr	r2, [r7, #12]
 8019a14:	4613      	mov	r3, r2
 8019a16:	011b      	lsls	r3, r3, #4
 8019a18:	4413      	add	r3, r2
 8019a1a:	009b      	lsls	r3, r3, #2
 8019a1c:	440b      	add	r3, r1
 8019a1e:	3340      	adds	r3, #64	@ 0x40
 8019a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a24:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8019a28:	4293      	cmp	r3, r2
 8019a2a:	d11e      	bne.n	8019a6a <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xa6>
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 8019a2c:	6838      	ldr	r0, [r7, #0]
 8019a2e:	68fa      	ldr	r2, [r7, #12]
 8019a30:	4613      	mov	r3, r2
 8019a32:	011b      	lsls	r3, r3, #4
 8019a34:	4413      	add	r3, r2
 8019a36:	009b      	lsls	r3, r3, #2
 8019a38:	4a15      	ldr	r2, [pc, #84]	@ (8019a90 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019a3a:	4413      	add	r3, r2
 8019a3c:	4619      	mov	r1, r3
 8019a3e:	f7ff fe33 	bl	80196a8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	b218      	sxth	r0, r3
 8019a46:	4912      	ldr	r1, [pc, #72]	@ (8019a90 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019a48:	68fa      	ldr	r2, [r7, #12]
 8019a4a:	4613      	mov	r3, r2
 8019a4c:	011b      	lsls	r3, r3, #4
 8019a4e:	4413      	add	r3, r2
 8019a50:	009b      	lsls	r3, r3, #2
 8019a52:	440b      	add	r3, r1
 8019a54:	3340      	adds	r3, #64	@ 0x40
 8019a56:	4602      	mov	r2, r0
 8019a58:	801a      	strh	r2, [r3, #0]
      return &tflTensors[ix].tensor;
 8019a5a:	68fa      	ldr	r2, [r7, #12]
 8019a5c:	4613      	mov	r3, r2
 8019a5e:	011b      	lsls	r3, r3, #4
 8019a60:	4413      	add	r3, r2
 8019a62:	009b      	lsls	r3, r3, #2
 8019a64:	4a0a      	ldr	r2, [pc, #40]	@ (8019a90 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019a66:	4413      	add	r3, r2
 8019a68:	e00a      	b.n	8019a80 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	3301      	adds	r3, #1
 8019a6e:	60fb      	str	r3, [r7, #12]
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	2b03      	cmp	r3, #3
 8019a74:	d9b6      	bls.n	80199e4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 8019a76:	2104      	movs	r1, #4
 8019a78:	4806      	ldr	r0, [pc, #24]	@ (8019a94 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xd0>)
 8019a7a:	f7ef f9d7 	bl	8008e2c <_Z9ei_printfPKcz>
  return nullptr;
 8019a7e:	2300      	movs	r3, #0
}
 8019a80:	4618      	mov	r0, r3
 8019a82:	3710      	adds	r7, #16
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bd80      	pop	{r7, pc}
 8019a88:	20005650 	.word	0x20005650
 8019a8c:	0802900c 	.word	0x0802900c
 8019a90:	200054b8 	.word	0x200054b8
 8019a94:	08022efc 	.word	0x08022efc

08019a98 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	b084      	sub	sp, #16
 8019a9c:	af00      	add	r7, sp, #0
 8019a9e:	6078      	str	r0, [r7, #4]
 8019aa0:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 8019aa2:	4b25      	ldr	r3, [pc, #148]	@ (8019b38 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa0>)
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	4a25      	ldr	r2, [pc, #148]	@ (8019b3c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa4>)
 8019aa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8019aac:	683b      	ldr	r3, [r7, #0]
 8019aae:	4413      	add	r3, r2
 8019ab0:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	60fb      	str	r3, [r7, #12]
 8019ab6:	e033      	b.n	8019b20 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x88>
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
 8019ab8:	4a21      	ldr	r2, [pc, #132]	@ (8019b40 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	011b      	lsls	r3, r3, #4
 8019abe:	4413      	add	r3, r2
 8019ac0:	330c      	adds	r3, #12
 8019ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ac6:	461a      	mov	r2, r3
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	4293      	cmp	r3, r2
 8019acc:	d104      	bne.n	8019ad8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
      return &tflEvalTensors[ix].tensor;
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	011b      	lsls	r3, r3, #4
 8019ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8019b40 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019ad4:	4413      	add	r3, r2
 8019ad6:	e02b      	b.n	8019b30 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 8019ad8:	4a19      	ldr	r2, [pc, #100]	@ (8019b40 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	011b      	lsls	r3, r3, #4
 8019ade:	4413      	add	r3, r2
 8019ae0:	330c      	adds	r3, #12
 8019ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ae6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8019aea:	4293      	cmp	r3, r2
 8019aec:	d115      	bne.n	8019b1a <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x82>
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	011b      	lsls	r3, r3, #4
 8019af2:	4a13      	ldr	r2, [pc, #76]	@ (8019b40 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019af4:	4413      	add	r3, r2
 8019af6:	4619      	mov	r1, r3
 8019af8:	6838      	ldr	r0, [r7, #0]
 8019afa:	f7ff fe21 	bl	8019740 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>
      tflEvalTensors[ix].index = tensor_idx;
 8019afe:	683b      	ldr	r3, [r7, #0]
 8019b00:	b219      	sxth	r1, r3
 8019b02:	4a0f      	ldr	r2, [pc, #60]	@ (8019b40 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	011b      	lsls	r3, r3, #4
 8019b08:	4413      	add	r3, r2
 8019b0a:	330c      	adds	r3, #12
 8019b0c:	460a      	mov	r2, r1
 8019b0e:	801a      	strh	r2, [r3, #0]
      return &tflEvalTensors[ix].tensor;
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	011b      	lsls	r3, r3, #4
 8019b14:	4a0a      	ldr	r2, [pc, #40]	@ (8019b40 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019b16:	4413      	add	r3, r2
 8019b18:	e00a      	b.n	8019b30 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	3301      	adds	r3, #1
 8019b1e:	60fb      	str	r3, [r7, #12]
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	2b03      	cmp	r3, #3
 8019b24:	d9c8      	bls.n	8019ab8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 8019b26:	2104      	movs	r1, #4
 8019b28:	4806      	ldr	r0, [pc, #24]	@ (8019b44 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xac>)
 8019b2a:	f7ef f97f 	bl	8008e2c <_Z9ei_printfPKcz>
  return nullptr;
 8019b2e:	2300      	movs	r3, #0
}
 8019b30:	4618      	mov	r0, r3
 8019b32:	3710      	adds	r7, #16
 8019b34:	46bd      	mov	sp, r7
 8019b36:	bd80      	pop	{r7, pc}
 8019b38:	20005650 	.word	0x20005650
 8019b3c:	0802900c 	.word	0x0802900c
 8019b40:	200055c8 	.word	0x200055c8
 8019b44:	08022f34 	.word	0x08022f34

08019b48 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>:

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b082      	sub	sp, #8
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
 8019b50:	6878      	ldr	r0, [r7, #4]
 8019b52:	2300      	movs	r3, #0
 8019b54:	2200      	movs	r2, #0
 8019b56:	2100      	movs	r1, #0
 8019b58:	f7fe fa1e 	bl	8017f98 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
 8019b5c:	4a03      	ldr	r2, [pc, #12]	@ (8019b6c <_ZN12_GLOBAL__N_115EonMicroContextC1Ev+0x24>)
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	601a      	str	r2, [r3, #0]
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	4618      	mov	r0, r3
 8019b66:	3708      	adds	r7, #8
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	bd80      	pop	{r7, pc}
 8019b6c:	08029024 	.word	0x08029024

08019b70 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:

  void* AllocatePersistentBuffer(size_t bytes) {
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b082      	sub	sp, #8
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	6039      	str	r1, [r7, #0]
    return AllocatePersistentBufferImpl(nullptr, bytes);
 8019b7a:	6839      	ldr	r1, [r7, #0]
 8019b7c:	2000      	movs	r0, #0
 8019b7e:	f7ff fe19 	bl	80197b4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 8019b82:	4603      	mov	r3, r0
  }
 8019b84:	4618      	mov	r0, r3
 8019b86:	3708      	adds	r7, #8
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	bd80      	pop	{r7, pc}

08019b8c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b084      	sub	sp, #16
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	60f8      	str	r0, [r7, #12]
 8019b94:	60b9      	str	r1, [r7, #8]
 8019b96:	607a      	str	r2, [r7, #4]
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
 8019b98:	687a      	ldr	r2, [r7, #4]
 8019b9a:	68b9      	ldr	r1, [r7, #8]
 8019b9c:	2000      	movs	r0, #0
 8019b9e:	f7ff fe7b 	bl	8019898 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
 8019ba2:	4603      	mov	r3, r0
  }
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	3710      	adds	r7, #16
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd80      	pop	{r7, pc}

08019bac <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:

  void* GetScratchBuffer(int buffer_index) {
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b082      	sub	sp, #8
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
 8019bb4:	6039      	str	r1, [r7, #0]
    return GetScratchBufferImpl(nullptr, buffer_index);
 8019bb6:	6839      	ldr	r1, [r7, #0]
 8019bb8:	2000      	movs	r0, #0
 8019bba:	f7ff feb3 	bl	8019924 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>
 8019bbe:	4603      	mov	r3, r0
  }
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	3708      	adds	r7, #8
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	bd80      	pop	{r7, pc}

08019bc8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b082      	sub	sp, #8
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
 8019bd0:	6039      	str	r1, [r7, #0]
    return GetTensorImpl(nullptr, tensor_index);
 8019bd2:	6839      	ldr	r1, [r7, #0]
 8019bd4:	2000      	movs	r0, #0
 8019bd6:	f7ff fef5 	bl	80199c4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
 8019bda:	4603      	mov	r3, r0
  }
 8019bdc:	4618      	mov	r0, r3
 8019bde:	3708      	adds	r7, #8
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}

08019be4 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 8019be4:	b480      	push	{r7}
 8019be6:	b083      	sub	sp, #12
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	6078      	str	r0, [r7, #4]
 8019bec:	6039      	str	r1, [r7, #0]
    return;
 8019bee:	bf00      	nop
  }
 8019bf0:	370c      	adds	r7, #12
 8019bf2:	46bd      	mov	sp, r7
 8019bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf8:	4770      	bx	lr

08019bfa <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
 8019bfa:	b580      	push	{r7, lr}
 8019bfc:	b082      	sub	sp, #8
 8019bfe:	af00      	add	r7, sp, #0
 8019c00:	6078      	str	r0, [r7, #4]
 8019c02:	6039      	str	r1, [r7, #0]
    return GetEvalTensorImpl(nullptr, tensor_index);
 8019c04:	6839      	ldr	r1, [r7, #0]
 8019c06:	2000      	movs	r0, #0
 8019c08:	f7ff ff46 	bl	8019a98 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
 8019c0c:	4603      	mov	r3, r0
  }
 8019c0e:	4618      	mov	r0, r3
 8019c10:	3708      	adds	r7, #8
 8019c12:	46bd      	mov	sp, r7
 8019c14:	bd80      	pop	{r7, pc}
	...

08019c18 <_Z19tflite_learn_6_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8019c18:	b5b0      	push	{r4, r5, r7, lr}
 8019c1a:	b0aa      	sub	sp, #168	@ 0xa8
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8019c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c22:	f44f 7144 	mov.w	r1, #784	@ 0x310
 8019c26:	2010      	movs	r0, #16
 8019c28:	4798      	blx	r3
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	4aa7      	ldr	r2, [pc, #668]	@ (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019c2e:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8019c30:	4ba6      	ldr	r3, [pc, #664]	@ (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d104      	bne.n	8019c42 <_Z19tflite_learn_6_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 8019c38:	48a5      	ldr	r0, [pc, #660]	@ (8019ed0 <_Z19tflite_learn_6_initPFPvjjE+0x2b8>)
 8019c3a:	f7ef f8f7 	bl	8008e2c <_Z9ei_printfPKcz>
    return kTfLiteError;
 8019c3e:	2401      	movs	r4, #1
 8019c40:	e13f      	b.n	8019ec2 <_Z19tflite_learn_6_initPFPvjjE+0x2aa>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 8019c42:	4ba2      	ldr	r3, [pc, #648]	@ (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	4aa3      	ldr	r2, [pc, #652]	@ (8019ed4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019c48:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8019c4a:	4ba0      	ldr	r3, [pc, #640]	@ (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8019c52:	4aa1      	ldr	r2, [pc, #644]	@ (8019ed8 <_Z19tflite_learn_6_initPFPvjjE+0x2c0>)
 8019c54:	6013      	str	r3, [r2, #0]

  EonMicroContext micro_context_;
 8019c56:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	f7ff ff74 	bl	8019b48 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
 8019c60:	4a9e      	ldr	r2, [pc, #632]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c62:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8019c66:	6093      	str	r3, [r2, #8]
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 8019c68:	4b9c      	ldr	r3, [pc, #624]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c6a:	4a9d      	ldr	r2, [pc, #628]	@ (8019ee0 <_Z19tflite_learn_6_initPFPvjjE+0x2c8>)
 8019c6c:	635a      	str	r2, [r3, #52]	@ 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
 8019c6e:	4b9b      	ldr	r3, [pc, #620]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c70:	4a9c      	ldr	r2, [pc, #624]	@ (8019ee4 <_Z19tflite_learn_6_initPFPvjjE+0x2cc>)
 8019c72:	63da      	str	r2, [r3, #60]	@ 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 8019c74:	4b99      	ldr	r3, [pc, #612]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c76:	4a9c      	ldr	r2, [pc, #624]	@ (8019ee8 <_Z19tflite_learn_6_initPFPvjjE+0x2d0>)
 8019c78:	641a      	str	r2, [r3, #64]	@ 0x40
  ctx.GetTensor = &GetTensorImpl;
 8019c7a:	4b98      	ldr	r3, [pc, #608]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c7c:	4a9b      	ldr	r2, [pc, #620]	@ (8019eec <_Z19tflite_learn_6_initPFPvjjE+0x2d4>)
 8019c7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
 8019c80:	4b96      	ldr	r3, [pc, #600]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c82:	4a9b      	ldr	r2, [pc, #620]	@ (8019ef0 <_Z19tflite_learn_6_initPFPvjjE+0x2d8>)
 8019c84:	651a      	str	r2, [r3, #80]	@ 0x50
  ctx.ReportError = &MicroContextReportOpError;
 8019c86:	4b95      	ldr	r3, [pc, #596]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c88:	4a9a      	ldr	r2, [pc, #616]	@ (8019ef4 <_Z19tflite_learn_6_initPFPvjjE+0x2dc>)
 8019c8a:	611a      	str	r2, [r3, #16]

  ctx.tensors_size = 8;
 8019c8c:	4b93      	ldr	r3, [pc, #588]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c8e:	2208      	movs	r2, #8
 8019c90:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 8; ++i) {
 8019c92:	2300      	movs	r3, #0
 8019c94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8019c98:	e024      	b.n	8019ce4 <_Z19tflite_learn_6_initPFPvjjE+0xcc>
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
 8019c9a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8019c9e:	4619      	mov	r1, r3
 8019ca0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8019ca4:	f7ff fd00 	bl	80196a8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 8019ca8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8019cac:	2b02      	cmp	r3, #2
 8019cae:	d114      	bne.n	8019cda <_Z19tflite_learn_6_initPFPvjjE+0xc2>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 8019cb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019cb2:	4991      	ldr	r1, [pc, #580]	@ (8019ef8 <_Z19tflite_learn_6_initPFPvjjE+0x2e0>)
 8019cb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019cb8:	011b      	lsls	r3, r3, #4
 8019cba:	440b      	add	r3, r1
 8019cbc:	330c      	adds	r3, #12
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	4413      	add	r3, r2
 8019cc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (data_end_ptr > tensor_boundary) {
 8019cc6:	4b83      	ldr	r3, [pc, #524]	@ (8019ed4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8019cce:	429a      	cmp	r2, r3
 8019cd0:	d903      	bls.n	8019cda <_Z19tflite_learn_6_initPFPvjjE+0xc2>
        tensor_boundary = data_end_ptr;
 8019cd2:	4a80      	ldr	r2, [pc, #512]	@ (8019ed4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019cd8:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 8; ++i) {
 8019cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019cde:	3301      	adds	r3, #1
 8019ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8019ce4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019ce8:	2b07      	cmp	r3, #7
 8019cea:	d9d6      	bls.n	8019c9a <_Z19tflite_learn_6_initPFPvjjE+0x82>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
 8019cec:	4b79      	ldr	r3, [pc, #484]	@ (8019ed4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019cee:	681a      	ldr	r2, [r3, #0]
 8019cf0:	4b79      	ldr	r3, [pc, #484]	@ (8019ed8 <_Z19tflite_learn_6_initPFPvjjE+0x2c0>)
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	429a      	cmp	r2, r3
 8019cf6:	d904      	bls.n	8019d02 <_Z19tflite_learn_6_initPFPvjjE+0xea>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8019cf8:	4880      	ldr	r0, [pc, #512]	@ (8019efc <_Z19tflite_learn_6_initPFPvjjE+0x2e4>)
 8019cfa:	f7ef f897 	bl	8008e2c <_Z9ei_printfPKcz>
    return kTfLiteError;
 8019cfe:	2401      	movs	r4, #1
 8019d00:	e0da      	b.n	8019eb8 <_Z19tflite_learn_6_initPFPvjjE+0x2a0>
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 8019d02:	4c7f      	ldr	r4, [pc, #508]	@ (8019f00 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019d04:	463b      	mov	r3, r7
 8019d06:	4618      	mov	r0, r3
 8019d08:	f7fe ffd4 	bl	8018cb4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8019d0c:	4625      	mov	r5, r4
 8019d0e:	463c      	mov	r4, r7
 8019d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d18:	6823      	ldr	r3, [r4, #0]
 8019d1a:	602b      	str	r3, [r5, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 8019d1c:	4c78      	ldr	r4, [pc, #480]	@ (8019f00 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019d1e:	463b      	mov	r3, r7
 8019d20:	4618      	mov	r0, r3
 8019d22:	f7ff fc23 	bl	801956c <_ZN6tflite16Register_SOFTMAXEv>
 8019d26:	3424      	adds	r4, #36	@ 0x24
 8019d28:	463d      	mov	r5, r7
 8019d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d32:	682b      	ldr	r3, [r5, #0]
 8019d34:	6023      	str	r3, [r4, #0]

  for (size_t g = 0; g < 1; ++g) {
 8019d36:	2300      	movs	r3, #0
 8019d38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8019d3c:	e054      	b.n	8019de8 <_Z19tflite_learn_6_initPFPvjjE+0x1d0>
    current_subgraph_index = g;
 8019d3e:	4a71      	ldr	r2, [pc, #452]	@ (8019f04 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019d44:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019d46:	4a70      	ldr	r2, [pc, #448]	@ (8019f08 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019d48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019d50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8019d54:	e039      	b.n	8019dca <_Z19tflite_learn_6_initPFPvjjE+0x1b2>
      if (registrations[used_ops[i]].init) {
 8019d56:	4a6d      	ldr	r2, [pc, #436]	@ (8019f0c <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019d5c:	4413      	add	r3, r2
 8019d5e:	781b      	ldrb	r3, [r3, #0]
 8019d60:	4619      	mov	r1, r3
 8019d62:	4a67      	ldr	r2, [pc, #412]	@ (8019f00 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019d64:	460b      	mov	r3, r1
 8019d66:	00db      	lsls	r3, r3, #3
 8019d68:	440b      	add	r3, r1
 8019d6a:	009b      	lsls	r3, r3, #2
 8019d6c:	4413      	add	r3, r2
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d025      	beq.n	8019dc0 <_Z19tflite_learn_6_initPFPvjjE+0x1a8>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 8019d74:	4a65      	ldr	r2, [pc, #404]	@ (8019f0c <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019d76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019d7a:	4413      	add	r3, r2
 8019d7c:	781b      	ldrb	r3, [r3, #0]
 8019d7e:	4619      	mov	r1, r3
 8019d80:	4a5f      	ldr	r2, [pc, #380]	@ (8019f00 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019d82:	460b      	mov	r3, r1
 8019d84:	00db      	lsls	r3, r3, #3
 8019d86:	440b      	add	r3, r1
 8019d88:	009b      	lsls	r3, r3, #2
 8019d8a:	4413      	add	r3, r2
 8019d8c:	681c      	ldr	r4, [r3, #0]
 8019d8e:	4960      	ldr	r1, [pc, #384]	@ (8019f10 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 8019d90:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8019d94:	4613      	mov	r3, r2
 8019d96:	009b      	lsls	r3, r3, #2
 8019d98:	4413      	add	r3, r2
 8019d9a:	00db      	lsls	r3, r3, #3
 8019d9c:	440b      	add	r3, r1
 8019d9e:	3314      	adds	r3, #20
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	2200      	movs	r2, #0
 8019da4:	4619      	mov	r1, r3
 8019da6:	484d      	ldr	r0, [pc, #308]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019da8:	47a0      	blx	r4
 8019daa:	4601      	mov	r1, r0
 8019dac:	4858      	ldr	r0, [pc, #352]	@ (8019f10 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 8019dae:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8019db2:	4613      	mov	r3, r2
 8019db4:	009b      	lsls	r3, r3, #2
 8019db6:	4413      	add	r3, r2
 8019db8:	00db      	lsls	r3, r3, #3
 8019dba:	4403      	add	r3, r0
 8019dbc:	3310      	adds	r3, #16
 8019dbe:	6019      	str	r1, [r3, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019dc4:	3301      	adds	r3, #1
 8019dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8019dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019dce:	3301      	adds	r3, #1
 8019dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8019f08 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019dd6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	d3bb      	bcc.n	8019d56 <_Z19tflite_learn_6_initPFPvjjE+0x13e>
  for (size_t g = 0; g < 1; ++g) {
 8019dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019de2:	3301      	adds	r3, #1
 8019de4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8019de8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d0a6      	beq.n	8019d3e <_Z19tflite_learn_6_initPFPvjjE+0x126>
      }
    }
  }
  current_subgraph_index = 0;
 8019df0:	4b44      	ldr	r3, [pc, #272]	@ (8019f04 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019df2:	2200      	movs	r2, #0
 8019df4:	601a      	str	r2, [r3, #0]

  for(size_t g = 0; g < 1; ++g) {
 8019df6:	2300      	movs	r3, #0
 8019df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019dfc:	e054      	b.n	8019ea8 <_Z19tflite_learn_6_initPFPvjjE+0x290>
    current_subgraph_index = g;
 8019dfe:	4a41      	ldr	r2, [pc, #260]	@ (8019f04 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019e04:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019e06:	4a40      	ldr	r2, [pc, #256]	@ (8019f08 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019e10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019e14:	e039      	b.n	8019e8a <_Z19tflite_learn_6_initPFPvjjE+0x272>
      if (registrations[used_ops[i]].prepare) {
 8019e16:	4a3d      	ldr	r2, [pc, #244]	@ (8019f0c <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019e18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019e1c:	4413      	add	r3, r2
 8019e1e:	781b      	ldrb	r3, [r3, #0]
 8019e20:	4619      	mov	r1, r3
 8019e22:	4a37      	ldr	r2, [pc, #220]	@ (8019f00 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019e24:	460b      	mov	r3, r1
 8019e26:	00db      	lsls	r3, r3, #3
 8019e28:	440b      	add	r3, r1
 8019e2a:	009b      	lsls	r3, r3, #2
 8019e2c:	4413      	add	r3, r2
 8019e2e:	3308      	adds	r3, #8
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d024      	beq.n	8019e80 <_Z19tflite_learn_6_initPFPvjjE+0x268>
        ResetTensors();
 8019e36:	f7ff fd91 	bl	801995c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 8019e3a:	4a34      	ldr	r2, [pc, #208]	@ (8019f0c <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019e3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019e40:	4413      	add	r3, r2
 8019e42:	781b      	ldrb	r3, [r3, #0]
 8019e44:	4619      	mov	r1, r3
 8019e46:	4a2e      	ldr	r2, [pc, #184]	@ (8019f00 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019e48:	460b      	mov	r3, r1
 8019e4a:	00db      	lsls	r3, r3, #3
 8019e4c:	440b      	add	r3, r1
 8019e4e:	009b      	lsls	r3, r3, #2
 8019e50:	4413      	add	r3, r2
 8019e52:	3308      	adds	r3, #8
 8019e54:	681c      	ldr	r4, [r3, #0]
 8019e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019e5a:	4613      	mov	r3, r2
 8019e5c:	009b      	lsls	r3, r3, #2
 8019e5e:	4413      	add	r3, r2
 8019e60:	00db      	lsls	r3, r3, #3
 8019e62:	4a2b      	ldr	r2, [pc, #172]	@ (8019f10 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 8019e64:	4413      	add	r3, r2
 8019e66:	4619      	mov	r1, r3
 8019e68:	481c      	ldr	r0, [pc, #112]	@ (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019e6a:	47a0      	blx	r4
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
        if (status != kTfLiteOk) {
 8019e72:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d002      	beq.n	8019e80 <_Z19tflite_learn_6_initPFPvjjE+0x268>
          return status;
 8019e7a:	f897 4093 	ldrb.w	r4, [r7, #147]	@ 0x93
 8019e7e:	e01b      	b.n	8019eb8 <_Z19tflite_learn_6_initPFPvjjE+0x2a0>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019e80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8019e84:	3301      	adds	r3, #1
 8019e86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019e8e:	3301      	adds	r3, #1
 8019e90:	4a1d      	ldr	r2, [pc, #116]	@ (8019f08 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019e9a:	429a      	cmp	r2, r3
 8019e9c:	d3bb      	bcc.n	8019e16 <_Z19tflite_learn_6_initPFPvjjE+0x1fe>
  for(size_t g = 0; g < 1; ++g) {
 8019e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019ea2:	3301      	adds	r3, #1
 8019ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d0a6      	beq.n	8019dfe <_Z19tflite_learn_6_initPFPvjjE+0x1e6>
        }
      }
    }
  }
  current_subgraph_index = 0;
 8019eb0:	4b14      	ldr	r3, [pc, #80]	@ (8019f04 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8019eb6:	2400      	movs	r4, #0
}
 8019eb8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f000 f8af 	bl	801a020 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 8019ec2:	4623      	mov	r3, r4
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	37a8      	adds	r7, #168	@ 0xa8
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bdb0      	pop	{r4, r5, r7, pc}
 8019ecc:	20005454 	.word	0x20005454
 8019ed0:	08022f6c 	.word	0x08022f6c
 8019ed4:	20005458 	.word	0x20005458
 8019ed8:	2000545c 	.word	0x2000545c
 8019edc:	20005460 	.word	0x20005460
 8019ee0:	080197b5 	.word	0x080197b5
 8019ee4:	08019899 	.word	0x08019899
 8019ee8:	08019925 	.word	0x08019925
 8019eec:	080199c5 	.word	0x080199c5
 8019ef0:	08019a99 	.word	0x08019a99
 8019ef4:	08018261 	.word	0x08018261
 8019ef8:	200050bc 	.word	0x200050bc
 8019efc:	08022f94 	.word	0x08022f94
 8019f00:	20005608 	.word	0x20005608
 8019f04:	20005650 	.word	0x20005650
 8019f08:	08029014 	.word	0x08029014
 8019f0c:	200051b4 	.word	0x200051b4
 8019f10:	2000513c 	.word	0x2000513c

08019f14 <_Z20tflite_learn_6_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b082      	sub	sp, #8
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	6078      	str	r0, [r7, #4]
 8019f1c:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(in_tensor_indices[index], tensor);
 8019f1e:	2300      	movs	r3, #0
 8019f20:	6839      	ldr	r1, [r7, #0]
 8019f22:	4618      	mov	r0, r3
 8019f24:	f7ff fbc0 	bl	80196a8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 8019f28:	2300      	movs	r3, #0
}
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	3708      	adds	r7, #8
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bd80      	pop	{r7, pc}

08019f32 <_Z21tflite_learn_6_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
 8019f32:	b580      	push	{r7, lr}
 8019f34:	b082      	sub	sp, #8
 8019f36:	af00      	add	r7, sp, #0
 8019f38:	6078      	str	r0, [r7, #4]
 8019f3a:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(out_tensor_indices[index], tensor);
 8019f3c:	2307      	movs	r3, #7
 8019f3e:	6839      	ldr	r1, [r7, #0]
 8019f40:	4618      	mov	r0, r3
 8019f42:	f7ff fbb1 	bl	80196a8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 8019f46:	2300      	movs	r3, #0
}
 8019f48:	4618      	mov	r0, r3
 8019f4a:	3708      	adds	r7, #8
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	bd80      	pop	{r7, pc}

08019f50 <_Z21tflite_learn_6_invokev>:

TfLiteStatus tflite_learn_6_invoke() {
 8019f50:	b590      	push	{r4, r7, lr}
 8019f52:	b083      	sub	sp, #12
 8019f54:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 3; ++i) {
 8019f56:	2300      	movs	r3, #0
 8019f58:	607b      	str	r3, [r7, #4]
 8019f5a:	e022      	b.n	8019fa2 <_Z21tflite_learn_6_invokev+0x52>
    ResetTensors();
 8019f5c:	f7ff fcfe 	bl	801995c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 8019f60:	4a14      	ldr	r2, [pc, #80]	@ (8019fb4 <_Z21tflite_learn_6_invokev+0x64>)
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	4413      	add	r3, r2
 8019f66:	781b      	ldrb	r3, [r3, #0]
 8019f68:	4619      	mov	r1, r3
 8019f6a:	4a13      	ldr	r2, [pc, #76]	@ (8019fb8 <_Z21tflite_learn_6_invokev+0x68>)
 8019f6c:	460b      	mov	r3, r1
 8019f6e:	00db      	lsls	r3, r3, #3
 8019f70:	440b      	add	r3, r1
 8019f72:	009b      	lsls	r3, r3, #2
 8019f74:	4413      	add	r3, r2
 8019f76:	330c      	adds	r3, #12
 8019f78:	681c      	ldr	r4, [r3, #0]
 8019f7a:	687a      	ldr	r2, [r7, #4]
 8019f7c:	4613      	mov	r3, r2
 8019f7e:	009b      	lsls	r3, r3, #2
 8019f80:	4413      	add	r3, r2
 8019f82:	00db      	lsls	r3, r3, #3
 8019f84:	4a0d      	ldr	r2, [pc, #52]	@ (8019fbc <_Z21tflite_learn_6_invokev+0x6c>)
 8019f86:	4413      	add	r3, r2
 8019f88:	4619      	mov	r1, r3
 8019f8a:	480d      	ldr	r0, [pc, #52]	@ (8019fc0 <_Z21tflite_learn_6_invokev+0x70>)
 8019f8c:	47a0      	blx	r4
 8019f8e:	4603      	mov	r3, r0
 8019f90:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8019f92:	78fb      	ldrb	r3, [r7, #3]
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d001      	beq.n	8019f9c <_Z21tflite_learn_6_invokev+0x4c>
      return status;
 8019f98:	78fb      	ldrb	r3, [r7, #3]
 8019f9a:	e006      	b.n	8019faa <_Z21tflite_learn_6_invokev+0x5a>
  for (size_t i = 0; i < 3; ++i) {
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	3301      	adds	r3, #1
 8019fa0:	607b      	str	r3, [r7, #4]
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	2b02      	cmp	r3, #2
 8019fa6:	d9d9      	bls.n	8019f5c <_Z21tflite_learn_6_invokev+0xc>
    }
  }
  return kTfLiteOk;
 8019fa8:	2300      	movs	r3, #0
}
 8019faa:	4618      	mov	r0, r3
 8019fac:	370c      	adds	r7, #12
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd90      	pop	{r4, r7, pc}
 8019fb2:	bf00      	nop
 8019fb4:	200051b4 	.word	0x200051b4
 8019fb8:	20005608 	.word	0x20005608
 8019fbc:	2000513c 	.word	0x2000513c
 8019fc0:	20005460 	.word	0x20005460

08019fc4 <_Z20tflite_learn_6_resetPFvPvE>:

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b084      	sub	sp, #16
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8019fcc:	4b10      	ldr	r3, [pc, #64]	@ (801a010 <_Z20tflite_learn_6_resetPFvPvE+0x4c>)
 8019fce:	681a      	ldr	r2, [r3, #0]
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	4610      	mov	r0, r2
 8019fd4:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 8019fd6:	4b0f      	ldr	r3, [pc, #60]	@ (801a014 <_Z20tflite_learn_6_resetPFvPvE+0x50>)
 8019fd8:	2200      	movs	r2, #0
 8019fda:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8019fdc:	2300      	movs	r3, #0
 8019fde:	60fb      	str	r3, [r7, #12]
 8019fe0:	e009      	b.n	8019ff6 <_Z20tflite_learn_6_resetPFvPvE+0x32>
    ei_free(overflow_buffers[ix]);
 8019fe2:	4a0d      	ldr	r2, [pc, #52]	@ (801a018 <_Z20tflite_learn_6_resetPFvPvE+0x54>)
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019fea:	4618      	mov	r0, r3
 8019fec:	f7fd f9ee 	bl	80173cc <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	3301      	adds	r3, #1
 8019ff4:	60fb      	str	r3, [r7, #12]
 8019ff6:	4b09      	ldr	r3, [pc, #36]	@ (801a01c <_Z20tflite_learn_6_resetPFvPvE+0x58>)
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	68fa      	ldr	r2, [r7, #12]
 8019ffc:	429a      	cmp	r2, r3
 8019ffe:	d3f0      	bcc.n	8019fe2 <_Z20tflite_learn_6_resetPFvPvE+0x1e>
  }
  overflow_buffers_ix = 0;
 801a000:	4b06      	ldr	r3, [pc, #24]	@ (801a01c <_Z20tflite_learn_6_resetPFvPvE+0x58>)
 801a002:	2200      	movs	r2, #0
 801a004:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801a006:	2300      	movs	r3, #0
}
 801a008:	4618      	mov	r0, r3
 801a00a:	3710      	adds	r7, #16
 801a00c:	46bd      	mov	sp, r7
 801a00e:	bd80      	pop	{r7, pc}
 801a010:	20005454 	.word	0x20005454
 801a014:	200056a0 	.word	0x200056a0
 801a018:	20005654 	.word	0x20005654
 801a01c:	2000567c 	.word	0x2000567c

0801a020 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
 801a020:	b580      	push	{r7, lr}
 801a022:	b082      	sub	sp, #8
 801a024:	af00      	add	r7, sp, #0
 801a026:	6078      	str	r0, [r7, #4]
 801a028:	4a05      	ldr	r2, [pc, #20]	@ (801a040 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x20>)
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	601a      	str	r2, [r3, #0]
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	4618      	mov	r0, r3
 801a032:	f7fd ffd3 	bl	8017fdc <_ZN6tflite12MicroContextD1Ev>
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	4618      	mov	r0, r3
 801a03a:	3708      	adds	r7, #8
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	08029024 	.word	0x08029024

0801a044 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
 801a044:	b580      	push	{r7, lr}
 801a046:	b082      	sub	sp, #8
 801a048:	af00      	add	r7, sp, #0
 801a04a:	6078      	str	r0, [r7, #4]
 801a04c:	6878      	ldr	r0, [r7, #4]
 801a04e:	f7ff ffe7 	bl	801a020 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 801a052:	2118      	movs	r1, #24
 801a054:	6878      	ldr	r0, [r7, #4]
 801a056:	f000 f837 	bl	801a0c8 <_ZdlPvj>
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	4618      	mov	r0, r3
 801a05e:	3708      	adds	r7, #8
 801a060:	46bd      	mov	sp, r7
 801a062:	bd80      	pop	{r7, pc}

0801a064 <_Z41__static_initialization_and_destruction_0ii>:
}
 801a064:	b480      	push	{r7}
 801a066:	b083      	sub	sp, #12
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
 801a06c:	6039      	str	r1, [r7, #0]
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	2b01      	cmp	r3, #1
 801a072:	d117      	bne.n	801a0a4 <_Z41__static_initialization_and_destruction_0ii+0x40>
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a07a:	4293      	cmp	r3, r2
 801a07c:	d112      	bne.n	801a0a4 <_Z41__static_initialization_and_destruction_0ii+0x40>
};
 801a07e:	4b0c      	ldr	r3, [pc, #48]	@ (801a0b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	4a0c      	ldr	r2, [pc, #48]	@ (801a0b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801a084:	6053      	str	r3, [r2, #4]
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 304), (TfLiteIntArray*)&g0::tensor_dimension5, 240, },
 801a086:	4b0a      	ldr	r3, [pc, #40]	@ (801a0b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
};
 801a08e:	4a09      	ldr	r2, [pc, #36]	@ (801a0b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801a090:	6553      	str	r3, [r2, #84]	@ 0x54
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension6, 8, },
 801a092:	4b07      	ldr	r3, [pc, #28]	@ (801a0b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	3310      	adds	r3, #16
};
 801a098:	4a06      	ldr	r2, [pc, #24]	@ (801a0b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801a09a:	6653      	str	r3, [r2, #100]	@ 0x64
 801a09c:	4b04      	ldr	r3, [pc, #16]	@ (801a0b0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	4a04      	ldr	r2, [pc, #16]	@ (801a0b4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801a0a2:	6753      	str	r3, [r2, #116]	@ 0x74
}
 801a0a4:	bf00      	nop
 801a0a6:	370c      	adds	r7, #12
 801a0a8:	46bd      	mov	sp, r7
 801a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ae:	4770      	bx	lr
 801a0b0:	20005454 	.word	0x20005454
 801a0b4:	200050bc 	.word	0x200050bc

0801a0b8 <_GLOBAL__sub_I__Z19tflite_learn_6_initPFPvjjE>:
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	af00      	add	r7, sp, #0
 801a0bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a0c0:	2001      	movs	r0, #1
 801a0c2:	f7ff ffcf 	bl	801a064 <_Z41__static_initialization_and_destruction_0ii>
 801a0c6:	bd80      	pop	{r7, pc}

0801a0c8 <_ZdlPvj>:
 801a0c8:	f000 b81d 	b.w	801a106 <_ZdlPv>

0801a0cc <_ZdaPv>:
 801a0cc:	f000 b81b 	b.w	801a106 <_ZdlPv>

0801a0d0 <_ZdaPvj>:
 801a0d0:	f7ff bffc 	b.w	801a0cc <_ZdaPv>

0801a0d4 <_Znwj>:
 801a0d4:	2801      	cmp	r0, #1
 801a0d6:	bf38      	it	cc
 801a0d8:	2001      	movcc	r0, #1
 801a0da:	b510      	push	{r4, lr}
 801a0dc:	4604      	mov	r4, r0
 801a0de:	4620      	mov	r0, r4
 801a0e0:	f003 fb12 	bl	801d708 <malloc>
 801a0e4:	b100      	cbz	r0, 801a0e8 <_Znwj+0x14>
 801a0e6:	bd10      	pop	{r4, pc}
 801a0e8:	f000 f810 	bl	801a10c <_ZSt15get_new_handlerv>
 801a0ec:	b908      	cbnz	r0, 801a0f2 <_Znwj+0x1e>
 801a0ee:	f003 fac5 	bl	801d67c <abort>
 801a0f2:	4780      	blx	r0
 801a0f4:	e7f3      	b.n	801a0de <_Znwj+0xa>

0801a0f6 <_Znaj>:
 801a0f6:	f7ff bfed 	b.w	801a0d4 <_Znwj>

0801a0fa <_ZSt20__throw_length_errorPKc>:
 801a0fa:	b508      	push	{r3, lr}
 801a0fc:	f003 fabe 	bl	801d67c <abort>

0801a100 <_ZSt25__throw_bad_function_callv>:
 801a100:	b508      	push	{r3, lr}
 801a102:	f003 fabb 	bl	801d67c <abort>

0801a106 <_ZdlPv>:
 801a106:	f003 bb07 	b.w	801d718 <free>
	...

0801a10c <_ZSt15get_new_handlerv>:
 801a10c:	4b02      	ldr	r3, [pc, #8]	@ (801a118 <_ZSt15get_new_handlerv+0xc>)
 801a10e:	6818      	ldr	r0, [r3, #0]
 801a110:	f3bf 8f5b 	dmb	ish
 801a114:	4770      	bx	lr
 801a116:	bf00      	nop
 801a118:	200056a4 	.word	0x200056a4

0801a11c <pow>:
 801a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a11e:	ed2d 8b02 	vpush	{d8}
 801a122:	eeb0 8a40 	vmov.f32	s16, s0
 801a126:	eef0 8a60 	vmov.f32	s17, s1
 801a12a:	ec55 4b11 	vmov	r4, r5, d1
 801a12e:	f001 f83b 	bl	801b1a8 <__ieee754_pow>
 801a132:	4622      	mov	r2, r4
 801a134:	462b      	mov	r3, r5
 801a136:	4620      	mov	r0, r4
 801a138:	4629      	mov	r1, r5
 801a13a:	ec57 6b10 	vmov	r6, r7, d0
 801a13e:	f7e6 fd25 	bl	8000b8c <__aeabi_dcmpun>
 801a142:	2800      	cmp	r0, #0
 801a144:	d13b      	bne.n	801a1be <pow+0xa2>
 801a146:	ec51 0b18 	vmov	r0, r1, d8
 801a14a:	2200      	movs	r2, #0
 801a14c:	2300      	movs	r3, #0
 801a14e:	f7e6 fceb 	bl	8000b28 <__aeabi_dcmpeq>
 801a152:	b1b8      	cbz	r0, 801a184 <pow+0x68>
 801a154:	2200      	movs	r2, #0
 801a156:	2300      	movs	r3, #0
 801a158:	4620      	mov	r0, r4
 801a15a:	4629      	mov	r1, r5
 801a15c:	f7e6 fce4 	bl	8000b28 <__aeabi_dcmpeq>
 801a160:	2800      	cmp	r0, #0
 801a162:	d146      	bne.n	801a1f2 <pow+0xd6>
 801a164:	ec45 4b10 	vmov	d0, r4, r5
 801a168:	f000 faaa 	bl	801a6c0 <finite>
 801a16c:	b338      	cbz	r0, 801a1be <pow+0xa2>
 801a16e:	2200      	movs	r2, #0
 801a170:	2300      	movs	r3, #0
 801a172:	4620      	mov	r0, r4
 801a174:	4629      	mov	r1, r5
 801a176:	f7e6 fce1 	bl	8000b3c <__aeabi_dcmplt>
 801a17a:	b300      	cbz	r0, 801a1be <pow+0xa2>
 801a17c:	f004 fbe6 	bl	801e94c <__errno>
 801a180:	2322      	movs	r3, #34	@ 0x22
 801a182:	e01b      	b.n	801a1bc <pow+0xa0>
 801a184:	ec47 6b10 	vmov	d0, r6, r7
 801a188:	f000 fa9a 	bl	801a6c0 <finite>
 801a18c:	b9e0      	cbnz	r0, 801a1c8 <pow+0xac>
 801a18e:	eeb0 0a48 	vmov.f32	s0, s16
 801a192:	eef0 0a68 	vmov.f32	s1, s17
 801a196:	f000 fa93 	bl	801a6c0 <finite>
 801a19a:	b1a8      	cbz	r0, 801a1c8 <pow+0xac>
 801a19c:	ec45 4b10 	vmov	d0, r4, r5
 801a1a0:	f000 fa8e 	bl	801a6c0 <finite>
 801a1a4:	b180      	cbz	r0, 801a1c8 <pow+0xac>
 801a1a6:	4632      	mov	r2, r6
 801a1a8:	463b      	mov	r3, r7
 801a1aa:	4630      	mov	r0, r6
 801a1ac:	4639      	mov	r1, r7
 801a1ae:	f7e6 fced 	bl	8000b8c <__aeabi_dcmpun>
 801a1b2:	2800      	cmp	r0, #0
 801a1b4:	d0e2      	beq.n	801a17c <pow+0x60>
 801a1b6:	f004 fbc9 	bl	801e94c <__errno>
 801a1ba:	2321      	movs	r3, #33	@ 0x21
 801a1bc:	6003      	str	r3, [r0, #0]
 801a1be:	ecbd 8b02 	vpop	{d8}
 801a1c2:	ec47 6b10 	vmov	d0, r6, r7
 801a1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	4630      	mov	r0, r6
 801a1ce:	4639      	mov	r1, r7
 801a1d0:	f7e6 fcaa 	bl	8000b28 <__aeabi_dcmpeq>
 801a1d4:	2800      	cmp	r0, #0
 801a1d6:	d0f2      	beq.n	801a1be <pow+0xa2>
 801a1d8:	eeb0 0a48 	vmov.f32	s0, s16
 801a1dc:	eef0 0a68 	vmov.f32	s1, s17
 801a1e0:	f000 fa6e 	bl	801a6c0 <finite>
 801a1e4:	2800      	cmp	r0, #0
 801a1e6:	d0ea      	beq.n	801a1be <pow+0xa2>
 801a1e8:	ec45 4b10 	vmov	d0, r4, r5
 801a1ec:	f000 fa68 	bl	801a6c0 <finite>
 801a1f0:	e7c3      	b.n	801a17a <pow+0x5e>
 801a1f2:	4f01      	ldr	r7, [pc, #4]	@ (801a1f8 <pow+0xdc>)
 801a1f4:	2600      	movs	r6, #0
 801a1f6:	e7e2      	b.n	801a1be <pow+0xa2>
 801a1f8:	3ff00000 	.word	0x3ff00000

0801a1fc <sqrt>:
 801a1fc:	b538      	push	{r3, r4, r5, lr}
 801a1fe:	ed2d 8b02 	vpush	{d8}
 801a202:	ec55 4b10 	vmov	r4, r5, d0
 801a206:	f000 faa5 	bl	801a754 <__ieee754_sqrt>
 801a20a:	4622      	mov	r2, r4
 801a20c:	462b      	mov	r3, r5
 801a20e:	4620      	mov	r0, r4
 801a210:	4629      	mov	r1, r5
 801a212:	eeb0 8a40 	vmov.f32	s16, s0
 801a216:	eef0 8a60 	vmov.f32	s17, s1
 801a21a:	f7e6 fcb7 	bl	8000b8c <__aeabi_dcmpun>
 801a21e:	b990      	cbnz	r0, 801a246 <sqrt+0x4a>
 801a220:	2200      	movs	r2, #0
 801a222:	2300      	movs	r3, #0
 801a224:	4620      	mov	r0, r4
 801a226:	4629      	mov	r1, r5
 801a228:	f7e6 fc88 	bl	8000b3c <__aeabi_dcmplt>
 801a22c:	b158      	cbz	r0, 801a246 <sqrt+0x4a>
 801a22e:	f004 fb8d 	bl	801e94c <__errno>
 801a232:	2321      	movs	r3, #33	@ 0x21
 801a234:	6003      	str	r3, [r0, #0]
 801a236:	2200      	movs	r2, #0
 801a238:	2300      	movs	r3, #0
 801a23a:	4610      	mov	r0, r2
 801a23c:	4619      	mov	r1, r3
 801a23e:	f7e6 fb35 	bl	80008ac <__aeabi_ddiv>
 801a242:	ec41 0b18 	vmov	d8, r0, r1
 801a246:	eeb0 0a48 	vmov.f32	s0, s16
 801a24a:	eef0 0a68 	vmov.f32	s1, s17
 801a24e:	ecbd 8b02 	vpop	{d8}
 801a252:	bd38      	pop	{r3, r4, r5, pc}
 801a254:	0000      	movs	r0, r0
	...

0801a258 <cos>:
 801a258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a25a:	ec53 2b10 	vmov	r2, r3, d0
 801a25e:	4826      	ldr	r0, [pc, #152]	@ (801a2f8 <cos+0xa0>)
 801a260:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a264:	4281      	cmp	r1, r0
 801a266:	d806      	bhi.n	801a276 <cos+0x1e>
 801a268:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801a2f0 <cos+0x98>
 801a26c:	b005      	add	sp, #20
 801a26e:	f85d eb04 	ldr.w	lr, [sp], #4
 801a272:	f000 bc11 	b.w	801aa98 <__kernel_cos>
 801a276:	4821      	ldr	r0, [pc, #132]	@ (801a2fc <cos+0xa4>)
 801a278:	4281      	cmp	r1, r0
 801a27a:	d908      	bls.n	801a28e <cos+0x36>
 801a27c:	4610      	mov	r0, r2
 801a27e:	4619      	mov	r1, r3
 801a280:	f7e6 f832 	bl	80002e8 <__aeabi_dsub>
 801a284:	ec41 0b10 	vmov	d0, r0, r1
 801a288:	b005      	add	sp, #20
 801a28a:	f85d fb04 	ldr.w	pc, [sp], #4
 801a28e:	4668      	mov	r0, sp
 801a290:	f001 fcce 	bl	801bc30 <__ieee754_rem_pio2>
 801a294:	f000 0003 	and.w	r0, r0, #3
 801a298:	2801      	cmp	r0, #1
 801a29a:	d00b      	beq.n	801a2b4 <cos+0x5c>
 801a29c:	2802      	cmp	r0, #2
 801a29e:	d015      	beq.n	801a2cc <cos+0x74>
 801a2a0:	b9d8      	cbnz	r0, 801a2da <cos+0x82>
 801a2a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2a6:	ed9d 0b00 	vldr	d0, [sp]
 801a2aa:	f000 fbf5 	bl	801aa98 <__kernel_cos>
 801a2ae:	ec51 0b10 	vmov	r0, r1, d0
 801a2b2:	e7e7      	b.n	801a284 <cos+0x2c>
 801a2b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2b8:	ed9d 0b00 	vldr	d0, [sp]
 801a2bc:	f000 fcb4 	bl	801ac28 <__kernel_sin>
 801a2c0:	ec53 2b10 	vmov	r2, r3, d0
 801a2c4:	4610      	mov	r0, r2
 801a2c6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801a2ca:	e7db      	b.n	801a284 <cos+0x2c>
 801a2cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2d0:	ed9d 0b00 	vldr	d0, [sp]
 801a2d4:	f000 fbe0 	bl	801aa98 <__kernel_cos>
 801a2d8:	e7f2      	b.n	801a2c0 <cos+0x68>
 801a2da:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2de:	ed9d 0b00 	vldr	d0, [sp]
 801a2e2:	2001      	movs	r0, #1
 801a2e4:	f000 fca0 	bl	801ac28 <__kernel_sin>
 801a2e8:	e7e1      	b.n	801a2ae <cos+0x56>
 801a2ea:	bf00      	nop
 801a2ec:	f3af 8000 	nop.w
	...
 801a2f8:	3fe921fb 	.word	0x3fe921fb
 801a2fc:	7fefffff 	.word	0x7fefffff

0801a300 <frexp>:
 801a300:	b570      	push	{r4, r5, r6, lr}
 801a302:	2100      	movs	r1, #0
 801a304:	ec55 4b10 	vmov	r4, r5, d0
 801a308:	6001      	str	r1, [r0, #0]
 801a30a:	4915      	ldr	r1, [pc, #84]	@ (801a360 <frexp+0x60>)
 801a30c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801a310:	428a      	cmp	r2, r1
 801a312:	4606      	mov	r6, r0
 801a314:	462b      	mov	r3, r5
 801a316:	d820      	bhi.n	801a35a <frexp+0x5a>
 801a318:	4621      	mov	r1, r4
 801a31a:	4311      	orrs	r1, r2
 801a31c:	d01d      	beq.n	801a35a <frexp+0x5a>
 801a31e:	4911      	ldr	r1, [pc, #68]	@ (801a364 <frexp+0x64>)
 801a320:	4029      	ands	r1, r5
 801a322:	b961      	cbnz	r1, 801a33e <frexp+0x3e>
 801a324:	4b10      	ldr	r3, [pc, #64]	@ (801a368 <frexp+0x68>)
 801a326:	2200      	movs	r2, #0
 801a328:	4620      	mov	r0, r4
 801a32a:	4629      	mov	r1, r5
 801a32c:	f7e6 f994 	bl	8000658 <__aeabi_dmul>
 801a330:	460b      	mov	r3, r1
 801a332:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801a336:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 801a33a:	4604      	mov	r4, r0
 801a33c:	6031      	str	r1, [r6, #0]
 801a33e:	6831      	ldr	r1, [r6, #0]
 801a340:	1512      	asrs	r2, r2, #20
 801a342:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a346:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 801a34a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801a34e:	4411      	add	r1, r2
 801a350:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801a354:	6031      	str	r1, [r6, #0]
 801a356:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801a35a:	ec45 4b10 	vmov	d0, r4, r5
 801a35e:	bd70      	pop	{r4, r5, r6, pc}
 801a360:	7fefffff 	.word	0x7fefffff
 801a364:	7ff00000 	.word	0x7ff00000
 801a368:	43500000 	.word	0x43500000
 801a36c:	00000000 	.word	0x00000000

0801a370 <sin>:
 801a370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a372:	ec53 2b10 	vmov	r2, r3, d0
 801a376:	4826      	ldr	r0, [pc, #152]	@ (801a410 <sin+0xa0>)
 801a378:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a37c:	4281      	cmp	r1, r0
 801a37e:	d807      	bhi.n	801a390 <sin+0x20>
 801a380:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801a408 <sin+0x98>
 801a384:	2000      	movs	r0, #0
 801a386:	b005      	add	sp, #20
 801a388:	f85d eb04 	ldr.w	lr, [sp], #4
 801a38c:	f000 bc4c 	b.w	801ac28 <__kernel_sin>
 801a390:	4820      	ldr	r0, [pc, #128]	@ (801a414 <sin+0xa4>)
 801a392:	4281      	cmp	r1, r0
 801a394:	d908      	bls.n	801a3a8 <sin+0x38>
 801a396:	4610      	mov	r0, r2
 801a398:	4619      	mov	r1, r3
 801a39a:	f7e5 ffa5 	bl	80002e8 <__aeabi_dsub>
 801a39e:	ec41 0b10 	vmov	d0, r0, r1
 801a3a2:	b005      	add	sp, #20
 801a3a4:	f85d fb04 	ldr.w	pc, [sp], #4
 801a3a8:	4668      	mov	r0, sp
 801a3aa:	f001 fc41 	bl	801bc30 <__ieee754_rem_pio2>
 801a3ae:	f000 0003 	and.w	r0, r0, #3
 801a3b2:	2801      	cmp	r0, #1
 801a3b4:	d00c      	beq.n	801a3d0 <sin+0x60>
 801a3b6:	2802      	cmp	r0, #2
 801a3b8:	d011      	beq.n	801a3de <sin+0x6e>
 801a3ba:	b9e8      	cbnz	r0, 801a3f8 <sin+0x88>
 801a3bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a3c0:	ed9d 0b00 	vldr	d0, [sp]
 801a3c4:	2001      	movs	r0, #1
 801a3c6:	f000 fc2f 	bl	801ac28 <__kernel_sin>
 801a3ca:	ec51 0b10 	vmov	r0, r1, d0
 801a3ce:	e7e6      	b.n	801a39e <sin+0x2e>
 801a3d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a3d4:	ed9d 0b00 	vldr	d0, [sp]
 801a3d8:	f000 fb5e 	bl	801aa98 <__kernel_cos>
 801a3dc:	e7f5      	b.n	801a3ca <sin+0x5a>
 801a3de:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a3e2:	ed9d 0b00 	vldr	d0, [sp]
 801a3e6:	2001      	movs	r0, #1
 801a3e8:	f000 fc1e 	bl	801ac28 <__kernel_sin>
 801a3ec:	ec53 2b10 	vmov	r2, r3, d0
 801a3f0:	4610      	mov	r0, r2
 801a3f2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801a3f6:	e7d2      	b.n	801a39e <sin+0x2e>
 801a3f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a3fc:	ed9d 0b00 	vldr	d0, [sp]
 801a400:	f000 fb4a 	bl	801aa98 <__kernel_cos>
 801a404:	e7f2      	b.n	801a3ec <sin+0x7c>
 801a406:	bf00      	nop
	...
 801a410:	3fe921fb 	.word	0x3fe921fb
 801a414:	7fefffff 	.word	0x7fefffff

0801a418 <tan>:
 801a418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a41a:	ec53 2b10 	vmov	r2, r3, d0
 801a41e:	4816      	ldr	r0, [pc, #88]	@ (801a478 <tan+0x60>)
 801a420:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a424:	4281      	cmp	r1, r0
 801a426:	d807      	bhi.n	801a438 <tan+0x20>
 801a428:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 801a470 <tan+0x58>
 801a42c:	2001      	movs	r0, #1
 801a42e:	b005      	add	sp, #20
 801a430:	f85d eb04 	ldr.w	lr, [sp], #4
 801a434:	f000 bcb4 	b.w	801ada0 <__kernel_tan>
 801a438:	4810      	ldr	r0, [pc, #64]	@ (801a47c <tan+0x64>)
 801a43a:	4281      	cmp	r1, r0
 801a43c:	d908      	bls.n	801a450 <tan+0x38>
 801a43e:	4610      	mov	r0, r2
 801a440:	4619      	mov	r1, r3
 801a442:	f7e5 ff51 	bl	80002e8 <__aeabi_dsub>
 801a446:	ec41 0b10 	vmov	d0, r0, r1
 801a44a:	b005      	add	sp, #20
 801a44c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a450:	4668      	mov	r0, sp
 801a452:	f001 fbed 	bl	801bc30 <__ieee754_rem_pio2>
 801a456:	0040      	lsls	r0, r0, #1
 801a458:	f000 0002 	and.w	r0, r0, #2
 801a45c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a460:	ed9d 0b00 	vldr	d0, [sp]
 801a464:	f1c0 0001 	rsb	r0, r0, #1
 801a468:	f000 fc9a 	bl	801ada0 <__kernel_tan>
 801a46c:	e7ed      	b.n	801a44a <tan+0x32>
 801a46e:	bf00      	nop
	...
 801a478:	3fe921fb 	.word	0x3fe921fb
 801a47c:	7fefffff 	.word	0x7fefffff

0801a480 <expf>:
 801a480:	b508      	push	{r3, lr}
 801a482:	ed2d 8b02 	vpush	{d8}
 801a486:	eef0 8a40 	vmov.f32	s17, s0
 801a48a:	f001 fe75 	bl	801c178 <__ieee754_expf>
 801a48e:	eeb0 8a40 	vmov.f32	s16, s0
 801a492:	eeb0 0a68 	vmov.f32	s0, s17
 801a496:	f000 f927 	bl	801a6e8 <finitef>
 801a49a:	b160      	cbz	r0, 801a4b6 <expf+0x36>
 801a49c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801a4dc <expf+0x5c>
 801a4a0:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a8:	dd0a      	ble.n	801a4c0 <expf+0x40>
 801a4aa:	f004 fa4f 	bl	801e94c <__errno>
 801a4ae:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801a4e0 <expf+0x60>
 801a4b2:	2322      	movs	r3, #34	@ 0x22
 801a4b4:	6003      	str	r3, [r0, #0]
 801a4b6:	eeb0 0a48 	vmov.f32	s0, s16
 801a4ba:	ecbd 8b02 	vpop	{d8}
 801a4be:	bd08      	pop	{r3, pc}
 801a4c0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801a4e4 <expf+0x64>
 801a4c4:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4cc:	d5f3      	bpl.n	801a4b6 <expf+0x36>
 801a4ce:	f004 fa3d 	bl	801e94c <__errno>
 801a4d2:	2322      	movs	r3, #34	@ 0x22
 801a4d4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801a4e8 <expf+0x68>
 801a4d8:	6003      	str	r3, [r0, #0]
 801a4da:	e7ec      	b.n	801a4b6 <expf+0x36>
 801a4dc:	42b17217 	.word	0x42b17217
 801a4e0:	7f800000 	.word	0x7f800000
 801a4e4:	c2cff1b5 	.word	0xc2cff1b5
 801a4e8:	00000000 	.word	0x00000000

0801a4ec <logf>:
 801a4ec:	b508      	push	{r3, lr}
 801a4ee:	ed2d 8b02 	vpush	{d8}
 801a4f2:	eeb0 8a40 	vmov.f32	s16, s0
 801a4f6:	f001 ff0d 	bl	801c314 <__ieee754_logf>
 801a4fa:	eeb4 8a48 	vcmp.f32	s16, s16
 801a4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a502:	d60f      	bvs.n	801a524 <logf+0x38>
 801a504:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a50c:	dc0a      	bgt.n	801a524 <logf+0x38>
 801a50e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a516:	d108      	bne.n	801a52a <logf+0x3e>
 801a518:	f004 fa18 	bl	801e94c <__errno>
 801a51c:	2322      	movs	r3, #34	@ 0x22
 801a51e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801a540 <logf+0x54>
 801a522:	6003      	str	r3, [r0, #0]
 801a524:	ecbd 8b02 	vpop	{d8}
 801a528:	bd08      	pop	{r3, pc}
 801a52a:	f004 fa0f 	bl	801e94c <__errno>
 801a52e:	ecbd 8b02 	vpop	{d8}
 801a532:	2321      	movs	r3, #33	@ 0x21
 801a534:	6003      	str	r3, [r0, #0]
 801a536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a53a:	4802      	ldr	r0, [pc, #8]	@ (801a544 <logf+0x58>)
 801a53c:	f000 b8de 	b.w	801a6fc <nanf>
 801a540:	ff800000 	.word	0xff800000
 801a544:	0802967b 	.word	0x0802967b

0801a548 <log10f>:
 801a548:	b508      	push	{r3, lr}
 801a54a:	ed2d 8b02 	vpush	{d8}
 801a54e:	eeb0 8a40 	vmov.f32	s16, s0
 801a552:	f001 ffd1 	bl	801c4f8 <__ieee754_log10f>
 801a556:	eeb4 8a48 	vcmp.f32	s16, s16
 801a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a55e:	d60f      	bvs.n	801a580 <log10f+0x38>
 801a560:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a568:	d80a      	bhi.n	801a580 <log10f+0x38>
 801a56a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a572:	d108      	bne.n	801a586 <log10f+0x3e>
 801a574:	f004 f9ea 	bl	801e94c <__errno>
 801a578:	2322      	movs	r3, #34	@ 0x22
 801a57a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801a59c <log10f+0x54>
 801a57e:	6003      	str	r3, [r0, #0]
 801a580:	ecbd 8b02 	vpop	{d8}
 801a584:	bd08      	pop	{r3, pc}
 801a586:	f004 f9e1 	bl	801e94c <__errno>
 801a58a:	ecbd 8b02 	vpop	{d8}
 801a58e:	2321      	movs	r3, #33	@ 0x21
 801a590:	6003      	str	r3, [r0, #0]
 801a592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a596:	4802      	ldr	r0, [pc, #8]	@ (801a5a0 <log10f+0x58>)
 801a598:	f000 b8b0 	b.w	801a6fc <nanf>
 801a59c:	ff800000 	.word	0xff800000
 801a5a0:	0802967b 	.word	0x0802967b

0801a5a4 <sqrtf>:
 801a5a4:	b508      	push	{r3, lr}
 801a5a6:	ed2d 8b02 	vpush	{d8}
 801a5aa:	eeb0 8a40 	vmov.f32	s16, s0
 801a5ae:	f000 f9ab 	bl	801a908 <__ieee754_sqrtf>
 801a5b2:	eeb4 8a48 	vcmp.f32	s16, s16
 801a5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5ba:	d60c      	bvs.n	801a5d6 <sqrtf+0x32>
 801a5bc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801a5dc <sqrtf+0x38>
 801a5c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5c8:	d505      	bpl.n	801a5d6 <sqrtf+0x32>
 801a5ca:	f004 f9bf 	bl	801e94c <__errno>
 801a5ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a5d2:	2321      	movs	r3, #33	@ 0x21
 801a5d4:	6003      	str	r3, [r0, #0]
 801a5d6:	ecbd 8b02 	vpop	{d8}
 801a5da:	bd08      	pop	{r3, pc}
 801a5dc:	00000000 	.word	0x00000000

0801a5e0 <frexpf>:
 801a5e0:	ee10 3a10 	vmov	r3, s0
 801a5e4:	2100      	movs	r1, #0
 801a5e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a5ea:	6001      	str	r1, [r0, #0]
 801a5ec:	490f      	ldr	r1, [pc, #60]	@ (801a62c <frexpf+0x4c>)
 801a5ee:	b510      	push	{r4, lr}
 801a5f0:	1e54      	subs	r4, r2, #1
 801a5f2:	428c      	cmp	r4, r1
 801a5f4:	d218      	bcs.n	801a628 <frexpf+0x48>
 801a5f6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a5fa:	d10a      	bne.n	801a612 <frexpf+0x32>
 801a5fc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801a630 <frexpf+0x50>
 801a600:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a604:	f06f 0118 	mvn.w	r1, #24
 801a608:	ee17 3a90 	vmov	r3, s15
 801a60c:	6001      	str	r1, [r0, #0]
 801a60e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a612:	6801      	ldr	r1, [r0, #0]
 801a614:	15d2      	asrs	r2, r2, #23
 801a616:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a61a:	3a7e      	subs	r2, #126	@ 0x7e
 801a61c:	f043 537c 	orr.w	r3, r3, #1056964608	@ 0x3f000000
 801a620:	4411      	add	r1, r2
 801a622:	ee00 3a10 	vmov	s0, r3
 801a626:	6001      	str	r1, [r0, #0]
 801a628:	bd10      	pop	{r4, pc}
 801a62a:	bf00      	nop
 801a62c:	7f7fffff 	.word	0x7f7fffff
 801a630:	4c000000 	.word	0x4c000000

0801a634 <sinf>:
 801a634:	ee10 3a10 	vmov	r3, s0
 801a638:	b507      	push	{r0, r1, r2, lr}
 801a63a:	4a1f      	ldr	r2, [pc, #124]	@ (801a6b8 <sinf+0x84>)
 801a63c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a640:	4293      	cmp	r3, r2
 801a642:	d807      	bhi.n	801a654 <sinf+0x20>
 801a644:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801a6bc <sinf+0x88>
 801a648:	2000      	movs	r0, #0
 801a64a:	b003      	add	sp, #12
 801a64c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a650:	f001 bd4a 	b.w	801c0e8 <__kernel_sinf>
 801a654:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801a658:	d304      	bcc.n	801a664 <sinf+0x30>
 801a65a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801a65e:	b003      	add	sp, #12
 801a660:	f85d fb04 	ldr.w	pc, [sp], #4
 801a664:	4668      	mov	r0, sp
 801a666:	f001 ff9f 	bl	801c5a8 <__ieee754_rem_pio2f>
 801a66a:	f000 0003 	and.w	r0, r0, #3
 801a66e:	2801      	cmp	r0, #1
 801a670:	d00a      	beq.n	801a688 <sinf+0x54>
 801a672:	2802      	cmp	r0, #2
 801a674:	d00f      	beq.n	801a696 <sinf+0x62>
 801a676:	b9c0      	cbnz	r0, 801a6aa <sinf+0x76>
 801a678:	eddd 0a01 	vldr	s1, [sp, #4]
 801a67c:	ed9d 0a00 	vldr	s0, [sp]
 801a680:	2001      	movs	r0, #1
 801a682:	f001 fd31 	bl	801c0e8 <__kernel_sinf>
 801a686:	e7ea      	b.n	801a65e <sinf+0x2a>
 801a688:	eddd 0a01 	vldr	s1, [sp, #4]
 801a68c:	ed9d 0a00 	vldr	s0, [sp]
 801a690:	f001 fcd2 	bl	801c038 <__kernel_cosf>
 801a694:	e7e3      	b.n	801a65e <sinf+0x2a>
 801a696:	eddd 0a01 	vldr	s1, [sp, #4]
 801a69a:	ed9d 0a00 	vldr	s0, [sp]
 801a69e:	2001      	movs	r0, #1
 801a6a0:	f001 fd22 	bl	801c0e8 <__kernel_sinf>
 801a6a4:	eeb1 0a40 	vneg.f32	s0, s0
 801a6a8:	e7d9      	b.n	801a65e <sinf+0x2a>
 801a6aa:	eddd 0a01 	vldr	s1, [sp, #4]
 801a6ae:	ed9d 0a00 	vldr	s0, [sp]
 801a6b2:	f001 fcc1 	bl	801c038 <__kernel_cosf>
 801a6b6:	e7f5      	b.n	801a6a4 <sinf+0x70>
 801a6b8:	3f490fd8 	.word	0x3f490fd8
 801a6bc:	00000000 	.word	0x00000000

0801a6c0 <finite>:
 801a6c0:	b082      	sub	sp, #8
 801a6c2:	ed8d 0b00 	vstr	d0, [sp]
 801a6c6:	9801      	ldr	r0, [sp, #4]
 801a6c8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801a6cc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801a6d0:	0fc0      	lsrs	r0, r0, #31
 801a6d2:	b002      	add	sp, #8
 801a6d4:	4770      	bx	lr
	...

0801a6d8 <nan>:
 801a6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a6e0 <nan+0x8>
 801a6dc:	4770      	bx	lr
 801a6de:	bf00      	nop
 801a6e0:	00000000 	.word	0x00000000
 801a6e4:	7ff80000 	.word	0x7ff80000

0801a6e8 <finitef>:
 801a6e8:	ee10 3a10 	vmov	r3, s0
 801a6ec:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801a6f0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801a6f4:	bfac      	ite	ge
 801a6f6:	2000      	movge	r0, #0
 801a6f8:	2001      	movlt	r0, #1
 801a6fa:	4770      	bx	lr

0801a6fc <nanf>:
 801a6fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a704 <nanf+0x8>
 801a700:	4770      	bx	lr
 801a702:	bf00      	nop
 801a704:	7fc00000 	.word	0x7fc00000

0801a708 <with_errnof>:
 801a708:	b510      	push	{r4, lr}
 801a70a:	ed2d 8b02 	vpush	{d8}
 801a70e:	eeb0 8a40 	vmov.f32	s16, s0
 801a712:	4604      	mov	r4, r0
 801a714:	f004 f91a 	bl	801e94c <__errno>
 801a718:	eeb0 0a48 	vmov.f32	s0, s16
 801a71c:	ecbd 8b02 	vpop	{d8}
 801a720:	6004      	str	r4, [r0, #0]
 801a722:	bd10      	pop	{r4, pc}

0801a724 <xflowf>:
 801a724:	b130      	cbz	r0, 801a734 <xflowf+0x10>
 801a726:	eef1 7a40 	vneg.f32	s15, s0
 801a72a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a72e:	2022      	movs	r0, #34	@ 0x22
 801a730:	f7ff bfea 	b.w	801a708 <with_errnof>
 801a734:	eef0 7a40 	vmov.f32	s15, s0
 801a738:	e7f7      	b.n	801a72a <xflowf+0x6>
	...

0801a73c <__math_uflowf>:
 801a73c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a744 <__math_uflowf+0x8>
 801a740:	f7ff bff0 	b.w	801a724 <xflowf>
 801a744:	10000000 	.word	0x10000000

0801a748 <__math_oflowf>:
 801a748:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a750 <__math_oflowf+0x8>
 801a74c:	f7ff bfea 	b.w	801a724 <xflowf>
 801a750:	70000000 	.word	0x70000000

0801a754 <__ieee754_sqrt>:
 801a754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a758:	4a68      	ldr	r2, [pc, #416]	@ (801a8fc <__ieee754_sqrt+0x1a8>)
 801a75a:	ec55 4b10 	vmov	r4, r5, d0
 801a75e:	43aa      	bics	r2, r5
 801a760:	462b      	mov	r3, r5
 801a762:	4621      	mov	r1, r4
 801a764:	d110      	bne.n	801a788 <__ieee754_sqrt+0x34>
 801a766:	4622      	mov	r2, r4
 801a768:	4620      	mov	r0, r4
 801a76a:	4629      	mov	r1, r5
 801a76c:	f7e5 ff74 	bl	8000658 <__aeabi_dmul>
 801a770:	4602      	mov	r2, r0
 801a772:	460b      	mov	r3, r1
 801a774:	4620      	mov	r0, r4
 801a776:	4629      	mov	r1, r5
 801a778:	f7e5 fdb8 	bl	80002ec <__adddf3>
 801a77c:	4604      	mov	r4, r0
 801a77e:	460d      	mov	r5, r1
 801a780:	ec45 4b10 	vmov	d0, r4, r5
 801a784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a788:	2d00      	cmp	r5, #0
 801a78a:	dc0e      	bgt.n	801a7aa <__ieee754_sqrt+0x56>
 801a78c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801a790:	4322      	orrs	r2, r4
 801a792:	d0f5      	beq.n	801a780 <__ieee754_sqrt+0x2c>
 801a794:	b19d      	cbz	r5, 801a7be <__ieee754_sqrt+0x6a>
 801a796:	4622      	mov	r2, r4
 801a798:	4620      	mov	r0, r4
 801a79a:	4629      	mov	r1, r5
 801a79c:	f7e5 fda4 	bl	80002e8 <__aeabi_dsub>
 801a7a0:	4602      	mov	r2, r0
 801a7a2:	460b      	mov	r3, r1
 801a7a4:	f7e6 f882 	bl	80008ac <__aeabi_ddiv>
 801a7a8:	e7e8      	b.n	801a77c <__ieee754_sqrt+0x28>
 801a7aa:	152a      	asrs	r2, r5, #20
 801a7ac:	d115      	bne.n	801a7da <__ieee754_sqrt+0x86>
 801a7ae:	2000      	movs	r0, #0
 801a7b0:	e009      	b.n	801a7c6 <__ieee754_sqrt+0x72>
 801a7b2:	0acb      	lsrs	r3, r1, #11
 801a7b4:	3a15      	subs	r2, #21
 801a7b6:	0549      	lsls	r1, r1, #21
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d0fa      	beq.n	801a7b2 <__ieee754_sqrt+0x5e>
 801a7bc:	e7f7      	b.n	801a7ae <__ieee754_sqrt+0x5a>
 801a7be:	462a      	mov	r2, r5
 801a7c0:	e7fa      	b.n	801a7b8 <__ieee754_sqrt+0x64>
 801a7c2:	005b      	lsls	r3, r3, #1
 801a7c4:	3001      	adds	r0, #1
 801a7c6:	02dc      	lsls	r4, r3, #11
 801a7c8:	d5fb      	bpl.n	801a7c2 <__ieee754_sqrt+0x6e>
 801a7ca:	1e44      	subs	r4, r0, #1
 801a7cc:	1b12      	subs	r2, r2, r4
 801a7ce:	f1c0 0420 	rsb	r4, r0, #32
 801a7d2:	fa21 f404 	lsr.w	r4, r1, r4
 801a7d6:	4323      	orrs	r3, r4
 801a7d8:	4081      	lsls	r1, r0
 801a7da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a7de:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801a7e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a7e6:	07d2      	lsls	r2, r2, #31
 801a7e8:	bf5c      	itt	pl
 801a7ea:	005b      	lslpl	r3, r3, #1
 801a7ec:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801a7f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a7f4:	bf58      	it	pl
 801a7f6:	0049      	lslpl	r1, r1, #1
 801a7f8:	2600      	movs	r6, #0
 801a7fa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801a7fe:	106d      	asrs	r5, r5, #1
 801a800:	0049      	lsls	r1, r1, #1
 801a802:	2016      	movs	r0, #22
 801a804:	4632      	mov	r2, r6
 801a806:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801a80a:	1917      	adds	r7, r2, r4
 801a80c:	429f      	cmp	r7, r3
 801a80e:	bfde      	ittt	le
 801a810:	193a      	addle	r2, r7, r4
 801a812:	1bdb      	suble	r3, r3, r7
 801a814:	1936      	addle	r6, r6, r4
 801a816:	0fcf      	lsrs	r7, r1, #31
 801a818:	3801      	subs	r0, #1
 801a81a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a81e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a822:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a826:	d1f0      	bne.n	801a80a <__ieee754_sqrt+0xb6>
 801a828:	4604      	mov	r4, r0
 801a82a:	2720      	movs	r7, #32
 801a82c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801a830:	429a      	cmp	r2, r3
 801a832:	eb00 0e0c 	add.w	lr, r0, ip
 801a836:	db02      	blt.n	801a83e <__ieee754_sqrt+0xea>
 801a838:	d113      	bne.n	801a862 <__ieee754_sqrt+0x10e>
 801a83a:	458e      	cmp	lr, r1
 801a83c:	d811      	bhi.n	801a862 <__ieee754_sqrt+0x10e>
 801a83e:	f1be 0f00 	cmp.w	lr, #0
 801a842:	eb0e 000c 	add.w	r0, lr, ip
 801a846:	da42      	bge.n	801a8ce <__ieee754_sqrt+0x17a>
 801a848:	2800      	cmp	r0, #0
 801a84a:	db40      	blt.n	801a8ce <__ieee754_sqrt+0x17a>
 801a84c:	f102 0801 	add.w	r8, r2, #1
 801a850:	1a9b      	subs	r3, r3, r2
 801a852:	458e      	cmp	lr, r1
 801a854:	bf88      	it	hi
 801a856:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801a85a:	eba1 010e 	sub.w	r1, r1, lr
 801a85e:	4464      	add	r4, ip
 801a860:	4642      	mov	r2, r8
 801a862:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801a866:	3f01      	subs	r7, #1
 801a868:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801a86c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a870:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801a874:	d1dc      	bne.n	801a830 <__ieee754_sqrt+0xdc>
 801a876:	4319      	orrs	r1, r3
 801a878:	d01b      	beq.n	801a8b2 <__ieee754_sqrt+0x15e>
 801a87a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801a900 <__ieee754_sqrt+0x1ac>
 801a87e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801a904 <__ieee754_sqrt+0x1b0>
 801a882:	e9da 0100 	ldrd	r0, r1, [sl]
 801a886:	e9db 2300 	ldrd	r2, r3, [fp]
 801a88a:	f7e5 fd2d 	bl	80002e8 <__aeabi_dsub>
 801a88e:	e9da 8900 	ldrd	r8, r9, [sl]
 801a892:	4602      	mov	r2, r0
 801a894:	460b      	mov	r3, r1
 801a896:	4640      	mov	r0, r8
 801a898:	4649      	mov	r1, r9
 801a89a:	f7e6 f959 	bl	8000b50 <__aeabi_dcmple>
 801a89e:	b140      	cbz	r0, 801a8b2 <__ieee754_sqrt+0x15e>
 801a8a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 801a8a4:	e9da 0100 	ldrd	r0, r1, [sl]
 801a8a8:	e9db 2300 	ldrd	r2, r3, [fp]
 801a8ac:	d111      	bne.n	801a8d2 <__ieee754_sqrt+0x17e>
 801a8ae:	3601      	adds	r6, #1
 801a8b0:	463c      	mov	r4, r7
 801a8b2:	1072      	asrs	r2, r6, #1
 801a8b4:	0863      	lsrs	r3, r4, #1
 801a8b6:	07f1      	lsls	r1, r6, #31
 801a8b8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801a8bc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801a8c0:	bf48      	it	mi
 801a8c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801a8c6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	e756      	b.n	801a77c <__ieee754_sqrt+0x28>
 801a8ce:	4690      	mov	r8, r2
 801a8d0:	e7be      	b.n	801a850 <__ieee754_sqrt+0xfc>
 801a8d2:	f7e5 fd0b 	bl	80002ec <__adddf3>
 801a8d6:	e9da 8900 	ldrd	r8, r9, [sl]
 801a8da:	4602      	mov	r2, r0
 801a8dc:	460b      	mov	r3, r1
 801a8de:	4640      	mov	r0, r8
 801a8e0:	4649      	mov	r1, r9
 801a8e2:	f7e6 f92b 	bl	8000b3c <__aeabi_dcmplt>
 801a8e6:	b120      	cbz	r0, 801a8f2 <__ieee754_sqrt+0x19e>
 801a8e8:	1ca0      	adds	r0, r4, #2
 801a8ea:	bf08      	it	eq
 801a8ec:	3601      	addeq	r6, #1
 801a8ee:	3402      	adds	r4, #2
 801a8f0:	e7df      	b.n	801a8b2 <__ieee754_sqrt+0x15e>
 801a8f2:	1c63      	adds	r3, r4, #1
 801a8f4:	f023 0401 	bic.w	r4, r3, #1
 801a8f8:	e7db      	b.n	801a8b2 <__ieee754_sqrt+0x15e>
 801a8fa:	bf00      	nop
 801a8fc:	7ff00000 	.word	0x7ff00000
 801a900:	200051c0 	.word	0x200051c0
 801a904:	200051b8 	.word	0x200051b8

0801a908 <__ieee754_sqrtf>:
 801a908:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a90c:	4770      	bx	lr
	...

0801a910 <floor>:
 801a910:	ec51 0b10 	vmov	r0, r1, d0
 801a914:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a91c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801a920:	2e13      	cmp	r6, #19
 801a922:	460c      	mov	r4, r1
 801a924:	4605      	mov	r5, r0
 801a926:	4680      	mov	r8, r0
 801a928:	dc34      	bgt.n	801a994 <floor+0x84>
 801a92a:	2e00      	cmp	r6, #0
 801a92c:	da17      	bge.n	801a95e <floor+0x4e>
 801a92e:	a332      	add	r3, pc, #200	@ (adr r3, 801a9f8 <floor+0xe8>)
 801a930:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a934:	f7e5 fcda 	bl	80002ec <__adddf3>
 801a938:	2200      	movs	r2, #0
 801a93a:	2300      	movs	r3, #0
 801a93c:	f7e6 f91c 	bl	8000b78 <__aeabi_dcmpgt>
 801a940:	b150      	cbz	r0, 801a958 <floor+0x48>
 801a942:	2c00      	cmp	r4, #0
 801a944:	da55      	bge.n	801a9f2 <floor+0xe2>
 801a946:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801a94a:	432c      	orrs	r4, r5
 801a94c:	2500      	movs	r5, #0
 801a94e:	42ac      	cmp	r4, r5
 801a950:	4c2b      	ldr	r4, [pc, #172]	@ (801aa00 <floor+0xf0>)
 801a952:	bf08      	it	eq
 801a954:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801a958:	4621      	mov	r1, r4
 801a95a:	4628      	mov	r0, r5
 801a95c:	e023      	b.n	801a9a6 <floor+0x96>
 801a95e:	4f29      	ldr	r7, [pc, #164]	@ (801aa04 <floor+0xf4>)
 801a960:	4137      	asrs	r7, r6
 801a962:	ea01 0307 	and.w	r3, r1, r7
 801a966:	4303      	orrs	r3, r0
 801a968:	d01d      	beq.n	801a9a6 <floor+0x96>
 801a96a:	a323      	add	r3, pc, #140	@ (adr r3, 801a9f8 <floor+0xe8>)
 801a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a970:	f7e5 fcbc 	bl	80002ec <__adddf3>
 801a974:	2200      	movs	r2, #0
 801a976:	2300      	movs	r3, #0
 801a978:	f7e6 f8fe 	bl	8000b78 <__aeabi_dcmpgt>
 801a97c:	2800      	cmp	r0, #0
 801a97e:	d0eb      	beq.n	801a958 <floor+0x48>
 801a980:	2c00      	cmp	r4, #0
 801a982:	bfbe      	ittt	lt
 801a984:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801a988:	4133      	asrlt	r3, r6
 801a98a:	18e4      	addlt	r4, r4, r3
 801a98c:	ea24 0407 	bic.w	r4, r4, r7
 801a990:	2500      	movs	r5, #0
 801a992:	e7e1      	b.n	801a958 <floor+0x48>
 801a994:	2e33      	cmp	r6, #51	@ 0x33
 801a996:	dd0a      	ble.n	801a9ae <floor+0x9e>
 801a998:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a99c:	d103      	bne.n	801a9a6 <floor+0x96>
 801a99e:	4602      	mov	r2, r0
 801a9a0:	460b      	mov	r3, r1
 801a9a2:	f7e5 fca3 	bl	80002ec <__adddf3>
 801a9a6:	ec41 0b10 	vmov	d0, r0, r1
 801a9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801a9b2:	f04f 37ff 	mov.w	r7, #4294967295
 801a9b6:	40df      	lsrs	r7, r3
 801a9b8:	4207      	tst	r7, r0
 801a9ba:	d0f4      	beq.n	801a9a6 <floor+0x96>
 801a9bc:	a30e      	add	r3, pc, #56	@ (adr r3, 801a9f8 <floor+0xe8>)
 801a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9c2:	f7e5 fc93 	bl	80002ec <__adddf3>
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	f7e6 f8d5 	bl	8000b78 <__aeabi_dcmpgt>
 801a9ce:	2800      	cmp	r0, #0
 801a9d0:	d0c2      	beq.n	801a958 <floor+0x48>
 801a9d2:	2c00      	cmp	r4, #0
 801a9d4:	da0a      	bge.n	801a9ec <floor+0xdc>
 801a9d6:	2e14      	cmp	r6, #20
 801a9d8:	d101      	bne.n	801a9de <floor+0xce>
 801a9da:	3401      	adds	r4, #1
 801a9dc:	e006      	b.n	801a9ec <floor+0xdc>
 801a9de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801a9e2:	2301      	movs	r3, #1
 801a9e4:	40b3      	lsls	r3, r6
 801a9e6:	441d      	add	r5, r3
 801a9e8:	4545      	cmp	r5, r8
 801a9ea:	d3f6      	bcc.n	801a9da <floor+0xca>
 801a9ec:	ea25 0507 	bic.w	r5, r5, r7
 801a9f0:	e7b2      	b.n	801a958 <floor+0x48>
 801a9f2:	2500      	movs	r5, #0
 801a9f4:	462c      	mov	r4, r5
 801a9f6:	e7af      	b.n	801a958 <floor+0x48>
 801a9f8:	8800759c 	.word	0x8800759c
 801a9fc:	7e37e43c 	.word	0x7e37e43c
 801aa00:	bff00000 	.word	0xbff00000
 801aa04:	000fffff 	.word	0x000fffff

0801aa08 <round>:
 801aa08:	ec51 0b10 	vmov	r0, r1, d0
 801aa0c:	b570      	push	{r4, r5, r6, lr}
 801aa0e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801aa12:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 801aa16:	2a13      	cmp	r2, #19
 801aa18:	460b      	mov	r3, r1
 801aa1a:	4605      	mov	r5, r0
 801aa1c:	dc1b      	bgt.n	801aa56 <round+0x4e>
 801aa1e:	2a00      	cmp	r2, #0
 801aa20:	da0b      	bge.n	801aa3a <round+0x32>
 801aa22:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801aa26:	3201      	adds	r2, #1
 801aa28:	bf04      	itt	eq
 801aa2a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801aa2e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801aa32:	2200      	movs	r2, #0
 801aa34:	4619      	mov	r1, r3
 801aa36:	4610      	mov	r0, r2
 801aa38:	e015      	b.n	801aa66 <round+0x5e>
 801aa3a:	4c15      	ldr	r4, [pc, #84]	@ (801aa90 <round+0x88>)
 801aa3c:	4114      	asrs	r4, r2
 801aa3e:	ea04 0601 	and.w	r6, r4, r1
 801aa42:	4306      	orrs	r6, r0
 801aa44:	d00f      	beq.n	801aa66 <round+0x5e>
 801aa46:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801aa4a:	fa41 f202 	asr.w	r2, r1, r2
 801aa4e:	4413      	add	r3, r2
 801aa50:	ea23 0304 	bic.w	r3, r3, r4
 801aa54:	e7ed      	b.n	801aa32 <round+0x2a>
 801aa56:	2a33      	cmp	r2, #51	@ 0x33
 801aa58:	dd08      	ble.n	801aa6c <round+0x64>
 801aa5a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801aa5e:	d102      	bne.n	801aa66 <round+0x5e>
 801aa60:	4602      	mov	r2, r0
 801aa62:	f7e5 fc43 	bl	80002ec <__adddf3>
 801aa66:	ec41 0b10 	vmov	d0, r0, r1
 801aa6a:	bd70      	pop	{r4, r5, r6, pc}
 801aa6c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 801aa70:	f04f 34ff 	mov.w	r4, #4294967295
 801aa74:	40f4      	lsrs	r4, r6
 801aa76:	4204      	tst	r4, r0
 801aa78:	d0f5      	beq.n	801aa66 <round+0x5e>
 801aa7a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801aa7e:	2201      	movs	r2, #1
 801aa80:	408a      	lsls	r2, r1
 801aa82:	1952      	adds	r2, r2, r5
 801aa84:	bf28      	it	cs
 801aa86:	3301      	addcs	r3, #1
 801aa88:	ea22 0204 	bic.w	r2, r2, r4
 801aa8c:	e7d2      	b.n	801aa34 <round+0x2c>
 801aa8e:	bf00      	nop
 801aa90:	000fffff 	.word	0x000fffff
 801aa94:	00000000 	.word	0x00000000

0801aa98 <__kernel_cos>:
 801aa98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa9c:	ec57 6b10 	vmov	r6, r7, d0
 801aaa0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801aaa4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801aaa8:	ed8d 1b00 	vstr	d1, [sp]
 801aaac:	d206      	bcs.n	801aabc <__kernel_cos+0x24>
 801aaae:	4630      	mov	r0, r6
 801aab0:	4639      	mov	r1, r7
 801aab2:	f7e6 f881 	bl	8000bb8 <__aeabi_d2iz>
 801aab6:	2800      	cmp	r0, #0
 801aab8:	f000 8088 	beq.w	801abcc <__kernel_cos+0x134>
 801aabc:	4632      	mov	r2, r6
 801aabe:	463b      	mov	r3, r7
 801aac0:	4630      	mov	r0, r6
 801aac2:	4639      	mov	r1, r7
 801aac4:	f7e5 fdc8 	bl	8000658 <__aeabi_dmul>
 801aac8:	4b51      	ldr	r3, [pc, #324]	@ (801ac10 <__kernel_cos+0x178>)
 801aaca:	2200      	movs	r2, #0
 801aacc:	4604      	mov	r4, r0
 801aace:	460d      	mov	r5, r1
 801aad0:	f7e5 fdc2 	bl	8000658 <__aeabi_dmul>
 801aad4:	a340      	add	r3, pc, #256	@ (adr r3, 801abd8 <__kernel_cos+0x140>)
 801aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aada:	4682      	mov	sl, r0
 801aadc:	468b      	mov	fp, r1
 801aade:	4620      	mov	r0, r4
 801aae0:	4629      	mov	r1, r5
 801aae2:	f7e5 fdb9 	bl	8000658 <__aeabi_dmul>
 801aae6:	a33e      	add	r3, pc, #248	@ (adr r3, 801abe0 <__kernel_cos+0x148>)
 801aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaec:	f7e5 fbfe 	bl	80002ec <__adddf3>
 801aaf0:	4622      	mov	r2, r4
 801aaf2:	462b      	mov	r3, r5
 801aaf4:	f7e5 fdb0 	bl	8000658 <__aeabi_dmul>
 801aaf8:	a33b      	add	r3, pc, #236	@ (adr r3, 801abe8 <__kernel_cos+0x150>)
 801aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aafe:	f7e5 fbf3 	bl	80002e8 <__aeabi_dsub>
 801ab02:	4622      	mov	r2, r4
 801ab04:	462b      	mov	r3, r5
 801ab06:	f7e5 fda7 	bl	8000658 <__aeabi_dmul>
 801ab0a:	a339      	add	r3, pc, #228	@ (adr r3, 801abf0 <__kernel_cos+0x158>)
 801ab0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab10:	f7e5 fbec 	bl	80002ec <__adddf3>
 801ab14:	4622      	mov	r2, r4
 801ab16:	462b      	mov	r3, r5
 801ab18:	f7e5 fd9e 	bl	8000658 <__aeabi_dmul>
 801ab1c:	a336      	add	r3, pc, #216	@ (adr r3, 801abf8 <__kernel_cos+0x160>)
 801ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab22:	f7e5 fbe1 	bl	80002e8 <__aeabi_dsub>
 801ab26:	4622      	mov	r2, r4
 801ab28:	462b      	mov	r3, r5
 801ab2a:	f7e5 fd95 	bl	8000658 <__aeabi_dmul>
 801ab2e:	a334      	add	r3, pc, #208	@ (adr r3, 801ac00 <__kernel_cos+0x168>)
 801ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab34:	f7e5 fbda 	bl	80002ec <__adddf3>
 801ab38:	4622      	mov	r2, r4
 801ab3a:	462b      	mov	r3, r5
 801ab3c:	f7e5 fd8c 	bl	8000658 <__aeabi_dmul>
 801ab40:	4622      	mov	r2, r4
 801ab42:	462b      	mov	r3, r5
 801ab44:	f7e5 fd88 	bl	8000658 <__aeabi_dmul>
 801ab48:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ab4c:	4604      	mov	r4, r0
 801ab4e:	460d      	mov	r5, r1
 801ab50:	4630      	mov	r0, r6
 801ab52:	4639      	mov	r1, r7
 801ab54:	f7e5 fd80 	bl	8000658 <__aeabi_dmul>
 801ab58:	460b      	mov	r3, r1
 801ab5a:	4602      	mov	r2, r0
 801ab5c:	4629      	mov	r1, r5
 801ab5e:	4620      	mov	r0, r4
 801ab60:	f7e5 fbc2 	bl	80002e8 <__aeabi_dsub>
 801ab64:	4b2b      	ldr	r3, [pc, #172]	@ (801ac14 <__kernel_cos+0x17c>)
 801ab66:	4598      	cmp	r8, r3
 801ab68:	4606      	mov	r6, r0
 801ab6a:	460f      	mov	r7, r1
 801ab6c:	d810      	bhi.n	801ab90 <__kernel_cos+0xf8>
 801ab6e:	4602      	mov	r2, r0
 801ab70:	460b      	mov	r3, r1
 801ab72:	4650      	mov	r0, sl
 801ab74:	4659      	mov	r1, fp
 801ab76:	f7e5 fbb7 	bl	80002e8 <__aeabi_dsub>
 801ab7a:	460b      	mov	r3, r1
 801ab7c:	4926      	ldr	r1, [pc, #152]	@ (801ac18 <__kernel_cos+0x180>)
 801ab7e:	4602      	mov	r2, r0
 801ab80:	2000      	movs	r0, #0
 801ab82:	f7e5 fbb1 	bl	80002e8 <__aeabi_dsub>
 801ab86:	ec41 0b10 	vmov	d0, r0, r1
 801ab8a:	b003      	add	sp, #12
 801ab8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab90:	4b22      	ldr	r3, [pc, #136]	@ (801ac1c <__kernel_cos+0x184>)
 801ab92:	4921      	ldr	r1, [pc, #132]	@ (801ac18 <__kernel_cos+0x180>)
 801ab94:	4598      	cmp	r8, r3
 801ab96:	bf8c      	ite	hi
 801ab98:	4d21      	ldrhi	r5, [pc, #132]	@ (801ac20 <__kernel_cos+0x188>)
 801ab9a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801ab9e:	2400      	movs	r4, #0
 801aba0:	4622      	mov	r2, r4
 801aba2:	462b      	mov	r3, r5
 801aba4:	2000      	movs	r0, #0
 801aba6:	f7e5 fb9f 	bl	80002e8 <__aeabi_dsub>
 801abaa:	4622      	mov	r2, r4
 801abac:	4680      	mov	r8, r0
 801abae:	4689      	mov	r9, r1
 801abb0:	462b      	mov	r3, r5
 801abb2:	4650      	mov	r0, sl
 801abb4:	4659      	mov	r1, fp
 801abb6:	f7e5 fb97 	bl	80002e8 <__aeabi_dsub>
 801abba:	4632      	mov	r2, r6
 801abbc:	463b      	mov	r3, r7
 801abbe:	f7e5 fb93 	bl	80002e8 <__aeabi_dsub>
 801abc2:	4602      	mov	r2, r0
 801abc4:	460b      	mov	r3, r1
 801abc6:	4640      	mov	r0, r8
 801abc8:	4649      	mov	r1, r9
 801abca:	e7da      	b.n	801ab82 <__kernel_cos+0xea>
 801abcc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801ac08 <__kernel_cos+0x170>
 801abd0:	e7db      	b.n	801ab8a <__kernel_cos+0xf2>
 801abd2:	bf00      	nop
 801abd4:	f3af 8000 	nop.w
 801abd8:	be8838d4 	.word	0xbe8838d4
 801abdc:	bda8fae9 	.word	0xbda8fae9
 801abe0:	bdb4b1c4 	.word	0xbdb4b1c4
 801abe4:	3e21ee9e 	.word	0x3e21ee9e
 801abe8:	809c52ad 	.word	0x809c52ad
 801abec:	3e927e4f 	.word	0x3e927e4f
 801abf0:	19cb1590 	.word	0x19cb1590
 801abf4:	3efa01a0 	.word	0x3efa01a0
 801abf8:	16c15177 	.word	0x16c15177
 801abfc:	3f56c16c 	.word	0x3f56c16c
 801ac00:	5555554c 	.word	0x5555554c
 801ac04:	3fa55555 	.word	0x3fa55555
 801ac08:	00000000 	.word	0x00000000
 801ac0c:	3ff00000 	.word	0x3ff00000
 801ac10:	3fe00000 	.word	0x3fe00000
 801ac14:	3fd33332 	.word	0x3fd33332
 801ac18:	3ff00000 	.word	0x3ff00000
 801ac1c:	3fe90000 	.word	0x3fe90000
 801ac20:	3fd20000 	.word	0x3fd20000
 801ac24:	00000000 	.word	0x00000000

0801ac28 <__kernel_sin>:
 801ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac2c:	ec55 4b10 	vmov	r4, r5, d0
 801ac30:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801ac34:	b085      	sub	sp, #20
 801ac36:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801ac3a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801ac3e:	4680      	mov	r8, r0
 801ac40:	d205      	bcs.n	801ac4e <__kernel_sin+0x26>
 801ac42:	4620      	mov	r0, r4
 801ac44:	4629      	mov	r1, r5
 801ac46:	f7e5 ffb7 	bl	8000bb8 <__aeabi_d2iz>
 801ac4a:	2800      	cmp	r0, #0
 801ac4c:	d052      	beq.n	801acf4 <__kernel_sin+0xcc>
 801ac4e:	4622      	mov	r2, r4
 801ac50:	462b      	mov	r3, r5
 801ac52:	4620      	mov	r0, r4
 801ac54:	4629      	mov	r1, r5
 801ac56:	f7e5 fcff 	bl	8000658 <__aeabi_dmul>
 801ac5a:	4682      	mov	sl, r0
 801ac5c:	468b      	mov	fp, r1
 801ac5e:	4602      	mov	r2, r0
 801ac60:	460b      	mov	r3, r1
 801ac62:	4620      	mov	r0, r4
 801ac64:	4629      	mov	r1, r5
 801ac66:	f7e5 fcf7 	bl	8000658 <__aeabi_dmul>
 801ac6a:	a342      	add	r3, pc, #264	@ (adr r3, 801ad74 <__kernel_sin+0x14c>)
 801ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac70:	e9cd 0100 	strd	r0, r1, [sp]
 801ac74:	4650      	mov	r0, sl
 801ac76:	4659      	mov	r1, fp
 801ac78:	f7e5 fcee 	bl	8000658 <__aeabi_dmul>
 801ac7c:	a33f      	add	r3, pc, #252	@ (adr r3, 801ad7c <__kernel_sin+0x154>)
 801ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac82:	f7e5 fb31 	bl	80002e8 <__aeabi_dsub>
 801ac86:	4652      	mov	r2, sl
 801ac88:	465b      	mov	r3, fp
 801ac8a:	f7e5 fce5 	bl	8000658 <__aeabi_dmul>
 801ac8e:	a33d      	add	r3, pc, #244	@ (adr r3, 801ad84 <__kernel_sin+0x15c>)
 801ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac94:	f7e5 fb2a 	bl	80002ec <__adddf3>
 801ac98:	4652      	mov	r2, sl
 801ac9a:	465b      	mov	r3, fp
 801ac9c:	f7e5 fcdc 	bl	8000658 <__aeabi_dmul>
 801aca0:	a33a      	add	r3, pc, #232	@ (adr r3, 801ad8c <__kernel_sin+0x164>)
 801aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aca6:	f7e5 fb1f 	bl	80002e8 <__aeabi_dsub>
 801acaa:	4652      	mov	r2, sl
 801acac:	465b      	mov	r3, fp
 801acae:	f7e5 fcd3 	bl	8000658 <__aeabi_dmul>
 801acb2:	a338      	add	r3, pc, #224	@ (adr r3, 801ad94 <__kernel_sin+0x16c>)
 801acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acb8:	f7e5 fb18 	bl	80002ec <__adddf3>
 801acbc:	4606      	mov	r6, r0
 801acbe:	460f      	mov	r7, r1
 801acc0:	f1b8 0f00 	cmp.w	r8, #0
 801acc4:	d11b      	bne.n	801acfe <__kernel_sin+0xd6>
 801acc6:	4602      	mov	r2, r0
 801acc8:	460b      	mov	r3, r1
 801acca:	4650      	mov	r0, sl
 801accc:	4659      	mov	r1, fp
 801acce:	f7e5 fcc3 	bl	8000658 <__aeabi_dmul>
 801acd2:	a325      	add	r3, pc, #148	@ (adr r3, 801ad68 <__kernel_sin+0x140>)
 801acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd8:	f7e5 fb06 	bl	80002e8 <__aeabi_dsub>
 801acdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ace0:	f7e5 fcba 	bl	8000658 <__aeabi_dmul>
 801ace4:	4602      	mov	r2, r0
 801ace6:	460b      	mov	r3, r1
 801ace8:	4620      	mov	r0, r4
 801acea:	4629      	mov	r1, r5
 801acec:	f7e5 fafe 	bl	80002ec <__adddf3>
 801acf0:	4604      	mov	r4, r0
 801acf2:	460d      	mov	r5, r1
 801acf4:	ec45 4b10 	vmov	d0, r4, r5
 801acf8:	b005      	add	sp, #20
 801acfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ad02:	4b1b      	ldr	r3, [pc, #108]	@ (801ad70 <__kernel_sin+0x148>)
 801ad04:	2200      	movs	r2, #0
 801ad06:	f7e5 fca7 	bl	8000658 <__aeabi_dmul>
 801ad0a:	4632      	mov	r2, r6
 801ad0c:	4680      	mov	r8, r0
 801ad0e:	4689      	mov	r9, r1
 801ad10:	463b      	mov	r3, r7
 801ad12:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ad16:	f7e5 fc9f 	bl	8000658 <__aeabi_dmul>
 801ad1a:	4602      	mov	r2, r0
 801ad1c:	460b      	mov	r3, r1
 801ad1e:	4640      	mov	r0, r8
 801ad20:	4649      	mov	r1, r9
 801ad22:	f7e5 fae1 	bl	80002e8 <__aeabi_dsub>
 801ad26:	4652      	mov	r2, sl
 801ad28:	465b      	mov	r3, fp
 801ad2a:	f7e5 fc95 	bl	8000658 <__aeabi_dmul>
 801ad2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ad32:	f7e5 fad9 	bl	80002e8 <__aeabi_dsub>
 801ad36:	a30c      	add	r3, pc, #48	@ (adr r3, 801ad68 <__kernel_sin+0x140>)
 801ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad3c:	4606      	mov	r6, r0
 801ad3e:	460f      	mov	r7, r1
 801ad40:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ad44:	f7e5 fc88 	bl	8000658 <__aeabi_dmul>
 801ad48:	4602      	mov	r2, r0
 801ad4a:	460b      	mov	r3, r1
 801ad4c:	4630      	mov	r0, r6
 801ad4e:	4639      	mov	r1, r7
 801ad50:	f7e5 facc 	bl	80002ec <__adddf3>
 801ad54:	4602      	mov	r2, r0
 801ad56:	460b      	mov	r3, r1
 801ad58:	4620      	mov	r0, r4
 801ad5a:	4629      	mov	r1, r5
 801ad5c:	f7e5 fac4 	bl	80002e8 <__aeabi_dsub>
 801ad60:	e7c6      	b.n	801acf0 <__kernel_sin+0xc8>
 801ad62:	bf00      	nop
 801ad64:	f3af 8000 	nop.w
 801ad68:	55555549 	.word	0x55555549
 801ad6c:	3fc55555 	.word	0x3fc55555
 801ad70:	3fe00000 	.word	0x3fe00000
 801ad74:	5acfd57c 	.word	0x5acfd57c
 801ad78:	3de5d93a 	.word	0x3de5d93a
 801ad7c:	8a2b9ceb 	.word	0x8a2b9ceb
 801ad80:	3e5ae5e6 	.word	0x3e5ae5e6
 801ad84:	57b1fe7d 	.word	0x57b1fe7d
 801ad88:	3ec71de3 	.word	0x3ec71de3
 801ad8c:	19c161d5 	.word	0x19c161d5
 801ad90:	3f2a01a0 	.word	0x3f2a01a0
 801ad94:	1110f8a6 	.word	0x1110f8a6
 801ad98:	3f811111 	.word	0x3f811111
 801ad9c:	00000000 	.word	0x00000000

0801ada0 <__kernel_tan>:
 801ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada4:	ec5b ab10 	vmov	sl, fp, d0
 801ada8:	4bdb      	ldr	r3, [pc, #876]	@ (801b118 <__kernel_tan+0x378>)
 801adaa:	b089      	sub	sp, #36	@ 0x24
 801adac:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 801adb0:	429f      	cmp	r7, r3
 801adb2:	ec59 8b11 	vmov	r8, r9, d1
 801adb6:	4606      	mov	r6, r0
 801adb8:	f8cd b008 	str.w	fp, [sp, #8]
 801adbc:	d85d      	bhi.n	801ae7a <__kernel_tan+0xda>
 801adbe:	4650      	mov	r0, sl
 801adc0:	4659      	mov	r1, fp
 801adc2:	f7e5 fef9 	bl	8000bb8 <__aeabi_d2iz>
 801adc6:	4605      	mov	r5, r0
 801adc8:	2800      	cmp	r0, #0
 801adca:	d17c      	bne.n	801aec6 <__kernel_tan+0x126>
 801adcc:	1c73      	adds	r3, r6, #1
 801adce:	4652      	mov	r2, sl
 801add0:	4313      	orrs	r3, r2
 801add2:	433b      	orrs	r3, r7
 801add4:	d110      	bne.n	801adf8 <__kernel_tan+0x58>
 801add6:	ec4b ab10 	vmov	d0, sl, fp
 801adda:	f001 f925 	bl	801c028 <fabs>
 801adde:	49cf      	ldr	r1, [pc, #828]	@ (801b11c <__kernel_tan+0x37c>)
 801ade0:	ec53 2b10 	vmov	r2, r3, d0
 801ade4:	2000      	movs	r0, #0
 801ade6:	f7e5 fd61 	bl	80008ac <__aeabi_ddiv>
 801adea:	4682      	mov	sl, r0
 801adec:	468b      	mov	fp, r1
 801adee:	ec4b ab10 	vmov	d0, sl, fp
 801adf2:	b009      	add	sp, #36	@ 0x24
 801adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adf8:	2e01      	cmp	r6, #1
 801adfa:	d0f8      	beq.n	801adee <__kernel_tan+0x4e>
 801adfc:	4642      	mov	r2, r8
 801adfe:	464b      	mov	r3, r9
 801ae00:	4650      	mov	r0, sl
 801ae02:	4659      	mov	r1, fp
 801ae04:	f7e5 fa72 	bl	80002ec <__adddf3>
 801ae08:	4602      	mov	r2, r0
 801ae0a:	460b      	mov	r3, r1
 801ae0c:	460f      	mov	r7, r1
 801ae0e:	2000      	movs	r0, #0
 801ae10:	49c3      	ldr	r1, [pc, #780]	@ (801b120 <__kernel_tan+0x380>)
 801ae12:	f7e5 fd4b 	bl	80008ac <__aeabi_ddiv>
 801ae16:	e9cd 0100 	strd	r0, r1, [sp]
 801ae1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae1e:	462e      	mov	r6, r5
 801ae20:	4652      	mov	r2, sl
 801ae22:	462c      	mov	r4, r5
 801ae24:	4630      	mov	r0, r6
 801ae26:	461d      	mov	r5, r3
 801ae28:	4639      	mov	r1, r7
 801ae2a:	465b      	mov	r3, fp
 801ae2c:	f7e5 fa5c 	bl	80002e8 <__aeabi_dsub>
 801ae30:	4602      	mov	r2, r0
 801ae32:	460b      	mov	r3, r1
 801ae34:	4640      	mov	r0, r8
 801ae36:	4649      	mov	r1, r9
 801ae38:	f7e5 fa56 	bl	80002e8 <__aeabi_dsub>
 801ae3c:	4632      	mov	r2, r6
 801ae3e:	462b      	mov	r3, r5
 801ae40:	f7e5 fc0a 	bl	8000658 <__aeabi_dmul>
 801ae44:	4632      	mov	r2, r6
 801ae46:	4682      	mov	sl, r0
 801ae48:	468b      	mov	fp, r1
 801ae4a:	462b      	mov	r3, r5
 801ae4c:	4630      	mov	r0, r6
 801ae4e:	4639      	mov	r1, r7
 801ae50:	f7e5 fc02 	bl	8000658 <__aeabi_dmul>
 801ae54:	4bb1      	ldr	r3, [pc, #708]	@ (801b11c <__kernel_tan+0x37c>)
 801ae56:	2200      	movs	r2, #0
 801ae58:	f7e5 fa48 	bl	80002ec <__adddf3>
 801ae5c:	4602      	mov	r2, r0
 801ae5e:	460b      	mov	r3, r1
 801ae60:	4650      	mov	r0, sl
 801ae62:	4659      	mov	r1, fp
 801ae64:	f7e5 fa42 	bl	80002ec <__adddf3>
 801ae68:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae6c:	f7e5 fbf4 	bl	8000658 <__aeabi_dmul>
 801ae70:	4622      	mov	r2, r4
 801ae72:	462b      	mov	r3, r5
 801ae74:	f7e5 fa3a 	bl	80002ec <__adddf3>
 801ae78:	e7b7      	b.n	801adea <__kernel_tan+0x4a>
 801ae7a:	4baa      	ldr	r3, [pc, #680]	@ (801b124 <__kernel_tan+0x384>)
 801ae7c:	429f      	cmp	r7, r3
 801ae7e:	d922      	bls.n	801aec6 <__kernel_tan+0x126>
 801ae80:	9b02      	ldr	r3, [sp, #8]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	da05      	bge.n	801ae92 <__kernel_tan+0xf2>
 801ae86:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801ae8a:	469b      	mov	fp, r3
 801ae8c:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801ae90:	4699      	mov	r9, r3
 801ae92:	4652      	mov	r2, sl
 801ae94:	465b      	mov	r3, fp
 801ae96:	a182      	add	r1, pc, #520	@ (adr r1, 801b0a0 <__kernel_tan+0x300>)
 801ae98:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae9c:	f7e5 fa24 	bl	80002e8 <__aeabi_dsub>
 801aea0:	4642      	mov	r2, r8
 801aea2:	464b      	mov	r3, r9
 801aea4:	4604      	mov	r4, r0
 801aea6:	460d      	mov	r5, r1
 801aea8:	a17f      	add	r1, pc, #508	@ (adr r1, 801b0a8 <__kernel_tan+0x308>)
 801aeaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aeae:	f7e5 fa1b 	bl	80002e8 <__aeabi_dsub>
 801aeb2:	4622      	mov	r2, r4
 801aeb4:	462b      	mov	r3, r5
 801aeb6:	f7e5 fa19 	bl	80002ec <__adddf3>
 801aeba:	f04f 0800 	mov.w	r8, #0
 801aebe:	4682      	mov	sl, r0
 801aec0:	468b      	mov	fp, r1
 801aec2:	f04f 0900 	mov.w	r9, #0
 801aec6:	4652      	mov	r2, sl
 801aec8:	465b      	mov	r3, fp
 801aeca:	4650      	mov	r0, sl
 801aecc:	4659      	mov	r1, fp
 801aece:	f7e5 fbc3 	bl	8000658 <__aeabi_dmul>
 801aed2:	4602      	mov	r2, r0
 801aed4:	460b      	mov	r3, r1
 801aed6:	e9cd 2300 	strd	r2, r3, [sp]
 801aeda:	f7e5 fbbd 	bl	8000658 <__aeabi_dmul>
 801aede:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aee2:	4604      	mov	r4, r0
 801aee4:	460d      	mov	r5, r1
 801aee6:	4650      	mov	r0, sl
 801aee8:	4659      	mov	r1, fp
 801aeea:	f7e5 fbb5 	bl	8000658 <__aeabi_dmul>
 801aeee:	a370      	add	r3, pc, #448	@ (adr r3, 801b0b0 <__kernel_tan+0x310>)
 801aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aef8:	4620      	mov	r0, r4
 801aefa:	4629      	mov	r1, r5
 801aefc:	f7e5 fbac 	bl	8000658 <__aeabi_dmul>
 801af00:	a36d      	add	r3, pc, #436	@ (adr r3, 801b0b8 <__kernel_tan+0x318>)
 801af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af06:	f7e5 f9f1 	bl	80002ec <__adddf3>
 801af0a:	4622      	mov	r2, r4
 801af0c:	462b      	mov	r3, r5
 801af0e:	f7e5 fba3 	bl	8000658 <__aeabi_dmul>
 801af12:	a36b      	add	r3, pc, #428	@ (adr r3, 801b0c0 <__kernel_tan+0x320>)
 801af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af18:	f7e5 f9e8 	bl	80002ec <__adddf3>
 801af1c:	4622      	mov	r2, r4
 801af1e:	462b      	mov	r3, r5
 801af20:	f7e5 fb9a 	bl	8000658 <__aeabi_dmul>
 801af24:	a368      	add	r3, pc, #416	@ (adr r3, 801b0c8 <__kernel_tan+0x328>)
 801af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af2a:	f7e5 f9df 	bl	80002ec <__adddf3>
 801af2e:	4622      	mov	r2, r4
 801af30:	462b      	mov	r3, r5
 801af32:	f7e5 fb91 	bl	8000658 <__aeabi_dmul>
 801af36:	a366      	add	r3, pc, #408	@ (adr r3, 801b0d0 <__kernel_tan+0x330>)
 801af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3c:	f7e5 f9d6 	bl	80002ec <__adddf3>
 801af40:	4622      	mov	r2, r4
 801af42:	462b      	mov	r3, r5
 801af44:	f7e5 fb88 	bl	8000658 <__aeabi_dmul>
 801af48:	a363      	add	r3, pc, #396	@ (adr r3, 801b0d8 <__kernel_tan+0x338>)
 801af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af4e:	f7e5 f9cd 	bl	80002ec <__adddf3>
 801af52:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af56:	f7e5 fb7f 	bl	8000658 <__aeabi_dmul>
 801af5a:	a361      	add	r3, pc, #388	@ (adr r3, 801b0e0 <__kernel_tan+0x340>)
 801af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801af64:	4620      	mov	r0, r4
 801af66:	4629      	mov	r1, r5
 801af68:	f7e5 fb76 	bl	8000658 <__aeabi_dmul>
 801af6c:	a35e      	add	r3, pc, #376	@ (adr r3, 801b0e8 <__kernel_tan+0x348>)
 801af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af72:	f7e5 f9bb 	bl	80002ec <__adddf3>
 801af76:	4622      	mov	r2, r4
 801af78:	462b      	mov	r3, r5
 801af7a:	f7e5 fb6d 	bl	8000658 <__aeabi_dmul>
 801af7e:	a35c      	add	r3, pc, #368	@ (adr r3, 801b0f0 <__kernel_tan+0x350>)
 801af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af84:	f7e5 f9b2 	bl	80002ec <__adddf3>
 801af88:	4622      	mov	r2, r4
 801af8a:	462b      	mov	r3, r5
 801af8c:	f7e5 fb64 	bl	8000658 <__aeabi_dmul>
 801af90:	a359      	add	r3, pc, #356	@ (adr r3, 801b0f8 <__kernel_tan+0x358>)
 801af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af96:	f7e5 f9a9 	bl	80002ec <__adddf3>
 801af9a:	4622      	mov	r2, r4
 801af9c:	462b      	mov	r3, r5
 801af9e:	f7e5 fb5b 	bl	8000658 <__aeabi_dmul>
 801afa2:	a357      	add	r3, pc, #348	@ (adr r3, 801b100 <__kernel_tan+0x360>)
 801afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afa8:	f7e5 f9a0 	bl	80002ec <__adddf3>
 801afac:	4622      	mov	r2, r4
 801afae:	462b      	mov	r3, r5
 801afb0:	f7e5 fb52 	bl	8000658 <__aeabi_dmul>
 801afb4:	a354      	add	r3, pc, #336	@ (adr r3, 801b108 <__kernel_tan+0x368>)
 801afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afba:	f7e5 f997 	bl	80002ec <__adddf3>
 801afbe:	4602      	mov	r2, r0
 801afc0:	460b      	mov	r3, r1
 801afc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801afc6:	f7e5 f991 	bl	80002ec <__adddf3>
 801afca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801afce:	f7e5 fb43 	bl	8000658 <__aeabi_dmul>
 801afd2:	4642      	mov	r2, r8
 801afd4:	464b      	mov	r3, r9
 801afd6:	f7e5 f989 	bl	80002ec <__adddf3>
 801afda:	e9dd 2300 	ldrd	r2, r3, [sp]
 801afde:	f7e5 fb3b 	bl	8000658 <__aeabi_dmul>
 801afe2:	4642      	mov	r2, r8
 801afe4:	464b      	mov	r3, r9
 801afe6:	f7e5 f981 	bl	80002ec <__adddf3>
 801afea:	a349      	add	r3, pc, #292	@ (adr r3, 801b110 <__kernel_tan+0x370>)
 801afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff0:	4604      	mov	r4, r0
 801aff2:	460d      	mov	r5, r1
 801aff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aff8:	f7e5 fb2e 	bl	8000658 <__aeabi_dmul>
 801affc:	4622      	mov	r2, r4
 801affe:	462b      	mov	r3, r5
 801b000:	f7e5 f974 	bl	80002ec <__adddf3>
 801b004:	e9cd 0100 	strd	r0, r1, [sp]
 801b008:	460b      	mov	r3, r1
 801b00a:	4602      	mov	r2, r0
 801b00c:	4659      	mov	r1, fp
 801b00e:	4650      	mov	r0, sl
 801b010:	f7e5 f96c 	bl	80002ec <__adddf3>
 801b014:	4b43      	ldr	r3, [pc, #268]	@ (801b124 <__kernel_tan+0x384>)
 801b016:	429f      	cmp	r7, r3
 801b018:	4604      	mov	r4, r0
 801b01a:	460d      	mov	r5, r1
 801b01c:	f240 8084 	bls.w	801b128 <__kernel_tan+0x388>
 801b020:	4630      	mov	r0, r6
 801b022:	f7e5 faaf 	bl	8000584 <__aeabi_i2d>
 801b026:	4622      	mov	r2, r4
 801b028:	4680      	mov	r8, r0
 801b02a:	4689      	mov	r9, r1
 801b02c:	462b      	mov	r3, r5
 801b02e:	4620      	mov	r0, r4
 801b030:	4629      	mov	r1, r5
 801b032:	f7e5 fb11 	bl	8000658 <__aeabi_dmul>
 801b036:	4642      	mov	r2, r8
 801b038:	4606      	mov	r6, r0
 801b03a:	460f      	mov	r7, r1
 801b03c:	464b      	mov	r3, r9
 801b03e:	4620      	mov	r0, r4
 801b040:	4629      	mov	r1, r5
 801b042:	f7e5 f953 	bl	80002ec <__adddf3>
 801b046:	4602      	mov	r2, r0
 801b048:	460b      	mov	r3, r1
 801b04a:	4630      	mov	r0, r6
 801b04c:	4639      	mov	r1, r7
 801b04e:	f7e5 fc2d 	bl	80008ac <__aeabi_ddiv>
 801b052:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b056:	f7e5 f947 	bl	80002e8 <__aeabi_dsub>
 801b05a:	4602      	mov	r2, r0
 801b05c:	460b      	mov	r3, r1
 801b05e:	4650      	mov	r0, sl
 801b060:	4659      	mov	r1, fp
 801b062:	f7e5 f941 	bl	80002e8 <__aeabi_dsub>
 801b066:	4602      	mov	r2, r0
 801b068:	460b      	mov	r3, r1
 801b06a:	f7e5 f93f 	bl	80002ec <__adddf3>
 801b06e:	4602      	mov	r2, r0
 801b070:	460b      	mov	r3, r1
 801b072:	4640      	mov	r0, r8
 801b074:	4649      	mov	r1, r9
 801b076:	f7e5 f937 	bl	80002e8 <__aeabi_dsub>
 801b07a:	9b02      	ldr	r3, [sp, #8]
 801b07c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801b080:	f00a 0a02 	and.w	sl, sl, #2
 801b084:	4604      	mov	r4, r0
 801b086:	f1ca 0001 	rsb	r0, sl, #1
 801b08a:	460d      	mov	r5, r1
 801b08c:	f7e5 fa7a 	bl	8000584 <__aeabi_i2d>
 801b090:	4602      	mov	r2, r0
 801b092:	460b      	mov	r3, r1
 801b094:	4620      	mov	r0, r4
 801b096:	4629      	mov	r1, r5
 801b098:	f7e5 fade 	bl	8000658 <__aeabi_dmul>
 801b09c:	e6a5      	b.n	801adea <__kernel_tan+0x4a>
 801b09e:	bf00      	nop
 801b0a0:	54442d18 	.word	0x54442d18
 801b0a4:	3fe921fb 	.word	0x3fe921fb
 801b0a8:	33145c07 	.word	0x33145c07
 801b0ac:	3c81a626 	.word	0x3c81a626
 801b0b0:	74bf7ad4 	.word	0x74bf7ad4
 801b0b4:	3efb2a70 	.word	0x3efb2a70
 801b0b8:	32f0a7e9 	.word	0x32f0a7e9
 801b0bc:	3f12b80f 	.word	0x3f12b80f
 801b0c0:	1a8d1068 	.word	0x1a8d1068
 801b0c4:	3f3026f7 	.word	0x3f3026f7
 801b0c8:	fee08315 	.word	0xfee08315
 801b0cc:	3f57dbc8 	.word	0x3f57dbc8
 801b0d0:	e96e8493 	.word	0xe96e8493
 801b0d4:	3f8226e3 	.word	0x3f8226e3
 801b0d8:	1bb341fe 	.word	0x1bb341fe
 801b0dc:	3faba1ba 	.word	0x3faba1ba
 801b0e0:	db605373 	.word	0xdb605373
 801b0e4:	bef375cb 	.word	0xbef375cb
 801b0e8:	a03792a6 	.word	0xa03792a6
 801b0ec:	3f147e88 	.word	0x3f147e88
 801b0f0:	f2f26501 	.word	0xf2f26501
 801b0f4:	3f4344d8 	.word	0x3f4344d8
 801b0f8:	c9560328 	.word	0xc9560328
 801b0fc:	3f6d6d22 	.word	0x3f6d6d22
 801b100:	8406d637 	.word	0x8406d637
 801b104:	3f9664f4 	.word	0x3f9664f4
 801b108:	1110fe7a 	.word	0x1110fe7a
 801b10c:	3fc11111 	.word	0x3fc11111
 801b110:	55555563 	.word	0x55555563
 801b114:	3fd55555 	.word	0x3fd55555
 801b118:	3e2fffff 	.word	0x3e2fffff
 801b11c:	3ff00000 	.word	0x3ff00000
 801b120:	bff00000 	.word	0xbff00000
 801b124:	3fe59427 	.word	0x3fe59427
 801b128:	2e01      	cmp	r6, #1
 801b12a:	d033      	beq.n	801b194 <__kernel_tan+0x3f4>
 801b12c:	f04f 0800 	mov.w	r8, #0
 801b130:	4689      	mov	r9, r1
 801b132:	4602      	mov	r2, r0
 801b134:	460b      	mov	r3, r1
 801b136:	2000      	movs	r0, #0
 801b138:	4918      	ldr	r1, [pc, #96]	@ (801b19c <__kernel_tan+0x3fc>)
 801b13a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801b13e:	f7e5 fbb5 	bl	80008ac <__aeabi_ddiv>
 801b142:	4652      	mov	r2, sl
 801b144:	460f      	mov	r7, r1
 801b146:	465b      	mov	r3, fp
 801b148:	4606      	mov	r6, r0
 801b14a:	460d      	mov	r5, r1
 801b14c:	4640      	mov	r0, r8
 801b14e:	4649      	mov	r1, r9
 801b150:	f7e5 f8ca 	bl	80002e8 <__aeabi_dsub>
 801b154:	4602      	mov	r2, r0
 801b156:	460b      	mov	r3, r1
 801b158:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b15c:	f7e5 f8c4 	bl	80002e8 <__aeabi_dsub>
 801b160:	4642      	mov	r2, r8
 801b162:	463b      	mov	r3, r7
 801b164:	f7e5 fa78 	bl	8000658 <__aeabi_dmul>
 801b168:	4642      	mov	r2, r8
 801b16a:	4682      	mov	sl, r0
 801b16c:	468b      	mov	fp, r1
 801b16e:	463b      	mov	r3, r7
 801b170:	4640      	mov	r0, r8
 801b172:	4649      	mov	r1, r9
 801b174:	f7e5 fa70 	bl	8000658 <__aeabi_dmul>
 801b178:	4b09      	ldr	r3, [pc, #36]	@ (801b1a0 <__kernel_tan+0x400>)
 801b17a:	2200      	movs	r2, #0
 801b17c:	f7e5 f8b6 	bl	80002ec <__adddf3>
 801b180:	4602      	mov	r2, r0
 801b182:	460b      	mov	r3, r1
 801b184:	4650      	mov	r0, sl
 801b186:	4659      	mov	r1, fp
 801b188:	f7e5 f8b0 	bl	80002ec <__adddf3>
 801b18c:	4644      	mov	r4, r8
 801b18e:	4632      	mov	r2, r6
 801b190:	463b      	mov	r3, r7
 801b192:	e66b      	b.n	801ae6c <__kernel_tan+0xcc>
 801b194:	4682      	mov	sl, r0
 801b196:	468b      	mov	fp, r1
 801b198:	e629      	b.n	801adee <__kernel_tan+0x4e>
 801b19a:	bf00      	nop
 801b19c:	bff00000 	.word	0xbff00000
 801b1a0:	3ff00000 	.word	0x3ff00000
 801b1a4:	00000000 	.word	0x00000000

0801b1a8 <__ieee754_pow>:
 801b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1ac:	b091      	sub	sp, #68	@ 0x44
 801b1ae:	ed8d 1b00 	vstr	d1, [sp]
 801b1b2:	e9dd 1900 	ldrd	r1, r9, [sp]
 801b1b6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801b1ba:	ea5a 0001 	orrs.w	r0, sl, r1
 801b1be:	ec57 6b10 	vmov	r6, r7, d0
 801b1c2:	d113      	bne.n	801b1ec <__ieee754_pow+0x44>
 801b1c4:	19b3      	adds	r3, r6, r6
 801b1c6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801b1ca:	4152      	adcs	r2, r2
 801b1cc:	4298      	cmp	r0, r3
 801b1ce:	4b98      	ldr	r3, [pc, #608]	@ (801b430 <__ieee754_pow+0x288>)
 801b1d0:	4193      	sbcs	r3, r2
 801b1d2:	f080 84ea 	bcs.w	801bbaa <__ieee754_pow+0xa02>
 801b1d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b1da:	4630      	mov	r0, r6
 801b1dc:	4639      	mov	r1, r7
 801b1de:	f7e5 f885 	bl	80002ec <__adddf3>
 801b1e2:	ec41 0b10 	vmov	d0, r0, r1
 801b1e6:	b011      	add	sp, #68	@ 0x44
 801b1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ec:	4a91      	ldr	r2, [pc, #580]	@ (801b434 <__ieee754_pow+0x28c>)
 801b1ee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801b1f2:	4590      	cmp	r8, r2
 801b1f4:	463d      	mov	r5, r7
 801b1f6:	4633      	mov	r3, r6
 801b1f8:	d806      	bhi.n	801b208 <__ieee754_pow+0x60>
 801b1fa:	d101      	bne.n	801b200 <__ieee754_pow+0x58>
 801b1fc:	2e00      	cmp	r6, #0
 801b1fe:	d1ea      	bne.n	801b1d6 <__ieee754_pow+0x2e>
 801b200:	4592      	cmp	sl, r2
 801b202:	d801      	bhi.n	801b208 <__ieee754_pow+0x60>
 801b204:	d10e      	bne.n	801b224 <__ieee754_pow+0x7c>
 801b206:	b169      	cbz	r1, 801b224 <__ieee754_pow+0x7c>
 801b208:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801b20c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801b210:	431d      	orrs	r5, r3
 801b212:	d1e0      	bne.n	801b1d6 <__ieee754_pow+0x2e>
 801b214:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b218:	18db      	adds	r3, r3, r3
 801b21a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801b21e:	4152      	adcs	r2, r2
 801b220:	429d      	cmp	r5, r3
 801b222:	e7d4      	b.n	801b1ce <__ieee754_pow+0x26>
 801b224:	2d00      	cmp	r5, #0
 801b226:	46c3      	mov	fp, r8
 801b228:	da3a      	bge.n	801b2a0 <__ieee754_pow+0xf8>
 801b22a:	4a83      	ldr	r2, [pc, #524]	@ (801b438 <__ieee754_pow+0x290>)
 801b22c:	4592      	cmp	sl, r2
 801b22e:	d84d      	bhi.n	801b2cc <__ieee754_pow+0x124>
 801b230:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801b234:	4592      	cmp	sl, r2
 801b236:	f240 84c7 	bls.w	801bbc8 <__ieee754_pow+0xa20>
 801b23a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801b23e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801b242:	2a14      	cmp	r2, #20
 801b244:	dd0f      	ble.n	801b266 <__ieee754_pow+0xbe>
 801b246:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801b24a:	fa21 f402 	lsr.w	r4, r1, r2
 801b24e:	fa04 f202 	lsl.w	r2, r4, r2
 801b252:	428a      	cmp	r2, r1
 801b254:	f040 84b8 	bne.w	801bbc8 <__ieee754_pow+0xa20>
 801b258:	f004 0401 	and.w	r4, r4, #1
 801b25c:	f1c4 0402 	rsb	r4, r4, #2
 801b260:	2900      	cmp	r1, #0
 801b262:	d158      	bne.n	801b316 <__ieee754_pow+0x16e>
 801b264:	e00e      	b.n	801b284 <__ieee754_pow+0xdc>
 801b266:	2900      	cmp	r1, #0
 801b268:	d154      	bne.n	801b314 <__ieee754_pow+0x16c>
 801b26a:	f1c2 0214 	rsb	r2, r2, #20
 801b26e:	fa4a f402 	asr.w	r4, sl, r2
 801b272:	fa04 f202 	lsl.w	r2, r4, r2
 801b276:	4552      	cmp	r2, sl
 801b278:	f040 84a3 	bne.w	801bbc2 <__ieee754_pow+0xa1a>
 801b27c:	f004 0401 	and.w	r4, r4, #1
 801b280:	f1c4 0402 	rsb	r4, r4, #2
 801b284:	4a6d      	ldr	r2, [pc, #436]	@ (801b43c <__ieee754_pow+0x294>)
 801b286:	4592      	cmp	sl, r2
 801b288:	d12e      	bne.n	801b2e8 <__ieee754_pow+0x140>
 801b28a:	f1b9 0f00 	cmp.w	r9, #0
 801b28e:	f280 8494 	bge.w	801bbba <__ieee754_pow+0xa12>
 801b292:	496a      	ldr	r1, [pc, #424]	@ (801b43c <__ieee754_pow+0x294>)
 801b294:	4632      	mov	r2, r6
 801b296:	463b      	mov	r3, r7
 801b298:	2000      	movs	r0, #0
 801b29a:	f7e5 fb07 	bl	80008ac <__aeabi_ddiv>
 801b29e:	e7a0      	b.n	801b1e2 <__ieee754_pow+0x3a>
 801b2a0:	2400      	movs	r4, #0
 801b2a2:	bbc1      	cbnz	r1, 801b316 <__ieee754_pow+0x16e>
 801b2a4:	4a63      	ldr	r2, [pc, #396]	@ (801b434 <__ieee754_pow+0x28c>)
 801b2a6:	4592      	cmp	sl, r2
 801b2a8:	d1ec      	bne.n	801b284 <__ieee754_pow+0xdc>
 801b2aa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801b2ae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801b2b2:	431a      	orrs	r2, r3
 801b2b4:	f000 8479 	beq.w	801bbaa <__ieee754_pow+0xa02>
 801b2b8:	4b61      	ldr	r3, [pc, #388]	@ (801b440 <__ieee754_pow+0x298>)
 801b2ba:	4598      	cmp	r8, r3
 801b2bc:	d908      	bls.n	801b2d0 <__ieee754_pow+0x128>
 801b2be:	f1b9 0f00 	cmp.w	r9, #0
 801b2c2:	f2c0 8476 	blt.w	801bbb2 <__ieee754_pow+0xa0a>
 801b2c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b2ca:	e78a      	b.n	801b1e2 <__ieee754_pow+0x3a>
 801b2cc:	2402      	movs	r4, #2
 801b2ce:	e7e8      	b.n	801b2a2 <__ieee754_pow+0xfa>
 801b2d0:	f1b9 0f00 	cmp.w	r9, #0
 801b2d4:	f04f 0000 	mov.w	r0, #0
 801b2d8:	f04f 0100 	mov.w	r1, #0
 801b2dc:	da81      	bge.n	801b1e2 <__ieee754_pow+0x3a>
 801b2de:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b2e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801b2e6:	e77c      	b.n	801b1e2 <__ieee754_pow+0x3a>
 801b2e8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801b2ec:	d106      	bne.n	801b2fc <__ieee754_pow+0x154>
 801b2ee:	4632      	mov	r2, r6
 801b2f0:	463b      	mov	r3, r7
 801b2f2:	4630      	mov	r0, r6
 801b2f4:	4639      	mov	r1, r7
 801b2f6:	f7e5 f9af 	bl	8000658 <__aeabi_dmul>
 801b2fa:	e772      	b.n	801b1e2 <__ieee754_pow+0x3a>
 801b2fc:	4a51      	ldr	r2, [pc, #324]	@ (801b444 <__ieee754_pow+0x29c>)
 801b2fe:	4591      	cmp	r9, r2
 801b300:	d109      	bne.n	801b316 <__ieee754_pow+0x16e>
 801b302:	2d00      	cmp	r5, #0
 801b304:	db07      	blt.n	801b316 <__ieee754_pow+0x16e>
 801b306:	ec47 6b10 	vmov	d0, r6, r7
 801b30a:	b011      	add	sp, #68	@ 0x44
 801b30c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b310:	f7ff ba20 	b.w	801a754 <__ieee754_sqrt>
 801b314:	2400      	movs	r4, #0
 801b316:	ec47 6b10 	vmov	d0, r6, r7
 801b31a:	9302      	str	r3, [sp, #8]
 801b31c:	f000 fe84 	bl	801c028 <fabs>
 801b320:	9b02      	ldr	r3, [sp, #8]
 801b322:	ec51 0b10 	vmov	r0, r1, d0
 801b326:	bb53      	cbnz	r3, 801b37e <__ieee754_pow+0x1d6>
 801b328:	4b44      	ldr	r3, [pc, #272]	@ (801b43c <__ieee754_pow+0x294>)
 801b32a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801b32e:	429a      	cmp	r2, r3
 801b330:	d002      	beq.n	801b338 <__ieee754_pow+0x190>
 801b332:	f1b8 0f00 	cmp.w	r8, #0
 801b336:	d122      	bne.n	801b37e <__ieee754_pow+0x1d6>
 801b338:	f1b9 0f00 	cmp.w	r9, #0
 801b33c:	da05      	bge.n	801b34a <__ieee754_pow+0x1a2>
 801b33e:	4602      	mov	r2, r0
 801b340:	460b      	mov	r3, r1
 801b342:	2000      	movs	r0, #0
 801b344:	493d      	ldr	r1, [pc, #244]	@ (801b43c <__ieee754_pow+0x294>)
 801b346:	f7e5 fab1 	bl	80008ac <__aeabi_ddiv>
 801b34a:	2d00      	cmp	r5, #0
 801b34c:	f6bf af49 	bge.w	801b1e2 <__ieee754_pow+0x3a>
 801b350:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801b354:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801b358:	ea58 0804 	orrs.w	r8, r8, r4
 801b35c:	d108      	bne.n	801b370 <__ieee754_pow+0x1c8>
 801b35e:	4602      	mov	r2, r0
 801b360:	460b      	mov	r3, r1
 801b362:	4610      	mov	r0, r2
 801b364:	4619      	mov	r1, r3
 801b366:	f7e4 ffbf 	bl	80002e8 <__aeabi_dsub>
 801b36a:	4602      	mov	r2, r0
 801b36c:	460b      	mov	r3, r1
 801b36e:	e794      	b.n	801b29a <__ieee754_pow+0xf2>
 801b370:	2c01      	cmp	r4, #1
 801b372:	f47f af36 	bne.w	801b1e2 <__ieee754_pow+0x3a>
 801b376:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b37a:	4619      	mov	r1, r3
 801b37c:	e731      	b.n	801b1e2 <__ieee754_pow+0x3a>
 801b37e:	0feb      	lsrs	r3, r5, #31
 801b380:	3b01      	subs	r3, #1
 801b382:	ea53 0204 	orrs.w	r2, r3, r4
 801b386:	d102      	bne.n	801b38e <__ieee754_pow+0x1e6>
 801b388:	4632      	mov	r2, r6
 801b38a:	463b      	mov	r3, r7
 801b38c:	e7e9      	b.n	801b362 <__ieee754_pow+0x1ba>
 801b38e:	3c01      	subs	r4, #1
 801b390:	431c      	orrs	r4, r3
 801b392:	d016      	beq.n	801b3c2 <__ieee754_pow+0x21a>
 801b394:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801b420 <__ieee754_pow+0x278>
 801b398:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801b39c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b3a0:	f240 8112 	bls.w	801b5c8 <__ieee754_pow+0x420>
 801b3a4:	4b28      	ldr	r3, [pc, #160]	@ (801b448 <__ieee754_pow+0x2a0>)
 801b3a6:	459a      	cmp	sl, r3
 801b3a8:	4b25      	ldr	r3, [pc, #148]	@ (801b440 <__ieee754_pow+0x298>)
 801b3aa:	d916      	bls.n	801b3da <__ieee754_pow+0x232>
 801b3ac:	4598      	cmp	r8, r3
 801b3ae:	d80b      	bhi.n	801b3c8 <__ieee754_pow+0x220>
 801b3b0:	f1b9 0f00 	cmp.w	r9, #0
 801b3b4:	da0b      	bge.n	801b3ce <__ieee754_pow+0x226>
 801b3b6:	2000      	movs	r0, #0
 801b3b8:	b011      	add	sp, #68	@ 0x44
 801b3ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3be:	f001 badf 	b.w	801c980 <__math_oflow>
 801b3c2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801b428 <__ieee754_pow+0x280>
 801b3c6:	e7e7      	b.n	801b398 <__ieee754_pow+0x1f0>
 801b3c8:	f1b9 0f00 	cmp.w	r9, #0
 801b3cc:	dcf3      	bgt.n	801b3b6 <__ieee754_pow+0x20e>
 801b3ce:	2000      	movs	r0, #0
 801b3d0:	b011      	add	sp, #68	@ 0x44
 801b3d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3d6:	f001 bacb 	b.w	801c970 <__math_uflow>
 801b3da:	4598      	cmp	r8, r3
 801b3dc:	d20c      	bcs.n	801b3f8 <__ieee754_pow+0x250>
 801b3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	f7e5 fba9 	bl	8000b3c <__aeabi_dcmplt>
 801b3ea:	3800      	subs	r0, #0
 801b3ec:	bf18      	it	ne
 801b3ee:	2001      	movne	r0, #1
 801b3f0:	f1b9 0f00 	cmp.w	r9, #0
 801b3f4:	daec      	bge.n	801b3d0 <__ieee754_pow+0x228>
 801b3f6:	e7df      	b.n	801b3b8 <__ieee754_pow+0x210>
 801b3f8:	4b10      	ldr	r3, [pc, #64]	@ (801b43c <__ieee754_pow+0x294>)
 801b3fa:	4598      	cmp	r8, r3
 801b3fc:	f04f 0200 	mov.w	r2, #0
 801b400:	d924      	bls.n	801b44c <__ieee754_pow+0x2a4>
 801b402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b406:	2300      	movs	r3, #0
 801b408:	f7e5 fb98 	bl	8000b3c <__aeabi_dcmplt>
 801b40c:	3800      	subs	r0, #0
 801b40e:	bf18      	it	ne
 801b410:	2001      	movne	r0, #1
 801b412:	f1b9 0f00 	cmp.w	r9, #0
 801b416:	dccf      	bgt.n	801b3b8 <__ieee754_pow+0x210>
 801b418:	e7da      	b.n	801b3d0 <__ieee754_pow+0x228>
 801b41a:	bf00      	nop
 801b41c:	f3af 8000 	nop.w
 801b420:	00000000 	.word	0x00000000
 801b424:	3ff00000 	.word	0x3ff00000
 801b428:	00000000 	.word	0x00000000
 801b42c:	bff00000 	.word	0xbff00000
 801b430:	fff00000 	.word	0xfff00000
 801b434:	7ff00000 	.word	0x7ff00000
 801b438:	433fffff 	.word	0x433fffff
 801b43c:	3ff00000 	.word	0x3ff00000
 801b440:	3fefffff 	.word	0x3fefffff
 801b444:	3fe00000 	.word	0x3fe00000
 801b448:	43f00000 	.word	0x43f00000
 801b44c:	4b5a      	ldr	r3, [pc, #360]	@ (801b5b8 <__ieee754_pow+0x410>)
 801b44e:	f7e4 ff4b 	bl	80002e8 <__aeabi_dsub>
 801b452:	a351      	add	r3, pc, #324	@ (adr r3, 801b598 <__ieee754_pow+0x3f0>)
 801b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b458:	4604      	mov	r4, r0
 801b45a:	460d      	mov	r5, r1
 801b45c:	f7e5 f8fc 	bl	8000658 <__aeabi_dmul>
 801b460:	a34f      	add	r3, pc, #316	@ (adr r3, 801b5a0 <__ieee754_pow+0x3f8>)
 801b462:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b466:	4606      	mov	r6, r0
 801b468:	460f      	mov	r7, r1
 801b46a:	4620      	mov	r0, r4
 801b46c:	4629      	mov	r1, r5
 801b46e:	f7e5 f8f3 	bl	8000658 <__aeabi_dmul>
 801b472:	4b52      	ldr	r3, [pc, #328]	@ (801b5bc <__ieee754_pow+0x414>)
 801b474:	4682      	mov	sl, r0
 801b476:	468b      	mov	fp, r1
 801b478:	2200      	movs	r2, #0
 801b47a:	4620      	mov	r0, r4
 801b47c:	4629      	mov	r1, r5
 801b47e:	f7e5 f8eb 	bl	8000658 <__aeabi_dmul>
 801b482:	4602      	mov	r2, r0
 801b484:	460b      	mov	r3, r1
 801b486:	a148      	add	r1, pc, #288	@ (adr r1, 801b5a8 <__ieee754_pow+0x400>)
 801b488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b48c:	f7e4 ff2c 	bl	80002e8 <__aeabi_dsub>
 801b490:	4622      	mov	r2, r4
 801b492:	462b      	mov	r3, r5
 801b494:	f7e5 f8e0 	bl	8000658 <__aeabi_dmul>
 801b498:	4602      	mov	r2, r0
 801b49a:	460b      	mov	r3, r1
 801b49c:	2000      	movs	r0, #0
 801b49e:	4948      	ldr	r1, [pc, #288]	@ (801b5c0 <__ieee754_pow+0x418>)
 801b4a0:	f7e4 ff22 	bl	80002e8 <__aeabi_dsub>
 801b4a4:	4622      	mov	r2, r4
 801b4a6:	4680      	mov	r8, r0
 801b4a8:	4689      	mov	r9, r1
 801b4aa:	462b      	mov	r3, r5
 801b4ac:	4620      	mov	r0, r4
 801b4ae:	4629      	mov	r1, r5
 801b4b0:	f7e5 f8d2 	bl	8000658 <__aeabi_dmul>
 801b4b4:	4602      	mov	r2, r0
 801b4b6:	460b      	mov	r3, r1
 801b4b8:	4640      	mov	r0, r8
 801b4ba:	4649      	mov	r1, r9
 801b4bc:	f7e5 f8cc 	bl	8000658 <__aeabi_dmul>
 801b4c0:	a33b      	add	r3, pc, #236	@ (adr r3, 801b5b0 <__ieee754_pow+0x408>)
 801b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4c6:	f7e5 f8c7 	bl	8000658 <__aeabi_dmul>
 801b4ca:	4602      	mov	r2, r0
 801b4cc:	460b      	mov	r3, r1
 801b4ce:	4650      	mov	r0, sl
 801b4d0:	4659      	mov	r1, fp
 801b4d2:	f7e4 ff09 	bl	80002e8 <__aeabi_dsub>
 801b4d6:	4602      	mov	r2, r0
 801b4d8:	460b      	mov	r3, r1
 801b4da:	4680      	mov	r8, r0
 801b4dc:	4689      	mov	r9, r1
 801b4de:	4630      	mov	r0, r6
 801b4e0:	4639      	mov	r1, r7
 801b4e2:	f7e4 ff03 	bl	80002ec <__adddf3>
 801b4e6:	2400      	movs	r4, #0
 801b4e8:	4632      	mov	r2, r6
 801b4ea:	463b      	mov	r3, r7
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	460d      	mov	r5, r1
 801b4f0:	f7e4 fefa 	bl	80002e8 <__aeabi_dsub>
 801b4f4:	4602      	mov	r2, r0
 801b4f6:	460b      	mov	r3, r1
 801b4f8:	4640      	mov	r0, r8
 801b4fa:	4649      	mov	r1, r9
 801b4fc:	f7e4 fef4 	bl	80002e8 <__aeabi_dsub>
 801b500:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b504:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b508:	2300      	movs	r3, #0
 801b50a:	9304      	str	r3, [sp, #16]
 801b50c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b510:	4606      	mov	r6, r0
 801b512:	460f      	mov	r7, r1
 801b514:	4652      	mov	r2, sl
 801b516:	465b      	mov	r3, fp
 801b518:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b51c:	f7e4 fee4 	bl	80002e8 <__aeabi_dsub>
 801b520:	4622      	mov	r2, r4
 801b522:	462b      	mov	r3, r5
 801b524:	f7e5 f898 	bl	8000658 <__aeabi_dmul>
 801b528:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b52c:	4680      	mov	r8, r0
 801b52e:	4689      	mov	r9, r1
 801b530:	4630      	mov	r0, r6
 801b532:	4639      	mov	r1, r7
 801b534:	f7e5 f890 	bl	8000658 <__aeabi_dmul>
 801b538:	4602      	mov	r2, r0
 801b53a:	460b      	mov	r3, r1
 801b53c:	4640      	mov	r0, r8
 801b53e:	4649      	mov	r1, r9
 801b540:	f7e4 fed4 	bl	80002ec <__adddf3>
 801b544:	4652      	mov	r2, sl
 801b546:	465b      	mov	r3, fp
 801b548:	4606      	mov	r6, r0
 801b54a:	460f      	mov	r7, r1
 801b54c:	4620      	mov	r0, r4
 801b54e:	4629      	mov	r1, r5
 801b550:	f7e5 f882 	bl	8000658 <__aeabi_dmul>
 801b554:	460b      	mov	r3, r1
 801b556:	4602      	mov	r2, r0
 801b558:	4680      	mov	r8, r0
 801b55a:	4689      	mov	r9, r1
 801b55c:	4630      	mov	r0, r6
 801b55e:	4639      	mov	r1, r7
 801b560:	f7e4 fec4 	bl	80002ec <__adddf3>
 801b564:	4b17      	ldr	r3, [pc, #92]	@ (801b5c4 <__ieee754_pow+0x41c>)
 801b566:	4299      	cmp	r1, r3
 801b568:	4604      	mov	r4, r0
 801b56a:	460d      	mov	r5, r1
 801b56c:	468a      	mov	sl, r1
 801b56e:	468b      	mov	fp, r1
 801b570:	f340 82ef 	ble.w	801bb52 <__ieee754_pow+0x9aa>
 801b574:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801b578:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801b57c:	4303      	orrs	r3, r0
 801b57e:	f000 81e8 	beq.w	801b952 <__ieee754_pow+0x7aa>
 801b582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b586:	2200      	movs	r2, #0
 801b588:	2300      	movs	r3, #0
 801b58a:	f7e5 fad7 	bl	8000b3c <__aeabi_dcmplt>
 801b58e:	3800      	subs	r0, #0
 801b590:	bf18      	it	ne
 801b592:	2001      	movne	r0, #1
 801b594:	e710      	b.n	801b3b8 <__ieee754_pow+0x210>
 801b596:	bf00      	nop
 801b598:	60000000 	.word	0x60000000
 801b59c:	3ff71547 	.word	0x3ff71547
 801b5a0:	f85ddf44 	.word	0xf85ddf44
 801b5a4:	3e54ae0b 	.word	0x3e54ae0b
 801b5a8:	55555555 	.word	0x55555555
 801b5ac:	3fd55555 	.word	0x3fd55555
 801b5b0:	652b82fe 	.word	0x652b82fe
 801b5b4:	3ff71547 	.word	0x3ff71547
 801b5b8:	3ff00000 	.word	0x3ff00000
 801b5bc:	3fd00000 	.word	0x3fd00000
 801b5c0:	3fe00000 	.word	0x3fe00000
 801b5c4:	408fffff 	.word	0x408fffff
 801b5c8:	4bd5      	ldr	r3, [pc, #852]	@ (801b920 <__ieee754_pow+0x778>)
 801b5ca:	402b      	ands	r3, r5
 801b5cc:	2200      	movs	r2, #0
 801b5ce:	b92b      	cbnz	r3, 801b5dc <__ieee754_pow+0x434>
 801b5d0:	4bd4      	ldr	r3, [pc, #848]	@ (801b924 <__ieee754_pow+0x77c>)
 801b5d2:	f7e5 f841 	bl	8000658 <__aeabi_dmul>
 801b5d6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801b5da:	468b      	mov	fp, r1
 801b5dc:	ea4f 532b 	mov.w	r3, fp, asr #20
 801b5e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801b5e4:	4413      	add	r3, r2
 801b5e6:	930a      	str	r3, [sp, #40]	@ 0x28
 801b5e8:	4bcf      	ldr	r3, [pc, #828]	@ (801b928 <__ieee754_pow+0x780>)
 801b5ea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801b5ee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801b5f2:	459b      	cmp	fp, r3
 801b5f4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801b5f8:	dd08      	ble.n	801b60c <__ieee754_pow+0x464>
 801b5fa:	4bcc      	ldr	r3, [pc, #816]	@ (801b92c <__ieee754_pow+0x784>)
 801b5fc:	459b      	cmp	fp, r3
 801b5fe:	f340 81a5 	ble.w	801b94c <__ieee754_pow+0x7a4>
 801b602:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b604:	3301      	adds	r3, #1
 801b606:	930a      	str	r3, [sp, #40]	@ 0x28
 801b608:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801b60c:	f04f 0a00 	mov.w	sl, #0
 801b610:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801b614:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b616:	4bc6      	ldr	r3, [pc, #792]	@ (801b930 <__ieee754_pow+0x788>)
 801b618:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b61c:	ed93 7b00 	vldr	d7, [r3]
 801b620:	4629      	mov	r1, r5
 801b622:	ec53 2b17 	vmov	r2, r3, d7
 801b626:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b62a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b62e:	f7e4 fe5b 	bl	80002e8 <__aeabi_dsub>
 801b632:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b636:	4606      	mov	r6, r0
 801b638:	460f      	mov	r7, r1
 801b63a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b63e:	f7e4 fe55 	bl	80002ec <__adddf3>
 801b642:	4602      	mov	r2, r0
 801b644:	460b      	mov	r3, r1
 801b646:	2000      	movs	r0, #0
 801b648:	49ba      	ldr	r1, [pc, #744]	@ (801b934 <__ieee754_pow+0x78c>)
 801b64a:	f7e5 f92f 	bl	80008ac <__aeabi_ddiv>
 801b64e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801b652:	4602      	mov	r2, r0
 801b654:	460b      	mov	r3, r1
 801b656:	4630      	mov	r0, r6
 801b658:	4639      	mov	r1, r7
 801b65a:	f7e4 fffd 	bl	8000658 <__aeabi_dmul>
 801b65e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b662:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801b666:	106d      	asrs	r5, r5, #1
 801b668:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801b66c:	f04f 0b00 	mov.w	fp, #0
 801b670:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801b674:	4661      	mov	r1, ip
 801b676:	2200      	movs	r2, #0
 801b678:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801b67c:	4658      	mov	r0, fp
 801b67e:	46e1      	mov	r9, ip
 801b680:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801b684:	4614      	mov	r4, r2
 801b686:	461d      	mov	r5, r3
 801b688:	f7e4 ffe6 	bl	8000658 <__aeabi_dmul>
 801b68c:	4602      	mov	r2, r0
 801b68e:	460b      	mov	r3, r1
 801b690:	4630      	mov	r0, r6
 801b692:	4639      	mov	r1, r7
 801b694:	f7e4 fe28 	bl	80002e8 <__aeabi_dsub>
 801b698:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b69c:	4606      	mov	r6, r0
 801b69e:	460f      	mov	r7, r1
 801b6a0:	4620      	mov	r0, r4
 801b6a2:	4629      	mov	r1, r5
 801b6a4:	f7e4 fe20 	bl	80002e8 <__aeabi_dsub>
 801b6a8:	4602      	mov	r2, r0
 801b6aa:	460b      	mov	r3, r1
 801b6ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b6b0:	f7e4 fe1a 	bl	80002e8 <__aeabi_dsub>
 801b6b4:	465a      	mov	r2, fp
 801b6b6:	464b      	mov	r3, r9
 801b6b8:	f7e4 ffce 	bl	8000658 <__aeabi_dmul>
 801b6bc:	4602      	mov	r2, r0
 801b6be:	460b      	mov	r3, r1
 801b6c0:	4630      	mov	r0, r6
 801b6c2:	4639      	mov	r1, r7
 801b6c4:	f7e4 fe10 	bl	80002e8 <__aeabi_dsub>
 801b6c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801b6cc:	f7e4 ffc4 	bl	8000658 <__aeabi_dmul>
 801b6d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b6d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b6d8:	4610      	mov	r0, r2
 801b6da:	4619      	mov	r1, r3
 801b6dc:	f7e4 ffbc 	bl	8000658 <__aeabi_dmul>
 801b6e0:	a37d      	add	r3, pc, #500	@ (adr r3, 801b8d8 <__ieee754_pow+0x730>)
 801b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e6:	4604      	mov	r4, r0
 801b6e8:	460d      	mov	r5, r1
 801b6ea:	f7e4 ffb5 	bl	8000658 <__aeabi_dmul>
 801b6ee:	a37c      	add	r3, pc, #496	@ (adr r3, 801b8e0 <__ieee754_pow+0x738>)
 801b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6f4:	f7e4 fdfa 	bl	80002ec <__adddf3>
 801b6f8:	4622      	mov	r2, r4
 801b6fa:	462b      	mov	r3, r5
 801b6fc:	f7e4 ffac 	bl	8000658 <__aeabi_dmul>
 801b700:	a379      	add	r3, pc, #484	@ (adr r3, 801b8e8 <__ieee754_pow+0x740>)
 801b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b706:	f7e4 fdf1 	bl	80002ec <__adddf3>
 801b70a:	4622      	mov	r2, r4
 801b70c:	462b      	mov	r3, r5
 801b70e:	f7e4 ffa3 	bl	8000658 <__aeabi_dmul>
 801b712:	a377      	add	r3, pc, #476	@ (adr r3, 801b8f0 <__ieee754_pow+0x748>)
 801b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b718:	f7e4 fde8 	bl	80002ec <__adddf3>
 801b71c:	4622      	mov	r2, r4
 801b71e:	462b      	mov	r3, r5
 801b720:	f7e4 ff9a 	bl	8000658 <__aeabi_dmul>
 801b724:	a374      	add	r3, pc, #464	@ (adr r3, 801b8f8 <__ieee754_pow+0x750>)
 801b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b72a:	f7e4 fddf 	bl	80002ec <__adddf3>
 801b72e:	4622      	mov	r2, r4
 801b730:	462b      	mov	r3, r5
 801b732:	f7e4 ff91 	bl	8000658 <__aeabi_dmul>
 801b736:	a372      	add	r3, pc, #456	@ (adr r3, 801b900 <__ieee754_pow+0x758>)
 801b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b73c:	f7e4 fdd6 	bl	80002ec <__adddf3>
 801b740:	4622      	mov	r2, r4
 801b742:	4606      	mov	r6, r0
 801b744:	460f      	mov	r7, r1
 801b746:	462b      	mov	r3, r5
 801b748:	4620      	mov	r0, r4
 801b74a:	4629      	mov	r1, r5
 801b74c:	f7e4 ff84 	bl	8000658 <__aeabi_dmul>
 801b750:	4602      	mov	r2, r0
 801b752:	460b      	mov	r3, r1
 801b754:	4630      	mov	r0, r6
 801b756:	4639      	mov	r1, r7
 801b758:	f7e4 ff7e 	bl	8000658 <__aeabi_dmul>
 801b75c:	465a      	mov	r2, fp
 801b75e:	4604      	mov	r4, r0
 801b760:	460d      	mov	r5, r1
 801b762:	464b      	mov	r3, r9
 801b764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b768:	f7e4 fdc0 	bl	80002ec <__adddf3>
 801b76c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b770:	f7e4 ff72 	bl	8000658 <__aeabi_dmul>
 801b774:	4622      	mov	r2, r4
 801b776:	462b      	mov	r3, r5
 801b778:	f7e4 fdb8 	bl	80002ec <__adddf3>
 801b77c:	465a      	mov	r2, fp
 801b77e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b782:	464b      	mov	r3, r9
 801b784:	4658      	mov	r0, fp
 801b786:	4649      	mov	r1, r9
 801b788:	f7e4 ff66 	bl	8000658 <__aeabi_dmul>
 801b78c:	4b6a      	ldr	r3, [pc, #424]	@ (801b938 <__ieee754_pow+0x790>)
 801b78e:	2200      	movs	r2, #0
 801b790:	4606      	mov	r6, r0
 801b792:	460f      	mov	r7, r1
 801b794:	f7e4 fdaa 	bl	80002ec <__adddf3>
 801b798:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b79c:	f7e4 fda6 	bl	80002ec <__adddf3>
 801b7a0:	46d8      	mov	r8, fp
 801b7a2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801b7a6:	460d      	mov	r5, r1
 801b7a8:	465a      	mov	r2, fp
 801b7aa:	460b      	mov	r3, r1
 801b7ac:	4640      	mov	r0, r8
 801b7ae:	4649      	mov	r1, r9
 801b7b0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801b7b4:	f7e4 ff50 	bl	8000658 <__aeabi_dmul>
 801b7b8:	465c      	mov	r4, fp
 801b7ba:	4680      	mov	r8, r0
 801b7bc:	4689      	mov	r9, r1
 801b7be:	4b5e      	ldr	r3, [pc, #376]	@ (801b938 <__ieee754_pow+0x790>)
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	4620      	mov	r0, r4
 801b7c4:	4629      	mov	r1, r5
 801b7c6:	f7e4 fd8f 	bl	80002e8 <__aeabi_dsub>
 801b7ca:	4632      	mov	r2, r6
 801b7cc:	463b      	mov	r3, r7
 801b7ce:	f7e4 fd8b 	bl	80002e8 <__aeabi_dsub>
 801b7d2:	4602      	mov	r2, r0
 801b7d4:	460b      	mov	r3, r1
 801b7d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b7da:	f7e4 fd85 	bl	80002e8 <__aeabi_dsub>
 801b7de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b7e2:	f7e4 ff39 	bl	8000658 <__aeabi_dmul>
 801b7e6:	4622      	mov	r2, r4
 801b7e8:	4606      	mov	r6, r0
 801b7ea:	460f      	mov	r7, r1
 801b7ec:	462b      	mov	r3, r5
 801b7ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b7f2:	f7e4 ff31 	bl	8000658 <__aeabi_dmul>
 801b7f6:	4602      	mov	r2, r0
 801b7f8:	460b      	mov	r3, r1
 801b7fa:	4630      	mov	r0, r6
 801b7fc:	4639      	mov	r1, r7
 801b7fe:	f7e4 fd75 	bl	80002ec <__adddf3>
 801b802:	4606      	mov	r6, r0
 801b804:	460f      	mov	r7, r1
 801b806:	4602      	mov	r2, r0
 801b808:	460b      	mov	r3, r1
 801b80a:	4640      	mov	r0, r8
 801b80c:	4649      	mov	r1, r9
 801b80e:	f7e4 fd6d 	bl	80002ec <__adddf3>
 801b812:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801b816:	a33c      	add	r3, pc, #240	@ (adr r3, 801b908 <__ieee754_pow+0x760>)
 801b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b81c:	4658      	mov	r0, fp
 801b81e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801b822:	460d      	mov	r5, r1
 801b824:	f7e4 ff18 	bl	8000658 <__aeabi_dmul>
 801b828:	465c      	mov	r4, fp
 801b82a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b82e:	4642      	mov	r2, r8
 801b830:	464b      	mov	r3, r9
 801b832:	4620      	mov	r0, r4
 801b834:	4629      	mov	r1, r5
 801b836:	f7e4 fd57 	bl	80002e8 <__aeabi_dsub>
 801b83a:	4602      	mov	r2, r0
 801b83c:	460b      	mov	r3, r1
 801b83e:	4630      	mov	r0, r6
 801b840:	4639      	mov	r1, r7
 801b842:	f7e4 fd51 	bl	80002e8 <__aeabi_dsub>
 801b846:	a332      	add	r3, pc, #200	@ (adr r3, 801b910 <__ieee754_pow+0x768>)
 801b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b84c:	f7e4 ff04 	bl	8000658 <__aeabi_dmul>
 801b850:	a331      	add	r3, pc, #196	@ (adr r3, 801b918 <__ieee754_pow+0x770>)
 801b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b856:	4606      	mov	r6, r0
 801b858:	460f      	mov	r7, r1
 801b85a:	4620      	mov	r0, r4
 801b85c:	4629      	mov	r1, r5
 801b85e:	f7e4 fefb 	bl	8000658 <__aeabi_dmul>
 801b862:	4602      	mov	r2, r0
 801b864:	460b      	mov	r3, r1
 801b866:	4630      	mov	r0, r6
 801b868:	4639      	mov	r1, r7
 801b86a:	f7e4 fd3f 	bl	80002ec <__adddf3>
 801b86e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b870:	4b32      	ldr	r3, [pc, #200]	@ (801b93c <__ieee754_pow+0x794>)
 801b872:	4413      	add	r3, r2
 801b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b878:	f7e4 fd38 	bl	80002ec <__adddf3>
 801b87c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b880:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b882:	f7e4 fe7f 	bl	8000584 <__aeabi_i2d>
 801b886:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b888:	4b2d      	ldr	r3, [pc, #180]	@ (801b940 <__ieee754_pow+0x798>)
 801b88a:	4413      	add	r3, r2
 801b88c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b890:	4606      	mov	r6, r0
 801b892:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b896:	460f      	mov	r7, r1
 801b898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b89c:	f7e4 fd26 	bl	80002ec <__adddf3>
 801b8a0:	4642      	mov	r2, r8
 801b8a2:	464b      	mov	r3, r9
 801b8a4:	f7e4 fd22 	bl	80002ec <__adddf3>
 801b8a8:	4632      	mov	r2, r6
 801b8aa:	463b      	mov	r3, r7
 801b8ac:	f7e4 fd1e 	bl	80002ec <__adddf3>
 801b8b0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801b8b4:	4632      	mov	r2, r6
 801b8b6:	463b      	mov	r3, r7
 801b8b8:	4658      	mov	r0, fp
 801b8ba:	460d      	mov	r5, r1
 801b8bc:	f7e4 fd14 	bl	80002e8 <__aeabi_dsub>
 801b8c0:	4642      	mov	r2, r8
 801b8c2:	464b      	mov	r3, r9
 801b8c4:	f7e4 fd10 	bl	80002e8 <__aeabi_dsub>
 801b8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b8cc:	f7e4 fd0c 	bl	80002e8 <__aeabi_dsub>
 801b8d0:	465c      	mov	r4, fp
 801b8d2:	4602      	mov	r2, r0
 801b8d4:	e036      	b.n	801b944 <__ieee754_pow+0x79c>
 801b8d6:	bf00      	nop
 801b8d8:	4a454eef 	.word	0x4a454eef
 801b8dc:	3fca7e28 	.word	0x3fca7e28
 801b8e0:	93c9db65 	.word	0x93c9db65
 801b8e4:	3fcd864a 	.word	0x3fcd864a
 801b8e8:	a91d4101 	.word	0xa91d4101
 801b8ec:	3fd17460 	.word	0x3fd17460
 801b8f0:	518f264d 	.word	0x518f264d
 801b8f4:	3fd55555 	.word	0x3fd55555
 801b8f8:	db6fabff 	.word	0xdb6fabff
 801b8fc:	3fdb6db6 	.word	0x3fdb6db6
 801b900:	33333303 	.word	0x33333303
 801b904:	3fe33333 	.word	0x3fe33333
 801b908:	e0000000 	.word	0xe0000000
 801b90c:	3feec709 	.word	0x3feec709
 801b910:	dc3a03fd 	.word	0xdc3a03fd
 801b914:	3feec709 	.word	0x3feec709
 801b918:	145b01f5 	.word	0x145b01f5
 801b91c:	be3e2fe0 	.word	0xbe3e2fe0
 801b920:	7ff00000 	.word	0x7ff00000
 801b924:	43400000 	.word	0x43400000
 801b928:	0003988e 	.word	0x0003988e
 801b92c:	000bb679 	.word	0x000bb679
 801b930:	08029070 	.word	0x08029070
 801b934:	3ff00000 	.word	0x3ff00000
 801b938:	40080000 	.word	0x40080000
 801b93c:	08029050 	.word	0x08029050
 801b940:	08029060 	.word	0x08029060
 801b944:	460b      	mov	r3, r1
 801b946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b94a:	e5d7      	b.n	801b4fc <__ieee754_pow+0x354>
 801b94c:	f04f 0a01 	mov.w	sl, #1
 801b950:	e65e      	b.n	801b610 <__ieee754_pow+0x468>
 801b952:	a3b4      	add	r3, pc, #720	@ (adr r3, 801bc24 <__ieee754_pow+0xa7c>)
 801b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b958:	4630      	mov	r0, r6
 801b95a:	4639      	mov	r1, r7
 801b95c:	f7e4 fcc6 	bl	80002ec <__adddf3>
 801b960:	4642      	mov	r2, r8
 801b962:	e9cd 0100 	strd	r0, r1, [sp]
 801b966:	464b      	mov	r3, r9
 801b968:	4620      	mov	r0, r4
 801b96a:	4629      	mov	r1, r5
 801b96c:	f7e4 fcbc 	bl	80002e8 <__aeabi_dsub>
 801b970:	4602      	mov	r2, r0
 801b972:	460b      	mov	r3, r1
 801b974:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b978:	f7e5 f8fe 	bl	8000b78 <__aeabi_dcmpgt>
 801b97c:	2800      	cmp	r0, #0
 801b97e:	f47f ae00 	bne.w	801b582 <__ieee754_pow+0x3da>
 801b982:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801b986:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801b98a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801b98e:	fa43 fa0a 	asr.w	sl, r3, sl
 801b992:	44da      	add	sl, fp
 801b994:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801b998:	489d      	ldr	r0, [pc, #628]	@ (801bc10 <__ieee754_pow+0xa68>)
 801b99a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801b99e:	4108      	asrs	r0, r1
 801b9a0:	ea00 030a 	and.w	r3, r0, sl
 801b9a4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801b9a8:	f1c1 0114 	rsb	r1, r1, #20
 801b9ac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801b9b0:	fa4a fa01 	asr.w	sl, sl, r1
 801b9b4:	f1bb 0f00 	cmp.w	fp, #0
 801b9b8:	4640      	mov	r0, r8
 801b9ba:	4649      	mov	r1, r9
 801b9bc:	f04f 0200 	mov.w	r2, #0
 801b9c0:	bfb8      	it	lt
 801b9c2:	f1ca 0a00 	rsblt	sl, sl, #0
 801b9c6:	f7e4 fc8f 	bl	80002e8 <__aeabi_dsub>
 801b9ca:	4680      	mov	r8, r0
 801b9cc:	4689      	mov	r9, r1
 801b9ce:	4632      	mov	r2, r6
 801b9d0:	463b      	mov	r3, r7
 801b9d2:	4640      	mov	r0, r8
 801b9d4:	4649      	mov	r1, r9
 801b9d6:	f7e4 fc89 	bl	80002ec <__adddf3>
 801b9da:	2400      	movs	r4, #0
 801b9dc:	a37c      	add	r3, pc, #496	@ (adr r3, 801bbd0 <__ieee754_pow+0xa28>)
 801b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9e2:	4620      	mov	r0, r4
 801b9e4:	460d      	mov	r5, r1
 801b9e6:	f7e4 fe37 	bl	8000658 <__aeabi_dmul>
 801b9ea:	4642      	mov	r2, r8
 801b9ec:	e9cd 0100 	strd	r0, r1, [sp]
 801b9f0:	464b      	mov	r3, r9
 801b9f2:	4620      	mov	r0, r4
 801b9f4:	4629      	mov	r1, r5
 801b9f6:	f7e4 fc77 	bl	80002e8 <__aeabi_dsub>
 801b9fa:	4602      	mov	r2, r0
 801b9fc:	460b      	mov	r3, r1
 801b9fe:	4630      	mov	r0, r6
 801ba00:	4639      	mov	r1, r7
 801ba02:	f7e4 fc71 	bl	80002e8 <__aeabi_dsub>
 801ba06:	a374      	add	r3, pc, #464	@ (adr r3, 801bbd8 <__ieee754_pow+0xa30>)
 801ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba0c:	f7e4 fe24 	bl	8000658 <__aeabi_dmul>
 801ba10:	a373      	add	r3, pc, #460	@ (adr r3, 801bbe0 <__ieee754_pow+0xa38>)
 801ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba16:	4680      	mov	r8, r0
 801ba18:	4689      	mov	r9, r1
 801ba1a:	4620      	mov	r0, r4
 801ba1c:	4629      	mov	r1, r5
 801ba1e:	f7e4 fe1b 	bl	8000658 <__aeabi_dmul>
 801ba22:	4602      	mov	r2, r0
 801ba24:	460b      	mov	r3, r1
 801ba26:	4640      	mov	r0, r8
 801ba28:	4649      	mov	r1, r9
 801ba2a:	f7e4 fc5f 	bl	80002ec <__adddf3>
 801ba2e:	4604      	mov	r4, r0
 801ba30:	460d      	mov	r5, r1
 801ba32:	4602      	mov	r2, r0
 801ba34:	460b      	mov	r3, r1
 801ba36:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ba3a:	f7e4 fc57 	bl	80002ec <__adddf3>
 801ba3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ba42:	4680      	mov	r8, r0
 801ba44:	4689      	mov	r9, r1
 801ba46:	f7e4 fc4f 	bl	80002e8 <__aeabi_dsub>
 801ba4a:	4602      	mov	r2, r0
 801ba4c:	460b      	mov	r3, r1
 801ba4e:	4620      	mov	r0, r4
 801ba50:	4629      	mov	r1, r5
 801ba52:	f7e4 fc49 	bl	80002e8 <__aeabi_dsub>
 801ba56:	4642      	mov	r2, r8
 801ba58:	4606      	mov	r6, r0
 801ba5a:	460f      	mov	r7, r1
 801ba5c:	464b      	mov	r3, r9
 801ba5e:	4640      	mov	r0, r8
 801ba60:	4649      	mov	r1, r9
 801ba62:	f7e4 fdf9 	bl	8000658 <__aeabi_dmul>
 801ba66:	a360      	add	r3, pc, #384	@ (adr r3, 801bbe8 <__ieee754_pow+0xa40>)
 801ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba6c:	4604      	mov	r4, r0
 801ba6e:	460d      	mov	r5, r1
 801ba70:	f7e4 fdf2 	bl	8000658 <__aeabi_dmul>
 801ba74:	a35e      	add	r3, pc, #376	@ (adr r3, 801bbf0 <__ieee754_pow+0xa48>)
 801ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba7a:	f7e4 fc35 	bl	80002e8 <__aeabi_dsub>
 801ba7e:	4622      	mov	r2, r4
 801ba80:	462b      	mov	r3, r5
 801ba82:	f7e4 fde9 	bl	8000658 <__aeabi_dmul>
 801ba86:	a35c      	add	r3, pc, #368	@ (adr r3, 801bbf8 <__ieee754_pow+0xa50>)
 801ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba8c:	f7e4 fc2e 	bl	80002ec <__adddf3>
 801ba90:	4622      	mov	r2, r4
 801ba92:	462b      	mov	r3, r5
 801ba94:	f7e4 fde0 	bl	8000658 <__aeabi_dmul>
 801ba98:	a359      	add	r3, pc, #356	@ (adr r3, 801bc00 <__ieee754_pow+0xa58>)
 801ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba9e:	f7e4 fc23 	bl	80002e8 <__aeabi_dsub>
 801baa2:	4622      	mov	r2, r4
 801baa4:	462b      	mov	r3, r5
 801baa6:	f7e4 fdd7 	bl	8000658 <__aeabi_dmul>
 801baaa:	a357      	add	r3, pc, #348	@ (adr r3, 801bc08 <__ieee754_pow+0xa60>)
 801baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bab0:	f7e4 fc1c 	bl	80002ec <__adddf3>
 801bab4:	4622      	mov	r2, r4
 801bab6:	462b      	mov	r3, r5
 801bab8:	f7e4 fdce 	bl	8000658 <__aeabi_dmul>
 801babc:	4602      	mov	r2, r0
 801babe:	460b      	mov	r3, r1
 801bac0:	4640      	mov	r0, r8
 801bac2:	4649      	mov	r1, r9
 801bac4:	f7e4 fc10 	bl	80002e8 <__aeabi_dsub>
 801bac8:	4604      	mov	r4, r0
 801baca:	460d      	mov	r5, r1
 801bacc:	4602      	mov	r2, r0
 801bace:	460b      	mov	r3, r1
 801bad0:	4640      	mov	r0, r8
 801bad2:	4649      	mov	r1, r9
 801bad4:	f7e4 fdc0 	bl	8000658 <__aeabi_dmul>
 801bad8:	2200      	movs	r2, #0
 801bada:	e9cd 0100 	strd	r0, r1, [sp]
 801bade:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801bae2:	4620      	mov	r0, r4
 801bae4:	4629      	mov	r1, r5
 801bae6:	f7e4 fbff 	bl	80002e8 <__aeabi_dsub>
 801baea:	4602      	mov	r2, r0
 801baec:	460b      	mov	r3, r1
 801baee:	e9dd 0100 	ldrd	r0, r1, [sp]
 801baf2:	f7e4 fedb 	bl	80008ac <__aeabi_ddiv>
 801baf6:	4632      	mov	r2, r6
 801baf8:	4604      	mov	r4, r0
 801bafa:	460d      	mov	r5, r1
 801bafc:	463b      	mov	r3, r7
 801bafe:	4640      	mov	r0, r8
 801bb00:	4649      	mov	r1, r9
 801bb02:	f7e4 fda9 	bl	8000658 <__aeabi_dmul>
 801bb06:	4632      	mov	r2, r6
 801bb08:	463b      	mov	r3, r7
 801bb0a:	f7e4 fbef 	bl	80002ec <__adddf3>
 801bb0e:	4602      	mov	r2, r0
 801bb10:	460b      	mov	r3, r1
 801bb12:	4620      	mov	r0, r4
 801bb14:	4629      	mov	r1, r5
 801bb16:	f7e4 fbe7 	bl	80002e8 <__aeabi_dsub>
 801bb1a:	4642      	mov	r2, r8
 801bb1c:	464b      	mov	r3, r9
 801bb1e:	f7e4 fbe3 	bl	80002e8 <__aeabi_dsub>
 801bb22:	460b      	mov	r3, r1
 801bb24:	4602      	mov	r2, r0
 801bb26:	493b      	ldr	r1, [pc, #236]	@ (801bc14 <__ieee754_pow+0xa6c>)
 801bb28:	2000      	movs	r0, #0
 801bb2a:	f7e4 fbdd 	bl	80002e8 <__aeabi_dsub>
 801bb2e:	ec41 0b10 	vmov	d0, r0, r1
 801bb32:	ee10 3a90 	vmov	r3, s1
 801bb36:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801bb3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801bb3e:	da30      	bge.n	801bba2 <__ieee754_pow+0x9fa>
 801bb40:	4650      	mov	r0, sl
 801bb42:	f000 fe69 	bl	801c818 <scalbn>
 801bb46:	ec51 0b10 	vmov	r0, r1, d0
 801bb4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bb4e:	f7ff bbd2 	b.w	801b2f6 <__ieee754_pow+0x14e>
 801bb52:	4c31      	ldr	r4, [pc, #196]	@ (801bc18 <__ieee754_pow+0xa70>)
 801bb54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801bb58:	42a3      	cmp	r3, r4
 801bb5a:	d91a      	bls.n	801bb92 <__ieee754_pow+0x9ea>
 801bb5c:	4b2f      	ldr	r3, [pc, #188]	@ (801bc1c <__ieee754_pow+0xa74>)
 801bb5e:	440b      	add	r3, r1
 801bb60:	4303      	orrs	r3, r0
 801bb62:	d009      	beq.n	801bb78 <__ieee754_pow+0x9d0>
 801bb64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb68:	2200      	movs	r2, #0
 801bb6a:	2300      	movs	r3, #0
 801bb6c:	f7e4 ffe6 	bl	8000b3c <__aeabi_dcmplt>
 801bb70:	3800      	subs	r0, #0
 801bb72:	bf18      	it	ne
 801bb74:	2001      	movne	r0, #1
 801bb76:	e42b      	b.n	801b3d0 <__ieee754_pow+0x228>
 801bb78:	4642      	mov	r2, r8
 801bb7a:	464b      	mov	r3, r9
 801bb7c:	f7e4 fbb4 	bl	80002e8 <__aeabi_dsub>
 801bb80:	4632      	mov	r2, r6
 801bb82:	463b      	mov	r3, r7
 801bb84:	f7e4 ffee 	bl	8000b64 <__aeabi_dcmpge>
 801bb88:	2800      	cmp	r0, #0
 801bb8a:	d1eb      	bne.n	801bb64 <__ieee754_pow+0x9bc>
 801bb8c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801bc2c <__ieee754_pow+0xa84>
 801bb90:	e6f7      	b.n	801b982 <__ieee754_pow+0x7da>
 801bb92:	469a      	mov	sl, r3
 801bb94:	4b22      	ldr	r3, [pc, #136]	@ (801bc20 <__ieee754_pow+0xa78>)
 801bb96:	459a      	cmp	sl, r3
 801bb98:	f63f aef3 	bhi.w	801b982 <__ieee754_pow+0x7da>
 801bb9c:	f8dd a010 	ldr.w	sl, [sp, #16]
 801bba0:	e715      	b.n	801b9ce <__ieee754_pow+0x826>
 801bba2:	ec51 0b10 	vmov	r0, r1, d0
 801bba6:	4619      	mov	r1, r3
 801bba8:	e7cf      	b.n	801bb4a <__ieee754_pow+0x9a2>
 801bbaa:	491a      	ldr	r1, [pc, #104]	@ (801bc14 <__ieee754_pow+0xa6c>)
 801bbac:	2000      	movs	r0, #0
 801bbae:	f7ff bb18 	b.w	801b1e2 <__ieee754_pow+0x3a>
 801bbb2:	2000      	movs	r0, #0
 801bbb4:	2100      	movs	r1, #0
 801bbb6:	f7ff bb14 	b.w	801b1e2 <__ieee754_pow+0x3a>
 801bbba:	4630      	mov	r0, r6
 801bbbc:	4639      	mov	r1, r7
 801bbbe:	f7ff bb10 	b.w	801b1e2 <__ieee754_pow+0x3a>
 801bbc2:	460c      	mov	r4, r1
 801bbc4:	f7ff bb5e 	b.w	801b284 <__ieee754_pow+0xdc>
 801bbc8:	2400      	movs	r4, #0
 801bbca:	f7ff bb49 	b.w	801b260 <__ieee754_pow+0xb8>
 801bbce:	bf00      	nop
 801bbd0:	00000000 	.word	0x00000000
 801bbd4:	3fe62e43 	.word	0x3fe62e43
 801bbd8:	fefa39ef 	.word	0xfefa39ef
 801bbdc:	3fe62e42 	.word	0x3fe62e42
 801bbe0:	0ca86c39 	.word	0x0ca86c39
 801bbe4:	be205c61 	.word	0xbe205c61
 801bbe8:	72bea4d0 	.word	0x72bea4d0
 801bbec:	3e663769 	.word	0x3e663769
 801bbf0:	c5d26bf1 	.word	0xc5d26bf1
 801bbf4:	3ebbbd41 	.word	0x3ebbbd41
 801bbf8:	af25de2c 	.word	0xaf25de2c
 801bbfc:	3f11566a 	.word	0x3f11566a
 801bc00:	16bebd93 	.word	0x16bebd93
 801bc04:	3f66c16c 	.word	0x3f66c16c
 801bc08:	5555553e 	.word	0x5555553e
 801bc0c:	3fc55555 	.word	0x3fc55555
 801bc10:	fff00000 	.word	0xfff00000
 801bc14:	3ff00000 	.word	0x3ff00000
 801bc18:	4090cbff 	.word	0x4090cbff
 801bc1c:	3f6f3400 	.word	0x3f6f3400
 801bc20:	3fe00000 	.word	0x3fe00000
 801bc24:	652b82fe 	.word	0x652b82fe
 801bc28:	3c971547 	.word	0x3c971547
 801bc2c:	4090cc00 	.word	0x4090cc00

0801bc30 <__ieee754_rem_pio2>:
 801bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc34:	ec57 6b10 	vmov	r6, r7, d0
 801bc38:	4bc5      	ldr	r3, [pc, #788]	@ (801bf50 <__ieee754_rem_pio2+0x320>)
 801bc3a:	b08d      	sub	sp, #52	@ 0x34
 801bc3c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801bc40:	4598      	cmp	r8, r3
 801bc42:	4604      	mov	r4, r0
 801bc44:	9704      	str	r7, [sp, #16]
 801bc46:	d807      	bhi.n	801bc58 <__ieee754_rem_pio2+0x28>
 801bc48:	2200      	movs	r2, #0
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	ed80 0b00 	vstr	d0, [r0]
 801bc50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801bc54:	2500      	movs	r5, #0
 801bc56:	e028      	b.n	801bcaa <__ieee754_rem_pio2+0x7a>
 801bc58:	4bbe      	ldr	r3, [pc, #760]	@ (801bf54 <__ieee754_rem_pio2+0x324>)
 801bc5a:	4598      	cmp	r8, r3
 801bc5c:	d878      	bhi.n	801bd50 <__ieee754_rem_pio2+0x120>
 801bc5e:	9b04      	ldr	r3, [sp, #16]
 801bc60:	4dbd      	ldr	r5, [pc, #756]	@ (801bf58 <__ieee754_rem_pio2+0x328>)
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	4630      	mov	r0, r6
 801bc66:	a3ac      	add	r3, pc, #688	@ (adr r3, 801bf18 <__ieee754_rem_pio2+0x2e8>)
 801bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc6c:	4639      	mov	r1, r7
 801bc6e:	dd38      	ble.n	801bce2 <__ieee754_rem_pio2+0xb2>
 801bc70:	f7e4 fb3a 	bl	80002e8 <__aeabi_dsub>
 801bc74:	45a8      	cmp	r8, r5
 801bc76:	4606      	mov	r6, r0
 801bc78:	460f      	mov	r7, r1
 801bc7a:	d01a      	beq.n	801bcb2 <__ieee754_rem_pio2+0x82>
 801bc7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801bf20 <__ieee754_rem_pio2+0x2f0>)
 801bc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc82:	f7e4 fb31 	bl	80002e8 <__aeabi_dsub>
 801bc86:	4602      	mov	r2, r0
 801bc88:	460b      	mov	r3, r1
 801bc8a:	4680      	mov	r8, r0
 801bc8c:	4689      	mov	r9, r1
 801bc8e:	4630      	mov	r0, r6
 801bc90:	4639      	mov	r1, r7
 801bc92:	f7e4 fb29 	bl	80002e8 <__aeabi_dsub>
 801bc96:	a3a2      	add	r3, pc, #648	@ (adr r3, 801bf20 <__ieee754_rem_pio2+0x2f0>)
 801bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc9c:	f7e4 fb24 	bl	80002e8 <__aeabi_dsub>
 801bca0:	e9c4 8900 	strd	r8, r9, [r4]
 801bca4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801bca8:	2501      	movs	r5, #1
 801bcaa:	4628      	mov	r0, r5
 801bcac:	b00d      	add	sp, #52	@ 0x34
 801bcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcb2:	a39d      	add	r3, pc, #628	@ (adr r3, 801bf28 <__ieee754_rem_pio2+0x2f8>)
 801bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcb8:	f7e4 fb16 	bl	80002e8 <__aeabi_dsub>
 801bcbc:	a39c      	add	r3, pc, #624	@ (adr r3, 801bf30 <__ieee754_rem_pio2+0x300>)
 801bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc2:	4606      	mov	r6, r0
 801bcc4:	460f      	mov	r7, r1
 801bcc6:	f7e4 fb0f 	bl	80002e8 <__aeabi_dsub>
 801bcca:	4602      	mov	r2, r0
 801bccc:	460b      	mov	r3, r1
 801bcce:	4680      	mov	r8, r0
 801bcd0:	4689      	mov	r9, r1
 801bcd2:	4630      	mov	r0, r6
 801bcd4:	4639      	mov	r1, r7
 801bcd6:	f7e4 fb07 	bl	80002e8 <__aeabi_dsub>
 801bcda:	a395      	add	r3, pc, #596	@ (adr r3, 801bf30 <__ieee754_rem_pio2+0x300>)
 801bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bce0:	e7dc      	b.n	801bc9c <__ieee754_rem_pio2+0x6c>
 801bce2:	f7e4 fb03 	bl	80002ec <__adddf3>
 801bce6:	45a8      	cmp	r8, r5
 801bce8:	4606      	mov	r6, r0
 801bcea:	460f      	mov	r7, r1
 801bcec:	d018      	beq.n	801bd20 <__ieee754_rem_pio2+0xf0>
 801bcee:	a38c      	add	r3, pc, #560	@ (adr r3, 801bf20 <__ieee754_rem_pio2+0x2f0>)
 801bcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf4:	f7e4 fafa 	bl	80002ec <__adddf3>
 801bcf8:	4602      	mov	r2, r0
 801bcfa:	460b      	mov	r3, r1
 801bcfc:	4680      	mov	r8, r0
 801bcfe:	4689      	mov	r9, r1
 801bd00:	4630      	mov	r0, r6
 801bd02:	4639      	mov	r1, r7
 801bd04:	f7e4 faf0 	bl	80002e8 <__aeabi_dsub>
 801bd08:	a385      	add	r3, pc, #532	@ (adr r3, 801bf20 <__ieee754_rem_pio2+0x2f0>)
 801bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd0e:	f7e4 faed 	bl	80002ec <__adddf3>
 801bd12:	f04f 35ff 	mov.w	r5, #4294967295
 801bd16:	e9c4 8900 	strd	r8, r9, [r4]
 801bd1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801bd1e:	e7c4      	b.n	801bcaa <__ieee754_rem_pio2+0x7a>
 801bd20:	a381      	add	r3, pc, #516	@ (adr r3, 801bf28 <__ieee754_rem_pio2+0x2f8>)
 801bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd26:	f7e4 fae1 	bl	80002ec <__adddf3>
 801bd2a:	a381      	add	r3, pc, #516	@ (adr r3, 801bf30 <__ieee754_rem_pio2+0x300>)
 801bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd30:	4606      	mov	r6, r0
 801bd32:	460f      	mov	r7, r1
 801bd34:	f7e4 fada 	bl	80002ec <__adddf3>
 801bd38:	4602      	mov	r2, r0
 801bd3a:	460b      	mov	r3, r1
 801bd3c:	4680      	mov	r8, r0
 801bd3e:	4689      	mov	r9, r1
 801bd40:	4630      	mov	r0, r6
 801bd42:	4639      	mov	r1, r7
 801bd44:	f7e4 fad0 	bl	80002e8 <__aeabi_dsub>
 801bd48:	a379      	add	r3, pc, #484	@ (adr r3, 801bf30 <__ieee754_rem_pio2+0x300>)
 801bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd4e:	e7de      	b.n	801bd0e <__ieee754_rem_pio2+0xde>
 801bd50:	4b82      	ldr	r3, [pc, #520]	@ (801bf5c <__ieee754_rem_pio2+0x32c>)
 801bd52:	4598      	cmp	r8, r3
 801bd54:	f200 80d1 	bhi.w	801befa <__ieee754_rem_pio2+0x2ca>
 801bd58:	f000 f966 	bl	801c028 <fabs>
 801bd5c:	ec57 6b10 	vmov	r6, r7, d0
 801bd60:	a375      	add	r3, pc, #468	@ (adr r3, 801bf38 <__ieee754_rem_pio2+0x308>)
 801bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd66:	4630      	mov	r0, r6
 801bd68:	4639      	mov	r1, r7
 801bd6a:	f7e4 fc75 	bl	8000658 <__aeabi_dmul>
 801bd6e:	4b7c      	ldr	r3, [pc, #496]	@ (801bf60 <__ieee754_rem_pio2+0x330>)
 801bd70:	2200      	movs	r2, #0
 801bd72:	f7e4 fabb 	bl	80002ec <__adddf3>
 801bd76:	f7e4 ff1f 	bl	8000bb8 <__aeabi_d2iz>
 801bd7a:	4605      	mov	r5, r0
 801bd7c:	f7e4 fc02 	bl	8000584 <__aeabi_i2d>
 801bd80:	4602      	mov	r2, r0
 801bd82:	460b      	mov	r3, r1
 801bd84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bd88:	a363      	add	r3, pc, #396	@ (adr r3, 801bf18 <__ieee754_rem_pio2+0x2e8>)
 801bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd8e:	f7e4 fc63 	bl	8000658 <__aeabi_dmul>
 801bd92:	4602      	mov	r2, r0
 801bd94:	460b      	mov	r3, r1
 801bd96:	4630      	mov	r0, r6
 801bd98:	4639      	mov	r1, r7
 801bd9a:	f7e4 faa5 	bl	80002e8 <__aeabi_dsub>
 801bd9e:	a360      	add	r3, pc, #384	@ (adr r3, 801bf20 <__ieee754_rem_pio2+0x2f0>)
 801bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bda4:	4682      	mov	sl, r0
 801bda6:	468b      	mov	fp, r1
 801bda8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdac:	f7e4 fc54 	bl	8000658 <__aeabi_dmul>
 801bdb0:	2d1f      	cmp	r5, #31
 801bdb2:	4606      	mov	r6, r0
 801bdb4:	460f      	mov	r7, r1
 801bdb6:	dc0c      	bgt.n	801bdd2 <__ieee754_rem_pio2+0x1a2>
 801bdb8:	4b6a      	ldr	r3, [pc, #424]	@ (801bf64 <__ieee754_rem_pio2+0x334>)
 801bdba:	1e6a      	subs	r2, r5, #1
 801bdbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bdc0:	4543      	cmp	r3, r8
 801bdc2:	d006      	beq.n	801bdd2 <__ieee754_rem_pio2+0x1a2>
 801bdc4:	4632      	mov	r2, r6
 801bdc6:	463b      	mov	r3, r7
 801bdc8:	4650      	mov	r0, sl
 801bdca:	4659      	mov	r1, fp
 801bdcc:	f7e4 fa8c 	bl	80002e8 <__aeabi_dsub>
 801bdd0:	e00e      	b.n	801bdf0 <__ieee754_rem_pio2+0x1c0>
 801bdd2:	463b      	mov	r3, r7
 801bdd4:	4632      	mov	r2, r6
 801bdd6:	4650      	mov	r0, sl
 801bdd8:	4659      	mov	r1, fp
 801bdda:	f7e4 fa85 	bl	80002e8 <__aeabi_dsub>
 801bdde:	ea4f 5328 	mov.w	r3, r8, asr #20
 801bde2:	9305      	str	r3, [sp, #20]
 801bde4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801bde8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801bdec:	2b10      	cmp	r3, #16
 801bdee:	dc02      	bgt.n	801bdf6 <__ieee754_rem_pio2+0x1c6>
 801bdf0:	e9c4 0100 	strd	r0, r1, [r4]
 801bdf4:	e039      	b.n	801be6a <__ieee754_rem_pio2+0x23a>
 801bdf6:	a34c      	add	r3, pc, #304	@ (adr r3, 801bf28 <__ieee754_rem_pio2+0x2f8>)
 801bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be00:	f7e4 fc2a 	bl	8000658 <__aeabi_dmul>
 801be04:	4606      	mov	r6, r0
 801be06:	460f      	mov	r7, r1
 801be08:	4602      	mov	r2, r0
 801be0a:	460b      	mov	r3, r1
 801be0c:	4650      	mov	r0, sl
 801be0e:	4659      	mov	r1, fp
 801be10:	f7e4 fa6a 	bl	80002e8 <__aeabi_dsub>
 801be14:	4602      	mov	r2, r0
 801be16:	460b      	mov	r3, r1
 801be18:	4680      	mov	r8, r0
 801be1a:	4689      	mov	r9, r1
 801be1c:	4650      	mov	r0, sl
 801be1e:	4659      	mov	r1, fp
 801be20:	f7e4 fa62 	bl	80002e8 <__aeabi_dsub>
 801be24:	4632      	mov	r2, r6
 801be26:	463b      	mov	r3, r7
 801be28:	f7e4 fa5e 	bl	80002e8 <__aeabi_dsub>
 801be2c:	a340      	add	r3, pc, #256	@ (adr r3, 801bf30 <__ieee754_rem_pio2+0x300>)
 801be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be32:	4606      	mov	r6, r0
 801be34:	460f      	mov	r7, r1
 801be36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be3a:	f7e4 fc0d 	bl	8000658 <__aeabi_dmul>
 801be3e:	4632      	mov	r2, r6
 801be40:	463b      	mov	r3, r7
 801be42:	f7e4 fa51 	bl	80002e8 <__aeabi_dsub>
 801be46:	4602      	mov	r2, r0
 801be48:	460b      	mov	r3, r1
 801be4a:	4606      	mov	r6, r0
 801be4c:	460f      	mov	r7, r1
 801be4e:	4640      	mov	r0, r8
 801be50:	4649      	mov	r1, r9
 801be52:	f7e4 fa49 	bl	80002e8 <__aeabi_dsub>
 801be56:	9a05      	ldr	r2, [sp, #20]
 801be58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801be5c:	1ad3      	subs	r3, r2, r3
 801be5e:	2b31      	cmp	r3, #49	@ 0x31
 801be60:	dc20      	bgt.n	801bea4 <__ieee754_rem_pio2+0x274>
 801be62:	e9c4 0100 	strd	r0, r1, [r4]
 801be66:	46c2      	mov	sl, r8
 801be68:	46cb      	mov	fp, r9
 801be6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801be6e:	4650      	mov	r0, sl
 801be70:	4642      	mov	r2, r8
 801be72:	464b      	mov	r3, r9
 801be74:	4659      	mov	r1, fp
 801be76:	f7e4 fa37 	bl	80002e8 <__aeabi_dsub>
 801be7a:	463b      	mov	r3, r7
 801be7c:	4632      	mov	r2, r6
 801be7e:	f7e4 fa33 	bl	80002e8 <__aeabi_dsub>
 801be82:	9b04      	ldr	r3, [sp, #16]
 801be84:	2b00      	cmp	r3, #0
 801be86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801be8a:	f6bf af0e 	bge.w	801bcaa <__ieee754_rem_pio2+0x7a>
 801be8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801be92:	6063      	str	r3, [r4, #4]
 801be94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801be98:	f8c4 8000 	str.w	r8, [r4]
 801be9c:	60a0      	str	r0, [r4, #8]
 801be9e:	60e3      	str	r3, [r4, #12]
 801bea0:	426d      	negs	r5, r5
 801bea2:	e702      	b.n	801bcaa <__ieee754_rem_pio2+0x7a>
 801bea4:	a326      	add	r3, pc, #152	@ (adr r3, 801bf40 <__ieee754_rem_pio2+0x310>)
 801bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801beae:	f7e4 fbd3 	bl	8000658 <__aeabi_dmul>
 801beb2:	4606      	mov	r6, r0
 801beb4:	460f      	mov	r7, r1
 801beb6:	4602      	mov	r2, r0
 801beb8:	460b      	mov	r3, r1
 801beba:	4640      	mov	r0, r8
 801bebc:	4649      	mov	r1, r9
 801bebe:	f7e4 fa13 	bl	80002e8 <__aeabi_dsub>
 801bec2:	4602      	mov	r2, r0
 801bec4:	460b      	mov	r3, r1
 801bec6:	4682      	mov	sl, r0
 801bec8:	468b      	mov	fp, r1
 801beca:	4640      	mov	r0, r8
 801becc:	4649      	mov	r1, r9
 801bece:	f7e4 fa0b 	bl	80002e8 <__aeabi_dsub>
 801bed2:	4632      	mov	r2, r6
 801bed4:	463b      	mov	r3, r7
 801bed6:	f7e4 fa07 	bl	80002e8 <__aeabi_dsub>
 801beda:	a31b      	add	r3, pc, #108	@ (adr r3, 801bf48 <__ieee754_rem_pio2+0x318>)
 801bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bee0:	4606      	mov	r6, r0
 801bee2:	460f      	mov	r7, r1
 801bee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bee8:	f7e4 fbb6 	bl	8000658 <__aeabi_dmul>
 801beec:	4632      	mov	r2, r6
 801beee:	463b      	mov	r3, r7
 801bef0:	f7e4 f9fa 	bl	80002e8 <__aeabi_dsub>
 801bef4:	4606      	mov	r6, r0
 801bef6:	460f      	mov	r7, r1
 801bef8:	e764      	b.n	801bdc4 <__ieee754_rem_pio2+0x194>
 801befa:	4b1b      	ldr	r3, [pc, #108]	@ (801bf68 <__ieee754_rem_pio2+0x338>)
 801befc:	4598      	cmp	r8, r3
 801befe:	d935      	bls.n	801bf6c <__ieee754_rem_pio2+0x33c>
 801bf00:	4632      	mov	r2, r6
 801bf02:	463b      	mov	r3, r7
 801bf04:	4630      	mov	r0, r6
 801bf06:	4639      	mov	r1, r7
 801bf08:	f7e4 f9ee 	bl	80002e8 <__aeabi_dsub>
 801bf0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801bf10:	e9c4 0100 	strd	r0, r1, [r4]
 801bf14:	e69e      	b.n	801bc54 <__ieee754_rem_pio2+0x24>
 801bf16:	bf00      	nop
 801bf18:	54400000 	.word	0x54400000
 801bf1c:	3ff921fb 	.word	0x3ff921fb
 801bf20:	1a626331 	.word	0x1a626331
 801bf24:	3dd0b461 	.word	0x3dd0b461
 801bf28:	1a600000 	.word	0x1a600000
 801bf2c:	3dd0b461 	.word	0x3dd0b461
 801bf30:	2e037073 	.word	0x2e037073
 801bf34:	3ba3198a 	.word	0x3ba3198a
 801bf38:	6dc9c883 	.word	0x6dc9c883
 801bf3c:	3fe45f30 	.word	0x3fe45f30
 801bf40:	2e000000 	.word	0x2e000000
 801bf44:	3ba3198a 	.word	0x3ba3198a
 801bf48:	252049c1 	.word	0x252049c1
 801bf4c:	397b839a 	.word	0x397b839a
 801bf50:	3fe921fb 	.word	0x3fe921fb
 801bf54:	4002d97b 	.word	0x4002d97b
 801bf58:	3ff921fb 	.word	0x3ff921fb
 801bf5c:	413921fb 	.word	0x413921fb
 801bf60:	3fe00000 	.word	0x3fe00000
 801bf64:	08029080 	.word	0x08029080
 801bf68:	7fefffff 	.word	0x7fefffff
 801bf6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801bf70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801bf74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801bf78:	4630      	mov	r0, r6
 801bf7a:	460f      	mov	r7, r1
 801bf7c:	f7e4 fe1c 	bl	8000bb8 <__aeabi_d2iz>
 801bf80:	f7e4 fb00 	bl	8000584 <__aeabi_i2d>
 801bf84:	4602      	mov	r2, r0
 801bf86:	460b      	mov	r3, r1
 801bf88:	4630      	mov	r0, r6
 801bf8a:	4639      	mov	r1, r7
 801bf8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801bf90:	f7e4 f9aa 	bl	80002e8 <__aeabi_dsub>
 801bf94:	4b22      	ldr	r3, [pc, #136]	@ (801c020 <__ieee754_rem_pio2+0x3f0>)
 801bf96:	2200      	movs	r2, #0
 801bf98:	f7e4 fb5e 	bl	8000658 <__aeabi_dmul>
 801bf9c:	460f      	mov	r7, r1
 801bf9e:	4606      	mov	r6, r0
 801bfa0:	f7e4 fe0a 	bl	8000bb8 <__aeabi_d2iz>
 801bfa4:	f7e4 faee 	bl	8000584 <__aeabi_i2d>
 801bfa8:	4602      	mov	r2, r0
 801bfaa:	460b      	mov	r3, r1
 801bfac:	4630      	mov	r0, r6
 801bfae:	4639      	mov	r1, r7
 801bfb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bfb4:	f7e4 f998 	bl	80002e8 <__aeabi_dsub>
 801bfb8:	4b19      	ldr	r3, [pc, #100]	@ (801c020 <__ieee754_rem_pio2+0x3f0>)
 801bfba:	2200      	movs	r2, #0
 801bfbc:	f7e4 fb4c 	bl	8000658 <__aeabi_dmul>
 801bfc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801bfc4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801bfc8:	f04f 0803 	mov.w	r8, #3
 801bfcc:	2600      	movs	r6, #0
 801bfce:	2700      	movs	r7, #0
 801bfd0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801bfd4:	4632      	mov	r2, r6
 801bfd6:	463b      	mov	r3, r7
 801bfd8:	46c2      	mov	sl, r8
 801bfda:	f108 38ff 	add.w	r8, r8, #4294967295
 801bfde:	f7e4 fda3 	bl	8000b28 <__aeabi_dcmpeq>
 801bfe2:	2800      	cmp	r0, #0
 801bfe4:	d1f4      	bne.n	801bfd0 <__ieee754_rem_pio2+0x3a0>
 801bfe6:	4b0f      	ldr	r3, [pc, #60]	@ (801c024 <__ieee754_rem_pio2+0x3f4>)
 801bfe8:	9301      	str	r3, [sp, #4]
 801bfea:	2302      	movs	r3, #2
 801bfec:	9300      	str	r3, [sp, #0]
 801bfee:	462a      	mov	r2, r5
 801bff0:	4653      	mov	r3, sl
 801bff2:	4621      	mov	r1, r4
 801bff4:	a806      	add	r0, sp, #24
 801bff6:	f000 fd33 	bl	801ca60 <__kernel_rem_pio2>
 801bffa:	9b04      	ldr	r3, [sp, #16]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	4605      	mov	r5, r0
 801c000:	f6bf ae53 	bge.w	801bcaa <__ieee754_rem_pio2+0x7a>
 801c004:	e9d4 2100 	ldrd	r2, r1, [r4]
 801c008:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c00c:	e9c4 2300 	strd	r2, r3, [r4]
 801c010:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801c014:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c018:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801c01c:	e740      	b.n	801bea0 <__ieee754_rem_pio2+0x270>
 801c01e:	bf00      	nop
 801c020:	41700000 	.word	0x41700000
 801c024:	08029100 	.word	0x08029100

0801c028 <fabs>:
 801c028:	ec51 0b10 	vmov	r0, r1, d0
 801c02c:	4602      	mov	r2, r0
 801c02e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c032:	ec43 2b10 	vmov	d0, r2, r3
 801c036:	4770      	bx	lr

0801c038 <__kernel_cosf>:
 801c038:	ee10 3a10 	vmov	r3, s0
 801c03c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c040:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801c044:	eef0 6a40 	vmov.f32	s13, s0
 801c048:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c04c:	d204      	bcs.n	801c058 <__kernel_cosf+0x20>
 801c04e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801c052:	ee17 2a90 	vmov	r2, s15
 801c056:	b342      	cbz	r2, 801c0aa <__kernel_cosf+0x72>
 801c058:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801c05c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801c0c8 <__kernel_cosf+0x90>
 801c060:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801c0cc <__kernel_cosf+0x94>
 801c064:	4a1a      	ldr	r2, [pc, #104]	@ (801c0d0 <__kernel_cosf+0x98>)
 801c066:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c06a:	4293      	cmp	r3, r2
 801c06c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801c0d4 <__kernel_cosf+0x9c>
 801c070:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c074:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801c0d8 <__kernel_cosf+0xa0>
 801c078:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c07c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801c0dc <__kernel_cosf+0xa4>
 801c080:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c084:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801c0e0 <__kernel_cosf+0xa8>
 801c088:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c08c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801c090:	ee26 6a07 	vmul.f32	s12, s12, s14
 801c094:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c098:	eee7 0a06 	vfma.f32	s1, s14, s12
 801c09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c0a0:	d804      	bhi.n	801c0ac <__kernel_cosf+0x74>
 801c0a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c0a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c0aa:	4770      	bx	lr
 801c0ac:	4a0d      	ldr	r2, [pc, #52]	@ (801c0e4 <__kernel_cosf+0xac>)
 801c0ae:	4293      	cmp	r3, r2
 801c0b0:	bf9a      	itte	ls
 801c0b2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801c0b6:	ee07 3a10 	vmovls	s14, r3
 801c0ba:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801c0be:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c0c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c0c6:	e7ec      	b.n	801c0a2 <__kernel_cosf+0x6a>
 801c0c8:	ad47d74e 	.word	0xad47d74e
 801c0cc:	310f74f6 	.word	0x310f74f6
 801c0d0:	3e999999 	.word	0x3e999999
 801c0d4:	b493f27c 	.word	0xb493f27c
 801c0d8:	37d00d01 	.word	0x37d00d01
 801c0dc:	bab60b61 	.word	0xbab60b61
 801c0e0:	3d2aaaab 	.word	0x3d2aaaab
 801c0e4:	3f480000 	.word	0x3f480000

0801c0e8 <__kernel_sinf>:
 801c0e8:	ee10 3a10 	vmov	r3, s0
 801c0ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c0f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801c0f4:	d204      	bcs.n	801c100 <__kernel_sinf+0x18>
 801c0f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c0fa:	ee17 3a90 	vmov	r3, s15
 801c0fe:	b35b      	cbz	r3, 801c158 <__kernel_sinf+0x70>
 801c100:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c104:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801c15c <__kernel_sinf+0x74>
 801c108:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801c160 <__kernel_sinf+0x78>
 801c10c:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c110:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801c164 <__kernel_sinf+0x7c>
 801c114:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c118:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801c168 <__kernel_sinf+0x80>
 801c11c:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c120:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801c16c <__kernel_sinf+0x84>
 801c124:	ee60 6a07 	vmul.f32	s13, s0, s14
 801c128:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c12c:	b930      	cbnz	r0, 801c13c <__kernel_sinf+0x54>
 801c12e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801c170 <__kernel_sinf+0x88>
 801c132:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c136:	eea6 0a26 	vfma.f32	s0, s12, s13
 801c13a:	4770      	bx	lr
 801c13c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801c140:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801c144:	eee0 7a86 	vfma.f32	s15, s1, s12
 801c148:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801c14c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801c174 <__kernel_sinf+0x8c>
 801c150:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801c154:	ee30 0a60 	vsub.f32	s0, s0, s1
 801c158:	4770      	bx	lr
 801c15a:	bf00      	nop
 801c15c:	2f2ec9d3 	.word	0x2f2ec9d3
 801c160:	b2d72f34 	.word	0xb2d72f34
 801c164:	3638ef1b 	.word	0x3638ef1b
 801c168:	b9500d01 	.word	0xb9500d01
 801c16c:	3c088889 	.word	0x3c088889
 801c170:	be2aaaab 	.word	0xbe2aaaab
 801c174:	3e2aaaab 	.word	0x3e2aaaab

0801c178 <__ieee754_expf>:
 801c178:	ee10 2a10 	vmov	r2, s0
 801c17c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801c180:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c184:	d902      	bls.n	801c18c <__ieee754_expf+0x14>
 801c186:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c18a:	4770      	bx	lr
 801c18c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801c190:	d106      	bne.n	801c1a0 <__ieee754_expf+0x28>
 801c192:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801c2cc <__ieee754_expf+0x154>
 801c196:	2900      	cmp	r1, #0
 801c198:	bf18      	it	ne
 801c19a:	eeb0 0a67 	vmovne.f32	s0, s15
 801c19e:	4770      	bx	lr
 801c1a0:	484b      	ldr	r0, [pc, #300]	@ (801c2d0 <__ieee754_expf+0x158>)
 801c1a2:	4282      	cmp	r2, r0
 801c1a4:	dd02      	ble.n	801c1ac <__ieee754_expf+0x34>
 801c1a6:	2000      	movs	r0, #0
 801c1a8:	f7fe bace 	b.w	801a748 <__math_oflowf>
 801c1ac:	2a00      	cmp	r2, #0
 801c1ae:	da05      	bge.n	801c1bc <__ieee754_expf+0x44>
 801c1b0:	4a48      	ldr	r2, [pc, #288]	@ (801c2d4 <__ieee754_expf+0x15c>)
 801c1b2:	4293      	cmp	r3, r2
 801c1b4:	d902      	bls.n	801c1bc <__ieee754_expf+0x44>
 801c1b6:	2000      	movs	r0, #0
 801c1b8:	f7fe bac0 	b.w	801a73c <__math_uflowf>
 801c1bc:	4a46      	ldr	r2, [pc, #280]	@ (801c2d8 <__ieee754_expf+0x160>)
 801c1be:	4293      	cmp	r3, r2
 801c1c0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c1c4:	d952      	bls.n	801c26c <__ieee754_expf+0xf4>
 801c1c6:	4a45      	ldr	r2, [pc, #276]	@ (801c2dc <__ieee754_expf+0x164>)
 801c1c8:	4293      	cmp	r3, r2
 801c1ca:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801c1ce:	d834      	bhi.n	801c23a <__ieee754_expf+0xc2>
 801c1d0:	4b43      	ldr	r3, [pc, #268]	@ (801c2e0 <__ieee754_expf+0x168>)
 801c1d2:	4413      	add	r3, r2
 801c1d4:	ed93 7a00 	vldr	s14, [r3]
 801c1d8:	4b42      	ldr	r3, [pc, #264]	@ (801c2e4 <__ieee754_expf+0x16c>)
 801c1da:	4413      	add	r3, r2
 801c1dc:	ee30 7a47 	vsub.f32	s14, s0, s14
 801c1e0:	f1c1 0201 	rsb	r2, r1, #1
 801c1e4:	edd3 7a00 	vldr	s15, [r3]
 801c1e8:	1a52      	subs	r2, r2, r1
 801c1ea:	ee37 0a67 	vsub.f32	s0, s14, s15
 801c1ee:	ee20 6a00 	vmul.f32	s12, s0, s0
 801c1f2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801c2e8 <__ieee754_expf+0x170>
 801c1f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801c2ec <__ieee754_expf+0x174>
 801c1fa:	eee6 6a05 	vfma.f32	s13, s12, s10
 801c1fe:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801c2f0 <__ieee754_expf+0x178>
 801c202:	eea6 5a86 	vfma.f32	s10, s13, s12
 801c206:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801c2f4 <__ieee754_expf+0x17c>
 801c20a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801c20e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801c2f8 <__ieee754_expf+0x180>
 801c212:	eea6 5a86 	vfma.f32	s10, s13, s12
 801c216:	eef0 6a40 	vmov.f32	s13, s0
 801c21a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801c21e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801c222:	ee20 5a26 	vmul.f32	s10, s0, s13
 801c226:	bb92      	cbnz	r2, 801c28e <__ieee754_expf+0x116>
 801c228:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801c22c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801c230:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c234:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801c238:	4770      	bx	lr
 801c23a:	4b30      	ldr	r3, [pc, #192]	@ (801c2fc <__ieee754_expf+0x184>)
 801c23c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801c300 <__ieee754_expf+0x188>
 801c240:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801c304 <__ieee754_expf+0x18c>
 801c244:	4413      	add	r3, r2
 801c246:	edd3 7a00 	vldr	s15, [r3]
 801c24a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c24e:	eeb0 7a40 	vmov.f32	s14, s0
 801c252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c256:	ee17 2a90 	vmov	r2, s15
 801c25a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c25e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c262:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801c308 <__ieee754_expf+0x190>
 801c266:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c26a:	e7be      	b.n	801c1ea <__ieee754_expf+0x72>
 801c26c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801c270:	d20b      	bcs.n	801c28a <__ieee754_expf+0x112>
 801c272:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801c30c <__ieee754_expf+0x194>
 801c276:	ee70 6a26 	vadd.f32	s13, s0, s13
 801c27a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801c27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c282:	dd02      	ble.n	801c28a <__ieee754_expf+0x112>
 801c284:	ee30 0a25 	vadd.f32	s0, s0, s11
 801c288:	4770      	bx	lr
 801c28a:	2200      	movs	r2, #0
 801c28c:	e7af      	b.n	801c1ee <__ieee754_expf+0x76>
 801c28e:	ee36 6a66 	vsub.f32	s12, s12, s13
 801c292:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801c296:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801c29a:	bfb8      	it	lt
 801c29c:	3264      	addlt	r2, #100	@ 0x64
 801c29e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c2a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c2a6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c2aa:	ee17 3a90 	vmov	r3, s15
 801c2ae:	bfab      	itete	ge
 801c2b0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801c2b4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801c2b8:	ee00 3a10 	vmovge	s0, r3
 801c2bc:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801c310 <__ieee754_expf+0x198>
 801c2c0:	bfbc      	itt	lt
 801c2c2:	ee00 3a10 	vmovlt	s0, r3
 801c2c6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801c2ca:	4770      	bx	lr
 801c2cc:	00000000 	.word	0x00000000
 801c2d0:	42b17217 	.word	0x42b17217
 801c2d4:	42cff1b5 	.word	0x42cff1b5
 801c2d8:	3eb17218 	.word	0x3eb17218
 801c2dc:	3f851591 	.word	0x3f851591
 801c2e0:	08029210 	.word	0x08029210
 801c2e4:	08029208 	.word	0x08029208
 801c2e8:	3331bb4c 	.word	0x3331bb4c
 801c2ec:	b5ddea0e 	.word	0xb5ddea0e
 801c2f0:	388ab355 	.word	0x388ab355
 801c2f4:	bb360b61 	.word	0xbb360b61
 801c2f8:	3e2aaaab 	.word	0x3e2aaaab
 801c2fc:	08029218 	.word	0x08029218
 801c300:	3fb8aa3b 	.word	0x3fb8aa3b
 801c304:	3f317180 	.word	0x3f317180
 801c308:	3717f7d1 	.word	0x3717f7d1
 801c30c:	7149f2ca 	.word	0x7149f2ca
 801c310:	0d800000 	.word	0x0d800000

0801c314 <__ieee754_logf>:
 801c314:	ee10 3a10 	vmov	r3, s0
 801c318:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801c31c:	d106      	bne.n	801c32c <__ieee754_logf+0x18>
 801c31e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 801c4b8 <__ieee754_logf+0x1a4>
 801c322:	eddf 7a66 	vldr	s15, [pc, #408]	@ 801c4bc <__ieee754_logf+0x1a8>
 801c326:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801c32a:	4770      	bx	lr
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	461a      	mov	r2, r3
 801c330:	da02      	bge.n	801c338 <__ieee754_logf+0x24>
 801c332:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c336:	e7f4      	b.n	801c322 <__ieee754_logf+0xe>
 801c338:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c33c:	db02      	blt.n	801c344 <__ieee754_logf+0x30>
 801c33e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c342:	4770      	bx	lr
 801c344:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c348:	bfb8      	it	lt
 801c34a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 801c4c0 <__ieee754_logf+0x1ac>
 801c34e:	485d      	ldr	r0, [pc, #372]	@ (801c4c4 <__ieee754_logf+0x1b0>)
 801c350:	bfbe      	ittt	lt
 801c352:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801c356:	f06f 0118 	mvnlt.w	r1, #24
 801c35a:	ee17 2a90 	vmovlt	r2, s15
 801c35e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801c362:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801c366:	4410      	add	r0, r2
 801c368:	bfa8      	it	ge
 801c36a:	2100      	movge	r1, #0
 801c36c:	3b7f      	subs	r3, #127	@ 0x7f
 801c36e:	440b      	add	r3, r1
 801c370:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 801c374:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 801c378:	4311      	orrs	r1, r2
 801c37a:	ee00 1a10 	vmov	s0, r1
 801c37e:	4952      	ldr	r1, [pc, #328]	@ (801c4c8 <__ieee754_logf+0x1b4>)
 801c380:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801c384:	f102 000f 	add.w	r0, r2, #15
 801c388:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c38c:	4001      	ands	r1, r0
 801c38e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c392:	bb89      	cbnz	r1, 801c3f8 <__ieee754_logf+0xe4>
 801c394:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801c398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c39c:	d10f      	bne.n	801c3be <__ieee754_logf+0xaa>
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	f000 8087 	beq.w	801c4b2 <__ieee754_logf+0x19e>
 801c3a4:	ee07 3a90 	vmov	s15, r3
 801c3a8:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 801c4cc <__ieee754_logf+0x1b8>
 801c3ac:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801c4d0 <__ieee754_logf+0x1bc>
 801c3b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c3b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c3b8:	eea7 0a87 	vfma.f32	s0, s15, s14
 801c3bc:	4770      	bx	lr
 801c3be:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801c4d4 <__ieee754_logf+0x1c0>
 801c3c2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c3c6:	eee0 7a66 	vfms.f32	s15, s0, s13
 801c3ca:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c3ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c3d2:	b913      	cbnz	r3, 801c3da <__ieee754_logf+0xc6>
 801c3d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c3d8:	4770      	bx	lr
 801c3da:	ee07 3a90 	vmov	s15, r3
 801c3de:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801c4cc <__ieee754_logf+0x1b8>
 801c3e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c3e6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c3ea:	ee37 0a40 	vsub.f32	s0, s14, s0
 801c3ee:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801c4d0 <__ieee754_logf+0x1bc>
 801c3f2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801c3f6:	4770      	bx	lr
 801c3f8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801c3fc:	ee70 7a27 	vadd.f32	s15, s0, s15
 801c400:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801c4d8 <__ieee754_logf+0x1c4>
 801c404:	eddf 4a35 	vldr	s9, [pc, #212]	@ 801c4dc <__ieee754_logf+0x1c8>
 801c408:	4935      	ldr	r1, [pc, #212]	@ (801c4e0 <__ieee754_logf+0x1cc>)
 801c40a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801c40e:	4411      	add	r1, r2
 801c410:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 801c414:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 801c418:	430a      	orrs	r2, r1
 801c41a:	2a00      	cmp	r2, #0
 801c41c:	ee07 3a90 	vmov	s15, r3
 801c420:	ee26 5a06 	vmul.f32	s10, s12, s12
 801c424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c428:	ee25 7a05 	vmul.f32	s14, s10, s10
 801c42c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801c4e4 <__ieee754_logf+0x1d0>
 801c430:	eee7 7a25 	vfma.f32	s15, s14, s11
 801c434:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 801c4e8 <__ieee754_logf+0x1d4>
 801c438:	eee7 5a87 	vfma.f32	s11, s15, s14
 801c43c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 801c4ec <__ieee754_logf+0x1d8>
 801c440:	eee7 7a24 	vfma.f32	s15, s14, s9
 801c444:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 801c4f0 <__ieee754_logf+0x1dc>
 801c448:	eee7 4a87 	vfma.f32	s9, s15, s14
 801c44c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801c4f4 <__ieee754_logf+0x1e0>
 801c450:	eee4 7a87 	vfma.f32	s15, s9, s14
 801c454:	ee67 7a85 	vmul.f32	s15, s15, s10
 801c458:	eee5 7a87 	vfma.f32	s15, s11, s14
 801c45c:	dd1a      	ble.n	801c494 <__ieee754_logf+0x180>
 801c45e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801c462:	ee20 7a07 	vmul.f32	s14, s0, s14
 801c466:	ee27 7a00 	vmul.f32	s14, s14, s0
 801c46a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c46e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c472:	b913      	cbnz	r3, 801c47a <__ieee754_logf+0x166>
 801c474:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c478:	e7ac      	b.n	801c3d4 <__ieee754_logf+0xc0>
 801c47a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 801c4cc <__ieee754_logf+0x1b8>
 801c47e:	eee6 7a86 	vfma.f32	s15, s13, s12
 801c482:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c486:	ee37 0a40 	vsub.f32	s0, s14, s0
 801c48a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801c4d0 <__ieee754_logf+0x1bc>
 801c48e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801c492:	4770      	bx	lr
 801c494:	ee70 7a67 	vsub.f32	s15, s0, s15
 801c498:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c49c:	b913      	cbnz	r3, 801c4a4 <__ieee754_logf+0x190>
 801c49e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c4a2:	4770      	bx	lr
 801c4a4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801c4cc <__ieee754_logf+0x1b8>
 801c4a8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801c4ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c4b0:	e7eb      	b.n	801c48a <__ieee754_logf+0x176>
 801c4b2:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801c4bc <__ieee754_logf+0x1a8>
 801c4b6:	4770      	bx	lr
 801c4b8:	cc000000 	.word	0xcc000000
 801c4bc:	00000000 	.word	0x00000000
 801c4c0:	4c000000 	.word	0x4c000000
 801c4c4:	004afb20 	.word	0x004afb20
 801c4c8:	007ffff0 	.word	0x007ffff0
 801c4cc:	3717f7d1 	.word	0x3717f7d1
 801c4d0:	3f317180 	.word	0x3f317180
 801c4d4:	3eaaaaab 	.word	0x3eaaaaab
 801c4d8:	3e1cd04f 	.word	0x3e1cd04f
 801c4dc:	3e178897 	.word	0x3e178897
 801c4e0:	ffcf5c30 	.word	0xffcf5c30
 801c4e4:	3e638e29 	.word	0x3e638e29
 801c4e8:	3ecccccd 	.word	0x3ecccccd
 801c4ec:	3e3a3325 	.word	0x3e3a3325
 801c4f0:	3e924925 	.word	0x3e924925
 801c4f4:	3f2aaaab 	.word	0x3f2aaaab

0801c4f8 <__ieee754_log10f>:
 801c4f8:	b508      	push	{r3, lr}
 801c4fa:	ee10 3a10 	vmov	r3, s0
 801c4fe:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801c502:	ed2d 8b02 	vpush	{d8}
 801c506:	d108      	bne.n	801c51a <__ieee754_log10f+0x22>
 801c508:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 801c590 <__ieee754_log10f+0x98>
 801c50c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 801c594 <__ieee754_log10f+0x9c>
 801c510:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801c514:	ecbd 8b02 	vpop	{d8}
 801c518:	bd08      	pop	{r3, pc}
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	461a      	mov	r2, r3
 801c51e:	da02      	bge.n	801c526 <__ieee754_log10f+0x2e>
 801c520:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c524:	e7f2      	b.n	801c50c <__ieee754_log10f+0x14>
 801c526:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c52a:	db02      	blt.n	801c532 <__ieee754_log10f+0x3a>
 801c52c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c530:	e7f0      	b.n	801c514 <__ieee754_log10f+0x1c>
 801c532:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c536:	bfbf      	itttt	lt
 801c538:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 801c598 <__ieee754_log10f+0xa0>
 801c53c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801c540:	f06f 0118 	mvnlt.w	r1, #24
 801c544:	ee17 2a90 	vmovlt	r2, s15
 801c548:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801c54c:	bfa8      	it	ge
 801c54e:	2100      	movge	r1, #0
 801c550:	3b7f      	subs	r3, #127	@ 0x7f
 801c552:	440b      	add	r3, r1
 801c554:	0fd9      	lsrs	r1, r3, #31
 801c556:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c55a:	ee07 3a90 	vmov	s15, r3
 801c55e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801c562:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 801c566:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801c56a:	ee00 3a10 	vmov	s0, r3
 801c56e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801c572:	f7ff fecf 	bl	801c314 <__ieee754_logf>
 801c576:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801c59c <__ieee754_log10f+0xa4>
 801c57a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c57e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801c5a0 <__ieee754_log10f+0xa8>
 801c582:	eea8 0a27 	vfma.f32	s0, s16, s15
 801c586:	eddf 7a07 	vldr	s15, [pc, #28]	@ 801c5a4 <__ieee754_log10f+0xac>
 801c58a:	eea8 0a27 	vfma.f32	s0, s16, s15
 801c58e:	e7c1      	b.n	801c514 <__ieee754_log10f+0x1c>
 801c590:	cc000000 	.word	0xcc000000
 801c594:	00000000 	.word	0x00000000
 801c598:	4c000000 	.word	0x4c000000
 801c59c:	3ede5bd9 	.word	0x3ede5bd9
 801c5a0:	355427db 	.word	0x355427db
 801c5a4:	3e9a2080 	.word	0x3e9a2080

0801c5a8 <__ieee754_rem_pio2f>:
 801c5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5aa:	ee10 6a10 	vmov	r6, s0
 801c5ae:	4b88      	ldr	r3, [pc, #544]	@ (801c7d0 <__ieee754_rem_pio2f+0x228>)
 801c5b0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801c5b4:	429d      	cmp	r5, r3
 801c5b6:	b087      	sub	sp, #28
 801c5b8:	4604      	mov	r4, r0
 801c5ba:	d805      	bhi.n	801c5c8 <__ieee754_rem_pio2f+0x20>
 801c5bc:	2300      	movs	r3, #0
 801c5be:	ed80 0a00 	vstr	s0, [r0]
 801c5c2:	6043      	str	r3, [r0, #4]
 801c5c4:	2000      	movs	r0, #0
 801c5c6:	e022      	b.n	801c60e <__ieee754_rem_pio2f+0x66>
 801c5c8:	4b82      	ldr	r3, [pc, #520]	@ (801c7d4 <__ieee754_rem_pio2f+0x22c>)
 801c5ca:	429d      	cmp	r5, r3
 801c5cc:	d83a      	bhi.n	801c644 <__ieee754_rem_pio2f+0x9c>
 801c5ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801c5d2:	2e00      	cmp	r6, #0
 801c5d4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801c7d8 <__ieee754_rem_pio2f+0x230>
 801c5d8:	4a80      	ldr	r2, [pc, #512]	@ (801c7dc <__ieee754_rem_pio2f+0x234>)
 801c5da:	f023 030f 	bic.w	r3, r3, #15
 801c5de:	dd18      	ble.n	801c612 <__ieee754_rem_pio2f+0x6a>
 801c5e0:	4293      	cmp	r3, r2
 801c5e2:	ee70 7a47 	vsub.f32	s15, s0, s14
 801c5e6:	bf09      	itett	eq
 801c5e8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801c7e0 <__ieee754_rem_pio2f+0x238>
 801c5ec:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801c7e4 <__ieee754_rem_pio2f+0x23c>
 801c5f0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801c7e8 <__ieee754_rem_pio2f+0x240>
 801c5f4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801c5f8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801c5fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c600:	ed80 7a00 	vstr	s14, [r0]
 801c604:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c608:	edc0 7a01 	vstr	s15, [r0, #4]
 801c60c:	2001      	movs	r0, #1
 801c60e:	b007      	add	sp, #28
 801c610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c612:	4293      	cmp	r3, r2
 801c614:	ee70 7a07 	vadd.f32	s15, s0, s14
 801c618:	bf09      	itett	eq
 801c61a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801c7e0 <__ieee754_rem_pio2f+0x238>
 801c61e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801c7e4 <__ieee754_rem_pio2f+0x23c>
 801c622:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801c7e8 <__ieee754_rem_pio2f+0x240>
 801c626:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801c62a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c62e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c632:	ed80 7a00 	vstr	s14, [r0]
 801c636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c63a:	edc0 7a01 	vstr	s15, [r0, #4]
 801c63e:	f04f 30ff 	mov.w	r0, #4294967295
 801c642:	e7e4      	b.n	801c60e <__ieee754_rem_pio2f+0x66>
 801c644:	4b69      	ldr	r3, [pc, #420]	@ (801c7ec <__ieee754_rem_pio2f+0x244>)
 801c646:	429d      	cmp	r5, r3
 801c648:	d873      	bhi.n	801c732 <__ieee754_rem_pio2f+0x18a>
 801c64a:	f000 f8dd 	bl	801c808 <fabsf>
 801c64e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801c7f0 <__ieee754_rem_pio2f+0x248>
 801c652:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c656:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c65a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c65e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c662:	ee17 0a90 	vmov	r0, s15
 801c666:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801c7d8 <__ieee754_rem_pio2f+0x230>
 801c66a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801c66e:	281f      	cmp	r0, #31
 801c670:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801c7e4 <__ieee754_rem_pio2f+0x23c>
 801c674:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c678:	eeb1 6a47 	vneg.f32	s12, s14
 801c67c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801c680:	ee16 1a90 	vmov	r1, s13
 801c684:	dc09      	bgt.n	801c69a <__ieee754_rem_pio2f+0xf2>
 801c686:	4a5b      	ldr	r2, [pc, #364]	@ (801c7f4 <__ieee754_rem_pio2f+0x24c>)
 801c688:	1e47      	subs	r7, r0, #1
 801c68a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801c68e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801c692:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801c696:	4293      	cmp	r3, r2
 801c698:	d107      	bne.n	801c6aa <__ieee754_rem_pio2f+0x102>
 801c69a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801c69e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801c6a2:	2a08      	cmp	r2, #8
 801c6a4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801c6a8:	dc14      	bgt.n	801c6d4 <__ieee754_rem_pio2f+0x12c>
 801c6aa:	6021      	str	r1, [r4, #0]
 801c6ac:	ed94 7a00 	vldr	s14, [r4]
 801c6b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c6b4:	2e00      	cmp	r6, #0
 801c6b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c6ba:	ed84 0a01 	vstr	s0, [r4, #4]
 801c6be:	daa6      	bge.n	801c60e <__ieee754_rem_pio2f+0x66>
 801c6c0:	eeb1 7a47 	vneg.f32	s14, s14
 801c6c4:	eeb1 0a40 	vneg.f32	s0, s0
 801c6c8:	ed84 7a00 	vstr	s14, [r4]
 801c6cc:	ed84 0a01 	vstr	s0, [r4, #4]
 801c6d0:	4240      	negs	r0, r0
 801c6d2:	e79c      	b.n	801c60e <__ieee754_rem_pio2f+0x66>
 801c6d4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801c7e0 <__ieee754_rem_pio2f+0x238>
 801c6d8:	eef0 6a40 	vmov.f32	s13, s0
 801c6dc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801c6e0:	ee70 7a66 	vsub.f32	s15, s0, s13
 801c6e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c6e8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801c7e8 <__ieee754_rem_pio2f+0x240>
 801c6ec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801c6f0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801c6f4:	ee15 2a90 	vmov	r2, s11
 801c6f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801c6fc:	1a5b      	subs	r3, r3, r1
 801c6fe:	2b19      	cmp	r3, #25
 801c700:	dc04      	bgt.n	801c70c <__ieee754_rem_pio2f+0x164>
 801c702:	edc4 5a00 	vstr	s11, [r4]
 801c706:	eeb0 0a66 	vmov.f32	s0, s13
 801c70a:	e7cf      	b.n	801c6ac <__ieee754_rem_pio2f+0x104>
 801c70c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801c7f8 <__ieee754_rem_pio2f+0x250>
 801c710:	eeb0 0a66 	vmov.f32	s0, s13
 801c714:	eea6 0a25 	vfma.f32	s0, s12, s11
 801c718:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801c71c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801c7fc <__ieee754_rem_pio2f+0x254>
 801c720:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c724:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801c728:	ee30 7a67 	vsub.f32	s14, s0, s15
 801c72c:	ed84 7a00 	vstr	s14, [r4]
 801c730:	e7bc      	b.n	801c6ac <__ieee754_rem_pio2f+0x104>
 801c732:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801c736:	d306      	bcc.n	801c746 <__ieee754_rem_pio2f+0x19e>
 801c738:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c73c:	edc0 7a01 	vstr	s15, [r0, #4]
 801c740:	edc0 7a00 	vstr	s15, [r0]
 801c744:	e73e      	b.n	801c5c4 <__ieee754_rem_pio2f+0x1c>
 801c746:	15ea      	asrs	r2, r5, #23
 801c748:	3a86      	subs	r2, #134	@ 0x86
 801c74a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801c74e:	ee07 3a90 	vmov	s15, r3
 801c752:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c756:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801c800 <__ieee754_rem_pio2f+0x258>
 801c75a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c75e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c762:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c766:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c76a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c76e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c776:	ed8d 7a04 	vstr	s14, [sp, #16]
 801c77a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c77e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c786:	edcd 7a05 	vstr	s15, [sp, #20]
 801c78a:	d11e      	bne.n	801c7ca <__ieee754_rem_pio2f+0x222>
 801c78c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801c790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c794:	bf0c      	ite	eq
 801c796:	2301      	moveq	r3, #1
 801c798:	2302      	movne	r3, #2
 801c79a:	491a      	ldr	r1, [pc, #104]	@ (801c804 <__ieee754_rem_pio2f+0x25c>)
 801c79c:	9101      	str	r1, [sp, #4]
 801c79e:	2102      	movs	r1, #2
 801c7a0:	9100      	str	r1, [sp, #0]
 801c7a2:	a803      	add	r0, sp, #12
 801c7a4:	4621      	mov	r1, r4
 801c7a6:	f000 fcb3 	bl	801d110 <__kernel_rem_pio2f>
 801c7aa:	2e00      	cmp	r6, #0
 801c7ac:	f6bf af2f 	bge.w	801c60e <__ieee754_rem_pio2f+0x66>
 801c7b0:	edd4 7a00 	vldr	s15, [r4]
 801c7b4:	eef1 7a67 	vneg.f32	s15, s15
 801c7b8:	edc4 7a00 	vstr	s15, [r4]
 801c7bc:	edd4 7a01 	vldr	s15, [r4, #4]
 801c7c0:	eef1 7a67 	vneg.f32	s15, s15
 801c7c4:	edc4 7a01 	vstr	s15, [r4, #4]
 801c7c8:	e782      	b.n	801c6d0 <__ieee754_rem_pio2f+0x128>
 801c7ca:	2303      	movs	r3, #3
 801c7cc:	e7e5      	b.n	801c79a <__ieee754_rem_pio2f+0x1f2>
 801c7ce:	bf00      	nop
 801c7d0:	3f490fd8 	.word	0x3f490fd8
 801c7d4:	4016cbe3 	.word	0x4016cbe3
 801c7d8:	3fc90f80 	.word	0x3fc90f80
 801c7dc:	3fc90fd0 	.word	0x3fc90fd0
 801c7e0:	37354400 	.word	0x37354400
 801c7e4:	37354443 	.word	0x37354443
 801c7e8:	2e85a308 	.word	0x2e85a308
 801c7ec:	43490f80 	.word	0x43490f80
 801c7f0:	3f22f984 	.word	0x3f22f984
 801c7f4:	08029220 	.word	0x08029220
 801c7f8:	2e85a300 	.word	0x2e85a300
 801c7fc:	248d3132 	.word	0x248d3132
 801c800:	43800000 	.word	0x43800000
 801c804:	080292a0 	.word	0x080292a0

0801c808 <fabsf>:
 801c808:	ee10 3a10 	vmov	r3, s0
 801c80c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c810:	ee00 3a10 	vmov	s0, r3
 801c814:	4770      	bx	lr
	...

0801c818 <scalbn>:
 801c818:	b570      	push	{r4, r5, r6, lr}
 801c81a:	ec55 4b10 	vmov	r4, r5, d0
 801c81e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801c822:	4606      	mov	r6, r0
 801c824:	462b      	mov	r3, r5
 801c826:	b991      	cbnz	r1, 801c84e <scalbn+0x36>
 801c828:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801c82c:	4323      	orrs	r3, r4
 801c82e:	d03d      	beq.n	801c8ac <scalbn+0x94>
 801c830:	4b35      	ldr	r3, [pc, #212]	@ (801c908 <scalbn+0xf0>)
 801c832:	4620      	mov	r0, r4
 801c834:	4629      	mov	r1, r5
 801c836:	2200      	movs	r2, #0
 801c838:	f7e3 ff0e 	bl	8000658 <__aeabi_dmul>
 801c83c:	4b33      	ldr	r3, [pc, #204]	@ (801c90c <scalbn+0xf4>)
 801c83e:	429e      	cmp	r6, r3
 801c840:	4604      	mov	r4, r0
 801c842:	460d      	mov	r5, r1
 801c844:	da0f      	bge.n	801c866 <scalbn+0x4e>
 801c846:	a328      	add	r3, pc, #160	@ (adr r3, 801c8e8 <scalbn+0xd0>)
 801c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c84c:	e01e      	b.n	801c88c <scalbn+0x74>
 801c84e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801c852:	4291      	cmp	r1, r2
 801c854:	d10b      	bne.n	801c86e <scalbn+0x56>
 801c856:	4622      	mov	r2, r4
 801c858:	4620      	mov	r0, r4
 801c85a:	4629      	mov	r1, r5
 801c85c:	f7e3 fd46 	bl	80002ec <__adddf3>
 801c860:	4604      	mov	r4, r0
 801c862:	460d      	mov	r5, r1
 801c864:	e022      	b.n	801c8ac <scalbn+0x94>
 801c866:	460b      	mov	r3, r1
 801c868:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801c86c:	3936      	subs	r1, #54	@ 0x36
 801c86e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801c872:	4296      	cmp	r6, r2
 801c874:	dd0d      	ble.n	801c892 <scalbn+0x7a>
 801c876:	2d00      	cmp	r5, #0
 801c878:	a11d      	add	r1, pc, #116	@ (adr r1, 801c8f0 <scalbn+0xd8>)
 801c87a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c87e:	da02      	bge.n	801c886 <scalbn+0x6e>
 801c880:	a11d      	add	r1, pc, #116	@ (adr r1, 801c8f8 <scalbn+0xe0>)
 801c882:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c886:	a31a      	add	r3, pc, #104	@ (adr r3, 801c8f0 <scalbn+0xd8>)
 801c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c88c:	f7e3 fee4 	bl	8000658 <__aeabi_dmul>
 801c890:	e7e6      	b.n	801c860 <scalbn+0x48>
 801c892:	1872      	adds	r2, r6, r1
 801c894:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801c898:	428a      	cmp	r2, r1
 801c89a:	dcec      	bgt.n	801c876 <scalbn+0x5e>
 801c89c:	2a00      	cmp	r2, #0
 801c89e:	dd08      	ble.n	801c8b2 <scalbn+0x9a>
 801c8a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c8a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801c8a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c8ac:	ec45 4b10 	vmov	d0, r4, r5
 801c8b0:	bd70      	pop	{r4, r5, r6, pc}
 801c8b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801c8b6:	da08      	bge.n	801c8ca <scalbn+0xb2>
 801c8b8:	2d00      	cmp	r5, #0
 801c8ba:	a10b      	add	r1, pc, #44	@ (adr r1, 801c8e8 <scalbn+0xd0>)
 801c8bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c8c0:	dac1      	bge.n	801c846 <scalbn+0x2e>
 801c8c2:	a10f      	add	r1, pc, #60	@ (adr r1, 801c900 <scalbn+0xe8>)
 801c8c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c8c8:	e7bd      	b.n	801c846 <scalbn+0x2e>
 801c8ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c8ce:	3236      	adds	r2, #54	@ 0x36
 801c8d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801c8d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c8d8:	4620      	mov	r0, r4
 801c8da:	4b0d      	ldr	r3, [pc, #52]	@ (801c910 <scalbn+0xf8>)
 801c8dc:	4629      	mov	r1, r5
 801c8de:	2200      	movs	r2, #0
 801c8e0:	e7d4      	b.n	801c88c <scalbn+0x74>
 801c8e2:	bf00      	nop
 801c8e4:	f3af 8000 	nop.w
 801c8e8:	c2f8f359 	.word	0xc2f8f359
 801c8ec:	01a56e1f 	.word	0x01a56e1f
 801c8f0:	8800759c 	.word	0x8800759c
 801c8f4:	7e37e43c 	.word	0x7e37e43c
 801c8f8:	8800759c 	.word	0x8800759c
 801c8fc:	fe37e43c 	.word	0xfe37e43c
 801c900:	c2f8f359 	.word	0xc2f8f359
 801c904:	81a56e1f 	.word	0x81a56e1f
 801c908:	43500000 	.word	0x43500000
 801c90c:	ffff3cb0 	.word	0xffff3cb0
 801c910:	3c900000 	.word	0x3c900000

0801c914 <with_errno>:
 801c914:	b510      	push	{r4, lr}
 801c916:	ed2d 8b02 	vpush	{d8}
 801c91a:	eeb0 8a40 	vmov.f32	s16, s0
 801c91e:	eef0 8a60 	vmov.f32	s17, s1
 801c922:	4604      	mov	r4, r0
 801c924:	f002 f812 	bl	801e94c <__errno>
 801c928:	eeb0 0a48 	vmov.f32	s0, s16
 801c92c:	eef0 0a68 	vmov.f32	s1, s17
 801c930:	ecbd 8b02 	vpop	{d8}
 801c934:	6004      	str	r4, [r0, #0]
 801c936:	bd10      	pop	{r4, pc}

0801c938 <xflow>:
 801c938:	4603      	mov	r3, r0
 801c93a:	b507      	push	{r0, r1, r2, lr}
 801c93c:	ec51 0b10 	vmov	r0, r1, d0
 801c940:	b183      	cbz	r3, 801c964 <xflow+0x2c>
 801c942:	4602      	mov	r2, r0
 801c944:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c948:	e9cd 2300 	strd	r2, r3, [sp]
 801c94c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c950:	f7e3 fe82 	bl	8000658 <__aeabi_dmul>
 801c954:	ec41 0b10 	vmov	d0, r0, r1
 801c958:	2022      	movs	r0, #34	@ 0x22
 801c95a:	b003      	add	sp, #12
 801c95c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c960:	f7ff bfd8 	b.w	801c914 <with_errno>
 801c964:	4602      	mov	r2, r0
 801c966:	460b      	mov	r3, r1
 801c968:	e7ee      	b.n	801c948 <xflow+0x10>
 801c96a:	0000      	movs	r0, r0
 801c96c:	0000      	movs	r0, r0
	...

0801c970 <__math_uflow>:
 801c970:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801c978 <__math_uflow+0x8>
 801c974:	f7ff bfe0 	b.w	801c938 <xflow>
 801c978:	00000000 	.word	0x00000000
 801c97c:	10000000 	.word	0x10000000

0801c980 <__math_oflow>:
 801c980:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801c988 <__math_oflow+0x8>
 801c984:	f7ff bfd8 	b.w	801c938 <xflow>
 801c988:	00000000 	.word	0x00000000
 801c98c:	70000000 	.word	0x70000000

0801c990 <scalbnf>:
 801c990:	ee10 3a10 	vmov	r3, s0
 801c994:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801c998:	d02b      	beq.n	801c9f2 <scalbnf+0x62>
 801c99a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801c99e:	d302      	bcc.n	801c9a6 <scalbnf+0x16>
 801c9a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c9a4:	4770      	bx	lr
 801c9a6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801c9aa:	d123      	bne.n	801c9f4 <scalbnf+0x64>
 801c9ac:	4b24      	ldr	r3, [pc, #144]	@ (801ca40 <scalbnf+0xb0>)
 801c9ae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801ca44 <scalbnf+0xb4>
 801c9b2:	4298      	cmp	r0, r3
 801c9b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c9b8:	db17      	blt.n	801c9ea <scalbnf+0x5a>
 801c9ba:	ee10 3a10 	vmov	r3, s0
 801c9be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c9c2:	3a19      	subs	r2, #25
 801c9c4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801c9c8:	4288      	cmp	r0, r1
 801c9ca:	dd15      	ble.n	801c9f8 <scalbnf+0x68>
 801c9cc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801ca48 <scalbnf+0xb8>
 801c9d0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801ca4c <scalbnf+0xbc>
 801c9d4:	ee10 3a10 	vmov	r3, s0
 801c9d8:	eeb0 7a67 	vmov.f32	s14, s15
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	bfb8      	it	lt
 801c9e0:	eef0 7a66 	vmovlt.f32	s15, s13
 801c9e4:	ee27 0a87 	vmul.f32	s0, s15, s14
 801c9e8:	4770      	bx	lr
 801c9ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ca50 <scalbnf+0xc0>
 801c9ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c9f2:	4770      	bx	lr
 801c9f4:	0dd2      	lsrs	r2, r2, #23
 801c9f6:	e7e5      	b.n	801c9c4 <scalbnf+0x34>
 801c9f8:	4410      	add	r0, r2
 801c9fa:	28fe      	cmp	r0, #254	@ 0xfe
 801c9fc:	dce6      	bgt.n	801c9cc <scalbnf+0x3c>
 801c9fe:	2800      	cmp	r0, #0
 801ca00:	dd06      	ble.n	801ca10 <scalbnf+0x80>
 801ca02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ca06:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ca0a:	ee00 3a10 	vmov	s0, r3
 801ca0e:	4770      	bx	lr
 801ca10:	f110 0f16 	cmn.w	r0, #22
 801ca14:	da09      	bge.n	801ca2a <scalbnf+0x9a>
 801ca16:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801ca50 <scalbnf+0xc0>
 801ca1a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801ca54 <scalbnf+0xc4>
 801ca1e:	ee10 3a10 	vmov	r3, s0
 801ca22:	eeb0 7a67 	vmov.f32	s14, s15
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	e7d9      	b.n	801c9de <scalbnf+0x4e>
 801ca2a:	3019      	adds	r0, #25
 801ca2c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ca30:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ca34:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801ca58 <scalbnf+0xc8>
 801ca38:	ee07 3a90 	vmov	s15, r3
 801ca3c:	e7d7      	b.n	801c9ee <scalbnf+0x5e>
 801ca3e:	bf00      	nop
 801ca40:	ffff3cb0 	.word	0xffff3cb0
 801ca44:	4c000000 	.word	0x4c000000
 801ca48:	7149f2ca 	.word	0x7149f2ca
 801ca4c:	f149f2ca 	.word	0xf149f2ca
 801ca50:	0da24260 	.word	0x0da24260
 801ca54:	8da24260 	.word	0x8da24260
 801ca58:	33000000 	.word	0x33000000
 801ca5c:	00000000 	.word	0x00000000

0801ca60 <__kernel_rem_pio2>:
 801ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca64:	ed2d 8b02 	vpush	{d8}
 801ca68:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801ca6c:	f112 0f14 	cmn.w	r2, #20
 801ca70:	9306      	str	r3, [sp, #24]
 801ca72:	9104      	str	r1, [sp, #16]
 801ca74:	4bbe      	ldr	r3, [pc, #760]	@ (801cd70 <__kernel_rem_pio2+0x310>)
 801ca76:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801ca78:	9008      	str	r0, [sp, #32]
 801ca7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ca7e:	9300      	str	r3, [sp, #0]
 801ca80:	9b06      	ldr	r3, [sp, #24]
 801ca82:	f103 33ff 	add.w	r3, r3, #4294967295
 801ca86:	bfa8      	it	ge
 801ca88:	1ed4      	subge	r4, r2, #3
 801ca8a:	9305      	str	r3, [sp, #20]
 801ca8c:	bfb2      	itee	lt
 801ca8e:	2400      	movlt	r4, #0
 801ca90:	2318      	movge	r3, #24
 801ca92:	fb94 f4f3 	sdivge	r4, r4, r3
 801ca96:	f06f 0317 	mvn.w	r3, #23
 801ca9a:	fb04 3303 	mla	r3, r4, r3, r3
 801ca9e:	eb03 0b02 	add.w	fp, r3, r2
 801caa2:	9b00      	ldr	r3, [sp, #0]
 801caa4:	9a05      	ldr	r2, [sp, #20]
 801caa6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801cd60 <__kernel_rem_pio2+0x300>
 801caaa:	eb03 0802 	add.w	r8, r3, r2
 801caae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801cab0:	1aa7      	subs	r7, r4, r2
 801cab2:	ae20      	add	r6, sp, #128	@ 0x80
 801cab4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801cab8:	2500      	movs	r5, #0
 801caba:	4545      	cmp	r5, r8
 801cabc:	dd13      	ble.n	801cae6 <__kernel_rem_pio2+0x86>
 801cabe:	9b06      	ldr	r3, [sp, #24]
 801cac0:	aa20      	add	r2, sp, #128	@ 0x80
 801cac2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801cac6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801caca:	f04f 0800 	mov.w	r8, #0
 801cace:	9b00      	ldr	r3, [sp, #0]
 801cad0:	4598      	cmp	r8, r3
 801cad2:	dc31      	bgt.n	801cb38 <__kernel_rem_pio2+0xd8>
 801cad4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801cd60 <__kernel_rem_pio2+0x300>
 801cad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cadc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cae0:	462f      	mov	r7, r5
 801cae2:	2600      	movs	r6, #0
 801cae4:	e01b      	b.n	801cb1e <__kernel_rem_pio2+0xbe>
 801cae6:	42ef      	cmn	r7, r5
 801cae8:	d407      	bmi.n	801cafa <__kernel_rem_pio2+0x9a>
 801caea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801caee:	f7e3 fd49 	bl	8000584 <__aeabi_i2d>
 801caf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801caf6:	3501      	adds	r5, #1
 801caf8:	e7df      	b.n	801caba <__kernel_rem_pio2+0x5a>
 801cafa:	ec51 0b18 	vmov	r0, r1, d8
 801cafe:	e7f8      	b.n	801caf2 <__kernel_rem_pio2+0x92>
 801cb00:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cb04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801cb08:	f7e3 fda6 	bl	8000658 <__aeabi_dmul>
 801cb0c:	4602      	mov	r2, r0
 801cb0e:	460b      	mov	r3, r1
 801cb10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cb14:	f7e3 fbea 	bl	80002ec <__adddf3>
 801cb18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cb1c:	3601      	adds	r6, #1
 801cb1e:	9b05      	ldr	r3, [sp, #20]
 801cb20:	429e      	cmp	r6, r3
 801cb22:	f1a7 0708 	sub.w	r7, r7, #8
 801cb26:	ddeb      	ble.n	801cb00 <__kernel_rem_pio2+0xa0>
 801cb28:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cb2c:	f108 0801 	add.w	r8, r8, #1
 801cb30:	ecaa 7b02 	vstmia	sl!, {d7}
 801cb34:	3508      	adds	r5, #8
 801cb36:	e7ca      	b.n	801cace <__kernel_rem_pio2+0x6e>
 801cb38:	9b00      	ldr	r3, [sp, #0]
 801cb3a:	f8dd 8000 	ldr.w	r8, [sp]
 801cb3e:	aa0c      	add	r2, sp, #48	@ 0x30
 801cb40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cb44:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb46:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801cb48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801cb4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb4e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801cb52:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cb54:	ab98      	add	r3, sp, #608	@ 0x260
 801cb56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801cb5a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801cb5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cb62:	ac0c      	add	r4, sp, #48	@ 0x30
 801cb64:	ab70      	add	r3, sp, #448	@ 0x1c0
 801cb66:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801cb6a:	46a1      	mov	r9, r4
 801cb6c:	46c2      	mov	sl, r8
 801cb6e:	f1ba 0f00 	cmp.w	sl, #0
 801cb72:	f1a5 0508 	sub.w	r5, r5, #8
 801cb76:	dc77      	bgt.n	801cc68 <__kernel_rem_pio2+0x208>
 801cb78:	4658      	mov	r0, fp
 801cb7a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801cb7e:	f7ff fe4b 	bl	801c818 <scalbn>
 801cb82:	ec57 6b10 	vmov	r6, r7, d0
 801cb86:	2200      	movs	r2, #0
 801cb88:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801cb8c:	4630      	mov	r0, r6
 801cb8e:	4639      	mov	r1, r7
 801cb90:	f7e3 fd62 	bl	8000658 <__aeabi_dmul>
 801cb94:	ec41 0b10 	vmov	d0, r0, r1
 801cb98:	f7fd feba 	bl	801a910 <floor>
 801cb9c:	4b75      	ldr	r3, [pc, #468]	@ (801cd74 <__kernel_rem_pio2+0x314>)
 801cb9e:	ec51 0b10 	vmov	r0, r1, d0
 801cba2:	2200      	movs	r2, #0
 801cba4:	f7e3 fd58 	bl	8000658 <__aeabi_dmul>
 801cba8:	4602      	mov	r2, r0
 801cbaa:	460b      	mov	r3, r1
 801cbac:	4630      	mov	r0, r6
 801cbae:	4639      	mov	r1, r7
 801cbb0:	f7e3 fb9a 	bl	80002e8 <__aeabi_dsub>
 801cbb4:	460f      	mov	r7, r1
 801cbb6:	4606      	mov	r6, r0
 801cbb8:	f7e3 fffe 	bl	8000bb8 <__aeabi_d2iz>
 801cbbc:	9002      	str	r0, [sp, #8]
 801cbbe:	f7e3 fce1 	bl	8000584 <__aeabi_i2d>
 801cbc2:	4602      	mov	r2, r0
 801cbc4:	460b      	mov	r3, r1
 801cbc6:	4630      	mov	r0, r6
 801cbc8:	4639      	mov	r1, r7
 801cbca:	f7e3 fb8d 	bl	80002e8 <__aeabi_dsub>
 801cbce:	f1bb 0f00 	cmp.w	fp, #0
 801cbd2:	4606      	mov	r6, r0
 801cbd4:	460f      	mov	r7, r1
 801cbd6:	dd6c      	ble.n	801ccb2 <__kernel_rem_pio2+0x252>
 801cbd8:	f108 31ff 	add.w	r1, r8, #4294967295
 801cbdc:	ab0c      	add	r3, sp, #48	@ 0x30
 801cbde:	9d02      	ldr	r5, [sp, #8]
 801cbe0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cbe4:	f1cb 0018 	rsb	r0, fp, #24
 801cbe8:	fa43 f200 	asr.w	r2, r3, r0
 801cbec:	4415      	add	r5, r2
 801cbee:	4082      	lsls	r2, r0
 801cbf0:	1a9b      	subs	r3, r3, r2
 801cbf2:	aa0c      	add	r2, sp, #48	@ 0x30
 801cbf4:	9502      	str	r5, [sp, #8]
 801cbf6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801cbfa:	f1cb 0217 	rsb	r2, fp, #23
 801cbfe:	fa43 f902 	asr.w	r9, r3, r2
 801cc02:	f1b9 0f00 	cmp.w	r9, #0
 801cc06:	dd64      	ble.n	801ccd2 <__kernel_rem_pio2+0x272>
 801cc08:	9b02      	ldr	r3, [sp, #8]
 801cc0a:	2200      	movs	r2, #0
 801cc0c:	3301      	adds	r3, #1
 801cc0e:	9302      	str	r3, [sp, #8]
 801cc10:	4615      	mov	r5, r2
 801cc12:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801cc16:	4590      	cmp	r8, r2
 801cc18:	f300 80b8 	bgt.w	801cd8c <__kernel_rem_pio2+0x32c>
 801cc1c:	f1bb 0f00 	cmp.w	fp, #0
 801cc20:	dd07      	ble.n	801cc32 <__kernel_rem_pio2+0x1d2>
 801cc22:	f1bb 0f01 	cmp.w	fp, #1
 801cc26:	f000 80bf 	beq.w	801cda8 <__kernel_rem_pio2+0x348>
 801cc2a:	f1bb 0f02 	cmp.w	fp, #2
 801cc2e:	f000 80c6 	beq.w	801cdbe <__kernel_rem_pio2+0x35e>
 801cc32:	f1b9 0f02 	cmp.w	r9, #2
 801cc36:	d14c      	bne.n	801ccd2 <__kernel_rem_pio2+0x272>
 801cc38:	4632      	mov	r2, r6
 801cc3a:	463b      	mov	r3, r7
 801cc3c:	494e      	ldr	r1, [pc, #312]	@ (801cd78 <__kernel_rem_pio2+0x318>)
 801cc3e:	2000      	movs	r0, #0
 801cc40:	f7e3 fb52 	bl	80002e8 <__aeabi_dsub>
 801cc44:	4606      	mov	r6, r0
 801cc46:	460f      	mov	r7, r1
 801cc48:	2d00      	cmp	r5, #0
 801cc4a:	d042      	beq.n	801ccd2 <__kernel_rem_pio2+0x272>
 801cc4c:	4658      	mov	r0, fp
 801cc4e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801cd68 <__kernel_rem_pio2+0x308>
 801cc52:	f7ff fde1 	bl	801c818 <scalbn>
 801cc56:	4630      	mov	r0, r6
 801cc58:	4639      	mov	r1, r7
 801cc5a:	ec53 2b10 	vmov	r2, r3, d0
 801cc5e:	f7e3 fb43 	bl	80002e8 <__aeabi_dsub>
 801cc62:	4606      	mov	r6, r0
 801cc64:	460f      	mov	r7, r1
 801cc66:	e034      	b.n	801ccd2 <__kernel_rem_pio2+0x272>
 801cc68:	4b44      	ldr	r3, [pc, #272]	@ (801cd7c <__kernel_rem_pio2+0x31c>)
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cc70:	f7e3 fcf2 	bl	8000658 <__aeabi_dmul>
 801cc74:	f7e3 ffa0 	bl	8000bb8 <__aeabi_d2iz>
 801cc78:	f7e3 fc84 	bl	8000584 <__aeabi_i2d>
 801cc7c:	4b40      	ldr	r3, [pc, #256]	@ (801cd80 <__kernel_rem_pio2+0x320>)
 801cc7e:	2200      	movs	r2, #0
 801cc80:	4606      	mov	r6, r0
 801cc82:	460f      	mov	r7, r1
 801cc84:	f7e3 fce8 	bl	8000658 <__aeabi_dmul>
 801cc88:	4602      	mov	r2, r0
 801cc8a:	460b      	mov	r3, r1
 801cc8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cc90:	f7e3 fb2a 	bl	80002e8 <__aeabi_dsub>
 801cc94:	f7e3 ff90 	bl	8000bb8 <__aeabi_d2iz>
 801cc98:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cc9c:	f849 0b04 	str.w	r0, [r9], #4
 801cca0:	4639      	mov	r1, r7
 801cca2:	4630      	mov	r0, r6
 801cca4:	f7e3 fb22 	bl	80002ec <__adddf3>
 801cca8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ccac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ccb0:	e75d      	b.n	801cb6e <__kernel_rem_pio2+0x10e>
 801ccb2:	d107      	bne.n	801ccc4 <__kernel_rem_pio2+0x264>
 801ccb4:	f108 33ff 	add.w	r3, r8, #4294967295
 801ccb8:	aa0c      	add	r2, sp, #48	@ 0x30
 801ccba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ccbe:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801ccc2:	e79e      	b.n	801cc02 <__kernel_rem_pio2+0x1a2>
 801ccc4:	4b2f      	ldr	r3, [pc, #188]	@ (801cd84 <__kernel_rem_pio2+0x324>)
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	f7e3 ff4c 	bl	8000b64 <__aeabi_dcmpge>
 801cccc:	2800      	cmp	r0, #0
 801ccce:	d143      	bne.n	801cd58 <__kernel_rem_pio2+0x2f8>
 801ccd0:	4681      	mov	r9, r0
 801ccd2:	2200      	movs	r2, #0
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	4630      	mov	r0, r6
 801ccd8:	4639      	mov	r1, r7
 801ccda:	f7e3 ff25 	bl	8000b28 <__aeabi_dcmpeq>
 801ccde:	2800      	cmp	r0, #0
 801cce0:	f000 80bf 	beq.w	801ce62 <__kernel_rem_pio2+0x402>
 801cce4:	f108 33ff 	add.w	r3, r8, #4294967295
 801cce8:	2200      	movs	r2, #0
 801ccea:	9900      	ldr	r1, [sp, #0]
 801ccec:	428b      	cmp	r3, r1
 801ccee:	da6e      	bge.n	801cdce <__kernel_rem_pio2+0x36e>
 801ccf0:	2a00      	cmp	r2, #0
 801ccf2:	f000 8089 	beq.w	801ce08 <__kernel_rem_pio2+0x3a8>
 801ccf6:	f108 38ff 	add.w	r8, r8, #4294967295
 801ccfa:	ab0c      	add	r3, sp, #48	@ 0x30
 801ccfc:	f1ab 0b18 	sub.w	fp, fp, #24
 801cd00:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d0f6      	beq.n	801ccf6 <__kernel_rem_pio2+0x296>
 801cd08:	4658      	mov	r0, fp
 801cd0a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801cd68 <__kernel_rem_pio2+0x308>
 801cd0e:	f7ff fd83 	bl	801c818 <scalbn>
 801cd12:	f108 0301 	add.w	r3, r8, #1
 801cd16:	00da      	lsls	r2, r3, #3
 801cd18:	9205      	str	r2, [sp, #20]
 801cd1a:	ec55 4b10 	vmov	r4, r5, d0
 801cd1e:	aa70      	add	r2, sp, #448	@ 0x1c0
 801cd20:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801cd7c <__kernel_rem_pio2+0x31c>
 801cd24:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801cd28:	4646      	mov	r6, r8
 801cd2a:	f04f 0a00 	mov.w	sl, #0
 801cd2e:	2e00      	cmp	r6, #0
 801cd30:	f280 80cf 	bge.w	801ced2 <__kernel_rem_pio2+0x472>
 801cd34:	4644      	mov	r4, r8
 801cd36:	2c00      	cmp	r4, #0
 801cd38:	f2c0 80fd 	blt.w	801cf36 <__kernel_rem_pio2+0x4d6>
 801cd3c:	4b12      	ldr	r3, [pc, #72]	@ (801cd88 <__kernel_rem_pio2+0x328>)
 801cd3e:	461f      	mov	r7, r3
 801cd40:	ab70      	add	r3, sp, #448	@ 0x1c0
 801cd42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cd46:	9306      	str	r3, [sp, #24]
 801cd48:	f04f 0a00 	mov.w	sl, #0
 801cd4c:	f04f 0b00 	mov.w	fp, #0
 801cd50:	2600      	movs	r6, #0
 801cd52:	eba8 0504 	sub.w	r5, r8, r4
 801cd56:	e0e2      	b.n	801cf1e <__kernel_rem_pio2+0x4be>
 801cd58:	f04f 0902 	mov.w	r9, #2
 801cd5c:	e754      	b.n	801cc08 <__kernel_rem_pio2+0x1a8>
 801cd5e:	bf00      	nop
	...
 801cd6c:	3ff00000 	.word	0x3ff00000
 801cd70:	080295f8 	.word	0x080295f8
 801cd74:	40200000 	.word	0x40200000
 801cd78:	3ff00000 	.word	0x3ff00000
 801cd7c:	3e700000 	.word	0x3e700000
 801cd80:	41700000 	.word	0x41700000
 801cd84:	3fe00000 	.word	0x3fe00000
 801cd88:	080295b8 	.word	0x080295b8
 801cd8c:	f854 3b04 	ldr.w	r3, [r4], #4
 801cd90:	b945      	cbnz	r5, 801cda4 <__kernel_rem_pio2+0x344>
 801cd92:	b123      	cbz	r3, 801cd9e <__kernel_rem_pio2+0x33e>
 801cd94:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801cd98:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd9c:	2301      	movs	r3, #1
 801cd9e:	3201      	adds	r2, #1
 801cda0:	461d      	mov	r5, r3
 801cda2:	e738      	b.n	801cc16 <__kernel_rem_pio2+0x1b6>
 801cda4:	1acb      	subs	r3, r1, r3
 801cda6:	e7f7      	b.n	801cd98 <__kernel_rem_pio2+0x338>
 801cda8:	f108 32ff 	add.w	r2, r8, #4294967295
 801cdac:	ab0c      	add	r3, sp, #48	@ 0x30
 801cdae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cdb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801cdb6:	a90c      	add	r1, sp, #48	@ 0x30
 801cdb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801cdbc:	e739      	b.n	801cc32 <__kernel_rem_pio2+0x1d2>
 801cdbe:	f108 32ff 	add.w	r2, r8, #4294967295
 801cdc2:	ab0c      	add	r3, sp, #48	@ 0x30
 801cdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cdc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cdcc:	e7f3      	b.n	801cdb6 <__kernel_rem_pio2+0x356>
 801cdce:	a90c      	add	r1, sp, #48	@ 0x30
 801cdd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801cdd4:	3b01      	subs	r3, #1
 801cdd6:	430a      	orrs	r2, r1
 801cdd8:	e787      	b.n	801ccea <__kernel_rem_pio2+0x28a>
 801cdda:	3401      	adds	r4, #1
 801cddc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801cde0:	2a00      	cmp	r2, #0
 801cde2:	d0fa      	beq.n	801cdda <__kernel_rem_pio2+0x37a>
 801cde4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cde6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801cdea:	eb0d 0503 	add.w	r5, sp, r3
 801cdee:	9b06      	ldr	r3, [sp, #24]
 801cdf0:	aa20      	add	r2, sp, #128	@ 0x80
 801cdf2:	4443      	add	r3, r8
 801cdf4:	f108 0701 	add.w	r7, r8, #1
 801cdf8:	3d98      	subs	r5, #152	@ 0x98
 801cdfa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801cdfe:	4444      	add	r4, r8
 801ce00:	42bc      	cmp	r4, r7
 801ce02:	da04      	bge.n	801ce0e <__kernel_rem_pio2+0x3ae>
 801ce04:	46a0      	mov	r8, r4
 801ce06:	e6a2      	b.n	801cb4e <__kernel_rem_pio2+0xee>
 801ce08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce0a:	2401      	movs	r4, #1
 801ce0c:	e7e6      	b.n	801cddc <__kernel_rem_pio2+0x37c>
 801ce0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce10:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801ce14:	f7e3 fbb6 	bl	8000584 <__aeabi_i2d>
 801ce18:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801d0e0 <__kernel_rem_pio2+0x680>
 801ce1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ce20:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ce24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ce28:	46b2      	mov	sl, r6
 801ce2a:	f04f 0800 	mov.w	r8, #0
 801ce2e:	9b05      	ldr	r3, [sp, #20]
 801ce30:	4598      	cmp	r8, r3
 801ce32:	dd05      	ble.n	801ce40 <__kernel_rem_pio2+0x3e0>
 801ce34:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ce38:	3701      	adds	r7, #1
 801ce3a:	eca5 7b02 	vstmia	r5!, {d7}
 801ce3e:	e7df      	b.n	801ce00 <__kernel_rem_pio2+0x3a0>
 801ce40:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801ce44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ce48:	f7e3 fc06 	bl	8000658 <__aeabi_dmul>
 801ce4c:	4602      	mov	r2, r0
 801ce4e:	460b      	mov	r3, r1
 801ce50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ce54:	f7e3 fa4a 	bl	80002ec <__adddf3>
 801ce58:	f108 0801 	add.w	r8, r8, #1
 801ce5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ce60:	e7e5      	b.n	801ce2e <__kernel_rem_pio2+0x3ce>
 801ce62:	f1cb 0000 	rsb	r0, fp, #0
 801ce66:	ec47 6b10 	vmov	d0, r6, r7
 801ce6a:	f7ff fcd5 	bl	801c818 <scalbn>
 801ce6e:	ec55 4b10 	vmov	r4, r5, d0
 801ce72:	4b9d      	ldr	r3, [pc, #628]	@ (801d0e8 <__kernel_rem_pio2+0x688>)
 801ce74:	2200      	movs	r2, #0
 801ce76:	4620      	mov	r0, r4
 801ce78:	4629      	mov	r1, r5
 801ce7a:	f7e3 fe73 	bl	8000b64 <__aeabi_dcmpge>
 801ce7e:	b300      	cbz	r0, 801cec2 <__kernel_rem_pio2+0x462>
 801ce80:	4b9a      	ldr	r3, [pc, #616]	@ (801d0ec <__kernel_rem_pio2+0x68c>)
 801ce82:	2200      	movs	r2, #0
 801ce84:	4620      	mov	r0, r4
 801ce86:	4629      	mov	r1, r5
 801ce88:	f7e3 fbe6 	bl	8000658 <__aeabi_dmul>
 801ce8c:	f7e3 fe94 	bl	8000bb8 <__aeabi_d2iz>
 801ce90:	4606      	mov	r6, r0
 801ce92:	f7e3 fb77 	bl	8000584 <__aeabi_i2d>
 801ce96:	4b94      	ldr	r3, [pc, #592]	@ (801d0e8 <__kernel_rem_pio2+0x688>)
 801ce98:	2200      	movs	r2, #0
 801ce9a:	f7e3 fbdd 	bl	8000658 <__aeabi_dmul>
 801ce9e:	460b      	mov	r3, r1
 801cea0:	4602      	mov	r2, r0
 801cea2:	4629      	mov	r1, r5
 801cea4:	4620      	mov	r0, r4
 801cea6:	f7e3 fa1f 	bl	80002e8 <__aeabi_dsub>
 801ceaa:	f7e3 fe85 	bl	8000bb8 <__aeabi_d2iz>
 801ceae:	ab0c      	add	r3, sp, #48	@ 0x30
 801ceb0:	f10b 0b18 	add.w	fp, fp, #24
 801ceb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801ceb8:	f108 0801 	add.w	r8, r8, #1
 801cebc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801cec0:	e722      	b.n	801cd08 <__kernel_rem_pio2+0x2a8>
 801cec2:	4620      	mov	r0, r4
 801cec4:	4629      	mov	r1, r5
 801cec6:	f7e3 fe77 	bl	8000bb8 <__aeabi_d2iz>
 801ceca:	ab0c      	add	r3, sp, #48	@ 0x30
 801cecc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801ced0:	e71a      	b.n	801cd08 <__kernel_rem_pio2+0x2a8>
 801ced2:	ab0c      	add	r3, sp, #48	@ 0x30
 801ced4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ced8:	f7e3 fb54 	bl	8000584 <__aeabi_i2d>
 801cedc:	4622      	mov	r2, r4
 801cede:	462b      	mov	r3, r5
 801cee0:	f7e3 fbba 	bl	8000658 <__aeabi_dmul>
 801cee4:	4652      	mov	r2, sl
 801cee6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801ceea:	465b      	mov	r3, fp
 801ceec:	4620      	mov	r0, r4
 801ceee:	4629      	mov	r1, r5
 801cef0:	f7e3 fbb2 	bl	8000658 <__aeabi_dmul>
 801cef4:	3e01      	subs	r6, #1
 801cef6:	4604      	mov	r4, r0
 801cef8:	460d      	mov	r5, r1
 801cefa:	e718      	b.n	801cd2e <__kernel_rem_pio2+0x2ce>
 801cefc:	9906      	ldr	r1, [sp, #24]
 801cefe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801cf02:	9106      	str	r1, [sp, #24]
 801cf04:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801cf08:	f7e3 fba6 	bl	8000658 <__aeabi_dmul>
 801cf0c:	4602      	mov	r2, r0
 801cf0e:	460b      	mov	r3, r1
 801cf10:	4650      	mov	r0, sl
 801cf12:	4659      	mov	r1, fp
 801cf14:	f7e3 f9ea 	bl	80002ec <__adddf3>
 801cf18:	3601      	adds	r6, #1
 801cf1a:	4682      	mov	sl, r0
 801cf1c:	468b      	mov	fp, r1
 801cf1e:	9b00      	ldr	r3, [sp, #0]
 801cf20:	429e      	cmp	r6, r3
 801cf22:	dc01      	bgt.n	801cf28 <__kernel_rem_pio2+0x4c8>
 801cf24:	42b5      	cmp	r5, r6
 801cf26:	dae9      	bge.n	801cefc <__kernel_rem_pio2+0x49c>
 801cf28:	ab48      	add	r3, sp, #288	@ 0x120
 801cf2a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801cf2e:	e9c5 ab00 	strd	sl, fp, [r5]
 801cf32:	3c01      	subs	r4, #1
 801cf34:	e6ff      	b.n	801cd36 <__kernel_rem_pio2+0x2d6>
 801cf36:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801cf38:	2b02      	cmp	r3, #2
 801cf3a:	dc0b      	bgt.n	801cf54 <__kernel_rem_pio2+0x4f4>
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	dc39      	bgt.n	801cfb4 <__kernel_rem_pio2+0x554>
 801cf40:	d05d      	beq.n	801cffe <__kernel_rem_pio2+0x59e>
 801cf42:	9b02      	ldr	r3, [sp, #8]
 801cf44:	f003 0007 	and.w	r0, r3, #7
 801cf48:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801cf4c:	ecbd 8b02 	vpop	{d8}
 801cf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf54:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801cf56:	2b03      	cmp	r3, #3
 801cf58:	d1f3      	bne.n	801cf42 <__kernel_rem_pio2+0x4e2>
 801cf5a:	9b05      	ldr	r3, [sp, #20]
 801cf5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801cf60:	eb0d 0403 	add.w	r4, sp, r3
 801cf64:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801cf68:	4625      	mov	r5, r4
 801cf6a:	46c2      	mov	sl, r8
 801cf6c:	f1ba 0f00 	cmp.w	sl, #0
 801cf70:	f1a5 0508 	sub.w	r5, r5, #8
 801cf74:	dc6b      	bgt.n	801d04e <__kernel_rem_pio2+0x5ee>
 801cf76:	4645      	mov	r5, r8
 801cf78:	2d01      	cmp	r5, #1
 801cf7a:	f1a4 0408 	sub.w	r4, r4, #8
 801cf7e:	f300 8087 	bgt.w	801d090 <__kernel_rem_pio2+0x630>
 801cf82:	9c05      	ldr	r4, [sp, #20]
 801cf84:	ab48      	add	r3, sp, #288	@ 0x120
 801cf86:	441c      	add	r4, r3
 801cf88:	2000      	movs	r0, #0
 801cf8a:	2100      	movs	r1, #0
 801cf8c:	f1b8 0f01 	cmp.w	r8, #1
 801cf90:	f300 809c 	bgt.w	801d0cc <__kernel_rem_pio2+0x66c>
 801cf94:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801cf98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801cf9c:	f1b9 0f00 	cmp.w	r9, #0
 801cfa0:	f040 80a6 	bne.w	801d0f0 <__kernel_rem_pio2+0x690>
 801cfa4:	9b04      	ldr	r3, [sp, #16]
 801cfa6:	e9c3 7800 	strd	r7, r8, [r3]
 801cfaa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801cfae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801cfb2:	e7c6      	b.n	801cf42 <__kernel_rem_pio2+0x4e2>
 801cfb4:	9d05      	ldr	r5, [sp, #20]
 801cfb6:	ab48      	add	r3, sp, #288	@ 0x120
 801cfb8:	441d      	add	r5, r3
 801cfba:	4644      	mov	r4, r8
 801cfbc:	2000      	movs	r0, #0
 801cfbe:	2100      	movs	r1, #0
 801cfc0:	2c00      	cmp	r4, #0
 801cfc2:	da35      	bge.n	801d030 <__kernel_rem_pio2+0x5d0>
 801cfc4:	f1b9 0f00 	cmp.w	r9, #0
 801cfc8:	d038      	beq.n	801d03c <__kernel_rem_pio2+0x5dc>
 801cfca:	4602      	mov	r2, r0
 801cfcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cfd0:	9c04      	ldr	r4, [sp, #16]
 801cfd2:	e9c4 2300 	strd	r2, r3, [r4]
 801cfd6:	4602      	mov	r2, r0
 801cfd8:	460b      	mov	r3, r1
 801cfda:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801cfde:	f7e3 f983 	bl	80002e8 <__aeabi_dsub>
 801cfe2:	ad4a      	add	r5, sp, #296	@ 0x128
 801cfe4:	2401      	movs	r4, #1
 801cfe6:	45a0      	cmp	r8, r4
 801cfe8:	da2b      	bge.n	801d042 <__kernel_rem_pio2+0x5e2>
 801cfea:	f1b9 0f00 	cmp.w	r9, #0
 801cfee:	d002      	beq.n	801cff6 <__kernel_rem_pio2+0x596>
 801cff0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cff4:	4619      	mov	r1, r3
 801cff6:	9b04      	ldr	r3, [sp, #16]
 801cff8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801cffc:	e7a1      	b.n	801cf42 <__kernel_rem_pio2+0x4e2>
 801cffe:	9c05      	ldr	r4, [sp, #20]
 801d000:	ab48      	add	r3, sp, #288	@ 0x120
 801d002:	441c      	add	r4, r3
 801d004:	2000      	movs	r0, #0
 801d006:	2100      	movs	r1, #0
 801d008:	f1b8 0f00 	cmp.w	r8, #0
 801d00c:	da09      	bge.n	801d022 <__kernel_rem_pio2+0x5c2>
 801d00e:	f1b9 0f00 	cmp.w	r9, #0
 801d012:	d002      	beq.n	801d01a <__kernel_rem_pio2+0x5ba>
 801d014:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d018:	4619      	mov	r1, r3
 801d01a:	9b04      	ldr	r3, [sp, #16]
 801d01c:	e9c3 0100 	strd	r0, r1, [r3]
 801d020:	e78f      	b.n	801cf42 <__kernel_rem_pio2+0x4e2>
 801d022:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d026:	f7e3 f961 	bl	80002ec <__adddf3>
 801d02a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d02e:	e7eb      	b.n	801d008 <__kernel_rem_pio2+0x5a8>
 801d030:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801d034:	f7e3 f95a 	bl	80002ec <__adddf3>
 801d038:	3c01      	subs	r4, #1
 801d03a:	e7c1      	b.n	801cfc0 <__kernel_rem_pio2+0x560>
 801d03c:	4602      	mov	r2, r0
 801d03e:	460b      	mov	r3, r1
 801d040:	e7c6      	b.n	801cfd0 <__kernel_rem_pio2+0x570>
 801d042:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801d046:	f7e3 f951 	bl	80002ec <__adddf3>
 801d04a:	3401      	adds	r4, #1
 801d04c:	e7cb      	b.n	801cfe6 <__kernel_rem_pio2+0x586>
 801d04e:	ed95 7b00 	vldr	d7, [r5]
 801d052:	ed8d 7b00 	vstr	d7, [sp]
 801d056:	ed95 7b02 	vldr	d7, [r5, #8]
 801d05a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d05e:	ec53 2b17 	vmov	r2, r3, d7
 801d062:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d066:	f7e3 f941 	bl	80002ec <__adddf3>
 801d06a:	4602      	mov	r2, r0
 801d06c:	460b      	mov	r3, r1
 801d06e:	4606      	mov	r6, r0
 801d070:	460f      	mov	r7, r1
 801d072:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d076:	f7e3 f937 	bl	80002e8 <__aeabi_dsub>
 801d07a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d07e:	f7e3 f935 	bl	80002ec <__adddf3>
 801d082:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d086:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801d08a:	e9c5 6700 	strd	r6, r7, [r5]
 801d08e:	e76d      	b.n	801cf6c <__kernel_rem_pio2+0x50c>
 801d090:	ed94 7b00 	vldr	d7, [r4]
 801d094:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801d098:	ec51 0b17 	vmov	r0, r1, d7
 801d09c:	4652      	mov	r2, sl
 801d09e:	465b      	mov	r3, fp
 801d0a0:	ed8d 7b00 	vstr	d7, [sp]
 801d0a4:	f7e3 f922 	bl	80002ec <__adddf3>
 801d0a8:	4602      	mov	r2, r0
 801d0aa:	460b      	mov	r3, r1
 801d0ac:	4606      	mov	r6, r0
 801d0ae:	460f      	mov	r7, r1
 801d0b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d0b4:	f7e3 f918 	bl	80002e8 <__aeabi_dsub>
 801d0b8:	4652      	mov	r2, sl
 801d0ba:	465b      	mov	r3, fp
 801d0bc:	f7e3 f916 	bl	80002ec <__adddf3>
 801d0c0:	3d01      	subs	r5, #1
 801d0c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d0c6:	e9c4 6700 	strd	r6, r7, [r4]
 801d0ca:	e755      	b.n	801cf78 <__kernel_rem_pio2+0x518>
 801d0cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d0d0:	f7e3 f90c 	bl	80002ec <__adddf3>
 801d0d4:	f108 38ff 	add.w	r8, r8, #4294967295
 801d0d8:	e758      	b.n	801cf8c <__kernel_rem_pio2+0x52c>
 801d0da:	bf00      	nop
 801d0dc:	f3af 8000 	nop.w
	...
 801d0e8:	41700000 	.word	0x41700000
 801d0ec:	3e700000 	.word	0x3e700000
 801d0f0:	9b04      	ldr	r3, [sp, #16]
 801d0f2:	9a04      	ldr	r2, [sp, #16]
 801d0f4:	601f      	str	r7, [r3, #0]
 801d0f6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801d0fa:	605c      	str	r4, [r3, #4]
 801d0fc:	609d      	str	r5, [r3, #8]
 801d0fe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d102:	60d3      	str	r3, [r2, #12]
 801d104:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801d108:	6110      	str	r0, [r2, #16]
 801d10a:	6153      	str	r3, [r2, #20]
 801d10c:	e719      	b.n	801cf42 <__kernel_rem_pio2+0x4e2>
 801d10e:	bf00      	nop

0801d110 <__kernel_rem_pio2f>:
 801d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d114:	ed2d 8b04 	vpush	{d8-d9}
 801d118:	b0d9      	sub	sp, #356	@ 0x164
 801d11a:	4690      	mov	r8, r2
 801d11c:	9001      	str	r0, [sp, #4]
 801d11e:	4ab9      	ldr	r2, [pc, #740]	@ (801d404 <__kernel_rem_pio2f+0x2f4>)
 801d120:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801d122:	f118 0f04 	cmn.w	r8, #4
 801d126:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801d12a:	460f      	mov	r7, r1
 801d12c:	f103 3bff 	add.w	fp, r3, #4294967295
 801d130:	db27      	blt.n	801d182 <__kernel_rem_pio2f+0x72>
 801d132:	f1b8 0203 	subs.w	r2, r8, #3
 801d136:	bf48      	it	mi
 801d138:	f108 0204 	addmi.w	r2, r8, #4
 801d13c:	10d2      	asrs	r2, r2, #3
 801d13e:	1c55      	adds	r5, r2, #1
 801d140:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801d142:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801d414 <__kernel_rem_pio2f+0x304>
 801d146:	00e8      	lsls	r0, r5, #3
 801d148:	eba2 060b 	sub.w	r6, r2, fp
 801d14c:	9002      	str	r0, [sp, #8]
 801d14e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801d152:	eb0a 0c0b 	add.w	ip, sl, fp
 801d156:	ac1c      	add	r4, sp, #112	@ 0x70
 801d158:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801d15c:	2000      	movs	r0, #0
 801d15e:	4560      	cmp	r0, ip
 801d160:	dd11      	ble.n	801d186 <__kernel_rem_pio2f+0x76>
 801d162:	a91c      	add	r1, sp, #112	@ 0x70
 801d164:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801d168:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801d16c:	f04f 0c00 	mov.w	ip, #0
 801d170:	45d4      	cmp	ip, sl
 801d172:	dc27      	bgt.n	801d1c4 <__kernel_rem_pio2f+0xb4>
 801d174:	f8dd e004 	ldr.w	lr, [sp, #4]
 801d178:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801d414 <__kernel_rem_pio2f+0x304>
 801d17c:	4606      	mov	r6, r0
 801d17e:	2400      	movs	r4, #0
 801d180:	e016      	b.n	801d1b0 <__kernel_rem_pio2f+0xa0>
 801d182:	2200      	movs	r2, #0
 801d184:	e7db      	b.n	801d13e <__kernel_rem_pio2f+0x2e>
 801d186:	42c6      	cmn	r6, r0
 801d188:	bf5d      	ittte	pl
 801d18a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801d18e:	ee07 1a90 	vmovpl	s15, r1
 801d192:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801d196:	eef0 7a47 	vmovmi.f32	s15, s14
 801d19a:	ece4 7a01 	vstmia	r4!, {s15}
 801d19e:	3001      	adds	r0, #1
 801d1a0:	e7dd      	b.n	801d15e <__kernel_rem_pio2f+0x4e>
 801d1a2:	ecfe 6a01 	vldmia	lr!, {s13}
 801d1a6:	ed96 7a00 	vldr	s14, [r6]
 801d1aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d1ae:	3401      	adds	r4, #1
 801d1b0:	455c      	cmp	r4, fp
 801d1b2:	f1a6 0604 	sub.w	r6, r6, #4
 801d1b6:	ddf4      	ble.n	801d1a2 <__kernel_rem_pio2f+0x92>
 801d1b8:	ece9 7a01 	vstmia	r9!, {s15}
 801d1bc:	f10c 0c01 	add.w	ip, ip, #1
 801d1c0:	3004      	adds	r0, #4
 801d1c2:	e7d5      	b.n	801d170 <__kernel_rem_pio2f+0x60>
 801d1c4:	a908      	add	r1, sp, #32
 801d1c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d1ca:	9104      	str	r1, [sp, #16]
 801d1cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801d1ce:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801d410 <__kernel_rem_pio2f+0x300>
 801d1d2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801d40c <__kernel_rem_pio2f+0x2fc>
 801d1d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801d1da:	9203      	str	r2, [sp, #12]
 801d1dc:	4654      	mov	r4, sl
 801d1de:	00a2      	lsls	r2, r4, #2
 801d1e0:	9205      	str	r2, [sp, #20]
 801d1e2:	aa58      	add	r2, sp, #352	@ 0x160
 801d1e4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801d1e8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801d1ec:	a944      	add	r1, sp, #272	@ 0x110
 801d1ee:	aa08      	add	r2, sp, #32
 801d1f0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801d1f4:	4694      	mov	ip, r2
 801d1f6:	4626      	mov	r6, r4
 801d1f8:	2e00      	cmp	r6, #0
 801d1fa:	f1a0 0004 	sub.w	r0, r0, #4
 801d1fe:	dc4c      	bgt.n	801d29a <__kernel_rem_pio2f+0x18a>
 801d200:	4628      	mov	r0, r5
 801d202:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d206:	f7ff fbc3 	bl	801c990 <scalbnf>
 801d20a:	eeb0 8a40 	vmov.f32	s16, s0
 801d20e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801d212:	ee28 0a00 	vmul.f32	s0, s16, s0
 801d216:	f000 f9ed 	bl	801d5f4 <floorf>
 801d21a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801d21e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801d222:	2d00      	cmp	r5, #0
 801d224:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d228:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801d22c:	ee17 9a90 	vmov	r9, s15
 801d230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d234:	ee38 8a67 	vsub.f32	s16, s16, s15
 801d238:	dd41      	ble.n	801d2be <__kernel_rem_pio2f+0x1ae>
 801d23a:	f104 3cff 	add.w	ip, r4, #4294967295
 801d23e:	a908      	add	r1, sp, #32
 801d240:	f1c5 0e08 	rsb	lr, r5, #8
 801d244:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801d248:	fa46 f00e 	asr.w	r0, r6, lr
 801d24c:	4481      	add	r9, r0
 801d24e:	fa00 f00e 	lsl.w	r0, r0, lr
 801d252:	1a36      	subs	r6, r6, r0
 801d254:	f1c5 0007 	rsb	r0, r5, #7
 801d258:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801d25c:	4106      	asrs	r6, r0
 801d25e:	2e00      	cmp	r6, #0
 801d260:	dd3c      	ble.n	801d2dc <__kernel_rem_pio2f+0x1cc>
 801d262:	f04f 0e00 	mov.w	lr, #0
 801d266:	f109 0901 	add.w	r9, r9, #1
 801d26a:	4670      	mov	r0, lr
 801d26c:	4574      	cmp	r4, lr
 801d26e:	dc68      	bgt.n	801d342 <__kernel_rem_pio2f+0x232>
 801d270:	2d00      	cmp	r5, #0
 801d272:	dd03      	ble.n	801d27c <__kernel_rem_pio2f+0x16c>
 801d274:	2d01      	cmp	r5, #1
 801d276:	d074      	beq.n	801d362 <__kernel_rem_pio2f+0x252>
 801d278:	2d02      	cmp	r5, #2
 801d27a:	d07d      	beq.n	801d378 <__kernel_rem_pio2f+0x268>
 801d27c:	2e02      	cmp	r6, #2
 801d27e:	d12d      	bne.n	801d2dc <__kernel_rem_pio2f+0x1cc>
 801d280:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d284:	ee30 8a48 	vsub.f32	s16, s0, s16
 801d288:	b340      	cbz	r0, 801d2dc <__kernel_rem_pio2f+0x1cc>
 801d28a:	4628      	mov	r0, r5
 801d28c:	9306      	str	r3, [sp, #24]
 801d28e:	f7ff fb7f 	bl	801c990 <scalbnf>
 801d292:	9b06      	ldr	r3, [sp, #24]
 801d294:	ee38 8a40 	vsub.f32	s16, s16, s0
 801d298:	e020      	b.n	801d2dc <__kernel_rem_pio2f+0x1cc>
 801d29a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801d29e:	3e01      	subs	r6, #1
 801d2a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d2a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d2a8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801d2ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d2b0:	ecac 0a01 	vstmia	ip!, {s0}
 801d2b4:	ed90 0a00 	vldr	s0, [r0]
 801d2b8:	ee37 0a80 	vadd.f32	s0, s15, s0
 801d2bc:	e79c      	b.n	801d1f8 <__kernel_rem_pio2f+0xe8>
 801d2be:	d105      	bne.n	801d2cc <__kernel_rem_pio2f+0x1bc>
 801d2c0:	1e60      	subs	r0, r4, #1
 801d2c2:	a908      	add	r1, sp, #32
 801d2c4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801d2c8:	11f6      	asrs	r6, r6, #7
 801d2ca:	e7c8      	b.n	801d25e <__kernel_rem_pio2f+0x14e>
 801d2cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801d2d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2d8:	da31      	bge.n	801d33e <__kernel_rem_pio2f+0x22e>
 801d2da:	2600      	movs	r6, #0
 801d2dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2e4:	f040 8098 	bne.w	801d418 <__kernel_rem_pio2f+0x308>
 801d2e8:	1e60      	subs	r0, r4, #1
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	4550      	cmp	r0, sl
 801d2ee:	da4b      	bge.n	801d388 <__kernel_rem_pio2f+0x278>
 801d2f0:	2a00      	cmp	r2, #0
 801d2f2:	d065      	beq.n	801d3c0 <__kernel_rem_pio2f+0x2b0>
 801d2f4:	3c01      	subs	r4, #1
 801d2f6:	ab08      	add	r3, sp, #32
 801d2f8:	3d08      	subs	r5, #8
 801d2fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d0f8      	beq.n	801d2f4 <__kernel_rem_pio2f+0x1e4>
 801d302:	4628      	mov	r0, r5
 801d304:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d308:	f7ff fb42 	bl	801c990 <scalbnf>
 801d30c:	1c63      	adds	r3, r4, #1
 801d30e:	aa44      	add	r2, sp, #272	@ 0x110
 801d310:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801d410 <__kernel_rem_pio2f+0x300>
 801d314:	0099      	lsls	r1, r3, #2
 801d316:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d31a:	4623      	mov	r3, r4
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	f280 80a9 	bge.w	801d474 <__kernel_rem_pio2f+0x364>
 801d322:	4623      	mov	r3, r4
 801d324:	2b00      	cmp	r3, #0
 801d326:	f2c0 80c7 	blt.w	801d4b8 <__kernel_rem_pio2f+0x3a8>
 801d32a:	aa44      	add	r2, sp, #272	@ 0x110
 801d32c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801d330:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801d408 <__kernel_rem_pio2f+0x2f8>
 801d334:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801d414 <__kernel_rem_pio2f+0x304>
 801d338:	2000      	movs	r0, #0
 801d33a:	1ae2      	subs	r2, r4, r3
 801d33c:	e0b1      	b.n	801d4a2 <__kernel_rem_pio2f+0x392>
 801d33e:	2602      	movs	r6, #2
 801d340:	e78f      	b.n	801d262 <__kernel_rem_pio2f+0x152>
 801d342:	f852 1b04 	ldr.w	r1, [r2], #4
 801d346:	b948      	cbnz	r0, 801d35c <__kernel_rem_pio2f+0x24c>
 801d348:	b121      	cbz	r1, 801d354 <__kernel_rem_pio2f+0x244>
 801d34a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801d34e:	f842 1c04 	str.w	r1, [r2, #-4]
 801d352:	2101      	movs	r1, #1
 801d354:	f10e 0e01 	add.w	lr, lr, #1
 801d358:	4608      	mov	r0, r1
 801d35a:	e787      	b.n	801d26c <__kernel_rem_pio2f+0x15c>
 801d35c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801d360:	e7f5      	b.n	801d34e <__kernel_rem_pio2f+0x23e>
 801d362:	f104 3cff 	add.w	ip, r4, #4294967295
 801d366:	aa08      	add	r2, sp, #32
 801d368:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d36c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801d370:	a908      	add	r1, sp, #32
 801d372:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801d376:	e781      	b.n	801d27c <__kernel_rem_pio2f+0x16c>
 801d378:	f104 3cff 	add.w	ip, r4, #4294967295
 801d37c:	aa08      	add	r2, sp, #32
 801d37e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d382:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d386:	e7f3      	b.n	801d370 <__kernel_rem_pio2f+0x260>
 801d388:	a908      	add	r1, sp, #32
 801d38a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801d38e:	3801      	subs	r0, #1
 801d390:	430a      	orrs	r2, r1
 801d392:	e7ab      	b.n	801d2ec <__kernel_rem_pio2f+0x1dc>
 801d394:	3201      	adds	r2, #1
 801d396:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801d39a:	2e00      	cmp	r6, #0
 801d39c:	d0fa      	beq.n	801d394 <__kernel_rem_pio2f+0x284>
 801d39e:	9905      	ldr	r1, [sp, #20]
 801d3a0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801d3a4:	eb0d 0001 	add.w	r0, sp, r1
 801d3a8:	18e6      	adds	r6, r4, r3
 801d3aa:	a91c      	add	r1, sp, #112	@ 0x70
 801d3ac:	f104 0c01 	add.w	ip, r4, #1
 801d3b0:	384c      	subs	r0, #76	@ 0x4c
 801d3b2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801d3b6:	4422      	add	r2, r4
 801d3b8:	4562      	cmp	r2, ip
 801d3ba:	da04      	bge.n	801d3c6 <__kernel_rem_pio2f+0x2b6>
 801d3bc:	4614      	mov	r4, r2
 801d3be:	e70e      	b.n	801d1de <__kernel_rem_pio2f+0xce>
 801d3c0:	9804      	ldr	r0, [sp, #16]
 801d3c2:	2201      	movs	r2, #1
 801d3c4:	e7e7      	b.n	801d396 <__kernel_rem_pio2f+0x286>
 801d3c6:	9903      	ldr	r1, [sp, #12]
 801d3c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 801d3cc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801d3d0:	9105      	str	r1, [sp, #20]
 801d3d2:	ee07 1a90 	vmov	s15, r1
 801d3d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d3da:	2400      	movs	r4, #0
 801d3dc:	ece6 7a01 	vstmia	r6!, {s15}
 801d3e0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801d414 <__kernel_rem_pio2f+0x304>
 801d3e4:	46b1      	mov	r9, r6
 801d3e6:	455c      	cmp	r4, fp
 801d3e8:	dd04      	ble.n	801d3f4 <__kernel_rem_pio2f+0x2e4>
 801d3ea:	ece0 7a01 	vstmia	r0!, {s15}
 801d3ee:	f10c 0c01 	add.w	ip, ip, #1
 801d3f2:	e7e1      	b.n	801d3b8 <__kernel_rem_pio2f+0x2a8>
 801d3f4:	ecfe 6a01 	vldmia	lr!, {s13}
 801d3f8:	ed39 7a01 	vldmdb	r9!, {s14}
 801d3fc:	3401      	adds	r4, #1
 801d3fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d402:	e7f0      	b.n	801d3e6 <__kernel_rem_pio2f+0x2d6>
 801d404:	08029634 	.word	0x08029634
 801d408:	08029608 	.word	0x08029608
 801d40c:	43800000 	.word	0x43800000
 801d410:	3b800000 	.word	0x3b800000
 801d414:	00000000 	.word	0x00000000
 801d418:	9b02      	ldr	r3, [sp, #8]
 801d41a:	eeb0 0a48 	vmov.f32	s0, s16
 801d41e:	eba3 0008 	sub.w	r0, r3, r8
 801d422:	f7ff fab5 	bl	801c990 <scalbnf>
 801d426:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801d40c <__kernel_rem_pio2f+0x2fc>
 801d42a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801d42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d432:	db19      	blt.n	801d468 <__kernel_rem_pio2f+0x358>
 801d434:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801d410 <__kernel_rem_pio2f+0x300>
 801d438:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d43c:	aa08      	add	r2, sp, #32
 801d43e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d442:	3508      	adds	r5, #8
 801d444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d448:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801d44c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d450:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d454:	ee10 3a10 	vmov	r3, s0
 801d458:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d45c:	ee17 3a90 	vmov	r3, s15
 801d460:	3401      	adds	r4, #1
 801d462:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d466:	e74c      	b.n	801d302 <__kernel_rem_pio2f+0x1f2>
 801d468:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d46c:	aa08      	add	r2, sp, #32
 801d46e:	ee10 3a10 	vmov	r3, s0
 801d472:	e7f6      	b.n	801d462 <__kernel_rem_pio2f+0x352>
 801d474:	a808      	add	r0, sp, #32
 801d476:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801d47a:	9001      	str	r0, [sp, #4]
 801d47c:	ee07 0a90 	vmov	s15, r0
 801d480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d484:	3b01      	subs	r3, #1
 801d486:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d48a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801d48e:	ed62 7a01 	vstmdb	r2!, {s15}
 801d492:	e743      	b.n	801d31c <__kernel_rem_pio2f+0x20c>
 801d494:	ecfc 6a01 	vldmia	ip!, {s13}
 801d498:	ecb5 7a01 	vldmia	r5!, {s14}
 801d49c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d4a0:	3001      	adds	r0, #1
 801d4a2:	4550      	cmp	r0, sl
 801d4a4:	dc01      	bgt.n	801d4aa <__kernel_rem_pio2f+0x39a>
 801d4a6:	4282      	cmp	r2, r0
 801d4a8:	daf4      	bge.n	801d494 <__kernel_rem_pio2f+0x384>
 801d4aa:	a858      	add	r0, sp, #352	@ 0x160
 801d4ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801d4b0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801d4b4:	3b01      	subs	r3, #1
 801d4b6:	e735      	b.n	801d324 <__kernel_rem_pio2f+0x214>
 801d4b8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801d4ba:	2b02      	cmp	r3, #2
 801d4bc:	dc09      	bgt.n	801d4d2 <__kernel_rem_pio2f+0x3c2>
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	dc2b      	bgt.n	801d51a <__kernel_rem_pio2f+0x40a>
 801d4c2:	d044      	beq.n	801d54e <__kernel_rem_pio2f+0x43e>
 801d4c4:	f009 0007 	and.w	r0, r9, #7
 801d4c8:	b059      	add	sp, #356	@ 0x164
 801d4ca:	ecbd 8b04 	vpop	{d8-d9}
 801d4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4d2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801d4d4:	2b03      	cmp	r3, #3
 801d4d6:	d1f5      	bne.n	801d4c4 <__kernel_rem_pio2f+0x3b4>
 801d4d8:	aa30      	add	r2, sp, #192	@ 0xc0
 801d4da:	1f0b      	subs	r3, r1, #4
 801d4dc:	4413      	add	r3, r2
 801d4de:	461a      	mov	r2, r3
 801d4e0:	4620      	mov	r0, r4
 801d4e2:	2800      	cmp	r0, #0
 801d4e4:	f1a2 0204 	sub.w	r2, r2, #4
 801d4e8:	dc52      	bgt.n	801d590 <__kernel_rem_pio2f+0x480>
 801d4ea:	4622      	mov	r2, r4
 801d4ec:	2a01      	cmp	r2, #1
 801d4ee:	f1a3 0304 	sub.w	r3, r3, #4
 801d4f2:	dc5d      	bgt.n	801d5b0 <__kernel_rem_pio2f+0x4a0>
 801d4f4:	ab30      	add	r3, sp, #192	@ 0xc0
 801d4f6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801d414 <__kernel_rem_pio2f+0x304>
 801d4fa:	440b      	add	r3, r1
 801d4fc:	2c01      	cmp	r4, #1
 801d4fe:	dc67      	bgt.n	801d5d0 <__kernel_rem_pio2f+0x4c0>
 801d500:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801d504:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801d508:	2e00      	cmp	r6, #0
 801d50a:	d167      	bne.n	801d5dc <__kernel_rem_pio2f+0x4cc>
 801d50c:	edc7 6a00 	vstr	s13, [r7]
 801d510:	ed87 7a01 	vstr	s14, [r7, #4]
 801d514:	edc7 7a02 	vstr	s15, [r7, #8]
 801d518:	e7d4      	b.n	801d4c4 <__kernel_rem_pio2f+0x3b4>
 801d51a:	ab30      	add	r3, sp, #192	@ 0xc0
 801d51c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801d414 <__kernel_rem_pio2f+0x304>
 801d520:	440b      	add	r3, r1
 801d522:	4622      	mov	r2, r4
 801d524:	2a00      	cmp	r2, #0
 801d526:	da24      	bge.n	801d572 <__kernel_rem_pio2f+0x462>
 801d528:	b34e      	cbz	r6, 801d57e <__kernel_rem_pio2f+0x46e>
 801d52a:	eef1 7a47 	vneg.f32	s15, s14
 801d52e:	edc7 7a00 	vstr	s15, [r7]
 801d532:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801d536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d53a:	aa31      	add	r2, sp, #196	@ 0xc4
 801d53c:	2301      	movs	r3, #1
 801d53e:	429c      	cmp	r4, r3
 801d540:	da20      	bge.n	801d584 <__kernel_rem_pio2f+0x474>
 801d542:	b10e      	cbz	r6, 801d548 <__kernel_rem_pio2f+0x438>
 801d544:	eef1 7a67 	vneg.f32	s15, s15
 801d548:	edc7 7a01 	vstr	s15, [r7, #4]
 801d54c:	e7ba      	b.n	801d4c4 <__kernel_rem_pio2f+0x3b4>
 801d54e:	ab30      	add	r3, sp, #192	@ 0xc0
 801d550:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801d414 <__kernel_rem_pio2f+0x304>
 801d554:	440b      	add	r3, r1
 801d556:	2c00      	cmp	r4, #0
 801d558:	da05      	bge.n	801d566 <__kernel_rem_pio2f+0x456>
 801d55a:	b10e      	cbz	r6, 801d560 <__kernel_rem_pio2f+0x450>
 801d55c:	eef1 7a67 	vneg.f32	s15, s15
 801d560:	edc7 7a00 	vstr	s15, [r7]
 801d564:	e7ae      	b.n	801d4c4 <__kernel_rem_pio2f+0x3b4>
 801d566:	ed33 7a01 	vldmdb	r3!, {s14}
 801d56a:	3c01      	subs	r4, #1
 801d56c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d570:	e7f1      	b.n	801d556 <__kernel_rem_pio2f+0x446>
 801d572:	ed73 7a01 	vldmdb	r3!, {s15}
 801d576:	3a01      	subs	r2, #1
 801d578:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d57c:	e7d2      	b.n	801d524 <__kernel_rem_pio2f+0x414>
 801d57e:	eef0 7a47 	vmov.f32	s15, s14
 801d582:	e7d4      	b.n	801d52e <__kernel_rem_pio2f+0x41e>
 801d584:	ecb2 7a01 	vldmia	r2!, {s14}
 801d588:	3301      	adds	r3, #1
 801d58a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d58e:	e7d6      	b.n	801d53e <__kernel_rem_pio2f+0x42e>
 801d590:	edd2 7a00 	vldr	s15, [r2]
 801d594:	edd2 6a01 	vldr	s13, [r2, #4]
 801d598:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d59c:	3801      	subs	r0, #1
 801d59e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d5a2:	ed82 7a00 	vstr	s14, [r2]
 801d5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d5aa:	edc2 7a01 	vstr	s15, [r2, #4]
 801d5ae:	e798      	b.n	801d4e2 <__kernel_rem_pio2f+0x3d2>
 801d5b0:	edd3 7a00 	vldr	s15, [r3]
 801d5b4:	edd3 6a01 	vldr	s13, [r3, #4]
 801d5b8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d5bc:	3a01      	subs	r2, #1
 801d5be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d5c2:	ed83 7a00 	vstr	s14, [r3]
 801d5c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d5ca:	edc3 7a01 	vstr	s15, [r3, #4]
 801d5ce:	e78d      	b.n	801d4ec <__kernel_rem_pio2f+0x3dc>
 801d5d0:	ed33 7a01 	vldmdb	r3!, {s14}
 801d5d4:	3c01      	subs	r4, #1
 801d5d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d5da:	e78f      	b.n	801d4fc <__kernel_rem_pio2f+0x3ec>
 801d5dc:	eef1 6a66 	vneg.f32	s13, s13
 801d5e0:	eeb1 7a47 	vneg.f32	s14, s14
 801d5e4:	edc7 6a00 	vstr	s13, [r7]
 801d5e8:	ed87 7a01 	vstr	s14, [r7, #4]
 801d5ec:	eef1 7a67 	vneg.f32	s15, s15
 801d5f0:	e790      	b.n	801d514 <__kernel_rem_pio2f+0x404>
 801d5f2:	bf00      	nop

0801d5f4 <floorf>:
 801d5f4:	ee10 3a10 	vmov	r3, s0
 801d5f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d5fc:	3a7f      	subs	r2, #127	@ 0x7f
 801d5fe:	2a16      	cmp	r2, #22
 801d600:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801d604:	dc2b      	bgt.n	801d65e <floorf+0x6a>
 801d606:	2a00      	cmp	r2, #0
 801d608:	da12      	bge.n	801d630 <floorf+0x3c>
 801d60a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801d670 <floorf+0x7c>
 801d60e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d612:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d61a:	dd06      	ble.n	801d62a <floorf+0x36>
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	da24      	bge.n	801d66a <floorf+0x76>
 801d620:	2900      	cmp	r1, #0
 801d622:	4b14      	ldr	r3, [pc, #80]	@ (801d674 <floorf+0x80>)
 801d624:	bf08      	it	eq
 801d626:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801d62a:	ee00 3a10 	vmov	s0, r3
 801d62e:	4770      	bx	lr
 801d630:	4911      	ldr	r1, [pc, #68]	@ (801d678 <floorf+0x84>)
 801d632:	4111      	asrs	r1, r2
 801d634:	420b      	tst	r3, r1
 801d636:	d0fa      	beq.n	801d62e <floorf+0x3a>
 801d638:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801d670 <floorf+0x7c>
 801d63c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d640:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d648:	ddef      	ble.n	801d62a <floorf+0x36>
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	bfbe      	ittt	lt
 801d64e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801d652:	fa40 f202 	asrlt.w	r2, r0, r2
 801d656:	189b      	addlt	r3, r3, r2
 801d658:	ea23 0301 	bic.w	r3, r3, r1
 801d65c:	e7e5      	b.n	801d62a <floorf+0x36>
 801d65e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801d662:	d3e4      	bcc.n	801d62e <floorf+0x3a>
 801d664:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d668:	4770      	bx	lr
 801d66a:	2300      	movs	r3, #0
 801d66c:	e7dd      	b.n	801d62a <floorf+0x36>
 801d66e:	bf00      	nop
 801d670:	7149f2ca 	.word	0x7149f2ca
 801d674:	bf800000 	.word	0xbf800000
 801d678:	007fffff 	.word	0x007fffff

0801d67c <abort>:
 801d67c:	b508      	push	{r3, lr}
 801d67e:	2006      	movs	r0, #6
 801d680:	f001 f8f2 	bl	801e868 <raise>
 801d684:	2001      	movs	r0, #1
 801d686:	f7f2 ff11 	bl	80104ac <_exit>
	...

0801d68c <__assert_func>:
 801d68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d68e:	4614      	mov	r4, r2
 801d690:	461a      	mov	r2, r3
 801d692:	4b09      	ldr	r3, [pc, #36]	@ (801d6b8 <__assert_func+0x2c>)
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	4605      	mov	r5, r0
 801d698:	68d8      	ldr	r0, [r3, #12]
 801d69a:	b954      	cbnz	r4, 801d6b2 <__assert_func+0x26>
 801d69c:	4b07      	ldr	r3, [pc, #28]	@ (801d6bc <__assert_func+0x30>)
 801d69e:	461c      	mov	r4, r3
 801d6a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d6a4:	9100      	str	r1, [sp, #0]
 801d6a6:	462b      	mov	r3, r5
 801d6a8:	4905      	ldr	r1, [pc, #20]	@ (801d6c0 <__assert_func+0x34>)
 801d6aa:	f000 ffcd 	bl	801e648 <fiprintf>
 801d6ae:	f7ff ffe5 	bl	801d67c <abort>
 801d6b2:	4b04      	ldr	r3, [pc, #16]	@ (801d6c4 <__assert_func+0x38>)
 801d6b4:	e7f4      	b.n	801d6a0 <__assert_func+0x14>
 801d6b6:	bf00      	nop
 801d6b8:	20005340 	.word	0x20005340
 801d6bc:	0802967b 	.word	0x0802967b
 801d6c0:	0802964d 	.word	0x0802964d
 801d6c4:	08029640 	.word	0x08029640

0801d6c8 <atof>:
 801d6c8:	2100      	movs	r1, #0
 801d6ca:	f000 bf0d 	b.w	801e4e8 <strtod>
	...

0801d6d0 <calloc>:
 801d6d0:	4b02      	ldr	r3, [pc, #8]	@ (801d6dc <calloc+0xc>)
 801d6d2:	460a      	mov	r2, r1
 801d6d4:	4601      	mov	r1, r0
 801d6d6:	6818      	ldr	r0, [r3, #0]
 801d6d8:	f000 b802 	b.w	801d6e0 <_calloc_r>
 801d6dc:	20005340 	.word	0x20005340

0801d6e0 <_calloc_r>:
 801d6e0:	b570      	push	{r4, r5, r6, lr}
 801d6e2:	fba1 5402 	umull	r5, r4, r1, r2
 801d6e6:	b93c      	cbnz	r4, 801d6f8 <_calloc_r+0x18>
 801d6e8:	4629      	mov	r1, r5
 801d6ea:	f000 f83f 	bl	801d76c <_malloc_r>
 801d6ee:	4606      	mov	r6, r0
 801d6f0:	b928      	cbnz	r0, 801d6fe <_calloc_r+0x1e>
 801d6f2:	2600      	movs	r6, #0
 801d6f4:	4630      	mov	r0, r6
 801d6f6:	bd70      	pop	{r4, r5, r6, pc}
 801d6f8:	220c      	movs	r2, #12
 801d6fa:	6002      	str	r2, [r0, #0]
 801d6fc:	e7f9      	b.n	801d6f2 <_calloc_r+0x12>
 801d6fe:	462a      	mov	r2, r5
 801d700:	4621      	mov	r1, r4
 801d702:	f001 f86f 	bl	801e7e4 <memset>
 801d706:	e7f5      	b.n	801d6f4 <_calloc_r+0x14>

0801d708 <malloc>:
 801d708:	4b02      	ldr	r3, [pc, #8]	@ (801d714 <malloc+0xc>)
 801d70a:	4601      	mov	r1, r0
 801d70c:	6818      	ldr	r0, [r3, #0]
 801d70e:	f000 b82d 	b.w	801d76c <_malloc_r>
 801d712:	bf00      	nop
 801d714:	20005340 	.word	0x20005340

0801d718 <free>:
 801d718:	4b02      	ldr	r3, [pc, #8]	@ (801d724 <free+0xc>)
 801d71a:	4601      	mov	r1, r0
 801d71c:	6818      	ldr	r0, [r3, #0]
 801d71e:	f001 b951 	b.w	801e9c4 <_free_r>
 801d722:	bf00      	nop
 801d724:	20005340 	.word	0x20005340

0801d728 <sbrk_aligned>:
 801d728:	b570      	push	{r4, r5, r6, lr}
 801d72a:	4e0f      	ldr	r6, [pc, #60]	@ (801d768 <sbrk_aligned+0x40>)
 801d72c:	460c      	mov	r4, r1
 801d72e:	6831      	ldr	r1, [r6, #0]
 801d730:	4605      	mov	r5, r0
 801d732:	b911      	cbnz	r1, 801d73a <sbrk_aligned+0x12>
 801d734:	f001 f8e8 	bl	801e908 <_sbrk_r>
 801d738:	6030      	str	r0, [r6, #0]
 801d73a:	4621      	mov	r1, r4
 801d73c:	4628      	mov	r0, r5
 801d73e:	f001 f8e3 	bl	801e908 <_sbrk_r>
 801d742:	1c43      	adds	r3, r0, #1
 801d744:	d103      	bne.n	801d74e <sbrk_aligned+0x26>
 801d746:	f04f 34ff 	mov.w	r4, #4294967295
 801d74a:	4620      	mov	r0, r4
 801d74c:	bd70      	pop	{r4, r5, r6, pc}
 801d74e:	1cc4      	adds	r4, r0, #3
 801d750:	f024 0403 	bic.w	r4, r4, #3
 801d754:	42a0      	cmp	r0, r4
 801d756:	d0f8      	beq.n	801d74a <sbrk_aligned+0x22>
 801d758:	1a21      	subs	r1, r4, r0
 801d75a:	4628      	mov	r0, r5
 801d75c:	f001 f8d4 	bl	801e908 <_sbrk_r>
 801d760:	3001      	adds	r0, #1
 801d762:	d1f2      	bne.n	801d74a <sbrk_aligned+0x22>
 801d764:	e7ef      	b.n	801d746 <sbrk_aligned+0x1e>
 801d766:	bf00      	nop
 801d768:	200056a8 	.word	0x200056a8

0801d76c <_malloc_r>:
 801d76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d770:	1ccd      	adds	r5, r1, #3
 801d772:	f025 0503 	bic.w	r5, r5, #3
 801d776:	3508      	adds	r5, #8
 801d778:	2d0c      	cmp	r5, #12
 801d77a:	bf38      	it	cc
 801d77c:	250c      	movcc	r5, #12
 801d77e:	2d00      	cmp	r5, #0
 801d780:	4606      	mov	r6, r0
 801d782:	db01      	blt.n	801d788 <_malloc_r+0x1c>
 801d784:	42a9      	cmp	r1, r5
 801d786:	d904      	bls.n	801d792 <_malloc_r+0x26>
 801d788:	230c      	movs	r3, #12
 801d78a:	6033      	str	r3, [r6, #0]
 801d78c:	2000      	movs	r0, #0
 801d78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d868 <_malloc_r+0xfc>
 801d796:	f000 f869 	bl	801d86c <__malloc_lock>
 801d79a:	f8d8 3000 	ldr.w	r3, [r8]
 801d79e:	461c      	mov	r4, r3
 801d7a0:	bb44      	cbnz	r4, 801d7f4 <_malloc_r+0x88>
 801d7a2:	4629      	mov	r1, r5
 801d7a4:	4630      	mov	r0, r6
 801d7a6:	f7ff ffbf 	bl	801d728 <sbrk_aligned>
 801d7aa:	1c43      	adds	r3, r0, #1
 801d7ac:	4604      	mov	r4, r0
 801d7ae:	d158      	bne.n	801d862 <_malloc_r+0xf6>
 801d7b0:	f8d8 4000 	ldr.w	r4, [r8]
 801d7b4:	4627      	mov	r7, r4
 801d7b6:	2f00      	cmp	r7, #0
 801d7b8:	d143      	bne.n	801d842 <_malloc_r+0xd6>
 801d7ba:	2c00      	cmp	r4, #0
 801d7bc:	d04b      	beq.n	801d856 <_malloc_r+0xea>
 801d7be:	6823      	ldr	r3, [r4, #0]
 801d7c0:	4639      	mov	r1, r7
 801d7c2:	4630      	mov	r0, r6
 801d7c4:	eb04 0903 	add.w	r9, r4, r3
 801d7c8:	f001 f89e 	bl	801e908 <_sbrk_r>
 801d7cc:	4581      	cmp	r9, r0
 801d7ce:	d142      	bne.n	801d856 <_malloc_r+0xea>
 801d7d0:	6821      	ldr	r1, [r4, #0]
 801d7d2:	1a6d      	subs	r5, r5, r1
 801d7d4:	4629      	mov	r1, r5
 801d7d6:	4630      	mov	r0, r6
 801d7d8:	f7ff ffa6 	bl	801d728 <sbrk_aligned>
 801d7dc:	3001      	adds	r0, #1
 801d7de:	d03a      	beq.n	801d856 <_malloc_r+0xea>
 801d7e0:	6823      	ldr	r3, [r4, #0]
 801d7e2:	442b      	add	r3, r5
 801d7e4:	6023      	str	r3, [r4, #0]
 801d7e6:	f8d8 3000 	ldr.w	r3, [r8]
 801d7ea:	685a      	ldr	r2, [r3, #4]
 801d7ec:	bb62      	cbnz	r2, 801d848 <_malloc_r+0xdc>
 801d7ee:	f8c8 7000 	str.w	r7, [r8]
 801d7f2:	e00f      	b.n	801d814 <_malloc_r+0xa8>
 801d7f4:	6822      	ldr	r2, [r4, #0]
 801d7f6:	1b52      	subs	r2, r2, r5
 801d7f8:	d420      	bmi.n	801d83c <_malloc_r+0xd0>
 801d7fa:	2a0b      	cmp	r2, #11
 801d7fc:	d917      	bls.n	801d82e <_malloc_r+0xc2>
 801d7fe:	1961      	adds	r1, r4, r5
 801d800:	42a3      	cmp	r3, r4
 801d802:	6025      	str	r5, [r4, #0]
 801d804:	bf18      	it	ne
 801d806:	6059      	strne	r1, [r3, #4]
 801d808:	6863      	ldr	r3, [r4, #4]
 801d80a:	bf08      	it	eq
 801d80c:	f8c8 1000 	streq.w	r1, [r8]
 801d810:	5162      	str	r2, [r4, r5]
 801d812:	604b      	str	r3, [r1, #4]
 801d814:	4630      	mov	r0, r6
 801d816:	f000 f82f 	bl	801d878 <__malloc_unlock>
 801d81a:	f104 000b 	add.w	r0, r4, #11
 801d81e:	1d23      	adds	r3, r4, #4
 801d820:	f020 0007 	bic.w	r0, r0, #7
 801d824:	1ac2      	subs	r2, r0, r3
 801d826:	bf1c      	itt	ne
 801d828:	1a1b      	subne	r3, r3, r0
 801d82a:	50a3      	strne	r3, [r4, r2]
 801d82c:	e7af      	b.n	801d78e <_malloc_r+0x22>
 801d82e:	6862      	ldr	r2, [r4, #4]
 801d830:	42a3      	cmp	r3, r4
 801d832:	bf0c      	ite	eq
 801d834:	f8c8 2000 	streq.w	r2, [r8]
 801d838:	605a      	strne	r2, [r3, #4]
 801d83a:	e7eb      	b.n	801d814 <_malloc_r+0xa8>
 801d83c:	4623      	mov	r3, r4
 801d83e:	6864      	ldr	r4, [r4, #4]
 801d840:	e7ae      	b.n	801d7a0 <_malloc_r+0x34>
 801d842:	463c      	mov	r4, r7
 801d844:	687f      	ldr	r7, [r7, #4]
 801d846:	e7b6      	b.n	801d7b6 <_malloc_r+0x4a>
 801d848:	461a      	mov	r2, r3
 801d84a:	685b      	ldr	r3, [r3, #4]
 801d84c:	42a3      	cmp	r3, r4
 801d84e:	d1fb      	bne.n	801d848 <_malloc_r+0xdc>
 801d850:	2300      	movs	r3, #0
 801d852:	6053      	str	r3, [r2, #4]
 801d854:	e7de      	b.n	801d814 <_malloc_r+0xa8>
 801d856:	230c      	movs	r3, #12
 801d858:	6033      	str	r3, [r6, #0]
 801d85a:	4630      	mov	r0, r6
 801d85c:	f000 f80c 	bl	801d878 <__malloc_unlock>
 801d860:	e794      	b.n	801d78c <_malloc_r+0x20>
 801d862:	6005      	str	r5, [r0, #0]
 801d864:	e7d6      	b.n	801d814 <_malloc_r+0xa8>
 801d866:	bf00      	nop
 801d868:	200056ac 	.word	0x200056ac

0801d86c <__malloc_lock>:
 801d86c:	4801      	ldr	r0, [pc, #4]	@ (801d874 <__malloc_lock+0x8>)
 801d86e:	f001 b898 	b.w	801e9a2 <__retarget_lock_acquire_recursive>
 801d872:	bf00      	nop
 801d874:	200057f0 	.word	0x200057f0

0801d878 <__malloc_unlock>:
 801d878:	4801      	ldr	r0, [pc, #4]	@ (801d880 <__malloc_unlock+0x8>)
 801d87a:	f001 b893 	b.w	801e9a4 <__retarget_lock_release_recursive>
 801d87e:	bf00      	nop
 801d880:	200057f0 	.word	0x200057f0

0801d884 <_realloc_r>:
 801d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d888:	4680      	mov	r8, r0
 801d88a:	4615      	mov	r5, r2
 801d88c:	460c      	mov	r4, r1
 801d88e:	b921      	cbnz	r1, 801d89a <_realloc_r+0x16>
 801d890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d894:	4611      	mov	r1, r2
 801d896:	f7ff bf69 	b.w	801d76c <_malloc_r>
 801d89a:	b92a      	cbnz	r2, 801d8a8 <_realloc_r+0x24>
 801d89c:	f001 f892 	bl	801e9c4 <_free_r>
 801d8a0:	2400      	movs	r4, #0
 801d8a2:	4620      	mov	r0, r4
 801d8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8a8:	f002 f8d4 	bl	801fa54 <_malloc_usable_size_r>
 801d8ac:	4285      	cmp	r5, r0
 801d8ae:	4606      	mov	r6, r0
 801d8b0:	d802      	bhi.n	801d8b8 <_realloc_r+0x34>
 801d8b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d8b6:	d8f4      	bhi.n	801d8a2 <_realloc_r+0x1e>
 801d8b8:	4629      	mov	r1, r5
 801d8ba:	4640      	mov	r0, r8
 801d8bc:	f7ff ff56 	bl	801d76c <_malloc_r>
 801d8c0:	4607      	mov	r7, r0
 801d8c2:	2800      	cmp	r0, #0
 801d8c4:	d0ec      	beq.n	801d8a0 <_realloc_r+0x1c>
 801d8c6:	42b5      	cmp	r5, r6
 801d8c8:	462a      	mov	r2, r5
 801d8ca:	4621      	mov	r1, r4
 801d8cc:	bf28      	it	cs
 801d8ce:	4632      	movcs	r2, r6
 801d8d0:	f001 f869 	bl	801e9a6 <memcpy>
 801d8d4:	4621      	mov	r1, r4
 801d8d6:	4640      	mov	r0, r8
 801d8d8:	f001 f874 	bl	801e9c4 <_free_r>
 801d8dc:	463c      	mov	r4, r7
 801d8de:	e7e0      	b.n	801d8a2 <_realloc_r+0x1e>

0801d8e0 <sulp>:
 801d8e0:	b570      	push	{r4, r5, r6, lr}
 801d8e2:	4604      	mov	r4, r0
 801d8e4:	460d      	mov	r5, r1
 801d8e6:	ec45 4b10 	vmov	d0, r4, r5
 801d8ea:	4616      	mov	r6, r2
 801d8ec:	f001 ff74 	bl	801f7d8 <__ulp>
 801d8f0:	ec51 0b10 	vmov	r0, r1, d0
 801d8f4:	b17e      	cbz	r6, 801d916 <sulp+0x36>
 801d8f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d8fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	dd09      	ble.n	801d916 <sulp+0x36>
 801d902:	051b      	lsls	r3, r3, #20
 801d904:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801d908:	2400      	movs	r4, #0
 801d90a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801d90e:	4622      	mov	r2, r4
 801d910:	462b      	mov	r3, r5
 801d912:	f7e2 fea1 	bl	8000658 <__aeabi_dmul>
 801d916:	ec41 0b10 	vmov	d0, r0, r1
 801d91a:	bd70      	pop	{r4, r5, r6, pc}
 801d91c:	0000      	movs	r0, r0
	...

0801d920 <_strtod_l>:
 801d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d924:	b09f      	sub	sp, #124	@ 0x7c
 801d926:	460c      	mov	r4, r1
 801d928:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d92a:	2200      	movs	r2, #0
 801d92c:	921a      	str	r2, [sp, #104]	@ 0x68
 801d92e:	9005      	str	r0, [sp, #20]
 801d930:	f04f 0a00 	mov.w	sl, #0
 801d934:	f04f 0b00 	mov.w	fp, #0
 801d938:	460a      	mov	r2, r1
 801d93a:	9219      	str	r2, [sp, #100]	@ 0x64
 801d93c:	7811      	ldrb	r1, [r2, #0]
 801d93e:	292b      	cmp	r1, #43	@ 0x2b
 801d940:	d04a      	beq.n	801d9d8 <_strtod_l+0xb8>
 801d942:	d838      	bhi.n	801d9b6 <_strtod_l+0x96>
 801d944:	290d      	cmp	r1, #13
 801d946:	d832      	bhi.n	801d9ae <_strtod_l+0x8e>
 801d948:	2908      	cmp	r1, #8
 801d94a:	d832      	bhi.n	801d9b2 <_strtod_l+0x92>
 801d94c:	2900      	cmp	r1, #0
 801d94e:	d03b      	beq.n	801d9c8 <_strtod_l+0xa8>
 801d950:	2200      	movs	r2, #0
 801d952:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d954:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801d956:	782a      	ldrb	r2, [r5, #0]
 801d958:	2a30      	cmp	r2, #48	@ 0x30
 801d95a:	f040 80b3 	bne.w	801dac4 <_strtod_l+0x1a4>
 801d95e:	786a      	ldrb	r2, [r5, #1]
 801d960:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d964:	2a58      	cmp	r2, #88	@ 0x58
 801d966:	d16e      	bne.n	801da46 <_strtod_l+0x126>
 801d968:	9302      	str	r3, [sp, #8]
 801d96a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d96c:	9301      	str	r3, [sp, #4]
 801d96e:	ab1a      	add	r3, sp, #104	@ 0x68
 801d970:	9300      	str	r3, [sp, #0]
 801d972:	4a8e      	ldr	r2, [pc, #568]	@ (801dbac <_strtod_l+0x28c>)
 801d974:	9805      	ldr	r0, [sp, #20]
 801d976:	ab1b      	add	r3, sp, #108	@ 0x6c
 801d978:	a919      	add	r1, sp, #100	@ 0x64
 801d97a:	f001 f8d5 	bl	801eb28 <__gethex>
 801d97e:	f010 060f 	ands.w	r6, r0, #15
 801d982:	4604      	mov	r4, r0
 801d984:	d005      	beq.n	801d992 <_strtod_l+0x72>
 801d986:	2e06      	cmp	r6, #6
 801d988:	d128      	bne.n	801d9dc <_strtod_l+0xbc>
 801d98a:	3501      	adds	r5, #1
 801d98c:	2300      	movs	r3, #0
 801d98e:	9519      	str	r5, [sp, #100]	@ 0x64
 801d990:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d992:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d994:	2b00      	cmp	r3, #0
 801d996:	f040 858e 	bne.w	801e4b6 <_strtod_l+0xb96>
 801d99a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d99c:	b1cb      	cbz	r3, 801d9d2 <_strtod_l+0xb2>
 801d99e:	4652      	mov	r2, sl
 801d9a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801d9a4:	ec43 2b10 	vmov	d0, r2, r3
 801d9a8:	b01f      	add	sp, #124	@ 0x7c
 801d9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ae:	2920      	cmp	r1, #32
 801d9b0:	d1ce      	bne.n	801d950 <_strtod_l+0x30>
 801d9b2:	3201      	adds	r2, #1
 801d9b4:	e7c1      	b.n	801d93a <_strtod_l+0x1a>
 801d9b6:	292d      	cmp	r1, #45	@ 0x2d
 801d9b8:	d1ca      	bne.n	801d950 <_strtod_l+0x30>
 801d9ba:	2101      	movs	r1, #1
 801d9bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d9be:	1c51      	adds	r1, r2, #1
 801d9c0:	9119      	str	r1, [sp, #100]	@ 0x64
 801d9c2:	7852      	ldrb	r2, [r2, #1]
 801d9c4:	2a00      	cmp	r2, #0
 801d9c6:	d1c5      	bne.n	801d954 <_strtod_l+0x34>
 801d9c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d9ca:	9419      	str	r4, [sp, #100]	@ 0x64
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	f040 8570 	bne.w	801e4b2 <_strtod_l+0xb92>
 801d9d2:	4652      	mov	r2, sl
 801d9d4:	465b      	mov	r3, fp
 801d9d6:	e7e5      	b.n	801d9a4 <_strtod_l+0x84>
 801d9d8:	2100      	movs	r1, #0
 801d9da:	e7ef      	b.n	801d9bc <_strtod_l+0x9c>
 801d9dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d9de:	b13a      	cbz	r2, 801d9f0 <_strtod_l+0xd0>
 801d9e0:	2135      	movs	r1, #53	@ 0x35
 801d9e2:	a81c      	add	r0, sp, #112	@ 0x70
 801d9e4:	f001 fff2 	bl	801f9cc <__copybits>
 801d9e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d9ea:	9805      	ldr	r0, [sp, #20]
 801d9ec:	f001 fbc0 	bl	801f170 <_Bfree>
 801d9f0:	3e01      	subs	r6, #1
 801d9f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d9f4:	2e04      	cmp	r6, #4
 801d9f6:	d806      	bhi.n	801da06 <_strtod_l+0xe6>
 801d9f8:	e8df f006 	tbb	[pc, r6]
 801d9fc:	201d0314 	.word	0x201d0314
 801da00:	14          	.byte	0x14
 801da01:	00          	.byte	0x00
 801da02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801da06:	05e1      	lsls	r1, r4, #23
 801da08:	bf48      	it	mi
 801da0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801da0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801da12:	0d1b      	lsrs	r3, r3, #20
 801da14:	051b      	lsls	r3, r3, #20
 801da16:	2b00      	cmp	r3, #0
 801da18:	d1bb      	bne.n	801d992 <_strtod_l+0x72>
 801da1a:	f000 ff97 	bl	801e94c <__errno>
 801da1e:	2322      	movs	r3, #34	@ 0x22
 801da20:	6003      	str	r3, [r0, #0]
 801da22:	e7b6      	b.n	801d992 <_strtod_l+0x72>
 801da24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801da28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801da2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801da30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801da34:	e7e7      	b.n	801da06 <_strtod_l+0xe6>
 801da36:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801dbb4 <_strtod_l+0x294>
 801da3a:	e7e4      	b.n	801da06 <_strtod_l+0xe6>
 801da3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801da40:	f04f 3aff 	mov.w	sl, #4294967295
 801da44:	e7df      	b.n	801da06 <_strtod_l+0xe6>
 801da46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801da48:	1c5a      	adds	r2, r3, #1
 801da4a:	9219      	str	r2, [sp, #100]	@ 0x64
 801da4c:	785b      	ldrb	r3, [r3, #1]
 801da4e:	2b30      	cmp	r3, #48	@ 0x30
 801da50:	d0f9      	beq.n	801da46 <_strtod_l+0x126>
 801da52:	2b00      	cmp	r3, #0
 801da54:	d09d      	beq.n	801d992 <_strtod_l+0x72>
 801da56:	2301      	movs	r3, #1
 801da58:	9309      	str	r3, [sp, #36]	@ 0x24
 801da5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801da5c:	930c      	str	r3, [sp, #48]	@ 0x30
 801da5e:	2300      	movs	r3, #0
 801da60:	9308      	str	r3, [sp, #32]
 801da62:	930a      	str	r3, [sp, #40]	@ 0x28
 801da64:	461f      	mov	r7, r3
 801da66:	220a      	movs	r2, #10
 801da68:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801da6a:	7805      	ldrb	r5, [r0, #0]
 801da6c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801da70:	b2d9      	uxtb	r1, r3
 801da72:	2909      	cmp	r1, #9
 801da74:	d928      	bls.n	801dac8 <_strtod_l+0x1a8>
 801da76:	494e      	ldr	r1, [pc, #312]	@ (801dbb0 <_strtod_l+0x290>)
 801da78:	2201      	movs	r2, #1
 801da7a:	f000 febb 	bl	801e7f4 <strncmp>
 801da7e:	2800      	cmp	r0, #0
 801da80:	d032      	beq.n	801dae8 <_strtod_l+0x1c8>
 801da82:	2000      	movs	r0, #0
 801da84:	462a      	mov	r2, r5
 801da86:	4681      	mov	r9, r0
 801da88:	463d      	mov	r5, r7
 801da8a:	4603      	mov	r3, r0
 801da8c:	2a65      	cmp	r2, #101	@ 0x65
 801da8e:	d001      	beq.n	801da94 <_strtod_l+0x174>
 801da90:	2a45      	cmp	r2, #69	@ 0x45
 801da92:	d114      	bne.n	801dabe <_strtod_l+0x19e>
 801da94:	b91d      	cbnz	r5, 801da9e <_strtod_l+0x17e>
 801da96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da98:	4302      	orrs	r2, r0
 801da9a:	d095      	beq.n	801d9c8 <_strtod_l+0xa8>
 801da9c:	2500      	movs	r5, #0
 801da9e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801daa0:	1c62      	adds	r2, r4, #1
 801daa2:	9219      	str	r2, [sp, #100]	@ 0x64
 801daa4:	7862      	ldrb	r2, [r4, #1]
 801daa6:	2a2b      	cmp	r2, #43	@ 0x2b
 801daa8:	d077      	beq.n	801db9a <_strtod_l+0x27a>
 801daaa:	2a2d      	cmp	r2, #45	@ 0x2d
 801daac:	d07b      	beq.n	801dba6 <_strtod_l+0x286>
 801daae:	f04f 0c00 	mov.w	ip, #0
 801dab2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801dab6:	2909      	cmp	r1, #9
 801dab8:	f240 8082 	bls.w	801dbc0 <_strtod_l+0x2a0>
 801dabc:	9419      	str	r4, [sp, #100]	@ 0x64
 801dabe:	f04f 0800 	mov.w	r8, #0
 801dac2:	e0a2      	b.n	801dc0a <_strtod_l+0x2ea>
 801dac4:	2300      	movs	r3, #0
 801dac6:	e7c7      	b.n	801da58 <_strtod_l+0x138>
 801dac8:	2f08      	cmp	r7, #8
 801daca:	bfd5      	itete	le
 801dacc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801dace:	9908      	ldrgt	r1, [sp, #32]
 801dad0:	fb02 3301 	mlale	r3, r2, r1, r3
 801dad4:	fb02 3301 	mlagt	r3, r2, r1, r3
 801dad8:	f100 0001 	add.w	r0, r0, #1
 801dadc:	bfd4      	ite	le
 801dade:	930a      	strle	r3, [sp, #40]	@ 0x28
 801dae0:	9308      	strgt	r3, [sp, #32]
 801dae2:	3701      	adds	r7, #1
 801dae4:	9019      	str	r0, [sp, #100]	@ 0x64
 801dae6:	e7bf      	b.n	801da68 <_strtod_l+0x148>
 801dae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801daea:	1c5a      	adds	r2, r3, #1
 801daec:	9219      	str	r2, [sp, #100]	@ 0x64
 801daee:	785a      	ldrb	r2, [r3, #1]
 801daf0:	b37f      	cbz	r7, 801db52 <_strtod_l+0x232>
 801daf2:	4681      	mov	r9, r0
 801daf4:	463d      	mov	r5, r7
 801daf6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801dafa:	2b09      	cmp	r3, #9
 801dafc:	d912      	bls.n	801db24 <_strtod_l+0x204>
 801dafe:	2301      	movs	r3, #1
 801db00:	e7c4      	b.n	801da8c <_strtod_l+0x16c>
 801db02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801db04:	1c5a      	adds	r2, r3, #1
 801db06:	9219      	str	r2, [sp, #100]	@ 0x64
 801db08:	785a      	ldrb	r2, [r3, #1]
 801db0a:	3001      	adds	r0, #1
 801db0c:	2a30      	cmp	r2, #48	@ 0x30
 801db0e:	d0f8      	beq.n	801db02 <_strtod_l+0x1e2>
 801db10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801db14:	2b08      	cmp	r3, #8
 801db16:	f200 84d3 	bhi.w	801e4c0 <_strtod_l+0xba0>
 801db1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801db1c:	930c      	str	r3, [sp, #48]	@ 0x30
 801db1e:	4681      	mov	r9, r0
 801db20:	2000      	movs	r0, #0
 801db22:	4605      	mov	r5, r0
 801db24:	3a30      	subs	r2, #48	@ 0x30
 801db26:	f100 0301 	add.w	r3, r0, #1
 801db2a:	d02a      	beq.n	801db82 <_strtod_l+0x262>
 801db2c:	4499      	add	r9, r3
 801db2e:	eb00 0c05 	add.w	ip, r0, r5
 801db32:	462b      	mov	r3, r5
 801db34:	210a      	movs	r1, #10
 801db36:	4563      	cmp	r3, ip
 801db38:	d10d      	bne.n	801db56 <_strtod_l+0x236>
 801db3a:	1c69      	adds	r1, r5, #1
 801db3c:	4401      	add	r1, r0
 801db3e:	4428      	add	r0, r5
 801db40:	2808      	cmp	r0, #8
 801db42:	dc16      	bgt.n	801db72 <_strtod_l+0x252>
 801db44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801db46:	230a      	movs	r3, #10
 801db48:	fb03 2300 	mla	r3, r3, r0, r2
 801db4c:	930a      	str	r3, [sp, #40]	@ 0x28
 801db4e:	2300      	movs	r3, #0
 801db50:	e018      	b.n	801db84 <_strtod_l+0x264>
 801db52:	4638      	mov	r0, r7
 801db54:	e7da      	b.n	801db0c <_strtod_l+0x1ec>
 801db56:	2b08      	cmp	r3, #8
 801db58:	f103 0301 	add.w	r3, r3, #1
 801db5c:	dc03      	bgt.n	801db66 <_strtod_l+0x246>
 801db5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801db60:	434e      	muls	r6, r1
 801db62:	960a      	str	r6, [sp, #40]	@ 0x28
 801db64:	e7e7      	b.n	801db36 <_strtod_l+0x216>
 801db66:	2b10      	cmp	r3, #16
 801db68:	bfde      	ittt	le
 801db6a:	9e08      	ldrle	r6, [sp, #32]
 801db6c:	434e      	mulle	r6, r1
 801db6e:	9608      	strle	r6, [sp, #32]
 801db70:	e7e1      	b.n	801db36 <_strtod_l+0x216>
 801db72:	280f      	cmp	r0, #15
 801db74:	dceb      	bgt.n	801db4e <_strtod_l+0x22e>
 801db76:	9808      	ldr	r0, [sp, #32]
 801db78:	230a      	movs	r3, #10
 801db7a:	fb03 2300 	mla	r3, r3, r0, r2
 801db7e:	9308      	str	r3, [sp, #32]
 801db80:	e7e5      	b.n	801db4e <_strtod_l+0x22e>
 801db82:	4629      	mov	r1, r5
 801db84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801db86:	1c50      	adds	r0, r2, #1
 801db88:	9019      	str	r0, [sp, #100]	@ 0x64
 801db8a:	7852      	ldrb	r2, [r2, #1]
 801db8c:	4618      	mov	r0, r3
 801db8e:	460d      	mov	r5, r1
 801db90:	e7b1      	b.n	801daf6 <_strtod_l+0x1d6>
 801db92:	f04f 0900 	mov.w	r9, #0
 801db96:	2301      	movs	r3, #1
 801db98:	e77d      	b.n	801da96 <_strtod_l+0x176>
 801db9a:	f04f 0c00 	mov.w	ip, #0
 801db9e:	1ca2      	adds	r2, r4, #2
 801dba0:	9219      	str	r2, [sp, #100]	@ 0x64
 801dba2:	78a2      	ldrb	r2, [r4, #2]
 801dba4:	e785      	b.n	801dab2 <_strtod_l+0x192>
 801dba6:	f04f 0c01 	mov.w	ip, #1
 801dbaa:	e7f8      	b.n	801db9e <_strtod_l+0x27e>
 801dbac:	080296a0 	.word	0x080296a0
 801dbb0:	0802967c 	.word	0x0802967c
 801dbb4:	7ff00000 	.word	0x7ff00000
 801dbb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dbba:	1c51      	adds	r1, r2, #1
 801dbbc:	9119      	str	r1, [sp, #100]	@ 0x64
 801dbbe:	7852      	ldrb	r2, [r2, #1]
 801dbc0:	2a30      	cmp	r2, #48	@ 0x30
 801dbc2:	d0f9      	beq.n	801dbb8 <_strtod_l+0x298>
 801dbc4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801dbc8:	2908      	cmp	r1, #8
 801dbca:	f63f af78 	bhi.w	801dabe <_strtod_l+0x19e>
 801dbce:	3a30      	subs	r2, #48	@ 0x30
 801dbd0:	920e      	str	r2, [sp, #56]	@ 0x38
 801dbd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dbd4:	920f      	str	r2, [sp, #60]	@ 0x3c
 801dbd6:	f04f 080a 	mov.w	r8, #10
 801dbda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dbdc:	1c56      	adds	r6, r2, #1
 801dbde:	9619      	str	r6, [sp, #100]	@ 0x64
 801dbe0:	7852      	ldrb	r2, [r2, #1]
 801dbe2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801dbe6:	f1be 0f09 	cmp.w	lr, #9
 801dbea:	d939      	bls.n	801dc60 <_strtod_l+0x340>
 801dbec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801dbee:	1a76      	subs	r6, r6, r1
 801dbf0:	2e08      	cmp	r6, #8
 801dbf2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801dbf6:	dc03      	bgt.n	801dc00 <_strtod_l+0x2e0>
 801dbf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801dbfa:	4588      	cmp	r8, r1
 801dbfc:	bfa8      	it	ge
 801dbfe:	4688      	movge	r8, r1
 801dc00:	f1bc 0f00 	cmp.w	ip, #0
 801dc04:	d001      	beq.n	801dc0a <_strtod_l+0x2ea>
 801dc06:	f1c8 0800 	rsb	r8, r8, #0
 801dc0a:	2d00      	cmp	r5, #0
 801dc0c:	d14e      	bne.n	801dcac <_strtod_l+0x38c>
 801dc0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dc10:	4308      	orrs	r0, r1
 801dc12:	f47f aebe 	bne.w	801d992 <_strtod_l+0x72>
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	f47f aed6 	bne.w	801d9c8 <_strtod_l+0xa8>
 801dc1c:	2a69      	cmp	r2, #105	@ 0x69
 801dc1e:	d028      	beq.n	801dc72 <_strtod_l+0x352>
 801dc20:	dc25      	bgt.n	801dc6e <_strtod_l+0x34e>
 801dc22:	2a49      	cmp	r2, #73	@ 0x49
 801dc24:	d025      	beq.n	801dc72 <_strtod_l+0x352>
 801dc26:	2a4e      	cmp	r2, #78	@ 0x4e
 801dc28:	f47f aece 	bne.w	801d9c8 <_strtod_l+0xa8>
 801dc2c:	499b      	ldr	r1, [pc, #620]	@ (801de9c <_strtod_l+0x57c>)
 801dc2e:	a819      	add	r0, sp, #100	@ 0x64
 801dc30:	f001 f99c 	bl	801ef6c <__match>
 801dc34:	2800      	cmp	r0, #0
 801dc36:	f43f aec7 	beq.w	801d9c8 <_strtod_l+0xa8>
 801dc3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dc3c:	781b      	ldrb	r3, [r3, #0]
 801dc3e:	2b28      	cmp	r3, #40	@ 0x28
 801dc40:	d12e      	bne.n	801dca0 <_strtod_l+0x380>
 801dc42:	4997      	ldr	r1, [pc, #604]	@ (801dea0 <_strtod_l+0x580>)
 801dc44:	aa1c      	add	r2, sp, #112	@ 0x70
 801dc46:	a819      	add	r0, sp, #100	@ 0x64
 801dc48:	f001 f9a4 	bl	801ef94 <__hexnan>
 801dc4c:	2805      	cmp	r0, #5
 801dc4e:	d127      	bne.n	801dca0 <_strtod_l+0x380>
 801dc50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dc52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801dc56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801dc5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801dc5e:	e698      	b.n	801d992 <_strtod_l+0x72>
 801dc60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801dc62:	fb08 2101 	mla	r1, r8, r1, r2
 801dc66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801dc6a:	920e      	str	r2, [sp, #56]	@ 0x38
 801dc6c:	e7b5      	b.n	801dbda <_strtod_l+0x2ba>
 801dc6e:	2a6e      	cmp	r2, #110	@ 0x6e
 801dc70:	e7da      	b.n	801dc28 <_strtod_l+0x308>
 801dc72:	498c      	ldr	r1, [pc, #560]	@ (801dea4 <_strtod_l+0x584>)
 801dc74:	a819      	add	r0, sp, #100	@ 0x64
 801dc76:	f001 f979 	bl	801ef6c <__match>
 801dc7a:	2800      	cmp	r0, #0
 801dc7c:	f43f aea4 	beq.w	801d9c8 <_strtod_l+0xa8>
 801dc80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dc82:	4989      	ldr	r1, [pc, #548]	@ (801dea8 <_strtod_l+0x588>)
 801dc84:	3b01      	subs	r3, #1
 801dc86:	a819      	add	r0, sp, #100	@ 0x64
 801dc88:	9319      	str	r3, [sp, #100]	@ 0x64
 801dc8a:	f001 f96f 	bl	801ef6c <__match>
 801dc8e:	b910      	cbnz	r0, 801dc96 <_strtod_l+0x376>
 801dc90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dc92:	3301      	adds	r3, #1
 801dc94:	9319      	str	r3, [sp, #100]	@ 0x64
 801dc96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801deb8 <_strtod_l+0x598>
 801dc9a:	f04f 0a00 	mov.w	sl, #0
 801dc9e:	e678      	b.n	801d992 <_strtod_l+0x72>
 801dca0:	4882      	ldr	r0, [pc, #520]	@ (801deac <_strtod_l+0x58c>)
 801dca2:	f7fc fd19 	bl	801a6d8 <nan>
 801dca6:	ec5b ab10 	vmov	sl, fp, d0
 801dcaa:	e672      	b.n	801d992 <_strtod_l+0x72>
 801dcac:	eba8 0309 	sub.w	r3, r8, r9
 801dcb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801dcb2:	9309      	str	r3, [sp, #36]	@ 0x24
 801dcb4:	2f00      	cmp	r7, #0
 801dcb6:	bf08      	it	eq
 801dcb8:	462f      	moveq	r7, r5
 801dcba:	2d10      	cmp	r5, #16
 801dcbc:	462c      	mov	r4, r5
 801dcbe:	bfa8      	it	ge
 801dcc0:	2410      	movge	r4, #16
 801dcc2:	f7e2 fc4f 	bl	8000564 <__aeabi_ui2d>
 801dcc6:	2d09      	cmp	r5, #9
 801dcc8:	4682      	mov	sl, r0
 801dcca:	468b      	mov	fp, r1
 801dccc:	dc13      	bgt.n	801dcf6 <_strtod_l+0x3d6>
 801dcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	f43f ae5e 	beq.w	801d992 <_strtod_l+0x72>
 801dcd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dcd8:	dd78      	ble.n	801ddcc <_strtod_l+0x4ac>
 801dcda:	2b16      	cmp	r3, #22
 801dcdc:	dc5f      	bgt.n	801dd9e <_strtod_l+0x47e>
 801dcde:	4974      	ldr	r1, [pc, #464]	@ (801deb0 <_strtod_l+0x590>)
 801dce0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801dce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dce8:	4652      	mov	r2, sl
 801dcea:	465b      	mov	r3, fp
 801dcec:	f7e2 fcb4 	bl	8000658 <__aeabi_dmul>
 801dcf0:	4682      	mov	sl, r0
 801dcf2:	468b      	mov	fp, r1
 801dcf4:	e64d      	b.n	801d992 <_strtod_l+0x72>
 801dcf6:	4b6e      	ldr	r3, [pc, #440]	@ (801deb0 <_strtod_l+0x590>)
 801dcf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dcfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801dd00:	f7e2 fcaa 	bl	8000658 <__aeabi_dmul>
 801dd04:	4682      	mov	sl, r0
 801dd06:	9808      	ldr	r0, [sp, #32]
 801dd08:	468b      	mov	fp, r1
 801dd0a:	f7e2 fc2b 	bl	8000564 <__aeabi_ui2d>
 801dd0e:	4602      	mov	r2, r0
 801dd10:	460b      	mov	r3, r1
 801dd12:	4650      	mov	r0, sl
 801dd14:	4659      	mov	r1, fp
 801dd16:	f7e2 fae9 	bl	80002ec <__adddf3>
 801dd1a:	2d0f      	cmp	r5, #15
 801dd1c:	4682      	mov	sl, r0
 801dd1e:	468b      	mov	fp, r1
 801dd20:	ddd5      	ble.n	801dcce <_strtod_l+0x3ae>
 801dd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd24:	1b2c      	subs	r4, r5, r4
 801dd26:	441c      	add	r4, r3
 801dd28:	2c00      	cmp	r4, #0
 801dd2a:	f340 8096 	ble.w	801de5a <_strtod_l+0x53a>
 801dd2e:	f014 030f 	ands.w	r3, r4, #15
 801dd32:	d00a      	beq.n	801dd4a <_strtod_l+0x42a>
 801dd34:	495e      	ldr	r1, [pc, #376]	@ (801deb0 <_strtod_l+0x590>)
 801dd36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801dd3a:	4652      	mov	r2, sl
 801dd3c:	465b      	mov	r3, fp
 801dd3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dd42:	f7e2 fc89 	bl	8000658 <__aeabi_dmul>
 801dd46:	4682      	mov	sl, r0
 801dd48:	468b      	mov	fp, r1
 801dd4a:	f034 040f 	bics.w	r4, r4, #15
 801dd4e:	d073      	beq.n	801de38 <_strtod_l+0x518>
 801dd50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801dd54:	dd48      	ble.n	801dde8 <_strtod_l+0x4c8>
 801dd56:	2400      	movs	r4, #0
 801dd58:	46a0      	mov	r8, r4
 801dd5a:	940a      	str	r4, [sp, #40]	@ 0x28
 801dd5c:	46a1      	mov	r9, r4
 801dd5e:	9a05      	ldr	r2, [sp, #20]
 801dd60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801deb8 <_strtod_l+0x598>
 801dd64:	2322      	movs	r3, #34	@ 0x22
 801dd66:	6013      	str	r3, [r2, #0]
 801dd68:	f04f 0a00 	mov.w	sl, #0
 801dd6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	f43f ae0f 	beq.w	801d992 <_strtod_l+0x72>
 801dd74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801dd76:	9805      	ldr	r0, [sp, #20]
 801dd78:	f001 f9fa 	bl	801f170 <_Bfree>
 801dd7c:	9805      	ldr	r0, [sp, #20]
 801dd7e:	4649      	mov	r1, r9
 801dd80:	f001 f9f6 	bl	801f170 <_Bfree>
 801dd84:	9805      	ldr	r0, [sp, #20]
 801dd86:	4641      	mov	r1, r8
 801dd88:	f001 f9f2 	bl	801f170 <_Bfree>
 801dd8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd8e:	9805      	ldr	r0, [sp, #20]
 801dd90:	f001 f9ee 	bl	801f170 <_Bfree>
 801dd94:	9805      	ldr	r0, [sp, #20]
 801dd96:	4621      	mov	r1, r4
 801dd98:	f001 f9ea 	bl	801f170 <_Bfree>
 801dd9c:	e5f9      	b.n	801d992 <_strtod_l+0x72>
 801dd9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dda0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801dda4:	4293      	cmp	r3, r2
 801dda6:	dbbc      	blt.n	801dd22 <_strtod_l+0x402>
 801dda8:	4c41      	ldr	r4, [pc, #260]	@ (801deb0 <_strtod_l+0x590>)
 801ddaa:	f1c5 050f 	rsb	r5, r5, #15
 801ddae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ddb2:	4652      	mov	r2, sl
 801ddb4:	465b      	mov	r3, fp
 801ddb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ddba:	f7e2 fc4d 	bl	8000658 <__aeabi_dmul>
 801ddbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddc0:	1b5d      	subs	r5, r3, r5
 801ddc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ddc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ddca:	e78f      	b.n	801dcec <_strtod_l+0x3cc>
 801ddcc:	3316      	adds	r3, #22
 801ddce:	dba8      	blt.n	801dd22 <_strtod_l+0x402>
 801ddd0:	4b37      	ldr	r3, [pc, #220]	@ (801deb0 <_strtod_l+0x590>)
 801ddd2:	eba9 0808 	sub.w	r8, r9, r8
 801ddd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801ddda:	e9d8 2300 	ldrd	r2, r3, [r8]
 801ddde:	4650      	mov	r0, sl
 801dde0:	4659      	mov	r1, fp
 801dde2:	f7e2 fd63 	bl	80008ac <__aeabi_ddiv>
 801dde6:	e783      	b.n	801dcf0 <_strtod_l+0x3d0>
 801dde8:	4b32      	ldr	r3, [pc, #200]	@ (801deb4 <_strtod_l+0x594>)
 801ddea:	9308      	str	r3, [sp, #32]
 801ddec:	2300      	movs	r3, #0
 801ddee:	1124      	asrs	r4, r4, #4
 801ddf0:	4650      	mov	r0, sl
 801ddf2:	4659      	mov	r1, fp
 801ddf4:	461e      	mov	r6, r3
 801ddf6:	2c01      	cmp	r4, #1
 801ddf8:	dc21      	bgt.n	801de3e <_strtod_l+0x51e>
 801ddfa:	b10b      	cbz	r3, 801de00 <_strtod_l+0x4e0>
 801ddfc:	4682      	mov	sl, r0
 801ddfe:	468b      	mov	fp, r1
 801de00:	492c      	ldr	r1, [pc, #176]	@ (801deb4 <_strtod_l+0x594>)
 801de02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801de06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801de0a:	4652      	mov	r2, sl
 801de0c:	465b      	mov	r3, fp
 801de0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de12:	f7e2 fc21 	bl	8000658 <__aeabi_dmul>
 801de16:	4b28      	ldr	r3, [pc, #160]	@ (801deb8 <_strtod_l+0x598>)
 801de18:	460a      	mov	r2, r1
 801de1a:	400b      	ands	r3, r1
 801de1c:	4927      	ldr	r1, [pc, #156]	@ (801debc <_strtod_l+0x59c>)
 801de1e:	428b      	cmp	r3, r1
 801de20:	4682      	mov	sl, r0
 801de22:	d898      	bhi.n	801dd56 <_strtod_l+0x436>
 801de24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801de28:	428b      	cmp	r3, r1
 801de2a:	bf86      	itte	hi
 801de2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801dec0 <_strtod_l+0x5a0>
 801de30:	f04f 3aff 	movhi.w	sl, #4294967295
 801de34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801de38:	2300      	movs	r3, #0
 801de3a:	9308      	str	r3, [sp, #32]
 801de3c:	e07a      	b.n	801df34 <_strtod_l+0x614>
 801de3e:	07e2      	lsls	r2, r4, #31
 801de40:	d505      	bpl.n	801de4e <_strtod_l+0x52e>
 801de42:	9b08      	ldr	r3, [sp, #32]
 801de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de48:	f7e2 fc06 	bl	8000658 <__aeabi_dmul>
 801de4c:	2301      	movs	r3, #1
 801de4e:	9a08      	ldr	r2, [sp, #32]
 801de50:	3208      	adds	r2, #8
 801de52:	3601      	adds	r6, #1
 801de54:	1064      	asrs	r4, r4, #1
 801de56:	9208      	str	r2, [sp, #32]
 801de58:	e7cd      	b.n	801ddf6 <_strtod_l+0x4d6>
 801de5a:	d0ed      	beq.n	801de38 <_strtod_l+0x518>
 801de5c:	4264      	negs	r4, r4
 801de5e:	f014 020f 	ands.w	r2, r4, #15
 801de62:	d00a      	beq.n	801de7a <_strtod_l+0x55a>
 801de64:	4b12      	ldr	r3, [pc, #72]	@ (801deb0 <_strtod_l+0x590>)
 801de66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801de6a:	4650      	mov	r0, sl
 801de6c:	4659      	mov	r1, fp
 801de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de72:	f7e2 fd1b 	bl	80008ac <__aeabi_ddiv>
 801de76:	4682      	mov	sl, r0
 801de78:	468b      	mov	fp, r1
 801de7a:	1124      	asrs	r4, r4, #4
 801de7c:	d0dc      	beq.n	801de38 <_strtod_l+0x518>
 801de7e:	2c1f      	cmp	r4, #31
 801de80:	dd20      	ble.n	801dec4 <_strtod_l+0x5a4>
 801de82:	2400      	movs	r4, #0
 801de84:	46a0      	mov	r8, r4
 801de86:	940a      	str	r4, [sp, #40]	@ 0x28
 801de88:	46a1      	mov	r9, r4
 801de8a:	9a05      	ldr	r2, [sp, #20]
 801de8c:	2322      	movs	r3, #34	@ 0x22
 801de8e:	f04f 0a00 	mov.w	sl, #0
 801de92:	f04f 0b00 	mov.w	fp, #0
 801de96:	6013      	str	r3, [r2, #0]
 801de98:	e768      	b.n	801dd6c <_strtod_l+0x44c>
 801de9a:	bf00      	nop
 801de9c:	08029687 	.word	0x08029687
 801dea0:	0802968c 	.word	0x0802968c
 801dea4:	0802967e 	.word	0x0802967e
 801dea8:	08029681 	.word	0x08029681
 801deac:	0802967b 	.word	0x0802967b
 801deb0:	08029900 	.word	0x08029900
 801deb4:	080298d8 	.word	0x080298d8
 801deb8:	7ff00000 	.word	0x7ff00000
 801debc:	7ca00000 	.word	0x7ca00000
 801dec0:	7fefffff 	.word	0x7fefffff
 801dec4:	f014 0310 	ands.w	r3, r4, #16
 801dec8:	bf18      	it	ne
 801deca:	236a      	movne	r3, #106	@ 0x6a
 801decc:	4ea9      	ldr	r6, [pc, #676]	@ (801e174 <_strtod_l+0x854>)
 801dece:	9308      	str	r3, [sp, #32]
 801ded0:	4650      	mov	r0, sl
 801ded2:	4659      	mov	r1, fp
 801ded4:	2300      	movs	r3, #0
 801ded6:	07e2      	lsls	r2, r4, #31
 801ded8:	d504      	bpl.n	801dee4 <_strtod_l+0x5c4>
 801deda:	e9d6 2300 	ldrd	r2, r3, [r6]
 801dede:	f7e2 fbbb 	bl	8000658 <__aeabi_dmul>
 801dee2:	2301      	movs	r3, #1
 801dee4:	1064      	asrs	r4, r4, #1
 801dee6:	f106 0608 	add.w	r6, r6, #8
 801deea:	d1f4      	bne.n	801ded6 <_strtod_l+0x5b6>
 801deec:	b10b      	cbz	r3, 801def2 <_strtod_l+0x5d2>
 801deee:	4682      	mov	sl, r0
 801def0:	468b      	mov	fp, r1
 801def2:	9b08      	ldr	r3, [sp, #32]
 801def4:	b1b3      	cbz	r3, 801df24 <_strtod_l+0x604>
 801def6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801defa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801defe:	2b00      	cmp	r3, #0
 801df00:	4659      	mov	r1, fp
 801df02:	dd0f      	ble.n	801df24 <_strtod_l+0x604>
 801df04:	2b1f      	cmp	r3, #31
 801df06:	dd55      	ble.n	801dfb4 <_strtod_l+0x694>
 801df08:	2b34      	cmp	r3, #52	@ 0x34
 801df0a:	bfde      	ittt	le
 801df0c:	f04f 33ff 	movle.w	r3, #4294967295
 801df10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801df14:	4093      	lslle	r3, r2
 801df16:	f04f 0a00 	mov.w	sl, #0
 801df1a:	bfcc      	ite	gt
 801df1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801df20:	ea03 0b01 	andle.w	fp, r3, r1
 801df24:	2200      	movs	r2, #0
 801df26:	2300      	movs	r3, #0
 801df28:	4650      	mov	r0, sl
 801df2a:	4659      	mov	r1, fp
 801df2c:	f7e2 fdfc 	bl	8000b28 <__aeabi_dcmpeq>
 801df30:	2800      	cmp	r0, #0
 801df32:	d1a6      	bne.n	801de82 <_strtod_l+0x562>
 801df34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df36:	9300      	str	r3, [sp, #0]
 801df38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801df3a:	9805      	ldr	r0, [sp, #20]
 801df3c:	462b      	mov	r3, r5
 801df3e:	463a      	mov	r2, r7
 801df40:	f001 f97e 	bl	801f240 <__s2b>
 801df44:	900a      	str	r0, [sp, #40]	@ 0x28
 801df46:	2800      	cmp	r0, #0
 801df48:	f43f af05 	beq.w	801dd56 <_strtod_l+0x436>
 801df4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df4e:	2a00      	cmp	r2, #0
 801df50:	eba9 0308 	sub.w	r3, r9, r8
 801df54:	bfa8      	it	ge
 801df56:	2300      	movge	r3, #0
 801df58:	9312      	str	r3, [sp, #72]	@ 0x48
 801df5a:	2400      	movs	r4, #0
 801df5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801df60:	9316      	str	r3, [sp, #88]	@ 0x58
 801df62:	46a0      	mov	r8, r4
 801df64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df66:	9805      	ldr	r0, [sp, #20]
 801df68:	6859      	ldr	r1, [r3, #4]
 801df6a:	f001 f8c1 	bl	801f0f0 <_Balloc>
 801df6e:	4681      	mov	r9, r0
 801df70:	2800      	cmp	r0, #0
 801df72:	f43f aef4 	beq.w	801dd5e <_strtod_l+0x43e>
 801df76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df78:	691a      	ldr	r2, [r3, #16]
 801df7a:	3202      	adds	r2, #2
 801df7c:	f103 010c 	add.w	r1, r3, #12
 801df80:	0092      	lsls	r2, r2, #2
 801df82:	300c      	adds	r0, #12
 801df84:	f000 fd0f 	bl	801e9a6 <memcpy>
 801df88:	ec4b ab10 	vmov	d0, sl, fp
 801df8c:	9805      	ldr	r0, [sp, #20]
 801df8e:	aa1c      	add	r2, sp, #112	@ 0x70
 801df90:	a91b      	add	r1, sp, #108	@ 0x6c
 801df92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801df96:	f001 fc8f 	bl	801f8b8 <__d2b>
 801df9a:	901a      	str	r0, [sp, #104]	@ 0x68
 801df9c:	2800      	cmp	r0, #0
 801df9e:	f43f aede 	beq.w	801dd5e <_strtod_l+0x43e>
 801dfa2:	9805      	ldr	r0, [sp, #20]
 801dfa4:	2101      	movs	r1, #1
 801dfa6:	f001 f9e1 	bl	801f36c <__i2b>
 801dfaa:	4680      	mov	r8, r0
 801dfac:	b948      	cbnz	r0, 801dfc2 <_strtod_l+0x6a2>
 801dfae:	f04f 0800 	mov.w	r8, #0
 801dfb2:	e6d4      	b.n	801dd5e <_strtod_l+0x43e>
 801dfb4:	f04f 32ff 	mov.w	r2, #4294967295
 801dfb8:	fa02 f303 	lsl.w	r3, r2, r3
 801dfbc:	ea03 0a0a 	and.w	sl, r3, sl
 801dfc0:	e7b0      	b.n	801df24 <_strtod_l+0x604>
 801dfc2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801dfc4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801dfc6:	2d00      	cmp	r5, #0
 801dfc8:	bfab      	itete	ge
 801dfca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801dfcc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801dfce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801dfd0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801dfd2:	bfac      	ite	ge
 801dfd4:	18ef      	addge	r7, r5, r3
 801dfd6:	1b5e      	sublt	r6, r3, r5
 801dfd8:	9b08      	ldr	r3, [sp, #32]
 801dfda:	1aed      	subs	r5, r5, r3
 801dfdc:	4415      	add	r5, r2
 801dfde:	4b66      	ldr	r3, [pc, #408]	@ (801e178 <_strtod_l+0x858>)
 801dfe0:	3d01      	subs	r5, #1
 801dfe2:	429d      	cmp	r5, r3
 801dfe4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801dfe8:	da50      	bge.n	801e08c <_strtod_l+0x76c>
 801dfea:	1b5b      	subs	r3, r3, r5
 801dfec:	2b1f      	cmp	r3, #31
 801dfee:	eba2 0203 	sub.w	r2, r2, r3
 801dff2:	f04f 0101 	mov.w	r1, #1
 801dff6:	dc3d      	bgt.n	801e074 <_strtod_l+0x754>
 801dff8:	fa01 f303 	lsl.w	r3, r1, r3
 801dffc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dffe:	2300      	movs	r3, #0
 801e000:	9310      	str	r3, [sp, #64]	@ 0x40
 801e002:	18bd      	adds	r5, r7, r2
 801e004:	9b08      	ldr	r3, [sp, #32]
 801e006:	42af      	cmp	r7, r5
 801e008:	4416      	add	r6, r2
 801e00a:	441e      	add	r6, r3
 801e00c:	463b      	mov	r3, r7
 801e00e:	bfa8      	it	ge
 801e010:	462b      	movge	r3, r5
 801e012:	42b3      	cmp	r3, r6
 801e014:	bfa8      	it	ge
 801e016:	4633      	movge	r3, r6
 801e018:	2b00      	cmp	r3, #0
 801e01a:	bfc2      	ittt	gt
 801e01c:	1aed      	subgt	r5, r5, r3
 801e01e:	1af6      	subgt	r6, r6, r3
 801e020:	1aff      	subgt	r7, r7, r3
 801e022:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e024:	2b00      	cmp	r3, #0
 801e026:	dd16      	ble.n	801e056 <_strtod_l+0x736>
 801e028:	4641      	mov	r1, r8
 801e02a:	9805      	ldr	r0, [sp, #20]
 801e02c:	461a      	mov	r2, r3
 801e02e:	f001 fa5d 	bl	801f4ec <__pow5mult>
 801e032:	4680      	mov	r8, r0
 801e034:	2800      	cmp	r0, #0
 801e036:	d0ba      	beq.n	801dfae <_strtod_l+0x68e>
 801e038:	4601      	mov	r1, r0
 801e03a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e03c:	9805      	ldr	r0, [sp, #20]
 801e03e:	f001 f9ab 	bl	801f398 <__multiply>
 801e042:	900e      	str	r0, [sp, #56]	@ 0x38
 801e044:	2800      	cmp	r0, #0
 801e046:	f43f ae8a 	beq.w	801dd5e <_strtod_l+0x43e>
 801e04a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e04c:	9805      	ldr	r0, [sp, #20]
 801e04e:	f001 f88f 	bl	801f170 <_Bfree>
 801e052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e054:	931a      	str	r3, [sp, #104]	@ 0x68
 801e056:	2d00      	cmp	r5, #0
 801e058:	dc1d      	bgt.n	801e096 <_strtod_l+0x776>
 801e05a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	dd23      	ble.n	801e0a8 <_strtod_l+0x788>
 801e060:	4649      	mov	r1, r9
 801e062:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e064:	9805      	ldr	r0, [sp, #20]
 801e066:	f001 fa41 	bl	801f4ec <__pow5mult>
 801e06a:	4681      	mov	r9, r0
 801e06c:	b9e0      	cbnz	r0, 801e0a8 <_strtod_l+0x788>
 801e06e:	f04f 0900 	mov.w	r9, #0
 801e072:	e674      	b.n	801dd5e <_strtod_l+0x43e>
 801e074:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801e078:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801e07c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801e080:	35e2      	adds	r5, #226	@ 0xe2
 801e082:	fa01 f305 	lsl.w	r3, r1, r5
 801e086:	9310      	str	r3, [sp, #64]	@ 0x40
 801e088:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e08a:	e7ba      	b.n	801e002 <_strtod_l+0x6e2>
 801e08c:	2300      	movs	r3, #0
 801e08e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e090:	2301      	movs	r3, #1
 801e092:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e094:	e7b5      	b.n	801e002 <_strtod_l+0x6e2>
 801e096:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e098:	9805      	ldr	r0, [sp, #20]
 801e09a:	462a      	mov	r2, r5
 801e09c:	f001 fa80 	bl	801f5a0 <__lshift>
 801e0a0:	901a      	str	r0, [sp, #104]	@ 0x68
 801e0a2:	2800      	cmp	r0, #0
 801e0a4:	d1d9      	bne.n	801e05a <_strtod_l+0x73a>
 801e0a6:	e65a      	b.n	801dd5e <_strtod_l+0x43e>
 801e0a8:	2e00      	cmp	r6, #0
 801e0aa:	dd07      	ble.n	801e0bc <_strtod_l+0x79c>
 801e0ac:	4649      	mov	r1, r9
 801e0ae:	9805      	ldr	r0, [sp, #20]
 801e0b0:	4632      	mov	r2, r6
 801e0b2:	f001 fa75 	bl	801f5a0 <__lshift>
 801e0b6:	4681      	mov	r9, r0
 801e0b8:	2800      	cmp	r0, #0
 801e0ba:	d0d8      	beq.n	801e06e <_strtod_l+0x74e>
 801e0bc:	2f00      	cmp	r7, #0
 801e0be:	dd08      	ble.n	801e0d2 <_strtod_l+0x7b2>
 801e0c0:	4641      	mov	r1, r8
 801e0c2:	9805      	ldr	r0, [sp, #20]
 801e0c4:	463a      	mov	r2, r7
 801e0c6:	f001 fa6b 	bl	801f5a0 <__lshift>
 801e0ca:	4680      	mov	r8, r0
 801e0cc:	2800      	cmp	r0, #0
 801e0ce:	f43f ae46 	beq.w	801dd5e <_strtod_l+0x43e>
 801e0d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e0d4:	9805      	ldr	r0, [sp, #20]
 801e0d6:	464a      	mov	r2, r9
 801e0d8:	f001 faea 	bl	801f6b0 <__mdiff>
 801e0dc:	4604      	mov	r4, r0
 801e0de:	2800      	cmp	r0, #0
 801e0e0:	f43f ae3d 	beq.w	801dd5e <_strtod_l+0x43e>
 801e0e4:	68c3      	ldr	r3, [r0, #12]
 801e0e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	60c3      	str	r3, [r0, #12]
 801e0ec:	4641      	mov	r1, r8
 801e0ee:	f001 fac3 	bl	801f678 <__mcmp>
 801e0f2:	2800      	cmp	r0, #0
 801e0f4:	da46      	bge.n	801e184 <_strtod_l+0x864>
 801e0f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e0f8:	ea53 030a 	orrs.w	r3, r3, sl
 801e0fc:	d16c      	bne.n	801e1d8 <_strtod_l+0x8b8>
 801e0fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e102:	2b00      	cmp	r3, #0
 801e104:	d168      	bne.n	801e1d8 <_strtod_l+0x8b8>
 801e106:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801e10a:	0d1b      	lsrs	r3, r3, #20
 801e10c:	051b      	lsls	r3, r3, #20
 801e10e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801e112:	d961      	bls.n	801e1d8 <_strtod_l+0x8b8>
 801e114:	6963      	ldr	r3, [r4, #20]
 801e116:	b913      	cbnz	r3, 801e11e <_strtod_l+0x7fe>
 801e118:	6923      	ldr	r3, [r4, #16]
 801e11a:	2b01      	cmp	r3, #1
 801e11c:	dd5c      	ble.n	801e1d8 <_strtod_l+0x8b8>
 801e11e:	4621      	mov	r1, r4
 801e120:	2201      	movs	r2, #1
 801e122:	9805      	ldr	r0, [sp, #20]
 801e124:	f001 fa3c 	bl	801f5a0 <__lshift>
 801e128:	4641      	mov	r1, r8
 801e12a:	4604      	mov	r4, r0
 801e12c:	f001 faa4 	bl	801f678 <__mcmp>
 801e130:	2800      	cmp	r0, #0
 801e132:	dd51      	ble.n	801e1d8 <_strtod_l+0x8b8>
 801e134:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801e138:	9a08      	ldr	r2, [sp, #32]
 801e13a:	0d1b      	lsrs	r3, r3, #20
 801e13c:	051b      	lsls	r3, r3, #20
 801e13e:	2a00      	cmp	r2, #0
 801e140:	d06b      	beq.n	801e21a <_strtod_l+0x8fa>
 801e142:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801e146:	d868      	bhi.n	801e21a <_strtod_l+0x8fa>
 801e148:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801e14c:	f67f ae9d 	bls.w	801de8a <_strtod_l+0x56a>
 801e150:	4b0a      	ldr	r3, [pc, #40]	@ (801e17c <_strtod_l+0x85c>)
 801e152:	4650      	mov	r0, sl
 801e154:	4659      	mov	r1, fp
 801e156:	2200      	movs	r2, #0
 801e158:	f7e2 fa7e 	bl	8000658 <__aeabi_dmul>
 801e15c:	4b08      	ldr	r3, [pc, #32]	@ (801e180 <_strtod_l+0x860>)
 801e15e:	400b      	ands	r3, r1
 801e160:	4682      	mov	sl, r0
 801e162:	468b      	mov	fp, r1
 801e164:	2b00      	cmp	r3, #0
 801e166:	f47f ae05 	bne.w	801dd74 <_strtod_l+0x454>
 801e16a:	9a05      	ldr	r2, [sp, #20]
 801e16c:	2322      	movs	r3, #34	@ 0x22
 801e16e:	6013      	str	r3, [r2, #0]
 801e170:	e600      	b.n	801dd74 <_strtod_l+0x454>
 801e172:	bf00      	nop
 801e174:	080296b8 	.word	0x080296b8
 801e178:	fffffc02 	.word	0xfffffc02
 801e17c:	39500000 	.word	0x39500000
 801e180:	7ff00000 	.word	0x7ff00000
 801e184:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801e188:	d165      	bne.n	801e256 <_strtod_l+0x936>
 801e18a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e18c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e190:	b35a      	cbz	r2, 801e1ea <_strtod_l+0x8ca>
 801e192:	4a9f      	ldr	r2, [pc, #636]	@ (801e410 <_strtod_l+0xaf0>)
 801e194:	4293      	cmp	r3, r2
 801e196:	d12b      	bne.n	801e1f0 <_strtod_l+0x8d0>
 801e198:	9b08      	ldr	r3, [sp, #32]
 801e19a:	4651      	mov	r1, sl
 801e19c:	b303      	cbz	r3, 801e1e0 <_strtod_l+0x8c0>
 801e19e:	4b9d      	ldr	r3, [pc, #628]	@ (801e414 <_strtod_l+0xaf4>)
 801e1a0:	465a      	mov	r2, fp
 801e1a2:	4013      	ands	r3, r2
 801e1a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801e1a8:	f04f 32ff 	mov.w	r2, #4294967295
 801e1ac:	d81b      	bhi.n	801e1e6 <_strtod_l+0x8c6>
 801e1ae:	0d1b      	lsrs	r3, r3, #20
 801e1b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801e1b4:	fa02 f303 	lsl.w	r3, r2, r3
 801e1b8:	4299      	cmp	r1, r3
 801e1ba:	d119      	bne.n	801e1f0 <_strtod_l+0x8d0>
 801e1bc:	4b96      	ldr	r3, [pc, #600]	@ (801e418 <_strtod_l+0xaf8>)
 801e1be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1c0:	429a      	cmp	r2, r3
 801e1c2:	d102      	bne.n	801e1ca <_strtod_l+0x8aa>
 801e1c4:	3101      	adds	r1, #1
 801e1c6:	f43f adca 	beq.w	801dd5e <_strtod_l+0x43e>
 801e1ca:	4b92      	ldr	r3, [pc, #584]	@ (801e414 <_strtod_l+0xaf4>)
 801e1cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1ce:	401a      	ands	r2, r3
 801e1d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801e1d4:	f04f 0a00 	mov.w	sl, #0
 801e1d8:	9b08      	ldr	r3, [sp, #32]
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d1b8      	bne.n	801e150 <_strtod_l+0x830>
 801e1de:	e5c9      	b.n	801dd74 <_strtod_l+0x454>
 801e1e0:	f04f 33ff 	mov.w	r3, #4294967295
 801e1e4:	e7e8      	b.n	801e1b8 <_strtod_l+0x898>
 801e1e6:	4613      	mov	r3, r2
 801e1e8:	e7e6      	b.n	801e1b8 <_strtod_l+0x898>
 801e1ea:	ea53 030a 	orrs.w	r3, r3, sl
 801e1ee:	d0a1      	beq.n	801e134 <_strtod_l+0x814>
 801e1f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e1f2:	b1db      	cbz	r3, 801e22c <_strtod_l+0x90c>
 801e1f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1f6:	4213      	tst	r3, r2
 801e1f8:	d0ee      	beq.n	801e1d8 <_strtod_l+0x8b8>
 801e1fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e1fc:	9a08      	ldr	r2, [sp, #32]
 801e1fe:	4650      	mov	r0, sl
 801e200:	4659      	mov	r1, fp
 801e202:	b1bb      	cbz	r3, 801e234 <_strtod_l+0x914>
 801e204:	f7ff fb6c 	bl	801d8e0 <sulp>
 801e208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e20c:	ec53 2b10 	vmov	r2, r3, d0
 801e210:	f7e2 f86c 	bl	80002ec <__adddf3>
 801e214:	4682      	mov	sl, r0
 801e216:	468b      	mov	fp, r1
 801e218:	e7de      	b.n	801e1d8 <_strtod_l+0x8b8>
 801e21a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e21e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e222:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e226:	f04f 3aff 	mov.w	sl, #4294967295
 801e22a:	e7d5      	b.n	801e1d8 <_strtod_l+0x8b8>
 801e22c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e22e:	ea13 0f0a 	tst.w	r3, sl
 801e232:	e7e1      	b.n	801e1f8 <_strtod_l+0x8d8>
 801e234:	f7ff fb54 	bl	801d8e0 <sulp>
 801e238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e23c:	ec53 2b10 	vmov	r2, r3, d0
 801e240:	f7e2 f852 	bl	80002e8 <__aeabi_dsub>
 801e244:	2200      	movs	r2, #0
 801e246:	2300      	movs	r3, #0
 801e248:	4682      	mov	sl, r0
 801e24a:	468b      	mov	fp, r1
 801e24c:	f7e2 fc6c 	bl	8000b28 <__aeabi_dcmpeq>
 801e250:	2800      	cmp	r0, #0
 801e252:	d0c1      	beq.n	801e1d8 <_strtod_l+0x8b8>
 801e254:	e619      	b.n	801de8a <_strtod_l+0x56a>
 801e256:	4641      	mov	r1, r8
 801e258:	4620      	mov	r0, r4
 801e25a:	f001 fb85 	bl	801f968 <__ratio>
 801e25e:	ec57 6b10 	vmov	r6, r7, d0
 801e262:	2200      	movs	r2, #0
 801e264:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801e268:	4630      	mov	r0, r6
 801e26a:	4639      	mov	r1, r7
 801e26c:	f7e2 fc70 	bl	8000b50 <__aeabi_dcmple>
 801e270:	2800      	cmp	r0, #0
 801e272:	d06f      	beq.n	801e354 <_strtod_l+0xa34>
 801e274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e276:	2b00      	cmp	r3, #0
 801e278:	d17a      	bne.n	801e370 <_strtod_l+0xa50>
 801e27a:	f1ba 0f00 	cmp.w	sl, #0
 801e27e:	d158      	bne.n	801e332 <_strtod_l+0xa12>
 801e280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e282:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e286:	2b00      	cmp	r3, #0
 801e288:	d15a      	bne.n	801e340 <_strtod_l+0xa20>
 801e28a:	4b64      	ldr	r3, [pc, #400]	@ (801e41c <_strtod_l+0xafc>)
 801e28c:	2200      	movs	r2, #0
 801e28e:	4630      	mov	r0, r6
 801e290:	4639      	mov	r1, r7
 801e292:	f7e2 fc53 	bl	8000b3c <__aeabi_dcmplt>
 801e296:	2800      	cmp	r0, #0
 801e298:	d159      	bne.n	801e34e <_strtod_l+0xa2e>
 801e29a:	4630      	mov	r0, r6
 801e29c:	4639      	mov	r1, r7
 801e29e:	4b60      	ldr	r3, [pc, #384]	@ (801e420 <_strtod_l+0xb00>)
 801e2a0:	2200      	movs	r2, #0
 801e2a2:	f7e2 f9d9 	bl	8000658 <__aeabi_dmul>
 801e2a6:	4606      	mov	r6, r0
 801e2a8:	460f      	mov	r7, r1
 801e2aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801e2ae:	9606      	str	r6, [sp, #24]
 801e2b0:	9307      	str	r3, [sp, #28]
 801e2b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e2b6:	4d57      	ldr	r5, [pc, #348]	@ (801e414 <_strtod_l+0xaf4>)
 801e2b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801e2bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e2be:	401d      	ands	r5, r3
 801e2c0:	4b58      	ldr	r3, [pc, #352]	@ (801e424 <_strtod_l+0xb04>)
 801e2c2:	429d      	cmp	r5, r3
 801e2c4:	f040 80b2 	bne.w	801e42c <_strtod_l+0xb0c>
 801e2c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e2ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801e2ce:	ec4b ab10 	vmov	d0, sl, fp
 801e2d2:	f001 fa81 	bl	801f7d8 <__ulp>
 801e2d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e2da:	ec51 0b10 	vmov	r0, r1, d0
 801e2de:	f7e2 f9bb 	bl	8000658 <__aeabi_dmul>
 801e2e2:	4652      	mov	r2, sl
 801e2e4:	465b      	mov	r3, fp
 801e2e6:	f7e2 f801 	bl	80002ec <__adddf3>
 801e2ea:	460b      	mov	r3, r1
 801e2ec:	4949      	ldr	r1, [pc, #292]	@ (801e414 <_strtod_l+0xaf4>)
 801e2ee:	4a4e      	ldr	r2, [pc, #312]	@ (801e428 <_strtod_l+0xb08>)
 801e2f0:	4019      	ands	r1, r3
 801e2f2:	4291      	cmp	r1, r2
 801e2f4:	4682      	mov	sl, r0
 801e2f6:	d942      	bls.n	801e37e <_strtod_l+0xa5e>
 801e2f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e2fa:	4b47      	ldr	r3, [pc, #284]	@ (801e418 <_strtod_l+0xaf8>)
 801e2fc:	429a      	cmp	r2, r3
 801e2fe:	d103      	bne.n	801e308 <_strtod_l+0x9e8>
 801e300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e302:	3301      	adds	r3, #1
 801e304:	f43f ad2b 	beq.w	801dd5e <_strtod_l+0x43e>
 801e308:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801e418 <_strtod_l+0xaf8>
 801e30c:	f04f 3aff 	mov.w	sl, #4294967295
 801e310:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801e312:	9805      	ldr	r0, [sp, #20]
 801e314:	f000 ff2c 	bl	801f170 <_Bfree>
 801e318:	9805      	ldr	r0, [sp, #20]
 801e31a:	4649      	mov	r1, r9
 801e31c:	f000 ff28 	bl	801f170 <_Bfree>
 801e320:	9805      	ldr	r0, [sp, #20]
 801e322:	4641      	mov	r1, r8
 801e324:	f000 ff24 	bl	801f170 <_Bfree>
 801e328:	9805      	ldr	r0, [sp, #20]
 801e32a:	4621      	mov	r1, r4
 801e32c:	f000 ff20 	bl	801f170 <_Bfree>
 801e330:	e618      	b.n	801df64 <_strtod_l+0x644>
 801e332:	f1ba 0f01 	cmp.w	sl, #1
 801e336:	d103      	bne.n	801e340 <_strtod_l+0xa20>
 801e338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	f43f ada5 	beq.w	801de8a <_strtod_l+0x56a>
 801e340:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801e3f0 <_strtod_l+0xad0>
 801e344:	4f35      	ldr	r7, [pc, #212]	@ (801e41c <_strtod_l+0xafc>)
 801e346:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e34a:	2600      	movs	r6, #0
 801e34c:	e7b1      	b.n	801e2b2 <_strtod_l+0x992>
 801e34e:	4f34      	ldr	r7, [pc, #208]	@ (801e420 <_strtod_l+0xb00>)
 801e350:	2600      	movs	r6, #0
 801e352:	e7aa      	b.n	801e2aa <_strtod_l+0x98a>
 801e354:	4b32      	ldr	r3, [pc, #200]	@ (801e420 <_strtod_l+0xb00>)
 801e356:	4630      	mov	r0, r6
 801e358:	4639      	mov	r1, r7
 801e35a:	2200      	movs	r2, #0
 801e35c:	f7e2 f97c 	bl	8000658 <__aeabi_dmul>
 801e360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e362:	4606      	mov	r6, r0
 801e364:	460f      	mov	r7, r1
 801e366:	2b00      	cmp	r3, #0
 801e368:	d09f      	beq.n	801e2aa <_strtod_l+0x98a>
 801e36a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801e36e:	e7a0      	b.n	801e2b2 <_strtod_l+0x992>
 801e370:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801e3f8 <_strtod_l+0xad8>
 801e374:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e378:	ec57 6b17 	vmov	r6, r7, d7
 801e37c:	e799      	b.n	801e2b2 <_strtod_l+0x992>
 801e37e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801e382:	9b08      	ldr	r3, [sp, #32]
 801e384:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801e388:	2b00      	cmp	r3, #0
 801e38a:	d1c1      	bne.n	801e310 <_strtod_l+0x9f0>
 801e38c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801e390:	0d1b      	lsrs	r3, r3, #20
 801e392:	051b      	lsls	r3, r3, #20
 801e394:	429d      	cmp	r5, r3
 801e396:	d1bb      	bne.n	801e310 <_strtod_l+0x9f0>
 801e398:	4630      	mov	r0, r6
 801e39a:	4639      	mov	r1, r7
 801e39c:	f7e2 fd0c 	bl	8000db8 <__aeabi_d2lz>
 801e3a0:	f7e2 f92c 	bl	80005fc <__aeabi_l2d>
 801e3a4:	4602      	mov	r2, r0
 801e3a6:	460b      	mov	r3, r1
 801e3a8:	4630      	mov	r0, r6
 801e3aa:	4639      	mov	r1, r7
 801e3ac:	f7e1 ff9c 	bl	80002e8 <__aeabi_dsub>
 801e3b0:	460b      	mov	r3, r1
 801e3b2:	4602      	mov	r2, r0
 801e3b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801e3b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801e3bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3be:	ea46 060a 	orr.w	r6, r6, sl
 801e3c2:	431e      	orrs	r6, r3
 801e3c4:	d06f      	beq.n	801e4a6 <_strtod_l+0xb86>
 801e3c6:	a30e      	add	r3, pc, #56	@ (adr r3, 801e400 <_strtod_l+0xae0>)
 801e3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3cc:	f7e2 fbb6 	bl	8000b3c <__aeabi_dcmplt>
 801e3d0:	2800      	cmp	r0, #0
 801e3d2:	f47f accf 	bne.w	801dd74 <_strtod_l+0x454>
 801e3d6:	a30c      	add	r3, pc, #48	@ (adr r3, 801e408 <_strtod_l+0xae8>)
 801e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e3e0:	f7e2 fbca 	bl	8000b78 <__aeabi_dcmpgt>
 801e3e4:	2800      	cmp	r0, #0
 801e3e6:	d093      	beq.n	801e310 <_strtod_l+0x9f0>
 801e3e8:	e4c4      	b.n	801dd74 <_strtod_l+0x454>
 801e3ea:	bf00      	nop
 801e3ec:	f3af 8000 	nop.w
 801e3f0:	00000000 	.word	0x00000000
 801e3f4:	bff00000 	.word	0xbff00000
 801e3f8:	00000000 	.word	0x00000000
 801e3fc:	3ff00000 	.word	0x3ff00000
 801e400:	94a03595 	.word	0x94a03595
 801e404:	3fdfffff 	.word	0x3fdfffff
 801e408:	35afe535 	.word	0x35afe535
 801e40c:	3fe00000 	.word	0x3fe00000
 801e410:	000fffff 	.word	0x000fffff
 801e414:	7ff00000 	.word	0x7ff00000
 801e418:	7fefffff 	.word	0x7fefffff
 801e41c:	3ff00000 	.word	0x3ff00000
 801e420:	3fe00000 	.word	0x3fe00000
 801e424:	7fe00000 	.word	0x7fe00000
 801e428:	7c9fffff 	.word	0x7c9fffff
 801e42c:	9b08      	ldr	r3, [sp, #32]
 801e42e:	b323      	cbz	r3, 801e47a <_strtod_l+0xb5a>
 801e430:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801e434:	d821      	bhi.n	801e47a <_strtod_l+0xb5a>
 801e436:	a328      	add	r3, pc, #160	@ (adr r3, 801e4d8 <_strtod_l+0xbb8>)
 801e438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e43c:	4630      	mov	r0, r6
 801e43e:	4639      	mov	r1, r7
 801e440:	f7e2 fb86 	bl	8000b50 <__aeabi_dcmple>
 801e444:	b1a0      	cbz	r0, 801e470 <_strtod_l+0xb50>
 801e446:	4639      	mov	r1, r7
 801e448:	4630      	mov	r0, r6
 801e44a:	f7e2 fbdd 	bl	8000c08 <__aeabi_d2uiz>
 801e44e:	2801      	cmp	r0, #1
 801e450:	bf38      	it	cc
 801e452:	2001      	movcc	r0, #1
 801e454:	f7e2 f886 	bl	8000564 <__aeabi_ui2d>
 801e458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e45a:	4606      	mov	r6, r0
 801e45c:	460f      	mov	r7, r1
 801e45e:	b9fb      	cbnz	r3, 801e4a0 <_strtod_l+0xb80>
 801e460:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e464:	9014      	str	r0, [sp, #80]	@ 0x50
 801e466:	9315      	str	r3, [sp, #84]	@ 0x54
 801e468:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801e46c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801e470:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e472:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801e476:	1b5b      	subs	r3, r3, r5
 801e478:	9311      	str	r3, [sp, #68]	@ 0x44
 801e47a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e47e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801e482:	f001 f9a9 	bl	801f7d8 <__ulp>
 801e486:	4650      	mov	r0, sl
 801e488:	ec53 2b10 	vmov	r2, r3, d0
 801e48c:	4659      	mov	r1, fp
 801e48e:	f7e2 f8e3 	bl	8000658 <__aeabi_dmul>
 801e492:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801e496:	f7e1 ff29 	bl	80002ec <__adddf3>
 801e49a:	4682      	mov	sl, r0
 801e49c:	468b      	mov	fp, r1
 801e49e:	e770      	b.n	801e382 <_strtod_l+0xa62>
 801e4a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801e4a4:	e7e0      	b.n	801e468 <_strtod_l+0xb48>
 801e4a6:	a30e      	add	r3, pc, #56	@ (adr r3, 801e4e0 <_strtod_l+0xbc0>)
 801e4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ac:	f7e2 fb46 	bl	8000b3c <__aeabi_dcmplt>
 801e4b0:	e798      	b.n	801e3e4 <_strtod_l+0xac4>
 801e4b2:	2300      	movs	r3, #0
 801e4b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e4b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e4b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e4ba:	6013      	str	r3, [r2, #0]
 801e4bc:	f7ff ba6d 	b.w	801d99a <_strtod_l+0x7a>
 801e4c0:	2a65      	cmp	r2, #101	@ 0x65
 801e4c2:	f43f ab66 	beq.w	801db92 <_strtod_l+0x272>
 801e4c6:	2a45      	cmp	r2, #69	@ 0x45
 801e4c8:	f43f ab63 	beq.w	801db92 <_strtod_l+0x272>
 801e4cc:	2301      	movs	r3, #1
 801e4ce:	f7ff bb9e 	b.w	801dc0e <_strtod_l+0x2ee>
 801e4d2:	bf00      	nop
 801e4d4:	f3af 8000 	nop.w
 801e4d8:	ffc00000 	.word	0xffc00000
 801e4dc:	41dfffff 	.word	0x41dfffff
 801e4e0:	94a03595 	.word	0x94a03595
 801e4e4:	3fcfffff 	.word	0x3fcfffff

0801e4e8 <strtod>:
 801e4e8:	460a      	mov	r2, r1
 801e4ea:	4601      	mov	r1, r0
 801e4ec:	4802      	ldr	r0, [pc, #8]	@ (801e4f8 <strtod+0x10>)
 801e4ee:	4b03      	ldr	r3, [pc, #12]	@ (801e4fc <strtod+0x14>)
 801e4f0:	6800      	ldr	r0, [r0, #0]
 801e4f2:	f7ff ba15 	b.w	801d920 <_strtod_l>
 801e4f6:	bf00      	nop
 801e4f8:	20005340 	.word	0x20005340
 801e4fc:	200051d4 	.word	0x200051d4

0801e500 <std>:
 801e500:	2300      	movs	r3, #0
 801e502:	b510      	push	{r4, lr}
 801e504:	4604      	mov	r4, r0
 801e506:	e9c0 3300 	strd	r3, r3, [r0]
 801e50a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e50e:	6083      	str	r3, [r0, #8]
 801e510:	8181      	strh	r1, [r0, #12]
 801e512:	6643      	str	r3, [r0, #100]	@ 0x64
 801e514:	81c2      	strh	r2, [r0, #14]
 801e516:	6183      	str	r3, [r0, #24]
 801e518:	4619      	mov	r1, r3
 801e51a:	2208      	movs	r2, #8
 801e51c:	305c      	adds	r0, #92	@ 0x5c
 801e51e:	f000 f961 	bl	801e7e4 <memset>
 801e522:	4b0d      	ldr	r3, [pc, #52]	@ (801e558 <std+0x58>)
 801e524:	6263      	str	r3, [r4, #36]	@ 0x24
 801e526:	4b0d      	ldr	r3, [pc, #52]	@ (801e55c <std+0x5c>)
 801e528:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e52a:	4b0d      	ldr	r3, [pc, #52]	@ (801e560 <std+0x60>)
 801e52c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e52e:	4b0d      	ldr	r3, [pc, #52]	@ (801e564 <std+0x64>)
 801e530:	6323      	str	r3, [r4, #48]	@ 0x30
 801e532:	4b0d      	ldr	r3, [pc, #52]	@ (801e568 <std+0x68>)
 801e534:	6224      	str	r4, [r4, #32]
 801e536:	429c      	cmp	r4, r3
 801e538:	d006      	beq.n	801e548 <std+0x48>
 801e53a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e53e:	4294      	cmp	r4, r2
 801e540:	d002      	beq.n	801e548 <std+0x48>
 801e542:	33d0      	adds	r3, #208	@ 0xd0
 801e544:	429c      	cmp	r4, r3
 801e546:	d105      	bne.n	801e554 <std+0x54>
 801e548:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e550:	f000 ba26 	b.w	801e9a0 <__retarget_lock_init_recursive>
 801e554:	bd10      	pop	{r4, pc}
 801e556:	bf00      	nop
 801e558:	0801e6e9 	.word	0x0801e6e9
 801e55c:	0801e70b 	.word	0x0801e70b
 801e560:	0801e743 	.word	0x0801e743
 801e564:	0801e767 	.word	0x0801e767
 801e568:	200056b0 	.word	0x200056b0

0801e56c <stdio_exit_handler>:
 801e56c:	4a02      	ldr	r2, [pc, #8]	@ (801e578 <stdio_exit_handler+0xc>)
 801e56e:	4903      	ldr	r1, [pc, #12]	@ (801e57c <stdio_exit_handler+0x10>)
 801e570:	4803      	ldr	r0, [pc, #12]	@ (801e580 <stdio_exit_handler+0x14>)
 801e572:	f000 b87b 	b.w	801e66c <_fwalk_sglue>
 801e576:	bf00      	nop
 801e578:	200051c8 	.word	0x200051c8
 801e57c:	080203d5 	.word	0x080203d5
 801e580:	20005344 	.word	0x20005344

0801e584 <cleanup_stdio>:
 801e584:	6841      	ldr	r1, [r0, #4]
 801e586:	4b0c      	ldr	r3, [pc, #48]	@ (801e5b8 <cleanup_stdio+0x34>)
 801e588:	4299      	cmp	r1, r3
 801e58a:	b510      	push	{r4, lr}
 801e58c:	4604      	mov	r4, r0
 801e58e:	d001      	beq.n	801e594 <cleanup_stdio+0x10>
 801e590:	f001 ff20 	bl	80203d4 <_fflush_r>
 801e594:	68a1      	ldr	r1, [r4, #8]
 801e596:	4b09      	ldr	r3, [pc, #36]	@ (801e5bc <cleanup_stdio+0x38>)
 801e598:	4299      	cmp	r1, r3
 801e59a:	d002      	beq.n	801e5a2 <cleanup_stdio+0x1e>
 801e59c:	4620      	mov	r0, r4
 801e59e:	f001 ff19 	bl	80203d4 <_fflush_r>
 801e5a2:	68e1      	ldr	r1, [r4, #12]
 801e5a4:	4b06      	ldr	r3, [pc, #24]	@ (801e5c0 <cleanup_stdio+0x3c>)
 801e5a6:	4299      	cmp	r1, r3
 801e5a8:	d004      	beq.n	801e5b4 <cleanup_stdio+0x30>
 801e5aa:	4620      	mov	r0, r4
 801e5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5b0:	f001 bf10 	b.w	80203d4 <_fflush_r>
 801e5b4:	bd10      	pop	{r4, pc}
 801e5b6:	bf00      	nop
 801e5b8:	200056b0 	.word	0x200056b0
 801e5bc:	20005718 	.word	0x20005718
 801e5c0:	20005780 	.word	0x20005780

0801e5c4 <global_stdio_init.part.0>:
 801e5c4:	b510      	push	{r4, lr}
 801e5c6:	4b0b      	ldr	r3, [pc, #44]	@ (801e5f4 <global_stdio_init.part.0+0x30>)
 801e5c8:	4c0b      	ldr	r4, [pc, #44]	@ (801e5f8 <global_stdio_init.part.0+0x34>)
 801e5ca:	4a0c      	ldr	r2, [pc, #48]	@ (801e5fc <global_stdio_init.part.0+0x38>)
 801e5cc:	601a      	str	r2, [r3, #0]
 801e5ce:	4620      	mov	r0, r4
 801e5d0:	2200      	movs	r2, #0
 801e5d2:	2104      	movs	r1, #4
 801e5d4:	f7ff ff94 	bl	801e500 <std>
 801e5d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e5dc:	2201      	movs	r2, #1
 801e5de:	2109      	movs	r1, #9
 801e5e0:	f7ff ff8e 	bl	801e500 <std>
 801e5e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e5e8:	2202      	movs	r2, #2
 801e5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5ee:	2112      	movs	r1, #18
 801e5f0:	f7ff bf86 	b.w	801e500 <std>
 801e5f4:	200057e8 	.word	0x200057e8
 801e5f8:	200056b0 	.word	0x200056b0
 801e5fc:	0801e56d 	.word	0x0801e56d

0801e600 <__sfp_lock_acquire>:
 801e600:	4801      	ldr	r0, [pc, #4]	@ (801e608 <__sfp_lock_acquire+0x8>)
 801e602:	f000 b9ce 	b.w	801e9a2 <__retarget_lock_acquire_recursive>
 801e606:	bf00      	nop
 801e608:	200057f1 	.word	0x200057f1

0801e60c <__sfp_lock_release>:
 801e60c:	4801      	ldr	r0, [pc, #4]	@ (801e614 <__sfp_lock_release+0x8>)
 801e60e:	f000 b9c9 	b.w	801e9a4 <__retarget_lock_release_recursive>
 801e612:	bf00      	nop
 801e614:	200057f1 	.word	0x200057f1

0801e618 <__sinit>:
 801e618:	b510      	push	{r4, lr}
 801e61a:	4604      	mov	r4, r0
 801e61c:	f7ff fff0 	bl	801e600 <__sfp_lock_acquire>
 801e620:	6a23      	ldr	r3, [r4, #32]
 801e622:	b11b      	cbz	r3, 801e62c <__sinit+0x14>
 801e624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e628:	f7ff bff0 	b.w	801e60c <__sfp_lock_release>
 801e62c:	4b04      	ldr	r3, [pc, #16]	@ (801e640 <__sinit+0x28>)
 801e62e:	6223      	str	r3, [r4, #32]
 801e630:	4b04      	ldr	r3, [pc, #16]	@ (801e644 <__sinit+0x2c>)
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	2b00      	cmp	r3, #0
 801e636:	d1f5      	bne.n	801e624 <__sinit+0xc>
 801e638:	f7ff ffc4 	bl	801e5c4 <global_stdio_init.part.0>
 801e63c:	e7f2      	b.n	801e624 <__sinit+0xc>
 801e63e:	bf00      	nop
 801e640:	0801e585 	.word	0x0801e585
 801e644:	200057e8 	.word	0x200057e8

0801e648 <fiprintf>:
 801e648:	b40e      	push	{r1, r2, r3}
 801e64a:	b503      	push	{r0, r1, lr}
 801e64c:	4601      	mov	r1, r0
 801e64e:	ab03      	add	r3, sp, #12
 801e650:	4805      	ldr	r0, [pc, #20]	@ (801e668 <fiprintf+0x20>)
 801e652:	f853 2b04 	ldr.w	r2, [r3], #4
 801e656:	6800      	ldr	r0, [r0, #0]
 801e658:	9301      	str	r3, [sp, #4]
 801e65a:	f001 fb91 	bl	801fd80 <_vfiprintf_r>
 801e65e:	b002      	add	sp, #8
 801e660:	f85d eb04 	ldr.w	lr, [sp], #4
 801e664:	b003      	add	sp, #12
 801e666:	4770      	bx	lr
 801e668:	20005340 	.word	0x20005340

0801e66c <_fwalk_sglue>:
 801e66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e670:	4607      	mov	r7, r0
 801e672:	4688      	mov	r8, r1
 801e674:	4614      	mov	r4, r2
 801e676:	2600      	movs	r6, #0
 801e678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e67c:	f1b9 0901 	subs.w	r9, r9, #1
 801e680:	d505      	bpl.n	801e68e <_fwalk_sglue+0x22>
 801e682:	6824      	ldr	r4, [r4, #0]
 801e684:	2c00      	cmp	r4, #0
 801e686:	d1f7      	bne.n	801e678 <_fwalk_sglue+0xc>
 801e688:	4630      	mov	r0, r6
 801e68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e68e:	89ab      	ldrh	r3, [r5, #12]
 801e690:	2b01      	cmp	r3, #1
 801e692:	d907      	bls.n	801e6a4 <_fwalk_sglue+0x38>
 801e694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e698:	3301      	adds	r3, #1
 801e69a:	d003      	beq.n	801e6a4 <_fwalk_sglue+0x38>
 801e69c:	4629      	mov	r1, r5
 801e69e:	4638      	mov	r0, r7
 801e6a0:	47c0      	blx	r8
 801e6a2:	4306      	orrs	r6, r0
 801e6a4:	3568      	adds	r5, #104	@ 0x68
 801e6a6:	e7e9      	b.n	801e67c <_fwalk_sglue+0x10>

0801e6a8 <siprintf>:
 801e6a8:	b40e      	push	{r1, r2, r3}
 801e6aa:	b500      	push	{lr}
 801e6ac:	b09c      	sub	sp, #112	@ 0x70
 801e6ae:	ab1d      	add	r3, sp, #116	@ 0x74
 801e6b0:	9002      	str	r0, [sp, #8]
 801e6b2:	9006      	str	r0, [sp, #24]
 801e6b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e6b8:	4809      	ldr	r0, [pc, #36]	@ (801e6e0 <siprintf+0x38>)
 801e6ba:	9107      	str	r1, [sp, #28]
 801e6bc:	9104      	str	r1, [sp, #16]
 801e6be:	4909      	ldr	r1, [pc, #36]	@ (801e6e4 <siprintf+0x3c>)
 801e6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6c4:	9105      	str	r1, [sp, #20]
 801e6c6:	6800      	ldr	r0, [r0, #0]
 801e6c8:	9301      	str	r3, [sp, #4]
 801e6ca:	a902      	add	r1, sp, #8
 801e6cc:	f001 fa32 	bl	801fb34 <_svfiprintf_r>
 801e6d0:	9b02      	ldr	r3, [sp, #8]
 801e6d2:	2200      	movs	r2, #0
 801e6d4:	701a      	strb	r2, [r3, #0]
 801e6d6:	b01c      	add	sp, #112	@ 0x70
 801e6d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e6dc:	b003      	add	sp, #12
 801e6de:	4770      	bx	lr
 801e6e0:	20005340 	.word	0x20005340
 801e6e4:	ffff0208 	.word	0xffff0208

0801e6e8 <__sread>:
 801e6e8:	b510      	push	{r4, lr}
 801e6ea:	460c      	mov	r4, r1
 801e6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6f0:	f000 f8e4 	bl	801e8bc <_read_r>
 801e6f4:	2800      	cmp	r0, #0
 801e6f6:	bfab      	itete	ge
 801e6f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e6fa:	89a3      	ldrhlt	r3, [r4, #12]
 801e6fc:	181b      	addge	r3, r3, r0
 801e6fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e702:	bfac      	ite	ge
 801e704:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e706:	81a3      	strhlt	r3, [r4, #12]
 801e708:	bd10      	pop	{r4, pc}

0801e70a <__swrite>:
 801e70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e70e:	461f      	mov	r7, r3
 801e710:	898b      	ldrh	r3, [r1, #12]
 801e712:	05db      	lsls	r3, r3, #23
 801e714:	4605      	mov	r5, r0
 801e716:	460c      	mov	r4, r1
 801e718:	4616      	mov	r6, r2
 801e71a:	d505      	bpl.n	801e728 <__swrite+0x1e>
 801e71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e720:	2302      	movs	r3, #2
 801e722:	2200      	movs	r2, #0
 801e724:	f000 f8b8 	bl	801e898 <_lseek_r>
 801e728:	89a3      	ldrh	r3, [r4, #12]
 801e72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e72e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e732:	81a3      	strh	r3, [r4, #12]
 801e734:	4632      	mov	r2, r6
 801e736:	463b      	mov	r3, r7
 801e738:	4628      	mov	r0, r5
 801e73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e73e:	f000 b8f3 	b.w	801e928 <_write_r>

0801e742 <__sseek>:
 801e742:	b510      	push	{r4, lr}
 801e744:	460c      	mov	r4, r1
 801e746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e74a:	f000 f8a5 	bl	801e898 <_lseek_r>
 801e74e:	1c43      	adds	r3, r0, #1
 801e750:	89a3      	ldrh	r3, [r4, #12]
 801e752:	bf15      	itete	ne
 801e754:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e75a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e75e:	81a3      	strheq	r3, [r4, #12]
 801e760:	bf18      	it	ne
 801e762:	81a3      	strhne	r3, [r4, #12]
 801e764:	bd10      	pop	{r4, pc}

0801e766 <__sclose>:
 801e766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e76a:	f000 b885 	b.w	801e878 <_close_r>
	...

0801e770 <_vsiprintf_r>:
 801e770:	b500      	push	{lr}
 801e772:	b09b      	sub	sp, #108	@ 0x6c
 801e774:	9100      	str	r1, [sp, #0]
 801e776:	9104      	str	r1, [sp, #16]
 801e778:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e77c:	9105      	str	r1, [sp, #20]
 801e77e:	9102      	str	r1, [sp, #8]
 801e780:	4905      	ldr	r1, [pc, #20]	@ (801e798 <_vsiprintf_r+0x28>)
 801e782:	9103      	str	r1, [sp, #12]
 801e784:	4669      	mov	r1, sp
 801e786:	f001 f9d5 	bl	801fb34 <_svfiprintf_r>
 801e78a:	9b00      	ldr	r3, [sp, #0]
 801e78c:	2200      	movs	r2, #0
 801e78e:	701a      	strb	r2, [r3, #0]
 801e790:	b01b      	add	sp, #108	@ 0x6c
 801e792:	f85d fb04 	ldr.w	pc, [sp], #4
 801e796:	bf00      	nop
 801e798:	ffff0208 	.word	0xffff0208

0801e79c <vsiprintf>:
 801e79c:	4613      	mov	r3, r2
 801e79e:	460a      	mov	r2, r1
 801e7a0:	4601      	mov	r1, r0
 801e7a2:	4802      	ldr	r0, [pc, #8]	@ (801e7ac <vsiprintf+0x10>)
 801e7a4:	6800      	ldr	r0, [r0, #0]
 801e7a6:	f7ff bfe3 	b.w	801e770 <_vsiprintf_r>
 801e7aa:	bf00      	nop
 801e7ac:	20005340 	.word	0x20005340

0801e7b0 <memmove>:
 801e7b0:	4288      	cmp	r0, r1
 801e7b2:	b510      	push	{r4, lr}
 801e7b4:	eb01 0402 	add.w	r4, r1, r2
 801e7b8:	d902      	bls.n	801e7c0 <memmove+0x10>
 801e7ba:	4284      	cmp	r4, r0
 801e7bc:	4623      	mov	r3, r4
 801e7be:	d807      	bhi.n	801e7d0 <memmove+0x20>
 801e7c0:	1e43      	subs	r3, r0, #1
 801e7c2:	42a1      	cmp	r1, r4
 801e7c4:	d008      	beq.n	801e7d8 <memmove+0x28>
 801e7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e7ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e7ce:	e7f8      	b.n	801e7c2 <memmove+0x12>
 801e7d0:	4402      	add	r2, r0
 801e7d2:	4601      	mov	r1, r0
 801e7d4:	428a      	cmp	r2, r1
 801e7d6:	d100      	bne.n	801e7da <memmove+0x2a>
 801e7d8:	bd10      	pop	{r4, pc}
 801e7da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e7de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e7e2:	e7f7      	b.n	801e7d4 <memmove+0x24>

0801e7e4 <memset>:
 801e7e4:	4402      	add	r2, r0
 801e7e6:	4603      	mov	r3, r0
 801e7e8:	4293      	cmp	r3, r2
 801e7ea:	d100      	bne.n	801e7ee <memset+0xa>
 801e7ec:	4770      	bx	lr
 801e7ee:	f803 1b01 	strb.w	r1, [r3], #1
 801e7f2:	e7f9      	b.n	801e7e8 <memset+0x4>

0801e7f4 <strncmp>:
 801e7f4:	b510      	push	{r4, lr}
 801e7f6:	b16a      	cbz	r2, 801e814 <strncmp+0x20>
 801e7f8:	3901      	subs	r1, #1
 801e7fa:	1884      	adds	r4, r0, r2
 801e7fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e800:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e804:	429a      	cmp	r2, r3
 801e806:	d103      	bne.n	801e810 <strncmp+0x1c>
 801e808:	42a0      	cmp	r0, r4
 801e80a:	d001      	beq.n	801e810 <strncmp+0x1c>
 801e80c:	2a00      	cmp	r2, #0
 801e80e:	d1f5      	bne.n	801e7fc <strncmp+0x8>
 801e810:	1ad0      	subs	r0, r2, r3
 801e812:	bd10      	pop	{r4, pc}
 801e814:	4610      	mov	r0, r2
 801e816:	e7fc      	b.n	801e812 <strncmp+0x1e>

0801e818 <_raise_r>:
 801e818:	291f      	cmp	r1, #31
 801e81a:	b538      	push	{r3, r4, r5, lr}
 801e81c:	4605      	mov	r5, r0
 801e81e:	460c      	mov	r4, r1
 801e820:	d904      	bls.n	801e82c <_raise_r+0x14>
 801e822:	2316      	movs	r3, #22
 801e824:	6003      	str	r3, [r0, #0]
 801e826:	f04f 30ff 	mov.w	r0, #4294967295
 801e82a:	bd38      	pop	{r3, r4, r5, pc}
 801e82c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e82e:	b112      	cbz	r2, 801e836 <_raise_r+0x1e>
 801e830:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e834:	b94b      	cbnz	r3, 801e84a <_raise_r+0x32>
 801e836:	4628      	mov	r0, r5
 801e838:	f000 f864 	bl	801e904 <_getpid_r>
 801e83c:	4622      	mov	r2, r4
 801e83e:	4601      	mov	r1, r0
 801e840:	4628      	mov	r0, r5
 801e842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e846:	f000 b84b 	b.w	801e8e0 <_kill_r>
 801e84a:	2b01      	cmp	r3, #1
 801e84c:	d00a      	beq.n	801e864 <_raise_r+0x4c>
 801e84e:	1c59      	adds	r1, r3, #1
 801e850:	d103      	bne.n	801e85a <_raise_r+0x42>
 801e852:	2316      	movs	r3, #22
 801e854:	6003      	str	r3, [r0, #0]
 801e856:	2001      	movs	r0, #1
 801e858:	e7e7      	b.n	801e82a <_raise_r+0x12>
 801e85a:	2100      	movs	r1, #0
 801e85c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e860:	4620      	mov	r0, r4
 801e862:	4798      	blx	r3
 801e864:	2000      	movs	r0, #0
 801e866:	e7e0      	b.n	801e82a <_raise_r+0x12>

0801e868 <raise>:
 801e868:	4b02      	ldr	r3, [pc, #8]	@ (801e874 <raise+0xc>)
 801e86a:	4601      	mov	r1, r0
 801e86c:	6818      	ldr	r0, [r3, #0]
 801e86e:	f7ff bfd3 	b.w	801e818 <_raise_r>
 801e872:	bf00      	nop
 801e874:	20005340 	.word	0x20005340

0801e878 <_close_r>:
 801e878:	b538      	push	{r3, r4, r5, lr}
 801e87a:	4d06      	ldr	r5, [pc, #24]	@ (801e894 <_close_r+0x1c>)
 801e87c:	2300      	movs	r3, #0
 801e87e:	4604      	mov	r4, r0
 801e880:	4608      	mov	r0, r1
 801e882:	602b      	str	r3, [r5, #0]
 801e884:	f7f1 fe56 	bl	8010534 <_close>
 801e888:	1c43      	adds	r3, r0, #1
 801e88a:	d102      	bne.n	801e892 <_close_r+0x1a>
 801e88c:	682b      	ldr	r3, [r5, #0]
 801e88e:	b103      	cbz	r3, 801e892 <_close_r+0x1a>
 801e890:	6023      	str	r3, [r4, #0]
 801e892:	bd38      	pop	{r3, r4, r5, pc}
 801e894:	200057ec 	.word	0x200057ec

0801e898 <_lseek_r>:
 801e898:	b538      	push	{r3, r4, r5, lr}
 801e89a:	4d07      	ldr	r5, [pc, #28]	@ (801e8b8 <_lseek_r+0x20>)
 801e89c:	4604      	mov	r4, r0
 801e89e:	4608      	mov	r0, r1
 801e8a0:	4611      	mov	r1, r2
 801e8a2:	2200      	movs	r2, #0
 801e8a4:	602a      	str	r2, [r5, #0]
 801e8a6:	461a      	mov	r2, r3
 801e8a8:	f7f1 fe6b 	bl	8010582 <_lseek>
 801e8ac:	1c43      	adds	r3, r0, #1
 801e8ae:	d102      	bne.n	801e8b6 <_lseek_r+0x1e>
 801e8b0:	682b      	ldr	r3, [r5, #0]
 801e8b2:	b103      	cbz	r3, 801e8b6 <_lseek_r+0x1e>
 801e8b4:	6023      	str	r3, [r4, #0]
 801e8b6:	bd38      	pop	{r3, r4, r5, pc}
 801e8b8:	200057ec 	.word	0x200057ec

0801e8bc <_read_r>:
 801e8bc:	b538      	push	{r3, r4, r5, lr}
 801e8be:	4d07      	ldr	r5, [pc, #28]	@ (801e8dc <_read_r+0x20>)
 801e8c0:	4604      	mov	r4, r0
 801e8c2:	4608      	mov	r0, r1
 801e8c4:	4611      	mov	r1, r2
 801e8c6:	2200      	movs	r2, #0
 801e8c8:	602a      	str	r2, [r5, #0]
 801e8ca:	461a      	mov	r2, r3
 801e8cc:	f7f1 fdf9 	bl	80104c2 <_read>
 801e8d0:	1c43      	adds	r3, r0, #1
 801e8d2:	d102      	bne.n	801e8da <_read_r+0x1e>
 801e8d4:	682b      	ldr	r3, [r5, #0]
 801e8d6:	b103      	cbz	r3, 801e8da <_read_r+0x1e>
 801e8d8:	6023      	str	r3, [r4, #0]
 801e8da:	bd38      	pop	{r3, r4, r5, pc}
 801e8dc:	200057ec 	.word	0x200057ec

0801e8e0 <_kill_r>:
 801e8e0:	b538      	push	{r3, r4, r5, lr}
 801e8e2:	4d07      	ldr	r5, [pc, #28]	@ (801e900 <_kill_r+0x20>)
 801e8e4:	2300      	movs	r3, #0
 801e8e6:	4604      	mov	r4, r0
 801e8e8:	4608      	mov	r0, r1
 801e8ea:	4611      	mov	r1, r2
 801e8ec:	602b      	str	r3, [r5, #0]
 801e8ee:	f7f1 fdcd 	bl	801048c <_kill>
 801e8f2:	1c43      	adds	r3, r0, #1
 801e8f4:	d102      	bne.n	801e8fc <_kill_r+0x1c>
 801e8f6:	682b      	ldr	r3, [r5, #0]
 801e8f8:	b103      	cbz	r3, 801e8fc <_kill_r+0x1c>
 801e8fa:	6023      	str	r3, [r4, #0]
 801e8fc:	bd38      	pop	{r3, r4, r5, pc}
 801e8fe:	bf00      	nop
 801e900:	200057ec 	.word	0x200057ec

0801e904 <_getpid_r>:
 801e904:	f7f1 bdba 	b.w	801047c <_getpid>

0801e908 <_sbrk_r>:
 801e908:	b538      	push	{r3, r4, r5, lr}
 801e90a:	4d06      	ldr	r5, [pc, #24]	@ (801e924 <_sbrk_r+0x1c>)
 801e90c:	2300      	movs	r3, #0
 801e90e:	4604      	mov	r4, r0
 801e910:	4608      	mov	r0, r1
 801e912:	602b      	str	r3, [r5, #0]
 801e914:	f7f1 fe42 	bl	801059c <_sbrk>
 801e918:	1c43      	adds	r3, r0, #1
 801e91a:	d102      	bne.n	801e922 <_sbrk_r+0x1a>
 801e91c:	682b      	ldr	r3, [r5, #0]
 801e91e:	b103      	cbz	r3, 801e922 <_sbrk_r+0x1a>
 801e920:	6023      	str	r3, [r4, #0]
 801e922:	bd38      	pop	{r3, r4, r5, pc}
 801e924:	200057ec 	.word	0x200057ec

0801e928 <_write_r>:
 801e928:	b538      	push	{r3, r4, r5, lr}
 801e92a:	4d07      	ldr	r5, [pc, #28]	@ (801e948 <_write_r+0x20>)
 801e92c:	4604      	mov	r4, r0
 801e92e:	4608      	mov	r0, r1
 801e930:	4611      	mov	r1, r2
 801e932:	2200      	movs	r2, #0
 801e934:	602a      	str	r2, [r5, #0]
 801e936:	461a      	mov	r2, r3
 801e938:	f7f1 fde0 	bl	80104fc <_write>
 801e93c:	1c43      	adds	r3, r0, #1
 801e93e:	d102      	bne.n	801e946 <_write_r+0x1e>
 801e940:	682b      	ldr	r3, [r5, #0]
 801e942:	b103      	cbz	r3, 801e946 <_write_r+0x1e>
 801e944:	6023      	str	r3, [r4, #0]
 801e946:	bd38      	pop	{r3, r4, r5, pc}
 801e948:	200057ec 	.word	0x200057ec

0801e94c <__errno>:
 801e94c:	4b01      	ldr	r3, [pc, #4]	@ (801e954 <__errno+0x8>)
 801e94e:	6818      	ldr	r0, [r3, #0]
 801e950:	4770      	bx	lr
 801e952:	bf00      	nop
 801e954:	20005340 	.word	0x20005340

0801e958 <__libc_init_array>:
 801e958:	b570      	push	{r4, r5, r6, lr}
 801e95a:	4d0d      	ldr	r5, [pc, #52]	@ (801e990 <__libc_init_array+0x38>)
 801e95c:	4c0d      	ldr	r4, [pc, #52]	@ (801e994 <__libc_init_array+0x3c>)
 801e95e:	1b64      	subs	r4, r4, r5
 801e960:	10a4      	asrs	r4, r4, #2
 801e962:	2600      	movs	r6, #0
 801e964:	42a6      	cmp	r6, r4
 801e966:	d109      	bne.n	801e97c <__libc_init_array+0x24>
 801e968:	4d0b      	ldr	r5, [pc, #44]	@ (801e998 <__libc_init_array+0x40>)
 801e96a:	4c0c      	ldr	r4, [pc, #48]	@ (801e99c <__libc_init_array+0x44>)
 801e96c:	f001 fe72 	bl	8020654 <_init>
 801e970:	1b64      	subs	r4, r4, r5
 801e972:	10a4      	asrs	r4, r4, #2
 801e974:	2600      	movs	r6, #0
 801e976:	42a6      	cmp	r6, r4
 801e978:	d105      	bne.n	801e986 <__libc_init_array+0x2e>
 801e97a:	bd70      	pop	{r4, r5, r6, pc}
 801e97c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e980:	4798      	blx	r3
 801e982:	3601      	adds	r6, #1
 801e984:	e7ee      	b.n	801e964 <__libc_init_array+0xc>
 801e986:	f855 3b04 	ldr.w	r3, [r5], #4
 801e98a:	4798      	blx	r3
 801e98c:	3601      	adds	r6, #1
 801e98e:	e7f2      	b.n	801e976 <__libc_init_array+0x1e>
 801e990:	08029a04 	.word	0x08029a04
 801e994:	08029a04 	.word	0x08029a04
 801e998:	08029a04 	.word	0x08029a04
 801e99c:	08029a10 	.word	0x08029a10

0801e9a0 <__retarget_lock_init_recursive>:
 801e9a0:	4770      	bx	lr

0801e9a2 <__retarget_lock_acquire_recursive>:
 801e9a2:	4770      	bx	lr

0801e9a4 <__retarget_lock_release_recursive>:
 801e9a4:	4770      	bx	lr

0801e9a6 <memcpy>:
 801e9a6:	440a      	add	r2, r1
 801e9a8:	4291      	cmp	r1, r2
 801e9aa:	f100 33ff 	add.w	r3, r0, #4294967295
 801e9ae:	d100      	bne.n	801e9b2 <memcpy+0xc>
 801e9b0:	4770      	bx	lr
 801e9b2:	b510      	push	{r4, lr}
 801e9b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e9b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e9bc:	4291      	cmp	r1, r2
 801e9be:	d1f9      	bne.n	801e9b4 <memcpy+0xe>
 801e9c0:	bd10      	pop	{r4, pc}
	...

0801e9c4 <_free_r>:
 801e9c4:	b538      	push	{r3, r4, r5, lr}
 801e9c6:	4605      	mov	r5, r0
 801e9c8:	2900      	cmp	r1, #0
 801e9ca:	d041      	beq.n	801ea50 <_free_r+0x8c>
 801e9cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e9d0:	1f0c      	subs	r4, r1, #4
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	bfb8      	it	lt
 801e9d6:	18e4      	addlt	r4, r4, r3
 801e9d8:	f7fe ff48 	bl	801d86c <__malloc_lock>
 801e9dc:	4a1d      	ldr	r2, [pc, #116]	@ (801ea54 <_free_r+0x90>)
 801e9de:	6813      	ldr	r3, [r2, #0]
 801e9e0:	b933      	cbnz	r3, 801e9f0 <_free_r+0x2c>
 801e9e2:	6063      	str	r3, [r4, #4]
 801e9e4:	6014      	str	r4, [r2, #0]
 801e9e6:	4628      	mov	r0, r5
 801e9e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e9ec:	f7fe bf44 	b.w	801d878 <__malloc_unlock>
 801e9f0:	42a3      	cmp	r3, r4
 801e9f2:	d908      	bls.n	801ea06 <_free_r+0x42>
 801e9f4:	6820      	ldr	r0, [r4, #0]
 801e9f6:	1821      	adds	r1, r4, r0
 801e9f8:	428b      	cmp	r3, r1
 801e9fa:	bf01      	itttt	eq
 801e9fc:	6819      	ldreq	r1, [r3, #0]
 801e9fe:	685b      	ldreq	r3, [r3, #4]
 801ea00:	1809      	addeq	r1, r1, r0
 801ea02:	6021      	streq	r1, [r4, #0]
 801ea04:	e7ed      	b.n	801e9e2 <_free_r+0x1e>
 801ea06:	461a      	mov	r2, r3
 801ea08:	685b      	ldr	r3, [r3, #4]
 801ea0a:	b10b      	cbz	r3, 801ea10 <_free_r+0x4c>
 801ea0c:	42a3      	cmp	r3, r4
 801ea0e:	d9fa      	bls.n	801ea06 <_free_r+0x42>
 801ea10:	6811      	ldr	r1, [r2, #0]
 801ea12:	1850      	adds	r0, r2, r1
 801ea14:	42a0      	cmp	r0, r4
 801ea16:	d10b      	bne.n	801ea30 <_free_r+0x6c>
 801ea18:	6820      	ldr	r0, [r4, #0]
 801ea1a:	4401      	add	r1, r0
 801ea1c:	1850      	adds	r0, r2, r1
 801ea1e:	4283      	cmp	r3, r0
 801ea20:	6011      	str	r1, [r2, #0]
 801ea22:	d1e0      	bne.n	801e9e6 <_free_r+0x22>
 801ea24:	6818      	ldr	r0, [r3, #0]
 801ea26:	685b      	ldr	r3, [r3, #4]
 801ea28:	6053      	str	r3, [r2, #4]
 801ea2a:	4408      	add	r0, r1
 801ea2c:	6010      	str	r0, [r2, #0]
 801ea2e:	e7da      	b.n	801e9e6 <_free_r+0x22>
 801ea30:	d902      	bls.n	801ea38 <_free_r+0x74>
 801ea32:	230c      	movs	r3, #12
 801ea34:	602b      	str	r3, [r5, #0]
 801ea36:	e7d6      	b.n	801e9e6 <_free_r+0x22>
 801ea38:	6820      	ldr	r0, [r4, #0]
 801ea3a:	1821      	adds	r1, r4, r0
 801ea3c:	428b      	cmp	r3, r1
 801ea3e:	bf04      	itt	eq
 801ea40:	6819      	ldreq	r1, [r3, #0]
 801ea42:	685b      	ldreq	r3, [r3, #4]
 801ea44:	6063      	str	r3, [r4, #4]
 801ea46:	bf04      	itt	eq
 801ea48:	1809      	addeq	r1, r1, r0
 801ea4a:	6021      	streq	r1, [r4, #0]
 801ea4c:	6054      	str	r4, [r2, #4]
 801ea4e:	e7ca      	b.n	801e9e6 <_free_r+0x22>
 801ea50:	bd38      	pop	{r3, r4, r5, pc}
 801ea52:	bf00      	nop
 801ea54:	200056ac 	.word	0x200056ac

0801ea58 <rshift>:
 801ea58:	6903      	ldr	r3, [r0, #16]
 801ea5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ea5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ea62:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ea66:	f100 0414 	add.w	r4, r0, #20
 801ea6a:	dd45      	ble.n	801eaf8 <rshift+0xa0>
 801ea6c:	f011 011f 	ands.w	r1, r1, #31
 801ea70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ea74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ea78:	d10c      	bne.n	801ea94 <rshift+0x3c>
 801ea7a:	f100 0710 	add.w	r7, r0, #16
 801ea7e:	4629      	mov	r1, r5
 801ea80:	42b1      	cmp	r1, r6
 801ea82:	d334      	bcc.n	801eaee <rshift+0x96>
 801ea84:	1a9b      	subs	r3, r3, r2
 801ea86:	009b      	lsls	r3, r3, #2
 801ea88:	1eea      	subs	r2, r5, #3
 801ea8a:	4296      	cmp	r6, r2
 801ea8c:	bf38      	it	cc
 801ea8e:	2300      	movcc	r3, #0
 801ea90:	4423      	add	r3, r4
 801ea92:	e015      	b.n	801eac0 <rshift+0x68>
 801ea94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ea98:	f1c1 0820 	rsb	r8, r1, #32
 801ea9c:	40cf      	lsrs	r7, r1
 801ea9e:	f105 0e04 	add.w	lr, r5, #4
 801eaa2:	46a1      	mov	r9, r4
 801eaa4:	4576      	cmp	r6, lr
 801eaa6:	46f4      	mov	ip, lr
 801eaa8:	d815      	bhi.n	801ead6 <rshift+0x7e>
 801eaaa:	1a9a      	subs	r2, r3, r2
 801eaac:	0092      	lsls	r2, r2, #2
 801eaae:	3a04      	subs	r2, #4
 801eab0:	3501      	adds	r5, #1
 801eab2:	42ae      	cmp	r6, r5
 801eab4:	bf38      	it	cc
 801eab6:	2200      	movcc	r2, #0
 801eab8:	18a3      	adds	r3, r4, r2
 801eaba:	50a7      	str	r7, [r4, r2]
 801eabc:	b107      	cbz	r7, 801eac0 <rshift+0x68>
 801eabe:	3304      	adds	r3, #4
 801eac0:	1b1a      	subs	r2, r3, r4
 801eac2:	42a3      	cmp	r3, r4
 801eac4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801eac8:	bf08      	it	eq
 801eaca:	2300      	moveq	r3, #0
 801eacc:	6102      	str	r2, [r0, #16]
 801eace:	bf08      	it	eq
 801ead0:	6143      	streq	r3, [r0, #20]
 801ead2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ead6:	f8dc c000 	ldr.w	ip, [ip]
 801eada:	fa0c fc08 	lsl.w	ip, ip, r8
 801eade:	ea4c 0707 	orr.w	r7, ip, r7
 801eae2:	f849 7b04 	str.w	r7, [r9], #4
 801eae6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801eaea:	40cf      	lsrs	r7, r1
 801eaec:	e7da      	b.n	801eaa4 <rshift+0x4c>
 801eaee:	f851 cb04 	ldr.w	ip, [r1], #4
 801eaf2:	f847 cf04 	str.w	ip, [r7, #4]!
 801eaf6:	e7c3      	b.n	801ea80 <rshift+0x28>
 801eaf8:	4623      	mov	r3, r4
 801eafa:	e7e1      	b.n	801eac0 <rshift+0x68>

0801eafc <__hexdig_fun>:
 801eafc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801eb00:	2b09      	cmp	r3, #9
 801eb02:	d802      	bhi.n	801eb0a <__hexdig_fun+0xe>
 801eb04:	3820      	subs	r0, #32
 801eb06:	b2c0      	uxtb	r0, r0
 801eb08:	4770      	bx	lr
 801eb0a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801eb0e:	2b05      	cmp	r3, #5
 801eb10:	d801      	bhi.n	801eb16 <__hexdig_fun+0x1a>
 801eb12:	3847      	subs	r0, #71	@ 0x47
 801eb14:	e7f7      	b.n	801eb06 <__hexdig_fun+0xa>
 801eb16:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801eb1a:	2b05      	cmp	r3, #5
 801eb1c:	d801      	bhi.n	801eb22 <__hexdig_fun+0x26>
 801eb1e:	3827      	subs	r0, #39	@ 0x27
 801eb20:	e7f1      	b.n	801eb06 <__hexdig_fun+0xa>
 801eb22:	2000      	movs	r0, #0
 801eb24:	4770      	bx	lr
	...

0801eb28 <__gethex>:
 801eb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb2c:	b085      	sub	sp, #20
 801eb2e:	468a      	mov	sl, r1
 801eb30:	9302      	str	r3, [sp, #8]
 801eb32:	680b      	ldr	r3, [r1, #0]
 801eb34:	9001      	str	r0, [sp, #4]
 801eb36:	4690      	mov	r8, r2
 801eb38:	1c9c      	adds	r4, r3, #2
 801eb3a:	46a1      	mov	r9, r4
 801eb3c:	f814 0b01 	ldrb.w	r0, [r4], #1
 801eb40:	2830      	cmp	r0, #48	@ 0x30
 801eb42:	d0fa      	beq.n	801eb3a <__gethex+0x12>
 801eb44:	eba9 0303 	sub.w	r3, r9, r3
 801eb48:	f1a3 0b02 	sub.w	fp, r3, #2
 801eb4c:	f7ff ffd6 	bl	801eafc <__hexdig_fun>
 801eb50:	4605      	mov	r5, r0
 801eb52:	2800      	cmp	r0, #0
 801eb54:	d168      	bne.n	801ec28 <__gethex+0x100>
 801eb56:	49a0      	ldr	r1, [pc, #640]	@ (801edd8 <__gethex+0x2b0>)
 801eb58:	2201      	movs	r2, #1
 801eb5a:	4648      	mov	r0, r9
 801eb5c:	f7ff fe4a 	bl	801e7f4 <strncmp>
 801eb60:	4607      	mov	r7, r0
 801eb62:	2800      	cmp	r0, #0
 801eb64:	d167      	bne.n	801ec36 <__gethex+0x10e>
 801eb66:	f899 0001 	ldrb.w	r0, [r9, #1]
 801eb6a:	4626      	mov	r6, r4
 801eb6c:	f7ff ffc6 	bl	801eafc <__hexdig_fun>
 801eb70:	2800      	cmp	r0, #0
 801eb72:	d062      	beq.n	801ec3a <__gethex+0x112>
 801eb74:	4623      	mov	r3, r4
 801eb76:	7818      	ldrb	r0, [r3, #0]
 801eb78:	2830      	cmp	r0, #48	@ 0x30
 801eb7a:	4699      	mov	r9, r3
 801eb7c:	f103 0301 	add.w	r3, r3, #1
 801eb80:	d0f9      	beq.n	801eb76 <__gethex+0x4e>
 801eb82:	f7ff ffbb 	bl	801eafc <__hexdig_fun>
 801eb86:	fab0 f580 	clz	r5, r0
 801eb8a:	096d      	lsrs	r5, r5, #5
 801eb8c:	f04f 0b01 	mov.w	fp, #1
 801eb90:	464a      	mov	r2, r9
 801eb92:	4616      	mov	r6, r2
 801eb94:	3201      	adds	r2, #1
 801eb96:	7830      	ldrb	r0, [r6, #0]
 801eb98:	f7ff ffb0 	bl	801eafc <__hexdig_fun>
 801eb9c:	2800      	cmp	r0, #0
 801eb9e:	d1f8      	bne.n	801eb92 <__gethex+0x6a>
 801eba0:	498d      	ldr	r1, [pc, #564]	@ (801edd8 <__gethex+0x2b0>)
 801eba2:	2201      	movs	r2, #1
 801eba4:	4630      	mov	r0, r6
 801eba6:	f7ff fe25 	bl	801e7f4 <strncmp>
 801ebaa:	2800      	cmp	r0, #0
 801ebac:	d13f      	bne.n	801ec2e <__gethex+0x106>
 801ebae:	b944      	cbnz	r4, 801ebc2 <__gethex+0x9a>
 801ebb0:	1c74      	adds	r4, r6, #1
 801ebb2:	4622      	mov	r2, r4
 801ebb4:	4616      	mov	r6, r2
 801ebb6:	3201      	adds	r2, #1
 801ebb8:	7830      	ldrb	r0, [r6, #0]
 801ebba:	f7ff ff9f 	bl	801eafc <__hexdig_fun>
 801ebbe:	2800      	cmp	r0, #0
 801ebc0:	d1f8      	bne.n	801ebb4 <__gethex+0x8c>
 801ebc2:	1ba4      	subs	r4, r4, r6
 801ebc4:	00a7      	lsls	r7, r4, #2
 801ebc6:	7833      	ldrb	r3, [r6, #0]
 801ebc8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801ebcc:	2b50      	cmp	r3, #80	@ 0x50
 801ebce:	d13e      	bne.n	801ec4e <__gethex+0x126>
 801ebd0:	7873      	ldrb	r3, [r6, #1]
 801ebd2:	2b2b      	cmp	r3, #43	@ 0x2b
 801ebd4:	d033      	beq.n	801ec3e <__gethex+0x116>
 801ebd6:	2b2d      	cmp	r3, #45	@ 0x2d
 801ebd8:	d034      	beq.n	801ec44 <__gethex+0x11c>
 801ebda:	1c71      	adds	r1, r6, #1
 801ebdc:	2400      	movs	r4, #0
 801ebde:	7808      	ldrb	r0, [r1, #0]
 801ebe0:	f7ff ff8c 	bl	801eafc <__hexdig_fun>
 801ebe4:	1e43      	subs	r3, r0, #1
 801ebe6:	b2db      	uxtb	r3, r3
 801ebe8:	2b18      	cmp	r3, #24
 801ebea:	d830      	bhi.n	801ec4e <__gethex+0x126>
 801ebec:	f1a0 0210 	sub.w	r2, r0, #16
 801ebf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ebf4:	f7ff ff82 	bl	801eafc <__hexdig_fun>
 801ebf8:	f100 3cff 	add.w	ip, r0, #4294967295
 801ebfc:	fa5f fc8c 	uxtb.w	ip, ip
 801ec00:	f1bc 0f18 	cmp.w	ip, #24
 801ec04:	f04f 030a 	mov.w	r3, #10
 801ec08:	d91e      	bls.n	801ec48 <__gethex+0x120>
 801ec0a:	b104      	cbz	r4, 801ec0e <__gethex+0xe6>
 801ec0c:	4252      	negs	r2, r2
 801ec0e:	4417      	add	r7, r2
 801ec10:	f8ca 1000 	str.w	r1, [sl]
 801ec14:	b1ed      	cbz	r5, 801ec52 <__gethex+0x12a>
 801ec16:	f1bb 0f00 	cmp.w	fp, #0
 801ec1a:	bf0c      	ite	eq
 801ec1c:	2506      	moveq	r5, #6
 801ec1e:	2500      	movne	r5, #0
 801ec20:	4628      	mov	r0, r5
 801ec22:	b005      	add	sp, #20
 801ec24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec28:	2500      	movs	r5, #0
 801ec2a:	462c      	mov	r4, r5
 801ec2c:	e7b0      	b.n	801eb90 <__gethex+0x68>
 801ec2e:	2c00      	cmp	r4, #0
 801ec30:	d1c7      	bne.n	801ebc2 <__gethex+0x9a>
 801ec32:	4627      	mov	r7, r4
 801ec34:	e7c7      	b.n	801ebc6 <__gethex+0x9e>
 801ec36:	464e      	mov	r6, r9
 801ec38:	462f      	mov	r7, r5
 801ec3a:	2501      	movs	r5, #1
 801ec3c:	e7c3      	b.n	801ebc6 <__gethex+0x9e>
 801ec3e:	2400      	movs	r4, #0
 801ec40:	1cb1      	adds	r1, r6, #2
 801ec42:	e7cc      	b.n	801ebde <__gethex+0xb6>
 801ec44:	2401      	movs	r4, #1
 801ec46:	e7fb      	b.n	801ec40 <__gethex+0x118>
 801ec48:	fb03 0002 	mla	r0, r3, r2, r0
 801ec4c:	e7ce      	b.n	801ebec <__gethex+0xc4>
 801ec4e:	4631      	mov	r1, r6
 801ec50:	e7de      	b.n	801ec10 <__gethex+0xe8>
 801ec52:	eba6 0309 	sub.w	r3, r6, r9
 801ec56:	3b01      	subs	r3, #1
 801ec58:	4629      	mov	r1, r5
 801ec5a:	2b07      	cmp	r3, #7
 801ec5c:	dc0a      	bgt.n	801ec74 <__gethex+0x14c>
 801ec5e:	9801      	ldr	r0, [sp, #4]
 801ec60:	f000 fa46 	bl	801f0f0 <_Balloc>
 801ec64:	4604      	mov	r4, r0
 801ec66:	b940      	cbnz	r0, 801ec7a <__gethex+0x152>
 801ec68:	4b5c      	ldr	r3, [pc, #368]	@ (801eddc <__gethex+0x2b4>)
 801ec6a:	4602      	mov	r2, r0
 801ec6c:	21e4      	movs	r1, #228	@ 0xe4
 801ec6e:	485c      	ldr	r0, [pc, #368]	@ (801ede0 <__gethex+0x2b8>)
 801ec70:	f7fe fd0c 	bl	801d68c <__assert_func>
 801ec74:	3101      	adds	r1, #1
 801ec76:	105b      	asrs	r3, r3, #1
 801ec78:	e7ef      	b.n	801ec5a <__gethex+0x132>
 801ec7a:	f100 0a14 	add.w	sl, r0, #20
 801ec7e:	2300      	movs	r3, #0
 801ec80:	4655      	mov	r5, sl
 801ec82:	469b      	mov	fp, r3
 801ec84:	45b1      	cmp	r9, r6
 801ec86:	d337      	bcc.n	801ecf8 <__gethex+0x1d0>
 801ec88:	f845 bb04 	str.w	fp, [r5], #4
 801ec8c:	eba5 050a 	sub.w	r5, r5, sl
 801ec90:	10ad      	asrs	r5, r5, #2
 801ec92:	6125      	str	r5, [r4, #16]
 801ec94:	4658      	mov	r0, fp
 801ec96:	f000 fb1d 	bl	801f2d4 <__hi0bits>
 801ec9a:	016d      	lsls	r5, r5, #5
 801ec9c:	f8d8 6000 	ldr.w	r6, [r8]
 801eca0:	1a2d      	subs	r5, r5, r0
 801eca2:	42b5      	cmp	r5, r6
 801eca4:	dd54      	ble.n	801ed50 <__gethex+0x228>
 801eca6:	1bad      	subs	r5, r5, r6
 801eca8:	4629      	mov	r1, r5
 801ecaa:	4620      	mov	r0, r4
 801ecac:	f000 feb1 	bl	801fa12 <__any_on>
 801ecb0:	4681      	mov	r9, r0
 801ecb2:	b178      	cbz	r0, 801ecd4 <__gethex+0x1ac>
 801ecb4:	1e6b      	subs	r3, r5, #1
 801ecb6:	1159      	asrs	r1, r3, #5
 801ecb8:	f003 021f 	and.w	r2, r3, #31
 801ecbc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ecc0:	f04f 0901 	mov.w	r9, #1
 801ecc4:	fa09 f202 	lsl.w	r2, r9, r2
 801ecc8:	420a      	tst	r2, r1
 801ecca:	d003      	beq.n	801ecd4 <__gethex+0x1ac>
 801eccc:	454b      	cmp	r3, r9
 801ecce:	dc36      	bgt.n	801ed3e <__gethex+0x216>
 801ecd0:	f04f 0902 	mov.w	r9, #2
 801ecd4:	4629      	mov	r1, r5
 801ecd6:	4620      	mov	r0, r4
 801ecd8:	f7ff febe 	bl	801ea58 <rshift>
 801ecdc:	442f      	add	r7, r5
 801ecde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ece2:	42bb      	cmp	r3, r7
 801ece4:	da42      	bge.n	801ed6c <__gethex+0x244>
 801ece6:	9801      	ldr	r0, [sp, #4]
 801ece8:	4621      	mov	r1, r4
 801ecea:	f000 fa41 	bl	801f170 <_Bfree>
 801ecee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ecf0:	2300      	movs	r3, #0
 801ecf2:	6013      	str	r3, [r2, #0]
 801ecf4:	25a3      	movs	r5, #163	@ 0xa3
 801ecf6:	e793      	b.n	801ec20 <__gethex+0xf8>
 801ecf8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801ecfc:	2a2e      	cmp	r2, #46	@ 0x2e
 801ecfe:	d012      	beq.n	801ed26 <__gethex+0x1fe>
 801ed00:	2b20      	cmp	r3, #32
 801ed02:	d104      	bne.n	801ed0e <__gethex+0x1e6>
 801ed04:	f845 bb04 	str.w	fp, [r5], #4
 801ed08:	f04f 0b00 	mov.w	fp, #0
 801ed0c:	465b      	mov	r3, fp
 801ed0e:	7830      	ldrb	r0, [r6, #0]
 801ed10:	9303      	str	r3, [sp, #12]
 801ed12:	f7ff fef3 	bl	801eafc <__hexdig_fun>
 801ed16:	9b03      	ldr	r3, [sp, #12]
 801ed18:	f000 000f 	and.w	r0, r0, #15
 801ed1c:	4098      	lsls	r0, r3
 801ed1e:	ea4b 0b00 	orr.w	fp, fp, r0
 801ed22:	3304      	adds	r3, #4
 801ed24:	e7ae      	b.n	801ec84 <__gethex+0x15c>
 801ed26:	45b1      	cmp	r9, r6
 801ed28:	d8ea      	bhi.n	801ed00 <__gethex+0x1d8>
 801ed2a:	492b      	ldr	r1, [pc, #172]	@ (801edd8 <__gethex+0x2b0>)
 801ed2c:	9303      	str	r3, [sp, #12]
 801ed2e:	2201      	movs	r2, #1
 801ed30:	4630      	mov	r0, r6
 801ed32:	f7ff fd5f 	bl	801e7f4 <strncmp>
 801ed36:	9b03      	ldr	r3, [sp, #12]
 801ed38:	2800      	cmp	r0, #0
 801ed3a:	d1e1      	bne.n	801ed00 <__gethex+0x1d8>
 801ed3c:	e7a2      	b.n	801ec84 <__gethex+0x15c>
 801ed3e:	1ea9      	subs	r1, r5, #2
 801ed40:	4620      	mov	r0, r4
 801ed42:	f000 fe66 	bl	801fa12 <__any_on>
 801ed46:	2800      	cmp	r0, #0
 801ed48:	d0c2      	beq.n	801ecd0 <__gethex+0x1a8>
 801ed4a:	f04f 0903 	mov.w	r9, #3
 801ed4e:	e7c1      	b.n	801ecd4 <__gethex+0x1ac>
 801ed50:	da09      	bge.n	801ed66 <__gethex+0x23e>
 801ed52:	1b75      	subs	r5, r6, r5
 801ed54:	4621      	mov	r1, r4
 801ed56:	9801      	ldr	r0, [sp, #4]
 801ed58:	462a      	mov	r2, r5
 801ed5a:	f000 fc21 	bl	801f5a0 <__lshift>
 801ed5e:	1b7f      	subs	r7, r7, r5
 801ed60:	4604      	mov	r4, r0
 801ed62:	f100 0a14 	add.w	sl, r0, #20
 801ed66:	f04f 0900 	mov.w	r9, #0
 801ed6a:	e7b8      	b.n	801ecde <__gethex+0x1b6>
 801ed6c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ed70:	42bd      	cmp	r5, r7
 801ed72:	dd6f      	ble.n	801ee54 <__gethex+0x32c>
 801ed74:	1bed      	subs	r5, r5, r7
 801ed76:	42ae      	cmp	r6, r5
 801ed78:	dc34      	bgt.n	801ede4 <__gethex+0x2bc>
 801ed7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ed7e:	2b02      	cmp	r3, #2
 801ed80:	d022      	beq.n	801edc8 <__gethex+0x2a0>
 801ed82:	2b03      	cmp	r3, #3
 801ed84:	d024      	beq.n	801edd0 <__gethex+0x2a8>
 801ed86:	2b01      	cmp	r3, #1
 801ed88:	d115      	bne.n	801edb6 <__gethex+0x28e>
 801ed8a:	42ae      	cmp	r6, r5
 801ed8c:	d113      	bne.n	801edb6 <__gethex+0x28e>
 801ed8e:	2e01      	cmp	r6, #1
 801ed90:	d10b      	bne.n	801edaa <__gethex+0x282>
 801ed92:	9a02      	ldr	r2, [sp, #8]
 801ed94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ed98:	6013      	str	r3, [r2, #0]
 801ed9a:	2301      	movs	r3, #1
 801ed9c:	6123      	str	r3, [r4, #16]
 801ed9e:	f8ca 3000 	str.w	r3, [sl]
 801eda2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eda4:	2562      	movs	r5, #98	@ 0x62
 801eda6:	601c      	str	r4, [r3, #0]
 801eda8:	e73a      	b.n	801ec20 <__gethex+0xf8>
 801edaa:	1e71      	subs	r1, r6, #1
 801edac:	4620      	mov	r0, r4
 801edae:	f000 fe30 	bl	801fa12 <__any_on>
 801edb2:	2800      	cmp	r0, #0
 801edb4:	d1ed      	bne.n	801ed92 <__gethex+0x26a>
 801edb6:	9801      	ldr	r0, [sp, #4]
 801edb8:	4621      	mov	r1, r4
 801edba:	f000 f9d9 	bl	801f170 <_Bfree>
 801edbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801edc0:	2300      	movs	r3, #0
 801edc2:	6013      	str	r3, [r2, #0]
 801edc4:	2550      	movs	r5, #80	@ 0x50
 801edc6:	e72b      	b.n	801ec20 <__gethex+0xf8>
 801edc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d1f3      	bne.n	801edb6 <__gethex+0x28e>
 801edce:	e7e0      	b.n	801ed92 <__gethex+0x26a>
 801edd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d1dd      	bne.n	801ed92 <__gethex+0x26a>
 801edd6:	e7ee      	b.n	801edb6 <__gethex+0x28e>
 801edd8:	0802967c 	.word	0x0802967c
 801eddc:	080297e9 	.word	0x080297e9
 801ede0:	080297fa 	.word	0x080297fa
 801ede4:	1e6f      	subs	r7, r5, #1
 801ede6:	f1b9 0f00 	cmp.w	r9, #0
 801edea:	d130      	bne.n	801ee4e <__gethex+0x326>
 801edec:	b127      	cbz	r7, 801edf8 <__gethex+0x2d0>
 801edee:	4639      	mov	r1, r7
 801edf0:	4620      	mov	r0, r4
 801edf2:	f000 fe0e 	bl	801fa12 <__any_on>
 801edf6:	4681      	mov	r9, r0
 801edf8:	117a      	asrs	r2, r7, #5
 801edfa:	2301      	movs	r3, #1
 801edfc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ee00:	f007 071f 	and.w	r7, r7, #31
 801ee04:	40bb      	lsls	r3, r7
 801ee06:	4213      	tst	r3, r2
 801ee08:	4629      	mov	r1, r5
 801ee0a:	4620      	mov	r0, r4
 801ee0c:	bf18      	it	ne
 801ee0e:	f049 0902 	orrne.w	r9, r9, #2
 801ee12:	f7ff fe21 	bl	801ea58 <rshift>
 801ee16:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801ee1a:	1b76      	subs	r6, r6, r5
 801ee1c:	2502      	movs	r5, #2
 801ee1e:	f1b9 0f00 	cmp.w	r9, #0
 801ee22:	d047      	beq.n	801eeb4 <__gethex+0x38c>
 801ee24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ee28:	2b02      	cmp	r3, #2
 801ee2a:	d015      	beq.n	801ee58 <__gethex+0x330>
 801ee2c:	2b03      	cmp	r3, #3
 801ee2e:	d017      	beq.n	801ee60 <__gethex+0x338>
 801ee30:	2b01      	cmp	r3, #1
 801ee32:	d109      	bne.n	801ee48 <__gethex+0x320>
 801ee34:	f019 0f02 	tst.w	r9, #2
 801ee38:	d006      	beq.n	801ee48 <__gethex+0x320>
 801ee3a:	f8da 3000 	ldr.w	r3, [sl]
 801ee3e:	ea49 0903 	orr.w	r9, r9, r3
 801ee42:	f019 0f01 	tst.w	r9, #1
 801ee46:	d10e      	bne.n	801ee66 <__gethex+0x33e>
 801ee48:	f045 0510 	orr.w	r5, r5, #16
 801ee4c:	e032      	b.n	801eeb4 <__gethex+0x38c>
 801ee4e:	f04f 0901 	mov.w	r9, #1
 801ee52:	e7d1      	b.n	801edf8 <__gethex+0x2d0>
 801ee54:	2501      	movs	r5, #1
 801ee56:	e7e2      	b.n	801ee1e <__gethex+0x2f6>
 801ee58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ee5a:	f1c3 0301 	rsb	r3, r3, #1
 801ee5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ee60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d0f0      	beq.n	801ee48 <__gethex+0x320>
 801ee66:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ee6a:	f104 0314 	add.w	r3, r4, #20
 801ee6e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ee72:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ee76:	f04f 0c00 	mov.w	ip, #0
 801ee7a:	4618      	mov	r0, r3
 801ee7c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee80:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ee84:	d01b      	beq.n	801eebe <__gethex+0x396>
 801ee86:	3201      	adds	r2, #1
 801ee88:	6002      	str	r2, [r0, #0]
 801ee8a:	2d02      	cmp	r5, #2
 801ee8c:	f104 0314 	add.w	r3, r4, #20
 801ee90:	d13c      	bne.n	801ef0c <__gethex+0x3e4>
 801ee92:	f8d8 2000 	ldr.w	r2, [r8]
 801ee96:	3a01      	subs	r2, #1
 801ee98:	42b2      	cmp	r2, r6
 801ee9a:	d109      	bne.n	801eeb0 <__gethex+0x388>
 801ee9c:	1171      	asrs	r1, r6, #5
 801ee9e:	2201      	movs	r2, #1
 801eea0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801eea4:	f006 061f 	and.w	r6, r6, #31
 801eea8:	fa02 f606 	lsl.w	r6, r2, r6
 801eeac:	421e      	tst	r6, r3
 801eeae:	d13a      	bne.n	801ef26 <__gethex+0x3fe>
 801eeb0:	f045 0520 	orr.w	r5, r5, #32
 801eeb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eeb6:	601c      	str	r4, [r3, #0]
 801eeb8:	9b02      	ldr	r3, [sp, #8]
 801eeba:	601f      	str	r7, [r3, #0]
 801eebc:	e6b0      	b.n	801ec20 <__gethex+0xf8>
 801eebe:	4299      	cmp	r1, r3
 801eec0:	f843 cc04 	str.w	ip, [r3, #-4]
 801eec4:	d8d9      	bhi.n	801ee7a <__gethex+0x352>
 801eec6:	68a3      	ldr	r3, [r4, #8]
 801eec8:	459b      	cmp	fp, r3
 801eeca:	db17      	blt.n	801eefc <__gethex+0x3d4>
 801eecc:	6861      	ldr	r1, [r4, #4]
 801eece:	9801      	ldr	r0, [sp, #4]
 801eed0:	3101      	adds	r1, #1
 801eed2:	f000 f90d 	bl	801f0f0 <_Balloc>
 801eed6:	4681      	mov	r9, r0
 801eed8:	b918      	cbnz	r0, 801eee2 <__gethex+0x3ba>
 801eeda:	4b1a      	ldr	r3, [pc, #104]	@ (801ef44 <__gethex+0x41c>)
 801eedc:	4602      	mov	r2, r0
 801eede:	2184      	movs	r1, #132	@ 0x84
 801eee0:	e6c5      	b.n	801ec6e <__gethex+0x146>
 801eee2:	6922      	ldr	r2, [r4, #16]
 801eee4:	3202      	adds	r2, #2
 801eee6:	f104 010c 	add.w	r1, r4, #12
 801eeea:	0092      	lsls	r2, r2, #2
 801eeec:	300c      	adds	r0, #12
 801eeee:	f7ff fd5a 	bl	801e9a6 <memcpy>
 801eef2:	4621      	mov	r1, r4
 801eef4:	9801      	ldr	r0, [sp, #4]
 801eef6:	f000 f93b 	bl	801f170 <_Bfree>
 801eefa:	464c      	mov	r4, r9
 801eefc:	6923      	ldr	r3, [r4, #16]
 801eefe:	1c5a      	adds	r2, r3, #1
 801ef00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ef04:	6122      	str	r2, [r4, #16]
 801ef06:	2201      	movs	r2, #1
 801ef08:	615a      	str	r2, [r3, #20]
 801ef0a:	e7be      	b.n	801ee8a <__gethex+0x362>
 801ef0c:	6922      	ldr	r2, [r4, #16]
 801ef0e:	455a      	cmp	r2, fp
 801ef10:	dd0b      	ble.n	801ef2a <__gethex+0x402>
 801ef12:	2101      	movs	r1, #1
 801ef14:	4620      	mov	r0, r4
 801ef16:	f7ff fd9f 	bl	801ea58 <rshift>
 801ef1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ef1e:	3701      	adds	r7, #1
 801ef20:	42bb      	cmp	r3, r7
 801ef22:	f6ff aee0 	blt.w	801ece6 <__gethex+0x1be>
 801ef26:	2501      	movs	r5, #1
 801ef28:	e7c2      	b.n	801eeb0 <__gethex+0x388>
 801ef2a:	f016 061f 	ands.w	r6, r6, #31
 801ef2e:	d0fa      	beq.n	801ef26 <__gethex+0x3fe>
 801ef30:	4453      	add	r3, sl
 801ef32:	f1c6 0620 	rsb	r6, r6, #32
 801ef36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ef3a:	f000 f9cb 	bl	801f2d4 <__hi0bits>
 801ef3e:	42b0      	cmp	r0, r6
 801ef40:	dbe7      	blt.n	801ef12 <__gethex+0x3ea>
 801ef42:	e7f0      	b.n	801ef26 <__gethex+0x3fe>
 801ef44:	080297e9 	.word	0x080297e9

0801ef48 <L_shift>:
 801ef48:	f1c2 0208 	rsb	r2, r2, #8
 801ef4c:	0092      	lsls	r2, r2, #2
 801ef4e:	b570      	push	{r4, r5, r6, lr}
 801ef50:	f1c2 0620 	rsb	r6, r2, #32
 801ef54:	6843      	ldr	r3, [r0, #4]
 801ef56:	6804      	ldr	r4, [r0, #0]
 801ef58:	fa03 f506 	lsl.w	r5, r3, r6
 801ef5c:	432c      	orrs	r4, r5
 801ef5e:	40d3      	lsrs	r3, r2
 801ef60:	6004      	str	r4, [r0, #0]
 801ef62:	f840 3f04 	str.w	r3, [r0, #4]!
 801ef66:	4288      	cmp	r0, r1
 801ef68:	d3f4      	bcc.n	801ef54 <L_shift+0xc>
 801ef6a:	bd70      	pop	{r4, r5, r6, pc}

0801ef6c <__match>:
 801ef6c:	b530      	push	{r4, r5, lr}
 801ef6e:	6803      	ldr	r3, [r0, #0]
 801ef70:	3301      	adds	r3, #1
 801ef72:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ef76:	b914      	cbnz	r4, 801ef7e <__match+0x12>
 801ef78:	6003      	str	r3, [r0, #0]
 801ef7a:	2001      	movs	r0, #1
 801ef7c:	bd30      	pop	{r4, r5, pc}
 801ef7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef82:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801ef86:	2d19      	cmp	r5, #25
 801ef88:	bf98      	it	ls
 801ef8a:	3220      	addls	r2, #32
 801ef8c:	42a2      	cmp	r2, r4
 801ef8e:	d0f0      	beq.n	801ef72 <__match+0x6>
 801ef90:	2000      	movs	r0, #0
 801ef92:	e7f3      	b.n	801ef7c <__match+0x10>

0801ef94 <__hexnan>:
 801ef94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef98:	680b      	ldr	r3, [r1, #0]
 801ef9a:	6801      	ldr	r1, [r0, #0]
 801ef9c:	115e      	asrs	r6, r3, #5
 801ef9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801efa2:	f013 031f 	ands.w	r3, r3, #31
 801efa6:	b087      	sub	sp, #28
 801efa8:	bf18      	it	ne
 801efaa:	3604      	addne	r6, #4
 801efac:	2500      	movs	r5, #0
 801efae:	1f37      	subs	r7, r6, #4
 801efb0:	4682      	mov	sl, r0
 801efb2:	4690      	mov	r8, r2
 801efb4:	9301      	str	r3, [sp, #4]
 801efb6:	f846 5c04 	str.w	r5, [r6, #-4]
 801efba:	46b9      	mov	r9, r7
 801efbc:	463c      	mov	r4, r7
 801efbe:	9502      	str	r5, [sp, #8]
 801efc0:	46ab      	mov	fp, r5
 801efc2:	784a      	ldrb	r2, [r1, #1]
 801efc4:	1c4b      	adds	r3, r1, #1
 801efc6:	9303      	str	r3, [sp, #12]
 801efc8:	b342      	cbz	r2, 801f01c <__hexnan+0x88>
 801efca:	4610      	mov	r0, r2
 801efcc:	9105      	str	r1, [sp, #20]
 801efce:	9204      	str	r2, [sp, #16]
 801efd0:	f7ff fd94 	bl	801eafc <__hexdig_fun>
 801efd4:	2800      	cmp	r0, #0
 801efd6:	d151      	bne.n	801f07c <__hexnan+0xe8>
 801efd8:	9a04      	ldr	r2, [sp, #16]
 801efda:	9905      	ldr	r1, [sp, #20]
 801efdc:	2a20      	cmp	r2, #32
 801efde:	d818      	bhi.n	801f012 <__hexnan+0x7e>
 801efe0:	9b02      	ldr	r3, [sp, #8]
 801efe2:	459b      	cmp	fp, r3
 801efe4:	dd13      	ble.n	801f00e <__hexnan+0x7a>
 801efe6:	454c      	cmp	r4, r9
 801efe8:	d206      	bcs.n	801eff8 <__hexnan+0x64>
 801efea:	2d07      	cmp	r5, #7
 801efec:	dc04      	bgt.n	801eff8 <__hexnan+0x64>
 801efee:	462a      	mov	r2, r5
 801eff0:	4649      	mov	r1, r9
 801eff2:	4620      	mov	r0, r4
 801eff4:	f7ff ffa8 	bl	801ef48 <L_shift>
 801eff8:	4544      	cmp	r4, r8
 801effa:	d952      	bls.n	801f0a2 <__hexnan+0x10e>
 801effc:	2300      	movs	r3, #0
 801effe:	f1a4 0904 	sub.w	r9, r4, #4
 801f002:	f844 3c04 	str.w	r3, [r4, #-4]
 801f006:	f8cd b008 	str.w	fp, [sp, #8]
 801f00a:	464c      	mov	r4, r9
 801f00c:	461d      	mov	r5, r3
 801f00e:	9903      	ldr	r1, [sp, #12]
 801f010:	e7d7      	b.n	801efc2 <__hexnan+0x2e>
 801f012:	2a29      	cmp	r2, #41	@ 0x29
 801f014:	d157      	bne.n	801f0c6 <__hexnan+0x132>
 801f016:	3102      	adds	r1, #2
 801f018:	f8ca 1000 	str.w	r1, [sl]
 801f01c:	f1bb 0f00 	cmp.w	fp, #0
 801f020:	d051      	beq.n	801f0c6 <__hexnan+0x132>
 801f022:	454c      	cmp	r4, r9
 801f024:	d206      	bcs.n	801f034 <__hexnan+0xa0>
 801f026:	2d07      	cmp	r5, #7
 801f028:	dc04      	bgt.n	801f034 <__hexnan+0xa0>
 801f02a:	462a      	mov	r2, r5
 801f02c:	4649      	mov	r1, r9
 801f02e:	4620      	mov	r0, r4
 801f030:	f7ff ff8a 	bl	801ef48 <L_shift>
 801f034:	4544      	cmp	r4, r8
 801f036:	d936      	bls.n	801f0a6 <__hexnan+0x112>
 801f038:	f1a8 0204 	sub.w	r2, r8, #4
 801f03c:	4623      	mov	r3, r4
 801f03e:	f853 1b04 	ldr.w	r1, [r3], #4
 801f042:	f842 1f04 	str.w	r1, [r2, #4]!
 801f046:	429f      	cmp	r7, r3
 801f048:	d2f9      	bcs.n	801f03e <__hexnan+0xaa>
 801f04a:	1b3b      	subs	r3, r7, r4
 801f04c:	f023 0303 	bic.w	r3, r3, #3
 801f050:	3304      	adds	r3, #4
 801f052:	3401      	adds	r4, #1
 801f054:	3e03      	subs	r6, #3
 801f056:	42b4      	cmp	r4, r6
 801f058:	bf88      	it	hi
 801f05a:	2304      	movhi	r3, #4
 801f05c:	4443      	add	r3, r8
 801f05e:	2200      	movs	r2, #0
 801f060:	f843 2b04 	str.w	r2, [r3], #4
 801f064:	429f      	cmp	r7, r3
 801f066:	d2fb      	bcs.n	801f060 <__hexnan+0xcc>
 801f068:	683b      	ldr	r3, [r7, #0]
 801f06a:	b91b      	cbnz	r3, 801f074 <__hexnan+0xe0>
 801f06c:	4547      	cmp	r7, r8
 801f06e:	d128      	bne.n	801f0c2 <__hexnan+0x12e>
 801f070:	2301      	movs	r3, #1
 801f072:	603b      	str	r3, [r7, #0]
 801f074:	2005      	movs	r0, #5
 801f076:	b007      	add	sp, #28
 801f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f07c:	3501      	adds	r5, #1
 801f07e:	2d08      	cmp	r5, #8
 801f080:	f10b 0b01 	add.w	fp, fp, #1
 801f084:	dd06      	ble.n	801f094 <__hexnan+0x100>
 801f086:	4544      	cmp	r4, r8
 801f088:	d9c1      	bls.n	801f00e <__hexnan+0x7a>
 801f08a:	2300      	movs	r3, #0
 801f08c:	f844 3c04 	str.w	r3, [r4, #-4]
 801f090:	2501      	movs	r5, #1
 801f092:	3c04      	subs	r4, #4
 801f094:	6822      	ldr	r2, [r4, #0]
 801f096:	f000 000f 	and.w	r0, r0, #15
 801f09a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801f09e:	6020      	str	r0, [r4, #0]
 801f0a0:	e7b5      	b.n	801f00e <__hexnan+0x7a>
 801f0a2:	2508      	movs	r5, #8
 801f0a4:	e7b3      	b.n	801f00e <__hexnan+0x7a>
 801f0a6:	9b01      	ldr	r3, [sp, #4]
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	d0dd      	beq.n	801f068 <__hexnan+0xd4>
 801f0ac:	f1c3 0320 	rsb	r3, r3, #32
 801f0b0:	f04f 32ff 	mov.w	r2, #4294967295
 801f0b4:	40da      	lsrs	r2, r3
 801f0b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f0ba:	4013      	ands	r3, r2
 801f0bc:	f846 3c04 	str.w	r3, [r6, #-4]
 801f0c0:	e7d2      	b.n	801f068 <__hexnan+0xd4>
 801f0c2:	3f04      	subs	r7, #4
 801f0c4:	e7d0      	b.n	801f068 <__hexnan+0xd4>
 801f0c6:	2004      	movs	r0, #4
 801f0c8:	e7d5      	b.n	801f076 <__hexnan+0xe2>

0801f0ca <__ascii_mbtowc>:
 801f0ca:	b082      	sub	sp, #8
 801f0cc:	b901      	cbnz	r1, 801f0d0 <__ascii_mbtowc+0x6>
 801f0ce:	a901      	add	r1, sp, #4
 801f0d0:	b142      	cbz	r2, 801f0e4 <__ascii_mbtowc+0x1a>
 801f0d2:	b14b      	cbz	r3, 801f0e8 <__ascii_mbtowc+0x1e>
 801f0d4:	7813      	ldrb	r3, [r2, #0]
 801f0d6:	600b      	str	r3, [r1, #0]
 801f0d8:	7812      	ldrb	r2, [r2, #0]
 801f0da:	1e10      	subs	r0, r2, #0
 801f0dc:	bf18      	it	ne
 801f0de:	2001      	movne	r0, #1
 801f0e0:	b002      	add	sp, #8
 801f0e2:	4770      	bx	lr
 801f0e4:	4610      	mov	r0, r2
 801f0e6:	e7fb      	b.n	801f0e0 <__ascii_mbtowc+0x16>
 801f0e8:	f06f 0001 	mvn.w	r0, #1
 801f0ec:	e7f8      	b.n	801f0e0 <__ascii_mbtowc+0x16>
	...

0801f0f0 <_Balloc>:
 801f0f0:	b570      	push	{r4, r5, r6, lr}
 801f0f2:	69c6      	ldr	r6, [r0, #28]
 801f0f4:	4604      	mov	r4, r0
 801f0f6:	460d      	mov	r5, r1
 801f0f8:	b976      	cbnz	r6, 801f118 <_Balloc+0x28>
 801f0fa:	2010      	movs	r0, #16
 801f0fc:	f7fe fb04 	bl	801d708 <malloc>
 801f100:	4602      	mov	r2, r0
 801f102:	61e0      	str	r0, [r4, #28]
 801f104:	b920      	cbnz	r0, 801f110 <_Balloc+0x20>
 801f106:	4b18      	ldr	r3, [pc, #96]	@ (801f168 <_Balloc+0x78>)
 801f108:	4818      	ldr	r0, [pc, #96]	@ (801f16c <_Balloc+0x7c>)
 801f10a:	216b      	movs	r1, #107	@ 0x6b
 801f10c:	f7fe fabe 	bl	801d68c <__assert_func>
 801f110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f114:	6006      	str	r6, [r0, #0]
 801f116:	60c6      	str	r6, [r0, #12]
 801f118:	69e6      	ldr	r6, [r4, #28]
 801f11a:	68f3      	ldr	r3, [r6, #12]
 801f11c:	b183      	cbz	r3, 801f140 <_Balloc+0x50>
 801f11e:	69e3      	ldr	r3, [r4, #28]
 801f120:	68db      	ldr	r3, [r3, #12]
 801f122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f126:	b9b8      	cbnz	r0, 801f158 <_Balloc+0x68>
 801f128:	2101      	movs	r1, #1
 801f12a:	fa01 f605 	lsl.w	r6, r1, r5
 801f12e:	1d72      	adds	r2, r6, #5
 801f130:	0092      	lsls	r2, r2, #2
 801f132:	4620      	mov	r0, r4
 801f134:	f7fe fad4 	bl	801d6e0 <_calloc_r>
 801f138:	b160      	cbz	r0, 801f154 <_Balloc+0x64>
 801f13a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f13e:	e00e      	b.n	801f15e <_Balloc+0x6e>
 801f140:	2221      	movs	r2, #33	@ 0x21
 801f142:	2104      	movs	r1, #4
 801f144:	4620      	mov	r0, r4
 801f146:	f7fe facb 	bl	801d6e0 <_calloc_r>
 801f14a:	69e3      	ldr	r3, [r4, #28]
 801f14c:	60f0      	str	r0, [r6, #12]
 801f14e:	68db      	ldr	r3, [r3, #12]
 801f150:	2b00      	cmp	r3, #0
 801f152:	d1e4      	bne.n	801f11e <_Balloc+0x2e>
 801f154:	2000      	movs	r0, #0
 801f156:	bd70      	pop	{r4, r5, r6, pc}
 801f158:	6802      	ldr	r2, [r0, #0]
 801f15a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f15e:	2300      	movs	r3, #0
 801f160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f164:	e7f7      	b.n	801f156 <_Balloc+0x66>
 801f166:	bf00      	nop
 801f168:	0802985a 	.word	0x0802985a
 801f16c:	08029871 	.word	0x08029871

0801f170 <_Bfree>:
 801f170:	b570      	push	{r4, r5, r6, lr}
 801f172:	69c6      	ldr	r6, [r0, #28]
 801f174:	4605      	mov	r5, r0
 801f176:	460c      	mov	r4, r1
 801f178:	b976      	cbnz	r6, 801f198 <_Bfree+0x28>
 801f17a:	2010      	movs	r0, #16
 801f17c:	f7fe fac4 	bl	801d708 <malloc>
 801f180:	4602      	mov	r2, r0
 801f182:	61e8      	str	r0, [r5, #28]
 801f184:	b920      	cbnz	r0, 801f190 <_Bfree+0x20>
 801f186:	4b09      	ldr	r3, [pc, #36]	@ (801f1ac <_Bfree+0x3c>)
 801f188:	4809      	ldr	r0, [pc, #36]	@ (801f1b0 <_Bfree+0x40>)
 801f18a:	218f      	movs	r1, #143	@ 0x8f
 801f18c:	f7fe fa7e 	bl	801d68c <__assert_func>
 801f190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f194:	6006      	str	r6, [r0, #0]
 801f196:	60c6      	str	r6, [r0, #12]
 801f198:	b13c      	cbz	r4, 801f1aa <_Bfree+0x3a>
 801f19a:	69eb      	ldr	r3, [r5, #28]
 801f19c:	6862      	ldr	r2, [r4, #4]
 801f19e:	68db      	ldr	r3, [r3, #12]
 801f1a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f1a4:	6021      	str	r1, [r4, #0]
 801f1a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f1aa:	bd70      	pop	{r4, r5, r6, pc}
 801f1ac:	0802985a 	.word	0x0802985a
 801f1b0:	08029871 	.word	0x08029871

0801f1b4 <__multadd>:
 801f1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1b8:	690d      	ldr	r5, [r1, #16]
 801f1ba:	4607      	mov	r7, r0
 801f1bc:	460c      	mov	r4, r1
 801f1be:	461e      	mov	r6, r3
 801f1c0:	f101 0c14 	add.w	ip, r1, #20
 801f1c4:	2000      	movs	r0, #0
 801f1c6:	f8dc 3000 	ldr.w	r3, [ip]
 801f1ca:	b299      	uxth	r1, r3
 801f1cc:	fb02 6101 	mla	r1, r2, r1, r6
 801f1d0:	0c1e      	lsrs	r6, r3, #16
 801f1d2:	0c0b      	lsrs	r3, r1, #16
 801f1d4:	fb02 3306 	mla	r3, r2, r6, r3
 801f1d8:	b289      	uxth	r1, r1
 801f1da:	3001      	adds	r0, #1
 801f1dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f1e0:	4285      	cmp	r5, r0
 801f1e2:	f84c 1b04 	str.w	r1, [ip], #4
 801f1e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f1ea:	dcec      	bgt.n	801f1c6 <__multadd+0x12>
 801f1ec:	b30e      	cbz	r6, 801f232 <__multadd+0x7e>
 801f1ee:	68a3      	ldr	r3, [r4, #8]
 801f1f0:	42ab      	cmp	r3, r5
 801f1f2:	dc19      	bgt.n	801f228 <__multadd+0x74>
 801f1f4:	6861      	ldr	r1, [r4, #4]
 801f1f6:	4638      	mov	r0, r7
 801f1f8:	3101      	adds	r1, #1
 801f1fa:	f7ff ff79 	bl	801f0f0 <_Balloc>
 801f1fe:	4680      	mov	r8, r0
 801f200:	b928      	cbnz	r0, 801f20e <__multadd+0x5a>
 801f202:	4602      	mov	r2, r0
 801f204:	4b0c      	ldr	r3, [pc, #48]	@ (801f238 <__multadd+0x84>)
 801f206:	480d      	ldr	r0, [pc, #52]	@ (801f23c <__multadd+0x88>)
 801f208:	21ba      	movs	r1, #186	@ 0xba
 801f20a:	f7fe fa3f 	bl	801d68c <__assert_func>
 801f20e:	6922      	ldr	r2, [r4, #16]
 801f210:	3202      	adds	r2, #2
 801f212:	f104 010c 	add.w	r1, r4, #12
 801f216:	0092      	lsls	r2, r2, #2
 801f218:	300c      	adds	r0, #12
 801f21a:	f7ff fbc4 	bl	801e9a6 <memcpy>
 801f21e:	4621      	mov	r1, r4
 801f220:	4638      	mov	r0, r7
 801f222:	f7ff ffa5 	bl	801f170 <_Bfree>
 801f226:	4644      	mov	r4, r8
 801f228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f22c:	3501      	adds	r5, #1
 801f22e:	615e      	str	r6, [r3, #20]
 801f230:	6125      	str	r5, [r4, #16]
 801f232:	4620      	mov	r0, r4
 801f234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f238:	080297e9 	.word	0x080297e9
 801f23c:	08029871 	.word	0x08029871

0801f240 <__s2b>:
 801f240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f244:	460c      	mov	r4, r1
 801f246:	4615      	mov	r5, r2
 801f248:	461f      	mov	r7, r3
 801f24a:	2209      	movs	r2, #9
 801f24c:	3308      	adds	r3, #8
 801f24e:	4606      	mov	r6, r0
 801f250:	fb93 f3f2 	sdiv	r3, r3, r2
 801f254:	2100      	movs	r1, #0
 801f256:	2201      	movs	r2, #1
 801f258:	429a      	cmp	r2, r3
 801f25a:	db09      	blt.n	801f270 <__s2b+0x30>
 801f25c:	4630      	mov	r0, r6
 801f25e:	f7ff ff47 	bl	801f0f0 <_Balloc>
 801f262:	b940      	cbnz	r0, 801f276 <__s2b+0x36>
 801f264:	4602      	mov	r2, r0
 801f266:	4b19      	ldr	r3, [pc, #100]	@ (801f2cc <__s2b+0x8c>)
 801f268:	4819      	ldr	r0, [pc, #100]	@ (801f2d0 <__s2b+0x90>)
 801f26a:	21d3      	movs	r1, #211	@ 0xd3
 801f26c:	f7fe fa0e 	bl	801d68c <__assert_func>
 801f270:	0052      	lsls	r2, r2, #1
 801f272:	3101      	adds	r1, #1
 801f274:	e7f0      	b.n	801f258 <__s2b+0x18>
 801f276:	9b08      	ldr	r3, [sp, #32]
 801f278:	6143      	str	r3, [r0, #20]
 801f27a:	2d09      	cmp	r5, #9
 801f27c:	f04f 0301 	mov.w	r3, #1
 801f280:	6103      	str	r3, [r0, #16]
 801f282:	dd16      	ble.n	801f2b2 <__s2b+0x72>
 801f284:	f104 0909 	add.w	r9, r4, #9
 801f288:	46c8      	mov	r8, r9
 801f28a:	442c      	add	r4, r5
 801f28c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f290:	4601      	mov	r1, r0
 801f292:	3b30      	subs	r3, #48	@ 0x30
 801f294:	220a      	movs	r2, #10
 801f296:	4630      	mov	r0, r6
 801f298:	f7ff ff8c 	bl	801f1b4 <__multadd>
 801f29c:	45a0      	cmp	r8, r4
 801f29e:	d1f5      	bne.n	801f28c <__s2b+0x4c>
 801f2a0:	f1a5 0408 	sub.w	r4, r5, #8
 801f2a4:	444c      	add	r4, r9
 801f2a6:	1b2d      	subs	r5, r5, r4
 801f2a8:	1963      	adds	r3, r4, r5
 801f2aa:	42bb      	cmp	r3, r7
 801f2ac:	db04      	blt.n	801f2b8 <__s2b+0x78>
 801f2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f2b2:	340a      	adds	r4, #10
 801f2b4:	2509      	movs	r5, #9
 801f2b6:	e7f6      	b.n	801f2a6 <__s2b+0x66>
 801f2b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f2bc:	4601      	mov	r1, r0
 801f2be:	3b30      	subs	r3, #48	@ 0x30
 801f2c0:	220a      	movs	r2, #10
 801f2c2:	4630      	mov	r0, r6
 801f2c4:	f7ff ff76 	bl	801f1b4 <__multadd>
 801f2c8:	e7ee      	b.n	801f2a8 <__s2b+0x68>
 801f2ca:	bf00      	nop
 801f2cc:	080297e9 	.word	0x080297e9
 801f2d0:	08029871 	.word	0x08029871

0801f2d4 <__hi0bits>:
 801f2d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f2d8:	4603      	mov	r3, r0
 801f2da:	bf36      	itet	cc
 801f2dc:	0403      	lslcc	r3, r0, #16
 801f2de:	2000      	movcs	r0, #0
 801f2e0:	2010      	movcc	r0, #16
 801f2e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f2e6:	bf3c      	itt	cc
 801f2e8:	021b      	lslcc	r3, r3, #8
 801f2ea:	3008      	addcc	r0, #8
 801f2ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f2f0:	bf3c      	itt	cc
 801f2f2:	011b      	lslcc	r3, r3, #4
 801f2f4:	3004      	addcc	r0, #4
 801f2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f2fa:	bf3c      	itt	cc
 801f2fc:	009b      	lslcc	r3, r3, #2
 801f2fe:	3002      	addcc	r0, #2
 801f300:	2b00      	cmp	r3, #0
 801f302:	db05      	blt.n	801f310 <__hi0bits+0x3c>
 801f304:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f308:	f100 0001 	add.w	r0, r0, #1
 801f30c:	bf08      	it	eq
 801f30e:	2020      	moveq	r0, #32
 801f310:	4770      	bx	lr

0801f312 <__lo0bits>:
 801f312:	6803      	ldr	r3, [r0, #0]
 801f314:	4602      	mov	r2, r0
 801f316:	f013 0007 	ands.w	r0, r3, #7
 801f31a:	d00b      	beq.n	801f334 <__lo0bits+0x22>
 801f31c:	07d9      	lsls	r1, r3, #31
 801f31e:	d421      	bmi.n	801f364 <__lo0bits+0x52>
 801f320:	0798      	lsls	r0, r3, #30
 801f322:	bf49      	itett	mi
 801f324:	085b      	lsrmi	r3, r3, #1
 801f326:	089b      	lsrpl	r3, r3, #2
 801f328:	2001      	movmi	r0, #1
 801f32a:	6013      	strmi	r3, [r2, #0]
 801f32c:	bf5c      	itt	pl
 801f32e:	6013      	strpl	r3, [r2, #0]
 801f330:	2002      	movpl	r0, #2
 801f332:	4770      	bx	lr
 801f334:	b299      	uxth	r1, r3
 801f336:	b909      	cbnz	r1, 801f33c <__lo0bits+0x2a>
 801f338:	0c1b      	lsrs	r3, r3, #16
 801f33a:	2010      	movs	r0, #16
 801f33c:	b2d9      	uxtb	r1, r3
 801f33e:	b909      	cbnz	r1, 801f344 <__lo0bits+0x32>
 801f340:	3008      	adds	r0, #8
 801f342:	0a1b      	lsrs	r3, r3, #8
 801f344:	0719      	lsls	r1, r3, #28
 801f346:	bf04      	itt	eq
 801f348:	091b      	lsreq	r3, r3, #4
 801f34a:	3004      	addeq	r0, #4
 801f34c:	0799      	lsls	r1, r3, #30
 801f34e:	bf04      	itt	eq
 801f350:	089b      	lsreq	r3, r3, #2
 801f352:	3002      	addeq	r0, #2
 801f354:	07d9      	lsls	r1, r3, #31
 801f356:	d403      	bmi.n	801f360 <__lo0bits+0x4e>
 801f358:	085b      	lsrs	r3, r3, #1
 801f35a:	f100 0001 	add.w	r0, r0, #1
 801f35e:	d003      	beq.n	801f368 <__lo0bits+0x56>
 801f360:	6013      	str	r3, [r2, #0]
 801f362:	4770      	bx	lr
 801f364:	2000      	movs	r0, #0
 801f366:	4770      	bx	lr
 801f368:	2020      	movs	r0, #32
 801f36a:	4770      	bx	lr

0801f36c <__i2b>:
 801f36c:	b510      	push	{r4, lr}
 801f36e:	460c      	mov	r4, r1
 801f370:	2101      	movs	r1, #1
 801f372:	f7ff febd 	bl	801f0f0 <_Balloc>
 801f376:	4602      	mov	r2, r0
 801f378:	b928      	cbnz	r0, 801f386 <__i2b+0x1a>
 801f37a:	4b05      	ldr	r3, [pc, #20]	@ (801f390 <__i2b+0x24>)
 801f37c:	4805      	ldr	r0, [pc, #20]	@ (801f394 <__i2b+0x28>)
 801f37e:	f240 1145 	movw	r1, #325	@ 0x145
 801f382:	f7fe f983 	bl	801d68c <__assert_func>
 801f386:	2301      	movs	r3, #1
 801f388:	6144      	str	r4, [r0, #20]
 801f38a:	6103      	str	r3, [r0, #16]
 801f38c:	bd10      	pop	{r4, pc}
 801f38e:	bf00      	nop
 801f390:	080297e9 	.word	0x080297e9
 801f394:	08029871 	.word	0x08029871

0801f398 <__multiply>:
 801f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f39c:	4614      	mov	r4, r2
 801f39e:	690a      	ldr	r2, [r1, #16]
 801f3a0:	6923      	ldr	r3, [r4, #16]
 801f3a2:	429a      	cmp	r2, r3
 801f3a4:	bfa8      	it	ge
 801f3a6:	4623      	movge	r3, r4
 801f3a8:	460f      	mov	r7, r1
 801f3aa:	bfa4      	itt	ge
 801f3ac:	460c      	movge	r4, r1
 801f3ae:	461f      	movge	r7, r3
 801f3b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f3b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f3b8:	68a3      	ldr	r3, [r4, #8]
 801f3ba:	6861      	ldr	r1, [r4, #4]
 801f3bc:	eb0a 0609 	add.w	r6, sl, r9
 801f3c0:	42b3      	cmp	r3, r6
 801f3c2:	b085      	sub	sp, #20
 801f3c4:	bfb8      	it	lt
 801f3c6:	3101      	addlt	r1, #1
 801f3c8:	f7ff fe92 	bl	801f0f0 <_Balloc>
 801f3cc:	b930      	cbnz	r0, 801f3dc <__multiply+0x44>
 801f3ce:	4602      	mov	r2, r0
 801f3d0:	4b44      	ldr	r3, [pc, #272]	@ (801f4e4 <__multiply+0x14c>)
 801f3d2:	4845      	ldr	r0, [pc, #276]	@ (801f4e8 <__multiply+0x150>)
 801f3d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f3d8:	f7fe f958 	bl	801d68c <__assert_func>
 801f3dc:	f100 0514 	add.w	r5, r0, #20
 801f3e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f3e4:	462b      	mov	r3, r5
 801f3e6:	2200      	movs	r2, #0
 801f3e8:	4543      	cmp	r3, r8
 801f3ea:	d321      	bcc.n	801f430 <__multiply+0x98>
 801f3ec:	f107 0114 	add.w	r1, r7, #20
 801f3f0:	f104 0214 	add.w	r2, r4, #20
 801f3f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f3f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f3fc:	9302      	str	r3, [sp, #8]
 801f3fe:	1b13      	subs	r3, r2, r4
 801f400:	3b15      	subs	r3, #21
 801f402:	f023 0303 	bic.w	r3, r3, #3
 801f406:	3304      	adds	r3, #4
 801f408:	f104 0715 	add.w	r7, r4, #21
 801f40c:	42ba      	cmp	r2, r7
 801f40e:	bf38      	it	cc
 801f410:	2304      	movcc	r3, #4
 801f412:	9301      	str	r3, [sp, #4]
 801f414:	9b02      	ldr	r3, [sp, #8]
 801f416:	9103      	str	r1, [sp, #12]
 801f418:	428b      	cmp	r3, r1
 801f41a:	d80c      	bhi.n	801f436 <__multiply+0x9e>
 801f41c:	2e00      	cmp	r6, #0
 801f41e:	dd03      	ble.n	801f428 <__multiply+0x90>
 801f420:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f424:	2b00      	cmp	r3, #0
 801f426:	d05b      	beq.n	801f4e0 <__multiply+0x148>
 801f428:	6106      	str	r6, [r0, #16]
 801f42a:	b005      	add	sp, #20
 801f42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f430:	f843 2b04 	str.w	r2, [r3], #4
 801f434:	e7d8      	b.n	801f3e8 <__multiply+0x50>
 801f436:	f8b1 a000 	ldrh.w	sl, [r1]
 801f43a:	f1ba 0f00 	cmp.w	sl, #0
 801f43e:	d024      	beq.n	801f48a <__multiply+0xf2>
 801f440:	f104 0e14 	add.w	lr, r4, #20
 801f444:	46a9      	mov	r9, r5
 801f446:	f04f 0c00 	mov.w	ip, #0
 801f44a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f44e:	f8d9 3000 	ldr.w	r3, [r9]
 801f452:	fa1f fb87 	uxth.w	fp, r7
 801f456:	b29b      	uxth	r3, r3
 801f458:	fb0a 330b 	mla	r3, sl, fp, r3
 801f45c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f460:	f8d9 7000 	ldr.w	r7, [r9]
 801f464:	4463      	add	r3, ip
 801f466:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f46a:	fb0a c70b 	mla	r7, sl, fp, ip
 801f46e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f472:	b29b      	uxth	r3, r3
 801f474:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f478:	4572      	cmp	r2, lr
 801f47a:	f849 3b04 	str.w	r3, [r9], #4
 801f47e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f482:	d8e2      	bhi.n	801f44a <__multiply+0xb2>
 801f484:	9b01      	ldr	r3, [sp, #4]
 801f486:	f845 c003 	str.w	ip, [r5, r3]
 801f48a:	9b03      	ldr	r3, [sp, #12]
 801f48c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f490:	3104      	adds	r1, #4
 801f492:	f1b9 0f00 	cmp.w	r9, #0
 801f496:	d021      	beq.n	801f4dc <__multiply+0x144>
 801f498:	682b      	ldr	r3, [r5, #0]
 801f49a:	f104 0c14 	add.w	ip, r4, #20
 801f49e:	46ae      	mov	lr, r5
 801f4a0:	f04f 0a00 	mov.w	sl, #0
 801f4a4:	f8bc b000 	ldrh.w	fp, [ip]
 801f4a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f4ac:	fb09 770b 	mla	r7, r9, fp, r7
 801f4b0:	4457      	add	r7, sl
 801f4b2:	b29b      	uxth	r3, r3
 801f4b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f4b8:	f84e 3b04 	str.w	r3, [lr], #4
 801f4bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f4c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f4c4:	f8be 3000 	ldrh.w	r3, [lr]
 801f4c8:	fb09 330a 	mla	r3, r9, sl, r3
 801f4cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f4d0:	4562      	cmp	r2, ip
 801f4d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f4d6:	d8e5      	bhi.n	801f4a4 <__multiply+0x10c>
 801f4d8:	9f01      	ldr	r7, [sp, #4]
 801f4da:	51eb      	str	r3, [r5, r7]
 801f4dc:	3504      	adds	r5, #4
 801f4de:	e799      	b.n	801f414 <__multiply+0x7c>
 801f4e0:	3e01      	subs	r6, #1
 801f4e2:	e79b      	b.n	801f41c <__multiply+0x84>
 801f4e4:	080297e9 	.word	0x080297e9
 801f4e8:	08029871 	.word	0x08029871

0801f4ec <__pow5mult>:
 801f4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f4f0:	4615      	mov	r5, r2
 801f4f2:	f012 0203 	ands.w	r2, r2, #3
 801f4f6:	4607      	mov	r7, r0
 801f4f8:	460e      	mov	r6, r1
 801f4fa:	d007      	beq.n	801f50c <__pow5mult+0x20>
 801f4fc:	4c25      	ldr	r4, [pc, #148]	@ (801f594 <__pow5mult+0xa8>)
 801f4fe:	3a01      	subs	r2, #1
 801f500:	2300      	movs	r3, #0
 801f502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f506:	f7ff fe55 	bl	801f1b4 <__multadd>
 801f50a:	4606      	mov	r6, r0
 801f50c:	10ad      	asrs	r5, r5, #2
 801f50e:	d03d      	beq.n	801f58c <__pow5mult+0xa0>
 801f510:	69fc      	ldr	r4, [r7, #28]
 801f512:	b97c      	cbnz	r4, 801f534 <__pow5mult+0x48>
 801f514:	2010      	movs	r0, #16
 801f516:	f7fe f8f7 	bl	801d708 <malloc>
 801f51a:	4602      	mov	r2, r0
 801f51c:	61f8      	str	r0, [r7, #28]
 801f51e:	b928      	cbnz	r0, 801f52c <__pow5mult+0x40>
 801f520:	4b1d      	ldr	r3, [pc, #116]	@ (801f598 <__pow5mult+0xac>)
 801f522:	481e      	ldr	r0, [pc, #120]	@ (801f59c <__pow5mult+0xb0>)
 801f524:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801f528:	f7fe f8b0 	bl	801d68c <__assert_func>
 801f52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f530:	6004      	str	r4, [r0, #0]
 801f532:	60c4      	str	r4, [r0, #12]
 801f534:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801f538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f53c:	b94c      	cbnz	r4, 801f552 <__pow5mult+0x66>
 801f53e:	f240 2171 	movw	r1, #625	@ 0x271
 801f542:	4638      	mov	r0, r7
 801f544:	f7ff ff12 	bl	801f36c <__i2b>
 801f548:	2300      	movs	r3, #0
 801f54a:	f8c8 0008 	str.w	r0, [r8, #8]
 801f54e:	4604      	mov	r4, r0
 801f550:	6003      	str	r3, [r0, #0]
 801f552:	f04f 0900 	mov.w	r9, #0
 801f556:	07eb      	lsls	r3, r5, #31
 801f558:	d50a      	bpl.n	801f570 <__pow5mult+0x84>
 801f55a:	4631      	mov	r1, r6
 801f55c:	4622      	mov	r2, r4
 801f55e:	4638      	mov	r0, r7
 801f560:	f7ff ff1a 	bl	801f398 <__multiply>
 801f564:	4631      	mov	r1, r6
 801f566:	4680      	mov	r8, r0
 801f568:	4638      	mov	r0, r7
 801f56a:	f7ff fe01 	bl	801f170 <_Bfree>
 801f56e:	4646      	mov	r6, r8
 801f570:	106d      	asrs	r5, r5, #1
 801f572:	d00b      	beq.n	801f58c <__pow5mult+0xa0>
 801f574:	6820      	ldr	r0, [r4, #0]
 801f576:	b938      	cbnz	r0, 801f588 <__pow5mult+0x9c>
 801f578:	4622      	mov	r2, r4
 801f57a:	4621      	mov	r1, r4
 801f57c:	4638      	mov	r0, r7
 801f57e:	f7ff ff0b 	bl	801f398 <__multiply>
 801f582:	6020      	str	r0, [r4, #0]
 801f584:	f8c0 9000 	str.w	r9, [r0]
 801f588:	4604      	mov	r4, r0
 801f58a:	e7e4      	b.n	801f556 <__pow5mult+0x6a>
 801f58c:	4630      	mov	r0, r6
 801f58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f592:	bf00      	nop
 801f594:	080298cc 	.word	0x080298cc
 801f598:	0802985a 	.word	0x0802985a
 801f59c:	08029871 	.word	0x08029871

0801f5a0 <__lshift>:
 801f5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5a4:	460c      	mov	r4, r1
 801f5a6:	6849      	ldr	r1, [r1, #4]
 801f5a8:	6923      	ldr	r3, [r4, #16]
 801f5aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f5ae:	68a3      	ldr	r3, [r4, #8]
 801f5b0:	4607      	mov	r7, r0
 801f5b2:	4691      	mov	r9, r2
 801f5b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f5b8:	f108 0601 	add.w	r6, r8, #1
 801f5bc:	42b3      	cmp	r3, r6
 801f5be:	db0b      	blt.n	801f5d8 <__lshift+0x38>
 801f5c0:	4638      	mov	r0, r7
 801f5c2:	f7ff fd95 	bl	801f0f0 <_Balloc>
 801f5c6:	4605      	mov	r5, r0
 801f5c8:	b948      	cbnz	r0, 801f5de <__lshift+0x3e>
 801f5ca:	4602      	mov	r2, r0
 801f5cc:	4b28      	ldr	r3, [pc, #160]	@ (801f670 <__lshift+0xd0>)
 801f5ce:	4829      	ldr	r0, [pc, #164]	@ (801f674 <__lshift+0xd4>)
 801f5d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f5d4:	f7fe f85a 	bl	801d68c <__assert_func>
 801f5d8:	3101      	adds	r1, #1
 801f5da:	005b      	lsls	r3, r3, #1
 801f5dc:	e7ee      	b.n	801f5bc <__lshift+0x1c>
 801f5de:	2300      	movs	r3, #0
 801f5e0:	f100 0114 	add.w	r1, r0, #20
 801f5e4:	f100 0210 	add.w	r2, r0, #16
 801f5e8:	4618      	mov	r0, r3
 801f5ea:	4553      	cmp	r3, sl
 801f5ec:	db33      	blt.n	801f656 <__lshift+0xb6>
 801f5ee:	6920      	ldr	r0, [r4, #16]
 801f5f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f5f4:	f104 0314 	add.w	r3, r4, #20
 801f5f8:	f019 091f 	ands.w	r9, r9, #31
 801f5fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f600:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f604:	d02b      	beq.n	801f65e <__lshift+0xbe>
 801f606:	f1c9 0e20 	rsb	lr, r9, #32
 801f60a:	468a      	mov	sl, r1
 801f60c:	2200      	movs	r2, #0
 801f60e:	6818      	ldr	r0, [r3, #0]
 801f610:	fa00 f009 	lsl.w	r0, r0, r9
 801f614:	4310      	orrs	r0, r2
 801f616:	f84a 0b04 	str.w	r0, [sl], #4
 801f61a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f61e:	459c      	cmp	ip, r3
 801f620:	fa22 f20e 	lsr.w	r2, r2, lr
 801f624:	d8f3      	bhi.n	801f60e <__lshift+0x6e>
 801f626:	ebac 0304 	sub.w	r3, ip, r4
 801f62a:	3b15      	subs	r3, #21
 801f62c:	f023 0303 	bic.w	r3, r3, #3
 801f630:	3304      	adds	r3, #4
 801f632:	f104 0015 	add.w	r0, r4, #21
 801f636:	4584      	cmp	ip, r0
 801f638:	bf38      	it	cc
 801f63a:	2304      	movcc	r3, #4
 801f63c:	50ca      	str	r2, [r1, r3]
 801f63e:	b10a      	cbz	r2, 801f644 <__lshift+0xa4>
 801f640:	f108 0602 	add.w	r6, r8, #2
 801f644:	3e01      	subs	r6, #1
 801f646:	4638      	mov	r0, r7
 801f648:	612e      	str	r6, [r5, #16]
 801f64a:	4621      	mov	r1, r4
 801f64c:	f7ff fd90 	bl	801f170 <_Bfree>
 801f650:	4628      	mov	r0, r5
 801f652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f656:	f842 0f04 	str.w	r0, [r2, #4]!
 801f65a:	3301      	adds	r3, #1
 801f65c:	e7c5      	b.n	801f5ea <__lshift+0x4a>
 801f65e:	3904      	subs	r1, #4
 801f660:	f853 2b04 	ldr.w	r2, [r3], #4
 801f664:	f841 2f04 	str.w	r2, [r1, #4]!
 801f668:	459c      	cmp	ip, r3
 801f66a:	d8f9      	bhi.n	801f660 <__lshift+0xc0>
 801f66c:	e7ea      	b.n	801f644 <__lshift+0xa4>
 801f66e:	bf00      	nop
 801f670:	080297e9 	.word	0x080297e9
 801f674:	08029871 	.word	0x08029871

0801f678 <__mcmp>:
 801f678:	690a      	ldr	r2, [r1, #16]
 801f67a:	4603      	mov	r3, r0
 801f67c:	6900      	ldr	r0, [r0, #16]
 801f67e:	1a80      	subs	r0, r0, r2
 801f680:	b530      	push	{r4, r5, lr}
 801f682:	d10e      	bne.n	801f6a2 <__mcmp+0x2a>
 801f684:	3314      	adds	r3, #20
 801f686:	3114      	adds	r1, #20
 801f688:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f68c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f694:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f698:	4295      	cmp	r5, r2
 801f69a:	d003      	beq.n	801f6a4 <__mcmp+0x2c>
 801f69c:	d205      	bcs.n	801f6aa <__mcmp+0x32>
 801f69e:	f04f 30ff 	mov.w	r0, #4294967295
 801f6a2:	bd30      	pop	{r4, r5, pc}
 801f6a4:	42a3      	cmp	r3, r4
 801f6a6:	d3f3      	bcc.n	801f690 <__mcmp+0x18>
 801f6a8:	e7fb      	b.n	801f6a2 <__mcmp+0x2a>
 801f6aa:	2001      	movs	r0, #1
 801f6ac:	e7f9      	b.n	801f6a2 <__mcmp+0x2a>
	...

0801f6b0 <__mdiff>:
 801f6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6b4:	4689      	mov	r9, r1
 801f6b6:	4606      	mov	r6, r0
 801f6b8:	4611      	mov	r1, r2
 801f6ba:	4648      	mov	r0, r9
 801f6bc:	4614      	mov	r4, r2
 801f6be:	f7ff ffdb 	bl	801f678 <__mcmp>
 801f6c2:	1e05      	subs	r5, r0, #0
 801f6c4:	d112      	bne.n	801f6ec <__mdiff+0x3c>
 801f6c6:	4629      	mov	r1, r5
 801f6c8:	4630      	mov	r0, r6
 801f6ca:	f7ff fd11 	bl	801f0f0 <_Balloc>
 801f6ce:	4602      	mov	r2, r0
 801f6d0:	b928      	cbnz	r0, 801f6de <__mdiff+0x2e>
 801f6d2:	4b3f      	ldr	r3, [pc, #252]	@ (801f7d0 <__mdiff+0x120>)
 801f6d4:	f240 2137 	movw	r1, #567	@ 0x237
 801f6d8:	483e      	ldr	r0, [pc, #248]	@ (801f7d4 <__mdiff+0x124>)
 801f6da:	f7fd ffd7 	bl	801d68c <__assert_func>
 801f6de:	2301      	movs	r3, #1
 801f6e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f6e4:	4610      	mov	r0, r2
 801f6e6:	b003      	add	sp, #12
 801f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6ec:	bfbc      	itt	lt
 801f6ee:	464b      	movlt	r3, r9
 801f6f0:	46a1      	movlt	r9, r4
 801f6f2:	4630      	mov	r0, r6
 801f6f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f6f8:	bfba      	itte	lt
 801f6fa:	461c      	movlt	r4, r3
 801f6fc:	2501      	movlt	r5, #1
 801f6fe:	2500      	movge	r5, #0
 801f700:	f7ff fcf6 	bl	801f0f0 <_Balloc>
 801f704:	4602      	mov	r2, r0
 801f706:	b918      	cbnz	r0, 801f710 <__mdiff+0x60>
 801f708:	4b31      	ldr	r3, [pc, #196]	@ (801f7d0 <__mdiff+0x120>)
 801f70a:	f240 2145 	movw	r1, #581	@ 0x245
 801f70e:	e7e3      	b.n	801f6d8 <__mdiff+0x28>
 801f710:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f714:	6926      	ldr	r6, [r4, #16]
 801f716:	60c5      	str	r5, [r0, #12]
 801f718:	f109 0310 	add.w	r3, r9, #16
 801f71c:	f109 0514 	add.w	r5, r9, #20
 801f720:	f104 0e14 	add.w	lr, r4, #20
 801f724:	f100 0b14 	add.w	fp, r0, #20
 801f728:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f72c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f730:	9301      	str	r3, [sp, #4]
 801f732:	46d9      	mov	r9, fp
 801f734:	f04f 0c00 	mov.w	ip, #0
 801f738:	9b01      	ldr	r3, [sp, #4]
 801f73a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f73e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f742:	9301      	str	r3, [sp, #4]
 801f744:	fa1f f38a 	uxth.w	r3, sl
 801f748:	4619      	mov	r1, r3
 801f74a:	b283      	uxth	r3, r0
 801f74c:	1acb      	subs	r3, r1, r3
 801f74e:	0c00      	lsrs	r0, r0, #16
 801f750:	4463      	add	r3, ip
 801f752:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f756:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f75a:	b29b      	uxth	r3, r3
 801f75c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f760:	4576      	cmp	r6, lr
 801f762:	f849 3b04 	str.w	r3, [r9], #4
 801f766:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f76a:	d8e5      	bhi.n	801f738 <__mdiff+0x88>
 801f76c:	1b33      	subs	r3, r6, r4
 801f76e:	3b15      	subs	r3, #21
 801f770:	f023 0303 	bic.w	r3, r3, #3
 801f774:	3415      	adds	r4, #21
 801f776:	3304      	adds	r3, #4
 801f778:	42a6      	cmp	r6, r4
 801f77a:	bf38      	it	cc
 801f77c:	2304      	movcc	r3, #4
 801f77e:	441d      	add	r5, r3
 801f780:	445b      	add	r3, fp
 801f782:	461e      	mov	r6, r3
 801f784:	462c      	mov	r4, r5
 801f786:	4544      	cmp	r4, r8
 801f788:	d30e      	bcc.n	801f7a8 <__mdiff+0xf8>
 801f78a:	f108 0103 	add.w	r1, r8, #3
 801f78e:	1b49      	subs	r1, r1, r5
 801f790:	f021 0103 	bic.w	r1, r1, #3
 801f794:	3d03      	subs	r5, #3
 801f796:	45a8      	cmp	r8, r5
 801f798:	bf38      	it	cc
 801f79a:	2100      	movcc	r1, #0
 801f79c:	440b      	add	r3, r1
 801f79e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f7a2:	b191      	cbz	r1, 801f7ca <__mdiff+0x11a>
 801f7a4:	6117      	str	r7, [r2, #16]
 801f7a6:	e79d      	b.n	801f6e4 <__mdiff+0x34>
 801f7a8:	f854 1b04 	ldr.w	r1, [r4], #4
 801f7ac:	46e6      	mov	lr, ip
 801f7ae:	0c08      	lsrs	r0, r1, #16
 801f7b0:	fa1c fc81 	uxtah	ip, ip, r1
 801f7b4:	4471      	add	r1, lr
 801f7b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f7ba:	b289      	uxth	r1, r1
 801f7bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f7c0:	f846 1b04 	str.w	r1, [r6], #4
 801f7c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f7c8:	e7dd      	b.n	801f786 <__mdiff+0xd6>
 801f7ca:	3f01      	subs	r7, #1
 801f7cc:	e7e7      	b.n	801f79e <__mdiff+0xee>
 801f7ce:	bf00      	nop
 801f7d0:	080297e9 	.word	0x080297e9
 801f7d4:	08029871 	.word	0x08029871

0801f7d8 <__ulp>:
 801f7d8:	b082      	sub	sp, #8
 801f7da:	ed8d 0b00 	vstr	d0, [sp]
 801f7de:	9a01      	ldr	r2, [sp, #4]
 801f7e0:	4b0f      	ldr	r3, [pc, #60]	@ (801f820 <__ulp+0x48>)
 801f7e2:	4013      	ands	r3, r2
 801f7e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	dc08      	bgt.n	801f7fe <__ulp+0x26>
 801f7ec:	425b      	negs	r3, r3
 801f7ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801f7f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f7f6:	da04      	bge.n	801f802 <__ulp+0x2a>
 801f7f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801f7fc:	4113      	asrs	r3, r2
 801f7fe:	2200      	movs	r2, #0
 801f800:	e008      	b.n	801f814 <__ulp+0x3c>
 801f802:	f1a2 0314 	sub.w	r3, r2, #20
 801f806:	2b1e      	cmp	r3, #30
 801f808:	bfda      	itte	le
 801f80a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801f80e:	40da      	lsrle	r2, r3
 801f810:	2201      	movgt	r2, #1
 801f812:	2300      	movs	r3, #0
 801f814:	4619      	mov	r1, r3
 801f816:	4610      	mov	r0, r2
 801f818:	ec41 0b10 	vmov	d0, r0, r1
 801f81c:	b002      	add	sp, #8
 801f81e:	4770      	bx	lr
 801f820:	7ff00000 	.word	0x7ff00000

0801f824 <__b2d>:
 801f824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f828:	6906      	ldr	r6, [r0, #16]
 801f82a:	f100 0814 	add.w	r8, r0, #20
 801f82e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801f832:	1f37      	subs	r7, r6, #4
 801f834:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f838:	4610      	mov	r0, r2
 801f83a:	f7ff fd4b 	bl	801f2d4 <__hi0bits>
 801f83e:	f1c0 0320 	rsb	r3, r0, #32
 801f842:	280a      	cmp	r0, #10
 801f844:	600b      	str	r3, [r1, #0]
 801f846:	491b      	ldr	r1, [pc, #108]	@ (801f8b4 <__b2d+0x90>)
 801f848:	dc15      	bgt.n	801f876 <__b2d+0x52>
 801f84a:	f1c0 0c0b 	rsb	ip, r0, #11
 801f84e:	fa22 f30c 	lsr.w	r3, r2, ip
 801f852:	45b8      	cmp	r8, r7
 801f854:	ea43 0501 	orr.w	r5, r3, r1
 801f858:	bf34      	ite	cc
 801f85a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f85e:	2300      	movcs	r3, #0
 801f860:	3015      	adds	r0, #21
 801f862:	fa02 f000 	lsl.w	r0, r2, r0
 801f866:	fa23 f30c 	lsr.w	r3, r3, ip
 801f86a:	4303      	orrs	r3, r0
 801f86c:	461c      	mov	r4, r3
 801f86e:	ec45 4b10 	vmov	d0, r4, r5
 801f872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f876:	45b8      	cmp	r8, r7
 801f878:	bf3a      	itte	cc
 801f87a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f87e:	f1a6 0708 	subcc.w	r7, r6, #8
 801f882:	2300      	movcs	r3, #0
 801f884:	380b      	subs	r0, #11
 801f886:	d012      	beq.n	801f8ae <__b2d+0x8a>
 801f888:	f1c0 0120 	rsb	r1, r0, #32
 801f88c:	fa23 f401 	lsr.w	r4, r3, r1
 801f890:	4082      	lsls	r2, r0
 801f892:	4322      	orrs	r2, r4
 801f894:	4547      	cmp	r7, r8
 801f896:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801f89a:	bf8c      	ite	hi
 801f89c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801f8a0:	2200      	movls	r2, #0
 801f8a2:	4083      	lsls	r3, r0
 801f8a4:	40ca      	lsrs	r2, r1
 801f8a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801f8aa:	4313      	orrs	r3, r2
 801f8ac:	e7de      	b.n	801f86c <__b2d+0x48>
 801f8ae:	ea42 0501 	orr.w	r5, r2, r1
 801f8b2:	e7db      	b.n	801f86c <__b2d+0x48>
 801f8b4:	3ff00000 	.word	0x3ff00000

0801f8b8 <__d2b>:
 801f8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f8bc:	460f      	mov	r7, r1
 801f8be:	2101      	movs	r1, #1
 801f8c0:	ec59 8b10 	vmov	r8, r9, d0
 801f8c4:	4616      	mov	r6, r2
 801f8c6:	f7ff fc13 	bl	801f0f0 <_Balloc>
 801f8ca:	4604      	mov	r4, r0
 801f8cc:	b930      	cbnz	r0, 801f8dc <__d2b+0x24>
 801f8ce:	4602      	mov	r2, r0
 801f8d0:	4b23      	ldr	r3, [pc, #140]	@ (801f960 <__d2b+0xa8>)
 801f8d2:	4824      	ldr	r0, [pc, #144]	@ (801f964 <__d2b+0xac>)
 801f8d4:	f240 310f 	movw	r1, #783	@ 0x30f
 801f8d8:	f7fd fed8 	bl	801d68c <__assert_func>
 801f8dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f8e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f8e4:	b10d      	cbz	r5, 801f8ea <__d2b+0x32>
 801f8e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f8ea:	9301      	str	r3, [sp, #4]
 801f8ec:	f1b8 0300 	subs.w	r3, r8, #0
 801f8f0:	d023      	beq.n	801f93a <__d2b+0x82>
 801f8f2:	4668      	mov	r0, sp
 801f8f4:	9300      	str	r3, [sp, #0]
 801f8f6:	f7ff fd0c 	bl	801f312 <__lo0bits>
 801f8fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f8fe:	b1d0      	cbz	r0, 801f936 <__d2b+0x7e>
 801f900:	f1c0 0320 	rsb	r3, r0, #32
 801f904:	fa02 f303 	lsl.w	r3, r2, r3
 801f908:	430b      	orrs	r3, r1
 801f90a:	40c2      	lsrs	r2, r0
 801f90c:	6163      	str	r3, [r4, #20]
 801f90e:	9201      	str	r2, [sp, #4]
 801f910:	9b01      	ldr	r3, [sp, #4]
 801f912:	61a3      	str	r3, [r4, #24]
 801f914:	2b00      	cmp	r3, #0
 801f916:	bf0c      	ite	eq
 801f918:	2201      	moveq	r2, #1
 801f91a:	2202      	movne	r2, #2
 801f91c:	6122      	str	r2, [r4, #16]
 801f91e:	b1a5      	cbz	r5, 801f94a <__d2b+0x92>
 801f920:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f924:	4405      	add	r5, r0
 801f926:	603d      	str	r5, [r7, #0]
 801f928:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f92c:	6030      	str	r0, [r6, #0]
 801f92e:	4620      	mov	r0, r4
 801f930:	b003      	add	sp, #12
 801f932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f936:	6161      	str	r1, [r4, #20]
 801f938:	e7ea      	b.n	801f910 <__d2b+0x58>
 801f93a:	a801      	add	r0, sp, #4
 801f93c:	f7ff fce9 	bl	801f312 <__lo0bits>
 801f940:	9b01      	ldr	r3, [sp, #4]
 801f942:	6163      	str	r3, [r4, #20]
 801f944:	3020      	adds	r0, #32
 801f946:	2201      	movs	r2, #1
 801f948:	e7e8      	b.n	801f91c <__d2b+0x64>
 801f94a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f94e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f952:	6038      	str	r0, [r7, #0]
 801f954:	6918      	ldr	r0, [r3, #16]
 801f956:	f7ff fcbd 	bl	801f2d4 <__hi0bits>
 801f95a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f95e:	e7e5      	b.n	801f92c <__d2b+0x74>
 801f960:	080297e9 	.word	0x080297e9
 801f964:	08029871 	.word	0x08029871

0801f968 <__ratio>:
 801f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f96c:	b085      	sub	sp, #20
 801f96e:	e9cd 1000 	strd	r1, r0, [sp]
 801f972:	a902      	add	r1, sp, #8
 801f974:	f7ff ff56 	bl	801f824 <__b2d>
 801f978:	9800      	ldr	r0, [sp, #0]
 801f97a:	a903      	add	r1, sp, #12
 801f97c:	ec55 4b10 	vmov	r4, r5, d0
 801f980:	f7ff ff50 	bl	801f824 <__b2d>
 801f984:	9b01      	ldr	r3, [sp, #4]
 801f986:	6919      	ldr	r1, [r3, #16]
 801f988:	9b00      	ldr	r3, [sp, #0]
 801f98a:	691b      	ldr	r3, [r3, #16]
 801f98c:	1ac9      	subs	r1, r1, r3
 801f98e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801f992:	1a9b      	subs	r3, r3, r2
 801f994:	ec5b ab10 	vmov	sl, fp, d0
 801f998:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	bfce      	itee	gt
 801f9a0:	462a      	movgt	r2, r5
 801f9a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f9a6:	465a      	movle	r2, fp
 801f9a8:	462f      	mov	r7, r5
 801f9aa:	46d9      	mov	r9, fp
 801f9ac:	bfcc      	ite	gt
 801f9ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f9b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801f9b6:	464b      	mov	r3, r9
 801f9b8:	4652      	mov	r2, sl
 801f9ba:	4620      	mov	r0, r4
 801f9bc:	4639      	mov	r1, r7
 801f9be:	f7e0 ff75 	bl	80008ac <__aeabi_ddiv>
 801f9c2:	ec41 0b10 	vmov	d0, r0, r1
 801f9c6:	b005      	add	sp, #20
 801f9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f9cc <__copybits>:
 801f9cc:	3901      	subs	r1, #1
 801f9ce:	b570      	push	{r4, r5, r6, lr}
 801f9d0:	1149      	asrs	r1, r1, #5
 801f9d2:	6914      	ldr	r4, [r2, #16]
 801f9d4:	3101      	adds	r1, #1
 801f9d6:	f102 0314 	add.w	r3, r2, #20
 801f9da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f9de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f9e2:	1f05      	subs	r5, r0, #4
 801f9e4:	42a3      	cmp	r3, r4
 801f9e6:	d30c      	bcc.n	801fa02 <__copybits+0x36>
 801f9e8:	1aa3      	subs	r3, r4, r2
 801f9ea:	3b11      	subs	r3, #17
 801f9ec:	f023 0303 	bic.w	r3, r3, #3
 801f9f0:	3211      	adds	r2, #17
 801f9f2:	42a2      	cmp	r2, r4
 801f9f4:	bf88      	it	hi
 801f9f6:	2300      	movhi	r3, #0
 801f9f8:	4418      	add	r0, r3
 801f9fa:	2300      	movs	r3, #0
 801f9fc:	4288      	cmp	r0, r1
 801f9fe:	d305      	bcc.n	801fa0c <__copybits+0x40>
 801fa00:	bd70      	pop	{r4, r5, r6, pc}
 801fa02:	f853 6b04 	ldr.w	r6, [r3], #4
 801fa06:	f845 6f04 	str.w	r6, [r5, #4]!
 801fa0a:	e7eb      	b.n	801f9e4 <__copybits+0x18>
 801fa0c:	f840 3b04 	str.w	r3, [r0], #4
 801fa10:	e7f4      	b.n	801f9fc <__copybits+0x30>

0801fa12 <__any_on>:
 801fa12:	f100 0214 	add.w	r2, r0, #20
 801fa16:	6900      	ldr	r0, [r0, #16]
 801fa18:	114b      	asrs	r3, r1, #5
 801fa1a:	4298      	cmp	r0, r3
 801fa1c:	b510      	push	{r4, lr}
 801fa1e:	db11      	blt.n	801fa44 <__any_on+0x32>
 801fa20:	dd0a      	ble.n	801fa38 <__any_on+0x26>
 801fa22:	f011 011f 	ands.w	r1, r1, #31
 801fa26:	d007      	beq.n	801fa38 <__any_on+0x26>
 801fa28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fa2c:	fa24 f001 	lsr.w	r0, r4, r1
 801fa30:	fa00 f101 	lsl.w	r1, r0, r1
 801fa34:	428c      	cmp	r4, r1
 801fa36:	d10b      	bne.n	801fa50 <__any_on+0x3e>
 801fa38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fa3c:	4293      	cmp	r3, r2
 801fa3e:	d803      	bhi.n	801fa48 <__any_on+0x36>
 801fa40:	2000      	movs	r0, #0
 801fa42:	bd10      	pop	{r4, pc}
 801fa44:	4603      	mov	r3, r0
 801fa46:	e7f7      	b.n	801fa38 <__any_on+0x26>
 801fa48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fa4c:	2900      	cmp	r1, #0
 801fa4e:	d0f5      	beq.n	801fa3c <__any_on+0x2a>
 801fa50:	2001      	movs	r0, #1
 801fa52:	e7f6      	b.n	801fa42 <__any_on+0x30>

0801fa54 <_malloc_usable_size_r>:
 801fa54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fa58:	1f18      	subs	r0, r3, #4
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	bfbc      	itt	lt
 801fa5e:	580b      	ldrlt	r3, [r1, r0]
 801fa60:	18c0      	addlt	r0, r0, r3
 801fa62:	4770      	bx	lr

0801fa64 <__ascii_wctomb>:
 801fa64:	4603      	mov	r3, r0
 801fa66:	4608      	mov	r0, r1
 801fa68:	b141      	cbz	r1, 801fa7c <__ascii_wctomb+0x18>
 801fa6a:	2aff      	cmp	r2, #255	@ 0xff
 801fa6c:	d904      	bls.n	801fa78 <__ascii_wctomb+0x14>
 801fa6e:	228a      	movs	r2, #138	@ 0x8a
 801fa70:	601a      	str	r2, [r3, #0]
 801fa72:	f04f 30ff 	mov.w	r0, #4294967295
 801fa76:	4770      	bx	lr
 801fa78:	700a      	strb	r2, [r1, #0]
 801fa7a:	2001      	movs	r0, #1
 801fa7c:	4770      	bx	lr

0801fa7e <__ssputs_r>:
 801fa7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa82:	688e      	ldr	r6, [r1, #8]
 801fa84:	461f      	mov	r7, r3
 801fa86:	42be      	cmp	r6, r7
 801fa88:	680b      	ldr	r3, [r1, #0]
 801fa8a:	4682      	mov	sl, r0
 801fa8c:	460c      	mov	r4, r1
 801fa8e:	4690      	mov	r8, r2
 801fa90:	d82d      	bhi.n	801faee <__ssputs_r+0x70>
 801fa92:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801fa96:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801fa9a:	d026      	beq.n	801faea <__ssputs_r+0x6c>
 801fa9c:	6965      	ldr	r5, [r4, #20]
 801fa9e:	6909      	ldr	r1, [r1, #16]
 801faa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801faa4:	eba3 0901 	sub.w	r9, r3, r1
 801faa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801faac:	1c7b      	adds	r3, r7, #1
 801faae:	444b      	add	r3, r9
 801fab0:	106d      	asrs	r5, r5, #1
 801fab2:	429d      	cmp	r5, r3
 801fab4:	bf38      	it	cc
 801fab6:	461d      	movcc	r5, r3
 801fab8:	0553      	lsls	r3, r2, #21
 801faba:	d527      	bpl.n	801fb0c <__ssputs_r+0x8e>
 801fabc:	4629      	mov	r1, r5
 801fabe:	f7fd fe55 	bl	801d76c <_malloc_r>
 801fac2:	4606      	mov	r6, r0
 801fac4:	b360      	cbz	r0, 801fb20 <__ssputs_r+0xa2>
 801fac6:	6921      	ldr	r1, [r4, #16]
 801fac8:	464a      	mov	r2, r9
 801faca:	f7fe ff6c 	bl	801e9a6 <memcpy>
 801face:	89a3      	ldrh	r3, [r4, #12]
 801fad0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801fad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fad8:	81a3      	strh	r3, [r4, #12]
 801fada:	6126      	str	r6, [r4, #16]
 801fadc:	6165      	str	r5, [r4, #20]
 801fade:	444e      	add	r6, r9
 801fae0:	eba5 0509 	sub.w	r5, r5, r9
 801fae4:	6026      	str	r6, [r4, #0]
 801fae6:	60a5      	str	r5, [r4, #8]
 801fae8:	463e      	mov	r6, r7
 801faea:	42be      	cmp	r6, r7
 801faec:	d900      	bls.n	801faf0 <__ssputs_r+0x72>
 801faee:	463e      	mov	r6, r7
 801faf0:	6820      	ldr	r0, [r4, #0]
 801faf2:	4632      	mov	r2, r6
 801faf4:	4641      	mov	r1, r8
 801faf6:	f7fe fe5b 	bl	801e7b0 <memmove>
 801fafa:	68a3      	ldr	r3, [r4, #8]
 801fafc:	1b9b      	subs	r3, r3, r6
 801fafe:	60a3      	str	r3, [r4, #8]
 801fb00:	6823      	ldr	r3, [r4, #0]
 801fb02:	4433      	add	r3, r6
 801fb04:	6023      	str	r3, [r4, #0]
 801fb06:	2000      	movs	r0, #0
 801fb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb0c:	462a      	mov	r2, r5
 801fb0e:	f7fd feb9 	bl	801d884 <_realloc_r>
 801fb12:	4606      	mov	r6, r0
 801fb14:	2800      	cmp	r0, #0
 801fb16:	d1e0      	bne.n	801fada <__ssputs_r+0x5c>
 801fb18:	6921      	ldr	r1, [r4, #16]
 801fb1a:	4650      	mov	r0, sl
 801fb1c:	f7fe ff52 	bl	801e9c4 <_free_r>
 801fb20:	230c      	movs	r3, #12
 801fb22:	f8ca 3000 	str.w	r3, [sl]
 801fb26:	89a3      	ldrh	r3, [r4, #12]
 801fb28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fb2c:	81a3      	strh	r3, [r4, #12]
 801fb2e:	f04f 30ff 	mov.w	r0, #4294967295
 801fb32:	e7e9      	b.n	801fb08 <__ssputs_r+0x8a>

0801fb34 <_svfiprintf_r>:
 801fb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb38:	4698      	mov	r8, r3
 801fb3a:	898b      	ldrh	r3, [r1, #12]
 801fb3c:	061b      	lsls	r3, r3, #24
 801fb3e:	b09d      	sub	sp, #116	@ 0x74
 801fb40:	4607      	mov	r7, r0
 801fb42:	460d      	mov	r5, r1
 801fb44:	4614      	mov	r4, r2
 801fb46:	d510      	bpl.n	801fb6a <_svfiprintf_r+0x36>
 801fb48:	690b      	ldr	r3, [r1, #16]
 801fb4a:	b973      	cbnz	r3, 801fb6a <_svfiprintf_r+0x36>
 801fb4c:	2140      	movs	r1, #64	@ 0x40
 801fb4e:	f7fd fe0d 	bl	801d76c <_malloc_r>
 801fb52:	6028      	str	r0, [r5, #0]
 801fb54:	6128      	str	r0, [r5, #16]
 801fb56:	b930      	cbnz	r0, 801fb66 <_svfiprintf_r+0x32>
 801fb58:	230c      	movs	r3, #12
 801fb5a:	603b      	str	r3, [r7, #0]
 801fb5c:	f04f 30ff 	mov.w	r0, #4294967295
 801fb60:	b01d      	add	sp, #116	@ 0x74
 801fb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb66:	2340      	movs	r3, #64	@ 0x40
 801fb68:	616b      	str	r3, [r5, #20]
 801fb6a:	2300      	movs	r3, #0
 801fb6c:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb6e:	2320      	movs	r3, #32
 801fb70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fb74:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb78:	2330      	movs	r3, #48	@ 0x30
 801fb7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801fd18 <_svfiprintf_r+0x1e4>
 801fb7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fb82:	f04f 0901 	mov.w	r9, #1
 801fb86:	4623      	mov	r3, r4
 801fb88:	469a      	mov	sl, r3
 801fb8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fb8e:	b10a      	cbz	r2, 801fb94 <_svfiprintf_r+0x60>
 801fb90:	2a25      	cmp	r2, #37	@ 0x25
 801fb92:	d1f9      	bne.n	801fb88 <_svfiprintf_r+0x54>
 801fb94:	ebba 0b04 	subs.w	fp, sl, r4
 801fb98:	d00b      	beq.n	801fbb2 <_svfiprintf_r+0x7e>
 801fb9a:	465b      	mov	r3, fp
 801fb9c:	4622      	mov	r2, r4
 801fb9e:	4629      	mov	r1, r5
 801fba0:	4638      	mov	r0, r7
 801fba2:	f7ff ff6c 	bl	801fa7e <__ssputs_r>
 801fba6:	3001      	adds	r0, #1
 801fba8:	f000 80a7 	beq.w	801fcfa <_svfiprintf_r+0x1c6>
 801fbac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fbae:	445a      	add	r2, fp
 801fbb0:	9209      	str	r2, [sp, #36]	@ 0x24
 801fbb2:	f89a 3000 	ldrb.w	r3, [sl]
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	f000 809f 	beq.w	801fcfa <_svfiprintf_r+0x1c6>
 801fbbc:	2300      	movs	r3, #0
 801fbbe:	f04f 32ff 	mov.w	r2, #4294967295
 801fbc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fbc6:	f10a 0a01 	add.w	sl, sl, #1
 801fbca:	9304      	str	r3, [sp, #16]
 801fbcc:	9307      	str	r3, [sp, #28]
 801fbce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fbd2:	931a      	str	r3, [sp, #104]	@ 0x68
 801fbd4:	4654      	mov	r4, sl
 801fbd6:	2205      	movs	r2, #5
 801fbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbdc:	484e      	ldr	r0, [pc, #312]	@ (801fd18 <_svfiprintf_r+0x1e4>)
 801fbde:	f7e0 fb27 	bl	8000230 <memchr>
 801fbe2:	9a04      	ldr	r2, [sp, #16]
 801fbe4:	b9d8      	cbnz	r0, 801fc1e <_svfiprintf_r+0xea>
 801fbe6:	06d0      	lsls	r0, r2, #27
 801fbe8:	bf44      	itt	mi
 801fbea:	2320      	movmi	r3, #32
 801fbec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fbf0:	0711      	lsls	r1, r2, #28
 801fbf2:	bf44      	itt	mi
 801fbf4:	232b      	movmi	r3, #43	@ 0x2b
 801fbf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fbfa:	f89a 3000 	ldrb.w	r3, [sl]
 801fbfe:	2b2a      	cmp	r3, #42	@ 0x2a
 801fc00:	d015      	beq.n	801fc2e <_svfiprintf_r+0xfa>
 801fc02:	9a07      	ldr	r2, [sp, #28]
 801fc04:	4654      	mov	r4, sl
 801fc06:	2000      	movs	r0, #0
 801fc08:	f04f 0c0a 	mov.w	ip, #10
 801fc0c:	4621      	mov	r1, r4
 801fc0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc12:	3b30      	subs	r3, #48	@ 0x30
 801fc14:	2b09      	cmp	r3, #9
 801fc16:	d94b      	bls.n	801fcb0 <_svfiprintf_r+0x17c>
 801fc18:	b1b0      	cbz	r0, 801fc48 <_svfiprintf_r+0x114>
 801fc1a:	9207      	str	r2, [sp, #28]
 801fc1c:	e014      	b.n	801fc48 <_svfiprintf_r+0x114>
 801fc1e:	eba0 0308 	sub.w	r3, r0, r8
 801fc22:	fa09 f303 	lsl.w	r3, r9, r3
 801fc26:	4313      	orrs	r3, r2
 801fc28:	9304      	str	r3, [sp, #16]
 801fc2a:	46a2      	mov	sl, r4
 801fc2c:	e7d2      	b.n	801fbd4 <_svfiprintf_r+0xa0>
 801fc2e:	9b03      	ldr	r3, [sp, #12]
 801fc30:	1d19      	adds	r1, r3, #4
 801fc32:	681b      	ldr	r3, [r3, #0]
 801fc34:	9103      	str	r1, [sp, #12]
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	bfbb      	ittet	lt
 801fc3a:	425b      	neglt	r3, r3
 801fc3c:	f042 0202 	orrlt.w	r2, r2, #2
 801fc40:	9307      	strge	r3, [sp, #28]
 801fc42:	9307      	strlt	r3, [sp, #28]
 801fc44:	bfb8      	it	lt
 801fc46:	9204      	strlt	r2, [sp, #16]
 801fc48:	7823      	ldrb	r3, [r4, #0]
 801fc4a:	2b2e      	cmp	r3, #46	@ 0x2e
 801fc4c:	d10a      	bne.n	801fc64 <_svfiprintf_r+0x130>
 801fc4e:	7863      	ldrb	r3, [r4, #1]
 801fc50:	2b2a      	cmp	r3, #42	@ 0x2a
 801fc52:	d132      	bne.n	801fcba <_svfiprintf_r+0x186>
 801fc54:	9b03      	ldr	r3, [sp, #12]
 801fc56:	1d1a      	adds	r2, r3, #4
 801fc58:	681b      	ldr	r3, [r3, #0]
 801fc5a:	9203      	str	r2, [sp, #12]
 801fc5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fc60:	3402      	adds	r4, #2
 801fc62:	9305      	str	r3, [sp, #20]
 801fc64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801fd28 <_svfiprintf_r+0x1f4>
 801fc68:	7821      	ldrb	r1, [r4, #0]
 801fc6a:	2203      	movs	r2, #3
 801fc6c:	4650      	mov	r0, sl
 801fc6e:	f7e0 fadf 	bl	8000230 <memchr>
 801fc72:	b138      	cbz	r0, 801fc84 <_svfiprintf_r+0x150>
 801fc74:	9b04      	ldr	r3, [sp, #16]
 801fc76:	eba0 000a 	sub.w	r0, r0, sl
 801fc7a:	2240      	movs	r2, #64	@ 0x40
 801fc7c:	4082      	lsls	r2, r0
 801fc7e:	4313      	orrs	r3, r2
 801fc80:	3401      	adds	r4, #1
 801fc82:	9304      	str	r3, [sp, #16]
 801fc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc88:	4824      	ldr	r0, [pc, #144]	@ (801fd1c <_svfiprintf_r+0x1e8>)
 801fc8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fc8e:	2206      	movs	r2, #6
 801fc90:	f7e0 face 	bl	8000230 <memchr>
 801fc94:	2800      	cmp	r0, #0
 801fc96:	d036      	beq.n	801fd06 <_svfiprintf_r+0x1d2>
 801fc98:	4b21      	ldr	r3, [pc, #132]	@ (801fd20 <_svfiprintf_r+0x1ec>)
 801fc9a:	bb1b      	cbnz	r3, 801fce4 <_svfiprintf_r+0x1b0>
 801fc9c:	9b03      	ldr	r3, [sp, #12]
 801fc9e:	3307      	adds	r3, #7
 801fca0:	f023 0307 	bic.w	r3, r3, #7
 801fca4:	3308      	adds	r3, #8
 801fca6:	9303      	str	r3, [sp, #12]
 801fca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcaa:	4433      	add	r3, r6
 801fcac:	9309      	str	r3, [sp, #36]	@ 0x24
 801fcae:	e76a      	b.n	801fb86 <_svfiprintf_r+0x52>
 801fcb0:	fb0c 3202 	mla	r2, ip, r2, r3
 801fcb4:	460c      	mov	r4, r1
 801fcb6:	2001      	movs	r0, #1
 801fcb8:	e7a8      	b.n	801fc0c <_svfiprintf_r+0xd8>
 801fcba:	2300      	movs	r3, #0
 801fcbc:	3401      	adds	r4, #1
 801fcbe:	9305      	str	r3, [sp, #20]
 801fcc0:	4619      	mov	r1, r3
 801fcc2:	f04f 0c0a 	mov.w	ip, #10
 801fcc6:	4620      	mov	r0, r4
 801fcc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fccc:	3a30      	subs	r2, #48	@ 0x30
 801fcce:	2a09      	cmp	r2, #9
 801fcd0:	d903      	bls.n	801fcda <_svfiprintf_r+0x1a6>
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d0c6      	beq.n	801fc64 <_svfiprintf_r+0x130>
 801fcd6:	9105      	str	r1, [sp, #20]
 801fcd8:	e7c4      	b.n	801fc64 <_svfiprintf_r+0x130>
 801fcda:	fb0c 2101 	mla	r1, ip, r1, r2
 801fcde:	4604      	mov	r4, r0
 801fce0:	2301      	movs	r3, #1
 801fce2:	e7f0      	b.n	801fcc6 <_svfiprintf_r+0x192>
 801fce4:	ab03      	add	r3, sp, #12
 801fce6:	9300      	str	r3, [sp, #0]
 801fce8:	462a      	mov	r2, r5
 801fcea:	4b0e      	ldr	r3, [pc, #56]	@ (801fd24 <_svfiprintf_r+0x1f0>)
 801fcec:	a904      	add	r1, sp, #16
 801fcee:	4638      	mov	r0, r7
 801fcf0:	f3af 8000 	nop.w
 801fcf4:	1c42      	adds	r2, r0, #1
 801fcf6:	4606      	mov	r6, r0
 801fcf8:	d1d6      	bne.n	801fca8 <_svfiprintf_r+0x174>
 801fcfa:	89ab      	ldrh	r3, [r5, #12]
 801fcfc:	065b      	lsls	r3, r3, #25
 801fcfe:	f53f af2d 	bmi.w	801fb5c <_svfiprintf_r+0x28>
 801fd02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd04:	e72c      	b.n	801fb60 <_svfiprintf_r+0x2c>
 801fd06:	ab03      	add	r3, sp, #12
 801fd08:	9300      	str	r3, [sp, #0]
 801fd0a:	462a      	mov	r2, r5
 801fd0c:	4b05      	ldr	r3, [pc, #20]	@ (801fd24 <_svfiprintf_r+0x1f0>)
 801fd0e:	a904      	add	r1, sp, #16
 801fd10:	4638      	mov	r0, r7
 801fd12:	f000 f9bb 	bl	802008c <_printf_i>
 801fd16:	e7ed      	b.n	801fcf4 <_svfiprintf_r+0x1c0>
 801fd18:	080299c8 	.word	0x080299c8
 801fd1c:	080299d2 	.word	0x080299d2
 801fd20:	00000000 	.word	0x00000000
 801fd24:	0801fa7f 	.word	0x0801fa7f
 801fd28:	080299ce 	.word	0x080299ce

0801fd2c <__sfputc_r>:
 801fd2c:	6893      	ldr	r3, [r2, #8]
 801fd2e:	3b01      	subs	r3, #1
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	b410      	push	{r4}
 801fd34:	6093      	str	r3, [r2, #8]
 801fd36:	da08      	bge.n	801fd4a <__sfputc_r+0x1e>
 801fd38:	6994      	ldr	r4, [r2, #24]
 801fd3a:	42a3      	cmp	r3, r4
 801fd3c:	db01      	blt.n	801fd42 <__sfputc_r+0x16>
 801fd3e:	290a      	cmp	r1, #10
 801fd40:	d103      	bne.n	801fd4a <__sfputc_r+0x1e>
 801fd42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd46:	f000 bb6d 	b.w	8020424 <__swbuf_r>
 801fd4a:	6813      	ldr	r3, [r2, #0]
 801fd4c:	1c58      	adds	r0, r3, #1
 801fd4e:	6010      	str	r0, [r2, #0]
 801fd50:	7019      	strb	r1, [r3, #0]
 801fd52:	4608      	mov	r0, r1
 801fd54:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd58:	4770      	bx	lr

0801fd5a <__sfputs_r>:
 801fd5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd5c:	4606      	mov	r6, r0
 801fd5e:	460f      	mov	r7, r1
 801fd60:	4614      	mov	r4, r2
 801fd62:	18d5      	adds	r5, r2, r3
 801fd64:	42ac      	cmp	r4, r5
 801fd66:	d101      	bne.n	801fd6c <__sfputs_r+0x12>
 801fd68:	2000      	movs	r0, #0
 801fd6a:	e007      	b.n	801fd7c <__sfputs_r+0x22>
 801fd6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd70:	463a      	mov	r2, r7
 801fd72:	4630      	mov	r0, r6
 801fd74:	f7ff ffda 	bl	801fd2c <__sfputc_r>
 801fd78:	1c43      	adds	r3, r0, #1
 801fd7a:	d1f3      	bne.n	801fd64 <__sfputs_r+0xa>
 801fd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fd80 <_vfiprintf_r>:
 801fd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd84:	460d      	mov	r5, r1
 801fd86:	b09d      	sub	sp, #116	@ 0x74
 801fd88:	4614      	mov	r4, r2
 801fd8a:	4698      	mov	r8, r3
 801fd8c:	4606      	mov	r6, r0
 801fd8e:	b118      	cbz	r0, 801fd98 <_vfiprintf_r+0x18>
 801fd90:	6a03      	ldr	r3, [r0, #32]
 801fd92:	b90b      	cbnz	r3, 801fd98 <_vfiprintf_r+0x18>
 801fd94:	f7fe fc40 	bl	801e618 <__sinit>
 801fd98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fd9a:	07d9      	lsls	r1, r3, #31
 801fd9c:	d405      	bmi.n	801fdaa <_vfiprintf_r+0x2a>
 801fd9e:	89ab      	ldrh	r3, [r5, #12]
 801fda0:	059a      	lsls	r2, r3, #22
 801fda2:	d402      	bmi.n	801fdaa <_vfiprintf_r+0x2a>
 801fda4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fda6:	f7fe fdfc 	bl	801e9a2 <__retarget_lock_acquire_recursive>
 801fdaa:	89ab      	ldrh	r3, [r5, #12]
 801fdac:	071b      	lsls	r3, r3, #28
 801fdae:	d501      	bpl.n	801fdb4 <_vfiprintf_r+0x34>
 801fdb0:	692b      	ldr	r3, [r5, #16]
 801fdb2:	b99b      	cbnz	r3, 801fddc <_vfiprintf_r+0x5c>
 801fdb4:	4629      	mov	r1, r5
 801fdb6:	4630      	mov	r0, r6
 801fdb8:	f000 fb72 	bl	80204a0 <__swsetup_r>
 801fdbc:	b170      	cbz	r0, 801fddc <_vfiprintf_r+0x5c>
 801fdbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fdc0:	07dc      	lsls	r4, r3, #31
 801fdc2:	d504      	bpl.n	801fdce <_vfiprintf_r+0x4e>
 801fdc4:	f04f 30ff 	mov.w	r0, #4294967295
 801fdc8:	b01d      	add	sp, #116	@ 0x74
 801fdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdce:	89ab      	ldrh	r3, [r5, #12]
 801fdd0:	0598      	lsls	r0, r3, #22
 801fdd2:	d4f7      	bmi.n	801fdc4 <_vfiprintf_r+0x44>
 801fdd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fdd6:	f7fe fde5 	bl	801e9a4 <__retarget_lock_release_recursive>
 801fdda:	e7f3      	b.n	801fdc4 <_vfiprintf_r+0x44>
 801fddc:	2300      	movs	r3, #0
 801fdde:	9309      	str	r3, [sp, #36]	@ 0x24
 801fde0:	2320      	movs	r3, #32
 801fde2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fde6:	f8cd 800c 	str.w	r8, [sp, #12]
 801fdea:	2330      	movs	r3, #48	@ 0x30
 801fdec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ff9c <_vfiprintf_r+0x21c>
 801fdf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fdf4:	f04f 0901 	mov.w	r9, #1
 801fdf8:	4623      	mov	r3, r4
 801fdfa:	469a      	mov	sl, r3
 801fdfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fe00:	b10a      	cbz	r2, 801fe06 <_vfiprintf_r+0x86>
 801fe02:	2a25      	cmp	r2, #37	@ 0x25
 801fe04:	d1f9      	bne.n	801fdfa <_vfiprintf_r+0x7a>
 801fe06:	ebba 0b04 	subs.w	fp, sl, r4
 801fe0a:	d00b      	beq.n	801fe24 <_vfiprintf_r+0xa4>
 801fe0c:	465b      	mov	r3, fp
 801fe0e:	4622      	mov	r2, r4
 801fe10:	4629      	mov	r1, r5
 801fe12:	4630      	mov	r0, r6
 801fe14:	f7ff ffa1 	bl	801fd5a <__sfputs_r>
 801fe18:	3001      	adds	r0, #1
 801fe1a:	f000 80a7 	beq.w	801ff6c <_vfiprintf_r+0x1ec>
 801fe1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fe20:	445a      	add	r2, fp
 801fe22:	9209      	str	r2, [sp, #36]	@ 0x24
 801fe24:	f89a 3000 	ldrb.w	r3, [sl]
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	f000 809f 	beq.w	801ff6c <_vfiprintf_r+0x1ec>
 801fe2e:	2300      	movs	r3, #0
 801fe30:	f04f 32ff 	mov.w	r2, #4294967295
 801fe34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fe38:	f10a 0a01 	add.w	sl, sl, #1
 801fe3c:	9304      	str	r3, [sp, #16]
 801fe3e:	9307      	str	r3, [sp, #28]
 801fe40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fe44:	931a      	str	r3, [sp, #104]	@ 0x68
 801fe46:	4654      	mov	r4, sl
 801fe48:	2205      	movs	r2, #5
 801fe4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe4e:	4853      	ldr	r0, [pc, #332]	@ (801ff9c <_vfiprintf_r+0x21c>)
 801fe50:	f7e0 f9ee 	bl	8000230 <memchr>
 801fe54:	9a04      	ldr	r2, [sp, #16]
 801fe56:	b9d8      	cbnz	r0, 801fe90 <_vfiprintf_r+0x110>
 801fe58:	06d1      	lsls	r1, r2, #27
 801fe5a:	bf44      	itt	mi
 801fe5c:	2320      	movmi	r3, #32
 801fe5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fe62:	0713      	lsls	r3, r2, #28
 801fe64:	bf44      	itt	mi
 801fe66:	232b      	movmi	r3, #43	@ 0x2b
 801fe68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fe6c:	f89a 3000 	ldrb.w	r3, [sl]
 801fe70:	2b2a      	cmp	r3, #42	@ 0x2a
 801fe72:	d015      	beq.n	801fea0 <_vfiprintf_r+0x120>
 801fe74:	9a07      	ldr	r2, [sp, #28]
 801fe76:	4654      	mov	r4, sl
 801fe78:	2000      	movs	r0, #0
 801fe7a:	f04f 0c0a 	mov.w	ip, #10
 801fe7e:	4621      	mov	r1, r4
 801fe80:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fe84:	3b30      	subs	r3, #48	@ 0x30
 801fe86:	2b09      	cmp	r3, #9
 801fe88:	d94b      	bls.n	801ff22 <_vfiprintf_r+0x1a2>
 801fe8a:	b1b0      	cbz	r0, 801feba <_vfiprintf_r+0x13a>
 801fe8c:	9207      	str	r2, [sp, #28]
 801fe8e:	e014      	b.n	801feba <_vfiprintf_r+0x13a>
 801fe90:	eba0 0308 	sub.w	r3, r0, r8
 801fe94:	fa09 f303 	lsl.w	r3, r9, r3
 801fe98:	4313      	orrs	r3, r2
 801fe9a:	9304      	str	r3, [sp, #16]
 801fe9c:	46a2      	mov	sl, r4
 801fe9e:	e7d2      	b.n	801fe46 <_vfiprintf_r+0xc6>
 801fea0:	9b03      	ldr	r3, [sp, #12]
 801fea2:	1d19      	adds	r1, r3, #4
 801fea4:	681b      	ldr	r3, [r3, #0]
 801fea6:	9103      	str	r1, [sp, #12]
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	bfbb      	ittet	lt
 801feac:	425b      	neglt	r3, r3
 801feae:	f042 0202 	orrlt.w	r2, r2, #2
 801feb2:	9307      	strge	r3, [sp, #28]
 801feb4:	9307      	strlt	r3, [sp, #28]
 801feb6:	bfb8      	it	lt
 801feb8:	9204      	strlt	r2, [sp, #16]
 801feba:	7823      	ldrb	r3, [r4, #0]
 801febc:	2b2e      	cmp	r3, #46	@ 0x2e
 801febe:	d10a      	bne.n	801fed6 <_vfiprintf_r+0x156>
 801fec0:	7863      	ldrb	r3, [r4, #1]
 801fec2:	2b2a      	cmp	r3, #42	@ 0x2a
 801fec4:	d132      	bne.n	801ff2c <_vfiprintf_r+0x1ac>
 801fec6:	9b03      	ldr	r3, [sp, #12]
 801fec8:	1d1a      	adds	r2, r3, #4
 801feca:	681b      	ldr	r3, [r3, #0]
 801fecc:	9203      	str	r2, [sp, #12]
 801fece:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fed2:	3402      	adds	r4, #2
 801fed4:	9305      	str	r3, [sp, #20]
 801fed6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ffac <_vfiprintf_r+0x22c>
 801feda:	7821      	ldrb	r1, [r4, #0]
 801fedc:	2203      	movs	r2, #3
 801fede:	4650      	mov	r0, sl
 801fee0:	f7e0 f9a6 	bl	8000230 <memchr>
 801fee4:	b138      	cbz	r0, 801fef6 <_vfiprintf_r+0x176>
 801fee6:	9b04      	ldr	r3, [sp, #16]
 801fee8:	eba0 000a 	sub.w	r0, r0, sl
 801feec:	2240      	movs	r2, #64	@ 0x40
 801feee:	4082      	lsls	r2, r0
 801fef0:	4313      	orrs	r3, r2
 801fef2:	3401      	adds	r4, #1
 801fef4:	9304      	str	r3, [sp, #16]
 801fef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fefa:	4829      	ldr	r0, [pc, #164]	@ (801ffa0 <_vfiprintf_r+0x220>)
 801fefc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ff00:	2206      	movs	r2, #6
 801ff02:	f7e0 f995 	bl	8000230 <memchr>
 801ff06:	2800      	cmp	r0, #0
 801ff08:	d03f      	beq.n	801ff8a <_vfiprintf_r+0x20a>
 801ff0a:	4b26      	ldr	r3, [pc, #152]	@ (801ffa4 <_vfiprintf_r+0x224>)
 801ff0c:	bb1b      	cbnz	r3, 801ff56 <_vfiprintf_r+0x1d6>
 801ff0e:	9b03      	ldr	r3, [sp, #12]
 801ff10:	3307      	adds	r3, #7
 801ff12:	f023 0307 	bic.w	r3, r3, #7
 801ff16:	3308      	adds	r3, #8
 801ff18:	9303      	str	r3, [sp, #12]
 801ff1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff1c:	443b      	add	r3, r7
 801ff1e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ff20:	e76a      	b.n	801fdf8 <_vfiprintf_r+0x78>
 801ff22:	fb0c 3202 	mla	r2, ip, r2, r3
 801ff26:	460c      	mov	r4, r1
 801ff28:	2001      	movs	r0, #1
 801ff2a:	e7a8      	b.n	801fe7e <_vfiprintf_r+0xfe>
 801ff2c:	2300      	movs	r3, #0
 801ff2e:	3401      	adds	r4, #1
 801ff30:	9305      	str	r3, [sp, #20]
 801ff32:	4619      	mov	r1, r3
 801ff34:	f04f 0c0a 	mov.w	ip, #10
 801ff38:	4620      	mov	r0, r4
 801ff3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ff3e:	3a30      	subs	r2, #48	@ 0x30
 801ff40:	2a09      	cmp	r2, #9
 801ff42:	d903      	bls.n	801ff4c <_vfiprintf_r+0x1cc>
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	d0c6      	beq.n	801fed6 <_vfiprintf_r+0x156>
 801ff48:	9105      	str	r1, [sp, #20]
 801ff4a:	e7c4      	b.n	801fed6 <_vfiprintf_r+0x156>
 801ff4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ff50:	4604      	mov	r4, r0
 801ff52:	2301      	movs	r3, #1
 801ff54:	e7f0      	b.n	801ff38 <_vfiprintf_r+0x1b8>
 801ff56:	ab03      	add	r3, sp, #12
 801ff58:	9300      	str	r3, [sp, #0]
 801ff5a:	462a      	mov	r2, r5
 801ff5c:	4b12      	ldr	r3, [pc, #72]	@ (801ffa8 <_vfiprintf_r+0x228>)
 801ff5e:	a904      	add	r1, sp, #16
 801ff60:	4630      	mov	r0, r6
 801ff62:	f3af 8000 	nop.w
 801ff66:	4607      	mov	r7, r0
 801ff68:	1c78      	adds	r0, r7, #1
 801ff6a:	d1d6      	bne.n	801ff1a <_vfiprintf_r+0x19a>
 801ff6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ff6e:	07d9      	lsls	r1, r3, #31
 801ff70:	d405      	bmi.n	801ff7e <_vfiprintf_r+0x1fe>
 801ff72:	89ab      	ldrh	r3, [r5, #12]
 801ff74:	059a      	lsls	r2, r3, #22
 801ff76:	d402      	bmi.n	801ff7e <_vfiprintf_r+0x1fe>
 801ff78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ff7a:	f7fe fd13 	bl	801e9a4 <__retarget_lock_release_recursive>
 801ff7e:	89ab      	ldrh	r3, [r5, #12]
 801ff80:	065b      	lsls	r3, r3, #25
 801ff82:	f53f af1f 	bmi.w	801fdc4 <_vfiprintf_r+0x44>
 801ff86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ff88:	e71e      	b.n	801fdc8 <_vfiprintf_r+0x48>
 801ff8a:	ab03      	add	r3, sp, #12
 801ff8c:	9300      	str	r3, [sp, #0]
 801ff8e:	462a      	mov	r2, r5
 801ff90:	4b05      	ldr	r3, [pc, #20]	@ (801ffa8 <_vfiprintf_r+0x228>)
 801ff92:	a904      	add	r1, sp, #16
 801ff94:	4630      	mov	r0, r6
 801ff96:	f000 f879 	bl	802008c <_printf_i>
 801ff9a:	e7e4      	b.n	801ff66 <_vfiprintf_r+0x1e6>
 801ff9c:	080299c8 	.word	0x080299c8
 801ffa0:	080299d2 	.word	0x080299d2
 801ffa4:	00000000 	.word	0x00000000
 801ffa8:	0801fd5b 	.word	0x0801fd5b
 801ffac:	080299ce 	.word	0x080299ce

0801ffb0 <_printf_common>:
 801ffb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffb4:	4616      	mov	r6, r2
 801ffb6:	4698      	mov	r8, r3
 801ffb8:	688a      	ldr	r2, [r1, #8]
 801ffba:	690b      	ldr	r3, [r1, #16]
 801ffbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ffc0:	4293      	cmp	r3, r2
 801ffc2:	bfb8      	it	lt
 801ffc4:	4613      	movlt	r3, r2
 801ffc6:	6033      	str	r3, [r6, #0]
 801ffc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ffcc:	4607      	mov	r7, r0
 801ffce:	460c      	mov	r4, r1
 801ffd0:	b10a      	cbz	r2, 801ffd6 <_printf_common+0x26>
 801ffd2:	3301      	adds	r3, #1
 801ffd4:	6033      	str	r3, [r6, #0]
 801ffd6:	6823      	ldr	r3, [r4, #0]
 801ffd8:	0699      	lsls	r1, r3, #26
 801ffda:	bf42      	ittt	mi
 801ffdc:	6833      	ldrmi	r3, [r6, #0]
 801ffde:	3302      	addmi	r3, #2
 801ffe0:	6033      	strmi	r3, [r6, #0]
 801ffe2:	6825      	ldr	r5, [r4, #0]
 801ffe4:	f015 0506 	ands.w	r5, r5, #6
 801ffe8:	d106      	bne.n	801fff8 <_printf_common+0x48>
 801ffea:	f104 0a19 	add.w	sl, r4, #25
 801ffee:	68e3      	ldr	r3, [r4, #12]
 801fff0:	6832      	ldr	r2, [r6, #0]
 801fff2:	1a9b      	subs	r3, r3, r2
 801fff4:	42ab      	cmp	r3, r5
 801fff6:	dc26      	bgt.n	8020046 <_printf_common+0x96>
 801fff8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801fffc:	6822      	ldr	r2, [r4, #0]
 801fffe:	3b00      	subs	r3, #0
 8020000:	bf18      	it	ne
 8020002:	2301      	movne	r3, #1
 8020004:	0692      	lsls	r2, r2, #26
 8020006:	d42b      	bmi.n	8020060 <_printf_common+0xb0>
 8020008:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802000c:	4641      	mov	r1, r8
 802000e:	4638      	mov	r0, r7
 8020010:	47c8      	blx	r9
 8020012:	3001      	adds	r0, #1
 8020014:	d01e      	beq.n	8020054 <_printf_common+0xa4>
 8020016:	6823      	ldr	r3, [r4, #0]
 8020018:	6922      	ldr	r2, [r4, #16]
 802001a:	f003 0306 	and.w	r3, r3, #6
 802001e:	2b04      	cmp	r3, #4
 8020020:	bf02      	ittt	eq
 8020022:	68e5      	ldreq	r5, [r4, #12]
 8020024:	6833      	ldreq	r3, [r6, #0]
 8020026:	1aed      	subeq	r5, r5, r3
 8020028:	68a3      	ldr	r3, [r4, #8]
 802002a:	bf0c      	ite	eq
 802002c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020030:	2500      	movne	r5, #0
 8020032:	4293      	cmp	r3, r2
 8020034:	bfc4      	itt	gt
 8020036:	1a9b      	subgt	r3, r3, r2
 8020038:	18ed      	addgt	r5, r5, r3
 802003a:	2600      	movs	r6, #0
 802003c:	341a      	adds	r4, #26
 802003e:	42b5      	cmp	r5, r6
 8020040:	d11a      	bne.n	8020078 <_printf_common+0xc8>
 8020042:	2000      	movs	r0, #0
 8020044:	e008      	b.n	8020058 <_printf_common+0xa8>
 8020046:	2301      	movs	r3, #1
 8020048:	4652      	mov	r2, sl
 802004a:	4641      	mov	r1, r8
 802004c:	4638      	mov	r0, r7
 802004e:	47c8      	blx	r9
 8020050:	3001      	adds	r0, #1
 8020052:	d103      	bne.n	802005c <_printf_common+0xac>
 8020054:	f04f 30ff 	mov.w	r0, #4294967295
 8020058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802005c:	3501      	adds	r5, #1
 802005e:	e7c6      	b.n	801ffee <_printf_common+0x3e>
 8020060:	18e1      	adds	r1, r4, r3
 8020062:	1c5a      	adds	r2, r3, #1
 8020064:	2030      	movs	r0, #48	@ 0x30
 8020066:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802006a:	4422      	add	r2, r4
 802006c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020070:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020074:	3302      	adds	r3, #2
 8020076:	e7c7      	b.n	8020008 <_printf_common+0x58>
 8020078:	2301      	movs	r3, #1
 802007a:	4622      	mov	r2, r4
 802007c:	4641      	mov	r1, r8
 802007e:	4638      	mov	r0, r7
 8020080:	47c8      	blx	r9
 8020082:	3001      	adds	r0, #1
 8020084:	d0e6      	beq.n	8020054 <_printf_common+0xa4>
 8020086:	3601      	adds	r6, #1
 8020088:	e7d9      	b.n	802003e <_printf_common+0x8e>
	...

0802008c <_printf_i>:
 802008c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020090:	7e0f      	ldrb	r7, [r1, #24]
 8020092:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020094:	2f78      	cmp	r7, #120	@ 0x78
 8020096:	4691      	mov	r9, r2
 8020098:	4680      	mov	r8, r0
 802009a:	460c      	mov	r4, r1
 802009c:	469a      	mov	sl, r3
 802009e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80200a2:	d807      	bhi.n	80200b4 <_printf_i+0x28>
 80200a4:	2f62      	cmp	r7, #98	@ 0x62
 80200a6:	d80a      	bhi.n	80200be <_printf_i+0x32>
 80200a8:	2f00      	cmp	r7, #0
 80200aa:	f000 80d2 	beq.w	8020252 <_printf_i+0x1c6>
 80200ae:	2f58      	cmp	r7, #88	@ 0x58
 80200b0:	f000 80b9 	beq.w	8020226 <_printf_i+0x19a>
 80200b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80200b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80200bc:	e03a      	b.n	8020134 <_printf_i+0xa8>
 80200be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80200c2:	2b15      	cmp	r3, #21
 80200c4:	d8f6      	bhi.n	80200b4 <_printf_i+0x28>
 80200c6:	a101      	add	r1, pc, #4	@ (adr r1, 80200cc <_printf_i+0x40>)
 80200c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80200cc:	08020125 	.word	0x08020125
 80200d0:	08020139 	.word	0x08020139
 80200d4:	080200b5 	.word	0x080200b5
 80200d8:	080200b5 	.word	0x080200b5
 80200dc:	080200b5 	.word	0x080200b5
 80200e0:	080200b5 	.word	0x080200b5
 80200e4:	08020139 	.word	0x08020139
 80200e8:	080200b5 	.word	0x080200b5
 80200ec:	080200b5 	.word	0x080200b5
 80200f0:	080200b5 	.word	0x080200b5
 80200f4:	080200b5 	.word	0x080200b5
 80200f8:	08020239 	.word	0x08020239
 80200fc:	08020163 	.word	0x08020163
 8020100:	080201f3 	.word	0x080201f3
 8020104:	080200b5 	.word	0x080200b5
 8020108:	080200b5 	.word	0x080200b5
 802010c:	0802025b 	.word	0x0802025b
 8020110:	080200b5 	.word	0x080200b5
 8020114:	08020163 	.word	0x08020163
 8020118:	080200b5 	.word	0x080200b5
 802011c:	080200b5 	.word	0x080200b5
 8020120:	080201fb 	.word	0x080201fb
 8020124:	6833      	ldr	r3, [r6, #0]
 8020126:	1d1a      	adds	r2, r3, #4
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	6032      	str	r2, [r6, #0]
 802012c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020130:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020134:	2301      	movs	r3, #1
 8020136:	e09d      	b.n	8020274 <_printf_i+0x1e8>
 8020138:	6833      	ldr	r3, [r6, #0]
 802013a:	6820      	ldr	r0, [r4, #0]
 802013c:	1d19      	adds	r1, r3, #4
 802013e:	6031      	str	r1, [r6, #0]
 8020140:	0606      	lsls	r6, r0, #24
 8020142:	d501      	bpl.n	8020148 <_printf_i+0xbc>
 8020144:	681d      	ldr	r5, [r3, #0]
 8020146:	e003      	b.n	8020150 <_printf_i+0xc4>
 8020148:	0645      	lsls	r5, r0, #25
 802014a:	d5fb      	bpl.n	8020144 <_printf_i+0xb8>
 802014c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020150:	2d00      	cmp	r5, #0
 8020152:	da03      	bge.n	802015c <_printf_i+0xd0>
 8020154:	232d      	movs	r3, #45	@ 0x2d
 8020156:	426d      	negs	r5, r5
 8020158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802015c:	4859      	ldr	r0, [pc, #356]	@ (80202c4 <_printf_i+0x238>)
 802015e:	230a      	movs	r3, #10
 8020160:	e011      	b.n	8020186 <_printf_i+0xfa>
 8020162:	6821      	ldr	r1, [r4, #0]
 8020164:	6833      	ldr	r3, [r6, #0]
 8020166:	0608      	lsls	r0, r1, #24
 8020168:	f853 5b04 	ldr.w	r5, [r3], #4
 802016c:	d402      	bmi.n	8020174 <_printf_i+0xe8>
 802016e:	0649      	lsls	r1, r1, #25
 8020170:	bf48      	it	mi
 8020172:	b2ad      	uxthmi	r5, r5
 8020174:	2f6f      	cmp	r7, #111	@ 0x6f
 8020176:	4853      	ldr	r0, [pc, #332]	@ (80202c4 <_printf_i+0x238>)
 8020178:	6033      	str	r3, [r6, #0]
 802017a:	bf14      	ite	ne
 802017c:	230a      	movne	r3, #10
 802017e:	2308      	moveq	r3, #8
 8020180:	2100      	movs	r1, #0
 8020182:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020186:	6866      	ldr	r6, [r4, #4]
 8020188:	60a6      	str	r6, [r4, #8]
 802018a:	2e00      	cmp	r6, #0
 802018c:	bfa2      	ittt	ge
 802018e:	6821      	ldrge	r1, [r4, #0]
 8020190:	f021 0104 	bicge.w	r1, r1, #4
 8020194:	6021      	strge	r1, [r4, #0]
 8020196:	b90d      	cbnz	r5, 802019c <_printf_i+0x110>
 8020198:	2e00      	cmp	r6, #0
 802019a:	d04b      	beq.n	8020234 <_printf_i+0x1a8>
 802019c:	4616      	mov	r6, r2
 802019e:	fbb5 f1f3 	udiv	r1, r5, r3
 80201a2:	fb03 5711 	mls	r7, r3, r1, r5
 80201a6:	5dc7      	ldrb	r7, [r0, r7]
 80201a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80201ac:	462f      	mov	r7, r5
 80201ae:	42bb      	cmp	r3, r7
 80201b0:	460d      	mov	r5, r1
 80201b2:	d9f4      	bls.n	802019e <_printf_i+0x112>
 80201b4:	2b08      	cmp	r3, #8
 80201b6:	d10b      	bne.n	80201d0 <_printf_i+0x144>
 80201b8:	6823      	ldr	r3, [r4, #0]
 80201ba:	07df      	lsls	r7, r3, #31
 80201bc:	d508      	bpl.n	80201d0 <_printf_i+0x144>
 80201be:	6923      	ldr	r3, [r4, #16]
 80201c0:	6861      	ldr	r1, [r4, #4]
 80201c2:	4299      	cmp	r1, r3
 80201c4:	bfde      	ittt	le
 80201c6:	2330      	movle	r3, #48	@ 0x30
 80201c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80201cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80201d0:	1b92      	subs	r2, r2, r6
 80201d2:	6122      	str	r2, [r4, #16]
 80201d4:	f8cd a000 	str.w	sl, [sp]
 80201d8:	464b      	mov	r3, r9
 80201da:	aa03      	add	r2, sp, #12
 80201dc:	4621      	mov	r1, r4
 80201de:	4640      	mov	r0, r8
 80201e0:	f7ff fee6 	bl	801ffb0 <_printf_common>
 80201e4:	3001      	adds	r0, #1
 80201e6:	d14a      	bne.n	802027e <_printf_i+0x1f2>
 80201e8:	f04f 30ff 	mov.w	r0, #4294967295
 80201ec:	b004      	add	sp, #16
 80201ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201f2:	6823      	ldr	r3, [r4, #0]
 80201f4:	f043 0320 	orr.w	r3, r3, #32
 80201f8:	6023      	str	r3, [r4, #0]
 80201fa:	4833      	ldr	r0, [pc, #204]	@ (80202c8 <_printf_i+0x23c>)
 80201fc:	2778      	movs	r7, #120	@ 0x78
 80201fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020202:	6823      	ldr	r3, [r4, #0]
 8020204:	6831      	ldr	r1, [r6, #0]
 8020206:	061f      	lsls	r7, r3, #24
 8020208:	f851 5b04 	ldr.w	r5, [r1], #4
 802020c:	d402      	bmi.n	8020214 <_printf_i+0x188>
 802020e:	065f      	lsls	r7, r3, #25
 8020210:	bf48      	it	mi
 8020212:	b2ad      	uxthmi	r5, r5
 8020214:	6031      	str	r1, [r6, #0]
 8020216:	07d9      	lsls	r1, r3, #31
 8020218:	bf44      	itt	mi
 802021a:	f043 0320 	orrmi.w	r3, r3, #32
 802021e:	6023      	strmi	r3, [r4, #0]
 8020220:	b11d      	cbz	r5, 802022a <_printf_i+0x19e>
 8020222:	2310      	movs	r3, #16
 8020224:	e7ac      	b.n	8020180 <_printf_i+0xf4>
 8020226:	4827      	ldr	r0, [pc, #156]	@ (80202c4 <_printf_i+0x238>)
 8020228:	e7e9      	b.n	80201fe <_printf_i+0x172>
 802022a:	6823      	ldr	r3, [r4, #0]
 802022c:	f023 0320 	bic.w	r3, r3, #32
 8020230:	6023      	str	r3, [r4, #0]
 8020232:	e7f6      	b.n	8020222 <_printf_i+0x196>
 8020234:	4616      	mov	r6, r2
 8020236:	e7bd      	b.n	80201b4 <_printf_i+0x128>
 8020238:	6833      	ldr	r3, [r6, #0]
 802023a:	6825      	ldr	r5, [r4, #0]
 802023c:	6961      	ldr	r1, [r4, #20]
 802023e:	1d18      	adds	r0, r3, #4
 8020240:	6030      	str	r0, [r6, #0]
 8020242:	062e      	lsls	r6, r5, #24
 8020244:	681b      	ldr	r3, [r3, #0]
 8020246:	d501      	bpl.n	802024c <_printf_i+0x1c0>
 8020248:	6019      	str	r1, [r3, #0]
 802024a:	e002      	b.n	8020252 <_printf_i+0x1c6>
 802024c:	0668      	lsls	r0, r5, #25
 802024e:	d5fb      	bpl.n	8020248 <_printf_i+0x1bc>
 8020250:	8019      	strh	r1, [r3, #0]
 8020252:	2300      	movs	r3, #0
 8020254:	6123      	str	r3, [r4, #16]
 8020256:	4616      	mov	r6, r2
 8020258:	e7bc      	b.n	80201d4 <_printf_i+0x148>
 802025a:	6833      	ldr	r3, [r6, #0]
 802025c:	1d1a      	adds	r2, r3, #4
 802025e:	6032      	str	r2, [r6, #0]
 8020260:	681e      	ldr	r6, [r3, #0]
 8020262:	6862      	ldr	r2, [r4, #4]
 8020264:	2100      	movs	r1, #0
 8020266:	4630      	mov	r0, r6
 8020268:	f7df ffe2 	bl	8000230 <memchr>
 802026c:	b108      	cbz	r0, 8020272 <_printf_i+0x1e6>
 802026e:	1b80      	subs	r0, r0, r6
 8020270:	6060      	str	r0, [r4, #4]
 8020272:	6863      	ldr	r3, [r4, #4]
 8020274:	6123      	str	r3, [r4, #16]
 8020276:	2300      	movs	r3, #0
 8020278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802027c:	e7aa      	b.n	80201d4 <_printf_i+0x148>
 802027e:	6923      	ldr	r3, [r4, #16]
 8020280:	4632      	mov	r2, r6
 8020282:	4649      	mov	r1, r9
 8020284:	4640      	mov	r0, r8
 8020286:	47d0      	blx	sl
 8020288:	3001      	adds	r0, #1
 802028a:	d0ad      	beq.n	80201e8 <_printf_i+0x15c>
 802028c:	6823      	ldr	r3, [r4, #0]
 802028e:	079b      	lsls	r3, r3, #30
 8020290:	d413      	bmi.n	80202ba <_printf_i+0x22e>
 8020292:	68e0      	ldr	r0, [r4, #12]
 8020294:	9b03      	ldr	r3, [sp, #12]
 8020296:	4298      	cmp	r0, r3
 8020298:	bfb8      	it	lt
 802029a:	4618      	movlt	r0, r3
 802029c:	e7a6      	b.n	80201ec <_printf_i+0x160>
 802029e:	2301      	movs	r3, #1
 80202a0:	4632      	mov	r2, r6
 80202a2:	4649      	mov	r1, r9
 80202a4:	4640      	mov	r0, r8
 80202a6:	47d0      	blx	sl
 80202a8:	3001      	adds	r0, #1
 80202aa:	d09d      	beq.n	80201e8 <_printf_i+0x15c>
 80202ac:	3501      	adds	r5, #1
 80202ae:	68e3      	ldr	r3, [r4, #12]
 80202b0:	9903      	ldr	r1, [sp, #12]
 80202b2:	1a5b      	subs	r3, r3, r1
 80202b4:	42ab      	cmp	r3, r5
 80202b6:	dcf2      	bgt.n	802029e <_printf_i+0x212>
 80202b8:	e7eb      	b.n	8020292 <_printf_i+0x206>
 80202ba:	2500      	movs	r5, #0
 80202bc:	f104 0619 	add.w	r6, r4, #25
 80202c0:	e7f5      	b.n	80202ae <_printf_i+0x222>
 80202c2:	bf00      	nop
 80202c4:	080299d9 	.word	0x080299d9
 80202c8:	080299ea 	.word	0x080299ea

080202cc <__sflush_r>:
 80202cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80202d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202d4:	0716      	lsls	r6, r2, #28
 80202d6:	4605      	mov	r5, r0
 80202d8:	460c      	mov	r4, r1
 80202da:	d454      	bmi.n	8020386 <__sflush_r+0xba>
 80202dc:	684b      	ldr	r3, [r1, #4]
 80202de:	2b00      	cmp	r3, #0
 80202e0:	dc02      	bgt.n	80202e8 <__sflush_r+0x1c>
 80202e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	dd48      	ble.n	802037a <__sflush_r+0xae>
 80202e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80202ea:	2e00      	cmp	r6, #0
 80202ec:	d045      	beq.n	802037a <__sflush_r+0xae>
 80202ee:	2300      	movs	r3, #0
 80202f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80202f4:	682f      	ldr	r7, [r5, #0]
 80202f6:	6a21      	ldr	r1, [r4, #32]
 80202f8:	602b      	str	r3, [r5, #0]
 80202fa:	d030      	beq.n	802035e <__sflush_r+0x92>
 80202fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80202fe:	89a3      	ldrh	r3, [r4, #12]
 8020300:	0759      	lsls	r1, r3, #29
 8020302:	d505      	bpl.n	8020310 <__sflush_r+0x44>
 8020304:	6863      	ldr	r3, [r4, #4]
 8020306:	1ad2      	subs	r2, r2, r3
 8020308:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802030a:	b10b      	cbz	r3, 8020310 <__sflush_r+0x44>
 802030c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802030e:	1ad2      	subs	r2, r2, r3
 8020310:	2300      	movs	r3, #0
 8020312:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020314:	6a21      	ldr	r1, [r4, #32]
 8020316:	4628      	mov	r0, r5
 8020318:	47b0      	blx	r6
 802031a:	1c43      	adds	r3, r0, #1
 802031c:	89a3      	ldrh	r3, [r4, #12]
 802031e:	d106      	bne.n	802032e <__sflush_r+0x62>
 8020320:	6829      	ldr	r1, [r5, #0]
 8020322:	291d      	cmp	r1, #29
 8020324:	d82b      	bhi.n	802037e <__sflush_r+0xb2>
 8020326:	4a2a      	ldr	r2, [pc, #168]	@ (80203d0 <__sflush_r+0x104>)
 8020328:	410a      	asrs	r2, r1
 802032a:	07d6      	lsls	r6, r2, #31
 802032c:	d427      	bmi.n	802037e <__sflush_r+0xb2>
 802032e:	2200      	movs	r2, #0
 8020330:	6062      	str	r2, [r4, #4]
 8020332:	04d9      	lsls	r1, r3, #19
 8020334:	6922      	ldr	r2, [r4, #16]
 8020336:	6022      	str	r2, [r4, #0]
 8020338:	d504      	bpl.n	8020344 <__sflush_r+0x78>
 802033a:	1c42      	adds	r2, r0, #1
 802033c:	d101      	bne.n	8020342 <__sflush_r+0x76>
 802033e:	682b      	ldr	r3, [r5, #0]
 8020340:	b903      	cbnz	r3, 8020344 <__sflush_r+0x78>
 8020342:	6560      	str	r0, [r4, #84]	@ 0x54
 8020344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020346:	602f      	str	r7, [r5, #0]
 8020348:	b1b9      	cbz	r1, 802037a <__sflush_r+0xae>
 802034a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802034e:	4299      	cmp	r1, r3
 8020350:	d002      	beq.n	8020358 <__sflush_r+0x8c>
 8020352:	4628      	mov	r0, r5
 8020354:	f7fe fb36 	bl	801e9c4 <_free_r>
 8020358:	2300      	movs	r3, #0
 802035a:	6363      	str	r3, [r4, #52]	@ 0x34
 802035c:	e00d      	b.n	802037a <__sflush_r+0xae>
 802035e:	2301      	movs	r3, #1
 8020360:	4628      	mov	r0, r5
 8020362:	47b0      	blx	r6
 8020364:	4602      	mov	r2, r0
 8020366:	1c50      	adds	r0, r2, #1
 8020368:	d1c9      	bne.n	80202fe <__sflush_r+0x32>
 802036a:	682b      	ldr	r3, [r5, #0]
 802036c:	2b00      	cmp	r3, #0
 802036e:	d0c6      	beq.n	80202fe <__sflush_r+0x32>
 8020370:	2b1d      	cmp	r3, #29
 8020372:	d001      	beq.n	8020378 <__sflush_r+0xac>
 8020374:	2b16      	cmp	r3, #22
 8020376:	d11e      	bne.n	80203b6 <__sflush_r+0xea>
 8020378:	602f      	str	r7, [r5, #0]
 802037a:	2000      	movs	r0, #0
 802037c:	e022      	b.n	80203c4 <__sflush_r+0xf8>
 802037e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020382:	b21b      	sxth	r3, r3
 8020384:	e01b      	b.n	80203be <__sflush_r+0xf2>
 8020386:	690f      	ldr	r7, [r1, #16]
 8020388:	2f00      	cmp	r7, #0
 802038a:	d0f6      	beq.n	802037a <__sflush_r+0xae>
 802038c:	0793      	lsls	r3, r2, #30
 802038e:	680e      	ldr	r6, [r1, #0]
 8020390:	bf08      	it	eq
 8020392:	694b      	ldreq	r3, [r1, #20]
 8020394:	600f      	str	r7, [r1, #0]
 8020396:	bf18      	it	ne
 8020398:	2300      	movne	r3, #0
 802039a:	eba6 0807 	sub.w	r8, r6, r7
 802039e:	608b      	str	r3, [r1, #8]
 80203a0:	f1b8 0f00 	cmp.w	r8, #0
 80203a4:	dde9      	ble.n	802037a <__sflush_r+0xae>
 80203a6:	6a21      	ldr	r1, [r4, #32]
 80203a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80203aa:	4643      	mov	r3, r8
 80203ac:	463a      	mov	r2, r7
 80203ae:	4628      	mov	r0, r5
 80203b0:	47b0      	blx	r6
 80203b2:	2800      	cmp	r0, #0
 80203b4:	dc08      	bgt.n	80203c8 <__sflush_r+0xfc>
 80203b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80203ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80203be:	81a3      	strh	r3, [r4, #12]
 80203c0:	f04f 30ff 	mov.w	r0, #4294967295
 80203c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203c8:	4407      	add	r7, r0
 80203ca:	eba8 0800 	sub.w	r8, r8, r0
 80203ce:	e7e7      	b.n	80203a0 <__sflush_r+0xd4>
 80203d0:	dfbffffe 	.word	0xdfbffffe

080203d4 <_fflush_r>:
 80203d4:	b538      	push	{r3, r4, r5, lr}
 80203d6:	690b      	ldr	r3, [r1, #16]
 80203d8:	4605      	mov	r5, r0
 80203da:	460c      	mov	r4, r1
 80203dc:	b913      	cbnz	r3, 80203e4 <_fflush_r+0x10>
 80203de:	2500      	movs	r5, #0
 80203e0:	4628      	mov	r0, r5
 80203e2:	bd38      	pop	{r3, r4, r5, pc}
 80203e4:	b118      	cbz	r0, 80203ee <_fflush_r+0x1a>
 80203e6:	6a03      	ldr	r3, [r0, #32]
 80203e8:	b90b      	cbnz	r3, 80203ee <_fflush_r+0x1a>
 80203ea:	f7fe f915 	bl	801e618 <__sinit>
 80203ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	d0f3      	beq.n	80203de <_fflush_r+0xa>
 80203f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80203f8:	07d0      	lsls	r0, r2, #31
 80203fa:	d404      	bmi.n	8020406 <_fflush_r+0x32>
 80203fc:	0599      	lsls	r1, r3, #22
 80203fe:	d402      	bmi.n	8020406 <_fflush_r+0x32>
 8020400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020402:	f7fe face 	bl	801e9a2 <__retarget_lock_acquire_recursive>
 8020406:	4628      	mov	r0, r5
 8020408:	4621      	mov	r1, r4
 802040a:	f7ff ff5f 	bl	80202cc <__sflush_r>
 802040e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020410:	07da      	lsls	r2, r3, #31
 8020412:	4605      	mov	r5, r0
 8020414:	d4e4      	bmi.n	80203e0 <_fflush_r+0xc>
 8020416:	89a3      	ldrh	r3, [r4, #12]
 8020418:	059b      	lsls	r3, r3, #22
 802041a:	d4e1      	bmi.n	80203e0 <_fflush_r+0xc>
 802041c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802041e:	f7fe fac1 	bl	801e9a4 <__retarget_lock_release_recursive>
 8020422:	e7dd      	b.n	80203e0 <_fflush_r+0xc>

08020424 <__swbuf_r>:
 8020424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020426:	460e      	mov	r6, r1
 8020428:	4614      	mov	r4, r2
 802042a:	4605      	mov	r5, r0
 802042c:	b118      	cbz	r0, 8020436 <__swbuf_r+0x12>
 802042e:	6a03      	ldr	r3, [r0, #32]
 8020430:	b90b      	cbnz	r3, 8020436 <__swbuf_r+0x12>
 8020432:	f7fe f8f1 	bl	801e618 <__sinit>
 8020436:	69a3      	ldr	r3, [r4, #24]
 8020438:	60a3      	str	r3, [r4, #8]
 802043a:	89a3      	ldrh	r3, [r4, #12]
 802043c:	071a      	lsls	r2, r3, #28
 802043e:	d501      	bpl.n	8020444 <__swbuf_r+0x20>
 8020440:	6923      	ldr	r3, [r4, #16]
 8020442:	b943      	cbnz	r3, 8020456 <__swbuf_r+0x32>
 8020444:	4621      	mov	r1, r4
 8020446:	4628      	mov	r0, r5
 8020448:	f000 f82a 	bl	80204a0 <__swsetup_r>
 802044c:	b118      	cbz	r0, 8020456 <__swbuf_r+0x32>
 802044e:	f04f 37ff 	mov.w	r7, #4294967295
 8020452:	4638      	mov	r0, r7
 8020454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020456:	6823      	ldr	r3, [r4, #0]
 8020458:	6922      	ldr	r2, [r4, #16]
 802045a:	1a98      	subs	r0, r3, r2
 802045c:	6963      	ldr	r3, [r4, #20]
 802045e:	b2f6      	uxtb	r6, r6
 8020460:	4283      	cmp	r3, r0
 8020462:	4637      	mov	r7, r6
 8020464:	dc05      	bgt.n	8020472 <__swbuf_r+0x4e>
 8020466:	4621      	mov	r1, r4
 8020468:	4628      	mov	r0, r5
 802046a:	f7ff ffb3 	bl	80203d4 <_fflush_r>
 802046e:	2800      	cmp	r0, #0
 8020470:	d1ed      	bne.n	802044e <__swbuf_r+0x2a>
 8020472:	68a3      	ldr	r3, [r4, #8]
 8020474:	3b01      	subs	r3, #1
 8020476:	60a3      	str	r3, [r4, #8]
 8020478:	6823      	ldr	r3, [r4, #0]
 802047a:	1c5a      	adds	r2, r3, #1
 802047c:	6022      	str	r2, [r4, #0]
 802047e:	701e      	strb	r6, [r3, #0]
 8020480:	6962      	ldr	r2, [r4, #20]
 8020482:	1c43      	adds	r3, r0, #1
 8020484:	429a      	cmp	r2, r3
 8020486:	d004      	beq.n	8020492 <__swbuf_r+0x6e>
 8020488:	89a3      	ldrh	r3, [r4, #12]
 802048a:	07db      	lsls	r3, r3, #31
 802048c:	d5e1      	bpl.n	8020452 <__swbuf_r+0x2e>
 802048e:	2e0a      	cmp	r6, #10
 8020490:	d1df      	bne.n	8020452 <__swbuf_r+0x2e>
 8020492:	4621      	mov	r1, r4
 8020494:	4628      	mov	r0, r5
 8020496:	f7ff ff9d 	bl	80203d4 <_fflush_r>
 802049a:	2800      	cmp	r0, #0
 802049c:	d0d9      	beq.n	8020452 <__swbuf_r+0x2e>
 802049e:	e7d6      	b.n	802044e <__swbuf_r+0x2a>

080204a0 <__swsetup_r>:
 80204a0:	b538      	push	{r3, r4, r5, lr}
 80204a2:	4b29      	ldr	r3, [pc, #164]	@ (8020548 <__swsetup_r+0xa8>)
 80204a4:	4605      	mov	r5, r0
 80204a6:	6818      	ldr	r0, [r3, #0]
 80204a8:	460c      	mov	r4, r1
 80204aa:	b118      	cbz	r0, 80204b4 <__swsetup_r+0x14>
 80204ac:	6a03      	ldr	r3, [r0, #32]
 80204ae:	b90b      	cbnz	r3, 80204b4 <__swsetup_r+0x14>
 80204b0:	f7fe f8b2 	bl	801e618 <__sinit>
 80204b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204b8:	0719      	lsls	r1, r3, #28
 80204ba:	d422      	bmi.n	8020502 <__swsetup_r+0x62>
 80204bc:	06da      	lsls	r2, r3, #27
 80204be:	d407      	bmi.n	80204d0 <__swsetup_r+0x30>
 80204c0:	2209      	movs	r2, #9
 80204c2:	602a      	str	r2, [r5, #0]
 80204c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80204c8:	81a3      	strh	r3, [r4, #12]
 80204ca:	f04f 30ff 	mov.w	r0, #4294967295
 80204ce:	e033      	b.n	8020538 <__swsetup_r+0x98>
 80204d0:	0758      	lsls	r0, r3, #29
 80204d2:	d512      	bpl.n	80204fa <__swsetup_r+0x5a>
 80204d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80204d6:	b141      	cbz	r1, 80204ea <__swsetup_r+0x4a>
 80204d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80204dc:	4299      	cmp	r1, r3
 80204de:	d002      	beq.n	80204e6 <__swsetup_r+0x46>
 80204e0:	4628      	mov	r0, r5
 80204e2:	f7fe fa6f 	bl	801e9c4 <_free_r>
 80204e6:	2300      	movs	r3, #0
 80204e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80204ea:	89a3      	ldrh	r3, [r4, #12]
 80204ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80204f0:	81a3      	strh	r3, [r4, #12]
 80204f2:	2300      	movs	r3, #0
 80204f4:	6063      	str	r3, [r4, #4]
 80204f6:	6923      	ldr	r3, [r4, #16]
 80204f8:	6023      	str	r3, [r4, #0]
 80204fa:	89a3      	ldrh	r3, [r4, #12]
 80204fc:	f043 0308 	orr.w	r3, r3, #8
 8020500:	81a3      	strh	r3, [r4, #12]
 8020502:	6923      	ldr	r3, [r4, #16]
 8020504:	b94b      	cbnz	r3, 802051a <__swsetup_r+0x7a>
 8020506:	89a3      	ldrh	r3, [r4, #12]
 8020508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802050c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020510:	d003      	beq.n	802051a <__swsetup_r+0x7a>
 8020512:	4621      	mov	r1, r4
 8020514:	4628      	mov	r0, r5
 8020516:	f000 f83f 	bl	8020598 <__smakebuf_r>
 802051a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802051e:	f013 0201 	ands.w	r2, r3, #1
 8020522:	d00a      	beq.n	802053a <__swsetup_r+0x9a>
 8020524:	2200      	movs	r2, #0
 8020526:	60a2      	str	r2, [r4, #8]
 8020528:	6962      	ldr	r2, [r4, #20]
 802052a:	4252      	negs	r2, r2
 802052c:	61a2      	str	r2, [r4, #24]
 802052e:	6922      	ldr	r2, [r4, #16]
 8020530:	b942      	cbnz	r2, 8020544 <__swsetup_r+0xa4>
 8020532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020536:	d1c5      	bne.n	80204c4 <__swsetup_r+0x24>
 8020538:	bd38      	pop	{r3, r4, r5, pc}
 802053a:	0799      	lsls	r1, r3, #30
 802053c:	bf58      	it	pl
 802053e:	6962      	ldrpl	r2, [r4, #20]
 8020540:	60a2      	str	r2, [r4, #8]
 8020542:	e7f4      	b.n	802052e <__swsetup_r+0x8e>
 8020544:	2000      	movs	r0, #0
 8020546:	e7f7      	b.n	8020538 <__swsetup_r+0x98>
 8020548:	20005340 	.word	0x20005340

0802054c <__swhatbuf_r>:
 802054c:	b570      	push	{r4, r5, r6, lr}
 802054e:	460c      	mov	r4, r1
 8020550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020554:	2900      	cmp	r1, #0
 8020556:	b096      	sub	sp, #88	@ 0x58
 8020558:	4615      	mov	r5, r2
 802055a:	461e      	mov	r6, r3
 802055c:	da0d      	bge.n	802057a <__swhatbuf_r+0x2e>
 802055e:	89a3      	ldrh	r3, [r4, #12]
 8020560:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020564:	f04f 0100 	mov.w	r1, #0
 8020568:	bf14      	ite	ne
 802056a:	2340      	movne	r3, #64	@ 0x40
 802056c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020570:	2000      	movs	r0, #0
 8020572:	6031      	str	r1, [r6, #0]
 8020574:	602b      	str	r3, [r5, #0]
 8020576:	b016      	add	sp, #88	@ 0x58
 8020578:	bd70      	pop	{r4, r5, r6, pc}
 802057a:	466a      	mov	r2, sp
 802057c:	f000 f848 	bl	8020610 <_fstat_r>
 8020580:	2800      	cmp	r0, #0
 8020582:	dbec      	blt.n	802055e <__swhatbuf_r+0x12>
 8020584:	9901      	ldr	r1, [sp, #4]
 8020586:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802058a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802058e:	4259      	negs	r1, r3
 8020590:	4159      	adcs	r1, r3
 8020592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020596:	e7eb      	b.n	8020570 <__swhatbuf_r+0x24>

08020598 <__smakebuf_r>:
 8020598:	898b      	ldrh	r3, [r1, #12]
 802059a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802059c:	079d      	lsls	r5, r3, #30
 802059e:	4606      	mov	r6, r0
 80205a0:	460c      	mov	r4, r1
 80205a2:	d507      	bpl.n	80205b4 <__smakebuf_r+0x1c>
 80205a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80205a8:	6023      	str	r3, [r4, #0]
 80205aa:	6123      	str	r3, [r4, #16]
 80205ac:	2301      	movs	r3, #1
 80205ae:	6163      	str	r3, [r4, #20]
 80205b0:	b003      	add	sp, #12
 80205b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205b4:	ab01      	add	r3, sp, #4
 80205b6:	466a      	mov	r2, sp
 80205b8:	f7ff ffc8 	bl	802054c <__swhatbuf_r>
 80205bc:	9f00      	ldr	r7, [sp, #0]
 80205be:	4605      	mov	r5, r0
 80205c0:	4639      	mov	r1, r7
 80205c2:	4630      	mov	r0, r6
 80205c4:	f7fd f8d2 	bl	801d76c <_malloc_r>
 80205c8:	b948      	cbnz	r0, 80205de <__smakebuf_r+0x46>
 80205ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80205ce:	059a      	lsls	r2, r3, #22
 80205d0:	d4ee      	bmi.n	80205b0 <__smakebuf_r+0x18>
 80205d2:	f023 0303 	bic.w	r3, r3, #3
 80205d6:	f043 0302 	orr.w	r3, r3, #2
 80205da:	81a3      	strh	r3, [r4, #12]
 80205dc:	e7e2      	b.n	80205a4 <__smakebuf_r+0xc>
 80205de:	89a3      	ldrh	r3, [r4, #12]
 80205e0:	6020      	str	r0, [r4, #0]
 80205e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80205e6:	81a3      	strh	r3, [r4, #12]
 80205e8:	9b01      	ldr	r3, [sp, #4]
 80205ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80205ee:	b15b      	cbz	r3, 8020608 <__smakebuf_r+0x70>
 80205f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80205f4:	4630      	mov	r0, r6
 80205f6:	f000 f81d 	bl	8020634 <_isatty_r>
 80205fa:	b128      	cbz	r0, 8020608 <__smakebuf_r+0x70>
 80205fc:	89a3      	ldrh	r3, [r4, #12]
 80205fe:	f023 0303 	bic.w	r3, r3, #3
 8020602:	f043 0301 	orr.w	r3, r3, #1
 8020606:	81a3      	strh	r3, [r4, #12]
 8020608:	89a3      	ldrh	r3, [r4, #12]
 802060a:	431d      	orrs	r5, r3
 802060c:	81a5      	strh	r5, [r4, #12]
 802060e:	e7cf      	b.n	80205b0 <__smakebuf_r+0x18>

08020610 <_fstat_r>:
 8020610:	b538      	push	{r3, r4, r5, lr}
 8020612:	4d07      	ldr	r5, [pc, #28]	@ (8020630 <_fstat_r+0x20>)
 8020614:	2300      	movs	r3, #0
 8020616:	4604      	mov	r4, r0
 8020618:	4608      	mov	r0, r1
 802061a:	4611      	mov	r1, r2
 802061c:	602b      	str	r3, [r5, #0]
 802061e:	f7ef ff95 	bl	801054c <_fstat>
 8020622:	1c43      	adds	r3, r0, #1
 8020624:	d102      	bne.n	802062c <_fstat_r+0x1c>
 8020626:	682b      	ldr	r3, [r5, #0]
 8020628:	b103      	cbz	r3, 802062c <_fstat_r+0x1c>
 802062a:	6023      	str	r3, [r4, #0]
 802062c:	bd38      	pop	{r3, r4, r5, pc}
 802062e:	bf00      	nop
 8020630:	200057ec 	.word	0x200057ec

08020634 <_isatty_r>:
 8020634:	b538      	push	{r3, r4, r5, lr}
 8020636:	4d06      	ldr	r5, [pc, #24]	@ (8020650 <_isatty_r+0x1c>)
 8020638:	2300      	movs	r3, #0
 802063a:	4604      	mov	r4, r0
 802063c:	4608      	mov	r0, r1
 802063e:	602b      	str	r3, [r5, #0]
 8020640:	f7ef ff94 	bl	801056c <_isatty>
 8020644:	1c43      	adds	r3, r0, #1
 8020646:	d102      	bne.n	802064e <_isatty_r+0x1a>
 8020648:	682b      	ldr	r3, [r5, #0]
 802064a:	b103      	cbz	r3, 802064e <_isatty_r+0x1a>
 802064c:	6023      	str	r3, [r4, #0]
 802064e:	bd38      	pop	{r3, r4, r5, pc}
 8020650:	200057ec 	.word	0x200057ec

08020654 <_init>:
 8020654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020656:	bf00      	nop
 8020658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802065a:	bc08      	pop	{r3}
 802065c:	469e      	mov	lr, r3
 802065e:	4770      	bx	lr

08020660 <_fini>:
 8020660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020662:	bf00      	nop
 8020664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020666:	bc08      	pop	{r3}
 8020668:	469e      	mov	lr, r3
 802066a:	4770      	bx	lr
